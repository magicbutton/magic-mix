// Package openapiUsersEvents provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version (devel) DO NOT EDIT.
package userevents

import (
	"bytes"
	"compress/gzip"
	"context"
	"encoding/base64"
	"encoding/json"
	"fmt"
	"io"
	"net/http"
	"net/url"
	"path"
	"strings"
	"time"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	openapi_types "github.com/deepmap/oapi-codegen/pkg/types"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// Defines values for MicrosoftGraphActionState.
const (
	MicrosoftGraphActionStateActive       MicrosoftGraphActionState = "active"
	MicrosoftGraphActionStateCanceled     MicrosoftGraphActionState = "canceled"
	MicrosoftGraphActionStateDone         MicrosoftGraphActionState = "done"
	MicrosoftGraphActionStateFailed       MicrosoftGraphActionState = "failed"
	MicrosoftGraphActionStateNone         MicrosoftGraphActionState = "none"
	MicrosoftGraphActionStateNotSupported MicrosoftGraphActionState = "notSupported"
	MicrosoftGraphActionStatePending      MicrosoftGraphActionState = "pending"
)

// Defines values for MicrosoftGraphAgreementAcceptanceState.
const (
	MicrosoftGraphAgreementAcceptanceStateAccepted           MicrosoftGraphAgreementAcceptanceState = "accepted"
	MicrosoftGraphAgreementAcceptanceStateDeclined           MicrosoftGraphAgreementAcceptanceState = "declined"
	MicrosoftGraphAgreementAcceptanceStateUnknownFutureValue MicrosoftGraphAgreementAcceptanceState = "unknownFutureValue"
)

// Defines values for MicrosoftGraphAppLogUploadState.
const (
	MicrosoftGraphAppLogUploadStateCompleted          MicrosoftGraphAppLogUploadState = "completed"
	MicrosoftGraphAppLogUploadStateFailed             MicrosoftGraphAppLogUploadState = "failed"
	MicrosoftGraphAppLogUploadStatePending            MicrosoftGraphAppLogUploadState = "pending"
	MicrosoftGraphAppLogUploadStateUnknownFutureValue MicrosoftGraphAppLogUploadState = "unknownFutureValue"
)

// Defines values for MicrosoftGraphAttachmentType.
const (
	MicrosoftGraphAttachmentTypeFile      MicrosoftGraphAttachmentType = "file"
	MicrosoftGraphAttachmentTypeItem      MicrosoftGraphAttachmentType = "item"
	MicrosoftGraphAttachmentTypeReference MicrosoftGraphAttachmentType = "reference"
)

// Defines values for MicrosoftGraphAttendeeType.
const (
	Optional MicrosoftGraphAttendeeType = "optional"
	Required MicrosoftGraphAttendeeType = "required"
	Resource MicrosoftGraphAttendeeType = "resource"
)

// Defines values for MicrosoftGraphAttestationLevel.
const (
	MicrosoftGraphAttestationLevelAttested           MicrosoftGraphAttestationLevel = "attested"
	MicrosoftGraphAttestationLevelNotAttested        MicrosoftGraphAttestationLevel = "notAttested"
	MicrosoftGraphAttestationLevelUnknownFutureValue MicrosoftGraphAttestationLevel = "unknownFutureValue"
)

// Defines values for MicrosoftGraphAuthenticationMethodKeyStrength.
const (
	MicrosoftGraphAuthenticationMethodKeyStrengthNormal  MicrosoftGraphAuthenticationMethodKeyStrength = "normal"
	MicrosoftGraphAuthenticationMethodKeyStrengthUnknown MicrosoftGraphAuthenticationMethodKeyStrength = "unknown"
	MicrosoftGraphAuthenticationMethodKeyStrengthWeak    MicrosoftGraphAuthenticationMethodKeyStrength = "weak"
)

// Defines values for MicrosoftGraphAuthenticationMethodSignInState.
const (
	MicrosoftGraphAuthenticationMethodSignInStateNotAllowedByPolicy   MicrosoftGraphAuthenticationMethodSignInState = "notAllowedByPolicy"
	MicrosoftGraphAuthenticationMethodSignInStateNotConfigured        MicrosoftGraphAuthenticationMethodSignInState = "notConfigured"
	MicrosoftGraphAuthenticationMethodSignInStateNotEnabled           MicrosoftGraphAuthenticationMethodSignInState = "notEnabled"
	MicrosoftGraphAuthenticationMethodSignInStateNotSupported         MicrosoftGraphAuthenticationMethodSignInState = "notSupported"
	MicrosoftGraphAuthenticationMethodSignInStatePhoneNumberNotUnique MicrosoftGraphAuthenticationMethodSignInState = "phoneNumberNotUnique"
	MicrosoftGraphAuthenticationMethodSignInStateReady                MicrosoftGraphAuthenticationMethodSignInState = "ready"
	MicrosoftGraphAuthenticationMethodSignInStateUnknownFutureValue   MicrosoftGraphAuthenticationMethodSignInState = "unknownFutureValue"
)

// Defines values for MicrosoftGraphAuthenticationPhoneType.
const (
	MicrosoftGraphAuthenticationPhoneTypeAlternateMobile    MicrosoftGraphAuthenticationPhoneType = "alternateMobile"
	MicrosoftGraphAuthenticationPhoneTypeMobile             MicrosoftGraphAuthenticationPhoneType = "mobile"
	MicrosoftGraphAuthenticationPhoneTypeOffice             MicrosoftGraphAuthenticationPhoneType = "office"
	MicrosoftGraphAuthenticationPhoneTypeUnknownFutureValue MicrosoftGraphAuthenticationPhoneType = "unknownFutureValue"
)

// Defines values for MicrosoftGraphAutomaticRepliesStatus.
const (
	MicrosoftGraphAutomaticRepliesStatusAlwaysEnabled MicrosoftGraphAutomaticRepliesStatus = "alwaysEnabled"
	MicrosoftGraphAutomaticRepliesStatusDisabled      MicrosoftGraphAutomaticRepliesStatus = "disabled"
	MicrosoftGraphAutomaticRepliesStatusScheduled     MicrosoftGraphAutomaticRepliesStatus = "scheduled"
)

// Defines values for MicrosoftGraphBodyType.
const (
	MicrosoftGraphBodyTypeHtml MicrosoftGraphBodyType = "html"
	MicrosoftGraphBodyTypeText MicrosoftGraphBodyType = "text"
)

// Defines values for MicrosoftGraphBroadcastMeetingAudience.
const (
	MicrosoftGraphBroadcastMeetingAudienceEveryone           MicrosoftGraphBroadcastMeetingAudience = "everyone"
	MicrosoftGraphBroadcastMeetingAudienceOrganization       MicrosoftGraphBroadcastMeetingAudience = "organization"
	MicrosoftGraphBroadcastMeetingAudienceRoleIsAttendee     MicrosoftGraphBroadcastMeetingAudience = "roleIsAttendee"
	MicrosoftGraphBroadcastMeetingAudienceUnknownFutureValue MicrosoftGraphBroadcastMeetingAudience = "unknownFutureValue"
)

// Defines values for MicrosoftGraphCalendarColor.
const (
	MicrosoftGraphCalendarColorAuto        MicrosoftGraphCalendarColor = "auto"
	MicrosoftGraphCalendarColorLightBlue   MicrosoftGraphCalendarColor = "lightBlue"
	MicrosoftGraphCalendarColorLightBrown  MicrosoftGraphCalendarColor = "lightBrown"
	MicrosoftGraphCalendarColorLightGray   MicrosoftGraphCalendarColor = "lightGray"
	MicrosoftGraphCalendarColorLightGreen  MicrosoftGraphCalendarColor = "lightGreen"
	MicrosoftGraphCalendarColorLightOrange MicrosoftGraphCalendarColor = "lightOrange"
	MicrosoftGraphCalendarColorLightPink   MicrosoftGraphCalendarColor = "lightPink"
	MicrosoftGraphCalendarColorLightRed    MicrosoftGraphCalendarColor = "lightRed"
	MicrosoftGraphCalendarColorLightTeal   MicrosoftGraphCalendarColor = "lightTeal"
	MicrosoftGraphCalendarColorLightYellow MicrosoftGraphCalendarColor = "lightYellow"
	MicrosoftGraphCalendarColorMaxColor    MicrosoftGraphCalendarColor = "maxColor"
)

// Defines values for MicrosoftGraphCalendarRoleType.
const (
	MicrosoftGraphCalendarRoleTypeCustom                            MicrosoftGraphCalendarRoleType = "custom"
	MicrosoftGraphCalendarRoleTypeDelegateWithPrivateEventAccess    MicrosoftGraphCalendarRoleType = "delegateWithPrivateEventAccess"
	MicrosoftGraphCalendarRoleTypeDelegateWithoutPrivateEventAccess MicrosoftGraphCalendarRoleType = "delegateWithoutPrivateEventAccess"
	MicrosoftGraphCalendarRoleTypeFreeBusyRead                      MicrosoftGraphCalendarRoleType = "freeBusyRead"
	MicrosoftGraphCalendarRoleTypeLimitedRead                       MicrosoftGraphCalendarRoleType = "limitedRead"
	MicrosoftGraphCalendarRoleTypeNone                              MicrosoftGraphCalendarRoleType = "none"
	MicrosoftGraphCalendarRoleTypeRead                              MicrosoftGraphCalendarRoleType = "read"
	MicrosoftGraphCalendarRoleTypeWrite                             MicrosoftGraphCalendarRoleType = "write"
)

// Defines values for MicrosoftGraphCategoryColor.
const (
	MicrosoftGraphCategoryColorNone     MicrosoftGraphCategoryColor = "none"
	MicrosoftGraphCategoryColorPreset0  MicrosoftGraphCategoryColor = "preset0"
	MicrosoftGraphCategoryColorPreset1  MicrosoftGraphCategoryColor = "preset1"
	MicrosoftGraphCategoryColorPreset10 MicrosoftGraphCategoryColor = "preset10"
	MicrosoftGraphCategoryColorPreset11 MicrosoftGraphCategoryColor = "preset11"
	MicrosoftGraphCategoryColorPreset12 MicrosoftGraphCategoryColor = "preset12"
	MicrosoftGraphCategoryColorPreset13 MicrosoftGraphCategoryColor = "preset13"
	MicrosoftGraphCategoryColorPreset14 MicrosoftGraphCategoryColor = "preset14"
	MicrosoftGraphCategoryColorPreset15 MicrosoftGraphCategoryColor = "preset15"
	MicrosoftGraphCategoryColorPreset16 MicrosoftGraphCategoryColor = "preset16"
	MicrosoftGraphCategoryColorPreset17 MicrosoftGraphCategoryColor = "preset17"
	MicrosoftGraphCategoryColorPreset18 MicrosoftGraphCategoryColor = "preset18"
	MicrosoftGraphCategoryColorPreset19 MicrosoftGraphCategoryColor = "preset19"
	MicrosoftGraphCategoryColorPreset2  MicrosoftGraphCategoryColor = "preset2"
	MicrosoftGraphCategoryColorPreset20 MicrosoftGraphCategoryColor = "preset20"
	MicrosoftGraphCategoryColorPreset21 MicrosoftGraphCategoryColor = "preset21"
	MicrosoftGraphCategoryColorPreset22 MicrosoftGraphCategoryColor = "preset22"
	MicrosoftGraphCategoryColorPreset23 MicrosoftGraphCategoryColor = "preset23"
	MicrosoftGraphCategoryColorPreset24 MicrosoftGraphCategoryColor = "preset24"
	MicrosoftGraphCategoryColorPreset3  MicrosoftGraphCategoryColor = "preset3"
	MicrosoftGraphCategoryColorPreset4  MicrosoftGraphCategoryColor = "preset4"
	MicrosoftGraphCategoryColorPreset5  MicrosoftGraphCategoryColor = "preset5"
	MicrosoftGraphCategoryColorPreset6  MicrosoftGraphCategoryColor = "preset6"
	MicrosoftGraphCategoryColorPreset7  MicrosoftGraphCategoryColor = "preset7"
	MicrosoftGraphCategoryColorPreset8  MicrosoftGraphCategoryColor = "preset8"
	MicrosoftGraphCategoryColorPreset9  MicrosoftGraphCategoryColor = "preset9"
)

// Defines values for MicrosoftGraphChannelMembershipType.
const (
	MicrosoftGraphChannelMembershipTypePrivate            MicrosoftGraphChannelMembershipType = "private"
	MicrosoftGraphChannelMembershipTypeShared             MicrosoftGraphChannelMembershipType = "shared"
	MicrosoftGraphChannelMembershipTypeStandard           MicrosoftGraphChannelMembershipType = "standard"
	MicrosoftGraphChannelMembershipTypeUnknownFutureValue MicrosoftGraphChannelMembershipType = "unknownFutureValue"
)

// Defines values for MicrosoftGraphChatMessageActions.
const (
	MicrosoftGraphChatMessageActionsActionUndefined    MicrosoftGraphChatMessageActions = "actionUndefined"
	MicrosoftGraphChatMessageActionsReactionAdded      MicrosoftGraphChatMessageActions = "reactionAdded"
	MicrosoftGraphChatMessageActionsReactionRemoved    MicrosoftGraphChatMessageActions = "reactionRemoved"
	MicrosoftGraphChatMessageActionsUnknownFutureValue MicrosoftGraphChatMessageActions = "unknownFutureValue"
)

// Defines values for MicrosoftGraphChatMessageImportance.
const (
	MicrosoftGraphChatMessageImportanceHigh               MicrosoftGraphChatMessageImportance = "high"
	MicrosoftGraphChatMessageImportanceNormal             MicrosoftGraphChatMessageImportance = "normal"
	MicrosoftGraphChatMessageImportanceUnknownFutureValue MicrosoftGraphChatMessageImportance = "unknownFutureValue"
	MicrosoftGraphChatMessageImportanceUrgent             MicrosoftGraphChatMessageImportance = "urgent"
)

// Defines values for MicrosoftGraphChatMessagePolicyViolationDlpActionTypes.
const (
	MicrosoftGraphChatMessagePolicyViolationDlpActionTypesBlockAccess         MicrosoftGraphChatMessagePolicyViolationDlpActionTypes = "blockAccess"
	MicrosoftGraphChatMessagePolicyViolationDlpActionTypesBlockAccessExternal MicrosoftGraphChatMessagePolicyViolationDlpActionTypes = "blockAccessExternal"
	MicrosoftGraphChatMessagePolicyViolationDlpActionTypesNone                MicrosoftGraphChatMessagePolicyViolationDlpActionTypes = "none"
	MicrosoftGraphChatMessagePolicyViolationDlpActionTypesNotifySender        MicrosoftGraphChatMessagePolicyViolationDlpActionTypes = "notifySender"
)

// Defines values for MicrosoftGraphChatMessagePolicyViolationUserActionTypes.
const (
	MicrosoftGraphChatMessagePolicyViolationUserActionTypesNone                MicrosoftGraphChatMessagePolicyViolationUserActionTypes = "none"
	MicrosoftGraphChatMessagePolicyViolationUserActionTypesOverride            MicrosoftGraphChatMessagePolicyViolationUserActionTypes = "override"
	MicrosoftGraphChatMessagePolicyViolationUserActionTypesReportFalsePositive MicrosoftGraphChatMessagePolicyViolationUserActionTypes = "reportFalsePositive"
)

// Defines values for MicrosoftGraphChatMessagePolicyViolationVerdictDetailsTypes.
const (
	MicrosoftGraphChatMessagePolicyViolationVerdictDetailsTypesAllowFalsePositiveOverride        MicrosoftGraphChatMessagePolicyViolationVerdictDetailsTypes = "allowFalsePositiveOverride"
	MicrosoftGraphChatMessagePolicyViolationVerdictDetailsTypesAllowOverrideWithJustification    MicrosoftGraphChatMessagePolicyViolationVerdictDetailsTypes = "allowOverrideWithJustification"
	MicrosoftGraphChatMessagePolicyViolationVerdictDetailsTypesAllowOverrideWithoutJustification MicrosoftGraphChatMessagePolicyViolationVerdictDetailsTypes = "allowOverrideWithoutJustification"
	MicrosoftGraphChatMessagePolicyViolationVerdictDetailsTypesNone                              MicrosoftGraphChatMessagePolicyViolationVerdictDetailsTypes = "none"
)

// Defines values for MicrosoftGraphChatMessageType.
const (
	MicrosoftGraphChatMessageTypeChatEvent          MicrosoftGraphChatMessageType = "chatEvent"
	MicrosoftGraphChatMessageTypeMessage            MicrosoftGraphChatMessageType = "message"
	MicrosoftGraphChatMessageTypeSystemEventMessage MicrosoftGraphChatMessageType = "systemEventMessage"
	MicrosoftGraphChatMessageTypeTyping             MicrosoftGraphChatMessageType = "typing"
	MicrosoftGraphChatMessageTypeUnknownFutureValue MicrosoftGraphChatMessageType = "unknownFutureValue"
)

// Defines values for MicrosoftGraphChatType.
const (
	MicrosoftGraphChatTypeGroup              MicrosoftGraphChatType = "group"
	MicrosoftGraphChatTypeMeeting            MicrosoftGraphChatType = "meeting"
	MicrosoftGraphChatTypeOneOnOne           MicrosoftGraphChatType = "oneOnOne"
	MicrosoftGraphChatTypeUnknownFutureValue MicrosoftGraphChatType = "unknownFutureValue"
)

// Defines values for MicrosoftGraphColumnTypes.
const (
	MicrosoftGraphColumnTypesApprovalStatus     MicrosoftGraphColumnTypes = "approvalStatus"
	MicrosoftGraphColumnTypesBoolean            MicrosoftGraphColumnTypes = "boolean"
	MicrosoftGraphColumnTypesCalculated         MicrosoftGraphColumnTypes = "calculated"
	MicrosoftGraphColumnTypesChoice             MicrosoftGraphColumnTypes = "choice"
	MicrosoftGraphColumnTypesCurrency           MicrosoftGraphColumnTypes = "currency"
	MicrosoftGraphColumnTypesDateTime           MicrosoftGraphColumnTypes = "dateTime"
	MicrosoftGraphColumnTypesGeolocation        MicrosoftGraphColumnTypes = "geolocation"
	MicrosoftGraphColumnTypesLocation           MicrosoftGraphColumnTypes = "location"
	MicrosoftGraphColumnTypesLookup             MicrosoftGraphColumnTypes = "lookup"
	MicrosoftGraphColumnTypesMultichoice        MicrosoftGraphColumnTypes = "multichoice"
	MicrosoftGraphColumnTypesMultiterm          MicrosoftGraphColumnTypes = "multiterm"
	MicrosoftGraphColumnTypesNote               MicrosoftGraphColumnTypes = "note"
	MicrosoftGraphColumnTypesNumber             MicrosoftGraphColumnTypes = "number"
	MicrosoftGraphColumnTypesTerm               MicrosoftGraphColumnTypes = "term"
	MicrosoftGraphColumnTypesText               MicrosoftGraphColumnTypes = "text"
	MicrosoftGraphColumnTypesThumbnail          MicrosoftGraphColumnTypes = "thumbnail"
	MicrosoftGraphColumnTypesUnknownFutureValue MicrosoftGraphColumnTypes = "unknownFutureValue"
	MicrosoftGraphColumnTypesUrl                MicrosoftGraphColumnTypes = "url"
	MicrosoftGraphColumnTypesUser               MicrosoftGraphColumnTypes = "user"
)

// Defines values for MicrosoftGraphComplianceState.
const (
	MicrosoftGraphComplianceStateCompliant     MicrosoftGraphComplianceState = "compliant"
	MicrosoftGraphComplianceStateConfigManager MicrosoftGraphComplianceState = "configManager"
	MicrosoftGraphComplianceStateConflict      MicrosoftGraphComplianceState = "conflict"
	MicrosoftGraphComplianceStateError         MicrosoftGraphComplianceState = "error"
	MicrosoftGraphComplianceStateInGracePeriod MicrosoftGraphComplianceState = "inGracePeriod"
	MicrosoftGraphComplianceStateNoncompliant  MicrosoftGraphComplianceState = "noncompliant"
	MicrosoftGraphComplianceStateUnknown       MicrosoftGraphComplianceState = "unknown"
)

// Defines values for MicrosoftGraphComplianceStatus.
const (
	MicrosoftGraphComplianceStatusCompliant     MicrosoftGraphComplianceStatus = "compliant"
	MicrosoftGraphComplianceStatusConflict      MicrosoftGraphComplianceStatus = "conflict"
	MicrosoftGraphComplianceStatusError         MicrosoftGraphComplianceStatus = "error"
	MicrosoftGraphComplianceStatusNonCompliant  MicrosoftGraphComplianceStatus = "nonCompliant"
	MicrosoftGraphComplianceStatusNotApplicable MicrosoftGraphComplianceStatus = "notApplicable"
	MicrosoftGraphComplianceStatusNotAssigned   MicrosoftGraphComplianceStatus = "notAssigned"
	MicrosoftGraphComplianceStatusRemediated    MicrosoftGraphComplianceStatus = "remediated"
	MicrosoftGraphComplianceStatusUnknown       MicrosoftGraphComplianceStatus = "unknown"
)

// Defines values for MicrosoftGraphCourseStatus.
const (
	MicrosoftGraphCourseStatusCompleted          MicrosoftGraphCourseStatus = "completed"
	MicrosoftGraphCourseStatusInProgress         MicrosoftGraphCourseStatus = "inProgress"
	MicrosoftGraphCourseStatusNotStarted         MicrosoftGraphCourseStatus = "notStarted"
	MicrosoftGraphCourseStatusUnknownFutureValue MicrosoftGraphCourseStatus = "unknownFutureValue"
)

// Defines values for MicrosoftGraphDayOfWeek.
const (
	Friday    MicrosoftGraphDayOfWeek = "friday"
	Monday    MicrosoftGraphDayOfWeek = "monday"
	Saturday  MicrosoftGraphDayOfWeek = "saturday"
	Sunday    MicrosoftGraphDayOfWeek = "sunday"
	Thursday  MicrosoftGraphDayOfWeek = "thursday"
	Tuesday   MicrosoftGraphDayOfWeek = "tuesday"
	Wednesday MicrosoftGraphDayOfWeek = "wednesday"
)

// Defines values for MicrosoftGraphDelegateMeetingMessageDeliveryOptions.
const (
	SendToDelegateAndInformationToPrincipal MicrosoftGraphDelegateMeetingMessageDeliveryOptions = "sendToDelegateAndInformationToPrincipal"
	SendToDelegateAndPrincipal              MicrosoftGraphDelegateMeetingMessageDeliveryOptions = "sendToDelegateAndPrincipal"
	SendToDelegateOnly                      MicrosoftGraphDelegateMeetingMessageDeliveryOptions = "sendToDelegateOnly"
)

// Defines values for MicrosoftGraphDeviceEnrollmentType.
const (
	MicrosoftGraphDeviceEnrollmentTypeAppleBulkWithUser                     MicrosoftGraphDeviceEnrollmentType = "appleBulkWithUser"
	MicrosoftGraphDeviceEnrollmentTypeAppleBulkWithoutUser                  MicrosoftGraphDeviceEnrollmentType = "appleBulkWithoutUser"
	MicrosoftGraphDeviceEnrollmentTypeAppleUserEnrollment                   MicrosoftGraphDeviceEnrollmentType = "appleUserEnrollment"
	MicrosoftGraphDeviceEnrollmentTypeAppleUserEnrollmentWithServiceAccount MicrosoftGraphDeviceEnrollmentType = "appleUserEnrollmentWithServiceAccount"
	MicrosoftGraphDeviceEnrollmentTypeDeviceEnrollmentManager               MicrosoftGraphDeviceEnrollmentType = "deviceEnrollmentManager"
	MicrosoftGraphDeviceEnrollmentTypeUnknown                               MicrosoftGraphDeviceEnrollmentType = "unknown"
	MicrosoftGraphDeviceEnrollmentTypeUserEnrollment                        MicrosoftGraphDeviceEnrollmentType = "userEnrollment"
	MicrosoftGraphDeviceEnrollmentTypeWindowsAutoEnrollment                 MicrosoftGraphDeviceEnrollmentType = "windowsAutoEnrollment"
	MicrosoftGraphDeviceEnrollmentTypeWindowsAzureADJoin                    MicrosoftGraphDeviceEnrollmentType = "windowsAzureADJoin"
	MicrosoftGraphDeviceEnrollmentTypeWindowsAzureADJoinUsingDeviceAuth     MicrosoftGraphDeviceEnrollmentType = "windowsAzureADJoinUsingDeviceAuth"
	MicrosoftGraphDeviceEnrollmentTypeWindowsBulkAzureDomainJoin            MicrosoftGraphDeviceEnrollmentType = "windowsBulkAzureDomainJoin"
	MicrosoftGraphDeviceEnrollmentTypeWindowsBulkUserless                   MicrosoftGraphDeviceEnrollmentType = "windowsBulkUserless"
	MicrosoftGraphDeviceEnrollmentTypeWindowsCoManagement                   MicrosoftGraphDeviceEnrollmentType = "windowsCoManagement"
)

// Defines values for MicrosoftGraphDeviceManagementExchangeAccessState.
const (
	MicrosoftGraphDeviceManagementExchangeAccessStateAllowed     MicrosoftGraphDeviceManagementExchangeAccessState = "allowed"
	MicrosoftGraphDeviceManagementExchangeAccessStateBlocked     MicrosoftGraphDeviceManagementExchangeAccessState = "blocked"
	MicrosoftGraphDeviceManagementExchangeAccessStateNone        MicrosoftGraphDeviceManagementExchangeAccessState = "none"
	MicrosoftGraphDeviceManagementExchangeAccessStateQuarantined MicrosoftGraphDeviceManagementExchangeAccessState = "quarantined"
	MicrosoftGraphDeviceManagementExchangeAccessStateUnknown     MicrosoftGraphDeviceManagementExchangeAccessState = "unknown"
)

// Defines values for MicrosoftGraphDeviceManagementExchangeAccessStateReason.
const (
	MicrosoftGraphDeviceManagementExchangeAccessStateReasonAzureADBlockDueToAccessPolicy MicrosoftGraphDeviceManagementExchangeAccessStateReason = "azureADBlockDueToAccessPolicy"
	MicrosoftGraphDeviceManagementExchangeAccessStateReasonCompliant                     MicrosoftGraphDeviceManagementExchangeAccessStateReason = "compliant"
	MicrosoftGraphDeviceManagementExchangeAccessStateReasonCompromisedPassword           MicrosoftGraphDeviceManagementExchangeAccessStateReason = "compromisedPassword"
	MicrosoftGraphDeviceManagementExchangeAccessStateReasonDeviceNotKnownWithManagedApp  MicrosoftGraphDeviceManagementExchangeAccessStateReason = "deviceNotKnownWithManagedApp"
	MicrosoftGraphDeviceManagementExchangeAccessStateReasonExchangeDeviceRule            MicrosoftGraphDeviceManagementExchangeAccessStateReason = "exchangeDeviceRule"
	MicrosoftGraphDeviceManagementExchangeAccessStateReasonExchangeGlobalRule            MicrosoftGraphDeviceManagementExchangeAccessStateReason = "exchangeGlobalRule"
	MicrosoftGraphDeviceManagementExchangeAccessStateReasonExchangeIndividualRule        MicrosoftGraphDeviceManagementExchangeAccessStateReason = "exchangeIndividualRule"
	MicrosoftGraphDeviceManagementExchangeAccessStateReasonExchangeMailboxPolicy         MicrosoftGraphDeviceManagementExchangeAccessStateReason = "exchangeMailboxPolicy"
	MicrosoftGraphDeviceManagementExchangeAccessStateReasonExchangeUpgrade               MicrosoftGraphDeviceManagementExchangeAccessStateReason = "exchangeUpgrade"
	MicrosoftGraphDeviceManagementExchangeAccessStateReasonMfaRequired                   MicrosoftGraphDeviceManagementExchangeAccessStateReason = "mfaRequired"
	MicrosoftGraphDeviceManagementExchangeAccessStateReasonNone                          MicrosoftGraphDeviceManagementExchangeAccessStateReason = "none"
	MicrosoftGraphDeviceManagementExchangeAccessStateReasonNotCompliant                  MicrosoftGraphDeviceManagementExchangeAccessStateReason = "notCompliant"
	MicrosoftGraphDeviceManagementExchangeAccessStateReasonNotEnrolled                   MicrosoftGraphDeviceManagementExchangeAccessStateReason = "notEnrolled"
	MicrosoftGraphDeviceManagementExchangeAccessStateReasonOther                         MicrosoftGraphDeviceManagementExchangeAccessStateReason = "other"
	MicrosoftGraphDeviceManagementExchangeAccessStateReasonUnknown                       MicrosoftGraphDeviceManagementExchangeAccessStateReason = "unknown"
	MicrosoftGraphDeviceManagementExchangeAccessStateReasonUnknownLocation               MicrosoftGraphDeviceManagementExchangeAccessStateReason = "unknownLocation"
)

// Defines values for MicrosoftGraphDeviceRegistrationState.
const (
	MicrosoftGraphDeviceRegistrationStateApprovalPending                MicrosoftGraphDeviceRegistrationState = "approvalPending"
	MicrosoftGraphDeviceRegistrationStateCertificateReset               MicrosoftGraphDeviceRegistrationState = "certificateReset"
	MicrosoftGraphDeviceRegistrationStateKeyConflict                    MicrosoftGraphDeviceRegistrationState = "keyConflict"
	MicrosoftGraphDeviceRegistrationStateNotRegistered                  MicrosoftGraphDeviceRegistrationState = "notRegistered"
	MicrosoftGraphDeviceRegistrationStateNotRegisteredPendingEnrollment MicrosoftGraphDeviceRegistrationState = "notRegisteredPendingEnrollment"
	MicrosoftGraphDeviceRegistrationStateRegistered                     MicrosoftGraphDeviceRegistrationState = "registered"
	MicrosoftGraphDeviceRegistrationStateRevoked                        MicrosoftGraphDeviceRegistrationState = "revoked"
	MicrosoftGraphDeviceRegistrationStateUnknown                        MicrosoftGraphDeviceRegistrationState = "unknown"
)

// Defines values for MicrosoftGraphEventType.
const (
	Exception      MicrosoftGraphEventType = "exception"
	Occurrence     MicrosoftGraphEventType = "occurrence"
	SeriesMaster   MicrosoftGraphEventType = "seriesMaster"
	SingleInstance MicrosoftGraphEventType = "singleInstance"
)

// Defines values for MicrosoftGraphExternalAudienceScope.
const (
	MicrosoftGraphExternalAudienceScopeAll          MicrosoftGraphExternalAudienceScope = "all"
	MicrosoftGraphExternalAudienceScopeContactsOnly MicrosoftGraphExternalAudienceScope = "contactsOnly"
	MicrosoftGraphExternalAudienceScopeNone         MicrosoftGraphExternalAudienceScope = "none"
)

// Defines values for MicrosoftGraphFollowupFlagStatus.
const (
	Complete   MicrosoftGraphFollowupFlagStatus = "complete"
	Flagged    MicrosoftGraphFollowupFlagStatus = "flagged"
	NotFlagged MicrosoftGraphFollowupFlagStatus = "notFlagged"
)

// Defines values for MicrosoftGraphFreeBusyStatus.
const (
	MicrosoftGraphFreeBusyStatusBusy             MicrosoftGraphFreeBusyStatus = "busy"
	MicrosoftGraphFreeBusyStatusFree             MicrosoftGraphFreeBusyStatus = "free"
	MicrosoftGraphFreeBusyStatusOof              MicrosoftGraphFreeBusyStatus = "oof"
	MicrosoftGraphFreeBusyStatusTentative        MicrosoftGraphFreeBusyStatus = "tentative"
	MicrosoftGraphFreeBusyStatusUnknown          MicrosoftGraphFreeBusyStatus = "unknown"
	MicrosoftGraphFreeBusyStatusWorkingElsewhere MicrosoftGraphFreeBusyStatus = "workingElsewhere"
)

// Defines values for MicrosoftGraphGiphyRatingType.
const (
	MicrosoftGraphGiphyRatingTypeModerate           MicrosoftGraphGiphyRatingType = "moderate"
	MicrosoftGraphGiphyRatingTypeStrict             MicrosoftGraphGiphyRatingType = "strict"
	MicrosoftGraphGiphyRatingTypeUnknownFutureValue MicrosoftGraphGiphyRatingType = "unknownFutureValue"
)

// Defines values for MicrosoftGraphImportance.
const (
	MicrosoftGraphImportanceHigh   MicrosoftGraphImportance = "high"
	MicrosoftGraphImportanceLow    MicrosoftGraphImportance = "low"
	MicrosoftGraphImportanceNormal MicrosoftGraphImportance = "normal"
)

// Defines values for MicrosoftGraphInferenceClassificationType.
const (
	MicrosoftGraphInferenceClassificationTypeFocused MicrosoftGraphInferenceClassificationType = "focused"
	MicrosoftGraphInferenceClassificationTypeOther   MicrosoftGraphInferenceClassificationType = "other"
)

// Defines values for MicrosoftGraphLobbyBypassScope.
const (
	MicrosoftGraphLobbyBypassScopeEveryone                    MicrosoftGraphLobbyBypassScope = "everyone"
	MicrosoftGraphLobbyBypassScopeInvited                     MicrosoftGraphLobbyBypassScope = "invited"
	MicrosoftGraphLobbyBypassScopeOrganization                MicrosoftGraphLobbyBypassScope = "organization"
	MicrosoftGraphLobbyBypassScopeOrganizationAndFederated    MicrosoftGraphLobbyBypassScope = "organizationAndFederated"
	MicrosoftGraphLobbyBypassScopeOrganizationExcludingGuests MicrosoftGraphLobbyBypassScope = "organizationExcludingGuests"
	MicrosoftGraphLobbyBypassScopeOrganizer                   MicrosoftGraphLobbyBypassScope = "organizer"
	MicrosoftGraphLobbyBypassScopeUnknownFutureValue          MicrosoftGraphLobbyBypassScope = "unknownFutureValue"
)

// Defines values for MicrosoftGraphLocationType.
const (
	MicrosoftGraphLocationTypeBusinessAddress MicrosoftGraphLocationType = "businessAddress"
	MicrosoftGraphLocationTypeConferenceRoom  MicrosoftGraphLocationType = "conferenceRoom"
	MicrosoftGraphLocationTypeDefault         MicrosoftGraphLocationType = "default"
	MicrosoftGraphLocationTypeGeoCoordinates  MicrosoftGraphLocationType = "geoCoordinates"
	MicrosoftGraphLocationTypeHomeAddress     MicrosoftGraphLocationType = "homeAddress"
	MicrosoftGraphLocationTypeHotel           MicrosoftGraphLocationType = "hotel"
	MicrosoftGraphLocationTypeLocalBusiness   MicrosoftGraphLocationType = "localBusiness"
	MicrosoftGraphLocationTypePostalAddress   MicrosoftGraphLocationType = "postalAddress"
	MicrosoftGraphLocationTypeRestaurant      MicrosoftGraphLocationType = "restaurant"
	MicrosoftGraphLocationTypeStreetAddress   MicrosoftGraphLocationType = "streetAddress"
)

// Defines values for MicrosoftGraphLocationUniqueIdType.
const (
	MicrosoftGraphLocationUniqueIdTypeBing          MicrosoftGraphLocationUniqueIdType = "bing"
	MicrosoftGraphLocationUniqueIdTypeDirectory     MicrosoftGraphLocationUniqueIdType = "directory"
	MicrosoftGraphLocationUniqueIdTypeLocationStore MicrosoftGraphLocationUniqueIdType = "locationStore"
	MicrosoftGraphLocationUniqueIdTypePrivate       MicrosoftGraphLocationUniqueIdType = "private"
	MicrosoftGraphLocationUniqueIdTypeUnknown       MicrosoftGraphLocationUniqueIdType = "unknown"
)

// Defines values for MicrosoftGraphLongRunningOperationStatus.
const (
	MicrosoftGraphLongRunningOperationStatusFailed             MicrosoftGraphLongRunningOperationStatus = "failed"
	MicrosoftGraphLongRunningOperationStatusNotStarted         MicrosoftGraphLongRunningOperationStatus = "notStarted"
	MicrosoftGraphLongRunningOperationStatusRunning            MicrosoftGraphLongRunningOperationStatus = "running"
	MicrosoftGraphLongRunningOperationStatusSucceeded          MicrosoftGraphLongRunningOperationStatus = "succeeded"
	MicrosoftGraphLongRunningOperationStatusUnknownFutureValue MicrosoftGraphLongRunningOperationStatus = "unknownFutureValue"
)

// Defines values for MicrosoftGraphManagedAppFlaggedReason.
const (
	MicrosoftGraphManagedAppFlaggedReasonNone         MicrosoftGraphManagedAppFlaggedReason = "none"
	MicrosoftGraphManagedAppFlaggedReasonRootedDevice MicrosoftGraphManagedAppFlaggedReason = "rootedDevice"
)

// Defines values for MicrosoftGraphManagedDeviceOwnerType.
const (
	MicrosoftGraphManagedDeviceOwnerTypeCompany  MicrosoftGraphManagedDeviceOwnerType = "company"
	MicrosoftGraphManagedDeviceOwnerTypePersonal MicrosoftGraphManagedDeviceOwnerType = "personal"
	MicrosoftGraphManagedDeviceOwnerTypeUnknown  MicrosoftGraphManagedDeviceOwnerType = "unknown"
)

// Defines values for MicrosoftGraphManagedDevicePartnerReportedHealthState.
const (
	MicrosoftGraphManagedDevicePartnerReportedHealthStateActivated      MicrosoftGraphManagedDevicePartnerReportedHealthState = "activated"
	MicrosoftGraphManagedDevicePartnerReportedHealthStateCompromised    MicrosoftGraphManagedDevicePartnerReportedHealthState = "compromised"
	MicrosoftGraphManagedDevicePartnerReportedHealthStateDeactivated    MicrosoftGraphManagedDevicePartnerReportedHealthState = "deactivated"
	MicrosoftGraphManagedDevicePartnerReportedHealthStateHighSeverity   MicrosoftGraphManagedDevicePartnerReportedHealthState = "highSeverity"
	MicrosoftGraphManagedDevicePartnerReportedHealthStateLowSeverity    MicrosoftGraphManagedDevicePartnerReportedHealthState = "lowSeverity"
	MicrosoftGraphManagedDevicePartnerReportedHealthStateMediumSeverity MicrosoftGraphManagedDevicePartnerReportedHealthState = "mediumSeverity"
	MicrosoftGraphManagedDevicePartnerReportedHealthStateMisconfigured  MicrosoftGraphManagedDevicePartnerReportedHealthState = "misconfigured"
	MicrosoftGraphManagedDevicePartnerReportedHealthStateSecured        MicrosoftGraphManagedDevicePartnerReportedHealthState = "secured"
	MicrosoftGraphManagedDevicePartnerReportedHealthStateUnknown        MicrosoftGraphManagedDevicePartnerReportedHealthState = "unknown"
	MicrosoftGraphManagedDevicePartnerReportedHealthStateUnresponsive   MicrosoftGraphManagedDevicePartnerReportedHealthState = "unresponsive"
)

// Defines values for MicrosoftGraphManagementAgentType.
const (
	MicrosoftGraphManagementAgentTypeConfigurationManagerClient        MicrosoftGraphManagementAgentType = "configurationManagerClient"
	MicrosoftGraphManagementAgentTypeConfigurationManagerClientMdm     MicrosoftGraphManagementAgentType = "configurationManagerClientMdm"
	MicrosoftGraphManagementAgentTypeConfigurationManagerClientMdmEas  MicrosoftGraphManagementAgentType = "configurationManagerClientMdmEas"
	MicrosoftGraphManagementAgentTypeEas                               MicrosoftGraphManagementAgentType = "eas"
	MicrosoftGraphManagementAgentTypeEasIntuneClient                   MicrosoftGraphManagementAgentType = "easIntuneClient"
	MicrosoftGraphManagementAgentTypeEasMdm                            MicrosoftGraphManagementAgentType = "easMdm"
	MicrosoftGraphManagementAgentTypeGoogleCloudDevicePolicyController MicrosoftGraphManagementAgentType = "googleCloudDevicePolicyController"
	MicrosoftGraphManagementAgentTypeIntuneClient                      MicrosoftGraphManagementAgentType = "intuneClient"
	MicrosoftGraphManagementAgentTypeJamf                              MicrosoftGraphManagementAgentType = "jamf"
	MicrosoftGraphManagementAgentTypeMdm                               MicrosoftGraphManagementAgentType = "mdm"
	MicrosoftGraphManagementAgentTypeMicrosoft365ManagedMdm            MicrosoftGraphManagementAgentType = "microsoft365ManagedMdm"
	MicrosoftGraphManagementAgentTypeMsSense                           MicrosoftGraphManagementAgentType = "msSense"
	MicrosoftGraphManagementAgentTypeUnknown                           MicrosoftGraphManagementAgentType = "unknown"
)

// Defines values for MicrosoftGraphMeetingChatHistoryDefaultMode.
const (
	MicrosoftGraphMeetingChatHistoryDefaultModeAll                MicrosoftGraphMeetingChatHistoryDefaultMode = "all"
	MicrosoftGraphMeetingChatHistoryDefaultModeNone               MicrosoftGraphMeetingChatHistoryDefaultMode = "none"
	MicrosoftGraphMeetingChatHistoryDefaultModeUnknownFutureValue MicrosoftGraphMeetingChatHistoryDefaultMode = "unknownFutureValue"
)

// Defines values for MicrosoftGraphMeetingChatMode.
const (
	MicrosoftGraphMeetingChatModeDisabled           MicrosoftGraphMeetingChatMode = "disabled"
	MicrosoftGraphMeetingChatModeEnabled            MicrosoftGraphMeetingChatMode = "enabled"
	MicrosoftGraphMeetingChatModeLimited            MicrosoftGraphMeetingChatMode = "limited"
	MicrosoftGraphMeetingChatModeUnknownFutureValue MicrosoftGraphMeetingChatMode = "unknownFutureValue"
)

// Defines values for MicrosoftGraphMessageActionFlag.
const (
	Any                 MicrosoftGraphMessageActionFlag = "any"
	Call                MicrosoftGraphMessageActionFlag = "call"
	DoNotForward        MicrosoftGraphMessageActionFlag = "doNotForward"
	FollowUp            MicrosoftGraphMessageActionFlag = "followUp"
	Forward             MicrosoftGraphMessageActionFlag = "forward"
	Fyi                 MicrosoftGraphMessageActionFlag = "fyi"
	NoResponseNecessary MicrosoftGraphMessageActionFlag = "noResponseNecessary"
	Read                MicrosoftGraphMessageActionFlag = "read"
	Reply               MicrosoftGraphMessageActionFlag = "reply"
	ReplyToAll          MicrosoftGraphMessageActionFlag = "replyToAll"
	Review              MicrosoftGraphMessageActionFlag = "review"
)

// Defines values for MicrosoftGraphOnenoteUserRole.
const (
	MicrosoftGraphOnenoteUserRoleContributor MicrosoftGraphOnenoteUserRole = "Contributor"
	MicrosoftGraphOnenoteUserRoleNone        MicrosoftGraphOnenoteUserRole = "None"
	MicrosoftGraphOnenoteUserRoleOwner       MicrosoftGraphOnenoteUserRole = "Owner"
	MicrosoftGraphOnenoteUserRoleReader      MicrosoftGraphOnenoteUserRole = "Reader"
)

// Defines values for MicrosoftGraphOnlineMeetingPresenters.
const (
	MicrosoftGraphOnlineMeetingPresentersEveryone           MicrosoftGraphOnlineMeetingPresenters = "everyone"
	MicrosoftGraphOnlineMeetingPresentersOrganization       MicrosoftGraphOnlineMeetingPresenters = "organization"
	MicrosoftGraphOnlineMeetingPresentersOrganizer          MicrosoftGraphOnlineMeetingPresenters = "organizer"
	MicrosoftGraphOnlineMeetingPresentersRoleIsPresenter    MicrosoftGraphOnlineMeetingPresenters = "roleIsPresenter"
	MicrosoftGraphOnlineMeetingPresentersUnknownFutureValue MicrosoftGraphOnlineMeetingPresenters = "unknownFutureValue"
)

// Defines values for MicrosoftGraphOnlineMeetingProviderType.
const (
	MicrosoftGraphOnlineMeetingProviderTypeSkypeForBusiness MicrosoftGraphOnlineMeetingProviderType = "skypeForBusiness"
	MicrosoftGraphOnlineMeetingProviderTypeSkypeForConsumer MicrosoftGraphOnlineMeetingProviderType = "skypeForConsumer"
	MicrosoftGraphOnlineMeetingProviderTypeTeamsForBusiness MicrosoftGraphOnlineMeetingProviderType = "teamsForBusiness"
	MicrosoftGraphOnlineMeetingProviderTypeUnknown          MicrosoftGraphOnlineMeetingProviderType = "unknown"
)

// Defines values for MicrosoftGraphOnlineMeetingRole.
const (
	MicrosoftGraphOnlineMeetingRoleAttendee           MicrosoftGraphOnlineMeetingRole = "attendee"
	MicrosoftGraphOnlineMeetingRoleCoorganizer        MicrosoftGraphOnlineMeetingRole = "coorganizer"
	MicrosoftGraphOnlineMeetingRolePresenter          MicrosoftGraphOnlineMeetingRole = "presenter"
	MicrosoftGraphOnlineMeetingRoleProducer           MicrosoftGraphOnlineMeetingRole = "producer"
	MicrosoftGraphOnlineMeetingRoleUnknownFutureValue MicrosoftGraphOnlineMeetingRole = "unknownFutureValue"
)

// Defines values for MicrosoftGraphOperationStatus.
const (
	MicrosoftGraphOperationStatusCompleted  MicrosoftGraphOperationStatus = "Completed"
	MicrosoftGraphOperationStatusFailed     MicrosoftGraphOperationStatus = "Failed"
	MicrosoftGraphOperationStatusNotStarted MicrosoftGraphOperationStatus = "NotStarted"
	MicrosoftGraphOperationStatusRunning    MicrosoftGraphOperationStatus = "Running"
)

// Defines values for MicrosoftGraphPhoneType.
const (
	MicrosoftGraphPhoneTypeAssistant   MicrosoftGraphPhoneType = "assistant"
	MicrosoftGraphPhoneTypeBusiness    MicrosoftGraphPhoneType = "business"
	MicrosoftGraphPhoneTypeBusinessFax MicrosoftGraphPhoneType = "businessFax"
	MicrosoftGraphPhoneTypeHome        MicrosoftGraphPhoneType = "home"
	MicrosoftGraphPhoneTypeHomeFax     MicrosoftGraphPhoneType = "homeFax"
	MicrosoftGraphPhoneTypeMobile      MicrosoftGraphPhoneType = "mobile"
	MicrosoftGraphPhoneTypeOther       MicrosoftGraphPhoneType = "other"
	MicrosoftGraphPhoneTypeOtherFax    MicrosoftGraphPhoneType = "otherFax"
	MicrosoftGraphPhoneTypePager       MicrosoftGraphPhoneType = "pager"
	MicrosoftGraphPhoneTypeRadio       MicrosoftGraphPhoneType = "radio"
)

// Defines values for MicrosoftGraphPlannerContainerType.
const (
	MicrosoftGraphPlannerContainerTypeGroup              MicrosoftGraphPlannerContainerType = "group"
	MicrosoftGraphPlannerContainerTypeRoster             MicrosoftGraphPlannerContainerType = "roster"
	MicrosoftGraphPlannerContainerTypeUnknownFutureValue MicrosoftGraphPlannerContainerType = "unknownFutureValue"
)

// Defines values for MicrosoftGraphPlannerPreviewType.
const (
	MicrosoftGraphPlannerPreviewTypeAutomatic   MicrosoftGraphPlannerPreviewType = "automatic"
	MicrosoftGraphPlannerPreviewTypeChecklist   MicrosoftGraphPlannerPreviewType = "checklist"
	MicrosoftGraphPlannerPreviewTypeDescription MicrosoftGraphPlannerPreviewType = "description"
	MicrosoftGraphPlannerPreviewTypeNoPreview   MicrosoftGraphPlannerPreviewType = "noPreview"
	MicrosoftGraphPlannerPreviewTypeReference   MicrosoftGraphPlannerPreviewType = "reference"
)

// Defines values for MicrosoftGraphPolicyPlatformType.
const (
	All               MicrosoftGraphPolicyPlatformType = "all"
	Android           MicrosoftGraphPolicyPlatformType = "android"
	AndroidForWork    MicrosoftGraphPolicyPlatformType = "androidForWork"
	IOS               MicrosoftGraphPolicyPlatformType = "iOS"
	MacOS             MicrosoftGraphPolicyPlatformType = "macOS"
	Windows10AndLater MicrosoftGraphPolicyPlatformType = "windows10AndLater"
	Windows81AndLater MicrosoftGraphPolicyPlatformType = "windows81AndLater"
	WindowsPhone81    MicrosoftGraphPolicyPlatformType = "windowsPhone81"
)

// Defines values for MicrosoftGraphPrintColorMode.
const (
	MicrosoftGraphPrintColorModeAuto               MicrosoftGraphPrintColorMode = "auto"
	MicrosoftGraphPrintColorModeBlackAndWhite      MicrosoftGraphPrintColorMode = "blackAndWhite"
	MicrosoftGraphPrintColorModeColor              MicrosoftGraphPrintColorMode = "color"
	MicrosoftGraphPrintColorModeGrayscale          MicrosoftGraphPrintColorMode = "grayscale"
	MicrosoftGraphPrintColorModeUnknownFutureValue MicrosoftGraphPrintColorMode = "unknownFutureValue"
)

// Defines values for MicrosoftGraphPrintDuplexMode.
const (
	MicrosoftGraphPrintDuplexModeFlipOnLongEdge     MicrosoftGraphPrintDuplexMode = "flipOnLongEdge"
	MicrosoftGraphPrintDuplexModeFlipOnShortEdge    MicrosoftGraphPrintDuplexMode = "flipOnShortEdge"
	MicrosoftGraphPrintDuplexModeOneSided           MicrosoftGraphPrintDuplexMode = "oneSided"
	MicrosoftGraphPrintDuplexModeUnknownFutureValue MicrosoftGraphPrintDuplexMode = "unknownFutureValue"
)

// Defines values for MicrosoftGraphPrintEvent.
const (
	MicrosoftGraphPrintEventJobStarted         MicrosoftGraphPrintEvent = "jobStarted"
	MicrosoftGraphPrintEventUnknownFutureValue MicrosoftGraphPrintEvent = "unknownFutureValue"
)

// Defines values for MicrosoftGraphPrintFinishing.
const (
	MicrosoftGraphPrintFinishingBind               MicrosoftGraphPrintFinishing = "bind"
	MicrosoftGraphPrintFinishingCover              MicrosoftGraphPrintFinishing = "cover"
	MicrosoftGraphPrintFinishingNone               MicrosoftGraphPrintFinishing = "none"
	MicrosoftGraphPrintFinishingPunch              MicrosoftGraphPrintFinishing = "punch"
	MicrosoftGraphPrintFinishingSaddleStitch       MicrosoftGraphPrintFinishing = "saddleStitch"
	MicrosoftGraphPrintFinishingStaple             MicrosoftGraphPrintFinishing = "staple"
	MicrosoftGraphPrintFinishingStapleBottomLeft   MicrosoftGraphPrintFinishing = "stapleBottomLeft"
	MicrosoftGraphPrintFinishingStapleBottomRight  MicrosoftGraphPrintFinishing = "stapleBottomRight"
	MicrosoftGraphPrintFinishingStapleDualBottom   MicrosoftGraphPrintFinishing = "stapleDualBottom"
	MicrosoftGraphPrintFinishingStapleDualLeft     MicrosoftGraphPrintFinishing = "stapleDualLeft"
	MicrosoftGraphPrintFinishingStapleDualRight    MicrosoftGraphPrintFinishing = "stapleDualRight"
	MicrosoftGraphPrintFinishingStapleDualTop      MicrosoftGraphPrintFinishing = "stapleDualTop"
	MicrosoftGraphPrintFinishingStapleTopLeft      MicrosoftGraphPrintFinishing = "stapleTopLeft"
	MicrosoftGraphPrintFinishingStapleTopRight     MicrosoftGraphPrintFinishing = "stapleTopRight"
	MicrosoftGraphPrintFinishingStitchBottomEdge   MicrosoftGraphPrintFinishing = "stitchBottomEdge"
	MicrosoftGraphPrintFinishingStitchEdge         MicrosoftGraphPrintFinishing = "stitchEdge"
	MicrosoftGraphPrintFinishingStitchLeftEdge     MicrosoftGraphPrintFinishing = "stitchLeftEdge"
	MicrosoftGraphPrintFinishingStitchRightEdge    MicrosoftGraphPrintFinishing = "stitchRightEdge"
	MicrosoftGraphPrintFinishingStitchTopEdge      MicrosoftGraphPrintFinishing = "stitchTopEdge"
	MicrosoftGraphPrintFinishingUnknownFutureValue MicrosoftGraphPrintFinishing = "unknownFutureValue"
)

// Defines values for MicrosoftGraphPrintJobProcessingState.
const (
	MicrosoftGraphPrintJobProcessingStateAborted            MicrosoftGraphPrintJobProcessingState = "aborted"
	MicrosoftGraphPrintJobProcessingStateCanceled           MicrosoftGraphPrintJobProcessingState = "canceled"
	MicrosoftGraphPrintJobProcessingStateCompleted          MicrosoftGraphPrintJobProcessingState = "completed"
	MicrosoftGraphPrintJobProcessingStatePaused             MicrosoftGraphPrintJobProcessingState = "paused"
	MicrosoftGraphPrintJobProcessingStatePending            MicrosoftGraphPrintJobProcessingState = "pending"
	MicrosoftGraphPrintJobProcessingStateProcessing         MicrosoftGraphPrintJobProcessingState = "processing"
	MicrosoftGraphPrintJobProcessingStateStopped            MicrosoftGraphPrintJobProcessingState = "stopped"
	MicrosoftGraphPrintJobProcessingStateUnknown            MicrosoftGraphPrintJobProcessingState = "unknown"
	MicrosoftGraphPrintJobProcessingStateUnknownFutureValue MicrosoftGraphPrintJobProcessingState = "unknownFutureValue"
)

// Defines values for MicrosoftGraphPrintJobStateDetail.
const (
	MicrosoftGraphPrintJobStateDetailCompletedSuccessfully MicrosoftGraphPrintJobStateDetail = "completedSuccessfully"
	MicrosoftGraphPrintJobStateDetailCompletedWithErrors   MicrosoftGraphPrintJobStateDetail = "completedWithErrors"
	MicrosoftGraphPrintJobStateDetailCompletedWithWarnings MicrosoftGraphPrintJobStateDetail = "completedWithWarnings"
	MicrosoftGraphPrintJobStateDetailInterpreting          MicrosoftGraphPrintJobStateDetail = "interpreting"
	MicrosoftGraphPrintJobStateDetailReleaseWait           MicrosoftGraphPrintJobStateDetail = "releaseWait"
	MicrosoftGraphPrintJobStateDetailTransforming          MicrosoftGraphPrintJobStateDetail = "transforming"
	MicrosoftGraphPrintJobStateDetailUnknownFutureValue    MicrosoftGraphPrintJobStateDetail = "unknownFutureValue"
	MicrosoftGraphPrintJobStateDetailUploadPending         MicrosoftGraphPrintJobStateDetail = "uploadPending"
)

// Defines values for MicrosoftGraphPrintMultipageLayout.
const (
	MicrosoftGraphPrintMultipageLayoutClockwiseFromBottomLeft         MicrosoftGraphPrintMultipageLayout = "clockwiseFromBottomLeft"
	MicrosoftGraphPrintMultipageLayoutClockwiseFromBottomRight        MicrosoftGraphPrintMultipageLayout = "clockwiseFromBottomRight"
	MicrosoftGraphPrintMultipageLayoutClockwiseFromTopLeft            MicrosoftGraphPrintMultipageLayout = "clockwiseFromTopLeft"
	MicrosoftGraphPrintMultipageLayoutClockwiseFromTopRight           MicrosoftGraphPrintMultipageLayout = "clockwiseFromTopRight"
	MicrosoftGraphPrintMultipageLayoutCounterclockwiseFromBottomLeft  MicrosoftGraphPrintMultipageLayout = "counterclockwiseFromBottomLeft"
	MicrosoftGraphPrintMultipageLayoutCounterclockwiseFromBottomRight MicrosoftGraphPrintMultipageLayout = "counterclockwiseFromBottomRight"
	MicrosoftGraphPrintMultipageLayoutCounterclockwiseFromTopLeft     MicrosoftGraphPrintMultipageLayout = "counterclockwiseFromTopLeft"
	MicrosoftGraphPrintMultipageLayoutCounterclockwiseFromTopRight    MicrosoftGraphPrintMultipageLayout = "counterclockwiseFromTopRight"
	MicrosoftGraphPrintMultipageLayoutUnknownFutureValue              MicrosoftGraphPrintMultipageLayout = "unknownFutureValue"
)

// Defines values for MicrosoftGraphPrintOrientation.
const (
	MicrosoftGraphPrintOrientationLandscape          MicrosoftGraphPrintOrientation = "landscape"
	MicrosoftGraphPrintOrientationPortrait           MicrosoftGraphPrintOrientation = "portrait"
	MicrosoftGraphPrintOrientationReverseLandscape   MicrosoftGraphPrintOrientation = "reverseLandscape"
	MicrosoftGraphPrintOrientationReversePortrait    MicrosoftGraphPrintOrientation = "reversePortrait"
	MicrosoftGraphPrintOrientationUnknownFutureValue MicrosoftGraphPrintOrientation = "unknownFutureValue"
)

// Defines values for MicrosoftGraphPrintQuality.
const (
	MicrosoftGraphPrintQualityHigh               MicrosoftGraphPrintQuality = "high"
	MicrosoftGraphPrintQualityLow                MicrosoftGraphPrintQuality = "low"
	MicrosoftGraphPrintQualityMedium             MicrosoftGraphPrintQuality = "medium"
	MicrosoftGraphPrintQualityUnknownFutureValue MicrosoftGraphPrintQuality = "unknownFutureValue"
)

// Defines values for MicrosoftGraphPrintScaling.
const (
	MicrosoftGraphPrintScalingAuto               MicrosoftGraphPrintScaling = "auto"
	MicrosoftGraphPrintScalingFill               MicrosoftGraphPrintScaling = "fill"
	MicrosoftGraphPrintScalingFit                MicrosoftGraphPrintScaling = "fit"
	MicrosoftGraphPrintScalingNone               MicrosoftGraphPrintScaling = "none"
	MicrosoftGraphPrintScalingShrinkToFit        MicrosoftGraphPrintScaling = "shrinkToFit"
	MicrosoftGraphPrintScalingUnknownFutureValue MicrosoftGraphPrintScaling = "unknownFutureValue"
)

// Defines values for MicrosoftGraphPrintTaskProcessingState.
const (
	MicrosoftGraphPrintTaskProcessingStateAborted            MicrosoftGraphPrintTaskProcessingState = "aborted"
	MicrosoftGraphPrintTaskProcessingStateCompleted          MicrosoftGraphPrintTaskProcessingState = "completed"
	MicrosoftGraphPrintTaskProcessingStatePending            MicrosoftGraphPrintTaskProcessingState = "pending"
	MicrosoftGraphPrintTaskProcessingStateProcessing         MicrosoftGraphPrintTaskProcessingState = "processing"
	MicrosoftGraphPrintTaskProcessingStateUnknownFutureValue MicrosoftGraphPrintTaskProcessingState = "unknownFutureValue"
)

// Defines values for MicrosoftGraphPrinterFeedOrientation.
const (
	MicrosoftGraphPrinterFeedOrientationLongEdgeFirst      MicrosoftGraphPrinterFeedOrientation = "longEdgeFirst"
	MicrosoftGraphPrinterFeedOrientationShortEdgeFirst     MicrosoftGraphPrinterFeedOrientation = "shortEdgeFirst"
	MicrosoftGraphPrinterFeedOrientationUnknownFutureValue MicrosoftGraphPrinterFeedOrientation = "unknownFutureValue"
)

// Defines values for MicrosoftGraphPrinterProcessingState.
const (
	MicrosoftGraphPrinterProcessingStateIdle               MicrosoftGraphPrinterProcessingState = "idle"
	MicrosoftGraphPrinterProcessingStateProcessing         MicrosoftGraphPrinterProcessingState = "processing"
	MicrosoftGraphPrinterProcessingStateStopped            MicrosoftGraphPrinterProcessingState = "stopped"
	MicrosoftGraphPrinterProcessingStateUnknown            MicrosoftGraphPrinterProcessingState = "unknown"
	MicrosoftGraphPrinterProcessingStateUnknownFutureValue MicrosoftGraphPrinterProcessingState = "unknownFutureValue"
)

// Defines values for MicrosoftGraphPrinterProcessingStateDetail.
const (
	MicrosoftGraphPrinterProcessingStateDetailAlertRemovalOfBinaryChangeEntry           MicrosoftGraphPrinterProcessingStateDetail = "alertRemovalOfBinaryChangeEntry"
	MicrosoftGraphPrinterProcessingStateDetailBanderAdded                               MicrosoftGraphPrinterProcessingStateDetail = "banderAdded"
	MicrosoftGraphPrinterProcessingStateDetailBanderAlmostEmpty                         MicrosoftGraphPrinterProcessingStateDetail = "banderAlmostEmpty"
	MicrosoftGraphPrinterProcessingStateDetailBanderAlmostFull                          MicrosoftGraphPrinterProcessingStateDetail = "banderAlmostFull"
	MicrosoftGraphPrinterProcessingStateDetailBanderAtLimit                             MicrosoftGraphPrinterProcessingStateDetail = "banderAtLimit"
	MicrosoftGraphPrinterProcessingStateDetailBanderClosed                              MicrosoftGraphPrinterProcessingStateDetail = "banderClosed"
	MicrosoftGraphPrinterProcessingStateDetailBanderConfigurationChange                 MicrosoftGraphPrinterProcessingStateDetail = "banderConfigurationChange"
	MicrosoftGraphPrinterProcessingStateDetailBanderCoverClosed                         MicrosoftGraphPrinterProcessingStateDetail = "banderCoverClosed"
	MicrosoftGraphPrinterProcessingStateDetailBanderCoverOpen                           MicrosoftGraphPrinterProcessingStateDetail = "banderCoverOpen"
	MicrosoftGraphPrinterProcessingStateDetailBanderEmpty                               MicrosoftGraphPrinterProcessingStateDetail = "banderEmpty"
	MicrosoftGraphPrinterProcessingStateDetailBanderFull                                MicrosoftGraphPrinterProcessingStateDetail = "banderFull"
	MicrosoftGraphPrinterProcessingStateDetailBanderInterlockClosed                     MicrosoftGraphPrinterProcessingStateDetail = "banderInterlockClosed"
	MicrosoftGraphPrinterProcessingStateDetailBanderInterlockOpen                       MicrosoftGraphPrinterProcessingStateDetail = "banderInterlockOpen"
	MicrosoftGraphPrinterProcessingStateDetailBanderJam                                 MicrosoftGraphPrinterProcessingStateDetail = "banderJam"
	MicrosoftGraphPrinterProcessingStateDetailBanderLifeAlmostOver                      MicrosoftGraphPrinterProcessingStateDetail = "banderLifeAlmostOver"
	MicrosoftGraphPrinterProcessingStateDetailBanderLifeOver                            MicrosoftGraphPrinterProcessingStateDetail = "banderLifeOver"
	MicrosoftGraphPrinterProcessingStateDetailBanderMemoryExhausted                     MicrosoftGraphPrinterProcessingStateDetail = "banderMemoryExhausted"
	MicrosoftGraphPrinterProcessingStateDetailBanderMissing                             MicrosoftGraphPrinterProcessingStateDetail = "banderMissing"
	MicrosoftGraphPrinterProcessingStateDetailBanderMotorFailure                        MicrosoftGraphPrinterProcessingStateDetail = "banderMotorFailure"
	MicrosoftGraphPrinterProcessingStateDetailBanderNearLimit                           MicrosoftGraphPrinterProcessingStateDetail = "banderNearLimit"
	MicrosoftGraphPrinterProcessingStateDetailBanderOffline                             MicrosoftGraphPrinterProcessingStateDetail = "banderOffline"
	MicrosoftGraphPrinterProcessingStateDetailBanderOpened                              MicrosoftGraphPrinterProcessingStateDetail = "banderOpened"
	MicrosoftGraphPrinterProcessingStateDetailBanderOverTemperature                     MicrosoftGraphPrinterProcessingStateDetail = "banderOverTemperature"
	MicrosoftGraphPrinterProcessingStateDetailBanderPowerSaver                          MicrosoftGraphPrinterProcessingStateDetail = "banderPowerSaver"
	MicrosoftGraphPrinterProcessingStateDetailBanderRecoverableFailure                  MicrosoftGraphPrinterProcessingStateDetail = "banderRecoverableFailure"
	MicrosoftGraphPrinterProcessingStateDetailBanderRecoverableStorage                  MicrosoftGraphPrinterProcessingStateDetail = "banderRecoverableStorage"
	MicrosoftGraphPrinterProcessingStateDetailBanderRemoved                             MicrosoftGraphPrinterProcessingStateDetail = "banderRemoved"
	MicrosoftGraphPrinterProcessingStateDetailBanderResourceAdded                       MicrosoftGraphPrinterProcessingStateDetail = "banderResourceAdded"
	MicrosoftGraphPrinterProcessingStateDetailBanderResourceRemoved                     MicrosoftGraphPrinterProcessingStateDetail = "banderResourceRemoved"
	MicrosoftGraphPrinterProcessingStateDetailBanderThermistorFailure                   MicrosoftGraphPrinterProcessingStateDetail = "banderThermistorFailure"
	MicrosoftGraphPrinterProcessingStateDetailBanderTimingFailure                       MicrosoftGraphPrinterProcessingStateDetail = "banderTimingFailure"
	MicrosoftGraphPrinterProcessingStateDetailBanderTurnedOff                           MicrosoftGraphPrinterProcessingStateDetail = "banderTurnedOff"
	MicrosoftGraphPrinterProcessingStateDetailBanderTurnedOn                            MicrosoftGraphPrinterProcessingStateDetail = "banderTurnedOn"
	MicrosoftGraphPrinterProcessingStateDetailBanderUnderTemperature                    MicrosoftGraphPrinterProcessingStateDetail = "banderUnderTemperature"
	MicrosoftGraphPrinterProcessingStateDetailBanderUnrecoverableFailure                MicrosoftGraphPrinterProcessingStateDetail = "banderUnrecoverableFailure"
	MicrosoftGraphPrinterProcessingStateDetailBanderUnrecoverableStorageError           MicrosoftGraphPrinterProcessingStateDetail = "banderUnrecoverableStorageError"
	MicrosoftGraphPrinterProcessingStateDetailBanderWarmingUp                           MicrosoftGraphPrinterProcessingStateDetail = "banderWarmingUp"
	MicrosoftGraphPrinterProcessingStateDetailBinderAdded                               MicrosoftGraphPrinterProcessingStateDetail = "binderAdded"
	MicrosoftGraphPrinterProcessingStateDetailBinderAlmostEmpty                         MicrosoftGraphPrinterProcessingStateDetail = "binderAlmostEmpty"
	MicrosoftGraphPrinterProcessingStateDetailBinderAlmostFull                          MicrosoftGraphPrinterProcessingStateDetail = "binderAlmostFull"
	MicrosoftGraphPrinterProcessingStateDetailBinderAtLimit                             MicrosoftGraphPrinterProcessingStateDetail = "binderAtLimit"
	MicrosoftGraphPrinterProcessingStateDetailBinderClosed                              MicrosoftGraphPrinterProcessingStateDetail = "binderClosed"
	MicrosoftGraphPrinterProcessingStateDetailBinderConfigurationChange                 MicrosoftGraphPrinterProcessingStateDetail = "binderConfigurationChange"
	MicrosoftGraphPrinterProcessingStateDetailBinderCoverClosed                         MicrosoftGraphPrinterProcessingStateDetail = "binderCoverClosed"
	MicrosoftGraphPrinterProcessingStateDetailBinderCoverOpen                           MicrosoftGraphPrinterProcessingStateDetail = "binderCoverOpen"
	MicrosoftGraphPrinterProcessingStateDetailBinderEmpty                               MicrosoftGraphPrinterProcessingStateDetail = "binderEmpty"
	MicrosoftGraphPrinterProcessingStateDetailBinderFull                                MicrosoftGraphPrinterProcessingStateDetail = "binderFull"
	MicrosoftGraphPrinterProcessingStateDetailBinderInterlockClosed                     MicrosoftGraphPrinterProcessingStateDetail = "binderInterlockClosed"
	MicrosoftGraphPrinterProcessingStateDetailBinderInterlockOpen                       MicrosoftGraphPrinterProcessingStateDetail = "binderInterlockOpen"
	MicrosoftGraphPrinterProcessingStateDetailBinderJam                                 MicrosoftGraphPrinterProcessingStateDetail = "binderJam"
	MicrosoftGraphPrinterProcessingStateDetailBinderLifeAlmostOver                      MicrosoftGraphPrinterProcessingStateDetail = "binderLifeAlmostOver"
	MicrosoftGraphPrinterProcessingStateDetailBinderLifeOver                            MicrosoftGraphPrinterProcessingStateDetail = "binderLifeOver"
	MicrosoftGraphPrinterProcessingStateDetailBinderMemoryExhausted                     MicrosoftGraphPrinterProcessingStateDetail = "binderMemoryExhausted"
	MicrosoftGraphPrinterProcessingStateDetailBinderMissing                             MicrosoftGraphPrinterProcessingStateDetail = "binderMissing"
	MicrosoftGraphPrinterProcessingStateDetailBinderMotorFailure                        MicrosoftGraphPrinterProcessingStateDetail = "binderMotorFailure"
	MicrosoftGraphPrinterProcessingStateDetailBinderNearLimit                           MicrosoftGraphPrinterProcessingStateDetail = "binderNearLimit"
	MicrosoftGraphPrinterProcessingStateDetailBinderOffline                             MicrosoftGraphPrinterProcessingStateDetail = "binderOffline"
	MicrosoftGraphPrinterProcessingStateDetailBinderOpened                              MicrosoftGraphPrinterProcessingStateDetail = "binderOpened"
	MicrosoftGraphPrinterProcessingStateDetailBinderOverTemperature                     MicrosoftGraphPrinterProcessingStateDetail = "binderOverTemperature"
	MicrosoftGraphPrinterProcessingStateDetailBinderPowerSaver                          MicrosoftGraphPrinterProcessingStateDetail = "binderPowerSaver"
	MicrosoftGraphPrinterProcessingStateDetailBinderRecoverableFailure                  MicrosoftGraphPrinterProcessingStateDetail = "binderRecoverableFailure"
	MicrosoftGraphPrinterProcessingStateDetailBinderRecoverableStorage                  MicrosoftGraphPrinterProcessingStateDetail = "binderRecoverableStorage"
	MicrosoftGraphPrinterProcessingStateDetailBinderRemoved                             MicrosoftGraphPrinterProcessingStateDetail = "binderRemoved"
	MicrosoftGraphPrinterProcessingStateDetailBinderResourceAdded                       MicrosoftGraphPrinterProcessingStateDetail = "binderResourceAdded"
	MicrosoftGraphPrinterProcessingStateDetailBinderResourceRemoved                     MicrosoftGraphPrinterProcessingStateDetail = "binderResourceRemoved"
	MicrosoftGraphPrinterProcessingStateDetailBinderThermistorFailure                   MicrosoftGraphPrinterProcessingStateDetail = "binderThermistorFailure"
	MicrosoftGraphPrinterProcessingStateDetailBinderTimingFailure                       MicrosoftGraphPrinterProcessingStateDetail = "binderTimingFailure"
	MicrosoftGraphPrinterProcessingStateDetailBinderTurnedOff                           MicrosoftGraphPrinterProcessingStateDetail = "binderTurnedOff"
	MicrosoftGraphPrinterProcessingStateDetailBinderTurnedOn                            MicrosoftGraphPrinterProcessingStateDetail = "binderTurnedOn"
	MicrosoftGraphPrinterProcessingStateDetailBinderUnderTemperature                    MicrosoftGraphPrinterProcessingStateDetail = "binderUnderTemperature"
	MicrosoftGraphPrinterProcessingStateDetailBinderUnrecoverableFailure                MicrosoftGraphPrinterProcessingStateDetail = "binderUnrecoverableFailure"
	MicrosoftGraphPrinterProcessingStateDetailBinderUnrecoverableStorageError           MicrosoftGraphPrinterProcessingStateDetail = "binderUnrecoverableStorageError"
	MicrosoftGraphPrinterProcessingStateDetailBinderWarmingUp                           MicrosoftGraphPrinterProcessingStateDetail = "binderWarmingUp"
	MicrosoftGraphPrinterProcessingStateDetailCameraFailure                             MicrosoftGraphPrinterProcessingStateDetail = "cameraFailure"
	MicrosoftGraphPrinterProcessingStateDetailChamberCooling                            MicrosoftGraphPrinterProcessingStateDetail = "chamberCooling"
	MicrosoftGraphPrinterProcessingStateDetailChamberFailure                            MicrosoftGraphPrinterProcessingStateDetail = "chamberFailure"
	MicrosoftGraphPrinterProcessingStateDetailChamberHeating                            MicrosoftGraphPrinterProcessingStateDetail = "chamberHeating"
	MicrosoftGraphPrinterProcessingStateDetailChamberTemperatureHigh                    MicrosoftGraphPrinterProcessingStateDetail = "chamberTemperatureHigh"
	MicrosoftGraphPrinterProcessingStateDetailChamberTemperatureLow                     MicrosoftGraphPrinterProcessingStateDetail = "chamberTemperatureLow"
	MicrosoftGraphPrinterProcessingStateDetailCleanerLifeAlmostOver                     MicrosoftGraphPrinterProcessingStateDetail = "cleanerLifeAlmostOver"
	MicrosoftGraphPrinterProcessingStateDetailCleanerLifeOver                           MicrosoftGraphPrinterProcessingStateDetail = "cleanerLifeOver"
	MicrosoftGraphPrinterProcessingStateDetailConfigurationChange                       MicrosoftGraphPrinterProcessingStateDetail = "configurationChange"
	MicrosoftGraphPrinterProcessingStateDetailConnectingToDevice                        MicrosoftGraphPrinterProcessingStateDetail = "connectingToDevice"
	MicrosoftGraphPrinterProcessingStateDetailCoverOpen                                 MicrosoftGraphPrinterProcessingStateDetail = "coverOpen"
	MicrosoftGraphPrinterProcessingStateDetailDeactivated                               MicrosoftGraphPrinterProcessingStateDetail = "deactivated"
	MicrosoftGraphPrinterProcessingStateDetailDeleted                                   MicrosoftGraphPrinterProcessingStateDetail = "deleted"
	MicrosoftGraphPrinterProcessingStateDetailDeveloperEmpty                            MicrosoftGraphPrinterProcessingStateDetail = "developerEmpty"
	MicrosoftGraphPrinterProcessingStateDetailDeveloperLow                              MicrosoftGraphPrinterProcessingStateDetail = "developerLow"
	MicrosoftGraphPrinterProcessingStateDetailDieCutterAdded                            MicrosoftGraphPrinterProcessingStateDetail = "dieCutterAdded"
	MicrosoftGraphPrinterProcessingStateDetailDieCutterAlmostEmpty                      MicrosoftGraphPrinterProcessingStateDetail = "dieCutterAlmostEmpty"
	MicrosoftGraphPrinterProcessingStateDetailDieCutterAlmostFull                       MicrosoftGraphPrinterProcessingStateDetail = "dieCutterAlmostFull"
	MicrosoftGraphPrinterProcessingStateDetailDieCutterAtLimit                          MicrosoftGraphPrinterProcessingStateDetail = "dieCutterAtLimit"
	MicrosoftGraphPrinterProcessingStateDetailDieCutterClosed                           MicrosoftGraphPrinterProcessingStateDetail = "dieCutterClosed"
	MicrosoftGraphPrinterProcessingStateDetailDieCutterConfigurationChange              MicrosoftGraphPrinterProcessingStateDetail = "dieCutterConfigurationChange"
	MicrosoftGraphPrinterProcessingStateDetailDieCutterCoverClosed                      MicrosoftGraphPrinterProcessingStateDetail = "dieCutterCoverClosed"
	MicrosoftGraphPrinterProcessingStateDetailDieCutterCoverOpen                        MicrosoftGraphPrinterProcessingStateDetail = "dieCutterCoverOpen"
	MicrosoftGraphPrinterProcessingStateDetailDieCutterEmpty                            MicrosoftGraphPrinterProcessingStateDetail = "dieCutterEmpty"
	MicrosoftGraphPrinterProcessingStateDetailDieCutterFull                             MicrosoftGraphPrinterProcessingStateDetail = "dieCutterFull"
	MicrosoftGraphPrinterProcessingStateDetailDieCutterInterlockClosed                  MicrosoftGraphPrinterProcessingStateDetail = "dieCutterInterlockClosed"
	MicrosoftGraphPrinterProcessingStateDetailDieCutterInterlockOpen                    MicrosoftGraphPrinterProcessingStateDetail = "dieCutterInterlockOpen"
	MicrosoftGraphPrinterProcessingStateDetailDieCutterJam                              MicrosoftGraphPrinterProcessingStateDetail = "dieCutterJam"
	MicrosoftGraphPrinterProcessingStateDetailDieCutterLifeAlmostOver                   MicrosoftGraphPrinterProcessingStateDetail = "dieCutterLifeAlmostOver"
	MicrosoftGraphPrinterProcessingStateDetailDieCutterLifeOver                         MicrosoftGraphPrinterProcessingStateDetail = "dieCutterLifeOver"
	MicrosoftGraphPrinterProcessingStateDetailDieCutterMemoryExhausted                  MicrosoftGraphPrinterProcessingStateDetail = "dieCutterMemoryExhausted"
	MicrosoftGraphPrinterProcessingStateDetailDieCutterMissing                          MicrosoftGraphPrinterProcessingStateDetail = "dieCutterMissing"
	MicrosoftGraphPrinterProcessingStateDetailDieCutterMotorFailure                     MicrosoftGraphPrinterProcessingStateDetail = "dieCutterMotorFailure"
	MicrosoftGraphPrinterProcessingStateDetailDieCutterNearLimit                        MicrosoftGraphPrinterProcessingStateDetail = "dieCutterNearLimit"
	MicrosoftGraphPrinterProcessingStateDetailDieCutterOffline                          MicrosoftGraphPrinterProcessingStateDetail = "dieCutterOffline"
	MicrosoftGraphPrinterProcessingStateDetailDieCutterOpened                           MicrosoftGraphPrinterProcessingStateDetail = "dieCutterOpened"
	MicrosoftGraphPrinterProcessingStateDetailDieCutterOverTemperature                  MicrosoftGraphPrinterProcessingStateDetail = "dieCutterOverTemperature"
	MicrosoftGraphPrinterProcessingStateDetailDieCutterPowerSaver                       MicrosoftGraphPrinterProcessingStateDetail = "dieCutterPowerSaver"
	MicrosoftGraphPrinterProcessingStateDetailDieCutterRecoverableFailure               MicrosoftGraphPrinterProcessingStateDetail = "dieCutterRecoverableFailure"
	MicrosoftGraphPrinterProcessingStateDetailDieCutterRecoverableStorage               MicrosoftGraphPrinterProcessingStateDetail = "dieCutterRecoverableStorage"
	MicrosoftGraphPrinterProcessingStateDetailDieCutterRemoved                          MicrosoftGraphPrinterProcessingStateDetail = "dieCutterRemoved"
	MicrosoftGraphPrinterProcessingStateDetailDieCutterResourceAdded                    MicrosoftGraphPrinterProcessingStateDetail = "dieCutterResourceAdded"
	MicrosoftGraphPrinterProcessingStateDetailDieCutterResourceRemoved                  MicrosoftGraphPrinterProcessingStateDetail = "dieCutterResourceRemoved"
	MicrosoftGraphPrinterProcessingStateDetailDieCutterThermistorFailure                MicrosoftGraphPrinterProcessingStateDetail = "dieCutterThermistorFailure"
	MicrosoftGraphPrinterProcessingStateDetailDieCutterTimingFailure                    MicrosoftGraphPrinterProcessingStateDetail = "dieCutterTimingFailure"
	MicrosoftGraphPrinterProcessingStateDetailDieCutterTurnedOff                        MicrosoftGraphPrinterProcessingStateDetail = "dieCutterTurnedOff"
	MicrosoftGraphPrinterProcessingStateDetailDieCutterTurnedOn                         MicrosoftGraphPrinterProcessingStateDetail = "dieCutterTurnedOn"
	MicrosoftGraphPrinterProcessingStateDetailDieCutterUnderTemperature                 MicrosoftGraphPrinterProcessingStateDetail = "dieCutterUnderTemperature"
	MicrosoftGraphPrinterProcessingStateDetailDieCutterUnrecoverableFailure             MicrosoftGraphPrinterProcessingStateDetail = "dieCutterUnrecoverableFailure"
	MicrosoftGraphPrinterProcessingStateDetailDieCutterUnrecoverableStorageError        MicrosoftGraphPrinterProcessingStateDetail = "dieCutterUnrecoverableStorageError"
	MicrosoftGraphPrinterProcessingStateDetailDieCutterWarmingUp                        MicrosoftGraphPrinterProcessingStateDetail = "dieCutterWarmingUp"
	MicrosoftGraphPrinterProcessingStateDetailDoorOpen                                  MicrosoftGraphPrinterProcessingStateDetail = "doorOpen"
	MicrosoftGraphPrinterProcessingStateDetailExtruderCooling                           MicrosoftGraphPrinterProcessingStateDetail = "extruderCooling"
	MicrosoftGraphPrinterProcessingStateDetailExtruderFailure                           MicrosoftGraphPrinterProcessingStateDetail = "extruderFailure"
	MicrosoftGraphPrinterProcessingStateDetailExtruderHeating                           MicrosoftGraphPrinterProcessingStateDetail = "extruderHeating"
	MicrosoftGraphPrinterProcessingStateDetailExtruderJam                               MicrosoftGraphPrinterProcessingStateDetail = "extruderJam"
	MicrosoftGraphPrinterProcessingStateDetailExtruderTemperatureHigh                   MicrosoftGraphPrinterProcessingStateDetail = "extruderTemperatureHigh"
	MicrosoftGraphPrinterProcessingStateDetailExtruderTemperatureLow                    MicrosoftGraphPrinterProcessingStateDetail = "extruderTemperatureLow"
	MicrosoftGraphPrinterProcessingStateDetailFanFailure                                MicrosoftGraphPrinterProcessingStateDetail = "fanFailure"
	MicrosoftGraphPrinterProcessingStateDetailFaxModemLifeAlmostOver                    MicrosoftGraphPrinterProcessingStateDetail = "faxModemLifeAlmostOver"
	MicrosoftGraphPrinterProcessingStateDetailFaxModemLifeOver                          MicrosoftGraphPrinterProcessingStateDetail = "faxModemLifeOver"
	MicrosoftGraphPrinterProcessingStateDetailFaxModemMissing                           MicrosoftGraphPrinterProcessingStateDetail = "faxModemMissing"
	MicrosoftGraphPrinterProcessingStateDetailFaxModemTurnedOff                         MicrosoftGraphPrinterProcessingStateDetail = "faxModemTurnedOff"
	MicrosoftGraphPrinterProcessingStateDetailFaxModemTurnedOn                          MicrosoftGraphPrinterProcessingStateDetail = "faxModemTurnedOn"
	MicrosoftGraphPrinterProcessingStateDetailFolderAdded                               MicrosoftGraphPrinterProcessingStateDetail = "folderAdded"
	MicrosoftGraphPrinterProcessingStateDetailFolderAlmostEmpty                         MicrosoftGraphPrinterProcessingStateDetail = "folderAlmostEmpty"
	MicrosoftGraphPrinterProcessingStateDetailFolderAlmostFull                          MicrosoftGraphPrinterProcessingStateDetail = "folderAlmostFull"
	MicrosoftGraphPrinterProcessingStateDetailFolderAtLimit                             MicrosoftGraphPrinterProcessingStateDetail = "folderAtLimit"
	MicrosoftGraphPrinterProcessingStateDetailFolderClosed                              MicrosoftGraphPrinterProcessingStateDetail = "folderClosed"
	MicrosoftGraphPrinterProcessingStateDetailFolderConfigurationChange                 MicrosoftGraphPrinterProcessingStateDetail = "folderConfigurationChange"
	MicrosoftGraphPrinterProcessingStateDetailFolderCoverClosed                         MicrosoftGraphPrinterProcessingStateDetail = "folderCoverClosed"
	MicrosoftGraphPrinterProcessingStateDetailFolderCoverOpen                           MicrosoftGraphPrinterProcessingStateDetail = "folderCoverOpen"
	MicrosoftGraphPrinterProcessingStateDetailFolderEmpty                               MicrosoftGraphPrinterProcessingStateDetail = "folderEmpty"
	MicrosoftGraphPrinterProcessingStateDetailFolderFull                                MicrosoftGraphPrinterProcessingStateDetail = "folderFull"
	MicrosoftGraphPrinterProcessingStateDetailFolderInterlockClosed                     MicrosoftGraphPrinterProcessingStateDetail = "folderInterlockClosed"
	MicrosoftGraphPrinterProcessingStateDetailFolderInterlockOpen                       MicrosoftGraphPrinterProcessingStateDetail = "folderInterlockOpen"
	MicrosoftGraphPrinterProcessingStateDetailFolderJam                                 MicrosoftGraphPrinterProcessingStateDetail = "folderJam"
	MicrosoftGraphPrinterProcessingStateDetailFolderLifeAlmostOver                      MicrosoftGraphPrinterProcessingStateDetail = "folderLifeAlmostOver"
	MicrosoftGraphPrinterProcessingStateDetailFolderLifeOver                            MicrosoftGraphPrinterProcessingStateDetail = "folderLifeOver"
	MicrosoftGraphPrinterProcessingStateDetailFolderMemoryExhausted                     MicrosoftGraphPrinterProcessingStateDetail = "folderMemoryExhausted"
	MicrosoftGraphPrinterProcessingStateDetailFolderMissing                             MicrosoftGraphPrinterProcessingStateDetail = "folderMissing"
	MicrosoftGraphPrinterProcessingStateDetailFolderMotorFailure                        MicrosoftGraphPrinterProcessingStateDetail = "folderMotorFailure"
	MicrosoftGraphPrinterProcessingStateDetailFolderNearLimit                           MicrosoftGraphPrinterProcessingStateDetail = "folderNearLimit"
	MicrosoftGraphPrinterProcessingStateDetailFolderOffline                             MicrosoftGraphPrinterProcessingStateDetail = "folderOffline"
	MicrosoftGraphPrinterProcessingStateDetailFolderOpened                              MicrosoftGraphPrinterProcessingStateDetail = "folderOpened"
	MicrosoftGraphPrinterProcessingStateDetailFolderOverTemperature                     MicrosoftGraphPrinterProcessingStateDetail = "folderOverTemperature"
	MicrosoftGraphPrinterProcessingStateDetailFolderPowerSaver                          MicrosoftGraphPrinterProcessingStateDetail = "folderPowerSaver"
	MicrosoftGraphPrinterProcessingStateDetailFolderRecoverableFailure                  MicrosoftGraphPrinterProcessingStateDetail = "folderRecoverableFailure"
	MicrosoftGraphPrinterProcessingStateDetailFolderRecoverableStorage                  MicrosoftGraphPrinterProcessingStateDetail = "folderRecoverableStorage"
	MicrosoftGraphPrinterProcessingStateDetailFolderRemoved                             MicrosoftGraphPrinterProcessingStateDetail = "folderRemoved"
	MicrosoftGraphPrinterProcessingStateDetailFolderResourceAdded                       MicrosoftGraphPrinterProcessingStateDetail = "folderResourceAdded"
	MicrosoftGraphPrinterProcessingStateDetailFolderResourceRemoved                     MicrosoftGraphPrinterProcessingStateDetail = "folderResourceRemoved"
	MicrosoftGraphPrinterProcessingStateDetailFolderThermistorFailure                   MicrosoftGraphPrinterProcessingStateDetail = "folderThermistorFailure"
	MicrosoftGraphPrinterProcessingStateDetailFolderTimingFailure                       MicrosoftGraphPrinterProcessingStateDetail = "folderTimingFailure"
	MicrosoftGraphPrinterProcessingStateDetailFolderTurnedOff                           MicrosoftGraphPrinterProcessingStateDetail = "folderTurnedOff"
	MicrosoftGraphPrinterProcessingStateDetailFolderTurnedOn                            MicrosoftGraphPrinterProcessingStateDetail = "folderTurnedOn"
	MicrosoftGraphPrinterProcessingStateDetailFolderUnderTemperature                    MicrosoftGraphPrinterProcessingStateDetail = "folderUnderTemperature"
	MicrosoftGraphPrinterProcessingStateDetailFolderUnrecoverableFailure                MicrosoftGraphPrinterProcessingStateDetail = "folderUnrecoverableFailure"
	MicrosoftGraphPrinterProcessingStateDetailFolderUnrecoverableStorageError           MicrosoftGraphPrinterProcessingStateDetail = "folderUnrecoverableStorageError"
	MicrosoftGraphPrinterProcessingStateDetailFolderWarmingUp                           MicrosoftGraphPrinterProcessingStateDetail = "folderWarmingUp"
	MicrosoftGraphPrinterProcessingStateDetailFuserOverTemp                             MicrosoftGraphPrinterProcessingStateDetail = "fuserOverTemp"
	MicrosoftGraphPrinterProcessingStateDetailFuserUnderTemp                            MicrosoftGraphPrinterProcessingStateDetail = "fuserUnderTemp"
	MicrosoftGraphPrinterProcessingStateDetailHibernate                                 MicrosoftGraphPrinterProcessingStateDetail = "hibernate"
	MicrosoftGraphPrinterProcessingStateDetailHoldNewJobs                               MicrosoftGraphPrinterProcessingStateDetail = "holdNewJobs"
	MicrosoftGraphPrinterProcessingStateDetailIdentifyPrinterRequested                  MicrosoftGraphPrinterProcessingStateDetail = "identifyPrinterRequested"
	MicrosoftGraphPrinterProcessingStateDetailImprinterAdded                            MicrosoftGraphPrinterProcessingStateDetail = "imprinterAdded"
	MicrosoftGraphPrinterProcessingStateDetailImprinterAlmostEmpty                      MicrosoftGraphPrinterProcessingStateDetail = "imprinterAlmostEmpty"
	MicrosoftGraphPrinterProcessingStateDetailImprinterAlmostFull                       MicrosoftGraphPrinterProcessingStateDetail = "imprinterAlmostFull"
	MicrosoftGraphPrinterProcessingStateDetailImprinterAtLimit                          MicrosoftGraphPrinterProcessingStateDetail = "imprinterAtLimit"
	MicrosoftGraphPrinterProcessingStateDetailImprinterClosed                           MicrosoftGraphPrinterProcessingStateDetail = "imprinterClosed"
	MicrosoftGraphPrinterProcessingStateDetailImprinterConfigurationChange              MicrosoftGraphPrinterProcessingStateDetail = "imprinterConfigurationChange"
	MicrosoftGraphPrinterProcessingStateDetailImprinterCoverClosed                      MicrosoftGraphPrinterProcessingStateDetail = "imprinterCoverClosed"
	MicrosoftGraphPrinterProcessingStateDetailImprinterCoverOpen                        MicrosoftGraphPrinterProcessingStateDetail = "imprinterCoverOpen"
	MicrosoftGraphPrinterProcessingStateDetailImprinterEmpty                            MicrosoftGraphPrinterProcessingStateDetail = "imprinterEmpty"
	MicrosoftGraphPrinterProcessingStateDetailImprinterFull                             MicrosoftGraphPrinterProcessingStateDetail = "imprinterFull"
	MicrosoftGraphPrinterProcessingStateDetailImprinterInterlockClosed                  MicrosoftGraphPrinterProcessingStateDetail = "imprinterInterlockClosed"
	MicrosoftGraphPrinterProcessingStateDetailImprinterInterlockOpen                    MicrosoftGraphPrinterProcessingStateDetail = "imprinterInterlockOpen"
	MicrosoftGraphPrinterProcessingStateDetailImprinterJam                              MicrosoftGraphPrinterProcessingStateDetail = "imprinterJam"
	MicrosoftGraphPrinterProcessingStateDetailImprinterLifeAlmostOver                   MicrosoftGraphPrinterProcessingStateDetail = "imprinterLifeAlmostOver"
	MicrosoftGraphPrinterProcessingStateDetailImprinterLifeOver                         MicrosoftGraphPrinterProcessingStateDetail = "imprinterLifeOver"
	MicrosoftGraphPrinterProcessingStateDetailImprinterMemoryExhausted                  MicrosoftGraphPrinterProcessingStateDetail = "imprinterMemoryExhausted"
	MicrosoftGraphPrinterProcessingStateDetailImprinterMissing                          MicrosoftGraphPrinterProcessingStateDetail = "imprinterMissing"
	MicrosoftGraphPrinterProcessingStateDetailImprinterMotorFailure                     MicrosoftGraphPrinterProcessingStateDetail = "imprinterMotorFailure"
	MicrosoftGraphPrinterProcessingStateDetailImprinterNearLimit                        MicrosoftGraphPrinterProcessingStateDetail = "imprinterNearLimit"
	MicrosoftGraphPrinterProcessingStateDetailImprinterOffline                          MicrosoftGraphPrinterProcessingStateDetail = "imprinterOffline"
	MicrosoftGraphPrinterProcessingStateDetailImprinterOpened                           MicrosoftGraphPrinterProcessingStateDetail = "imprinterOpened"
	MicrosoftGraphPrinterProcessingStateDetailImprinterOverTemperature                  MicrosoftGraphPrinterProcessingStateDetail = "imprinterOverTemperature"
	MicrosoftGraphPrinterProcessingStateDetailImprinterPowerSaver                       MicrosoftGraphPrinterProcessingStateDetail = "imprinterPowerSaver"
	MicrosoftGraphPrinterProcessingStateDetailImprinterRecoverableFailure               MicrosoftGraphPrinterProcessingStateDetail = "imprinterRecoverableFailure"
	MicrosoftGraphPrinterProcessingStateDetailImprinterRecoverableStorage               MicrosoftGraphPrinterProcessingStateDetail = "imprinterRecoverableStorage"
	MicrosoftGraphPrinterProcessingStateDetailImprinterRemoved                          MicrosoftGraphPrinterProcessingStateDetail = "imprinterRemoved"
	MicrosoftGraphPrinterProcessingStateDetailImprinterResourceAdded                    MicrosoftGraphPrinterProcessingStateDetail = "imprinterResourceAdded"
	MicrosoftGraphPrinterProcessingStateDetailImprinterResourceRemoved                  MicrosoftGraphPrinterProcessingStateDetail = "imprinterResourceRemoved"
	MicrosoftGraphPrinterProcessingStateDetailImprinterThermistorFailure                MicrosoftGraphPrinterProcessingStateDetail = "imprinterThermistorFailure"
	MicrosoftGraphPrinterProcessingStateDetailImprinterTimingFailure                    MicrosoftGraphPrinterProcessingStateDetail = "imprinterTimingFailure"
	MicrosoftGraphPrinterProcessingStateDetailImprinterTurnedOff                        MicrosoftGraphPrinterProcessingStateDetail = "imprinterTurnedOff"
	MicrosoftGraphPrinterProcessingStateDetailImprinterTurnedOn                         MicrosoftGraphPrinterProcessingStateDetail = "imprinterTurnedOn"
	MicrosoftGraphPrinterProcessingStateDetailImprinterUnderTemperature                 MicrosoftGraphPrinterProcessingStateDetail = "imprinterUnderTemperature"
	MicrosoftGraphPrinterProcessingStateDetailImprinterUnrecoverableFailure             MicrosoftGraphPrinterProcessingStateDetail = "imprinterUnrecoverableFailure"
	MicrosoftGraphPrinterProcessingStateDetailImprinterUnrecoverableStorageError        MicrosoftGraphPrinterProcessingStateDetail = "imprinterUnrecoverableStorageError"
	MicrosoftGraphPrinterProcessingStateDetailImprinterWarmingUp                        MicrosoftGraphPrinterProcessingStateDetail = "imprinterWarmingUp"
	MicrosoftGraphPrinterProcessingStateDetailInputCannotFeedSizeSelected               MicrosoftGraphPrinterProcessingStateDetail = "inputCannotFeedSizeSelected"
	MicrosoftGraphPrinterProcessingStateDetailInputManualInputRequest                   MicrosoftGraphPrinterProcessingStateDetail = "inputManualInputRequest"
	MicrosoftGraphPrinterProcessingStateDetailInputMediaColorChange                     MicrosoftGraphPrinterProcessingStateDetail = "inputMediaColorChange"
	MicrosoftGraphPrinterProcessingStateDetailInputMediaFormPartsChange                 MicrosoftGraphPrinterProcessingStateDetail = "inputMediaFormPartsChange"
	MicrosoftGraphPrinterProcessingStateDetailInputMediaSizeChange                      MicrosoftGraphPrinterProcessingStateDetail = "inputMediaSizeChange"
	MicrosoftGraphPrinterProcessingStateDetailInputMediaTrayFailure                     MicrosoftGraphPrinterProcessingStateDetail = "inputMediaTrayFailure"
	MicrosoftGraphPrinterProcessingStateDetailInputMediaTrayFeedError                   MicrosoftGraphPrinterProcessingStateDetail = "inputMediaTrayFeedError"
	MicrosoftGraphPrinterProcessingStateDetailInputMediaTrayJam                         MicrosoftGraphPrinterProcessingStateDetail = "inputMediaTrayJam"
	MicrosoftGraphPrinterProcessingStateDetailInputMediaTypeChange                      MicrosoftGraphPrinterProcessingStateDetail = "inputMediaTypeChange"
	MicrosoftGraphPrinterProcessingStateDetailInputMediaWeightChange                    MicrosoftGraphPrinterProcessingStateDetail = "inputMediaWeightChange"
	MicrosoftGraphPrinterProcessingStateDetailInputPickRollerFailure                    MicrosoftGraphPrinterProcessingStateDetail = "inputPickRollerFailure"
	MicrosoftGraphPrinterProcessingStateDetailInputPickRollerLifeOver                   MicrosoftGraphPrinterProcessingStateDetail = "inputPickRollerLifeOver"
	MicrosoftGraphPrinterProcessingStateDetailInputPickRollerLifeWarn                   MicrosoftGraphPrinterProcessingStateDetail = "inputPickRollerLifeWarn"
	MicrosoftGraphPrinterProcessingStateDetailInputPickRollerMissing                    MicrosoftGraphPrinterProcessingStateDetail = "inputPickRollerMissing"
	MicrosoftGraphPrinterProcessingStateDetailInputTrayElevationFailure                 MicrosoftGraphPrinterProcessingStateDetail = "inputTrayElevationFailure"
	MicrosoftGraphPrinterProcessingStateDetailInputTrayMissing                          MicrosoftGraphPrinterProcessingStateDetail = "inputTrayMissing"
	MicrosoftGraphPrinterProcessingStateDetailInputTrayPositionFailure                  MicrosoftGraphPrinterProcessingStateDetail = "inputTrayPositionFailure"
	MicrosoftGraphPrinterProcessingStateDetailInserterAdded                             MicrosoftGraphPrinterProcessingStateDetail = "inserterAdded"
	MicrosoftGraphPrinterProcessingStateDetailInserterAlmostEmpty                       MicrosoftGraphPrinterProcessingStateDetail = "inserterAlmostEmpty"
	MicrosoftGraphPrinterProcessingStateDetailInserterAlmostFull                        MicrosoftGraphPrinterProcessingStateDetail = "inserterAlmostFull"
	MicrosoftGraphPrinterProcessingStateDetailInserterAtLimit                           MicrosoftGraphPrinterProcessingStateDetail = "inserterAtLimit"
	MicrosoftGraphPrinterProcessingStateDetailInserterClosed                            MicrosoftGraphPrinterProcessingStateDetail = "inserterClosed"
	MicrosoftGraphPrinterProcessingStateDetailInserterConfigurationChange               MicrosoftGraphPrinterProcessingStateDetail = "inserterConfigurationChange"
	MicrosoftGraphPrinterProcessingStateDetailInserterCoverClosed                       MicrosoftGraphPrinterProcessingStateDetail = "inserterCoverClosed"
	MicrosoftGraphPrinterProcessingStateDetailInserterCoverOpen                         MicrosoftGraphPrinterProcessingStateDetail = "inserterCoverOpen"
	MicrosoftGraphPrinterProcessingStateDetailInserterEmpty                             MicrosoftGraphPrinterProcessingStateDetail = "inserterEmpty"
	MicrosoftGraphPrinterProcessingStateDetailInserterFull                              MicrosoftGraphPrinterProcessingStateDetail = "inserterFull"
	MicrosoftGraphPrinterProcessingStateDetailInserterInterlockClosed                   MicrosoftGraphPrinterProcessingStateDetail = "inserterInterlockClosed"
	MicrosoftGraphPrinterProcessingStateDetailInserterInterlockOpen                     MicrosoftGraphPrinterProcessingStateDetail = "inserterInterlockOpen"
	MicrosoftGraphPrinterProcessingStateDetailInserterJam                               MicrosoftGraphPrinterProcessingStateDetail = "inserterJam"
	MicrosoftGraphPrinterProcessingStateDetailInserterLifeAlmostOver                    MicrosoftGraphPrinterProcessingStateDetail = "inserterLifeAlmostOver"
	MicrosoftGraphPrinterProcessingStateDetailInserterLifeOver                          MicrosoftGraphPrinterProcessingStateDetail = "inserterLifeOver"
	MicrosoftGraphPrinterProcessingStateDetailInserterMemoryExhausted                   MicrosoftGraphPrinterProcessingStateDetail = "inserterMemoryExhausted"
	MicrosoftGraphPrinterProcessingStateDetailInserterMissing                           MicrosoftGraphPrinterProcessingStateDetail = "inserterMissing"
	MicrosoftGraphPrinterProcessingStateDetailInserterMotorFailure                      MicrosoftGraphPrinterProcessingStateDetail = "inserterMotorFailure"
	MicrosoftGraphPrinterProcessingStateDetailInserterNearLimit                         MicrosoftGraphPrinterProcessingStateDetail = "inserterNearLimit"
	MicrosoftGraphPrinterProcessingStateDetailInserterOffline                           MicrosoftGraphPrinterProcessingStateDetail = "inserterOffline"
	MicrosoftGraphPrinterProcessingStateDetailInserterOpened                            MicrosoftGraphPrinterProcessingStateDetail = "inserterOpened"
	MicrosoftGraphPrinterProcessingStateDetailInserterOverTemperature                   MicrosoftGraphPrinterProcessingStateDetail = "inserterOverTemperature"
	MicrosoftGraphPrinterProcessingStateDetailInserterPowerSaver                        MicrosoftGraphPrinterProcessingStateDetail = "inserterPowerSaver"
	MicrosoftGraphPrinterProcessingStateDetailInserterRecoverableFailure                MicrosoftGraphPrinterProcessingStateDetail = "inserterRecoverableFailure"
	MicrosoftGraphPrinterProcessingStateDetailInserterRecoverableStorage                MicrosoftGraphPrinterProcessingStateDetail = "inserterRecoverableStorage"
	MicrosoftGraphPrinterProcessingStateDetailInserterRemoved                           MicrosoftGraphPrinterProcessingStateDetail = "inserterRemoved"
	MicrosoftGraphPrinterProcessingStateDetailInserterResourceAdded                     MicrosoftGraphPrinterProcessingStateDetail = "inserterResourceAdded"
	MicrosoftGraphPrinterProcessingStateDetailInserterResourceRemoved                   MicrosoftGraphPrinterProcessingStateDetail = "inserterResourceRemoved"
	MicrosoftGraphPrinterProcessingStateDetailInserterThermistorFailure                 MicrosoftGraphPrinterProcessingStateDetail = "inserterThermistorFailure"
	MicrosoftGraphPrinterProcessingStateDetailInserterTimingFailure                     MicrosoftGraphPrinterProcessingStateDetail = "inserterTimingFailure"
	MicrosoftGraphPrinterProcessingStateDetailInserterTurnedOff                         MicrosoftGraphPrinterProcessingStateDetail = "inserterTurnedOff"
	MicrosoftGraphPrinterProcessingStateDetailInserterTurnedOn                          MicrosoftGraphPrinterProcessingStateDetail = "inserterTurnedOn"
	MicrosoftGraphPrinterProcessingStateDetailInserterUnderTemperature                  MicrosoftGraphPrinterProcessingStateDetail = "inserterUnderTemperature"
	MicrosoftGraphPrinterProcessingStateDetailInserterUnrecoverableFailure              MicrosoftGraphPrinterProcessingStateDetail = "inserterUnrecoverableFailure"
	MicrosoftGraphPrinterProcessingStateDetailInserterUnrecoverableStorageError         MicrosoftGraphPrinterProcessingStateDetail = "inserterUnrecoverableStorageError"
	MicrosoftGraphPrinterProcessingStateDetailInserterWarmingUp                         MicrosoftGraphPrinterProcessingStateDetail = "inserterWarmingUp"
	MicrosoftGraphPrinterProcessingStateDetailInterlockClosed                           MicrosoftGraphPrinterProcessingStateDetail = "interlockClosed"
	MicrosoftGraphPrinterProcessingStateDetailInterlockOpen                             MicrosoftGraphPrinterProcessingStateDetail = "interlockOpen"
	MicrosoftGraphPrinterProcessingStateDetailInterpreterCartridgeAdded                 MicrosoftGraphPrinterProcessingStateDetail = "interpreterCartridgeAdded"
	MicrosoftGraphPrinterProcessingStateDetailInterpreterCartridgeDeleted               MicrosoftGraphPrinterProcessingStateDetail = "interpreterCartridgeDeleted"
	MicrosoftGraphPrinterProcessingStateDetailInterpreterComplexPageEncountered         MicrosoftGraphPrinterProcessingStateDetail = "interpreterComplexPageEncountered"
	MicrosoftGraphPrinterProcessingStateDetailInterpreterMemoryDecrease                 MicrosoftGraphPrinterProcessingStateDetail = "interpreterMemoryDecrease"
	MicrosoftGraphPrinterProcessingStateDetailInterpreterMemoryIncrease                 MicrosoftGraphPrinterProcessingStateDetail = "interpreterMemoryIncrease"
	MicrosoftGraphPrinterProcessingStateDetailInterpreterResourceAdded                  MicrosoftGraphPrinterProcessingStateDetail = "interpreterResourceAdded"
	MicrosoftGraphPrinterProcessingStateDetailInterpreterResourceDeleted                MicrosoftGraphPrinterProcessingStateDetail = "interpreterResourceDeleted"
	MicrosoftGraphPrinterProcessingStateDetailInterpreterResourceUnavailable            MicrosoftGraphPrinterProcessingStateDetail = "interpreterResourceUnavailable"
	MicrosoftGraphPrinterProcessingStateDetailLampAtEol                                 MicrosoftGraphPrinterProcessingStateDetail = "lampAtEol"
	MicrosoftGraphPrinterProcessingStateDetailLampFailure                               MicrosoftGraphPrinterProcessingStateDetail = "lampFailure"
	MicrosoftGraphPrinterProcessingStateDetailLampNearEol                               MicrosoftGraphPrinterProcessingStateDetail = "lampNearEol"
	MicrosoftGraphPrinterProcessingStateDetailLaserAtEol                                MicrosoftGraphPrinterProcessingStateDetail = "laserAtEol"
	MicrosoftGraphPrinterProcessingStateDetailLaserFailure                              MicrosoftGraphPrinterProcessingStateDetail = "laserFailure"
	MicrosoftGraphPrinterProcessingStateDetailLaserNearEol                              MicrosoftGraphPrinterProcessingStateDetail = "laserNearEol"
	MicrosoftGraphPrinterProcessingStateDetailMakeEnvelopeAdded                         MicrosoftGraphPrinterProcessingStateDetail = "makeEnvelopeAdded"
	MicrosoftGraphPrinterProcessingStateDetailMakeEnvelopeAlmostEmpty                   MicrosoftGraphPrinterProcessingStateDetail = "makeEnvelopeAlmostEmpty"
	MicrosoftGraphPrinterProcessingStateDetailMakeEnvelopeAlmostFull                    MicrosoftGraphPrinterProcessingStateDetail = "makeEnvelopeAlmostFull"
	MicrosoftGraphPrinterProcessingStateDetailMakeEnvelopeAtLimit                       MicrosoftGraphPrinterProcessingStateDetail = "makeEnvelopeAtLimit"
	MicrosoftGraphPrinterProcessingStateDetailMakeEnvelopeClosed                        MicrosoftGraphPrinterProcessingStateDetail = "makeEnvelopeClosed"
	MicrosoftGraphPrinterProcessingStateDetailMakeEnvelopeConfigurationChange           MicrosoftGraphPrinterProcessingStateDetail = "makeEnvelopeConfigurationChange"
	MicrosoftGraphPrinterProcessingStateDetailMakeEnvelopeCoverClosed                   MicrosoftGraphPrinterProcessingStateDetail = "makeEnvelopeCoverClosed"
	MicrosoftGraphPrinterProcessingStateDetailMakeEnvelopeCoverOpen                     MicrosoftGraphPrinterProcessingStateDetail = "makeEnvelopeCoverOpen"
	MicrosoftGraphPrinterProcessingStateDetailMakeEnvelopeEmpty                         MicrosoftGraphPrinterProcessingStateDetail = "makeEnvelopeEmpty"
	MicrosoftGraphPrinterProcessingStateDetailMakeEnvelopeFull                          MicrosoftGraphPrinterProcessingStateDetail = "makeEnvelopeFull"
	MicrosoftGraphPrinterProcessingStateDetailMakeEnvelopeInterlockClosed               MicrosoftGraphPrinterProcessingStateDetail = "makeEnvelopeInterlockClosed"
	MicrosoftGraphPrinterProcessingStateDetailMakeEnvelopeInterlockOpen                 MicrosoftGraphPrinterProcessingStateDetail = "makeEnvelopeInterlockOpen"
	MicrosoftGraphPrinterProcessingStateDetailMakeEnvelopeJam                           MicrosoftGraphPrinterProcessingStateDetail = "makeEnvelopeJam"
	MicrosoftGraphPrinterProcessingStateDetailMakeEnvelopeLifeAlmostOver                MicrosoftGraphPrinterProcessingStateDetail = "makeEnvelopeLifeAlmostOver"
	MicrosoftGraphPrinterProcessingStateDetailMakeEnvelopeLifeOver                      MicrosoftGraphPrinterProcessingStateDetail = "makeEnvelopeLifeOver"
	MicrosoftGraphPrinterProcessingStateDetailMakeEnvelopeMemoryExhausted               MicrosoftGraphPrinterProcessingStateDetail = "makeEnvelopeMemoryExhausted"
	MicrosoftGraphPrinterProcessingStateDetailMakeEnvelopeMissing                       MicrosoftGraphPrinterProcessingStateDetail = "makeEnvelopeMissing"
	MicrosoftGraphPrinterProcessingStateDetailMakeEnvelopeMotorFailure                  MicrosoftGraphPrinterProcessingStateDetail = "makeEnvelopeMotorFailure"
	MicrosoftGraphPrinterProcessingStateDetailMakeEnvelopeNearLimit                     MicrosoftGraphPrinterProcessingStateDetail = "makeEnvelopeNearLimit"
	MicrosoftGraphPrinterProcessingStateDetailMakeEnvelopeOffline                       MicrosoftGraphPrinterProcessingStateDetail = "makeEnvelopeOffline"
	MicrosoftGraphPrinterProcessingStateDetailMakeEnvelopeOpened                        MicrosoftGraphPrinterProcessingStateDetail = "makeEnvelopeOpened"
	MicrosoftGraphPrinterProcessingStateDetailMakeEnvelopeOverTemperature               MicrosoftGraphPrinterProcessingStateDetail = "makeEnvelopeOverTemperature"
	MicrosoftGraphPrinterProcessingStateDetailMakeEnvelopePowerSaver                    MicrosoftGraphPrinterProcessingStateDetail = "makeEnvelopePowerSaver"
	MicrosoftGraphPrinterProcessingStateDetailMakeEnvelopeRecoverableFailure            MicrosoftGraphPrinterProcessingStateDetail = "makeEnvelopeRecoverableFailure"
	MicrosoftGraphPrinterProcessingStateDetailMakeEnvelopeRecoverableStorage            MicrosoftGraphPrinterProcessingStateDetail = "makeEnvelopeRecoverableStorage"
	MicrosoftGraphPrinterProcessingStateDetailMakeEnvelopeRemoved                       MicrosoftGraphPrinterProcessingStateDetail = "makeEnvelopeRemoved"
	MicrosoftGraphPrinterProcessingStateDetailMakeEnvelopeResourceAdded                 MicrosoftGraphPrinterProcessingStateDetail = "makeEnvelopeResourceAdded"
	MicrosoftGraphPrinterProcessingStateDetailMakeEnvelopeResourceRemoved               MicrosoftGraphPrinterProcessingStateDetail = "makeEnvelopeResourceRemoved"
	MicrosoftGraphPrinterProcessingStateDetailMakeEnvelopeThermistorFailure             MicrosoftGraphPrinterProcessingStateDetail = "makeEnvelopeThermistorFailure"
	MicrosoftGraphPrinterProcessingStateDetailMakeEnvelopeTimingFailure                 MicrosoftGraphPrinterProcessingStateDetail = "makeEnvelopeTimingFailure"
	MicrosoftGraphPrinterProcessingStateDetailMakeEnvelopeTurnedOff                     MicrosoftGraphPrinterProcessingStateDetail = "makeEnvelopeTurnedOff"
	MicrosoftGraphPrinterProcessingStateDetailMakeEnvelopeTurnedOn                      MicrosoftGraphPrinterProcessingStateDetail = "makeEnvelopeTurnedOn"
	MicrosoftGraphPrinterProcessingStateDetailMakeEnvelopeUnderTemperature              MicrosoftGraphPrinterProcessingStateDetail = "makeEnvelopeUnderTemperature"
	MicrosoftGraphPrinterProcessingStateDetailMakeEnvelopeUnrecoverableFailure          MicrosoftGraphPrinterProcessingStateDetail = "makeEnvelopeUnrecoverableFailure"
	MicrosoftGraphPrinterProcessingStateDetailMakeEnvelopeUnrecoverableStorageError     MicrosoftGraphPrinterProcessingStateDetail = "makeEnvelopeUnrecoverableStorageError"
	MicrosoftGraphPrinterProcessingStateDetailMakeEnvelopeWarmingUp                     MicrosoftGraphPrinterProcessingStateDetail = "makeEnvelopeWarmingUp"
	MicrosoftGraphPrinterProcessingStateDetailMarkerAdjustingPrintQuality               MicrosoftGraphPrinterProcessingStateDetail = "markerAdjustingPrintQuality"
	MicrosoftGraphPrinterProcessingStateDetailMarkerCleanerMissing                      MicrosoftGraphPrinterProcessingStateDetail = "markerCleanerMissing"
	MicrosoftGraphPrinterProcessingStateDetailMarkerDeveloperAlmostEmpty                MicrosoftGraphPrinterProcessingStateDetail = "markerDeveloperAlmostEmpty"
	MicrosoftGraphPrinterProcessingStateDetailMarkerDeveloperEmpty                      MicrosoftGraphPrinterProcessingStateDetail = "markerDeveloperEmpty"
	MicrosoftGraphPrinterProcessingStateDetailMarkerDeveloperMissing                    MicrosoftGraphPrinterProcessingStateDetail = "markerDeveloperMissing"
	MicrosoftGraphPrinterProcessingStateDetailMarkerFuserMissing                        MicrosoftGraphPrinterProcessingStateDetail = "markerFuserMissing"
	MicrosoftGraphPrinterProcessingStateDetailMarkerFuserThermistorFailure              MicrosoftGraphPrinterProcessingStateDetail = "markerFuserThermistorFailure"
	MicrosoftGraphPrinterProcessingStateDetailMarkerFuserTimingFailure                  MicrosoftGraphPrinterProcessingStateDetail = "markerFuserTimingFailure"
	MicrosoftGraphPrinterProcessingStateDetailMarkerInkAlmostEmpty                      MicrosoftGraphPrinterProcessingStateDetail = "markerInkAlmostEmpty"
	MicrosoftGraphPrinterProcessingStateDetailMarkerInkEmpty                            MicrosoftGraphPrinterProcessingStateDetail = "markerInkEmpty"
	MicrosoftGraphPrinterProcessingStateDetailMarkerInkMissing                          MicrosoftGraphPrinterProcessingStateDetail = "markerInkMissing"
	MicrosoftGraphPrinterProcessingStateDetailMarkerOpcMissing                          MicrosoftGraphPrinterProcessingStateDetail = "markerOpcMissing"
	MicrosoftGraphPrinterProcessingStateDetailMarkerPrintRibbonAlmostEmpty              MicrosoftGraphPrinterProcessingStateDetail = "markerPrintRibbonAlmostEmpty"
	MicrosoftGraphPrinterProcessingStateDetailMarkerPrintRibbonEmpty                    MicrosoftGraphPrinterProcessingStateDetail = "markerPrintRibbonEmpty"
	MicrosoftGraphPrinterProcessingStateDetailMarkerPrintRibbonMissing                  MicrosoftGraphPrinterProcessingStateDetail = "markerPrintRibbonMissing"
	MicrosoftGraphPrinterProcessingStateDetailMarkerSupplyAlmostEmpty                   MicrosoftGraphPrinterProcessingStateDetail = "markerSupplyAlmostEmpty"
	MicrosoftGraphPrinterProcessingStateDetailMarkerSupplyEmpty                         MicrosoftGraphPrinterProcessingStateDetail = "markerSupplyEmpty"
	MicrosoftGraphPrinterProcessingStateDetailMarkerSupplyLow                           MicrosoftGraphPrinterProcessingStateDetail = "markerSupplyLow"
	MicrosoftGraphPrinterProcessingStateDetailMarkerSupplyMissing                       MicrosoftGraphPrinterProcessingStateDetail = "markerSupplyMissing"
	MicrosoftGraphPrinterProcessingStateDetailMarkerTonerCartridgeMissing               MicrosoftGraphPrinterProcessingStateDetail = "markerTonerCartridgeMissing"
	MicrosoftGraphPrinterProcessingStateDetailMarkerTonerMissing                        MicrosoftGraphPrinterProcessingStateDetail = "markerTonerMissing"
	MicrosoftGraphPrinterProcessingStateDetailMarkerWasteAlmostFull                     MicrosoftGraphPrinterProcessingStateDetail = "markerWasteAlmostFull"
	MicrosoftGraphPrinterProcessingStateDetailMarkerWasteFull                           MicrosoftGraphPrinterProcessingStateDetail = "markerWasteFull"
	MicrosoftGraphPrinterProcessingStateDetailMarkerWasteInkReceptacleAlmostFull        MicrosoftGraphPrinterProcessingStateDetail = "markerWasteInkReceptacleAlmostFull"
	MicrosoftGraphPrinterProcessingStateDetailMarkerWasteInkReceptacleFull              MicrosoftGraphPrinterProcessingStateDetail = "markerWasteInkReceptacleFull"
	MicrosoftGraphPrinterProcessingStateDetailMarkerWasteInkReceptacleMissing           MicrosoftGraphPrinterProcessingStateDetail = "markerWasteInkReceptacleMissing"
	MicrosoftGraphPrinterProcessingStateDetailMarkerWasteMissing                        MicrosoftGraphPrinterProcessingStateDetail = "markerWasteMissing"
	MicrosoftGraphPrinterProcessingStateDetailMarkerWasteTonerReceptacleAlmostFull      MicrosoftGraphPrinterProcessingStateDetail = "markerWasteTonerReceptacleAlmostFull"
	MicrosoftGraphPrinterProcessingStateDetailMarkerWasteTonerReceptacleFull            MicrosoftGraphPrinterProcessingStateDetail = "markerWasteTonerReceptacleFull"
	MicrosoftGraphPrinterProcessingStateDetailMarkerWasteTonerReceptacleMissing         MicrosoftGraphPrinterProcessingStateDetail = "markerWasteTonerReceptacleMissing"
	MicrosoftGraphPrinterProcessingStateDetailMaterialEmpty                             MicrosoftGraphPrinterProcessingStateDetail = "materialEmpty"
	MicrosoftGraphPrinterProcessingStateDetailMaterialLow                               MicrosoftGraphPrinterProcessingStateDetail = "materialLow"
	MicrosoftGraphPrinterProcessingStateDetailMaterialNeeded                            MicrosoftGraphPrinterProcessingStateDetail = "materialNeeded"
	MicrosoftGraphPrinterProcessingStateDetailMediaDrying                               MicrosoftGraphPrinterProcessingStateDetail = "mediaDrying"
	MicrosoftGraphPrinterProcessingStateDetailMediaEmpty                                MicrosoftGraphPrinterProcessingStateDetail = "mediaEmpty"
	MicrosoftGraphPrinterProcessingStateDetailMediaJam                                  MicrosoftGraphPrinterProcessingStateDetail = "mediaJam"
	MicrosoftGraphPrinterProcessingStateDetailMediaLow                                  MicrosoftGraphPrinterProcessingStateDetail = "mediaLow"
	MicrosoftGraphPrinterProcessingStateDetailMediaNeeded                               MicrosoftGraphPrinterProcessingStateDetail = "mediaNeeded"
	MicrosoftGraphPrinterProcessingStateDetailMediaPathCannotDuplexMediaSelected        MicrosoftGraphPrinterProcessingStateDetail = "mediaPathCannotDuplexMediaSelected"
	MicrosoftGraphPrinterProcessingStateDetailMediaPathFailure                          MicrosoftGraphPrinterProcessingStateDetail = "mediaPathFailure"
	MicrosoftGraphPrinterProcessingStateDetailMediaPathInputEmpty                       MicrosoftGraphPrinterProcessingStateDetail = "mediaPathInputEmpty"
	MicrosoftGraphPrinterProcessingStateDetailMediaPathInputFeedError                   MicrosoftGraphPrinterProcessingStateDetail = "mediaPathInputFeedError"
	MicrosoftGraphPrinterProcessingStateDetailMediaPathInputJam                         MicrosoftGraphPrinterProcessingStateDetail = "mediaPathInputJam"
	MicrosoftGraphPrinterProcessingStateDetailMediaPathInputRequest                     MicrosoftGraphPrinterProcessingStateDetail = "mediaPathInputRequest"
	MicrosoftGraphPrinterProcessingStateDetailMediaPathJam                              MicrosoftGraphPrinterProcessingStateDetail = "mediaPathJam"
	MicrosoftGraphPrinterProcessingStateDetailMediaPathMediaTrayAlmostFull              MicrosoftGraphPrinterProcessingStateDetail = "mediaPathMediaTrayAlmostFull"
	MicrosoftGraphPrinterProcessingStateDetailMediaPathMediaTrayFull                    MicrosoftGraphPrinterProcessingStateDetail = "mediaPathMediaTrayFull"
	MicrosoftGraphPrinterProcessingStateDetailMediaPathMediaTrayMissing                 MicrosoftGraphPrinterProcessingStateDetail = "mediaPathMediaTrayMissing"
	MicrosoftGraphPrinterProcessingStateDetailMediaPathOutputFeedError                  MicrosoftGraphPrinterProcessingStateDetail = "mediaPathOutputFeedError"
	MicrosoftGraphPrinterProcessingStateDetailMediaPathOutputFull                       MicrosoftGraphPrinterProcessingStateDetail = "mediaPathOutputFull"
	MicrosoftGraphPrinterProcessingStateDetailMediaPathOutputJam                        MicrosoftGraphPrinterProcessingStateDetail = "mediaPathOutputJam"
	MicrosoftGraphPrinterProcessingStateDetailMediaPathPickRollerFailure                MicrosoftGraphPrinterProcessingStateDetail = "mediaPathPickRollerFailure"
	MicrosoftGraphPrinterProcessingStateDetailMediaPathPickRollerLifeOver               MicrosoftGraphPrinterProcessingStateDetail = "mediaPathPickRollerLifeOver"
	MicrosoftGraphPrinterProcessingStateDetailMediaPathPickRollerLifeWarn               MicrosoftGraphPrinterProcessingStateDetail = "mediaPathPickRollerLifeWarn"
	MicrosoftGraphPrinterProcessingStateDetailMediaPathPickRollerMissing                MicrosoftGraphPrinterProcessingStateDetail = "mediaPathPickRollerMissing"
	MicrosoftGraphPrinterProcessingStateDetailMotorFailure                              MicrosoftGraphPrinterProcessingStateDetail = "motorFailure"
	MicrosoftGraphPrinterProcessingStateDetailMovingToPaused                            MicrosoftGraphPrinterProcessingStateDetail = "movingToPaused"
	MicrosoftGraphPrinterProcessingStateDetailNone                                      MicrosoftGraphPrinterProcessingStateDetail = "none"
	MicrosoftGraphPrinterProcessingStateDetailOpticalPhotoConductorLifeOver             MicrosoftGraphPrinterProcessingStateDetail = "opticalPhotoConductorLifeOver"
	MicrosoftGraphPrinterProcessingStateDetailOpticalPhotoConductorNearEndOfLife        MicrosoftGraphPrinterProcessingStateDetail = "opticalPhotoConductorNearEndOfLife"
	MicrosoftGraphPrinterProcessingStateDetailOther                                     MicrosoftGraphPrinterProcessingStateDetail = "other"
	MicrosoftGraphPrinterProcessingStateDetailOutputAreaAlmostFull                      MicrosoftGraphPrinterProcessingStateDetail = "outputAreaAlmostFull"
	MicrosoftGraphPrinterProcessingStateDetailOutputAreaFull                            MicrosoftGraphPrinterProcessingStateDetail = "outputAreaFull"
	MicrosoftGraphPrinterProcessingStateDetailOutputMailboxSelectFailure                MicrosoftGraphPrinterProcessingStateDetail = "outputMailboxSelectFailure"
	MicrosoftGraphPrinterProcessingStateDetailOutputMediaTrayFailure                    MicrosoftGraphPrinterProcessingStateDetail = "outputMediaTrayFailure"
	MicrosoftGraphPrinterProcessingStateDetailOutputMediaTrayFeedError                  MicrosoftGraphPrinterProcessingStateDetail = "outputMediaTrayFeedError"
	MicrosoftGraphPrinterProcessingStateDetailOutputMediaTrayJam                        MicrosoftGraphPrinterProcessingStateDetail = "outputMediaTrayJam"
	MicrosoftGraphPrinterProcessingStateDetailOutputTrayMissing                         MicrosoftGraphPrinterProcessingStateDetail = "outputTrayMissing"
	MicrosoftGraphPrinterProcessingStateDetailPaused                                    MicrosoftGraphPrinterProcessingStateDetail = "paused"
	MicrosoftGraphPrinterProcessingStateDetailPerforaterAdded                           MicrosoftGraphPrinterProcessingStateDetail = "perforaterAdded"
	MicrosoftGraphPrinterProcessingStateDetailPerforaterAlmostEmpty                     MicrosoftGraphPrinterProcessingStateDetail = "perforaterAlmostEmpty"
	MicrosoftGraphPrinterProcessingStateDetailPerforaterAlmostFull                      MicrosoftGraphPrinterProcessingStateDetail = "perforaterAlmostFull"
	MicrosoftGraphPrinterProcessingStateDetailPerforaterAtLimit                         MicrosoftGraphPrinterProcessingStateDetail = "perforaterAtLimit"
	MicrosoftGraphPrinterProcessingStateDetailPerforaterClosed                          MicrosoftGraphPrinterProcessingStateDetail = "perforaterClosed"
	MicrosoftGraphPrinterProcessingStateDetailPerforaterConfigurationChange             MicrosoftGraphPrinterProcessingStateDetail = "perforaterConfigurationChange"
	MicrosoftGraphPrinterProcessingStateDetailPerforaterCoverClosed                     MicrosoftGraphPrinterProcessingStateDetail = "perforaterCoverClosed"
	MicrosoftGraphPrinterProcessingStateDetailPerforaterCoverOpen                       MicrosoftGraphPrinterProcessingStateDetail = "perforaterCoverOpen"
	MicrosoftGraphPrinterProcessingStateDetailPerforaterEmpty                           MicrosoftGraphPrinterProcessingStateDetail = "perforaterEmpty"
	MicrosoftGraphPrinterProcessingStateDetailPerforaterFull                            MicrosoftGraphPrinterProcessingStateDetail = "perforaterFull"
	MicrosoftGraphPrinterProcessingStateDetailPerforaterInterlockClosed                 MicrosoftGraphPrinterProcessingStateDetail = "perforaterInterlockClosed"
	MicrosoftGraphPrinterProcessingStateDetailPerforaterInterlockOpen                   MicrosoftGraphPrinterProcessingStateDetail = "perforaterInterlockOpen"
	MicrosoftGraphPrinterProcessingStateDetailPerforaterJam                             MicrosoftGraphPrinterProcessingStateDetail = "perforaterJam"
	MicrosoftGraphPrinterProcessingStateDetailPerforaterLifeAlmostOver                  MicrosoftGraphPrinterProcessingStateDetail = "perforaterLifeAlmostOver"
	MicrosoftGraphPrinterProcessingStateDetailPerforaterLifeOver                        MicrosoftGraphPrinterProcessingStateDetail = "perforaterLifeOver"
	MicrosoftGraphPrinterProcessingStateDetailPerforaterMemoryExhausted                 MicrosoftGraphPrinterProcessingStateDetail = "perforaterMemoryExhausted"
	MicrosoftGraphPrinterProcessingStateDetailPerforaterMissing                         MicrosoftGraphPrinterProcessingStateDetail = "perforaterMissing"
	MicrosoftGraphPrinterProcessingStateDetailPerforaterMotorFailure                    MicrosoftGraphPrinterProcessingStateDetail = "perforaterMotorFailure"
	MicrosoftGraphPrinterProcessingStateDetailPerforaterNearLimit                       MicrosoftGraphPrinterProcessingStateDetail = "perforaterNearLimit"
	MicrosoftGraphPrinterProcessingStateDetailPerforaterOffline                         MicrosoftGraphPrinterProcessingStateDetail = "perforaterOffline"
	MicrosoftGraphPrinterProcessingStateDetailPerforaterOpened                          MicrosoftGraphPrinterProcessingStateDetail = "perforaterOpened"
	MicrosoftGraphPrinterProcessingStateDetailPerforaterOverTemperature                 MicrosoftGraphPrinterProcessingStateDetail = "perforaterOverTemperature"
	MicrosoftGraphPrinterProcessingStateDetailPerforaterPowerSaver                      MicrosoftGraphPrinterProcessingStateDetail = "perforaterPowerSaver"
	MicrosoftGraphPrinterProcessingStateDetailPerforaterRecoverableFailure              MicrosoftGraphPrinterProcessingStateDetail = "perforaterRecoverableFailure"
	MicrosoftGraphPrinterProcessingStateDetailPerforaterRecoverableStorage              MicrosoftGraphPrinterProcessingStateDetail = "perforaterRecoverableStorage"
	MicrosoftGraphPrinterProcessingStateDetailPerforaterRemoved                         MicrosoftGraphPrinterProcessingStateDetail = "perforaterRemoved"
	MicrosoftGraphPrinterProcessingStateDetailPerforaterResourceAdded                   MicrosoftGraphPrinterProcessingStateDetail = "perforaterResourceAdded"
	MicrosoftGraphPrinterProcessingStateDetailPerforaterResourceRemoved                 MicrosoftGraphPrinterProcessingStateDetail = "perforaterResourceRemoved"
	MicrosoftGraphPrinterProcessingStateDetailPerforaterThermistorFailure               MicrosoftGraphPrinterProcessingStateDetail = "perforaterThermistorFailure"
	MicrosoftGraphPrinterProcessingStateDetailPerforaterTimingFailure                   MicrosoftGraphPrinterProcessingStateDetail = "perforaterTimingFailure"
	MicrosoftGraphPrinterProcessingStateDetailPerforaterTurnedOff                       MicrosoftGraphPrinterProcessingStateDetail = "perforaterTurnedOff"
	MicrosoftGraphPrinterProcessingStateDetailPerforaterTurnedOn                        MicrosoftGraphPrinterProcessingStateDetail = "perforaterTurnedOn"
	MicrosoftGraphPrinterProcessingStateDetailPerforaterUnderTemperature                MicrosoftGraphPrinterProcessingStateDetail = "perforaterUnderTemperature"
	MicrosoftGraphPrinterProcessingStateDetailPerforaterUnrecoverableFailure            MicrosoftGraphPrinterProcessingStateDetail = "perforaterUnrecoverableFailure"
	MicrosoftGraphPrinterProcessingStateDetailPerforaterUnrecoverableStorageError       MicrosoftGraphPrinterProcessingStateDetail = "perforaterUnrecoverableStorageError"
	MicrosoftGraphPrinterProcessingStateDetailPerforaterWarmingUp                       MicrosoftGraphPrinterProcessingStateDetail = "perforaterWarmingUp"
	MicrosoftGraphPrinterProcessingStateDetailPlatformCooling                           MicrosoftGraphPrinterProcessingStateDetail = "platformCooling"
	MicrosoftGraphPrinterProcessingStateDetailPlatformFailure                           MicrosoftGraphPrinterProcessingStateDetail = "platformFailure"
	MicrosoftGraphPrinterProcessingStateDetailPlatformHeating                           MicrosoftGraphPrinterProcessingStateDetail = "platformHeating"
	MicrosoftGraphPrinterProcessingStateDetailPlatformTemperatureHigh                   MicrosoftGraphPrinterProcessingStateDetail = "platformTemperatureHigh"
	MicrosoftGraphPrinterProcessingStateDetailPlatformTemperatureLow                    MicrosoftGraphPrinterProcessingStateDetail = "platformTemperatureLow"
	MicrosoftGraphPrinterProcessingStateDetailPowerDown                                 MicrosoftGraphPrinterProcessingStateDetail = "powerDown"
	MicrosoftGraphPrinterProcessingStateDetailPowerUp                                   MicrosoftGraphPrinterProcessingStateDetail = "powerUp"
	MicrosoftGraphPrinterProcessingStateDetailPrinterManualReset                        MicrosoftGraphPrinterProcessingStateDetail = "printerManualReset"
	MicrosoftGraphPrinterProcessingStateDetailPrinterNmsReset                           MicrosoftGraphPrinterProcessingStateDetail = "printerNmsReset"
	MicrosoftGraphPrinterProcessingStateDetailPrinterReadyToPrint                       MicrosoftGraphPrinterProcessingStateDetail = "printerReadyToPrint"
	MicrosoftGraphPrinterProcessingStateDetailPuncherAdded                              MicrosoftGraphPrinterProcessingStateDetail = "puncherAdded"
	MicrosoftGraphPrinterProcessingStateDetailPuncherAlmostEmpty                        MicrosoftGraphPrinterProcessingStateDetail = "puncherAlmostEmpty"
	MicrosoftGraphPrinterProcessingStateDetailPuncherAlmostFull                         MicrosoftGraphPrinterProcessingStateDetail = "puncherAlmostFull"
	MicrosoftGraphPrinterProcessingStateDetailPuncherAtLimit                            MicrosoftGraphPrinterProcessingStateDetail = "puncherAtLimit"
	MicrosoftGraphPrinterProcessingStateDetailPuncherClosed                             MicrosoftGraphPrinterProcessingStateDetail = "puncherClosed"
	MicrosoftGraphPrinterProcessingStateDetailPuncherConfigurationChange                MicrosoftGraphPrinterProcessingStateDetail = "puncherConfigurationChange"
	MicrosoftGraphPrinterProcessingStateDetailPuncherCoverClosed                        MicrosoftGraphPrinterProcessingStateDetail = "puncherCoverClosed"
	MicrosoftGraphPrinterProcessingStateDetailPuncherCoverOpen                          MicrosoftGraphPrinterProcessingStateDetail = "puncherCoverOpen"
	MicrosoftGraphPrinterProcessingStateDetailPuncherEmpty                              MicrosoftGraphPrinterProcessingStateDetail = "puncherEmpty"
	MicrosoftGraphPrinterProcessingStateDetailPuncherFull                               MicrosoftGraphPrinterProcessingStateDetail = "puncherFull"
	MicrosoftGraphPrinterProcessingStateDetailPuncherInterlockClosed                    MicrosoftGraphPrinterProcessingStateDetail = "puncherInterlockClosed"
	MicrosoftGraphPrinterProcessingStateDetailPuncherInterlockOpen                      MicrosoftGraphPrinterProcessingStateDetail = "puncherInterlockOpen"
	MicrosoftGraphPrinterProcessingStateDetailPuncherJam                                MicrosoftGraphPrinterProcessingStateDetail = "puncherJam"
	MicrosoftGraphPrinterProcessingStateDetailPuncherLifeAlmostOver                     MicrosoftGraphPrinterProcessingStateDetail = "puncherLifeAlmostOver"
	MicrosoftGraphPrinterProcessingStateDetailPuncherLifeOver                           MicrosoftGraphPrinterProcessingStateDetail = "puncherLifeOver"
	MicrosoftGraphPrinterProcessingStateDetailPuncherMemoryExhausted                    MicrosoftGraphPrinterProcessingStateDetail = "puncherMemoryExhausted"
	MicrosoftGraphPrinterProcessingStateDetailPuncherMissing                            MicrosoftGraphPrinterProcessingStateDetail = "puncherMissing"
	MicrosoftGraphPrinterProcessingStateDetailPuncherMotorFailure                       MicrosoftGraphPrinterProcessingStateDetail = "puncherMotorFailure"
	MicrosoftGraphPrinterProcessingStateDetailPuncherNearLimit                          MicrosoftGraphPrinterProcessingStateDetail = "puncherNearLimit"
	MicrosoftGraphPrinterProcessingStateDetailPuncherOffline                            MicrosoftGraphPrinterProcessingStateDetail = "puncherOffline"
	MicrosoftGraphPrinterProcessingStateDetailPuncherOpened                             MicrosoftGraphPrinterProcessingStateDetail = "puncherOpened"
	MicrosoftGraphPrinterProcessingStateDetailPuncherOverTemperature                    MicrosoftGraphPrinterProcessingStateDetail = "puncherOverTemperature"
	MicrosoftGraphPrinterProcessingStateDetailPuncherPowerSaver                         MicrosoftGraphPrinterProcessingStateDetail = "puncherPowerSaver"
	MicrosoftGraphPrinterProcessingStateDetailPuncherRecoverableFailure                 MicrosoftGraphPrinterProcessingStateDetail = "puncherRecoverableFailure"
	MicrosoftGraphPrinterProcessingStateDetailPuncherRecoverableStorage                 MicrosoftGraphPrinterProcessingStateDetail = "puncherRecoverableStorage"
	MicrosoftGraphPrinterProcessingStateDetailPuncherRemoved                            MicrosoftGraphPrinterProcessingStateDetail = "puncherRemoved"
	MicrosoftGraphPrinterProcessingStateDetailPuncherResourceAdded                      MicrosoftGraphPrinterProcessingStateDetail = "puncherResourceAdded"
	MicrosoftGraphPrinterProcessingStateDetailPuncherResourceRemoved                    MicrosoftGraphPrinterProcessingStateDetail = "puncherResourceRemoved"
	MicrosoftGraphPrinterProcessingStateDetailPuncherThermistorFailure                  MicrosoftGraphPrinterProcessingStateDetail = "puncherThermistorFailure"
	MicrosoftGraphPrinterProcessingStateDetailPuncherTimingFailure                      MicrosoftGraphPrinterProcessingStateDetail = "puncherTimingFailure"
	MicrosoftGraphPrinterProcessingStateDetailPuncherTurnedOff                          MicrosoftGraphPrinterProcessingStateDetail = "puncherTurnedOff"
	MicrosoftGraphPrinterProcessingStateDetailPuncherTurnedOn                           MicrosoftGraphPrinterProcessingStateDetail = "puncherTurnedOn"
	MicrosoftGraphPrinterProcessingStateDetailPuncherUnderTemperature                   MicrosoftGraphPrinterProcessingStateDetail = "puncherUnderTemperature"
	MicrosoftGraphPrinterProcessingStateDetailPuncherUnrecoverableFailure               MicrosoftGraphPrinterProcessingStateDetail = "puncherUnrecoverableFailure"
	MicrosoftGraphPrinterProcessingStateDetailPuncherUnrecoverableStorageError          MicrosoftGraphPrinterProcessingStateDetail = "puncherUnrecoverableStorageError"
	MicrosoftGraphPrinterProcessingStateDetailPuncherWarmingUp                          MicrosoftGraphPrinterProcessingStateDetail = "puncherWarmingUp"
	MicrosoftGraphPrinterProcessingStateDetailResuming                                  MicrosoftGraphPrinterProcessingStateDetail = "resuming"
	MicrosoftGraphPrinterProcessingStateDetailScanMediaPathFailure                      MicrosoftGraphPrinterProcessingStateDetail = "scanMediaPathFailure"
	MicrosoftGraphPrinterProcessingStateDetailScanMediaPathInputEmpty                   MicrosoftGraphPrinterProcessingStateDetail = "scanMediaPathInputEmpty"
	MicrosoftGraphPrinterProcessingStateDetailScanMediaPathInputFeedError               MicrosoftGraphPrinterProcessingStateDetail = "scanMediaPathInputFeedError"
	MicrosoftGraphPrinterProcessingStateDetailScanMediaPathInputJam                     MicrosoftGraphPrinterProcessingStateDetail = "scanMediaPathInputJam"
	MicrosoftGraphPrinterProcessingStateDetailScanMediaPathInputRequest                 MicrosoftGraphPrinterProcessingStateDetail = "scanMediaPathInputRequest"
	MicrosoftGraphPrinterProcessingStateDetailScanMediaPathJam                          MicrosoftGraphPrinterProcessingStateDetail = "scanMediaPathJam"
	MicrosoftGraphPrinterProcessingStateDetailScanMediaPathOutputFeedError              MicrosoftGraphPrinterProcessingStateDetail = "scanMediaPathOutputFeedError"
	MicrosoftGraphPrinterProcessingStateDetailScanMediaPathOutputFull                   MicrosoftGraphPrinterProcessingStateDetail = "scanMediaPathOutputFull"
	MicrosoftGraphPrinterProcessingStateDetailScanMediaPathOutputJam                    MicrosoftGraphPrinterProcessingStateDetail = "scanMediaPathOutputJam"
	MicrosoftGraphPrinterProcessingStateDetailScanMediaPathPickRollerFailure            MicrosoftGraphPrinterProcessingStateDetail = "scanMediaPathPickRollerFailure"
	MicrosoftGraphPrinterProcessingStateDetailScanMediaPathPickRollerLifeOver           MicrosoftGraphPrinterProcessingStateDetail = "scanMediaPathPickRollerLifeOver"
	MicrosoftGraphPrinterProcessingStateDetailScanMediaPathPickRollerLifeWarn           MicrosoftGraphPrinterProcessingStateDetail = "scanMediaPathPickRollerLifeWarn"
	MicrosoftGraphPrinterProcessingStateDetailScanMediaPathPickRollerMissing            MicrosoftGraphPrinterProcessingStateDetail = "scanMediaPathPickRollerMissing"
	MicrosoftGraphPrinterProcessingStateDetailScanMediaPathTrayAlmostFull               MicrosoftGraphPrinterProcessingStateDetail = "scanMediaPathTrayAlmostFull"
	MicrosoftGraphPrinterProcessingStateDetailScanMediaPathTrayFull                     MicrosoftGraphPrinterProcessingStateDetail = "scanMediaPathTrayFull"
	MicrosoftGraphPrinterProcessingStateDetailScanMediaPathTrayMissing                  MicrosoftGraphPrinterProcessingStateDetail = "scanMediaPathTrayMissing"
	MicrosoftGraphPrinterProcessingStateDetailScannerLightFailure                       MicrosoftGraphPrinterProcessingStateDetail = "scannerLightFailure"
	MicrosoftGraphPrinterProcessingStateDetailScannerLightLifeAlmostOver                MicrosoftGraphPrinterProcessingStateDetail = "scannerLightLifeAlmostOver"
	MicrosoftGraphPrinterProcessingStateDetailScannerLightLifeOver                      MicrosoftGraphPrinterProcessingStateDetail = "scannerLightLifeOver"
	MicrosoftGraphPrinterProcessingStateDetailScannerLightMissing                       MicrosoftGraphPrinterProcessingStateDetail = "scannerLightMissing"
	MicrosoftGraphPrinterProcessingStateDetailScannerSensorFailure                      MicrosoftGraphPrinterProcessingStateDetail = "scannerSensorFailure"
	MicrosoftGraphPrinterProcessingStateDetailScannerSensorLifeAlmostOver               MicrosoftGraphPrinterProcessingStateDetail = "scannerSensorLifeAlmostOver"
	MicrosoftGraphPrinterProcessingStateDetailScannerSensorLifeOver                     MicrosoftGraphPrinterProcessingStateDetail = "scannerSensorLifeOver"
	MicrosoftGraphPrinterProcessingStateDetailScannerSensorMissing                      MicrosoftGraphPrinterProcessingStateDetail = "scannerSensorMissing"
	MicrosoftGraphPrinterProcessingStateDetailSeparationCutterAdded                     MicrosoftGraphPrinterProcessingStateDetail = "separationCutterAdded"
	MicrosoftGraphPrinterProcessingStateDetailSeparationCutterAlmostEmpty               MicrosoftGraphPrinterProcessingStateDetail = "separationCutterAlmostEmpty"
	MicrosoftGraphPrinterProcessingStateDetailSeparationCutterAlmostFull                MicrosoftGraphPrinterProcessingStateDetail = "separationCutterAlmostFull"
	MicrosoftGraphPrinterProcessingStateDetailSeparationCutterAtLimit                   MicrosoftGraphPrinterProcessingStateDetail = "separationCutterAtLimit"
	MicrosoftGraphPrinterProcessingStateDetailSeparationCutterClosed                    MicrosoftGraphPrinterProcessingStateDetail = "separationCutterClosed"
	MicrosoftGraphPrinterProcessingStateDetailSeparationCutterConfigurationChange       MicrosoftGraphPrinterProcessingStateDetail = "separationCutterConfigurationChange"
	MicrosoftGraphPrinterProcessingStateDetailSeparationCutterCoverClosed               MicrosoftGraphPrinterProcessingStateDetail = "separationCutterCoverClosed"
	MicrosoftGraphPrinterProcessingStateDetailSeparationCutterCoverOpen                 MicrosoftGraphPrinterProcessingStateDetail = "separationCutterCoverOpen"
	MicrosoftGraphPrinterProcessingStateDetailSeparationCutterEmpty                     MicrosoftGraphPrinterProcessingStateDetail = "separationCutterEmpty"
	MicrosoftGraphPrinterProcessingStateDetailSeparationCutterFull                      MicrosoftGraphPrinterProcessingStateDetail = "separationCutterFull"
	MicrosoftGraphPrinterProcessingStateDetailSeparationCutterInterlockClosed           MicrosoftGraphPrinterProcessingStateDetail = "separationCutterInterlockClosed"
	MicrosoftGraphPrinterProcessingStateDetailSeparationCutterInterlockOpen             MicrosoftGraphPrinterProcessingStateDetail = "separationCutterInterlockOpen"
	MicrosoftGraphPrinterProcessingStateDetailSeparationCutterJam                       MicrosoftGraphPrinterProcessingStateDetail = "separationCutterJam"
	MicrosoftGraphPrinterProcessingStateDetailSeparationCutterLifeAlmostOver            MicrosoftGraphPrinterProcessingStateDetail = "separationCutterLifeAlmostOver"
	MicrosoftGraphPrinterProcessingStateDetailSeparationCutterLifeOver                  MicrosoftGraphPrinterProcessingStateDetail = "separationCutterLifeOver"
	MicrosoftGraphPrinterProcessingStateDetailSeparationCutterMemoryExhausted           MicrosoftGraphPrinterProcessingStateDetail = "separationCutterMemoryExhausted"
	MicrosoftGraphPrinterProcessingStateDetailSeparationCutterMissing                   MicrosoftGraphPrinterProcessingStateDetail = "separationCutterMissing"
	MicrosoftGraphPrinterProcessingStateDetailSeparationCutterMotorFailure              MicrosoftGraphPrinterProcessingStateDetail = "separationCutterMotorFailure"
	MicrosoftGraphPrinterProcessingStateDetailSeparationCutterNearLimit                 MicrosoftGraphPrinterProcessingStateDetail = "separationCutterNearLimit"
	MicrosoftGraphPrinterProcessingStateDetailSeparationCutterOffline                   MicrosoftGraphPrinterProcessingStateDetail = "separationCutterOffline"
	MicrosoftGraphPrinterProcessingStateDetailSeparationCutterOpened                    MicrosoftGraphPrinterProcessingStateDetail = "separationCutterOpened"
	MicrosoftGraphPrinterProcessingStateDetailSeparationCutterOverTemperature           MicrosoftGraphPrinterProcessingStateDetail = "separationCutterOverTemperature"
	MicrosoftGraphPrinterProcessingStateDetailSeparationCutterPowerSaver                MicrosoftGraphPrinterProcessingStateDetail = "separationCutterPowerSaver"
	MicrosoftGraphPrinterProcessingStateDetailSeparationCutterRecoverableFailure        MicrosoftGraphPrinterProcessingStateDetail = "separationCutterRecoverableFailure"
	MicrosoftGraphPrinterProcessingStateDetailSeparationCutterRecoverableStorage        MicrosoftGraphPrinterProcessingStateDetail = "separationCutterRecoverableStorage"
	MicrosoftGraphPrinterProcessingStateDetailSeparationCutterRemoved                   MicrosoftGraphPrinterProcessingStateDetail = "separationCutterRemoved"
	MicrosoftGraphPrinterProcessingStateDetailSeparationCutterResourceAdded             MicrosoftGraphPrinterProcessingStateDetail = "separationCutterResourceAdded"
	MicrosoftGraphPrinterProcessingStateDetailSeparationCutterResourceRemoved           MicrosoftGraphPrinterProcessingStateDetail = "separationCutterResourceRemoved"
	MicrosoftGraphPrinterProcessingStateDetailSeparationCutterThermistorFailure         MicrosoftGraphPrinterProcessingStateDetail = "separationCutterThermistorFailure"
	MicrosoftGraphPrinterProcessingStateDetailSeparationCutterTimingFailure             MicrosoftGraphPrinterProcessingStateDetail = "separationCutterTimingFailure"
	MicrosoftGraphPrinterProcessingStateDetailSeparationCutterTurnedOff                 MicrosoftGraphPrinterProcessingStateDetail = "separationCutterTurnedOff"
	MicrosoftGraphPrinterProcessingStateDetailSeparationCutterTurnedOn                  MicrosoftGraphPrinterProcessingStateDetail = "separationCutterTurnedOn"
	MicrosoftGraphPrinterProcessingStateDetailSeparationCutterUnderTemperature          MicrosoftGraphPrinterProcessingStateDetail = "separationCutterUnderTemperature"
	MicrosoftGraphPrinterProcessingStateDetailSeparationCutterUnrecoverableFailure      MicrosoftGraphPrinterProcessingStateDetail = "separationCutterUnrecoverableFailure"
	MicrosoftGraphPrinterProcessingStateDetailSeparationCutterUnrecoverableStorageError MicrosoftGraphPrinterProcessingStateDetail = "separationCutterUnrecoverableStorageError"
	MicrosoftGraphPrinterProcessingStateDetailSeparationCutterWarmingUp                 MicrosoftGraphPrinterProcessingStateDetail = "separationCutterWarmingUp"
	MicrosoftGraphPrinterProcessingStateDetailSheetRotatorAdded                         MicrosoftGraphPrinterProcessingStateDetail = "sheetRotatorAdded"
	MicrosoftGraphPrinterProcessingStateDetailSheetRotatorAlmostEmpty                   MicrosoftGraphPrinterProcessingStateDetail = "sheetRotatorAlmostEmpty"
	MicrosoftGraphPrinterProcessingStateDetailSheetRotatorAlmostFull                    MicrosoftGraphPrinterProcessingStateDetail = "sheetRotatorAlmostFull"
	MicrosoftGraphPrinterProcessingStateDetailSheetRotatorAtLimit                       MicrosoftGraphPrinterProcessingStateDetail = "sheetRotatorAtLimit"
	MicrosoftGraphPrinterProcessingStateDetailSheetRotatorClosed                        MicrosoftGraphPrinterProcessingStateDetail = "sheetRotatorClosed"
	MicrosoftGraphPrinterProcessingStateDetailSheetRotatorConfigurationChange           MicrosoftGraphPrinterProcessingStateDetail = "sheetRotatorConfigurationChange"
	MicrosoftGraphPrinterProcessingStateDetailSheetRotatorCoverClosed                   MicrosoftGraphPrinterProcessingStateDetail = "sheetRotatorCoverClosed"
	MicrosoftGraphPrinterProcessingStateDetailSheetRotatorCoverOpen                     MicrosoftGraphPrinterProcessingStateDetail = "sheetRotatorCoverOpen"
	MicrosoftGraphPrinterProcessingStateDetailSheetRotatorEmpty                         MicrosoftGraphPrinterProcessingStateDetail = "sheetRotatorEmpty"
	MicrosoftGraphPrinterProcessingStateDetailSheetRotatorFull                          MicrosoftGraphPrinterProcessingStateDetail = "sheetRotatorFull"
	MicrosoftGraphPrinterProcessingStateDetailSheetRotatorInterlockClosed               MicrosoftGraphPrinterProcessingStateDetail = "sheetRotatorInterlockClosed"
	MicrosoftGraphPrinterProcessingStateDetailSheetRotatorInterlockOpen                 MicrosoftGraphPrinterProcessingStateDetail = "sheetRotatorInterlockOpen"
	MicrosoftGraphPrinterProcessingStateDetailSheetRotatorJam                           MicrosoftGraphPrinterProcessingStateDetail = "sheetRotatorJam"
	MicrosoftGraphPrinterProcessingStateDetailSheetRotatorLifeAlmostOver                MicrosoftGraphPrinterProcessingStateDetail = "sheetRotatorLifeAlmostOver"
	MicrosoftGraphPrinterProcessingStateDetailSheetRotatorLifeOver                      MicrosoftGraphPrinterProcessingStateDetail = "sheetRotatorLifeOver"
	MicrosoftGraphPrinterProcessingStateDetailSheetRotatorMemoryExhausted               MicrosoftGraphPrinterProcessingStateDetail = "sheetRotatorMemoryExhausted"
	MicrosoftGraphPrinterProcessingStateDetailSheetRotatorMissing                       MicrosoftGraphPrinterProcessingStateDetail = "sheetRotatorMissing"
	MicrosoftGraphPrinterProcessingStateDetailSheetRotatorMotorFailure                  MicrosoftGraphPrinterProcessingStateDetail = "sheetRotatorMotorFailure"
	MicrosoftGraphPrinterProcessingStateDetailSheetRotatorNearLimit                     MicrosoftGraphPrinterProcessingStateDetail = "sheetRotatorNearLimit"
	MicrosoftGraphPrinterProcessingStateDetailSheetRotatorOffline                       MicrosoftGraphPrinterProcessingStateDetail = "sheetRotatorOffline"
	MicrosoftGraphPrinterProcessingStateDetailSheetRotatorOpened                        MicrosoftGraphPrinterProcessingStateDetail = "sheetRotatorOpened"
	MicrosoftGraphPrinterProcessingStateDetailSheetRotatorOverTemperature               MicrosoftGraphPrinterProcessingStateDetail = "sheetRotatorOverTemperature"
	MicrosoftGraphPrinterProcessingStateDetailSheetRotatorPowerSaver                    MicrosoftGraphPrinterProcessingStateDetail = "sheetRotatorPowerSaver"
	MicrosoftGraphPrinterProcessingStateDetailSheetRotatorRecoverableFailure            MicrosoftGraphPrinterProcessingStateDetail = "sheetRotatorRecoverableFailure"
	MicrosoftGraphPrinterProcessingStateDetailSheetRotatorRecoverableStorage            MicrosoftGraphPrinterProcessingStateDetail = "sheetRotatorRecoverableStorage"
	MicrosoftGraphPrinterProcessingStateDetailSheetRotatorRemoved                       MicrosoftGraphPrinterProcessingStateDetail = "sheetRotatorRemoved"
	MicrosoftGraphPrinterProcessingStateDetailSheetRotatorResourceAdded                 MicrosoftGraphPrinterProcessingStateDetail = "sheetRotatorResourceAdded"
	MicrosoftGraphPrinterProcessingStateDetailSheetRotatorResourceRemoved               MicrosoftGraphPrinterProcessingStateDetail = "sheetRotatorResourceRemoved"
	MicrosoftGraphPrinterProcessingStateDetailSheetRotatorThermistorFailure             MicrosoftGraphPrinterProcessingStateDetail = "sheetRotatorThermistorFailure"
	MicrosoftGraphPrinterProcessingStateDetailSheetRotatorTimingFailure                 MicrosoftGraphPrinterProcessingStateDetail = "sheetRotatorTimingFailure"
	MicrosoftGraphPrinterProcessingStateDetailSheetRotatorTurnedOff                     MicrosoftGraphPrinterProcessingStateDetail = "sheetRotatorTurnedOff"
	MicrosoftGraphPrinterProcessingStateDetailSheetRotatorTurnedOn                      MicrosoftGraphPrinterProcessingStateDetail = "sheetRotatorTurnedOn"
	MicrosoftGraphPrinterProcessingStateDetailSheetRotatorUnderTemperature              MicrosoftGraphPrinterProcessingStateDetail = "sheetRotatorUnderTemperature"
	MicrosoftGraphPrinterProcessingStateDetailSheetRotatorUnrecoverableFailure          MicrosoftGraphPrinterProcessingStateDetail = "sheetRotatorUnrecoverableFailure"
	MicrosoftGraphPrinterProcessingStateDetailSheetRotatorUnrecoverableStorageError     MicrosoftGraphPrinterProcessingStateDetail = "sheetRotatorUnrecoverableStorageError"
	MicrosoftGraphPrinterProcessingStateDetailSheetRotatorWarmingUp                     MicrosoftGraphPrinterProcessingStateDetail = "sheetRotatorWarmingUp"
	MicrosoftGraphPrinterProcessingStateDetailShutdown                                  MicrosoftGraphPrinterProcessingStateDetail = "shutdown"
	MicrosoftGraphPrinterProcessingStateDetailSlitterAdded                              MicrosoftGraphPrinterProcessingStateDetail = "slitterAdded"
	MicrosoftGraphPrinterProcessingStateDetailSlitterAlmostEmpty                        MicrosoftGraphPrinterProcessingStateDetail = "slitterAlmostEmpty"
	MicrosoftGraphPrinterProcessingStateDetailSlitterAlmostFull                         MicrosoftGraphPrinterProcessingStateDetail = "slitterAlmostFull"
	MicrosoftGraphPrinterProcessingStateDetailSlitterAtLimit                            MicrosoftGraphPrinterProcessingStateDetail = "slitterAtLimit"
	MicrosoftGraphPrinterProcessingStateDetailSlitterClosed                             MicrosoftGraphPrinterProcessingStateDetail = "slitterClosed"
	MicrosoftGraphPrinterProcessingStateDetailSlitterConfigurationChange                MicrosoftGraphPrinterProcessingStateDetail = "slitterConfigurationChange"
	MicrosoftGraphPrinterProcessingStateDetailSlitterCoverClosed                        MicrosoftGraphPrinterProcessingStateDetail = "slitterCoverClosed"
	MicrosoftGraphPrinterProcessingStateDetailSlitterCoverOpen                          MicrosoftGraphPrinterProcessingStateDetail = "slitterCoverOpen"
	MicrosoftGraphPrinterProcessingStateDetailSlitterEmpty                              MicrosoftGraphPrinterProcessingStateDetail = "slitterEmpty"
	MicrosoftGraphPrinterProcessingStateDetailSlitterFull                               MicrosoftGraphPrinterProcessingStateDetail = "slitterFull"
	MicrosoftGraphPrinterProcessingStateDetailSlitterInterlockClosed                    MicrosoftGraphPrinterProcessingStateDetail = "slitterInterlockClosed"
	MicrosoftGraphPrinterProcessingStateDetailSlitterInterlockOpen                      MicrosoftGraphPrinterProcessingStateDetail = "slitterInterlockOpen"
	MicrosoftGraphPrinterProcessingStateDetailSlitterJam                                MicrosoftGraphPrinterProcessingStateDetail = "slitterJam"
	MicrosoftGraphPrinterProcessingStateDetailSlitterLifeAlmostOver                     MicrosoftGraphPrinterProcessingStateDetail = "slitterLifeAlmostOver"
	MicrosoftGraphPrinterProcessingStateDetailSlitterLifeOver                           MicrosoftGraphPrinterProcessingStateDetail = "slitterLifeOver"
	MicrosoftGraphPrinterProcessingStateDetailSlitterMemoryExhausted                    MicrosoftGraphPrinterProcessingStateDetail = "slitterMemoryExhausted"
	MicrosoftGraphPrinterProcessingStateDetailSlitterMissing                            MicrosoftGraphPrinterProcessingStateDetail = "slitterMissing"
	MicrosoftGraphPrinterProcessingStateDetailSlitterMotorFailure                       MicrosoftGraphPrinterProcessingStateDetail = "slitterMotorFailure"
	MicrosoftGraphPrinterProcessingStateDetailSlitterNearLimit                          MicrosoftGraphPrinterProcessingStateDetail = "slitterNearLimit"
	MicrosoftGraphPrinterProcessingStateDetailSlitterOffline                            MicrosoftGraphPrinterProcessingStateDetail = "slitterOffline"
	MicrosoftGraphPrinterProcessingStateDetailSlitterOpened                             MicrosoftGraphPrinterProcessingStateDetail = "slitterOpened"
	MicrosoftGraphPrinterProcessingStateDetailSlitterOverTemperature                    MicrosoftGraphPrinterProcessingStateDetail = "slitterOverTemperature"
	MicrosoftGraphPrinterProcessingStateDetailSlitterPowerSaver                         MicrosoftGraphPrinterProcessingStateDetail = "slitterPowerSaver"
	MicrosoftGraphPrinterProcessingStateDetailSlitterRecoverableFailure                 MicrosoftGraphPrinterProcessingStateDetail = "slitterRecoverableFailure"
	MicrosoftGraphPrinterProcessingStateDetailSlitterRecoverableStorage                 MicrosoftGraphPrinterProcessingStateDetail = "slitterRecoverableStorage"
	MicrosoftGraphPrinterProcessingStateDetailSlitterRemoved                            MicrosoftGraphPrinterProcessingStateDetail = "slitterRemoved"
	MicrosoftGraphPrinterProcessingStateDetailSlitterResourceAdded                      MicrosoftGraphPrinterProcessingStateDetail = "slitterResourceAdded"
	MicrosoftGraphPrinterProcessingStateDetailSlitterResourceRemoved                    MicrosoftGraphPrinterProcessingStateDetail = "slitterResourceRemoved"
	MicrosoftGraphPrinterProcessingStateDetailSlitterThermistorFailure                  MicrosoftGraphPrinterProcessingStateDetail = "slitterThermistorFailure"
	MicrosoftGraphPrinterProcessingStateDetailSlitterTimingFailure                      MicrosoftGraphPrinterProcessingStateDetail = "slitterTimingFailure"
	MicrosoftGraphPrinterProcessingStateDetailSlitterTurnedOff                          MicrosoftGraphPrinterProcessingStateDetail = "slitterTurnedOff"
	MicrosoftGraphPrinterProcessingStateDetailSlitterTurnedOn                           MicrosoftGraphPrinterProcessingStateDetail = "slitterTurnedOn"
	MicrosoftGraphPrinterProcessingStateDetailSlitterUnderTemperature                   MicrosoftGraphPrinterProcessingStateDetail = "slitterUnderTemperature"
	MicrosoftGraphPrinterProcessingStateDetailSlitterUnrecoverableFailure               MicrosoftGraphPrinterProcessingStateDetail = "slitterUnrecoverableFailure"
	MicrosoftGraphPrinterProcessingStateDetailSlitterUnrecoverableStorageError          MicrosoftGraphPrinterProcessingStateDetail = "slitterUnrecoverableStorageError"
	MicrosoftGraphPrinterProcessingStateDetailSlitterWarmingUp                          MicrosoftGraphPrinterProcessingStateDetail = "slitterWarmingUp"
	MicrosoftGraphPrinterProcessingStateDetailSpoolAreaFull                             MicrosoftGraphPrinterProcessingStateDetail = "spoolAreaFull"
	MicrosoftGraphPrinterProcessingStateDetailStackerAdded                              MicrosoftGraphPrinterProcessingStateDetail = "stackerAdded"
	MicrosoftGraphPrinterProcessingStateDetailStackerAlmostEmpty                        MicrosoftGraphPrinterProcessingStateDetail = "stackerAlmostEmpty"
	MicrosoftGraphPrinterProcessingStateDetailStackerAlmostFull                         MicrosoftGraphPrinterProcessingStateDetail = "stackerAlmostFull"
	MicrosoftGraphPrinterProcessingStateDetailStackerAtLimit                            MicrosoftGraphPrinterProcessingStateDetail = "stackerAtLimit"
	MicrosoftGraphPrinterProcessingStateDetailStackerClosed                             MicrosoftGraphPrinterProcessingStateDetail = "stackerClosed"
	MicrosoftGraphPrinterProcessingStateDetailStackerConfigurationChange                MicrosoftGraphPrinterProcessingStateDetail = "stackerConfigurationChange"
	MicrosoftGraphPrinterProcessingStateDetailStackerCoverClosed                        MicrosoftGraphPrinterProcessingStateDetail = "stackerCoverClosed"
	MicrosoftGraphPrinterProcessingStateDetailStackerCoverOpen                          MicrosoftGraphPrinterProcessingStateDetail = "stackerCoverOpen"
	MicrosoftGraphPrinterProcessingStateDetailStackerEmpty                              MicrosoftGraphPrinterProcessingStateDetail = "stackerEmpty"
	MicrosoftGraphPrinterProcessingStateDetailStackerFull                               MicrosoftGraphPrinterProcessingStateDetail = "stackerFull"
	MicrosoftGraphPrinterProcessingStateDetailStackerInterlockClosed                    MicrosoftGraphPrinterProcessingStateDetail = "stackerInterlockClosed"
	MicrosoftGraphPrinterProcessingStateDetailStackerInterlockOpen                      MicrosoftGraphPrinterProcessingStateDetail = "stackerInterlockOpen"
	MicrosoftGraphPrinterProcessingStateDetailStackerJam                                MicrosoftGraphPrinterProcessingStateDetail = "stackerJam"
	MicrosoftGraphPrinterProcessingStateDetailStackerLifeAlmostOver                     MicrosoftGraphPrinterProcessingStateDetail = "stackerLifeAlmostOver"
	MicrosoftGraphPrinterProcessingStateDetailStackerLifeOver                           MicrosoftGraphPrinterProcessingStateDetail = "stackerLifeOver"
	MicrosoftGraphPrinterProcessingStateDetailStackerMemoryExhausted                    MicrosoftGraphPrinterProcessingStateDetail = "stackerMemoryExhausted"
	MicrosoftGraphPrinterProcessingStateDetailStackerMissing                            MicrosoftGraphPrinterProcessingStateDetail = "stackerMissing"
	MicrosoftGraphPrinterProcessingStateDetailStackerMotorFailure                       MicrosoftGraphPrinterProcessingStateDetail = "stackerMotorFailure"
	MicrosoftGraphPrinterProcessingStateDetailStackerNearLimit                          MicrosoftGraphPrinterProcessingStateDetail = "stackerNearLimit"
	MicrosoftGraphPrinterProcessingStateDetailStackerOffline                            MicrosoftGraphPrinterProcessingStateDetail = "stackerOffline"
	MicrosoftGraphPrinterProcessingStateDetailStackerOpened                             MicrosoftGraphPrinterProcessingStateDetail = "stackerOpened"
	MicrosoftGraphPrinterProcessingStateDetailStackerOverTemperature                    MicrosoftGraphPrinterProcessingStateDetail = "stackerOverTemperature"
	MicrosoftGraphPrinterProcessingStateDetailStackerPowerSaver                         MicrosoftGraphPrinterProcessingStateDetail = "stackerPowerSaver"
	MicrosoftGraphPrinterProcessingStateDetailStackerRecoverableFailure                 MicrosoftGraphPrinterProcessingStateDetail = "stackerRecoverableFailure"
	MicrosoftGraphPrinterProcessingStateDetailStackerRecoverableStorage                 MicrosoftGraphPrinterProcessingStateDetail = "stackerRecoverableStorage"
	MicrosoftGraphPrinterProcessingStateDetailStackerRemoved                            MicrosoftGraphPrinterProcessingStateDetail = "stackerRemoved"
	MicrosoftGraphPrinterProcessingStateDetailStackerResourceAdded                      MicrosoftGraphPrinterProcessingStateDetail = "stackerResourceAdded"
	MicrosoftGraphPrinterProcessingStateDetailStackerResourceRemoved                    MicrosoftGraphPrinterProcessingStateDetail = "stackerResourceRemoved"
	MicrosoftGraphPrinterProcessingStateDetailStackerThermistorFailure                  MicrosoftGraphPrinterProcessingStateDetail = "stackerThermistorFailure"
	MicrosoftGraphPrinterProcessingStateDetailStackerTimingFailure                      MicrosoftGraphPrinterProcessingStateDetail = "stackerTimingFailure"
	MicrosoftGraphPrinterProcessingStateDetailStackerTurnedOff                          MicrosoftGraphPrinterProcessingStateDetail = "stackerTurnedOff"
	MicrosoftGraphPrinterProcessingStateDetailStackerTurnedOn                           MicrosoftGraphPrinterProcessingStateDetail = "stackerTurnedOn"
	MicrosoftGraphPrinterProcessingStateDetailStackerUnderTemperature                   MicrosoftGraphPrinterProcessingStateDetail = "stackerUnderTemperature"
	MicrosoftGraphPrinterProcessingStateDetailStackerUnrecoverableFailure               MicrosoftGraphPrinterProcessingStateDetail = "stackerUnrecoverableFailure"
	MicrosoftGraphPrinterProcessingStateDetailStackerUnrecoverableStorageError          MicrosoftGraphPrinterProcessingStateDetail = "stackerUnrecoverableStorageError"
	MicrosoftGraphPrinterProcessingStateDetailStackerWarmingUp                          MicrosoftGraphPrinterProcessingStateDetail = "stackerWarmingUp"
	MicrosoftGraphPrinterProcessingStateDetailStandby                                   MicrosoftGraphPrinterProcessingStateDetail = "standby"
	MicrosoftGraphPrinterProcessingStateDetailStaplerAdded                              MicrosoftGraphPrinterProcessingStateDetail = "staplerAdded"
	MicrosoftGraphPrinterProcessingStateDetailStaplerAlmostEmpty                        MicrosoftGraphPrinterProcessingStateDetail = "staplerAlmostEmpty"
	MicrosoftGraphPrinterProcessingStateDetailStaplerAlmostFull                         MicrosoftGraphPrinterProcessingStateDetail = "staplerAlmostFull"
	MicrosoftGraphPrinterProcessingStateDetailStaplerAtLimit                            MicrosoftGraphPrinterProcessingStateDetail = "staplerAtLimit"
	MicrosoftGraphPrinterProcessingStateDetailStaplerClosed                             MicrosoftGraphPrinterProcessingStateDetail = "staplerClosed"
	MicrosoftGraphPrinterProcessingStateDetailStaplerConfigurationChange                MicrosoftGraphPrinterProcessingStateDetail = "staplerConfigurationChange"
	MicrosoftGraphPrinterProcessingStateDetailStaplerCoverClosed                        MicrosoftGraphPrinterProcessingStateDetail = "staplerCoverClosed"
	MicrosoftGraphPrinterProcessingStateDetailStaplerCoverOpen                          MicrosoftGraphPrinterProcessingStateDetail = "staplerCoverOpen"
	MicrosoftGraphPrinterProcessingStateDetailStaplerEmpty                              MicrosoftGraphPrinterProcessingStateDetail = "staplerEmpty"
	MicrosoftGraphPrinterProcessingStateDetailStaplerFull                               MicrosoftGraphPrinterProcessingStateDetail = "staplerFull"
	MicrosoftGraphPrinterProcessingStateDetailStaplerInterlockClosed                    MicrosoftGraphPrinterProcessingStateDetail = "staplerInterlockClosed"
	MicrosoftGraphPrinterProcessingStateDetailStaplerInterlockOpen                      MicrosoftGraphPrinterProcessingStateDetail = "staplerInterlockOpen"
	MicrosoftGraphPrinterProcessingStateDetailStaplerJam                                MicrosoftGraphPrinterProcessingStateDetail = "staplerJam"
	MicrosoftGraphPrinterProcessingStateDetailStaplerLifeAlmostOver                     MicrosoftGraphPrinterProcessingStateDetail = "staplerLifeAlmostOver"
	MicrosoftGraphPrinterProcessingStateDetailStaplerLifeOver                           MicrosoftGraphPrinterProcessingStateDetail = "staplerLifeOver"
	MicrosoftGraphPrinterProcessingStateDetailStaplerMemoryExhausted                    MicrosoftGraphPrinterProcessingStateDetail = "staplerMemoryExhausted"
	MicrosoftGraphPrinterProcessingStateDetailStaplerMissing                            MicrosoftGraphPrinterProcessingStateDetail = "staplerMissing"
	MicrosoftGraphPrinterProcessingStateDetailStaplerMotorFailure                       MicrosoftGraphPrinterProcessingStateDetail = "staplerMotorFailure"
	MicrosoftGraphPrinterProcessingStateDetailStaplerNearLimit                          MicrosoftGraphPrinterProcessingStateDetail = "staplerNearLimit"
	MicrosoftGraphPrinterProcessingStateDetailStaplerOffline                            MicrosoftGraphPrinterProcessingStateDetail = "staplerOffline"
	MicrosoftGraphPrinterProcessingStateDetailStaplerOpened                             MicrosoftGraphPrinterProcessingStateDetail = "staplerOpened"
	MicrosoftGraphPrinterProcessingStateDetailStaplerOverTemperature                    MicrosoftGraphPrinterProcessingStateDetail = "staplerOverTemperature"
	MicrosoftGraphPrinterProcessingStateDetailStaplerPowerSaver                         MicrosoftGraphPrinterProcessingStateDetail = "staplerPowerSaver"
	MicrosoftGraphPrinterProcessingStateDetailStaplerRecoverableFailure                 MicrosoftGraphPrinterProcessingStateDetail = "staplerRecoverableFailure"
	MicrosoftGraphPrinterProcessingStateDetailStaplerRecoverableStorage                 MicrosoftGraphPrinterProcessingStateDetail = "staplerRecoverableStorage"
	MicrosoftGraphPrinterProcessingStateDetailStaplerRemoved                            MicrosoftGraphPrinterProcessingStateDetail = "staplerRemoved"
	MicrosoftGraphPrinterProcessingStateDetailStaplerResourceAdded                      MicrosoftGraphPrinterProcessingStateDetail = "staplerResourceAdded"
	MicrosoftGraphPrinterProcessingStateDetailStaplerResourceRemoved                    MicrosoftGraphPrinterProcessingStateDetail = "staplerResourceRemoved"
	MicrosoftGraphPrinterProcessingStateDetailStaplerThermistorFailure                  MicrosoftGraphPrinterProcessingStateDetail = "staplerThermistorFailure"
	MicrosoftGraphPrinterProcessingStateDetailStaplerTimingFailure                      MicrosoftGraphPrinterProcessingStateDetail = "staplerTimingFailure"
	MicrosoftGraphPrinterProcessingStateDetailStaplerTurnedOff                          MicrosoftGraphPrinterProcessingStateDetail = "staplerTurnedOff"
	MicrosoftGraphPrinterProcessingStateDetailStaplerTurnedOn                           MicrosoftGraphPrinterProcessingStateDetail = "staplerTurnedOn"
	MicrosoftGraphPrinterProcessingStateDetailStaplerUnderTemperature                   MicrosoftGraphPrinterProcessingStateDetail = "staplerUnderTemperature"
	MicrosoftGraphPrinterProcessingStateDetailStaplerUnrecoverableFailure               MicrosoftGraphPrinterProcessingStateDetail = "staplerUnrecoverableFailure"
	MicrosoftGraphPrinterProcessingStateDetailStaplerUnrecoverableStorageError          MicrosoftGraphPrinterProcessingStateDetail = "staplerUnrecoverableStorageError"
	MicrosoftGraphPrinterProcessingStateDetailStaplerWarmingUp                          MicrosoftGraphPrinterProcessingStateDetail = "staplerWarmingUp"
	MicrosoftGraphPrinterProcessingStateDetailStitcherAdded                             MicrosoftGraphPrinterProcessingStateDetail = "stitcherAdded"
	MicrosoftGraphPrinterProcessingStateDetailStitcherAlmostEmpty                       MicrosoftGraphPrinterProcessingStateDetail = "stitcherAlmostEmpty"
	MicrosoftGraphPrinterProcessingStateDetailStitcherAlmostFull                        MicrosoftGraphPrinterProcessingStateDetail = "stitcherAlmostFull"
	MicrosoftGraphPrinterProcessingStateDetailStitcherAtLimit                           MicrosoftGraphPrinterProcessingStateDetail = "stitcherAtLimit"
	MicrosoftGraphPrinterProcessingStateDetailStitcherClosed                            MicrosoftGraphPrinterProcessingStateDetail = "stitcherClosed"
	MicrosoftGraphPrinterProcessingStateDetailStitcherConfigurationChange               MicrosoftGraphPrinterProcessingStateDetail = "stitcherConfigurationChange"
	MicrosoftGraphPrinterProcessingStateDetailStitcherCoverClosed                       MicrosoftGraphPrinterProcessingStateDetail = "stitcherCoverClosed"
	MicrosoftGraphPrinterProcessingStateDetailStitcherCoverOpen                         MicrosoftGraphPrinterProcessingStateDetail = "stitcherCoverOpen"
	MicrosoftGraphPrinterProcessingStateDetailStitcherEmpty                             MicrosoftGraphPrinterProcessingStateDetail = "stitcherEmpty"
	MicrosoftGraphPrinterProcessingStateDetailStitcherFull                              MicrosoftGraphPrinterProcessingStateDetail = "stitcherFull"
	MicrosoftGraphPrinterProcessingStateDetailStitcherInterlockClosed                   MicrosoftGraphPrinterProcessingStateDetail = "stitcherInterlockClosed"
	MicrosoftGraphPrinterProcessingStateDetailStitcherInterlockOpen                     MicrosoftGraphPrinterProcessingStateDetail = "stitcherInterlockOpen"
	MicrosoftGraphPrinterProcessingStateDetailStitcherJam                               MicrosoftGraphPrinterProcessingStateDetail = "stitcherJam"
	MicrosoftGraphPrinterProcessingStateDetailStitcherLifeAlmostOver                    MicrosoftGraphPrinterProcessingStateDetail = "stitcherLifeAlmostOver"
	MicrosoftGraphPrinterProcessingStateDetailStitcherLifeOver                          MicrosoftGraphPrinterProcessingStateDetail = "stitcherLifeOver"
	MicrosoftGraphPrinterProcessingStateDetailStitcherMemoryExhausted                   MicrosoftGraphPrinterProcessingStateDetail = "stitcherMemoryExhausted"
	MicrosoftGraphPrinterProcessingStateDetailStitcherMissing                           MicrosoftGraphPrinterProcessingStateDetail = "stitcherMissing"
	MicrosoftGraphPrinterProcessingStateDetailStitcherMotorFailure                      MicrosoftGraphPrinterProcessingStateDetail = "stitcherMotorFailure"
	MicrosoftGraphPrinterProcessingStateDetailStitcherNearLimit                         MicrosoftGraphPrinterProcessingStateDetail = "stitcherNearLimit"
	MicrosoftGraphPrinterProcessingStateDetailStitcherOffline                           MicrosoftGraphPrinterProcessingStateDetail = "stitcherOffline"
	MicrosoftGraphPrinterProcessingStateDetailStitcherOpened                            MicrosoftGraphPrinterProcessingStateDetail = "stitcherOpened"
	MicrosoftGraphPrinterProcessingStateDetailStitcherOverTemperature                   MicrosoftGraphPrinterProcessingStateDetail = "stitcherOverTemperature"
	MicrosoftGraphPrinterProcessingStateDetailStitcherPowerSaver                        MicrosoftGraphPrinterProcessingStateDetail = "stitcherPowerSaver"
	MicrosoftGraphPrinterProcessingStateDetailStitcherRecoverableFailure                MicrosoftGraphPrinterProcessingStateDetail = "stitcherRecoverableFailure"
	MicrosoftGraphPrinterProcessingStateDetailStitcherRecoverableStorage                MicrosoftGraphPrinterProcessingStateDetail = "stitcherRecoverableStorage"
	MicrosoftGraphPrinterProcessingStateDetailStitcherRemoved                           MicrosoftGraphPrinterProcessingStateDetail = "stitcherRemoved"
	MicrosoftGraphPrinterProcessingStateDetailStitcherResourceAdded                     MicrosoftGraphPrinterProcessingStateDetail = "stitcherResourceAdded"
	MicrosoftGraphPrinterProcessingStateDetailStitcherResourceRemoved                   MicrosoftGraphPrinterProcessingStateDetail = "stitcherResourceRemoved"
	MicrosoftGraphPrinterProcessingStateDetailStitcherThermistorFailure                 MicrosoftGraphPrinterProcessingStateDetail = "stitcherThermistorFailure"
	MicrosoftGraphPrinterProcessingStateDetailStitcherTimingFailure                     MicrosoftGraphPrinterProcessingStateDetail = "stitcherTimingFailure"
	MicrosoftGraphPrinterProcessingStateDetailStitcherTurnedOff                         MicrosoftGraphPrinterProcessingStateDetail = "stitcherTurnedOff"
	MicrosoftGraphPrinterProcessingStateDetailStitcherTurnedOn                          MicrosoftGraphPrinterProcessingStateDetail = "stitcherTurnedOn"
	MicrosoftGraphPrinterProcessingStateDetailStitcherUnderTemperature                  MicrosoftGraphPrinterProcessingStateDetail = "stitcherUnderTemperature"
	MicrosoftGraphPrinterProcessingStateDetailStitcherUnrecoverableFailure              MicrosoftGraphPrinterProcessingStateDetail = "stitcherUnrecoverableFailure"
	MicrosoftGraphPrinterProcessingStateDetailStitcherUnrecoverableStorageError         MicrosoftGraphPrinterProcessingStateDetail = "stitcherUnrecoverableStorageError"
	MicrosoftGraphPrinterProcessingStateDetailStitcherWarmingUp                         MicrosoftGraphPrinterProcessingStateDetail = "stitcherWarmingUp"
	MicrosoftGraphPrinterProcessingStateDetailStoppedPartially                          MicrosoftGraphPrinterProcessingStateDetail = "stoppedPartially"
	MicrosoftGraphPrinterProcessingStateDetailStopping                                  MicrosoftGraphPrinterProcessingStateDetail = "stopping"
	MicrosoftGraphPrinterProcessingStateDetailSubunitAdded                              MicrosoftGraphPrinterProcessingStateDetail = "subunitAdded"
	MicrosoftGraphPrinterProcessingStateDetailSubunitAlmostEmpty                        MicrosoftGraphPrinterProcessingStateDetail = "subunitAlmostEmpty"
	MicrosoftGraphPrinterProcessingStateDetailSubunitAlmostFull                         MicrosoftGraphPrinterProcessingStateDetail = "subunitAlmostFull"
	MicrosoftGraphPrinterProcessingStateDetailSubunitAtLimit                            MicrosoftGraphPrinterProcessingStateDetail = "subunitAtLimit"
	MicrosoftGraphPrinterProcessingStateDetailSubunitClosed                             MicrosoftGraphPrinterProcessingStateDetail = "subunitClosed"
	MicrosoftGraphPrinterProcessingStateDetailSubunitCoolingDown                        MicrosoftGraphPrinterProcessingStateDetail = "subunitCoolingDown"
	MicrosoftGraphPrinterProcessingStateDetailSubunitEmpty                              MicrosoftGraphPrinterProcessingStateDetail = "subunitEmpty"
	MicrosoftGraphPrinterProcessingStateDetailSubunitFull                               MicrosoftGraphPrinterProcessingStateDetail = "subunitFull"
	MicrosoftGraphPrinterProcessingStateDetailSubunitLifeAlmostOver                     MicrosoftGraphPrinterProcessingStateDetail = "subunitLifeAlmostOver"
	MicrosoftGraphPrinterProcessingStateDetailSubunitLifeOver                           MicrosoftGraphPrinterProcessingStateDetail = "subunitLifeOver"
	MicrosoftGraphPrinterProcessingStateDetailSubunitMemoryExhausted                    MicrosoftGraphPrinterProcessingStateDetail = "subunitMemoryExhausted"
	MicrosoftGraphPrinterProcessingStateDetailSubunitMissing                            MicrosoftGraphPrinterProcessingStateDetail = "subunitMissing"
	MicrosoftGraphPrinterProcessingStateDetailSubunitMotorFailure                       MicrosoftGraphPrinterProcessingStateDetail = "subunitMotorFailure"
	MicrosoftGraphPrinterProcessingStateDetailSubunitNearLimit                          MicrosoftGraphPrinterProcessingStateDetail = "subunitNearLimit"
	MicrosoftGraphPrinterProcessingStateDetailSubunitOffline                            MicrosoftGraphPrinterProcessingStateDetail = "subunitOffline"
	MicrosoftGraphPrinterProcessingStateDetailSubunitOpened                             MicrosoftGraphPrinterProcessingStateDetail = "subunitOpened"
	MicrosoftGraphPrinterProcessingStateDetailSubunitOverTemperature                    MicrosoftGraphPrinterProcessingStateDetail = "subunitOverTemperature"
	MicrosoftGraphPrinterProcessingStateDetailSubunitPowerSaver                         MicrosoftGraphPrinterProcessingStateDetail = "subunitPowerSaver"
	MicrosoftGraphPrinterProcessingStateDetailSubunitRecoverableFailure                 MicrosoftGraphPrinterProcessingStateDetail = "subunitRecoverableFailure"
	MicrosoftGraphPrinterProcessingStateDetailSubunitRecoverableStorage                 MicrosoftGraphPrinterProcessingStateDetail = "subunitRecoverableStorage"
	MicrosoftGraphPrinterProcessingStateDetailSubunitRemoved                            MicrosoftGraphPrinterProcessingStateDetail = "subunitRemoved"
	MicrosoftGraphPrinterProcessingStateDetailSubunitResourceAdded                      MicrosoftGraphPrinterProcessingStateDetail = "subunitResourceAdded"
	MicrosoftGraphPrinterProcessingStateDetailSubunitResourceRemoved                    MicrosoftGraphPrinterProcessingStateDetail = "subunitResourceRemoved"
	MicrosoftGraphPrinterProcessingStateDetailSubunitThermistorFailure                  MicrosoftGraphPrinterProcessingStateDetail = "subunitThermistorFailure"
	MicrosoftGraphPrinterProcessingStateDetailSubunitTimingFailure                      MicrosoftGraphPrinterProcessingStateDetail = "subunitTimingFailure"
	MicrosoftGraphPrinterProcessingStateDetailSubunitTurnedOff                          MicrosoftGraphPrinterProcessingStateDetail = "subunitTurnedOff"
	MicrosoftGraphPrinterProcessingStateDetailSubunitTurnedOn                           MicrosoftGraphPrinterProcessingStateDetail = "subunitTurnedOn"
	MicrosoftGraphPrinterProcessingStateDetailSubunitUnderTemperature                   MicrosoftGraphPrinterProcessingStateDetail = "subunitUnderTemperature"
	MicrosoftGraphPrinterProcessingStateDetailSubunitUnrecoverableFailure               MicrosoftGraphPrinterProcessingStateDetail = "subunitUnrecoverableFailure"
	MicrosoftGraphPrinterProcessingStateDetailSubunitUnrecoverableStorage               MicrosoftGraphPrinterProcessingStateDetail = "subunitUnrecoverableStorage"
	MicrosoftGraphPrinterProcessingStateDetailSubunitWarmingUp                          MicrosoftGraphPrinterProcessingStateDetail = "subunitWarmingUp"
	MicrosoftGraphPrinterProcessingStateDetailSuspend                                   MicrosoftGraphPrinterProcessingStateDetail = "suspend"
	MicrosoftGraphPrinterProcessingStateDetailTesting                                   MicrosoftGraphPrinterProcessingStateDetail = "testing"
	MicrosoftGraphPrinterProcessingStateDetailTimedOut                                  MicrosoftGraphPrinterProcessingStateDetail = "timedOut"
	MicrosoftGraphPrinterProcessingStateDetailTonerEmpty                                MicrosoftGraphPrinterProcessingStateDetail = "tonerEmpty"
	MicrosoftGraphPrinterProcessingStateDetailTonerLow                                  MicrosoftGraphPrinterProcessingStateDetail = "tonerLow"
	MicrosoftGraphPrinterProcessingStateDetailTrimmerAdded                              MicrosoftGraphPrinterProcessingStateDetail = "trimmerAdded"
	MicrosoftGraphPrinterProcessingStateDetailTrimmerAlmostEmpty                        MicrosoftGraphPrinterProcessingStateDetail = "trimmerAlmostEmpty"
	MicrosoftGraphPrinterProcessingStateDetailTrimmerAlmostFull                         MicrosoftGraphPrinterProcessingStateDetail = "trimmerAlmostFull"
	MicrosoftGraphPrinterProcessingStateDetailTrimmerAtLimit                            MicrosoftGraphPrinterProcessingStateDetail = "trimmerAtLimit"
	MicrosoftGraphPrinterProcessingStateDetailTrimmerClosed                             MicrosoftGraphPrinterProcessingStateDetail = "trimmerClosed"
	MicrosoftGraphPrinterProcessingStateDetailTrimmerConfigurationChange                MicrosoftGraphPrinterProcessingStateDetail = "trimmerConfigurationChange"
	MicrosoftGraphPrinterProcessingStateDetailTrimmerCoverClosed                        MicrosoftGraphPrinterProcessingStateDetail = "trimmerCoverClosed"
	MicrosoftGraphPrinterProcessingStateDetailTrimmerCoverOpen                          MicrosoftGraphPrinterProcessingStateDetail = "trimmerCoverOpen"
	MicrosoftGraphPrinterProcessingStateDetailTrimmerEmpty                              MicrosoftGraphPrinterProcessingStateDetail = "trimmerEmpty"
	MicrosoftGraphPrinterProcessingStateDetailTrimmerFull                               MicrosoftGraphPrinterProcessingStateDetail = "trimmerFull"
	MicrosoftGraphPrinterProcessingStateDetailTrimmerInterlockClosed                    MicrosoftGraphPrinterProcessingStateDetail = "trimmerInterlockClosed"
	MicrosoftGraphPrinterProcessingStateDetailTrimmerInterlockOpen                      MicrosoftGraphPrinterProcessingStateDetail = "trimmerInterlockOpen"
	MicrosoftGraphPrinterProcessingStateDetailTrimmerJam                                MicrosoftGraphPrinterProcessingStateDetail = "trimmerJam"
	MicrosoftGraphPrinterProcessingStateDetailTrimmerLifeAlmostOver                     MicrosoftGraphPrinterProcessingStateDetail = "trimmerLifeAlmostOver"
	MicrosoftGraphPrinterProcessingStateDetailTrimmerLifeOver                           MicrosoftGraphPrinterProcessingStateDetail = "trimmerLifeOver"
	MicrosoftGraphPrinterProcessingStateDetailTrimmerMemoryExhausted                    MicrosoftGraphPrinterProcessingStateDetail = "trimmerMemoryExhausted"
	MicrosoftGraphPrinterProcessingStateDetailTrimmerMissing                            MicrosoftGraphPrinterProcessingStateDetail = "trimmerMissing"
	MicrosoftGraphPrinterProcessingStateDetailTrimmerMotorFailure                       MicrosoftGraphPrinterProcessingStateDetail = "trimmerMotorFailure"
	MicrosoftGraphPrinterProcessingStateDetailTrimmerNearLimit                          MicrosoftGraphPrinterProcessingStateDetail = "trimmerNearLimit"
	MicrosoftGraphPrinterProcessingStateDetailTrimmerOffline                            MicrosoftGraphPrinterProcessingStateDetail = "trimmerOffline"
	MicrosoftGraphPrinterProcessingStateDetailTrimmerOpened                             MicrosoftGraphPrinterProcessingStateDetail = "trimmerOpened"
	MicrosoftGraphPrinterProcessingStateDetailTrimmerOverTemperature                    MicrosoftGraphPrinterProcessingStateDetail = "trimmerOverTemperature"
	MicrosoftGraphPrinterProcessingStateDetailTrimmerPowerSaver                         MicrosoftGraphPrinterProcessingStateDetail = "trimmerPowerSaver"
	MicrosoftGraphPrinterProcessingStateDetailTrimmerRecoverableFailure                 MicrosoftGraphPrinterProcessingStateDetail = "trimmerRecoverableFailure"
	MicrosoftGraphPrinterProcessingStateDetailTrimmerRecoverableStorage                 MicrosoftGraphPrinterProcessingStateDetail = "trimmerRecoverableStorage"
	MicrosoftGraphPrinterProcessingStateDetailTrimmerRemoved                            MicrosoftGraphPrinterProcessingStateDetail = "trimmerRemoved"
	MicrosoftGraphPrinterProcessingStateDetailTrimmerResourceAdded                      MicrosoftGraphPrinterProcessingStateDetail = "trimmerResourceAdded"
	MicrosoftGraphPrinterProcessingStateDetailTrimmerResourceRemoved                    MicrosoftGraphPrinterProcessingStateDetail = "trimmerResourceRemoved"
	MicrosoftGraphPrinterProcessingStateDetailTrimmerThermistorFailure                  MicrosoftGraphPrinterProcessingStateDetail = "trimmerThermistorFailure"
	MicrosoftGraphPrinterProcessingStateDetailTrimmerTimingFailure                      MicrosoftGraphPrinterProcessingStateDetail = "trimmerTimingFailure"
	MicrosoftGraphPrinterProcessingStateDetailTrimmerTurnedOff                          MicrosoftGraphPrinterProcessingStateDetail = "trimmerTurnedOff"
	MicrosoftGraphPrinterProcessingStateDetailTrimmerTurnedOn                           MicrosoftGraphPrinterProcessingStateDetail = "trimmerTurnedOn"
	MicrosoftGraphPrinterProcessingStateDetailTrimmerUnderTemperature                   MicrosoftGraphPrinterProcessingStateDetail = "trimmerUnderTemperature"
	MicrosoftGraphPrinterProcessingStateDetailTrimmerUnrecoverableFailure               MicrosoftGraphPrinterProcessingStateDetail = "trimmerUnrecoverableFailure"
	MicrosoftGraphPrinterProcessingStateDetailTrimmerUnrecoverableStorageError          MicrosoftGraphPrinterProcessingStateDetail = "trimmerUnrecoverableStorageError"
	MicrosoftGraphPrinterProcessingStateDetailTrimmerWarmingUp                          MicrosoftGraphPrinterProcessingStateDetail = "trimmerWarmingUp"
	MicrosoftGraphPrinterProcessingStateDetailUnknown                                   MicrosoftGraphPrinterProcessingStateDetail = "unknown"
	MicrosoftGraphPrinterProcessingStateDetailUnknownFutureValue                        MicrosoftGraphPrinterProcessingStateDetail = "unknownFutureValue"
	MicrosoftGraphPrinterProcessingStateDetailWrapperAdded                              MicrosoftGraphPrinterProcessingStateDetail = "wrapperAdded"
	MicrosoftGraphPrinterProcessingStateDetailWrapperAlmostEmpty                        MicrosoftGraphPrinterProcessingStateDetail = "wrapperAlmostEmpty"
	MicrosoftGraphPrinterProcessingStateDetailWrapperAlmostFull                         MicrosoftGraphPrinterProcessingStateDetail = "wrapperAlmostFull"
	MicrosoftGraphPrinterProcessingStateDetailWrapperAtLimit                            MicrosoftGraphPrinterProcessingStateDetail = "wrapperAtLimit"
	MicrosoftGraphPrinterProcessingStateDetailWrapperClosed                             MicrosoftGraphPrinterProcessingStateDetail = "wrapperClosed"
	MicrosoftGraphPrinterProcessingStateDetailWrapperConfigurationChange                MicrosoftGraphPrinterProcessingStateDetail = "wrapperConfigurationChange"
	MicrosoftGraphPrinterProcessingStateDetailWrapperCoverClosed                        MicrosoftGraphPrinterProcessingStateDetail = "wrapperCoverClosed"
	MicrosoftGraphPrinterProcessingStateDetailWrapperCoverOpen                          MicrosoftGraphPrinterProcessingStateDetail = "wrapperCoverOpen"
	MicrosoftGraphPrinterProcessingStateDetailWrapperEmpty                              MicrosoftGraphPrinterProcessingStateDetail = "wrapperEmpty"
	MicrosoftGraphPrinterProcessingStateDetailWrapperFull                               MicrosoftGraphPrinterProcessingStateDetail = "wrapperFull"
	MicrosoftGraphPrinterProcessingStateDetailWrapperInterlockClosed                    MicrosoftGraphPrinterProcessingStateDetail = "wrapperInterlockClosed"
	MicrosoftGraphPrinterProcessingStateDetailWrapperInterlockOpen                      MicrosoftGraphPrinterProcessingStateDetail = "wrapperInterlockOpen"
	MicrosoftGraphPrinterProcessingStateDetailWrapperJam                                MicrosoftGraphPrinterProcessingStateDetail = "wrapperJam"
	MicrosoftGraphPrinterProcessingStateDetailWrapperLifeAlmostOver                     MicrosoftGraphPrinterProcessingStateDetail = "wrapperLifeAlmostOver"
	MicrosoftGraphPrinterProcessingStateDetailWrapperLifeOver                           MicrosoftGraphPrinterProcessingStateDetail = "wrapperLifeOver"
	MicrosoftGraphPrinterProcessingStateDetailWrapperMemoryExhausted                    MicrosoftGraphPrinterProcessingStateDetail = "wrapperMemoryExhausted"
	MicrosoftGraphPrinterProcessingStateDetailWrapperMissing                            MicrosoftGraphPrinterProcessingStateDetail = "wrapperMissing"
	MicrosoftGraphPrinterProcessingStateDetailWrapperMotorFailure                       MicrosoftGraphPrinterProcessingStateDetail = "wrapperMotorFailure"
	MicrosoftGraphPrinterProcessingStateDetailWrapperNearLimit                          MicrosoftGraphPrinterProcessingStateDetail = "wrapperNearLimit"
	MicrosoftGraphPrinterProcessingStateDetailWrapperOffline                            MicrosoftGraphPrinterProcessingStateDetail = "wrapperOffline"
	MicrosoftGraphPrinterProcessingStateDetailWrapperOpened                             MicrosoftGraphPrinterProcessingStateDetail = "wrapperOpened"
	MicrosoftGraphPrinterProcessingStateDetailWrapperOverTemperature                    MicrosoftGraphPrinterProcessingStateDetail = "wrapperOverTemperature"
	MicrosoftGraphPrinterProcessingStateDetailWrapperPowerSaver                         MicrosoftGraphPrinterProcessingStateDetail = "wrapperPowerSaver"
	MicrosoftGraphPrinterProcessingStateDetailWrapperRecoverableFailure                 MicrosoftGraphPrinterProcessingStateDetail = "wrapperRecoverableFailure"
	MicrosoftGraphPrinterProcessingStateDetailWrapperRecoverableStorage                 MicrosoftGraphPrinterProcessingStateDetail = "wrapperRecoverableStorage"
	MicrosoftGraphPrinterProcessingStateDetailWrapperRemoved                            MicrosoftGraphPrinterProcessingStateDetail = "wrapperRemoved"
	MicrosoftGraphPrinterProcessingStateDetailWrapperResourceAdded                      MicrosoftGraphPrinterProcessingStateDetail = "wrapperResourceAdded"
	MicrosoftGraphPrinterProcessingStateDetailWrapperResourceRemoved                    MicrosoftGraphPrinterProcessingStateDetail = "wrapperResourceRemoved"
	MicrosoftGraphPrinterProcessingStateDetailWrapperThermistorFailure                  MicrosoftGraphPrinterProcessingStateDetail = "wrapperThermistorFailure"
	MicrosoftGraphPrinterProcessingStateDetailWrapperTimingFailure                      MicrosoftGraphPrinterProcessingStateDetail = "wrapperTimingFailure"
	MicrosoftGraphPrinterProcessingStateDetailWrapperTurnedOff                          MicrosoftGraphPrinterProcessingStateDetail = "wrapperTurnedOff"
	MicrosoftGraphPrinterProcessingStateDetailWrapperTurnedOn                           MicrosoftGraphPrinterProcessingStateDetail = "wrapperTurnedOn"
	MicrosoftGraphPrinterProcessingStateDetailWrapperUnderTemperature                   MicrosoftGraphPrinterProcessingStateDetail = "wrapperUnderTemperature"
	MicrosoftGraphPrinterProcessingStateDetailWrapperUnrecoverableFailure               MicrosoftGraphPrinterProcessingStateDetail = "wrapperUnrecoverableFailure"
	MicrosoftGraphPrinterProcessingStateDetailWrapperUnrecoverableStorageError          MicrosoftGraphPrinterProcessingStateDetail = "wrapperUnrecoverableStorageError"
	MicrosoftGraphPrinterProcessingStateDetailWrapperWarmingUp                          MicrosoftGraphPrinterProcessingStateDetail = "wrapperWarmingUp"
)

// Defines values for MicrosoftGraphRecurrencePatternType.
const (
	AbsoluteMonthly MicrosoftGraphRecurrencePatternType = "absoluteMonthly"
	AbsoluteYearly  MicrosoftGraphRecurrencePatternType = "absoluteYearly"
	Daily           MicrosoftGraphRecurrencePatternType = "daily"
	RelativeMonthly MicrosoftGraphRecurrencePatternType = "relativeMonthly"
	RelativeYearly  MicrosoftGraphRecurrencePatternType = "relativeYearly"
	Weekly          MicrosoftGraphRecurrencePatternType = "weekly"
)

// Defines values for MicrosoftGraphRecurrenceRangeType.
const (
	EndDate  MicrosoftGraphRecurrenceRangeType = "endDate"
	NoEnd    MicrosoftGraphRecurrenceRangeType = "noEnd"
	Numbered MicrosoftGraphRecurrenceRangeType = "numbered"
)

// Defines values for MicrosoftGraphResponseType.
const (
	MicrosoftGraphResponseTypeAccepted            MicrosoftGraphResponseType = "accepted"
	MicrosoftGraphResponseTypeDeclined            MicrosoftGraphResponseType = "declined"
	MicrosoftGraphResponseTypeNone                MicrosoftGraphResponseType = "none"
	MicrosoftGraphResponseTypeNotResponded        MicrosoftGraphResponseType = "notResponded"
	MicrosoftGraphResponseTypeOrganizer           MicrosoftGraphResponseType = "organizer"
	MicrosoftGraphResponseTypeTentativelyAccepted MicrosoftGraphResponseType = "tentativelyAccepted"
)

// Defines values for MicrosoftGraphScheduleChangeRequestActor.
const (
	MicrosoftGraphScheduleChangeRequestActorManager            MicrosoftGraphScheduleChangeRequestActor = "manager"
	MicrosoftGraphScheduleChangeRequestActorRecipient          MicrosoftGraphScheduleChangeRequestActor = "recipient"
	MicrosoftGraphScheduleChangeRequestActorSender             MicrosoftGraphScheduleChangeRequestActor = "sender"
	MicrosoftGraphScheduleChangeRequestActorSystem             MicrosoftGraphScheduleChangeRequestActor = "system"
	MicrosoftGraphScheduleChangeRequestActorUnknownFutureValue MicrosoftGraphScheduleChangeRequestActor = "unknownFutureValue"
)

// Defines values for MicrosoftGraphScheduleChangeState.
const (
	MicrosoftGraphScheduleChangeStateApproved           MicrosoftGraphScheduleChangeState = "approved"
	MicrosoftGraphScheduleChangeStateDeclined           MicrosoftGraphScheduleChangeState = "declined"
	MicrosoftGraphScheduleChangeStatePending            MicrosoftGraphScheduleChangeState = "pending"
	MicrosoftGraphScheduleChangeStateUnknownFutureValue MicrosoftGraphScheduleChangeState = "unknownFutureValue"
)

// Defines values for MicrosoftGraphScheduleEntityTheme.
const (
	MicrosoftGraphScheduleEntityThemeBlue               MicrosoftGraphScheduleEntityTheme = "blue"
	MicrosoftGraphScheduleEntityThemeDarkBlue           MicrosoftGraphScheduleEntityTheme = "darkBlue"
	MicrosoftGraphScheduleEntityThemeDarkGreen          MicrosoftGraphScheduleEntityTheme = "darkGreen"
	MicrosoftGraphScheduleEntityThemeDarkPink           MicrosoftGraphScheduleEntityTheme = "darkPink"
	MicrosoftGraphScheduleEntityThemeDarkPurple         MicrosoftGraphScheduleEntityTheme = "darkPurple"
	MicrosoftGraphScheduleEntityThemeDarkYellow         MicrosoftGraphScheduleEntityTheme = "darkYellow"
	MicrosoftGraphScheduleEntityThemeGray               MicrosoftGraphScheduleEntityTheme = "gray"
	MicrosoftGraphScheduleEntityThemeGreen              MicrosoftGraphScheduleEntityTheme = "green"
	MicrosoftGraphScheduleEntityThemePink               MicrosoftGraphScheduleEntityTheme = "pink"
	MicrosoftGraphScheduleEntityThemePurple             MicrosoftGraphScheduleEntityTheme = "purple"
	MicrosoftGraphScheduleEntityThemeUnknownFutureValue MicrosoftGraphScheduleEntityTheme = "unknownFutureValue"
	MicrosoftGraphScheduleEntityThemeWhite              MicrosoftGraphScheduleEntityTheme = "white"
	MicrosoftGraphScheduleEntityThemeYellow             MicrosoftGraphScheduleEntityTheme = "yellow"
)

// Defines values for MicrosoftGraphSelectionLikelihoodInfo.
const (
	MicrosoftGraphSelectionLikelihoodInfoHigh         MicrosoftGraphSelectionLikelihoodInfo = "high"
	MicrosoftGraphSelectionLikelihoodInfoNotSpecified MicrosoftGraphSelectionLikelihoodInfo = "notSpecified"
)

// Defines values for MicrosoftGraphSensitivity.
const (
	MicrosoftGraphSensitivityConfidential MicrosoftGraphSensitivity = "confidential"
	MicrosoftGraphSensitivityNormal       MicrosoftGraphSensitivity = "normal"
	MicrosoftGraphSensitivityPersonal     MicrosoftGraphSensitivity = "personal"
	MicrosoftGraphSensitivityPrivate      MicrosoftGraphSensitivity = "private"
)

// Defines values for MicrosoftGraphSettingSourceType.
const (
	DeviceConfiguration MicrosoftGraphSettingSourceType = "deviceConfiguration"
	DeviceIntent        MicrosoftGraphSettingSourceType = "deviceIntent"
)

// Defines values for MicrosoftGraphStatus.
const (
	MicrosoftGraphStatusActive             MicrosoftGraphStatus = "active"
	MicrosoftGraphStatusDeleted            MicrosoftGraphStatus = "deleted"
	MicrosoftGraphStatusIgnored            MicrosoftGraphStatus = "ignored"
	MicrosoftGraphStatusUnknownFutureValue MicrosoftGraphStatus = "unknownFutureValue"
	MicrosoftGraphStatusUpdated            MicrosoftGraphStatus = "updated"
)

// Defines values for MicrosoftGraphTaskStatus.
const (
	MicrosoftGraphTaskStatusCompleted       MicrosoftGraphTaskStatus = "completed"
	MicrosoftGraphTaskStatusDeferred        MicrosoftGraphTaskStatus = "deferred"
	MicrosoftGraphTaskStatusInProgress      MicrosoftGraphTaskStatus = "inProgress"
	MicrosoftGraphTaskStatusNotStarted      MicrosoftGraphTaskStatus = "notStarted"
	MicrosoftGraphTaskStatusWaitingOnOthers MicrosoftGraphTaskStatus = "waitingOnOthers"
)

// Defines values for MicrosoftGraphTeamSpecialization.
const (
	MicrosoftGraphTeamSpecializationEducationClass                         MicrosoftGraphTeamSpecialization = "educationClass"
	MicrosoftGraphTeamSpecializationEducationProfessionalLearningCommunity MicrosoftGraphTeamSpecialization = "educationProfessionalLearningCommunity"
	MicrosoftGraphTeamSpecializationEducationStaff                         MicrosoftGraphTeamSpecialization = "educationStaff"
	MicrosoftGraphTeamSpecializationEducationStandard                      MicrosoftGraphTeamSpecialization = "educationStandard"
	MicrosoftGraphTeamSpecializationHealthcareCareCoordination             MicrosoftGraphTeamSpecialization = "healthcareCareCoordination"
	MicrosoftGraphTeamSpecializationHealthcareStandard                     MicrosoftGraphTeamSpecialization = "healthcareStandard"
	MicrosoftGraphTeamSpecializationNone                                   MicrosoftGraphTeamSpecialization = "none"
	MicrosoftGraphTeamSpecializationUnknownFutureValue                     MicrosoftGraphTeamSpecialization = "unknownFutureValue"
)

// Defines values for MicrosoftGraphTeamVisibilityType.
const (
	MicrosoftGraphTeamVisibilityTypeHiddenMembership   MicrosoftGraphTeamVisibilityType = "hiddenMembership"
	MicrosoftGraphTeamVisibilityTypePrivate            MicrosoftGraphTeamVisibilityType = "private"
	MicrosoftGraphTeamVisibilityTypePublic             MicrosoftGraphTeamVisibilityType = "public"
	MicrosoftGraphTeamVisibilityTypeUnknownFutureValue MicrosoftGraphTeamVisibilityType = "unknownFutureValue"
)

// Defines values for MicrosoftGraphTeamsAppDistributionMethod.
const (
	MicrosoftGraphTeamsAppDistributionMethodOrganization       MicrosoftGraphTeamsAppDistributionMethod = "organization"
	MicrosoftGraphTeamsAppDistributionMethodSideloaded         MicrosoftGraphTeamsAppDistributionMethod = "sideloaded"
	MicrosoftGraphTeamsAppDistributionMethodStore              MicrosoftGraphTeamsAppDistributionMethod = "store"
	MicrosoftGraphTeamsAppDistributionMethodUnknownFutureValue MicrosoftGraphTeamsAppDistributionMethod = "unknownFutureValue"
)

// Defines values for MicrosoftGraphTeamsAppPublishingState.
const (
	MicrosoftGraphTeamsAppPublishingStatePublished          MicrosoftGraphTeamsAppPublishingState = "published"
	MicrosoftGraphTeamsAppPublishingStateRejected           MicrosoftGraphTeamsAppPublishingState = "rejected"
	MicrosoftGraphTeamsAppPublishingStateSubmitted          MicrosoftGraphTeamsAppPublishingState = "submitted"
	MicrosoftGraphTeamsAppPublishingStateUnknownFutureValue MicrosoftGraphTeamsAppPublishingState = "unknownFutureValue"
)

// Defines values for MicrosoftGraphTeamsAppResourceSpecificPermissionType.
const (
	MicrosoftGraphTeamsAppResourceSpecificPermissionTypeApplication        MicrosoftGraphTeamsAppResourceSpecificPermissionType = "application"
	MicrosoftGraphTeamsAppResourceSpecificPermissionTypeDelegated          MicrosoftGraphTeamsAppResourceSpecificPermissionType = "delegated"
	MicrosoftGraphTeamsAppResourceSpecificPermissionTypeUnknownFutureValue MicrosoftGraphTeamsAppResourceSpecificPermissionType = "unknownFutureValue"
)

// Defines values for MicrosoftGraphTeamsAsyncOperationStatus.
const (
	MicrosoftGraphTeamsAsyncOperationStatusFailed             MicrosoftGraphTeamsAsyncOperationStatus = "failed"
	MicrosoftGraphTeamsAsyncOperationStatusInProgress         MicrosoftGraphTeamsAsyncOperationStatus = "inProgress"
	MicrosoftGraphTeamsAsyncOperationStatusInvalid            MicrosoftGraphTeamsAsyncOperationStatus = "invalid"
	MicrosoftGraphTeamsAsyncOperationStatusNotStarted         MicrosoftGraphTeamsAsyncOperationStatus = "notStarted"
	MicrosoftGraphTeamsAsyncOperationStatusSucceeded          MicrosoftGraphTeamsAsyncOperationStatus = "succeeded"
	MicrosoftGraphTeamsAsyncOperationStatusUnknownFutureValue MicrosoftGraphTeamsAsyncOperationStatus = "unknownFutureValue"
)

// Defines values for MicrosoftGraphTeamsAsyncOperationType.
const (
	MicrosoftGraphTeamsAsyncOperationTypeArchiveTeam        MicrosoftGraphTeamsAsyncOperationType = "archiveTeam"
	MicrosoftGraphTeamsAsyncOperationTypeCloneTeam          MicrosoftGraphTeamsAsyncOperationType = "cloneTeam"
	MicrosoftGraphTeamsAsyncOperationTypeCreateChannel      MicrosoftGraphTeamsAsyncOperationType = "createChannel"
	MicrosoftGraphTeamsAsyncOperationTypeCreateTeam         MicrosoftGraphTeamsAsyncOperationType = "createTeam"
	MicrosoftGraphTeamsAsyncOperationTypeInvalid            MicrosoftGraphTeamsAsyncOperationType = "invalid"
	MicrosoftGraphTeamsAsyncOperationTypeTeamifyGroup       MicrosoftGraphTeamsAsyncOperationType = "teamifyGroup"
	MicrosoftGraphTeamsAsyncOperationTypeUnarchiveTeam      MicrosoftGraphTeamsAsyncOperationType = "unarchiveTeam"
	MicrosoftGraphTeamsAsyncOperationTypeUnknownFutureValue MicrosoftGraphTeamsAsyncOperationType = "unknownFutureValue"
)

// Defines values for MicrosoftGraphTeamworkConversationIdentityType.
const (
	MicrosoftGraphTeamworkConversationIdentityTypeChannel            MicrosoftGraphTeamworkConversationIdentityType = "channel"
	MicrosoftGraphTeamworkConversationIdentityTypeChat               MicrosoftGraphTeamworkConversationIdentityType = "chat"
	MicrosoftGraphTeamworkConversationIdentityTypeTeam               MicrosoftGraphTeamworkConversationIdentityType = "team"
	MicrosoftGraphTeamworkConversationIdentityTypeUnknownFutureValue MicrosoftGraphTeamworkConversationIdentityType = "unknownFutureValue"
)

// Defines values for MicrosoftGraphTeamworkTagType.
const (
	MicrosoftGraphTeamworkTagTypeStandard           MicrosoftGraphTeamworkTagType = "standard"
	MicrosoftGraphTeamworkTagTypeUnknownFutureValue MicrosoftGraphTeamworkTagType = "unknownFutureValue"
)

// Defines values for MicrosoftGraphTeamworkUserIdentityType.
const (
	MicrosoftGraphTeamworkUserIdentityTypeAadUser                      MicrosoftGraphTeamworkUserIdentityType = "aadUser"
	MicrosoftGraphTeamworkUserIdentityTypeAnonymousGuest               MicrosoftGraphTeamworkUserIdentityType = "anonymousGuest"
	MicrosoftGraphTeamworkUserIdentityTypeEmailUser                    MicrosoftGraphTeamworkUserIdentityType = "emailUser"
	MicrosoftGraphTeamworkUserIdentityTypeFederatedUser                MicrosoftGraphTeamworkUserIdentityType = "federatedUser"
	MicrosoftGraphTeamworkUserIdentityTypeOnPremiseAadUser             MicrosoftGraphTeamworkUserIdentityType = "onPremiseAadUser"
	MicrosoftGraphTeamworkUserIdentityTypePersonalMicrosoftAccountUser MicrosoftGraphTeamworkUserIdentityType = "personalMicrosoftAccountUser"
	MicrosoftGraphTeamworkUserIdentityTypePhoneUser                    MicrosoftGraphTeamworkUserIdentityType = "phoneUser"
	MicrosoftGraphTeamworkUserIdentityTypeSkypeUser                    MicrosoftGraphTeamworkUserIdentityType = "skypeUser"
	MicrosoftGraphTeamworkUserIdentityTypeUnknownFutureValue           MicrosoftGraphTeamworkUserIdentityType = "unknownFutureValue"
)

// Defines values for MicrosoftGraphTermStoreRelationType.
const (
	MicrosoftGraphTermStoreRelationTypePin                MicrosoftGraphTermStoreRelationType = "pin"
	MicrosoftGraphTermStoreRelationTypeReuse              MicrosoftGraphTermStoreRelationType = "reuse"
	MicrosoftGraphTermStoreRelationTypeUnknownFutureValue MicrosoftGraphTermStoreRelationType = "unknownFutureValue"
)

// Defines values for MicrosoftGraphTermStoreTermGroupScope.
const (
	MicrosoftGraphTermStoreTermGroupScopeGlobal             MicrosoftGraphTermStoreTermGroupScope = "global"
	MicrosoftGraphTermStoreTermGroupScopeSiteCollection     MicrosoftGraphTermStoreTermGroupScope = "siteCollection"
	MicrosoftGraphTermStoreTermGroupScopeSystem             MicrosoftGraphTermStoreTermGroupScope = "system"
	MicrosoftGraphTermStoreTermGroupScopeUnknownFutureValue MicrosoftGraphTermStoreTermGroupScope = "unknownFutureValue"
)

// Defines values for MicrosoftGraphTimeOffReasonIconType.
const (
	MicrosoftGraphTimeOffReasonIconTypeCake               MicrosoftGraphTimeOffReasonIconType = "cake"
	MicrosoftGraphTimeOffReasonIconTypeCalendar           MicrosoftGraphTimeOffReasonIconType = "calendar"
	MicrosoftGraphTimeOffReasonIconTypeCar                MicrosoftGraphTimeOffReasonIconType = "car"
	MicrosoftGraphTimeOffReasonIconTypeClock              MicrosoftGraphTimeOffReasonIconType = "clock"
	MicrosoftGraphTimeOffReasonIconTypeCup                MicrosoftGraphTimeOffReasonIconType = "cup"
	MicrosoftGraphTimeOffReasonIconTypeDoctor             MicrosoftGraphTimeOffReasonIconType = "doctor"
	MicrosoftGraphTimeOffReasonIconTypeDog                MicrosoftGraphTimeOffReasonIconType = "dog"
	MicrosoftGraphTimeOffReasonIconTypeFirstAid           MicrosoftGraphTimeOffReasonIconType = "firstAid"
	MicrosoftGraphTimeOffReasonIconTypeGlobe              MicrosoftGraphTimeOffReasonIconType = "globe"
	MicrosoftGraphTimeOffReasonIconTypeJuryDuty           MicrosoftGraphTimeOffReasonIconType = "juryDuty"
	MicrosoftGraphTimeOffReasonIconTypeNone               MicrosoftGraphTimeOffReasonIconType = "none"
	MicrosoftGraphTimeOffReasonIconTypeNotWorking         MicrosoftGraphTimeOffReasonIconType = "notWorking"
	MicrosoftGraphTimeOffReasonIconTypePhone              MicrosoftGraphTimeOffReasonIconType = "phone"
	MicrosoftGraphTimeOffReasonIconTypePiggyBank          MicrosoftGraphTimeOffReasonIconType = "piggyBank"
	MicrosoftGraphTimeOffReasonIconTypePin                MicrosoftGraphTimeOffReasonIconType = "pin"
	MicrosoftGraphTimeOffReasonIconTypePlane              MicrosoftGraphTimeOffReasonIconType = "plane"
	MicrosoftGraphTimeOffReasonIconTypeRunning            MicrosoftGraphTimeOffReasonIconType = "running"
	MicrosoftGraphTimeOffReasonIconTypeSunny              MicrosoftGraphTimeOffReasonIconType = "sunny"
	MicrosoftGraphTimeOffReasonIconTypeTrafficCone        MicrosoftGraphTimeOffReasonIconType = "trafficCone"
	MicrosoftGraphTimeOffReasonIconTypeUmbrella           MicrosoftGraphTimeOffReasonIconType = "umbrella"
	MicrosoftGraphTimeOffReasonIconTypeUnknownFutureValue MicrosoftGraphTimeOffReasonIconType = "unknownFutureValue"
	MicrosoftGraphTimeOffReasonIconTypeWeather            MicrosoftGraphTimeOffReasonIconType = "weather"
)

// Defines values for MicrosoftGraphUserPurpose.
const (
	MicrosoftGraphUserPurposeEquipment          MicrosoftGraphUserPurpose = "equipment"
	MicrosoftGraphUserPurposeLinked             MicrosoftGraphUserPurpose = "linked"
	MicrosoftGraphUserPurposeOthers             MicrosoftGraphUserPurpose = "others"
	MicrosoftGraphUserPurposeRoom               MicrosoftGraphUserPurpose = "room"
	MicrosoftGraphUserPurposeShared             MicrosoftGraphUserPurpose = "shared"
	MicrosoftGraphUserPurposeUnknownFutureValue MicrosoftGraphUserPurpose = "unknownFutureValue"
	MicrosoftGraphUserPurposeUser               MicrosoftGraphUserPurpose = "user"
)

// Defines values for MicrosoftGraphWebsiteType.
const (
	Blog    MicrosoftGraphWebsiteType = "blog"
	Home    MicrosoftGraphWebsiteType = "home"
	Other   MicrosoftGraphWebsiteType = "other"
	Profile MicrosoftGraphWebsiteType = "profile"
	Work    MicrosoftGraphWebsiteType = "work"
)

// Defines values for MicrosoftGraphWeekIndex.
const (
	First  MicrosoftGraphWeekIndex = "first"
	Fourth MicrosoftGraphWeekIndex = "fourth"
	Last   MicrosoftGraphWeekIndex = "last"
	Second MicrosoftGraphWeekIndex = "second"
	Third  MicrosoftGraphWeekIndex = "third"
)

// Defines values for MicrosoftGraphWellknownListName.
const (
	MicrosoftGraphWellknownListNameDefaultList        MicrosoftGraphWellknownListName = "defaultList"
	MicrosoftGraphWellknownListNameFlaggedEmails      MicrosoftGraphWellknownListName = "flaggedEmails"
	MicrosoftGraphWellknownListNameNone               MicrosoftGraphWellknownListName = "none"
	MicrosoftGraphWellknownListNameUnknownFutureValue MicrosoftGraphWellknownListName = "unknownFutureValue"
)

// Defines values for MicrosoftGraphWindowsDefenderProductStatus.
const (
	AsSignaturesOutOfDate                           MicrosoftGraphWindowsDefenderProductStatus = "asSignaturesOutOfDate"
	AvSignaturesOutOfDate                           MicrosoftGraphWindowsDefenderProductStatus = "avSignaturesOutOfDate"
	NoFullScanHappenedForSpecifiedPeriod            MicrosoftGraphWindowsDefenderProductStatus = "noFullScanHappenedForSpecifiedPeriod"
	NoQuickScanHappenedForSpecifiedPeriod           MicrosoftGraphWindowsDefenderProductStatus = "noQuickScanHappenedForSpecifiedPeriod"
	NoStatus                                        MicrosoftGraphWindowsDefenderProductStatus = "noStatus"
	NoStatusFlagsSet                                MicrosoftGraphWindowsDefenderProductStatus = "noStatusFlagsSet"
	OfflineScanRequired                             MicrosoftGraphWindowsDefenderProductStatus = "offlineScanRequired"
	PendingFullScanDueToThreatAction                MicrosoftGraphWindowsDefenderProductStatus = "pendingFullScanDueToThreatAction"
	PendingManualStepsDueToThreatAction             MicrosoftGraphWindowsDefenderProductStatus = "pendingManualStepsDueToThreatAction"
	PendingRebootDueToThreatAction                  MicrosoftGraphWindowsDefenderProductStatus = "pendingRebootDueToThreatAction"
	PlatformAboutToBeOutdated                       MicrosoftGraphWindowsDefenderProductStatus = "platformAboutToBeOutdated"
	PlatformOutOfDate                               MicrosoftGraphWindowsDefenderProductStatus = "platformOutOfDate"
	PlatformUpdateInProgress                        MicrosoftGraphWindowsDefenderProductStatus = "platformUpdateInProgress"
	ProductExpired                                  MicrosoftGraphWindowsDefenderProductStatus = "productExpired"
	ProductRunningInEvaluationMode                  MicrosoftGraphWindowsDefenderProductStatus = "productRunningInEvaluationMode"
	ProductRunningInNonGenuineMode                  MicrosoftGraphWindowsDefenderProductStatus = "productRunningInNonGenuineMode"
	SamplesPendingSubmission                        MicrosoftGraphWindowsDefenderProductStatus = "samplesPendingSubmission"
	ServiceNotRunning                               MicrosoftGraphWindowsDefenderProductStatus = "serviceNotRunning"
	ServiceShutdownAsPartOfSystemShutdown           MicrosoftGraphWindowsDefenderProductStatus = "serviceShutdownAsPartOfSystemShutdown"
	ServiceStartedWithoutMalwareProtection          MicrosoftGraphWindowsDefenderProductStatus = "serviceStartedWithoutMalwareProtection"
	SignatureOrPlatformEndOfLifeIsPastOrIsImpending MicrosoftGraphWindowsDefenderProductStatus = "signatureOrPlatformEndOfLifeIsPastOrIsImpending"
	SystemInitiatedCleanInProgress                  MicrosoftGraphWindowsDefenderProductStatus = "systemInitiatedCleanInProgress"
	SystemInitiatedScanInProgress                   MicrosoftGraphWindowsDefenderProductStatus = "systemInitiatedScanInProgress"
	ThreatRemediationFailedCritically               MicrosoftGraphWindowsDefenderProductStatus = "threatRemediationFailedCritically"
	ThreatRemediationFailedNonCritically            MicrosoftGraphWindowsDefenderProductStatus = "threatRemediationFailedNonCritically"
	WindowsSModeSignaturesInUseOnNonWin10SInstall   MicrosoftGraphWindowsDefenderProductStatus = "windowsSModeSignaturesInUseOnNonWin10SInstall"
)

// Defines values for MicrosoftGraphWindowsDeviceHealthState.
const (
	Clean              MicrosoftGraphWindowsDeviceHealthState = "clean"
	Critical           MicrosoftGraphWindowsDeviceHealthState = "critical"
	FullScanPending    MicrosoftGraphWindowsDeviceHealthState = "fullScanPending"
	ManualStepsPending MicrosoftGraphWindowsDeviceHealthState = "manualStepsPending"
	OfflineScanPending MicrosoftGraphWindowsDeviceHealthState = "offlineScanPending"
	RebootPending      MicrosoftGraphWindowsDeviceHealthState = "rebootPending"
)

// Defines values for MicrosoftGraphWindowsMalwareCategory.
const (
	MicrosoftGraphWindowsMalwareCategoryAdware                     MicrosoftGraphWindowsMalwareCategory = "adware"
	MicrosoftGraphWindowsMalwareCategoryAolExploit                 MicrosoftGraphWindowsMalwareCategory = "aolExploit"
	MicrosoftGraphWindowsMalwareCategoryBackdoor                   MicrosoftGraphWindowsMalwareCategory = "backdoor"
	MicrosoftGraphWindowsMalwareCategoryBehavior                   MicrosoftGraphWindowsMalwareCategory = "behavior"
	MicrosoftGraphWindowsMalwareCategoryBrowserModifier            MicrosoftGraphWindowsMalwareCategory = "browserModifier"
	MicrosoftGraphWindowsMalwareCategoryBrowserPlugin              MicrosoftGraphWindowsMalwareCategory = "browserPlugin"
	MicrosoftGraphWindowsMalwareCategoryCookie                     MicrosoftGraphWindowsMalwareCategory = "cookie"
	MicrosoftGraphWindowsMalwareCategoryDialer                     MicrosoftGraphWindowsMalwareCategory = "dialer"
	MicrosoftGraphWindowsMalwareCategoryEmailFlooder               MicrosoftGraphWindowsMalwareCategory = "emailFlooder"
	MicrosoftGraphWindowsMalwareCategoryEnterpriseUnwantedSoftware MicrosoftGraphWindowsMalwareCategory = "enterpriseUnwantedSoftware"
	MicrosoftGraphWindowsMalwareCategoryExploit                    MicrosoftGraphWindowsMalwareCategory = "exploit"
	MicrosoftGraphWindowsMalwareCategoryFilesharingProgram         MicrosoftGraphWindowsMalwareCategory = "filesharingProgram"
	MicrosoftGraphWindowsMalwareCategoryHipsRule                   MicrosoftGraphWindowsMalwareCategory = "hipsRule"
	MicrosoftGraphWindowsMalwareCategoryHostileActiveXControl      MicrosoftGraphWindowsMalwareCategory = "hostileActiveXControl"
	MicrosoftGraphWindowsMalwareCategoryIcqExploit                 MicrosoftGraphWindowsMalwareCategory = "icqExploit"
	MicrosoftGraphWindowsMalwareCategoryInvalid                    MicrosoftGraphWindowsMalwareCategory = "invalid"
	MicrosoftGraphWindowsMalwareCategoryJokeProgram                MicrosoftGraphWindowsMalwareCategory = "jokeProgram"
	MicrosoftGraphWindowsMalwareCategoryKeylogger                  MicrosoftGraphWindowsMalwareCategory = "keylogger"
	MicrosoftGraphWindowsMalwareCategoryKnown                      MicrosoftGraphWindowsMalwareCategory = "known"
	MicrosoftGraphWindowsMalwareCategoryMalwareCreationTool        MicrosoftGraphWindowsMalwareCategory = "malwareCreationTool"
	MicrosoftGraphWindowsMalwareCategoryMonitoringSoftware         MicrosoftGraphWindowsMalwareCategory = "monitoringSoftware"
	MicrosoftGraphWindowsMalwareCategoryNuker                      MicrosoftGraphWindowsMalwareCategory = "nuker"
	MicrosoftGraphWindowsMalwareCategoryPasswordStealer            MicrosoftGraphWindowsMalwareCategory = "passwordStealer"
	MicrosoftGraphWindowsMalwareCategoryPolicy                     MicrosoftGraphWindowsMalwareCategory = "policy"
	MicrosoftGraphWindowsMalwareCategoryPotentialUnwantedSoftware  MicrosoftGraphWindowsMalwareCategory = "potentialUnwantedSoftware"
	MicrosoftGraphWindowsMalwareCategoryRansom                     MicrosoftGraphWindowsMalwareCategory = "ransom"
	MicrosoftGraphWindowsMalwareCategoryRemoteAccessTrojan         MicrosoftGraphWindowsMalwareCategory = "remoteAccessTrojan"
	MicrosoftGraphWindowsMalwareCategoryRemoteControlSoftware      MicrosoftGraphWindowsMalwareCategory = "remoteControlSoftware"
	MicrosoftGraphWindowsMalwareCategoryRemoteControlSoftware1     MicrosoftGraphWindowsMalwareCategory = "remote_Control_Software"
	MicrosoftGraphWindowsMalwareCategorySecurityDisabler           MicrosoftGraphWindowsMalwareCategory = "securityDisabler"
	MicrosoftGraphWindowsMalwareCategorySettingsModifier           MicrosoftGraphWindowsMalwareCategory = "settingsModifier"
	MicrosoftGraphWindowsMalwareCategorySoftwareBundler            MicrosoftGraphWindowsMalwareCategory = "softwareBundler"
	MicrosoftGraphWindowsMalwareCategorySpp                        MicrosoftGraphWindowsMalwareCategory = "spp"
	MicrosoftGraphWindowsMalwareCategorySpyware                    MicrosoftGraphWindowsMalwareCategory = "spyware"
	MicrosoftGraphWindowsMalwareCategoryStealthNotifier            MicrosoftGraphWindowsMalwareCategory = "stealthNotifier"
	MicrosoftGraphWindowsMalwareCategoryTool                       MicrosoftGraphWindowsMalwareCategory = "tool"
	MicrosoftGraphWindowsMalwareCategoryToolBar                    MicrosoftGraphWindowsMalwareCategory = "toolBar"
	MicrosoftGraphWindowsMalwareCategoryTrojan                     MicrosoftGraphWindowsMalwareCategory = "trojan"
	MicrosoftGraphWindowsMalwareCategoryTrojanDenialOfService      MicrosoftGraphWindowsMalwareCategory = "trojanDenialOfService"
	MicrosoftGraphWindowsMalwareCategoryTrojanDownloader           MicrosoftGraphWindowsMalwareCategory = "trojanDownloader"
	MicrosoftGraphWindowsMalwareCategoryTrojanDropper              MicrosoftGraphWindowsMalwareCategory = "trojanDropper"
	MicrosoftGraphWindowsMalwareCategoryTrojanFtp                  MicrosoftGraphWindowsMalwareCategory = "trojanFtp"
	MicrosoftGraphWindowsMalwareCategoryTrojanMassMailer           MicrosoftGraphWindowsMalwareCategory = "trojanMassMailer"
	MicrosoftGraphWindowsMalwareCategoryTrojanMonitoringSoftware   MicrosoftGraphWindowsMalwareCategory = "trojanMonitoringSoftware"
	MicrosoftGraphWindowsMalwareCategoryTrojanProxyServer          MicrosoftGraphWindowsMalwareCategory = "trojanProxyServer"
	MicrosoftGraphWindowsMalwareCategoryTrojanTelnet               MicrosoftGraphWindowsMalwareCategory = "trojanTelnet"
	MicrosoftGraphWindowsMalwareCategoryUnknown                    MicrosoftGraphWindowsMalwareCategory = "unknown"
	MicrosoftGraphWindowsMalwareCategoryVirus                      MicrosoftGraphWindowsMalwareCategory = "virus"
	MicrosoftGraphWindowsMalwareCategoryVulnerability              MicrosoftGraphWindowsMalwareCategory = "vulnerability"
	MicrosoftGraphWindowsMalwareCategoryWorm                       MicrosoftGraphWindowsMalwareCategory = "worm"
)

// Defines values for MicrosoftGraphWindowsMalwareExecutionState.
const (
	MicrosoftGraphWindowsMalwareExecutionStateAllowed    MicrosoftGraphWindowsMalwareExecutionState = "allowed"
	MicrosoftGraphWindowsMalwareExecutionStateBlocked    MicrosoftGraphWindowsMalwareExecutionState = "blocked"
	MicrosoftGraphWindowsMalwareExecutionStateNotRunning MicrosoftGraphWindowsMalwareExecutionState = "notRunning"
	MicrosoftGraphWindowsMalwareExecutionStateRunning    MicrosoftGraphWindowsMalwareExecutionState = "running"
	MicrosoftGraphWindowsMalwareExecutionStateUnknown    MicrosoftGraphWindowsMalwareExecutionState = "unknown"
)

// Defines values for MicrosoftGraphWindowsMalwareSeverity.
const (
	MicrosoftGraphWindowsMalwareSeverityHigh     MicrosoftGraphWindowsMalwareSeverity = "high"
	MicrosoftGraphWindowsMalwareSeverityLow      MicrosoftGraphWindowsMalwareSeverity = "low"
	MicrosoftGraphWindowsMalwareSeverityModerate MicrosoftGraphWindowsMalwareSeverity = "moderate"
	MicrosoftGraphWindowsMalwareSeveritySevere   MicrosoftGraphWindowsMalwareSeverity = "severe"
	MicrosoftGraphWindowsMalwareSeverityUnknown  MicrosoftGraphWindowsMalwareSeverity = "unknown"
)

// Defines values for MicrosoftGraphWindowsMalwareState.
const (
	MicrosoftGraphWindowsMalwareStateAbandoned        MicrosoftGraphWindowsMalwareState = "abandoned"
	MicrosoftGraphWindowsMalwareStateAllowFailed      MicrosoftGraphWindowsMalwareState = "allowFailed"
	MicrosoftGraphWindowsMalwareStateAllowed          MicrosoftGraphWindowsMalwareState = "allowed"
	MicrosoftGraphWindowsMalwareStateBlockFailed      MicrosoftGraphWindowsMalwareState = "blockFailed"
	MicrosoftGraphWindowsMalwareStateBlocked          MicrosoftGraphWindowsMalwareState = "blocked"
	MicrosoftGraphWindowsMalwareStateCleanFailed      MicrosoftGraphWindowsMalwareState = "cleanFailed"
	MicrosoftGraphWindowsMalwareStateCleaned          MicrosoftGraphWindowsMalwareState = "cleaned"
	MicrosoftGraphWindowsMalwareStateDetected         MicrosoftGraphWindowsMalwareState = "detected"
	MicrosoftGraphWindowsMalwareStateQuarantineFailed MicrosoftGraphWindowsMalwareState = "quarantineFailed"
	MicrosoftGraphWindowsMalwareStateQuarantined      MicrosoftGraphWindowsMalwareState = "quarantined"
	MicrosoftGraphWindowsMalwareStateRemoveFailed     MicrosoftGraphWindowsMalwareState = "removeFailed"
	MicrosoftGraphWindowsMalwareStateRemoved          MicrosoftGraphWindowsMalwareState = "removed"
	MicrosoftGraphWindowsMalwareStateUnknown          MicrosoftGraphWindowsMalwareState = "unknown"
)

// Defines values for MicrosoftGraphWindowsMalwareThreatState.
const (
	MicrosoftGraphWindowsMalwareThreatStateActionFailed                      MicrosoftGraphWindowsMalwareThreatState = "actionFailed"
	MicrosoftGraphWindowsMalwareThreatStateActive                            MicrosoftGraphWindowsMalwareThreatState = "active"
	MicrosoftGraphWindowsMalwareThreatStateAllowed                           MicrosoftGraphWindowsMalwareThreatState = "allowed"
	MicrosoftGraphWindowsMalwareThreatStateCleaned                           MicrosoftGraphWindowsMalwareThreatState = "cleaned"
	MicrosoftGraphWindowsMalwareThreatStateFullScanRequired                  MicrosoftGraphWindowsMalwareThreatState = "fullScanRequired"
	MicrosoftGraphWindowsMalwareThreatStateManualStepsRequired               MicrosoftGraphWindowsMalwareThreatState = "manualStepsRequired"
	MicrosoftGraphWindowsMalwareThreatStateNoStatusCleared                   MicrosoftGraphWindowsMalwareThreatState = "noStatusCleared"
	MicrosoftGraphWindowsMalwareThreatStateQuarantined                       MicrosoftGraphWindowsMalwareThreatState = "quarantined"
	MicrosoftGraphWindowsMalwareThreatStateRebootRequired                    MicrosoftGraphWindowsMalwareThreatState = "rebootRequired"
	MicrosoftGraphWindowsMalwareThreatStateRemediatedWithNonCriticalFailures MicrosoftGraphWindowsMalwareThreatState = "remediatedWithNonCriticalFailures"
	MicrosoftGraphWindowsMalwareThreatStateRemoved                           MicrosoftGraphWindowsMalwareThreatState = "removed"
)

// Defines values for MicrosoftGraphWorkbookOperationStatus.
const (
	Failed     MicrosoftGraphWorkbookOperationStatus = "failed"
	NotStarted MicrosoftGraphWorkbookOperationStatus = "notStarted"
	Running    MicrosoftGraphWorkbookOperationStatus = "running"
	Succeeded  MicrosoftGraphWorkbookOperationStatus = "succeeded"
)

// Defines values for UsersUserListUserParamsOrderby.
const (
	UsersUserListUserParamsOrderbyAboutMe                             UsersUserListUserParamsOrderby = "aboutMe"
	UsersUserListUserParamsOrderbyAboutMeDesc                         UsersUserListUserParamsOrderby = "aboutMe desc"
	UsersUserListUserParamsOrderbyAccountEnabled                      UsersUserListUserParamsOrderby = "accountEnabled"
	UsersUserListUserParamsOrderbyAccountEnabledDesc                  UsersUserListUserParamsOrderby = "accountEnabled desc"
	UsersUserListUserParamsOrderbyAgeGroup                            UsersUserListUserParamsOrderby = "ageGroup"
	UsersUserListUserParamsOrderbyAgeGroupDesc                        UsersUserListUserParamsOrderby = "ageGroup desc"
	UsersUserListUserParamsOrderbyAssignedLicenses                    UsersUserListUserParamsOrderby = "assignedLicenses"
	UsersUserListUserParamsOrderbyAssignedLicensesDesc                UsersUserListUserParamsOrderby = "assignedLicenses desc"
	UsersUserListUserParamsOrderbyAssignedPlans                       UsersUserListUserParamsOrderby = "assignedPlans"
	UsersUserListUserParamsOrderbyAssignedPlansDesc                   UsersUserListUserParamsOrderby = "assignedPlans desc"
	UsersUserListUserParamsOrderbyAuthorizationInfo                   UsersUserListUserParamsOrderby = "authorizationInfo"
	UsersUserListUserParamsOrderbyAuthorizationInfoDesc               UsersUserListUserParamsOrderby = "authorizationInfo desc"
	UsersUserListUserParamsOrderbyBirthday                            UsersUserListUserParamsOrderby = "birthday"
	UsersUserListUserParamsOrderbyBirthdayDesc                        UsersUserListUserParamsOrderby = "birthday desc"
	UsersUserListUserParamsOrderbyBusinessPhones                      UsersUserListUserParamsOrderby = "businessPhones"
	UsersUserListUserParamsOrderbyBusinessPhonesDesc                  UsersUserListUserParamsOrderby = "businessPhones desc"
	UsersUserListUserParamsOrderbyCity                                UsersUserListUserParamsOrderby = "city"
	UsersUserListUserParamsOrderbyCityDesc                            UsersUserListUserParamsOrderby = "city desc"
	UsersUserListUserParamsOrderbyCompanyName                         UsersUserListUserParamsOrderby = "companyName"
	UsersUserListUserParamsOrderbyCompanyNameDesc                     UsersUserListUserParamsOrderby = "companyName desc"
	UsersUserListUserParamsOrderbyConsentProvidedForMinor             UsersUserListUserParamsOrderby = "consentProvidedForMinor"
	UsersUserListUserParamsOrderbyConsentProvidedForMinorDesc         UsersUserListUserParamsOrderby = "consentProvidedForMinor desc"
	UsersUserListUserParamsOrderbyCountry                             UsersUserListUserParamsOrderby = "country"
	UsersUserListUserParamsOrderbyCountryDesc                         UsersUserListUserParamsOrderby = "country desc"
	UsersUserListUserParamsOrderbyCreatedDateTime                     UsersUserListUserParamsOrderby = "createdDateTime"
	UsersUserListUserParamsOrderbyCreatedDateTimeDesc                 UsersUserListUserParamsOrderby = "createdDateTime desc"
	UsersUserListUserParamsOrderbyCreationType                        UsersUserListUserParamsOrderby = "creationType"
	UsersUserListUserParamsOrderbyCreationTypeDesc                    UsersUserListUserParamsOrderby = "creationType desc"
	UsersUserListUserParamsOrderbyCustomSecurityAttributes            UsersUserListUserParamsOrderby = "customSecurityAttributes"
	UsersUserListUserParamsOrderbyCustomSecurityAttributesDesc        UsersUserListUserParamsOrderby = "customSecurityAttributes desc"
	UsersUserListUserParamsOrderbyDeletedDateTime                     UsersUserListUserParamsOrderby = "deletedDateTime"
	UsersUserListUserParamsOrderbyDeletedDateTimeDesc                 UsersUserListUserParamsOrderby = "deletedDateTime desc"
	UsersUserListUserParamsOrderbyDepartment                          UsersUserListUserParamsOrderby = "department"
	UsersUserListUserParamsOrderbyDepartmentDesc                      UsersUserListUserParamsOrderby = "department desc"
	UsersUserListUserParamsOrderbyDeviceEnrollmentLimit               UsersUserListUserParamsOrderby = "deviceEnrollmentLimit"
	UsersUserListUserParamsOrderbyDeviceEnrollmentLimitDesc           UsersUserListUserParamsOrderby = "deviceEnrollmentLimit desc"
	UsersUserListUserParamsOrderbyDisplayName                         UsersUserListUserParamsOrderby = "displayName"
	UsersUserListUserParamsOrderbyDisplayNameDesc                     UsersUserListUserParamsOrderby = "displayName desc"
	UsersUserListUserParamsOrderbyEmployeeHireDate                    UsersUserListUserParamsOrderby = "employeeHireDate"
	UsersUserListUserParamsOrderbyEmployeeHireDateDesc                UsersUserListUserParamsOrderby = "employeeHireDate desc"
	UsersUserListUserParamsOrderbyEmployeeId                          UsersUserListUserParamsOrderby = "employeeId"
	UsersUserListUserParamsOrderbyEmployeeIdDesc                      UsersUserListUserParamsOrderby = "employeeId desc"
	UsersUserListUserParamsOrderbyEmployeeLeaveDateTime               UsersUserListUserParamsOrderby = "employeeLeaveDateTime"
	UsersUserListUserParamsOrderbyEmployeeLeaveDateTimeDesc           UsersUserListUserParamsOrderby = "employeeLeaveDateTime desc"
	UsersUserListUserParamsOrderbyEmployeeOrgData                     UsersUserListUserParamsOrderby = "employeeOrgData"
	UsersUserListUserParamsOrderbyEmployeeOrgDataDesc                 UsersUserListUserParamsOrderby = "employeeOrgData desc"
	UsersUserListUserParamsOrderbyEmployeeType                        UsersUserListUserParamsOrderby = "employeeType"
	UsersUserListUserParamsOrderbyEmployeeTypeDesc                    UsersUserListUserParamsOrderby = "employeeType desc"
	UsersUserListUserParamsOrderbyExternalUserState                   UsersUserListUserParamsOrderby = "externalUserState"
	UsersUserListUserParamsOrderbyExternalUserStateChangeDateTime     UsersUserListUserParamsOrderby = "externalUserStateChangeDateTime"
	UsersUserListUserParamsOrderbyExternalUserStateChangeDateTimeDesc UsersUserListUserParamsOrderby = "externalUserStateChangeDateTime desc"
	UsersUserListUserParamsOrderbyExternalUserStateDesc               UsersUserListUserParamsOrderby = "externalUserState desc"
	UsersUserListUserParamsOrderbyFaxNumber                           UsersUserListUserParamsOrderby = "faxNumber"
	UsersUserListUserParamsOrderbyFaxNumberDesc                       UsersUserListUserParamsOrderby = "faxNumber desc"
	UsersUserListUserParamsOrderbyGivenName                           UsersUserListUserParamsOrderby = "givenName"
	UsersUserListUserParamsOrderbyGivenNameDesc                       UsersUserListUserParamsOrderby = "givenName desc"
	UsersUserListUserParamsOrderbyHireDate                            UsersUserListUserParamsOrderby = "hireDate"
	UsersUserListUserParamsOrderbyHireDateDesc                        UsersUserListUserParamsOrderby = "hireDate desc"
	UsersUserListUserParamsOrderbyId                                  UsersUserListUserParamsOrderby = "id"
	UsersUserListUserParamsOrderbyIdDesc                              UsersUserListUserParamsOrderby = "id desc"
	UsersUserListUserParamsOrderbyIdentities                          UsersUserListUserParamsOrderby = "identities"
	UsersUserListUserParamsOrderbyIdentitiesDesc                      UsersUserListUserParamsOrderby = "identities desc"
	UsersUserListUserParamsOrderbyImAddresses                         UsersUserListUserParamsOrderby = "imAddresses"
	UsersUserListUserParamsOrderbyImAddressesDesc                     UsersUserListUserParamsOrderby = "imAddresses desc"
	UsersUserListUserParamsOrderbyInterests                           UsersUserListUserParamsOrderby = "interests"
	UsersUserListUserParamsOrderbyInterestsDesc                       UsersUserListUserParamsOrderby = "interests desc"
	UsersUserListUserParamsOrderbyIsResourceAccount                   UsersUserListUserParamsOrderby = "isResourceAccount"
	UsersUserListUserParamsOrderbyIsResourceAccountDesc               UsersUserListUserParamsOrderby = "isResourceAccount desc"
	UsersUserListUserParamsOrderbyJobTitle                            UsersUserListUserParamsOrderby = "jobTitle"
	UsersUserListUserParamsOrderbyJobTitleDesc                        UsersUserListUserParamsOrderby = "jobTitle desc"
	UsersUserListUserParamsOrderbyLastPasswordChangeDateTime          UsersUserListUserParamsOrderby = "lastPasswordChangeDateTime"
	UsersUserListUserParamsOrderbyLastPasswordChangeDateTimeDesc      UsersUserListUserParamsOrderby = "lastPasswordChangeDateTime desc"
	UsersUserListUserParamsOrderbyLegalAgeGroupClassification         UsersUserListUserParamsOrderby = "legalAgeGroupClassification"
	UsersUserListUserParamsOrderbyLegalAgeGroupClassificationDesc     UsersUserListUserParamsOrderby = "legalAgeGroupClassification desc"
	UsersUserListUserParamsOrderbyLicenseAssignmentStates             UsersUserListUserParamsOrderby = "licenseAssignmentStates"
	UsersUserListUserParamsOrderbyLicenseAssignmentStatesDesc         UsersUserListUserParamsOrderby = "licenseAssignmentStates desc"
	UsersUserListUserParamsOrderbyMail                                UsersUserListUserParamsOrderby = "mail"
	UsersUserListUserParamsOrderbyMailDesc                            UsersUserListUserParamsOrderby = "mail desc"
	UsersUserListUserParamsOrderbyMailNickname                        UsersUserListUserParamsOrderby = "mailNickname"
	UsersUserListUserParamsOrderbyMailNicknameDesc                    UsersUserListUserParamsOrderby = "mailNickname desc"
	UsersUserListUserParamsOrderbyMailboxSettings                     UsersUserListUserParamsOrderby = "mailboxSettings"
	UsersUserListUserParamsOrderbyMailboxSettingsDesc                 UsersUserListUserParamsOrderby = "mailboxSettings desc"
	UsersUserListUserParamsOrderbyMobilePhone                         UsersUserListUserParamsOrderby = "mobilePhone"
	UsersUserListUserParamsOrderbyMobilePhoneDesc                     UsersUserListUserParamsOrderby = "mobilePhone desc"
	UsersUserListUserParamsOrderbyMySite                              UsersUserListUserParamsOrderby = "mySite"
	UsersUserListUserParamsOrderbyMySiteDesc                          UsersUserListUserParamsOrderby = "mySite desc"
	UsersUserListUserParamsOrderbyOfficeLocation                      UsersUserListUserParamsOrderby = "officeLocation"
	UsersUserListUserParamsOrderbyOfficeLocationDesc                  UsersUserListUserParamsOrderby = "officeLocation desc"
	UsersUserListUserParamsOrderbyOnPremisesDistinguishedName         UsersUserListUserParamsOrderby = "onPremisesDistinguishedName"
	UsersUserListUserParamsOrderbyOnPremisesDistinguishedNameDesc     UsersUserListUserParamsOrderby = "onPremisesDistinguishedName desc"
	UsersUserListUserParamsOrderbyOnPremisesDomainName                UsersUserListUserParamsOrderby = "onPremisesDomainName"
	UsersUserListUserParamsOrderbyOnPremisesDomainNameDesc            UsersUserListUserParamsOrderby = "onPremisesDomainName desc"
	UsersUserListUserParamsOrderbyOnPremisesExtensionAttributes       UsersUserListUserParamsOrderby = "onPremisesExtensionAttributes"
	UsersUserListUserParamsOrderbyOnPremisesExtensionAttributesDesc   UsersUserListUserParamsOrderby = "onPremisesExtensionAttributes desc"
	UsersUserListUserParamsOrderbyOnPremisesImmutableId               UsersUserListUserParamsOrderby = "onPremisesImmutableId"
	UsersUserListUserParamsOrderbyOnPremisesImmutableIdDesc           UsersUserListUserParamsOrderby = "onPremisesImmutableId desc"
	UsersUserListUserParamsOrderbyOnPremisesLastSyncDateTime          UsersUserListUserParamsOrderby = "onPremisesLastSyncDateTime"
	UsersUserListUserParamsOrderbyOnPremisesLastSyncDateTimeDesc      UsersUserListUserParamsOrderby = "onPremisesLastSyncDateTime desc"
	UsersUserListUserParamsOrderbyOnPremisesProvisioningErrors        UsersUserListUserParamsOrderby = "onPremisesProvisioningErrors"
	UsersUserListUserParamsOrderbyOnPremisesProvisioningErrorsDesc    UsersUserListUserParamsOrderby = "onPremisesProvisioningErrors desc"
	UsersUserListUserParamsOrderbyOnPremisesSamAccountName            UsersUserListUserParamsOrderby = "onPremisesSamAccountName"
	UsersUserListUserParamsOrderbyOnPremisesSamAccountNameDesc        UsersUserListUserParamsOrderby = "onPremisesSamAccountName desc"
	UsersUserListUserParamsOrderbyOnPremisesSecurityIdentifier        UsersUserListUserParamsOrderby = "onPremisesSecurityIdentifier"
	UsersUserListUserParamsOrderbyOnPremisesSecurityIdentifierDesc    UsersUserListUserParamsOrderby = "onPremisesSecurityIdentifier desc"
	UsersUserListUserParamsOrderbyOnPremisesSyncEnabled               UsersUserListUserParamsOrderby = "onPremisesSyncEnabled"
	UsersUserListUserParamsOrderbyOnPremisesSyncEnabledDesc           UsersUserListUserParamsOrderby = "onPremisesSyncEnabled desc"
	UsersUserListUserParamsOrderbyOnPremisesUserPrincipalName         UsersUserListUserParamsOrderby = "onPremisesUserPrincipalName"
	UsersUserListUserParamsOrderbyOnPremisesUserPrincipalNameDesc     UsersUserListUserParamsOrderby = "onPremisesUserPrincipalName desc"
	UsersUserListUserParamsOrderbyOtherMails                          UsersUserListUserParamsOrderby = "otherMails"
	UsersUserListUserParamsOrderbyOtherMailsDesc                      UsersUserListUserParamsOrderby = "otherMails desc"
	UsersUserListUserParamsOrderbyPasswordPolicies                    UsersUserListUserParamsOrderby = "passwordPolicies"
	UsersUserListUserParamsOrderbyPasswordPoliciesDesc                UsersUserListUserParamsOrderby = "passwordPolicies desc"
	UsersUserListUserParamsOrderbyPasswordProfile                     UsersUserListUserParamsOrderby = "passwordProfile"
	UsersUserListUserParamsOrderbyPasswordProfileDesc                 UsersUserListUserParamsOrderby = "passwordProfile desc"
	UsersUserListUserParamsOrderbyPastProjects                        UsersUserListUserParamsOrderby = "pastProjects"
	UsersUserListUserParamsOrderbyPastProjectsDesc                    UsersUserListUserParamsOrderby = "pastProjects desc"
	UsersUserListUserParamsOrderbyPostalCode                          UsersUserListUserParamsOrderby = "postalCode"
	UsersUserListUserParamsOrderbyPostalCodeDesc                      UsersUserListUserParamsOrderby = "postalCode desc"
	UsersUserListUserParamsOrderbyPreferredDataLocation               UsersUserListUserParamsOrderby = "preferredDataLocation"
	UsersUserListUserParamsOrderbyPreferredDataLocationDesc           UsersUserListUserParamsOrderby = "preferredDataLocation desc"
	UsersUserListUserParamsOrderbyPreferredLanguage                   UsersUserListUserParamsOrderby = "preferredLanguage"
	UsersUserListUserParamsOrderbyPreferredLanguageDesc               UsersUserListUserParamsOrderby = "preferredLanguage desc"
	UsersUserListUserParamsOrderbyPreferredName                       UsersUserListUserParamsOrderby = "preferredName"
	UsersUserListUserParamsOrderbyPreferredNameDesc                   UsersUserListUserParamsOrderby = "preferredName desc"
	UsersUserListUserParamsOrderbyPrint                               UsersUserListUserParamsOrderby = "print"
	UsersUserListUserParamsOrderbyPrintDesc                           UsersUserListUserParamsOrderby = "print desc"
	UsersUserListUserParamsOrderbyProvisionedPlans                    UsersUserListUserParamsOrderby = "provisionedPlans"
	UsersUserListUserParamsOrderbyProvisionedPlansDesc                UsersUserListUserParamsOrderby = "provisionedPlans desc"
	UsersUserListUserParamsOrderbyProxyAddresses                      UsersUserListUserParamsOrderby = "proxyAddresses"
	UsersUserListUserParamsOrderbyProxyAddressesDesc                  UsersUserListUserParamsOrderby = "proxyAddresses desc"
	UsersUserListUserParamsOrderbyResponsibilities                    UsersUserListUserParamsOrderby = "responsibilities"
	UsersUserListUserParamsOrderbyResponsibilitiesDesc                UsersUserListUserParamsOrderby = "responsibilities desc"
	UsersUserListUserParamsOrderbySchools                             UsersUserListUserParamsOrderby = "schools"
	UsersUserListUserParamsOrderbySchoolsDesc                         UsersUserListUserParamsOrderby = "schools desc"
	UsersUserListUserParamsOrderbySecurityIdentifier                  UsersUserListUserParamsOrderby = "securityIdentifier"
	UsersUserListUserParamsOrderbySecurityIdentifierDesc              UsersUserListUserParamsOrderby = "securityIdentifier desc"
	UsersUserListUserParamsOrderbyShowInAddressList                   UsersUserListUserParamsOrderby = "showInAddressList"
	UsersUserListUserParamsOrderbyShowInAddressListDesc               UsersUserListUserParamsOrderby = "showInAddressList desc"
	UsersUserListUserParamsOrderbySignInActivity                      UsersUserListUserParamsOrderby = "signInActivity"
	UsersUserListUserParamsOrderbySignInActivityDesc                  UsersUserListUserParamsOrderby = "signInActivity desc"
	UsersUserListUserParamsOrderbySignInSessionsValidFromDateTime     UsersUserListUserParamsOrderby = "signInSessionsValidFromDateTime"
	UsersUserListUserParamsOrderbySignInSessionsValidFromDateTimeDesc UsersUserListUserParamsOrderby = "signInSessionsValidFromDateTime desc"
	UsersUserListUserParamsOrderbySkills                              UsersUserListUserParamsOrderby = "skills"
	UsersUserListUserParamsOrderbySkillsDesc                          UsersUserListUserParamsOrderby = "skills desc"
	UsersUserListUserParamsOrderbyState                               UsersUserListUserParamsOrderby = "state"
	UsersUserListUserParamsOrderbyStateDesc                           UsersUserListUserParamsOrderby = "state desc"
	UsersUserListUserParamsOrderbyStreetAddress                       UsersUserListUserParamsOrderby = "streetAddress"
	UsersUserListUserParamsOrderbyStreetAddressDesc                   UsersUserListUserParamsOrderby = "streetAddress desc"
	UsersUserListUserParamsOrderbySurname                             UsersUserListUserParamsOrderby = "surname"
	UsersUserListUserParamsOrderbySurnameDesc                         UsersUserListUserParamsOrderby = "surname desc"
	UsersUserListUserParamsOrderbyUsageLocation                       UsersUserListUserParamsOrderby = "usageLocation"
	UsersUserListUserParamsOrderbyUsageLocationDesc                   UsersUserListUserParamsOrderby = "usageLocation desc"
	UsersUserListUserParamsOrderbyUserPrincipalName                   UsersUserListUserParamsOrderby = "userPrincipalName"
	UsersUserListUserParamsOrderbyUserPrincipalNameDesc               UsersUserListUserParamsOrderby = "userPrincipalName desc"
	UsersUserListUserParamsOrderbyUserType                            UsersUserListUserParamsOrderby = "userType"
	UsersUserListUserParamsOrderbyUserTypeDesc                        UsersUserListUserParamsOrderby = "userType desc"
)

// Defines values for UsersUserListUserParamsSelect.
const (
	UsersUserListUserParamsSelectAboutMe                               UsersUserListUserParamsSelect = "aboutMe"
	UsersUserListUserParamsSelectAccountEnabled                        UsersUserListUserParamsSelect = "accountEnabled"
	UsersUserListUserParamsSelectActivities                            UsersUserListUserParamsSelect = "activities"
	UsersUserListUserParamsSelectAgeGroup                              UsersUserListUserParamsSelect = "ageGroup"
	UsersUserListUserParamsSelectAgreementAcceptances                  UsersUserListUserParamsSelect = "agreementAcceptances"
	UsersUserListUserParamsSelectAppRoleAssignments                    UsersUserListUserParamsSelect = "appRoleAssignments"
	UsersUserListUserParamsSelectAssignedLicenses                      UsersUserListUserParamsSelect = "assignedLicenses"
	UsersUserListUserParamsSelectAssignedPlans                         UsersUserListUserParamsSelect = "assignedPlans"
	UsersUserListUserParamsSelectAuthentication                        UsersUserListUserParamsSelect = "authentication"
	UsersUserListUserParamsSelectAuthorizationInfo                     UsersUserListUserParamsSelect = "authorizationInfo"
	UsersUserListUserParamsSelectBirthday                              UsersUserListUserParamsSelect = "birthday"
	UsersUserListUserParamsSelectBusinessPhones                        UsersUserListUserParamsSelect = "businessPhones"
	UsersUserListUserParamsSelectCalendar                              UsersUserListUserParamsSelect = "calendar"
	UsersUserListUserParamsSelectCalendarGroups                        UsersUserListUserParamsSelect = "calendarGroups"
	UsersUserListUserParamsSelectCalendarView                          UsersUserListUserParamsSelect = "calendarView"
	UsersUserListUserParamsSelectCalendars                             UsersUserListUserParamsSelect = "calendars"
	UsersUserListUserParamsSelectChats                                 UsersUserListUserParamsSelect = "chats"
	UsersUserListUserParamsSelectCity                                  UsersUserListUserParamsSelect = "city"
	UsersUserListUserParamsSelectCompanyName                           UsersUserListUserParamsSelect = "companyName"
	UsersUserListUserParamsSelectConsentProvidedForMinor               UsersUserListUserParamsSelect = "consentProvidedForMinor"
	UsersUserListUserParamsSelectContactFolders                        UsersUserListUserParamsSelect = "contactFolders"
	UsersUserListUserParamsSelectContacts                              UsersUserListUserParamsSelect = "contacts"
	UsersUserListUserParamsSelectCountry                               UsersUserListUserParamsSelect = "country"
	UsersUserListUserParamsSelectCreatedDateTime                       UsersUserListUserParamsSelect = "createdDateTime"
	UsersUserListUserParamsSelectCreatedObjects                        UsersUserListUserParamsSelect = "createdObjects"
	UsersUserListUserParamsSelectCreationType                          UsersUserListUserParamsSelect = "creationType"
	UsersUserListUserParamsSelectCustomSecurityAttributes              UsersUserListUserParamsSelect = "customSecurityAttributes"
	UsersUserListUserParamsSelectDeletedDateTime                       UsersUserListUserParamsSelect = "deletedDateTime"
	UsersUserListUserParamsSelectDepartment                            UsersUserListUserParamsSelect = "department"
	UsersUserListUserParamsSelectDeviceEnrollmentLimit                 UsersUserListUserParamsSelect = "deviceEnrollmentLimit"
	UsersUserListUserParamsSelectDeviceManagementTroubleshootingEvents UsersUserListUserParamsSelect = "deviceManagementTroubleshootingEvents"
	UsersUserListUserParamsSelectDirectReports                         UsersUserListUserParamsSelect = "directReports"
	UsersUserListUserParamsSelectDisplayName                           UsersUserListUserParamsSelect = "displayName"
	UsersUserListUserParamsSelectDrive                                 UsersUserListUserParamsSelect = "drive"
	UsersUserListUserParamsSelectDrives                                UsersUserListUserParamsSelect = "drives"
	UsersUserListUserParamsSelectEmployeeExperience                    UsersUserListUserParamsSelect = "employeeExperience"
	UsersUserListUserParamsSelectEmployeeHireDate                      UsersUserListUserParamsSelect = "employeeHireDate"
	UsersUserListUserParamsSelectEmployeeId                            UsersUserListUserParamsSelect = "employeeId"
	UsersUserListUserParamsSelectEmployeeLeaveDateTime                 UsersUserListUserParamsSelect = "employeeLeaveDateTime"
	UsersUserListUserParamsSelectEmployeeOrgData                       UsersUserListUserParamsSelect = "employeeOrgData"
	UsersUserListUserParamsSelectEmployeeType                          UsersUserListUserParamsSelect = "employeeType"
	UsersUserListUserParamsSelectEvents                                UsersUserListUserParamsSelect = "events"
	UsersUserListUserParamsSelectExtensions                            UsersUserListUserParamsSelect = "extensions"
	UsersUserListUserParamsSelectExternalUserState                     UsersUserListUserParamsSelect = "externalUserState"
	UsersUserListUserParamsSelectExternalUserStateChangeDateTime       UsersUserListUserParamsSelect = "externalUserStateChangeDateTime"
	UsersUserListUserParamsSelectFaxNumber                             UsersUserListUserParamsSelect = "faxNumber"
	UsersUserListUserParamsSelectFollowedSites                         UsersUserListUserParamsSelect = "followedSites"
	UsersUserListUserParamsSelectGivenName                             UsersUserListUserParamsSelect = "givenName"
	UsersUserListUserParamsSelectHireDate                              UsersUserListUserParamsSelect = "hireDate"
	UsersUserListUserParamsSelectId                                    UsersUserListUserParamsSelect = "id"
	UsersUserListUserParamsSelectIdentities                            UsersUserListUserParamsSelect = "identities"
	UsersUserListUserParamsSelectImAddresses                           UsersUserListUserParamsSelect = "imAddresses"
	UsersUserListUserParamsSelectInferenceClassification               UsersUserListUserParamsSelect = "inferenceClassification"
	UsersUserListUserParamsSelectInsights                              UsersUserListUserParamsSelect = "insights"
	UsersUserListUserParamsSelectInterests                             UsersUserListUserParamsSelect = "interests"
	UsersUserListUserParamsSelectIsResourceAccount                     UsersUserListUserParamsSelect = "isResourceAccount"
	UsersUserListUserParamsSelectJobTitle                              UsersUserListUserParamsSelect = "jobTitle"
	UsersUserListUserParamsSelectJoinedTeams                           UsersUserListUserParamsSelect = "joinedTeams"
	UsersUserListUserParamsSelectLastPasswordChangeDateTime            UsersUserListUserParamsSelect = "lastPasswordChangeDateTime"
	UsersUserListUserParamsSelectLegalAgeGroupClassification           UsersUserListUserParamsSelect = "legalAgeGroupClassification"
	UsersUserListUserParamsSelectLicenseAssignmentStates               UsersUserListUserParamsSelect = "licenseAssignmentStates"
	UsersUserListUserParamsSelectLicenseDetails                        UsersUserListUserParamsSelect = "licenseDetails"
	UsersUserListUserParamsSelectMail                                  UsersUserListUserParamsSelect = "mail"
	UsersUserListUserParamsSelectMailFolders                           UsersUserListUserParamsSelect = "mailFolders"
	UsersUserListUserParamsSelectMailNickname                          UsersUserListUserParamsSelect = "mailNickname"
	UsersUserListUserParamsSelectMailboxSettings                       UsersUserListUserParamsSelect = "mailboxSettings"
	UsersUserListUserParamsSelectManagedAppRegistrations               UsersUserListUserParamsSelect = "managedAppRegistrations"
	UsersUserListUserParamsSelectManagedDevices                        UsersUserListUserParamsSelect = "managedDevices"
	UsersUserListUserParamsSelectManager                               UsersUserListUserParamsSelect = "manager"
	UsersUserListUserParamsSelectMemberOf                              UsersUserListUserParamsSelect = "memberOf"
	UsersUserListUserParamsSelectMessages                              UsersUserListUserParamsSelect = "messages"
	UsersUserListUserParamsSelectMobilePhone                           UsersUserListUserParamsSelect = "mobilePhone"
	UsersUserListUserParamsSelectMySite                                UsersUserListUserParamsSelect = "mySite"
	UsersUserListUserParamsSelectOauth2PermissionGrants                UsersUserListUserParamsSelect = "oauth2PermissionGrants"
	UsersUserListUserParamsSelectOfficeLocation                        UsersUserListUserParamsSelect = "officeLocation"
	UsersUserListUserParamsSelectOnPremisesDistinguishedName           UsersUserListUserParamsSelect = "onPremisesDistinguishedName"
	UsersUserListUserParamsSelectOnPremisesDomainName                  UsersUserListUserParamsSelect = "onPremisesDomainName"
	UsersUserListUserParamsSelectOnPremisesExtensionAttributes         UsersUserListUserParamsSelect = "onPremisesExtensionAttributes"
	UsersUserListUserParamsSelectOnPremisesImmutableId                 UsersUserListUserParamsSelect = "onPremisesImmutableId"
	UsersUserListUserParamsSelectOnPremisesLastSyncDateTime            UsersUserListUserParamsSelect = "onPremisesLastSyncDateTime"
	UsersUserListUserParamsSelectOnPremisesProvisioningErrors          UsersUserListUserParamsSelect = "onPremisesProvisioningErrors"
	UsersUserListUserParamsSelectOnPremisesSamAccountName              UsersUserListUserParamsSelect = "onPremisesSamAccountName"
	UsersUserListUserParamsSelectOnPremisesSecurityIdentifier          UsersUserListUserParamsSelect = "onPremisesSecurityIdentifier"
	UsersUserListUserParamsSelectOnPremisesSyncEnabled                 UsersUserListUserParamsSelect = "onPremisesSyncEnabled"
	UsersUserListUserParamsSelectOnPremisesUserPrincipalName           UsersUserListUserParamsSelect = "onPremisesUserPrincipalName"
	UsersUserListUserParamsSelectOnenote                               UsersUserListUserParamsSelect = "onenote"
	UsersUserListUserParamsSelectOnlineMeetings                        UsersUserListUserParamsSelect = "onlineMeetings"
	UsersUserListUserParamsSelectOtherMails                            UsersUserListUserParamsSelect = "otherMails"
	UsersUserListUserParamsSelectOutlook                               UsersUserListUserParamsSelect = "outlook"
	UsersUserListUserParamsSelectOwnedDevices                          UsersUserListUserParamsSelect = "ownedDevices"
	UsersUserListUserParamsSelectOwnedObjects                          UsersUserListUserParamsSelect = "ownedObjects"
	UsersUserListUserParamsSelectPasswordPolicies                      UsersUserListUserParamsSelect = "passwordPolicies"
	UsersUserListUserParamsSelectPasswordProfile                       UsersUserListUserParamsSelect = "passwordProfile"
	UsersUserListUserParamsSelectPastProjects                          UsersUserListUserParamsSelect = "pastProjects"
	UsersUserListUserParamsSelectPeople                                UsersUserListUserParamsSelect = "people"
	UsersUserListUserParamsSelectPhoto                                 UsersUserListUserParamsSelect = "photo"
	UsersUserListUserParamsSelectPhotos                                UsersUserListUserParamsSelect = "photos"
	UsersUserListUserParamsSelectPlanner                               UsersUserListUserParamsSelect = "planner"
	UsersUserListUserParamsSelectPostalCode                            UsersUserListUserParamsSelect = "postalCode"
	UsersUserListUserParamsSelectPreferredDataLocation                 UsersUserListUserParamsSelect = "preferredDataLocation"
	UsersUserListUserParamsSelectPreferredLanguage                     UsersUserListUserParamsSelect = "preferredLanguage"
	UsersUserListUserParamsSelectPreferredName                         UsersUserListUserParamsSelect = "preferredName"
	UsersUserListUserParamsSelectPresence                              UsersUserListUserParamsSelect = "presence"
	UsersUserListUserParamsSelectPrint                                 UsersUserListUserParamsSelect = "print"
	UsersUserListUserParamsSelectProvisionedPlans                      UsersUserListUserParamsSelect = "provisionedPlans"
	UsersUserListUserParamsSelectProxyAddresses                        UsersUserListUserParamsSelect = "proxyAddresses"
	UsersUserListUserParamsSelectRegisteredDevices                     UsersUserListUserParamsSelect = "registeredDevices"
	UsersUserListUserParamsSelectResponsibilities                      UsersUserListUserParamsSelect = "responsibilities"
	UsersUserListUserParamsSelectSchools                               UsersUserListUserParamsSelect = "schools"
	UsersUserListUserParamsSelectScopedRoleMemberOf                    UsersUserListUserParamsSelect = "scopedRoleMemberOf"
	UsersUserListUserParamsSelectSecurityIdentifier                    UsersUserListUserParamsSelect = "securityIdentifier"
	UsersUserListUserParamsSelectSettings                              UsersUserListUserParamsSelect = "settings"
	UsersUserListUserParamsSelectShowInAddressList                     UsersUserListUserParamsSelect = "showInAddressList"
	UsersUserListUserParamsSelectSignInActivity                        UsersUserListUserParamsSelect = "signInActivity"
	UsersUserListUserParamsSelectSignInSessionsValidFromDateTime       UsersUserListUserParamsSelect = "signInSessionsValidFromDateTime"
	UsersUserListUserParamsSelectSkills                                UsersUserListUserParamsSelect = "skills"
	UsersUserListUserParamsSelectState                                 UsersUserListUserParamsSelect = "state"
	UsersUserListUserParamsSelectStreetAddress                         UsersUserListUserParamsSelect = "streetAddress"
	UsersUserListUserParamsSelectSurname                               UsersUserListUserParamsSelect = "surname"
	UsersUserListUserParamsSelectTeamwork                              UsersUserListUserParamsSelect = "teamwork"
	UsersUserListUserParamsSelectTodo                                  UsersUserListUserParamsSelect = "todo"
	UsersUserListUserParamsSelectTransitiveMemberOf                    UsersUserListUserParamsSelect = "transitiveMemberOf"
	UsersUserListUserParamsSelectUsageLocation                         UsersUserListUserParamsSelect = "usageLocation"
	UsersUserListUserParamsSelectUserPrincipalName                     UsersUserListUserParamsSelect = "userPrincipalName"
	UsersUserListUserParamsSelectUserType                              UsersUserListUserParamsSelect = "userType"
)

// Defines values for UsersUserListUserParamsExpand.
const (
	UsersUserListUserParamsExpandActivities                            UsersUserListUserParamsExpand = "activities"
	UsersUserListUserParamsExpandAgreementAcceptances                  UsersUserListUserParamsExpand = "agreementAcceptances"
	UsersUserListUserParamsExpandAppRoleAssignments                    UsersUserListUserParamsExpand = "appRoleAssignments"
	UsersUserListUserParamsExpandAsterisk                              UsersUserListUserParamsExpand = "*"
	UsersUserListUserParamsExpandAuthentication                        UsersUserListUserParamsExpand = "authentication"
	UsersUserListUserParamsExpandCalendar                              UsersUserListUserParamsExpand = "calendar"
	UsersUserListUserParamsExpandCalendarGroups                        UsersUserListUserParamsExpand = "calendarGroups"
	UsersUserListUserParamsExpandCalendarView                          UsersUserListUserParamsExpand = "calendarView"
	UsersUserListUserParamsExpandCalendars                             UsersUserListUserParamsExpand = "calendars"
	UsersUserListUserParamsExpandChats                                 UsersUserListUserParamsExpand = "chats"
	UsersUserListUserParamsExpandContactFolders                        UsersUserListUserParamsExpand = "contactFolders"
	UsersUserListUserParamsExpandContacts                              UsersUserListUserParamsExpand = "contacts"
	UsersUserListUserParamsExpandCreatedObjects                        UsersUserListUserParamsExpand = "createdObjects"
	UsersUserListUserParamsExpandDeviceManagementTroubleshootingEvents UsersUserListUserParamsExpand = "deviceManagementTroubleshootingEvents"
	UsersUserListUserParamsExpandDirectReports                         UsersUserListUserParamsExpand = "directReports"
	UsersUserListUserParamsExpandDrive                                 UsersUserListUserParamsExpand = "drive"
	UsersUserListUserParamsExpandDrives                                UsersUserListUserParamsExpand = "drives"
	UsersUserListUserParamsExpandEmployeeExperience                    UsersUserListUserParamsExpand = "employeeExperience"
	UsersUserListUserParamsExpandEvents                                UsersUserListUserParamsExpand = "events"
	UsersUserListUserParamsExpandExtensions                            UsersUserListUserParamsExpand = "extensions"
	UsersUserListUserParamsExpandFollowedSites                         UsersUserListUserParamsExpand = "followedSites"
	UsersUserListUserParamsExpandInferenceClassification               UsersUserListUserParamsExpand = "inferenceClassification"
	UsersUserListUserParamsExpandInsights                              UsersUserListUserParamsExpand = "insights"
	UsersUserListUserParamsExpandJoinedTeams                           UsersUserListUserParamsExpand = "joinedTeams"
	UsersUserListUserParamsExpandLicenseDetails                        UsersUserListUserParamsExpand = "licenseDetails"
	UsersUserListUserParamsExpandMailFolders                           UsersUserListUserParamsExpand = "mailFolders"
	UsersUserListUserParamsExpandManagedAppRegistrations               UsersUserListUserParamsExpand = "managedAppRegistrations"
	UsersUserListUserParamsExpandManagedDevices                        UsersUserListUserParamsExpand = "managedDevices"
	UsersUserListUserParamsExpandManager                               UsersUserListUserParamsExpand = "manager"
	UsersUserListUserParamsExpandMemberOf                              UsersUserListUserParamsExpand = "memberOf"
	UsersUserListUserParamsExpandMessages                              UsersUserListUserParamsExpand = "messages"
	UsersUserListUserParamsExpandOauth2PermissionGrants                UsersUserListUserParamsExpand = "oauth2PermissionGrants"
	UsersUserListUserParamsExpandOnenote                               UsersUserListUserParamsExpand = "onenote"
	UsersUserListUserParamsExpandOnlineMeetings                        UsersUserListUserParamsExpand = "onlineMeetings"
	UsersUserListUserParamsExpandOutlook                               UsersUserListUserParamsExpand = "outlook"
	UsersUserListUserParamsExpandOwnedDevices                          UsersUserListUserParamsExpand = "ownedDevices"
	UsersUserListUserParamsExpandOwnedObjects                          UsersUserListUserParamsExpand = "ownedObjects"
	UsersUserListUserParamsExpandPeople                                UsersUserListUserParamsExpand = "people"
	UsersUserListUserParamsExpandPhoto                                 UsersUserListUserParamsExpand = "photo"
	UsersUserListUserParamsExpandPhotos                                UsersUserListUserParamsExpand = "photos"
	UsersUserListUserParamsExpandPlanner                               UsersUserListUserParamsExpand = "planner"
	UsersUserListUserParamsExpandPresence                              UsersUserListUserParamsExpand = "presence"
	UsersUserListUserParamsExpandRegisteredDevices                     UsersUserListUserParamsExpand = "registeredDevices"
	UsersUserListUserParamsExpandScopedRoleMemberOf                    UsersUserListUserParamsExpand = "scopedRoleMemberOf"
	UsersUserListUserParamsExpandSettings                              UsersUserListUserParamsExpand = "settings"
	UsersUserListUserParamsExpandTeamwork                              UsersUserListUserParamsExpand = "teamwork"
	UsersUserListUserParamsExpandTodo                                  UsersUserListUserParamsExpand = "todo"
	UsersUserListUserParamsExpandTransitiveMemberOf                    UsersUserListUserParamsExpand = "transitiveMemberOf"
)

// Defines values for UsersUserGetUserParamsSelect.
const (
	UsersUserGetUserParamsSelectAboutMe                               UsersUserGetUserParamsSelect = "aboutMe"
	UsersUserGetUserParamsSelectAccountEnabled                        UsersUserGetUserParamsSelect = "accountEnabled"
	UsersUserGetUserParamsSelectActivities                            UsersUserGetUserParamsSelect = "activities"
	UsersUserGetUserParamsSelectAgeGroup                              UsersUserGetUserParamsSelect = "ageGroup"
	UsersUserGetUserParamsSelectAgreementAcceptances                  UsersUserGetUserParamsSelect = "agreementAcceptances"
	UsersUserGetUserParamsSelectAppRoleAssignments                    UsersUserGetUserParamsSelect = "appRoleAssignments"
	UsersUserGetUserParamsSelectAssignedLicenses                      UsersUserGetUserParamsSelect = "assignedLicenses"
	UsersUserGetUserParamsSelectAssignedPlans                         UsersUserGetUserParamsSelect = "assignedPlans"
	UsersUserGetUserParamsSelectAuthentication                        UsersUserGetUserParamsSelect = "authentication"
	UsersUserGetUserParamsSelectAuthorizationInfo                     UsersUserGetUserParamsSelect = "authorizationInfo"
	UsersUserGetUserParamsSelectBirthday                              UsersUserGetUserParamsSelect = "birthday"
	UsersUserGetUserParamsSelectBusinessPhones                        UsersUserGetUserParamsSelect = "businessPhones"
	UsersUserGetUserParamsSelectCalendar                              UsersUserGetUserParamsSelect = "calendar"
	UsersUserGetUserParamsSelectCalendarGroups                        UsersUserGetUserParamsSelect = "calendarGroups"
	UsersUserGetUserParamsSelectCalendarView                          UsersUserGetUserParamsSelect = "calendarView"
	UsersUserGetUserParamsSelectCalendars                             UsersUserGetUserParamsSelect = "calendars"
	UsersUserGetUserParamsSelectChats                                 UsersUserGetUserParamsSelect = "chats"
	UsersUserGetUserParamsSelectCity                                  UsersUserGetUserParamsSelect = "city"
	UsersUserGetUserParamsSelectCompanyName                           UsersUserGetUserParamsSelect = "companyName"
	UsersUserGetUserParamsSelectConsentProvidedForMinor               UsersUserGetUserParamsSelect = "consentProvidedForMinor"
	UsersUserGetUserParamsSelectContactFolders                        UsersUserGetUserParamsSelect = "contactFolders"
	UsersUserGetUserParamsSelectContacts                              UsersUserGetUserParamsSelect = "contacts"
	UsersUserGetUserParamsSelectCountry                               UsersUserGetUserParamsSelect = "country"
	UsersUserGetUserParamsSelectCreatedDateTime                       UsersUserGetUserParamsSelect = "createdDateTime"
	UsersUserGetUserParamsSelectCreatedObjects                        UsersUserGetUserParamsSelect = "createdObjects"
	UsersUserGetUserParamsSelectCreationType                          UsersUserGetUserParamsSelect = "creationType"
	UsersUserGetUserParamsSelectCustomSecurityAttributes              UsersUserGetUserParamsSelect = "customSecurityAttributes"
	UsersUserGetUserParamsSelectDeletedDateTime                       UsersUserGetUserParamsSelect = "deletedDateTime"
	UsersUserGetUserParamsSelectDepartment                            UsersUserGetUserParamsSelect = "department"
	UsersUserGetUserParamsSelectDeviceEnrollmentLimit                 UsersUserGetUserParamsSelect = "deviceEnrollmentLimit"
	UsersUserGetUserParamsSelectDeviceManagementTroubleshootingEvents UsersUserGetUserParamsSelect = "deviceManagementTroubleshootingEvents"
	UsersUserGetUserParamsSelectDirectReports                         UsersUserGetUserParamsSelect = "directReports"
	UsersUserGetUserParamsSelectDisplayName                           UsersUserGetUserParamsSelect = "displayName"
	UsersUserGetUserParamsSelectDrive                                 UsersUserGetUserParamsSelect = "drive"
	UsersUserGetUserParamsSelectDrives                                UsersUserGetUserParamsSelect = "drives"
	UsersUserGetUserParamsSelectEmployeeExperience                    UsersUserGetUserParamsSelect = "employeeExperience"
	UsersUserGetUserParamsSelectEmployeeHireDate                      UsersUserGetUserParamsSelect = "employeeHireDate"
	UsersUserGetUserParamsSelectEmployeeId                            UsersUserGetUserParamsSelect = "employeeId"
	UsersUserGetUserParamsSelectEmployeeLeaveDateTime                 UsersUserGetUserParamsSelect = "employeeLeaveDateTime"
	UsersUserGetUserParamsSelectEmployeeOrgData                       UsersUserGetUserParamsSelect = "employeeOrgData"
	UsersUserGetUserParamsSelectEmployeeType                          UsersUserGetUserParamsSelect = "employeeType"
	UsersUserGetUserParamsSelectEvents                                UsersUserGetUserParamsSelect = "events"
	UsersUserGetUserParamsSelectExtensions                            UsersUserGetUserParamsSelect = "extensions"
	UsersUserGetUserParamsSelectExternalUserState                     UsersUserGetUserParamsSelect = "externalUserState"
	UsersUserGetUserParamsSelectExternalUserStateChangeDateTime       UsersUserGetUserParamsSelect = "externalUserStateChangeDateTime"
	UsersUserGetUserParamsSelectFaxNumber                             UsersUserGetUserParamsSelect = "faxNumber"
	UsersUserGetUserParamsSelectFollowedSites                         UsersUserGetUserParamsSelect = "followedSites"
	UsersUserGetUserParamsSelectGivenName                             UsersUserGetUserParamsSelect = "givenName"
	UsersUserGetUserParamsSelectHireDate                              UsersUserGetUserParamsSelect = "hireDate"
	UsersUserGetUserParamsSelectId                                    UsersUserGetUserParamsSelect = "id"
	UsersUserGetUserParamsSelectIdentities                            UsersUserGetUserParamsSelect = "identities"
	UsersUserGetUserParamsSelectImAddresses                           UsersUserGetUserParamsSelect = "imAddresses"
	UsersUserGetUserParamsSelectInferenceClassification               UsersUserGetUserParamsSelect = "inferenceClassification"
	UsersUserGetUserParamsSelectInsights                              UsersUserGetUserParamsSelect = "insights"
	UsersUserGetUserParamsSelectInterests                             UsersUserGetUserParamsSelect = "interests"
	UsersUserGetUserParamsSelectIsResourceAccount                     UsersUserGetUserParamsSelect = "isResourceAccount"
	UsersUserGetUserParamsSelectJobTitle                              UsersUserGetUserParamsSelect = "jobTitle"
	UsersUserGetUserParamsSelectJoinedTeams                           UsersUserGetUserParamsSelect = "joinedTeams"
	UsersUserGetUserParamsSelectLastPasswordChangeDateTime            UsersUserGetUserParamsSelect = "lastPasswordChangeDateTime"
	UsersUserGetUserParamsSelectLegalAgeGroupClassification           UsersUserGetUserParamsSelect = "legalAgeGroupClassification"
	UsersUserGetUserParamsSelectLicenseAssignmentStates               UsersUserGetUserParamsSelect = "licenseAssignmentStates"
	UsersUserGetUserParamsSelectLicenseDetails                        UsersUserGetUserParamsSelect = "licenseDetails"
	UsersUserGetUserParamsSelectMail                                  UsersUserGetUserParamsSelect = "mail"
	UsersUserGetUserParamsSelectMailFolders                           UsersUserGetUserParamsSelect = "mailFolders"
	UsersUserGetUserParamsSelectMailNickname                          UsersUserGetUserParamsSelect = "mailNickname"
	UsersUserGetUserParamsSelectMailboxSettings                       UsersUserGetUserParamsSelect = "mailboxSettings"
	UsersUserGetUserParamsSelectManagedAppRegistrations               UsersUserGetUserParamsSelect = "managedAppRegistrations"
	UsersUserGetUserParamsSelectManagedDevices                        UsersUserGetUserParamsSelect = "managedDevices"
	UsersUserGetUserParamsSelectManager                               UsersUserGetUserParamsSelect = "manager"
	UsersUserGetUserParamsSelectMemberOf                              UsersUserGetUserParamsSelect = "memberOf"
	UsersUserGetUserParamsSelectMessages                              UsersUserGetUserParamsSelect = "messages"
	UsersUserGetUserParamsSelectMobilePhone                           UsersUserGetUserParamsSelect = "mobilePhone"
	UsersUserGetUserParamsSelectMySite                                UsersUserGetUserParamsSelect = "mySite"
	UsersUserGetUserParamsSelectOauth2PermissionGrants                UsersUserGetUserParamsSelect = "oauth2PermissionGrants"
	UsersUserGetUserParamsSelectOfficeLocation                        UsersUserGetUserParamsSelect = "officeLocation"
	UsersUserGetUserParamsSelectOnPremisesDistinguishedName           UsersUserGetUserParamsSelect = "onPremisesDistinguishedName"
	UsersUserGetUserParamsSelectOnPremisesDomainName                  UsersUserGetUserParamsSelect = "onPremisesDomainName"
	UsersUserGetUserParamsSelectOnPremisesExtensionAttributes         UsersUserGetUserParamsSelect = "onPremisesExtensionAttributes"
	UsersUserGetUserParamsSelectOnPremisesImmutableId                 UsersUserGetUserParamsSelect = "onPremisesImmutableId"
	UsersUserGetUserParamsSelectOnPremisesLastSyncDateTime            UsersUserGetUserParamsSelect = "onPremisesLastSyncDateTime"
	UsersUserGetUserParamsSelectOnPremisesProvisioningErrors          UsersUserGetUserParamsSelect = "onPremisesProvisioningErrors"
	UsersUserGetUserParamsSelectOnPremisesSamAccountName              UsersUserGetUserParamsSelect = "onPremisesSamAccountName"
	UsersUserGetUserParamsSelectOnPremisesSecurityIdentifier          UsersUserGetUserParamsSelect = "onPremisesSecurityIdentifier"
	UsersUserGetUserParamsSelectOnPremisesSyncEnabled                 UsersUserGetUserParamsSelect = "onPremisesSyncEnabled"
	UsersUserGetUserParamsSelectOnPremisesUserPrincipalName           UsersUserGetUserParamsSelect = "onPremisesUserPrincipalName"
	UsersUserGetUserParamsSelectOnenote                               UsersUserGetUserParamsSelect = "onenote"
	UsersUserGetUserParamsSelectOnlineMeetings                        UsersUserGetUserParamsSelect = "onlineMeetings"
	UsersUserGetUserParamsSelectOtherMails                            UsersUserGetUserParamsSelect = "otherMails"
	UsersUserGetUserParamsSelectOutlook                               UsersUserGetUserParamsSelect = "outlook"
	UsersUserGetUserParamsSelectOwnedDevices                          UsersUserGetUserParamsSelect = "ownedDevices"
	UsersUserGetUserParamsSelectOwnedObjects                          UsersUserGetUserParamsSelect = "ownedObjects"
	UsersUserGetUserParamsSelectPasswordPolicies                      UsersUserGetUserParamsSelect = "passwordPolicies"
	UsersUserGetUserParamsSelectPasswordProfile                       UsersUserGetUserParamsSelect = "passwordProfile"
	UsersUserGetUserParamsSelectPastProjects                          UsersUserGetUserParamsSelect = "pastProjects"
	UsersUserGetUserParamsSelectPeople                                UsersUserGetUserParamsSelect = "people"
	UsersUserGetUserParamsSelectPhoto                                 UsersUserGetUserParamsSelect = "photo"
	UsersUserGetUserParamsSelectPhotos                                UsersUserGetUserParamsSelect = "photos"
	UsersUserGetUserParamsSelectPlanner                               UsersUserGetUserParamsSelect = "planner"
	UsersUserGetUserParamsSelectPostalCode                            UsersUserGetUserParamsSelect = "postalCode"
	UsersUserGetUserParamsSelectPreferredDataLocation                 UsersUserGetUserParamsSelect = "preferredDataLocation"
	UsersUserGetUserParamsSelectPreferredLanguage                     UsersUserGetUserParamsSelect = "preferredLanguage"
	UsersUserGetUserParamsSelectPreferredName                         UsersUserGetUserParamsSelect = "preferredName"
	UsersUserGetUserParamsSelectPresence                              UsersUserGetUserParamsSelect = "presence"
	UsersUserGetUserParamsSelectPrint                                 UsersUserGetUserParamsSelect = "print"
	UsersUserGetUserParamsSelectProvisionedPlans                      UsersUserGetUserParamsSelect = "provisionedPlans"
	UsersUserGetUserParamsSelectProxyAddresses                        UsersUserGetUserParamsSelect = "proxyAddresses"
	UsersUserGetUserParamsSelectRegisteredDevices                     UsersUserGetUserParamsSelect = "registeredDevices"
	UsersUserGetUserParamsSelectResponsibilities                      UsersUserGetUserParamsSelect = "responsibilities"
	UsersUserGetUserParamsSelectSchools                               UsersUserGetUserParamsSelect = "schools"
	UsersUserGetUserParamsSelectScopedRoleMemberOf                    UsersUserGetUserParamsSelect = "scopedRoleMemberOf"
	UsersUserGetUserParamsSelectSecurityIdentifier                    UsersUserGetUserParamsSelect = "securityIdentifier"
	UsersUserGetUserParamsSelectSettings                              UsersUserGetUserParamsSelect = "settings"
	UsersUserGetUserParamsSelectShowInAddressList                     UsersUserGetUserParamsSelect = "showInAddressList"
	UsersUserGetUserParamsSelectSignInActivity                        UsersUserGetUserParamsSelect = "signInActivity"
	UsersUserGetUserParamsSelectSignInSessionsValidFromDateTime       UsersUserGetUserParamsSelect = "signInSessionsValidFromDateTime"
	UsersUserGetUserParamsSelectSkills                                UsersUserGetUserParamsSelect = "skills"
	UsersUserGetUserParamsSelectState                                 UsersUserGetUserParamsSelect = "state"
	UsersUserGetUserParamsSelectStreetAddress                         UsersUserGetUserParamsSelect = "streetAddress"
	UsersUserGetUserParamsSelectSurname                               UsersUserGetUserParamsSelect = "surname"
	UsersUserGetUserParamsSelectTeamwork                              UsersUserGetUserParamsSelect = "teamwork"
	UsersUserGetUserParamsSelectTodo                                  UsersUserGetUserParamsSelect = "todo"
	UsersUserGetUserParamsSelectTransitiveMemberOf                    UsersUserGetUserParamsSelect = "transitiveMemberOf"
	UsersUserGetUserParamsSelectUsageLocation                         UsersUserGetUserParamsSelect = "usageLocation"
	UsersUserGetUserParamsSelectUserPrincipalName                     UsersUserGetUserParamsSelect = "userPrincipalName"
	UsersUserGetUserParamsSelectUserType                              UsersUserGetUserParamsSelect = "userType"
)

// Defines values for UsersUserGetUserParamsExpand.
const (
	UsersUserGetUserParamsExpandActivities                            UsersUserGetUserParamsExpand = "activities"
	UsersUserGetUserParamsExpandAgreementAcceptances                  UsersUserGetUserParamsExpand = "agreementAcceptances"
	UsersUserGetUserParamsExpandAppRoleAssignments                    UsersUserGetUserParamsExpand = "appRoleAssignments"
	UsersUserGetUserParamsExpandAsterisk                              UsersUserGetUserParamsExpand = "*"
	UsersUserGetUserParamsExpandAuthentication                        UsersUserGetUserParamsExpand = "authentication"
	UsersUserGetUserParamsExpandCalendar                              UsersUserGetUserParamsExpand = "calendar"
	UsersUserGetUserParamsExpandCalendarGroups                        UsersUserGetUserParamsExpand = "calendarGroups"
	UsersUserGetUserParamsExpandCalendarView                          UsersUserGetUserParamsExpand = "calendarView"
	UsersUserGetUserParamsExpandCalendars                             UsersUserGetUserParamsExpand = "calendars"
	UsersUserGetUserParamsExpandChats                                 UsersUserGetUserParamsExpand = "chats"
	UsersUserGetUserParamsExpandContactFolders                        UsersUserGetUserParamsExpand = "contactFolders"
	UsersUserGetUserParamsExpandContacts                              UsersUserGetUserParamsExpand = "contacts"
	UsersUserGetUserParamsExpandCreatedObjects                        UsersUserGetUserParamsExpand = "createdObjects"
	UsersUserGetUserParamsExpandDeviceManagementTroubleshootingEvents UsersUserGetUserParamsExpand = "deviceManagementTroubleshootingEvents"
	UsersUserGetUserParamsExpandDirectReports                         UsersUserGetUserParamsExpand = "directReports"
	UsersUserGetUserParamsExpandDrive                                 UsersUserGetUserParamsExpand = "drive"
	UsersUserGetUserParamsExpandDrives                                UsersUserGetUserParamsExpand = "drives"
	UsersUserGetUserParamsExpandEmployeeExperience                    UsersUserGetUserParamsExpand = "employeeExperience"
	UsersUserGetUserParamsExpandEvents                                UsersUserGetUserParamsExpand = "events"
	UsersUserGetUserParamsExpandExtensions                            UsersUserGetUserParamsExpand = "extensions"
	UsersUserGetUserParamsExpandFollowedSites                         UsersUserGetUserParamsExpand = "followedSites"
	UsersUserGetUserParamsExpandInferenceClassification               UsersUserGetUserParamsExpand = "inferenceClassification"
	UsersUserGetUserParamsExpandInsights                              UsersUserGetUserParamsExpand = "insights"
	UsersUserGetUserParamsExpandJoinedTeams                           UsersUserGetUserParamsExpand = "joinedTeams"
	UsersUserGetUserParamsExpandLicenseDetails                        UsersUserGetUserParamsExpand = "licenseDetails"
	UsersUserGetUserParamsExpandMailFolders                           UsersUserGetUserParamsExpand = "mailFolders"
	UsersUserGetUserParamsExpandManagedAppRegistrations               UsersUserGetUserParamsExpand = "managedAppRegistrations"
	UsersUserGetUserParamsExpandManagedDevices                        UsersUserGetUserParamsExpand = "managedDevices"
	UsersUserGetUserParamsExpandManager                               UsersUserGetUserParamsExpand = "manager"
	UsersUserGetUserParamsExpandMemberOf                              UsersUserGetUserParamsExpand = "memberOf"
	UsersUserGetUserParamsExpandMessages                              UsersUserGetUserParamsExpand = "messages"
	UsersUserGetUserParamsExpandOauth2PermissionGrants                UsersUserGetUserParamsExpand = "oauth2PermissionGrants"
	UsersUserGetUserParamsExpandOnenote                               UsersUserGetUserParamsExpand = "onenote"
	UsersUserGetUserParamsExpandOnlineMeetings                        UsersUserGetUserParamsExpand = "onlineMeetings"
	UsersUserGetUserParamsExpandOutlook                               UsersUserGetUserParamsExpand = "outlook"
	UsersUserGetUserParamsExpandOwnedDevices                          UsersUserGetUserParamsExpand = "ownedDevices"
	UsersUserGetUserParamsExpandOwnedObjects                          UsersUserGetUserParamsExpand = "ownedObjects"
	UsersUserGetUserParamsExpandPeople                                UsersUserGetUserParamsExpand = "people"
	UsersUserGetUserParamsExpandPhoto                                 UsersUserGetUserParamsExpand = "photo"
	UsersUserGetUserParamsExpandPhotos                                UsersUserGetUserParamsExpand = "photos"
	UsersUserGetUserParamsExpandPlanner                               UsersUserGetUserParamsExpand = "planner"
	UsersUserGetUserParamsExpandPresence                              UsersUserGetUserParamsExpand = "presence"
	UsersUserGetUserParamsExpandRegisteredDevices                     UsersUserGetUserParamsExpand = "registeredDevices"
	UsersUserGetUserParamsExpandScopedRoleMemberOf                    UsersUserGetUserParamsExpand = "scopedRoleMemberOf"
	UsersUserGetUserParamsExpandSettings                              UsersUserGetUserParamsExpand = "settings"
	UsersUserGetUserParamsExpandTeamwork                              UsersUserGetUserParamsExpand = "teamwork"
	UsersUserGetUserParamsExpandTodo                                  UsersUserGetUserParamsExpand = "todo"
	UsersUserGetUserParamsExpandTransitiveMemberOf                    UsersUserGetUserParamsExpand = "transitiveMemberOf"
)

// Defines values for UsersListEventsParamsOrderby.
const (
	UsersListEventsParamsOrderbyAllowNewTimeProposals          UsersListEventsParamsOrderby = "allowNewTimeProposals"
	UsersListEventsParamsOrderbyAllowNewTimeProposalsDesc      UsersListEventsParamsOrderby = "allowNewTimeProposals desc"
	UsersListEventsParamsOrderbyAttendees                      UsersListEventsParamsOrderby = "attendees"
	UsersListEventsParamsOrderbyAttendeesDesc                  UsersListEventsParamsOrderby = "attendees desc"
	UsersListEventsParamsOrderbyBody                           UsersListEventsParamsOrderby = "body"
	UsersListEventsParamsOrderbyBodyDesc                       UsersListEventsParamsOrderby = "body desc"
	UsersListEventsParamsOrderbyBodyPreview                    UsersListEventsParamsOrderby = "bodyPreview"
	UsersListEventsParamsOrderbyBodyPreviewDesc                UsersListEventsParamsOrderby = "bodyPreview desc"
	UsersListEventsParamsOrderbyCategories                     UsersListEventsParamsOrderby = "categories"
	UsersListEventsParamsOrderbyCategoriesDesc                 UsersListEventsParamsOrderby = "categories desc"
	UsersListEventsParamsOrderbyChangeKey                      UsersListEventsParamsOrderby = "changeKey"
	UsersListEventsParamsOrderbyChangeKeyDesc                  UsersListEventsParamsOrderby = "changeKey desc"
	UsersListEventsParamsOrderbyCreatedDateTime                UsersListEventsParamsOrderby = "createdDateTime"
	UsersListEventsParamsOrderbyCreatedDateTimeDesc            UsersListEventsParamsOrderby = "createdDateTime desc"
	UsersListEventsParamsOrderbyEnd                            UsersListEventsParamsOrderby = "end"
	UsersListEventsParamsOrderbyEndDesc                        UsersListEventsParamsOrderby = "end desc"
	UsersListEventsParamsOrderbyHasAttachments                 UsersListEventsParamsOrderby = "hasAttachments"
	UsersListEventsParamsOrderbyHasAttachmentsDesc             UsersListEventsParamsOrderby = "hasAttachments desc"
	UsersListEventsParamsOrderbyHideAttendees                  UsersListEventsParamsOrderby = "hideAttendees"
	UsersListEventsParamsOrderbyHideAttendeesDesc              UsersListEventsParamsOrderby = "hideAttendees desc"
	UsersListEventsParamsOrderbyICalUId                        UsersListEventsParamsOrderby = "iCalUId"
	UsersListEventsParamsOrderbyICalUIdDesc                    UsersListEventsParamsOrderby = "iCalUId desc"
	UsersListEventsParamsOrderbyId                             UsersListEventsParamsOrderby = "id"
	UsersListEventsParamsOrderbyIdDesc                         UsersListEventsParamsOrderby = "id desc"
	UsersListEventsParamsOrderbyImportance                     UsersListEventsParamsOrderby = "importance"
	UsersListEventsParamsOrderbyImportanceDesc                 UsersListEventsParamsOrderby = "importance desc"
	UsersListEventsParamsOrderbyIsAllDay                       UsersListEventsParamsOrderby = "isAllDay"
	UsersListEventsParamsOrderbyIsAllDayDesc                   UsersListEventsParamsOrderby = "isAllDay desc"
	UsersListEventsParamsOrderbyIsCancelled                    UsersListEventsParamsOrderby = "isCancelled"
	UsersListEventsParamsOrderbyIsCancelledDesc                UsersListEventsParamsOrderby = "isCancelled desc"
	UsersListEventsParamsOrderbyIsDraft                        UsersListEventsParamsOrderby = "isDraft"
	UsersListEventsParamsOrderbyIsDraftDesc                    UsersListEventsParamsOrderby = "isDraft desc"
	UsersListEventsParamsOrderbyIsOnlineMeeting                UsersListEventsParamsOrderby = "isOnlineMeeting"
	UsersListEventsParamsOrderbyIsOnlineMeetingDesc            UsersListEventsParamsOrderby = "isOnlineMeeting desc"
	UsersListEventsParamsOrderbyIsOrganizer                    UsersListEventsParamsOrderby = "isOrganizer"
	UsersListEventsParamsOrderbyIsOrganizerDesc                UsersListEventsParamsOrderby = "isOrganizer desc"
	UsersListEventsParamsOrderbyIsReminderOn                   UsersListEventsParamsOrderby = "isReminderOn"
	UsersListEventsParamsOrderbyIsReminderOnDesc               UsersListEventsParamsOrderby = "isReminderOn desc"
	UsersListEventsParamsOrderbyLastModifiedDateTime           UsersListEventsParamsOrderby = "lastModifiedDateTime"
	UsersListEventsParamsOrderbyLastModifiedDateTimeDesc       UsersListEventsParamsOrderby = "lastModifiedDateTime desc"
	UsersListEventsParamsOrderbyLocation                       UsersListEventsParamsOrderby = "location"
	UsersListEventsParamsOrderbyLocationDesc                   UsersListEventsParamsOrderby = "location desc"
	UsersListEventsParamsOrderbyLocations                      UsersListEventsParamsOrderby = "locations"
	UsersListEventsParamsOrderbyLocationsDesc                  UsersListEventsParamsOrderby = "locations desc"
	UsersListEventsParamsOrderbyOnlineMeeting                  UsersListEventsParamsOrderby = "onlineMeeting"
	UsersListEventsParamsOrderbyOnlineMeetingDesc              UsersListEventsParamsOrderby = "onlineMeeting desc"
	UsersListEventsParamsOrderbyOnlineMeetingProvider          UsersListEventsParamsOrderby = "onlineMeetingProvider"
	UsersListEventsParamsOrderbyOnlineMeetingProviderDesc      UsersListEventsParamsOrderby = "onlineMeetingProvider desc"
	UsersListEventsParamsOrderbyOnlineMeetingUrl               UsersListEventsParamsOrderby = "onlineMeetingUrl"
	UsersListEventsParamsOrderbyOnlineMeetingUrlDesc           UsersListEventsParamsOrderby = "onlineMeetingUrl desc"
	UsersListEventsParamsOrderbyOrganizer                      UsersListEventsParamsOrderby = "organizer"
	UsersListEventsParamsOrderbyOrganizerDesc                  UsersListEventsParamsOrderby = "organizer desc"
	UsersListEventsParamsOrderbyOriginalEndTimeZone            UsersListEventsParamsOrderby = "originalEndTimeZone"
	UsersListEventsParamsOrderbyOriginalEndTimeZoneDesc        UsersListEventsParamsOrderby = "originalEndTimeZone desc"
	UsersListEventsParamsOrderbyOriginalStart                  UsersListEventsParamsOrderby = "originalStart"
	UsersListEventsParamsOrderbyOriginalStartDesc              UsersListEventsParamsOrderby = "originalStart desc"
	UsersListEventsParamsOrderbyOriginalStartTimeZone          UsersListEventsParamsOrderby = "originalStartTimeZone"
	UsersListEventsParamsOrderbyOriginalStartTimeZoneDesc      UsersListEventsParamsOrderby = "originalStartTimeZone desc"
	UsersListEventsParamsOrderbyRecurrence                     UsersListEventsParamsOrderby = "recurrence"
	UsersListEventsParamsOrderbyRecurrenceDesc                 UsersListEventsParamsOrderby = "recurrence desc"
	UsersListEventsParamsOrderbyReminderMinutesBeforeStart     UsersListEventsParamsOrderby = "reminderMinutesBeforeStart"
	UsersListEventsParamsOrderbyReminderMinutesBeforeStartDesc UsersListEventsParamsOrderby = "reminderMinutesBeforeStart desc"
	UsersListEventsParamsOrderbyResponseRequested              UsersListEventsParamsOrderby = "responseRequested"
	UsersListEventsParamsOrderbyResponseRequestedDesc          UsersListEventsParamsOrderby = "responseRequested desc"
	UsersListEventsParamsOrderbyResponseStatus                 UsersListEventsParamsOrderby = "responseStatus"
	UsersListEventsParamsOrderbyResponseStatusDesc             UsersListEventsParamsOrderby = "responseStatus desc"
	UsersListEventsParamsOrderbySensitivity                    UsersListEventsParamsOrderby = "sensitivity"
	UsersListEventsParamsOrderbySensitivityDesc                UsersListEventsParamsOrderby = "sensitivity desc"
	UsersListEventsParamsOrderbySeriesMasterId                 UsersListEventsParamsOrderby = "seriesMasterId"
	UsersListEventsParamsOrderbySeriesMasterIdDesc             UsersListEventsParamsOrderby = "seriesMasterId desc"
	UsersListEventsParamsOrderbyShowAs                         UsersListEventsParamsOrderby = "showAs"
	UsersListEventsParamsOrderbyShowAsDesc                     UsersListEventsParamsOrderby = "showAs desc"
	UsersListEventsParamsOrderbyStart                          UsersListEventsParamsOrderby = "start"
	UsersListEventsParamsOrderbyStartDesc                      UsersListEventsParamsOrderby = "start desc"
	UsersListEventsParamsOrderbySubject                        UsersListEventsParamsOrderby = "subject"
	UsersListEventsParamsOrderbySubjectDesc                    UsersListEventsParamsOrderby = "subject desc"
	UsersListEventsParamsOrderbyTransactionId                  UsersListEventsParamsOrderby = "transactionId"
	UsersListEventsParamsOrderbyTransactionIdDesc              UsersListEventsParamsOrderby = "transactionId desc"
	UsersListEventsParamsOrderbyType                           UsersListEventsParamsOrderby = "type"
	UsersListEventsParamsOrderbyTypeDesc                       UsersListEventsParamsOrderby = "type desc"
	UsersListEventsParamsOrderbyWebLink                        UsersListEventsParamsOrderby = "webLink"
	UsersListEventsParamsOrderbyWebLinkDesc                    UsersListEventsParamsOrderby = "webLink desc"
)

// Defines values for UsersListEventsParamsSelect.
const (
	UsersListEventsParamsSelectAllowNewTimeProposals         UsersListEventsParamsSelect = "allowNewTimeProposals"
	UsersListEventsParamsSelectAttachments                   UsersListEventsParamsSelect = "attachments"
	UsersListEventsParamsSelectAttendees                     UsersListEventsParamsSelect = "attendees"
	UsersListEventsParamsSelectBody                          UsersListEventsParamsSelect = "body"
	UsersListEventsParamsSelectBodyPreview                   UsersListEventsParamsSelect = "bodyPreview"
	UsersListEventsParamsSelectCalendar                      UsersListEventsParamsSelect = "calendar"
	UsersListEventsParamsSelectCategories                    UsersListEventsParamsSelect = "categories"
	UsersListEventsParamsSelectChangeKey                     UsersListEventsParamsSelect = "changeKey"
	UsersListEventsParamsSelectCreatedDateTime               UsersListEventsParamsSelect = "createdDateTime"
	UsersListEventsParamsSelectEnd                           UsersListEventsParamsSelect = "end"
	UsersListEventsParamsSelectExtensions                    UsersListEventsParamsSelect = "extensions"
	UsersListEventsParamsSelectHasAttachments                UsersListEventsParamsSelect = "hasAttachments"
	UsersListEventsParamsSelectHideAttendees                 UsersListEventsParamsSelect = "hideAttendees"
	UsersListEventsParamsSelectICalUId                       UsersListEventsParamsSelect = "iCalUId"
	UsersListEventsParamsSelectId                            UsersListEventsParamsSelect = "id"
	UsersListEventsParamsSelectImportance                    UsersListEventsParamsSelect = "importance"
	UsersListEventsParamsSelectInstances                     UsersListEventsParamsSelect = "instances"
	UsersListEventsParamsSelectIsAllDay                      UsersListEventsParamsSelect = "isAllDay"
	UsersListEventsParamsSelectIsCancelled                   UsersListEventsParamsSelect = "isCancelled"
	UsersListEventsParamsSelectIsDraft                       UsersListEventsParamsSelect = "isDraft"
	UsersListEventsParamsSelectIsOnlineMeeting               UsersListEventsParamsSelect = "isOnlineMeeting"
	UsersListEventsParamsSelectIsOrganizer                   UsersListEventsParamsSelect = "isOrganizer"
	UsersListEventsParamsSelectIsReminderOn                  UsersListEventsParamsSelect = "isReminderOn"
	UsersListEventsParamsSelectLastModifiedDateTime          UsersListEventsParamsSelect = "lastModifiedDateTime"
	UsersListEventsParamsSelectLocation                      UsersListEventsParamsSelect = "location"
	UsersListEventsParamsSelectLocations                     UsersListEventsParamsSelect = "locations"
	UsersListEventsParamsSelectMultiValueExtendedProperties  UsersListEventsParamsSelect = "multiValueExtendedProperties"
	UsersListEventsParamsSelectOnlineMeeting                 UsersListEventsParamsSelect = "onlineMeeting"
	UsersListEventsParamsSelectOnlineMeetingProvider         UsersListEventsParamsSelect = "onlineMeetingProvider"
	UsersListEventsParamsSelectOnlineMeetingUrl              UsersListEventsParamsSelect = "onlineMeetingUrl"
	UsersListEventsParamsSelectOrganizer                     UsersListEventsParamsSelect = "organizer"
	UsersListEventsParamsSelectOriginalEndTimeZone           UsersListEventsParamsSelect = "originalEndTimeZone"
	UsersListEventsParamsSelectOriginalStart                 UsersListEventsParamsSelect = "originalStart"
	UsersListEventsParamsSelectOriginalStartTimeZone         UsersListEventsParamsSelect = "originalStartTimeZone"
	UsersListEventsParamsSelectRecurrence                    UsersListEventsParamsSelect = "recurrence"
	UsersListEventsParamsSelectReminderMinutesBeforeStart    UsersListEventsParamsSelect = "reminderMinutesBeforeStart"
	UsersListEventsParamsSelectResponseRequested             UsersListEventsParamsSelect = "responseRequested"
	UsersListEventsParamsSelectResponseStatus                UsersListEventsParamsSelect = "responseStatus"
	UsersListEventsParamsSelectSensitivity                   UsersListEventsParamsSelect = "sensitivity"
	UsersListEventsParamsSelectSeriesMasterId                UsersListEventsParamsSelect = "seriesMasterId"
	UsersListEventsParamsSelectShowAs                        UsersListEventsParamsSelect = "showAs"
	UsersListEventsParamsSelectSingleValueExtendedProperties UsersListEventsParamsSelect = "singleValueExtendedProperties"
	UsersListEventsParamsSelectStart                         UsersListEventsParamsSelect = "start"
	UsersListEventsParamsSelectSubject                       UsersListEventsParamsSelect = "subject"
	UsersListEventsParamsSelectTransactionId                 UsersListEventsParamsSelect = "transactionId"
	UsersListEventsParamsSelectType                          UsersListEventsParamsSelect = "type"
	UsersListEventsParamsSelectWebLink                       UsersListEventsParamsSelect = "webLink"
)

// Defines values for UsersListEventsParamsExpand.
const (
	UsersListEventsParamsExpandAsterisk                      UsersListEventsParamsExpand = "*"
	UsersListEventsParamsExpandAttachments                   UsersListEventsParamsExpand = "attachments"
	UsersListEventsParamsExpandCalendar                      UsersListEventsParamsExpand = "calendar"
	UsersListEventsParamsExpandExtensions                    UsersListEventsParamsExpand = "extensions"
	UsersListEventsParamsExpandInstances                     UsersListEventsParamsExpand = "instances"
	UsersListEventsParamsExpandMultiValueExtendedProperties  UsersListEventsParamsExpand = "multiValueExtendedProperties"
	UsersListEventsParamsExpandSingleValueExtendedProperties UsersListEventsParamsExpand = "singleValueExtendedProperties"
)

// Defines values for UsersUserEventsDeltaParamsSelect.
const (
	UsersUserEventsDeltaParamsSelectAllowNewTimeProposals         UsersUserEventsDeltaParamsSelect = "allowNewTimeProposals"
	UsersUserEventsDeltaParamsSelectAttachments                   UsersUserEventsDeltaParamsSelect = "attachments"
	UsersUserEventsDeltaParamsSelectAttendees                     UsersUserEventsDeltaParamsSelect = "attendees"
	UsersUserEventsDeltaParamsSelectBody                          UsersUserEventsDeltaParamsSelect = "body"
	UsersUserEventsDeltaParamsSelectBodyPreview                   UsersUserEventsDeltaParamsSelect = "bodyPreview"
	UsersUserEventsDeltaParamsSelectCalendar                      UsersUserEventsDeltaParamsSelect = "calendar"
	UsersUserEventsDeltaParamsSelectCategories                    UsersUserEventsDeltaParamsSelect = "categories"
	UsersUserEventsDeltaParamsSelectChangeKey                     UsersUserEventsDeltaParamsSelect = "changeKey"
	UsersUserEventsDeltaParamsSelectCreatedDateTime               UsersUserEventsDeltaParamsSelect = "createdDateTime"
	UsersUserEventsDeltaParamsSelectEnd                           UsersUserEventsDeltaParamsSelect = "end"
	UsersUserEventsDeltaParamsSelectExtensions                    UsersUserEventsDeltaParamsSelect = "extensions"
	UsersUserEventsDeltaParamsSelectHasAttachments                UsersUserEventsDeltaParamsSelect = "hasAttachments"
	UsersUserEventsDeltaParamsSelectHideAttendees                 UsersUserEventsDeltaParamsSelect = "hideAttendees"
	UsersUserEventsDeltaParamsSelectICalUId                       UsersUserEventsDeltaParamsSelect = "iCalUId"
	UsersUserEventsDeltaParamsSelectId                            UsersUserEventsDeltaParamsSelect = "id"
	UsersUserEventsDeltaParamsSelectImportance                    UsersUserEventsDeltaParamsSelect = "importance"
	UsersUserEventsDeltaParamsSelectInstances                     UsersUserEventsDeltaParamsSelect = "instances"
	UsersUserEventsDeltaParamsSelectIsAllDay                      UsersUserEventsDeltaParamsSelect = "isAllDay"
	UsersUserEventsDeltaParamsSelectIsCancelled                   UsersUserEventsDeltaParamsSelect = "isCancelled"
	UsersUserEventsDeltaParamsSelectIsDraft                       UsersUserEventsDeltaParamsSelect = "isDraft"
	UsersUserEventsDeltaParamsSelectIsOnlineMeeting               UsersUserEventsDeltaParamsSelect = "isOnlineMeeting"
	UsersUserEventsDeltaParamsSelectIsOrganizer                   UsersUserEventsDeltaParamsSelect = "isOrganizer"
	UsersUserEventsDeltaParamsSelectIsReminderOn                  UsersUserEventsDeltaParamsSelect = "isReminderOn"
	UsersUserEventsDeltaParamsSelectLastModifiedDateTime          UsersUserEventsDeltaParamsSelect = "lastModifiedDateTime"
	UsersUserEventsDeltaParamsSelectLocation                      UsersUserEventsDeltaParamsSelect = "location"
	UsersUserEventsDeltaParamsSelectLocations                     UsersUserEventsDeltaParamsSelect = "locations"
	UsersUserEventsDeltaParamsSelectMultiValueExtendedProperties  UsersUserEventsDeltaParamsSelect = "multiValueExtendedProperties"
	UsersUserEventsDeltaParamsSelectOnlineMeeting                 UsersUserEventsDeltaParamsSelect = "onlineMeeting"
	UsersUserEventsDeltaParamsSelectOnlineMeetingProvider         UsersUserEventsDeltaParamsSelect = "onlineMeetingProvider"
	UsersUserEventsDeltaParamsSelectOnlineMeetingUrl              UsersUserEventsDeltaParamsSelect = "onlineMeetingUrl"
	UsersUserEventsDeltaParamsSelectOrganizer                     UsersUserEventsDeltaParamsSelect = "organizer"
	UsersUserEventsDeltaParamsSelectOriginalEndTimeZone           UsersUserEventsDeltaParamsSelect = "originalEndTimeZone"
	UsersUserEventsDeltaParamsSelectOriginalStart                 UsersUserEventsDeltaParamsSelect = "originalStart"
	UsersUserEventsDeltaParamsSelectOriginalStartTimeZone         UsersUserEventsDeltaParamsSelect = "originalStartTimeZone"
	UsersUserEventsDeltaParamsSelectRecurrence                    UsersUserEventsDeltaParamsSelect = "recurrence"
	UsersUserEventsDeltaParamsSelectReminderMinutesBeforeStart    UsersUserEventsDeltaParamsSelect = "reminderMinutesBeforeStart"
	UsersUserEventsDeltaParamsSelectResponseRequested             UsersUserEventsDeltaParamsSelect = "responseRequested"
	UsersUserEventsDeltaParamsSelectResponseStatus                UsersUserEventsDeltaParamsSelect = "responseStatus"
	UsersUserEventsDeltaParamsSelectSensitivity                   UsersUserEventsDeltaParamsSelect = "sensitivity"
	UsersUserEventsDeltaParamsSelectSeriesMasterId                UsersUserEventsDeltaParamsSelect = "seriesMasterId"
	UsersUserEventsDeltaParamsSelectShowAs                        UsersUserEventsDeltaParamsSelect = "showAs"
	UsersUserEventsDeltaParamsSelectSingleValueExtendedProperties UsersUserEventsDeltaParamsSelect = "singleValueExtendedProperties"
	UsersUserEventsDeltaParamsSelectStart                         UsersUserEventsDeltaParamsSelect = "start"
	UsersUserEventsDeltaParamsSelectSubject                       UsersUserEventsDeltaParamsSelect = "subject"
	UsersUserEventsDeltaParamsSelectTransactionId                 UsersUserEventsDeltaParamsSelect = "transactionId"
	UsersUserEventsDeltaParamsSelectType                          UsersUserEventsDeltaParamsSelect = "type"
	UsersUserEventsDeltaParamsSelectWebLink                       UsersUserEventsDeltaParamsSelect = "webLink"
)

// Defines values for UsersUserEventsDeltaParamsOrderby.
const (
	UsersUserEventsDeltaParamsOrderbyAllowNewTimeProposals          UsersUserEventsDeltaParamsOrderby = "allowNewTimeProposals"
	UsersUserEventsDeltaParamsOrderbyAllowNewTimeProposalsDesc      UsersUserEventsDeltaParamsOrderby = "allowNewTimeProposals desc"
	UsersUserEventsDeltaParamsOrderbyAttendees                      UsersUserEventsDeltaParamsOrderby = "attendees"
	UsersUserEventsDeltaParamsOrderbyAttendeesDesc                  UsersUserEventsDeltaParamsOrderby = "attendees desc"
	UsersUserEventsDeltaParamsOrderbyBody                           UsersUserEventsDeltaParamsOrderby = "body"
	UsersUserEventsDeltaParamsOrderbyBodyDesc                       UsersUserEventsDeltaParamsOrderby = "body desc"
	UsersUserEventsDeltaParamsOrderbyBodyPreview                    UsersUserEventsDeltaParamsOrderby = "bodyPreview"
	UsersUserEventsDeltaParamsOrderbyBodyPreviewDesc                UsersUserEventsDeltaParamsOrderby = "bodyPreview desc"
	UsersUserEventsDeltaParamsOrderbyCategories                     UsersUserEventsDeltaParamsOrderby = "categories"
	UsersUserEventsDeltaParamsOrderbyCategoriesDesc                 UsersUserEventsDeltaParamsOrderby = "categories desc"
	UsersUserEventsDeltaParamsOrderbyChangeKey                      UsersUserEventsDeltaParamsOrderby = "changeKey"
	UsersUserEventsDeltaParamsOrderbyChangeKeyDesc                  UsersUserEventsDeltaParamsOrderby = "changeKey desc"
	UsersUserEventsDeltaParamsOrderbyCreatedDateTime                UsersUserEventsDeltaParamsOrderby = "createdDateTime"
	UsersUserEventsDeltaParamsOrderbyCreatedDateTimeDesc            UsersUserEventsDeltaParamsOrderby = "createdDateTime desc"
	UsersUserEventsDeltaParamsOrderbyEnd                            UsersUserEventsDeltaParamsOrderby = "end"
	UsersUserEventsDeltaParamsOrderbyEndDesc                        UsersUserEventsDeltaParamsOrderby = "end desc"
	UsersUserEventsDeltaParamsOrderbyHasAttachments                 UsersUserEventsDeltaParamsOrderby = "hasAttachments"
	UsersUserEventsDeltaParamsOrderbyHasAttachmentsDesc             UsersUserEventsDeltaParamsOrderby = "hasAttachments desc"
	UsersUserEventsDeltaParamsOrderbyHideAttendees                  UsersUserEventsDeltaParamsOrderby = "hideAttendees"
	UsersUserEventsDeltaParamsOrderbyHideAttendeesDesc              UsersUserEventsDeltaParamsOrderby = "hideAttendees desc"
	UsersUserEventsDeltaParamsOrderbyICalUId                        UsersUserEventsDeltaParamsOrderby = "iCalUId"
	UsersUserEventsDeltaParamsOrderbyICalUIdDesc                    UsersUserEventsDeltaParamsOrderby = "iCalUId desc"
	UsersUserEventsDeltaParamsOrderbyId                             UsersUserEventsDeltaParamsOrderby = "id"
	UsersUserEventsDeltaParamsOrderbyIdDesc                         UsersUserEventsDeltaParamsOrderby = "id desc"
	UsersUserEventsDeltaParamsOrderbyImportance                     UsersUserEventsDeltaParamsOrderby = "importance"
	UsersUserEventsDeltaParamsOrderbyImportanceDesc                 UsersUserEventsDeltaParamsOrderby = "importance desc"
	UsersUserEventsDeltaParamsOrderbyIsAllDay                       UsersUserEventsDeltaParamsOrderby = "isAllDay"
	UsersUserEventsDeltaParamsOrderbyIsAllDayDesc                   UsersUserEventsDeltaParamsOrderby = "isAllDay desc"
	UsersUserEventsDeltaParamsOrderbyIsCancelled                    UsersUserEventsDeltaParamsOrderby = "isCancelled"
	UsersUserEventsDeltaParamsOrderbyIsCancelledDesc                UsersUserEventsDeltaParamsOrderby = "isCancelled desc"
	UsersUserEventsDeltaParamsOrderbyIsDraft                        UsersUserEventsDeltaParamsOrderby = "isDraft"
	UsersUserEventsDeltaParamsOrderbyIsDraftDesc                    UsersUserEventsDeltaParamsOrderby = "isDraft desc"
	UsersUserEventsDeltaParamsOrderbyIsOnlineMeeting                UsersUserEventsDeltaParamsOrderby = "isOnlineMeeting"
	UsersUserEventsDeltaParamsOrderbyIsOnlineMeetingDesc            UsersUserEventsDeltaParamsOrderby = "isOnlineMeeting desc"
	UsersUserEventsDeltaParamsOrderbyIsOrganizer                    UsersUserEventsDeltaParamsOrderby = "isOrganizer"
	UsersUserEventsDeltaParamsOrderbyIsOrganizerDesc                UsersUserEventsDeltaParamsOrderby = "isOrganizer desc"
	UsersUserEventsDeltaParamsOrderbyIsReminderOn                   UsersUserEventsDeltaParamsOrderby = "isReminderOn"
	UsersUserEventsDeltaParamsOrderbyIsReminderOnDesc               UsersUserEventsDeltaParamsOrderby = "isReminderOn desc"
	UsersUserEventsDeltaParamsOrderbyLastModifiedDateTime           UsersUserEventsDeltaParamsOrderby = "lastModifiedDateTime"
	UsersUserEventsDeltaParamsOrderbyLastModifiedDateTimeDesc       UsersUserEventsDeltaParamsOrderby = "lastModifiedDateTime desc"
	UsersUserEventsDeltaParamsOrderbyLocation                       UsersUserEventsDeltaParamsOrderby = "location"
	UsersUserEventsDeltaParamsOrderbyLocationDesc                   UsersUserEventsDeltaParamsOrderby = "location desc"
	UsersUserEventsDeltaParamsOrderbyLocations                      UsersUserEventsDeltaParamsOrderby = "locations"
	UsersUserEventsDeltaParamsOrderbyLocationsDesc                  UsersUserEventsDeltaParamsOrderby = "locations desc"
	UsersUserEventsDeltaParamsOrderbyOnlineMeeting                  UsersUserEventsDeltaParamsOrderby = "onlineMeeting"
	UsersUserEventsDeltaParamsOrderbyOnlineMeetingDesc              UsersUserEventsDeltaParamsOrderby = "onlineMeeting desc"
	UsersUserEventsDeltaParamsOrderbyOnlineMeetingProvider          UsersUserEventsDeltaParamsOrderby = "onlineMeetingProvider"
	UsersUserEventsDeltaParamsOrderbyOnlineMeetingProviderDesc      UsersUserEventsDeltaParamsOrderby = "onlineMeetingProvider desc"
	UsersUserEventsDeltaParamsOrderbyOnlineMeetingUrl               UsersUserEventsDeltaParamsOrderby = "onlineMeetingUrl"
	UsersUserEventsDeltaParamsOrderbyOnlineMeetingUrlDesc           UsersUserEventsDeltaParamsOrderby = "onlineMeetingUrl desc"
	UsersUserEventsDeltaParamsOrderbyOrganizer                      UsersUserEventsDeltaParamsOrderby = "organizer"
	UsersUserEventsDeltaParamsOrderbyOrganizerDesc                  UsersUserEventsDeltaParamsOrderby = "organizer desc"
	UsersUserEventsDeltaParamsOrderbyOriginalEndTimeZone            UsersUserEventsDeltaParamsOrderby = "originalEndTimeZone"
	UsersUserEventsDeltaParamsOrderbyOriginalEndTimeZoneDesc        UsersUserEventsDeltaParamsOrderby = "originalEndTimeZone desc"
	UsersUserEventsDeltaParamsOrderbyOriginalStart                  UsersUserEventsDeltaParamsOrderby = "originalStart"
	UsersUserEventsDeltaParamsOrderbyOriginalStartDesc              UsersUserEventsDeltaParamsOrderby = "originalStart desc"
	UsersUserEventsDeltaParamsOrderbyOriginalStartTimeZone          UsersUserEventsDeltaParamsOrderby = "originalStartTimeZone"
	UsersUserEventsDeltaParamsOrderbyOriginalStartTimeZoneDesc      UsersUserEventsDeltaParamsOrderby = "originalStartTimeZone desc"
	UsersUserEventsDeltaParamsOrderbyRecurrence                     UsersUserEventsDeltaParamsOrderby = "recurrence"
	UsersUserEventsDeltaParamsOrderbyRecurrenceDesc                 UsersUserEventsDeltaParamsOrderby = "recurrence desc"
	UsersUserEventsDeltaParamsOrderbyReminderMinutesBeforeStart     UsersUserEventsDeltaParamsOrderby = "reminderMinutesBeforeStart"
	UsersUserEventsDeltaParamsOrderbyReminderMinutesBeforeStartDesc UsersUserEventsDeltaParamsOrderby = "reminderMinutesBeforeStart desc"
	UsersUserEventsDeltaParamsOrderbyResponseRequested              UsersUserEventsDeltaParamsOrderby = "responseRequested"
	UsersUserEventsDeltaParamsOrderbyResponseRequestedDesc          UsersUserEventsDeltaParamsOrderby = "responseRequested desc"
	UsersUserEventsDeltaParamsOrderbyResponseStatus                 UsersUserEventsDeltaParamsOrderby = "responseStatus"
	UsersUserEventsDeltaParamsOrderbyResponseStatusDesc             UsersUserEventsDeltaParamsOrderby = "responseStatus desc"
	UsersUserEventsDeltaParamsOrderbySensitivity                    UsersUserEventsDeltaParamsOrderby = "sensitivity"
	UsersUserEventsDeltaParamsOrderbySensitivityDesc                UsersUserEventsDeltaParamsOrderby = "sensitivity desc"
	UsersUserEventsDeltaParamsOrderbySeriesMasterId                 UsersUserEventsDeltaParamsOrderby = "seriesMasterId"
	UsersUserEventsDeltaParamsOrderbySeriesMasterIdDesc             UsersUserEventsDeltaParamsOrderby = "seriesMasterId desc"
	UsersUserEventsDeltaParamsOrderbyShowAs                         UsersUserEventsDeltaParamsOrderby = "showAs"
	UsersUserEventsDeltaParamsOrderbyShowAsDesc                     UsersUserEventsDeltaParamsOrderby = "showAs desc"
	UsersUserEventsDeltaParamsOrderbyStart                          UsersUserEventsDeltaParamsOrderby = "start"
	UsersUserEventsDeltaParamsOrderbyStartDesc                      UsersUserEventsDeltaParamsOrderby = "start desc"
	UsersUserEventsDeltaParamsOrderbySubject                        UsersUserEventsDeltaParamsOrderby = "subject"
	UsersUserEventsDeltaParamsOrderbySubjectDesc                    UsersUserEventsDeltaParamsOrderby = "subject desc"
	UsersUserEventsDeltaParamsOrderbyTransactionId                  UsersUserEventsDeltaParamsOrderby = "transactionId"
	UsersUserEventsDeltaParamsOrderbyTransactionIdDesc              UsersUserEventsDeltaParamsOrderby = "transactionId desc"
	UsersUserEventsDeltaParamsOrderbyType                           UsersUserEventsDeltaParamsOrderby = "type"
	UsersUserEventsDeltaParamsOrderbyTypeDesc                       UsersUserEventsDeltaParamsOrderby = "type desc"
	UsersUserEventsDeltaParamsOrderbyWebLink                        UsersUserEventsDeltaParamsOrderby = "webLink"
	UsersUserEventsDeltaParamsOrderbyWebLinkDesc                    UsersUserEventsDeltaParamsOrderby = "webLink desc"
)

// Defines values for UsersGetEventsParamsSelect.
const (
	UsersGetEventsParamsSelectAllowNewTimeProposals         UsersGetEventsParamsSelect = "allowNewTimeProposals"
	UsersGetEventsParamsSelectAttachments                   UsersGetEventsParamsSelect = "attachments"
	UsersGetEventsParamsSelectAttendees                     UsersGetEventsParamsSelect = "attendees"
	UsersGetEventsParamsSelectBody                          UsersGetEventsParamsSelect = "body"
	UsersGetEventsParamsSelectBodyPreview                   UsersGetEventsParamsSelect = "bodyPreview"
	UsersGetEventsParamsSelectCalendar                      UsersGetEventsParamsSelect = "calendar"
	UsersGetEventsParamsSelectCategories                    UsersGetEventsParamsSelect = "categories"
	UsersGetEventsParamsSelectChangeKey                     UsersGetEventsParamsSelect = "changeKey"
	UsersGetEventsParamsSelectCreatedDateTime               UsersGetEventsParamsSelect = "createdDateTime"
	UsersGetEventsParamsSelectEnd                           UsersGetEventsParamsSelect = "end"
	UsersGetEventsParamsSelectExtensions                    UsersGetEventsParamsSelect = "extensions"
	UsersGetEventsParamsSelectHasAttachments                UsersGetEventsParamsSelect = "hasAttachments"
	UsersGetEventsParamsSelectHideAttendees                 UsersGetEventsParamsSelect = "hideAttendees"
	UsersGetEventsParamsSelectICalUId                       UsersGetEventsParamsSelect = "iCalUId"
	UsersGetEventsParamsSelectId                            UsersGetEventsParamsSelect = "id"
	UsersGetEventsParamsSelectImportance                    UsersGetEventsParamsSelect = "importance"
	UsersGetEventsParamsSelectInstances                     UsersGetEventsParamsSelect = "instances"
	UsersGetEventsParamsSelectIsAllDay                      UsersGetEventsParamsSelect = "isAllDay"
	UsersGetEventsParamsSelectIsCancelled                   UsersGetEventsParamsSelect = "isCancelled"
	UsersGetEventsParamsSelectIsDraft                       UsersGetEventsParamsSelect = "isDraft"
	UsersGetEventsParamsSelectIsOnlineMeeting               UsersGetEventsParamsSelect = "isOnlineMeeting"
	UsersGetEventsParamsSelectIsOrganizer                   UsersGetEventsParamsSelect = "isOrganizer"
	UsersGetEventsParamsSelectIsReminderOn                  UsersGetEventsParamsSelect = "isReminderOn"
	UsersGetEventsParamsSelectLastModifiedDateTime          UsersGetEventsParamsSelect = "lastModifiedDateTime"
	UsersGetEventsParamsSelectLocation                      UsersGetEventsParamsSelect = "location"
	UsersGetEventsParamsSelectLocations                     UsersGetEventsParamsSelect = "locations"
	UsersGetEventsParamsSelectMultiValueExtendedProperties  UsersGetEventsParamsSelect = "multiValueExtendedProperties"
	UsersGetEventsParamsSelectOnlineMeeting                 UsersGetEventsParamsSelect = "onlineMeeting"
	UsersGetEventsParamsSelectOnlineMeetingProvider         UsersGetEventsParamsSelect = "onlineMeetingProvider"
	UsersGetEventsParamsSelectOnlineMeetingUrl              UsersGetEventsParamsSelect = "onlineMeetingUrl"
	UsersGetEventsParamsSelectOrganizer                     UsersGetEventsParamsSelect = "organizer"
	UsersGetEventsParamsSelectOriginalEndTimeZone           UsersGetEventsParamsSelect = "originalEndTimeZone"
	UsersGetEventsParamsSelectOriginalStart                 UsersGetEventsParamsSelect = "originalStart"
	UsersGetEventsParamsSelectOriginalStartTimeZone         UsersGetEventsParamsSelect = "originalStartTimeZone"
	UsersGetEventsParamsSelectRecurrence                    UsersGetEventsParamsSelect = "recurrence"
	UsersGetEventsParamsSelectReminderMinutesBeforeStart    UsersGetEventsParamsSelect = "reminderMinutesBeforeStart"
	UsersGetEventsParamsSelectResponseRequested             UsersGetEventsParamsSelect = "responseRequested"
	UsersGetEventsParamsSelectResponseStatus                UsersGetEventsParamsSelect = "responseStatus"
	UsersGetEventsParamsSelectSensitivity                   UsersGetEventsParamsSelect = "sensitivity"
	UsersGetEventsParamsSelectSeriesMasterId                UsersGetEventsParamsSelect = "seriesMasterId"
	UsersGetEventsParamsSelectShowAs                        UsersGetEventsParamsSelect = "showAs"
	UsersGetEventsParamsSelectSingleValueExtendedProperties UsersGetEventsParamsSelect = "singleValueExtendedProperties"
	UsersGetEventsParamsSelectStart                         UsersGetEventsParamsSelect = "start"
	UsersGetEventsParamsSelectSubject                       UsersGetEventsParamsSelect = "subject"
	UsersGetEventsParamsSelectTransactionId                 UsersGetEventsParamsSelect = "transactionId"
	UsersGetEventsParamsSelectType                          UsersGetEventsParamsSelect = "type"
	UsersGetEventsParamsSelectWebLink                       UsersGetEventsParamsSelect = "webLink"
)

// Defines values for UsersGetEventsParamsExpand.
const (
	UsersGetEventsParamsExpandAsterisk                      UsersGetEventsParamsExpand = "*"
	UsersGetEventsParamsExpandAttachments                   UsersGetEventsParamsExpand = "attachments"
	UsersGetEventsParamsExpandCalendar                      UsersGetEventsParamsExpand = "calendar"
	UsersGetEventsParamsExpandExtensions                    UsersGetEventsParamsExpand = "extensions"
	UsersGetEventsParamsExpandInstances                     UsersGetEventsParamsExpand = "instances"
	UsersGetEventsParamsExpandMultiValueExtendedProperties  UsersGetEventsParamsExpand = "multiValueExtendedProperties"
	UsersGetEventsParamsExpandSingleValueExtendedProperties UsersGetEventsParamsExpand = "singleValueExtendedProperties"
)

// Defines values for UsersEventsListAttachmentsParamsOrderby.
const (
	UsersEventsListAttachmentsParamsOrderbyContentType              UsersEventsListAttachmentsParamsOrderby = "contentType"
	UsersEventsListAttachmentsParamsOrderbyContentTypeDesc          UsersEventsListAttachmentsParamsOrderby = "contentType desc"
	UsersEventsListAttachmentsParamsOrderbyId                       UsersEventsListAttachmentsParamsOrderby = "id"
	UsersEventsListAttachmentsParamsOrderbyIdDesc                   UsersEventsListAttachmentsParamsOrderby = "id desc"
	UsersEventsListAttachmentsParamsOrderbyIsInline                 UsersEventsListAttachmentsParamsOrderby = "isInline"
	UsersEventsListAttachmentsParamsOrderbyIsInlineDesc             UsersEventsListAttachmentsParamsOrderby = "isInline desc"
	UsersEventsListAttachmentsParamsOrderbyLastModifiedDateTime     UsersEventsListAttachmentsParamsOrderby = "lastModifiedDateTime"
	UsersEventsListAttachmentsParamsOrderbyLastModifiedDateTimeDesc UsersEventsListAttachmentsParamsOrderby = "lastModifiedDateTime desc"
	UsersEventsListAttachmentsParamsOrderbyName                     UsersEventsListAttachmentsParamsOrderby = "name"
	UsersEventsListAttachmentsParamsOrderbyNameDesc                 UsersEventsListAttachmentsParamsOrderby = "name desc"
	UsersEventsListAttachmentsParamsOrderbySize                     UsersEventsListAttachmentsParamsOrderby = "size"
	UsersEventsListAttachmentsParamsOrderbySizeDesc                 UsersEventsListAttachmentsParamsOrderby = "size desc"
)

// Defines values for UsersEventsListAttachmentsParamsSelect.
const (
	UsersEventsListAttachmentsParamsSelectContentType          UsersEventsListAttachmentsParamsSelect = "contentType"
	UsersEventsListAttachmentsParamsSelectId                   UsersEventsListAttachmentsParamsSelect = "id"
	UsersEventsListAttachmentsParamsSelectIsInline             UsersEventsListAttachmentsParamsSelect = "isInline"
	UsersEventsListAttachmentsParamsSelectLastModifiedDateTime UsersEventsListAttachmentsParamsSelect = "lastModifiedDateTime"
	UsersEventsListAttachmentsParamsSelectName                 UsersEventsListAttachmentsParamsSelect = "name"
	UsersEventsListAttachmentsParamsSelectSize                 UsersEventsListAttachmentsParamsSelect = "size"
)

// Defines values for UsersEventsListAttachmentsParamsExpand.
const (
	UsersEventsListAttachmentsParamsExpandAsterisk UsersEventsListAttachmentsParamsExpand = "*"
)

// Defines values for UsersEventsGetAttachmentsParamsSelect.
const (
	UsersEventsGetAttachmentsParamsSelectContentType          UsersEventsGetAttachmentsParamsSelect = "contentType"
	UsersEventsGetAttachmentsParamsSelectId                   UsersEventsGetAttachmentsParamsSelect = "id"
	UsersEventsGetAttachmentsParamsSelectIsInline             UsersEventsGetAttachmentsParamsSelect = "isInline"
	UsersEventsGetAttachmentsParamsSelectLastModifiedDateTime UsersEventsGetAttachmentsParamsSelect = "lastModifiedDateTime"
	UsersEventsGetAttachmentsParamsSelectName                 UsersEventsGetAttachmentsParamsSelect = "name"
	UsersEventsGetAttachmentsParamsSelectSize                 UsersEventsGetAttachmentsParamsSelect = "size"
)

// Defines values for UsersEventsGetAttachmentsParamsExpand.
const (
	UsersEventsGetAttachmentsParamsExpandAsterisk UsersEventsGetAttachmentsParamsExpand = "*"
)

// Defines values for UsersEventsGetCalendarParamsSelect.
const (
	UsersEventsGetCalendarParamsSelectAllowedOnlineMeetingProviders UsersEventsGetCalendarParamsSelect = "allowedOnlineMeetingProviders"
	UsersEventsGetCalendarParamsSelectCalendarPermissions           UsersEventsGetCalendarParamsSelect = "calendarPermissions"
	UsersEventsGetCalendarParamsSelectCalendarView                  UsersEventsGetCalendarParamsSelect = "calendarView"
	UsersEventsGetCalendarParamsSelectCanEdit                       UsersEventsGetCalendarParamsSelect = "canEdit"
	UsersEventsGetCalendarParamsSelectCanShare                      UsersEventsGetCalendarParamsSelect = "canShare"
	UsersEventsGetCalendarParamsSelectCanViewPrivateItems           UsersEventsGetCalendarParamsSelect = "canViewPrivateItems"
	UsersEventsGetCalendarParamsSelectChangeKey                     UsersEventsGetCalendarParamsSelect = "changeKey"
	UsersEventsGetCalendarParamsSelectColor                         UsersEventsGetCalendarParamsSelect = "color"
	UsersEventsGetCalendarParamsSelectDefaultOnlineMeetingProvider  UsersEventsGetCalendarParamsSelect = "defaultOnlineMeetingProvider"
	UsersEventsGetCalendarParamsSelectEvents                        UsersEventsGetCalendarParamsSelect = "events"
	UsersEventsGetCalendarParamsSelectHexColor                      UsersEventsGetCalendarParamsSelect = "hexColor"
	UsersEventsGetCalendarParamsSelectId                            UsersEventsGetCalendarParamsSelect = "id"
	UsersEventsGetCalendarParamsSelectIsDefaultCalendar             UsersEventsGetCalendarParamsSelect = "isDefaultCalendar"
	UsersEventsGetCalendarParamsSelectIsRemovable                   UsersEventsGetCalendarParamsSelect = "isRemovable"
	UsersEventsGetCalendarParamsSelectIsTallyingResponses           UsersEventsGetCalendarParamsSelect = "isTallyingResponses"
	UsersEventsGetCalendarParamsSelectMultiValueExtendedProperties  UsersEventsGetCalendarParamsSelect = "multiValueExtendedProperties"
	UsersEventsGetCalendarParamsSelectName                          UsersEventsGetCalendarParamsSelect = "name"
	UsersEventsGetCalendarParamsSelectOwner                         UsersEventsGetCalendarParamsSelect = "owner"
	UsersEventsGetCalendarParamsSelectSingleValueExtendedProperties UsersEventsGetCalendarParamsSelect = "singleValueExtendedProperties"
)

// Defines values for UsersEventsListExtensionsParamsOrderby.
const (
	UsersEventsListExtensionsParamsOrderbyId     UsersEventsListExtensionsParamsOrderby = "id"
	UsersEventsListExtensionsParamsOrderbyIdDesc UsersEventsListExtensionsParamsOrderby = "id desc"
)

// Defines values for UsersEventsListExtensionsParamsSelect.
const (
	UsersEventsListExtensionsParamsSelectId UsersEventsListExtensionsParamsSelect = "id"
)

// Defines values for UsersEventsListExtensionsParamsExpand.
const (
	UsersEventsListExtensionsParamsExpandAsterisk UsersEventsListExtensionsParamsExpand = "*"
)

// Defines values for UsersEventsGetExtensionsParamsSelect.
const (
	UsersEventsGetExtensionsParamsSelectId UsersEventsGetExtensionsParamsSelect = "id"
)

// Defines values for UsersEventsGetExtensionsParamsExpand.
const (
	UsersEventsGetExtensionsParamsExpandAsterisk UsersEventsGetExtensionsParamsExpand = "*"
)

// Defines values for UsersEventsListInstancesParamsOrderby.
const (
	UsersEventsListInstancesParamsOrderbyAllowNewTimeProposals          UsersEventsListInstancesParamsOrderby = "allowNewTimeProposals"
	UsersEventsListInstancesParamsOrderbyAllowNewTimeProposalsDesc      UsersEventsListInstancesParamsOrderby = "allowNewTimeProposals desc"
	UsersEventsListInstancesParamsOrderbyAttendees                      UsersEventsListInstancesParamsOrderby = "attendees"
	UsersEventsListInstancesParamsOrderbyAttendeesDesc                  UsersEventsListInstancesParamsOrderby = "attendees desc"
	UsersEventsListInstancesParamsOrderbyBody                           UsersEventsListInstancesParamsOrderby = "body"
	UsersEventsListInstancesParamsOrderbyBodyDesc                       UsersEventsListInstancesParamsOrderby = "body desc"
	UsersEventsListInstancesParamsOrderbyBodyPreview                    UsersEventsListInstancesParamsOrderby = "bodyPreview"
	UsersEventsListInstancesParamsOrderbyBodyPreviewDesc                UsersEventsListInstancesParamsOrderby = "bodyPreview desc"
	UsersEventsListInstancesParamsOrderbyCategories                     UsersEventsListInstancesParamsOrderby = "categories"
	UsersEventsListInstancesParamsOrderbyCategoriesDesc                 UsersEventsListInstancesParamsOrderby = "categories desc"
	UsersEventsListInstancesParamsOrderbyChangeKey                      UsersEventsListInstancesParamsOrderby = "changeKey"
	UsersEventsListInstancesParamsOrderbyChangeKeyDesc                  UsersEventsListInstancesParamsOrderby = "changeKey desc"
	UsersEventsListInstancesParamsOrderbyCreatedDateTime                UsersEventsListInstancesParamsOrderby = "createdDateTime"
	UsersEventsListInstancesParamsOrderbyCreatedDateTimeDesc            UsersEventsListInstancesParamsOrderby = "createdDateTime desc"
	UsersEventsListInstancesParamsOrderbyEnd                            UsersEventsListInstancesParamsOrderby = "end"
	UsersEventsListInstancesParamsOrderbyEndDesc                        UsersEventsListInstancesParamsOrderby = "end desc"
	UsersEventsListInstancesParamsOrderbyHasAttachments                 UsersEventsListInstancesParamsOrderby = "hasAttachments"
	UsersEventsListInstancesParamsOrderbyHasAttachmentsDesc             UsersEventsListInstancesParamsOrderby = "hasAttachments desc"
	UsersEventsListInstancesParamsOrderbyHideAttendees                  UsersEventsListInstancesParamsOrderby = "hideAttendees"
	UsersEventsListInstancesParamsOrderbyHideAttendeesDesc              UsersEventsListInstancesParamsOrderby = "hideAttendees desc"
	UsersEventsListInstancesParamsOrderbyICalUId                        UsersEventsListInstancesParamsOrderby = "iCalUId"
	UsersEventsListInstancesParamsOrderbyICalUIdDesc                    UsersEventsListInstancesParamsOrderby = "iCalUId desc"
	UsersEventsListInstancesParamsOrderbyId                             UsersEventsListInstancesParamsOrderby = "id"
	UsersEventsListInstancesParamsOrderbyIdDesc                         UsersEventsListInstancesParamsOrderby = "id desc"
	UsersEventsListInstancesParamsOrderbyImportance                     UsersEventsListInstancesParamsOrderby = "importance"
	UsersEventsListInstancesParamsOrderbyImportanceDesc                 UsersEventsListInstancesParamsOrderby = "importance desc"
	UsersEventsListInstancesParamsOrderbyIsAllDay                       UsersEventsListInstancesParamsOrderby = "isAllDay"
	UsersEventsListInstancesParamsOrderbyIsAllDayDesc                   UsersEventsListInstancesParamsOrderby = "isAllDay desc"
	UsersEventsListInstancesParamsOrderbyIsCancelled                    UsersEventsListInstancesParamsOrderby = "isCancelled"
	UsersEventsListInstancesParamsOrderbyIsCancelledDesc                UsersEventsListInstancesParamsOrderby = "isCancelled desc"
	UsersEventsListInstancesParamsOrderbyIsDraft                        UsersEventsListInstancesParamsOrderby = "isDraft"
	UsersEventsListInstancesParamsOrderbyIsDraftDesc                    UsersEventsListInstancesParamsOrderby = "isDraft desc"
	UsersEventsListInstancesParamsOrderbyIsOnlineMeeting                UsersEventsListInstancesParamsOrderby = "isOnlineMeeting"
	UsersEventsListInstancesParamsOrderbyIsOnlineMeetingDesc            UsersEventsListInstancesParamsOrderby = "isOnlineMeeting desc"
	UsersEventsListInstancesParamsOrderbyIsOrganizer                    UsersEventsListInstancesParamsOrderby = "isOrganizer"
	UsersEventsListInstancesParamsOrderbyIsOrganizerDesc                UsersEventsListInstancesParamsOrderby = "isOrganizer desc"
	UsersEventsListInstancesParamsOrderbyIsReminderOn                   UsersEventsListInstancesParamsOrderby = "isReminderOn"
	UsersEventsListInstancesParamsOrderbyIsReminderOnDesc               UsersEventsListInstancesParamsOrderby = "isReminderOn desc"
	UsersEventsListInstancesParamsOrderbyLastModifiedDateTime           UsersEventsListInstancesParamsOrderby = "lastModifiedDateTime"
	UsersEventsListInstancesParamsOrderbyLastModifiedDateTimeDesc       UsersEventsListInstancesParamsOrderby = "lastModifiedDateTime desc"
	UsersEventsListInstancesParamsOrderbyLocation                       UsersEventsListInstancesParamsOrderby = "location"
	UsersEventsListInstancesParamsOrderbyLocationDesc                   UsersEventsListInstancesParamsOrderby = "location desc"
	UsersEventsListInstancesParamsOrderbyLocations                      UsersEventsListInstancesParamsOrderby = "locations"
	UsersEventsListInstancesParamsOrderbyLocationsDesc                  UsersEventsListInstancesParamsOrderby = "locations desc"
	UsersEventsListInstancesParamsOrderbyOnlineMeeting                  UsersEventsListInstancesParamsOrderby = "onlineMeeting"
	UsersEventsListInstancesParamsOrderbyOnlineMeetingDesc              UsersEventsListInstancesParamsOrderby = "onlineMeeting desc"
	UsersEventsListInstancesParamsOrderbyOnlineMeetingProvider          UsersEventsListInstancesParamsOrderby = "onlineMeetingProvider"
	UsersEventsListInstancesParamsOrderbyOnlineMeetingProviderDesc      UsersEventsListInstancesParamsOrderby = "onlineMeetingProvider desc"
	UsersEventsListInstancesParamsOrderbyOnlineMeetingUrl               UsersEventsListInstancesParamsOrderby = "onlineMeetingUrl"
	UsersEventsListInstancesParamsOrderbyOnlineMeetingUrlDesc           UsersEventsListInstancesParamsOrderby = "onlineMeetingUrl desc"
	UsersEventsListInstancesParamsOrderbyOrganizer                      UsersEventsListInstancesParamsOrderby = "organizer"
	UsersEventsListInstancesParamsOrderbyOrganizerDesc                  UsersEventsListInstancesParamsOrderby = "organizer desc"
	UsersEventsListInstancesParamsOrderbyOriginalEndTimeZone            UsersEventsListInstancesParamsOrderby = "originalEndTimeZone"
	UsersEventsListInstancesParamsOrderbyOriginalEndTimeZoneDesc        UsersEventsListInstancesParamsOrderby = "originalEndTimeZone desc"
	UsersEventsListInstancesParamsOrderbyOriginalStart                  UsersEventsListInstancesParamsOrderby = "originalStart"
	UsersEventsListInstancesParamsOrderbyOriginalStartDesc              UsersEventsListInstancesParamsOrderby = "originalStart desc"
	UsersEventsListInstancesParamsOrderbyOriginalStartTimeZone          UsersEventsListInstancesParamsOrderby = "originalStartTimeZone"
	UsersEventsListInstancesParamsOrderbyOriginalStartTimeZoneDesc      UsersEventsListInstancesParamsOrderby = "originalStartTimeZone desc"
	UsersEventsListInstancesParamsOrderbyRecurrence                     UsersEventsListInstancesParamsOrderby = "recurrence"
	UsersEventsListInstancesParamsOrderbyRecurrenceDesc                 UsersEventsListInstancesParamsOrderby = "recurrence desc"
	UsersEventsListInstancesParamsOrderbyReminderMinutesBeforeStart     UsersEventsListInstancesParamsOrderby = "reminderMinutesBeforeStart"
	UsersEventsListInstancesParamsOrderbyReminderMinutesBeforeStartDesc UsersEventsListInstancesParamsOrderby = "reminderMinutesBeforeStart desc"
	UsersEventsListInstancesParamsOrderbyResponseRequested              UsersEventsListInstancesParamsOrderby = "responseRequested"
	UsersEventsListInstancesParamsOrderbyResponseRequestedDesc          UsersEventsListInstancesParamsOrderby = "responseRequested desc"
	UsersEventsListInstancesParamsOrderbyResponseStatus                 UsersEventsListInstancesParamsOrderby = "responseStatus"
	UsersEventsListInstancesParamsOrderbyResponseStatusDesc             UsersEventsListInstancesParamsOrderby = "responseStatus desc"
	UsersEventsListInstancesParamsOrderbySensitivity                    UsersEventsListInstancesParamsOrderby = "sensitivity"
	UsersEventsListInstancesParamsOrderbySensitivityDesc                UsersEventsListInstancesParamsOrderby = "sensitivity desc"
	UsersEventsListInstancesParamsOrderbySeriesMasterId                 UsersEventsListInstancesParamsOrderby = "seriesMasterId"
	UsersEventsListInstancesParamsOrderbySeriesMasterIdDesc             UsersEventsListInstancesParamsOrderby = "seriesMasterId desc"
	UsersEventsListInstancesParamsOrderbyShowAs                         UsersEventsListInstancesParamsOrderby = "showAs"
	UsersEventsListInstancesParamsOrderbyShowAsDesc                     UsersEventsListInstancesParamsOrderby = "showAs desc"
	UsersEventsListInstancesParamsOrderbyStart                          UsersEventsListInstancesParamsOrderby = "start"
	UsersEventsListInstancesParamsOrderbyStartDesc                      UsersEventsListInstancesParamsOrderby = "start desc"
	UsersEventsListInstancesParamsOrderbySubject                        UsersEventsListInstancesParamsOrderby = "subject"
	UsersEventsListInstancesParamsOrderbySubjectDesc                    UsersEventsListInstancesParamsOrderby = "subject desc"
	UsersEventsListInstancesParamsOrderbyTransactionId                  UsersEventsListInstancesParamsOrderby = "transactionId"
	UsersEventsListInstancesParamsOrderbyTransactionIdDesc              UsersEventsListInstancesParamsOrderby = "transactionId desc"
	UsersEventsListInstancesParamsOrderbyType                           UsersEventsListInstancesParamsOrderby = "type"
	UsersEventsListInstancesParamsOrderbyTypeDesc                       UsersEventsListInstancesParamsOrderby = "type desc"
	UsersEventsListInstancesParamsOrderbyWebLink                        UsersEventsListInstancesParamsOrderby = "webLink"
	UsersEventsListInstancesParamsOrderbyWebLinkDesc                    UsersEventsListInstancesParamsOrderby = "webLink desc"
)

// Defines values for UsersEventsListInstancesParamsSelect.
const (
	UsersEventsListInstancesParamsSelectAllowNewTimeProposals         UsersEventsListInstancesParamsSelect = "allowNewTimeProposals"
	UsersEventsListInstancesParamsSelectAttachments                   UsersEventsListInstancesParamsSelect = "attachments"
	UsersEventsListInstancesParamsSelectAttendees                     UsersEventsListInstancesParamsSelect = "attendees"
	UsersEventsListInstancesParamsSelectBody                          UsersEventsListInstancesParamsSelect = "body"
	UsersEventsListInstancesParamsSelectBodyPreview                   UsersEventsListInstancesParamsSelect = "bodyPreview"
	UsersEventsListInstancesParamsSelectCalendar                      UsersEventsListInstancesParamsSelect = "calendar"
	UsersEventsListInstancesParamsSelectCategories                    UsersEventsListInstancesParamsSelect = "categories"
	UsersEventsListInstancesParamsSelectChangeKey                     UsersEventsListInstancesParamsSelect = "changeKey"
	UsersEventsListInstancesParamsSelectCreatedDateTime               UsersEventsListInstancesParamsSelect = "createdDateTime"
	UsersEventsListInstancesParamsSelectEnd                           UsersEventsListInstancesParamsSelect = "end"
	UsersEventsListInstancesParamsSelectExtensions                    UsersEventsListInstancesParamsSelect = "extensions"
	UsersEventsListInstancesParamsSelectHasAttachments                UsersEventsListInstancesParamsSelect = "hasAttachments"
	UsersEventsListInstancesParamsSelectHideAttendees                 UsersEventsListInstancesParamsSelect = "hideAttendees"
	UsersEventsListInstancesParamsSelectICalUId                       UsersEventsListInstancesParamsSelect = "iCalUId"
	UsersEventsListInstancesParamsSelectId                            UsersEventsListInstancesParamsSelect = "id"
	UsersEventsListInstancesParamsSelectImportance                    UsersEventsListInstancesParamsSelect = "importance"
	UsersEventsListInstancesParamsSelectInstances                     UsersEventsListInstancesParamsSelect = "instances"
	UsersEventsListInstancesParamsSelectIsAllDay                      UsersEventsListInstancesParamsSelect = "isAllDay"
	UsersEventsListInstancesParamsSelectIsCancelled                   UsersEventsListInstancesParamsSelect = "isCancelled"
	UsersEventsListInstancesParamsSelectIsDraft                       UsersEventsListInstancesParamsSelect = "isDraft"
	UsersEventsListInstancesParamsSelectIsOnlineMeeting               UsersEventsListInstancesParamsSelect = "isOnlineMeeting"
	UsersEventsListInstancesParamsSelectIsOrganizer                   UsersEventsListInstancesParamsSelect = "isOrganizer"
	UsersEventsListInstancesParamsSelectIsReminderOn                  UsersEventsListInstancesParamsSelect = "isReminderOn"
	UsersEventsListInstancesParamsSelectLastModifiedDateTime          UsersEventsListInstancesParamsSelect = "lastModifiedDateTime"
	UsersEventsListInstancesParamsSelectLocation                      UsersEventsListInstancesParamsSelect = "location"
	UsersEventsListInstancesParamsSelectLocations                     UsersEventsListInstancesParamsSelect = "locations"
	UsersEventsListInstancesParamsSelectMultiValueExtendedProperties  UsersEventsListInstancesParamsSelect = "multiValueExtendedProperties"
	UsersEventsListInstancesParamsSelectOnlineMeeting                 UsersEventsListInstancesParamsSelect = "onlineMeeting"
	UsersEventsListInstancesParamsSelectOnlineMeetingProvider         UsersEventsListInstancesParamsSelect = "onlineMeetingProvider"
	UsersEventsListInstancesParamsSelectOnlineMeetingUrl              UsersEventsListInstancesParamsSelect = "onlineMeetingUrl"
	UsersEventsListInstancesParamsSelectOrganizer                     UsersEventsListInstancesParamsSelect = "organizer"
	UsersEventsListInstancesParamsSelectOriginalEndTimeZone           UsersEventsListInstancesParamsSelect = "originalEndTimeZone"
	UsersEventsListInstancesParamsSelectOriginalStart                 UsersEventsListInstancesParamsSelect = "originalStart"
	UsersEventsListInstancesParamsSelectOriginalStartTimeZone         UsersEventsListInstancesParamsSelect = "originalStartTimeZone"
	UsersEventsListInstancesParamsSelectRecurrence                    UsersEventsListInstancesParamsSelect = "recurrence"
	UsersEventsListInstancesParamsSelectReminderMinutesBeforeStart    UsersEventsListInstancesParamsSelect = "reminderMinutesBeforeStart"
	UsersEventsListInstancesParamsSelectResponseRequested             UsersEventsListInstancesParamsSelect = "responseRequested"
	UsersEventsListInstancesParamsSelectResponseStatus                UsersEventsListInstancesParamsSelect = "responseStatus"
	UsersEventsListInstancesParamsSelectSensitivity                   UsersEventsListInstancesParamsSelect = "sensitivity"
	UsersEventsListInstancesParamsSelectSeriesMasterId                UsersEventsListInstancesParamsSelect = "seriesMasterId"
	UsersEventsListInstancesParamsSelectShowAs                        UsersEventsListInstancesParamsSelect = "showAs"
	UsersEventsListInstancesParamsSelectSingleValueExtendedProperties UsersEventsListInstancesParamsSelect = "singleValueExtendedProperties"
	UsersEventsListInstancesParamsSelectStart                         UsersEventsListInstancesParamsSelect = "start"
	UsersEventsListInstancesParamsSelectSubject                       UsersEventsListInstancesParamsSelect = "subject"
	UsersEventsListInstancesParamsSelectTransactionId                 UsersEventsListInstancesParamsSelect = "transactionId"
	UsersEventsListInstancesParamsSelectType                          UsersEventsListInstancesParamsSelect = "type"
	UsersEventsListInstancesParamsSelectWebLink                       UsersEventsListInstancesParamsSelect = "webLink"
)

// Defines values for UsersUserEventsEventInstancesDeltaParamsSelect.
const (
	UsersUserEventsEventInstancesDeltaParamsSelectAllowNewTimeProposals         UsersUserEventsEventInstancesDeltaParamsSelect = "allowNewTimeProposals"
	UsersUserEventsEventInstancesDeltaParamsSelectAttachments                   UsersUserEventsEventInstancesDeltaParamsSelect = "attachments"
	UsersUserEventsEventInstancesDeltaParamsSelectAttendees                     UsersUserEventsEventInstancesDeltaParamsSelect = "attendees"
	UsersUserEventsEventInstancesDeltaParamsSelectBody                          UsersUserEventsEventInstancesDeltaParamsSelect = "body"
	UsersUserEventsEventInstancesDeltaParamsSelectBodyPreview                   UsersUserEventsEventInstancesDeltaParamsSelect = "bodyPreview"
	UsersUserEventsEventInstancesDeltaParamsSelectCalendar                      UsersUserEventsEventInstancesDeltaParamsSelect = "calendar"
	UsersUserEventsEventInstancesDeltaParamsSelectCategories                    UsersUserEventsEventInstancesDeltaParamsSelect = "categories"
	UsersUserEventsEventInstancesDeltaParamsSelectChangeKey                     UsersUserEventsEventInstancesDeltaParamsSelect = "changeKey"
	UsersUserEventsEventInstancesDeltaParamsSelectCreatedDateTime               UsersUserEventsEventInstancesDeltaParamsSelect = "createdDateTime"
	UsersUserEventsEventInstancesDeltaParamsSelectEnd                           UsersUserEventsEventInstancesDeltaParamsSelect = "end"
	UsersUserEventsEventInstancesDeltaParamsSelectExtensions                    UsersUserEventsEventInstancesDeltaParamsSelect = "extensions"
	UsersUserEventsEventInstancesDeltaParamsSelectHasAttachments                UsersUserEventsEventInstancesDeltaParamsSelect = "hasAttachments"
	UsersUserEventsEventInstancesDeltaParamsSelectHideAttendees                 UsersUserEventsEventInstancesDeltaParamsSelect = "hideAttendees"
	UsersUserEventsEventInstancesDeltaParamsSelectICalUId                       UsersUserEventsEventInstancesDeltaParamsSelect = "iCalUId"
	UsersUserEventsEventInstancesDeltaParamsSelectId                            UsersUserEventsEventInstancesDeltaParamsSelect = "id"
	UsersUserEventsEventInstancesDeltaParamsSelectImportance                    UsersUserEventsEventInstancesDeltaParamsSelect = "importance"
	UsersUserEventsEventInstancesDeltaParamsSelectInstances                     UsersUserEventsEventInstancesDeltaParamsSelect = "instances"
	UsersUserEventsEventInstancesDeltaParamsSelectIsAllDay                      UsersUserEventsEventInstancesDeltaParamsSelect = "isAllDay"
	UsersUserEventsEventInstancesDeltaParamsSelectIsCancelled                   UsersUserEventsEventInstancesDeltaParamsSelect = "isCancelled"
	UsersUserEventsEventInstancesDeltaParamsSelectIsDraft                       UsersUserEventsEventInstancesDeltaParamsSelect = "isDraft"
	UsersUserEventsEventInstancesDeltaParamsSelectIsOnlineMeeting               UsersUserEventsEventInstancesDeltaParamsSelect = "isOnlineMeeting"
	UsersUserEventsEventInstancesDeltaParamsSelectIsOrganizer                   UsersUserEventsEventInstancesDeltaParamsSelect = "isOrganizer"
	UsersUserEventsEventInstancesDeltaParamsSelectIsReminderOn                  UsersUserEventsEventInstancesDeltaParamsSelect = "isReminderOn"
	UsersUserEventsEventInstancesDeltaParamsSelectLastModifiedDateTime          UsersUserEventsEventInstancesDeltaParamsSelect = "lastModifiedDateTime"
	UsersUserEventsEventInstancesDeltaParamsSelectLocation                      UsersUserEventsEventInstancesDeltaParamsSelect = "location"
	UsersUserEventsEventInstancesDeltaParamsSelectLocations                     UsersUserEventsEventInstancesDeltaParamsSelect = "locations"
	UsersUserEventsEventInstancesDeltaParamsSelectMultiValueExtendedProperties  UsersUserEventsEventInstancesDeltaParamsSelect = "multiValueExtendedProperties"
	UsersUserEventsEventInstancesDeltaParamsSelectOnlineMeeting                 UsersUserEventsEventInstancesDeltaParamsSelect = "onlineMeeting"
	UsersUserEventsEventInstancesDeltaParamsSelectOnlineMeetingProvider         UsersUserEventsEventInstancesDeltaParamsSelect = "onlineMeetingProvider"
	UsersUserEventsEventInstancesDeltaParamsSelectOnlineMeetingUrl              UsersUserEventsEventInstancesDeltaParamsSelect = "onlineMeetingUrl"
	UsersUserEventsEventInstancesDeltaParamsSelectOrganizer                     UsersUserEventsEventInstancesDeltaParamsSelect = "organizer"
	UsersUserEventsEventInstancesDeltaParamsSelectOriginalEndTimeZone           UsersUserEventsEventInstancesDeltaParamsSelect = "originalEndTimeZone"
	UsersUserEventsEventInstancesDeltaParamsSelectOriginalStart                 UsersUserEventsEventInstancesDeltaParamsSelect = "originalStart"
	UsersUserEventsEventInstancesDeltaParamsSelectOriginalStartTimeZone         UsersUserEventsEventInstancesDeltaParamsSelect = "originalStartTimeZone"
	UsersUserEventsEventInstancesDeltaParamsSelectRecurrence                    UsersUserEventsEventInstancesDeltaParamsSelect = "recurrence"
	UsersUserEventsEventInstancesDeltaParamsSelectReminderMinutesBeforeStart    UsersUserEventsEventInstancesDeltaParamsSelect = "reminderMinutesBeforeStart"
	UsersUserEventsEventInstancesDeltaParamsSelectResponseRequested             UsersUserEventsEventInstancesDeltaParamsSelect = "responseRequested"
	UsersUserEventsEventInstancesDeltaParamsSelectResponseStatus                UsersUserEventsEventInstancesDeltaParamsSelect = "responseStatus"
	UsersUserEventsEventInstancesDeltaParamsSelectSensitivity                   UsersUserEventsEventInstancesDeltaParamsSelect = "sensitivity"
	UsersUserEventsEventInstancesDeltaParamsSelectSeriesMasterId                UsersUserEventsEventInstancesDeltaParamsSelect = "seriesMasterId"
	UsersUserEventsEventInstancesDeltaParamsSelectShowAs                        UsersUserEventsEventInstancesDeltaParamsSelect = "showAs"
	UsersUserEventsEventInstancesDeltaParamsSelectSingleValueExtendedProperties UsersUserEventsEventInstancesDeltaParamsSelect = "singleValueExtendedProperties"
	UsersUserEventsEventInstancesDeltaParamsSelectStart                         UsersUserEventsEventInstancesDeltaParamsSelect = "start"
	UsersUserEventsEventInstancesDeltaParamsSelectSubject                       UsersUserEventsEventInstancesDeltaParamsSelect = "subject"
	UsersUserEventsEventInstancesDeltaParamsSelectTransactionId                 UsersUserEventsEventInstancesDeltaParamsSelect = "transactionId"
	UsersUserEventsEventInstancesDeltaParamsSelectType                          UsersUserEventsEventInstancesDeltaParamsSelect = "type"
	UsersUserEventsEventInstancesDeltaParamsSelectWebLink                       UsersUserEventsEventInstancesDeltaParamsSelect = "webLink"
)

// Defines values for UsersUserEventsEventInstancesDeltaParamsOrderby.
const (
	UsersUserEventsEventInstancesDeltaParamsOrderbyAllowNewTimeProposals          UsersUserEventsEventInstancesDeltaParamsOrderby = "allowNewTimeProposals"
	UsersUserEventsEventInstancesDeltaParamsOrderbyAllowNewTimeProposalsDesc      UsersUserEventsEventInstancesDeltaParamsOrderby = "allowNewTimeProposals desc"
	UsersUserEventsEventInstancesDeltaParamsOrderbyAttendees                      UsersUserEventsEventInstancesDeltaParamsOrderby = "attendees"
	UsersUserEventsEventInstancesDeltaParamsOrderbyAttendeesDesc                  UsersUserEventsEventInstancesDeltaParamsOrderby = "attendees desc"
	UsersUserEventsEventInstancesDeltaParamsOrderbyBody                           UsersUserEventsEventInstancesDeltaParamsOrderby = "body"
	UsersUserEventsEventInstancesDeltaParamsOrderbyBodyDesc                       UsersUserEventsEventInstancesDeltaParamsOrderby = "body desc"
	UsersUserEventsEventInstancesDeltaParamsOrderbyBodyPreview                    UsersUserEventsEventInstancesDeltaParamsOrderby = "bodyPreview"
	UsersUserEventsEventInstancesDeltaParamsOrderbyBodyPreviewDesc                UsersUserEventsEventInstancesDeltaParamsOrderby = "bodyPreview desc"
	UsersUserEventsEventInstancesDeltaParamsOrderbyCategories                     UsersUserEventsEventInstancesDeltaParamsOrderby = "categories"
	UsersUserEventsEventInstancesDeltaParamsOrderbyCategoriesDesc                 UsersUserEventsEventInstancesDeltaParamsOrderby = "categories desc"
	UsersUserEventsEventInstancesDeltaParamsOrderbyChangeKey                      UsersUserEventsEventInstancesDeltaParamsOrderby = "changeKey"
	UsersUserEventsEventInstancesDeltaParamsOrderbyChangeKeyDesc                  UsersUserEventsEventInstancesDeltaParamsOrderby = "changeKey desc"
	UsersUserEventsEventInstancesDeltaParamsOrderbyCreatedDateTime                UsersUserEventsEventInstancesDeltaParamsOrderby = "createdDateTime"
	UsersUserEventsEventInstancesDeltaParamsOrderbyCreatedDateTimeDesc            UsersUserEventsEventInstancesDeltaParamsOrderby = "createdDateTime desc"
	UsersUserEventsEventInstancesDeltaParamsOrderbyEnd                            UsersUserEventsEventInstancesDeltaParamsOrderby = "end"
	UsersUserEventsEventInstancesDeltaParamsOrderbyEndDesc                        UsersUserEventsEventInstancesDeltaParamsOrderby = "end desc"
	UsersUserEventsEventInstancesDeltaParamsOrderbyHasAttachments                 UsersUserEventsEventInstancesDeltaParamsOrderby = "hasAttachments"
	UsersUserEventsEventInstancesDeltaParamsOrderbyHasAttachmentsDesc             UsersUserEventsEventInstancesDeltaParamsOrderby = "hasAttachments desc"
	UsersUserEventsEventInstancesDeltaParamsOrderbyHideAttendees                  UsersUserEventsEventInstancesDeltaParamsOrderby = "hideAttendees"
	UsersUserEventsEventInstancesDeltaParamsOrderbyHideAttendeesDesc              UsersUserEventsEventInstancesDeltaParamsOrderby = "hideAttendees desc"
	UsersUserEventsEventInstancesDeltaParamsOrderbyICalUId                        UsersUserEventsEventInstancesDeltaParamsOrderby = "iCalUId"
	UsersUserEventsEventInstancesDeltaParamsOrderbyICalUIdDesc                    UsersUserEventsEventInstancesDeltaParamsOrderby = "iCalUId desc"
	UsersUserEventsEventInstancesDeltaParamsOrderbyId                             UsersUserEventsEventInstancesDeltaParamsOrderby = "id"
	UsersUserEventsEventInstancesDeltaParamsOrderbyIdDesc                         UsersUserEventsEventInstancesDeltaParamsOrderby = "id desc"
	UsersUserEventsEventInstancesDeltaParamsOrderbyImportance                     UsersUserEventsEventInstancesDeltaParamsOrderby = "importance"
	UsersUserEventsEventInstancesDeltaParamsOrderbyImportanceDesc                 UsersUserEventsEventInstancesDeltaParamsOrderby = "importance desc"
	UsersUserEventsEventInstancesDeltaParamsOrderbyIsAllDay                       UsersUserEventsEventInstancesDeltaParamsOrderby = "isAllDay"
	UsersUserEventsEventInstancesDeltaParamsOrderbyIsAllDayDesc                   UsersUserEventsEventInstancesDeltaParamsOrderby = "isAllDay desc"
	UsersUserEventsEventInstancesDeltaParamsOrderbyIsCancelled                    UsersUserEventsEventInstancesDeltaParamsOrderby = "isCancelled"
	UsersUserEventsEventInstancesDeltaParamsOrderbyIsCancelledDesc                UsersUserEventsEventInstancesDeltaParamsOrderby = "isCancelled desc"
	UsersUserEventsEventInstancesDeltaParamsOrderbyIsDraft                        UsersUserEventsEventInstancesDeltaParamsOrderby = "isDraft"
	UsersUserEventsEventInstancesDeltaParamsOrderbyIsDraftDesc                    UsersUserEventsEventInstancesDeltaParamsOrderby = "isDraft desc"
	UsersUserEventsEventInstancesDeltaParamsOrderbyIsOnlineMeeting                UsersUserEventsEventInstancesDeltaParamsOrderby = "isOnlineMeeting"
	UsersUserEventsEventInstancesDeltaParamsOrderbyIsOnlineMeetingDesc            UsersUserEventsEventInstancesDeltaParamsOrderby = "isOnlineMeeting desc"
	UsersUserEventsEventInstancesDeltaParamsOrderbyIsOrganizer                    UsersUserEventsEventInstancesDeltaParamsOrderby = "isOrganizer"
	UsersUserEventsEventInstancesDeltaParamsOrderbyIsOrganizerDesc                UsersUserEventsEventInstancesDeltaParamsOrderby = "isOrganizer desc"
	UsersUserEventsEventInstancesDeltaParamsOrderbyIsReminderOn                   UsersUserEventsEventInstancesDeltaParamsOrderby = "isReminderOn"
	UsersUserEventsEventInstancesDeltaParamsOrderbyIsReminderOnDesc               UsersUserEventsEventInstancesDeltaParamsOrderby = "isReminderOn desc"
	UsersUserEventsEventInstancesDeltaParamsOrderbyLastModifiedDateTime           UsersUserEventsEventInstancesDeltaParamsOrderby = "lastModifiedDateTime"
	UsersUserEventsEventInstancesDeltaParamsOrderbyLastModifiedDateTimeDesc       UsersUserEventsEventInstancesDeltaParamsOrderby = "lastModifiedDateTime desc"
	UsersUserEventsEventInstancesDeltaParamsOrderbyLocation                       UsersUserEventsEventInstancesDeltaParamsOrderby = "location"
	UsersUserEventsEventInstancesDeltaParamsOrderbyLocationDesc                   UsersUserEventsEventInstancesDeltaParamsOrderby = "location desc"
	UsersUserEventsEventInstancesDeltaParamsOrderbyLocations                      UsersUserEventsEventInstancesDeltaParamsOrderby = "locations"
	UsersUserEventsEventInstancesDeltaParamsOrderbyLocationsDesc                  UsersUserEventsEventInstancesDeltaParamsOrderby = "locations desc"
	UsersUserEventsEventInstancesDeltaParamsOrderbyOnlineMeeting                  UsersUserEventsEventInstancesDeltaParamsOrderby = "onlineMeeting"
	UsersUserEventsEventInstancesDeltaParamsOrderbyOnlineMeetingDesc              UsersUserEventsEventInstancesDeltaParamsOrderby = "onlineMeeting desc"
	UsersUserEventsEventInstancesDeltaParamsOrderbyOnlineMeetingProvider          UsersUserEventsEventInstancesDeltaParamsOrderby = "onlineMeetingProvider"
	UsersUserEventsEventInstancesDeltaParamsOrderbyOnlineMeetingProviderDesc      UsersUserEventsEventInstancesDeltaParamsOrderby = "onlineMeetingProvider desc"
	UsersUserEventsEventInstancesDeltaParamsOrderbyOnlineMeetingUrl               UsersUserEventsEventInstancesDeltaParamsOrderby = "onlineMeetingUrl"
	UsersUserEventsEventInstancesDeltaParamsOrderbyOnlineMeetingUrlDesc           UsersUserEventsEventInstancesDeltaParamsOrderby = "onlineMeetingUrl desc"
	UsersUserEventsEventInstancesDeltaParamsOrderbyOrganizer                      UsersUserEventsEventInstancesDeltaParamsOrderby = "organizer"
	UsersUserEventsEventInstancesDeltaParamsOrderbyOrganizerDesc                  UsersUserEventsEventInstancesDeltaParamsOrderby = "organizer desc"
	UsersUserEventsEventInstancesDeltaParamsOrderbyOriginalEndTimeZone            UsersUserEventsEventInstancesDeltaParamsOrderby = "originalEndTimeZone"
	UsersUserEventsEventInstancesDeltaParamsOrderbyOriginalEndTimeZoneDesc        UsersUserEventsEventInstancesDeltaParamsOrderby = "originalEndTimeZone desc"
	UsersUserEventsEventInstancesDeltaParamsOrderbyOriginalStart                  UsersUserEventsEventInstancesDeltaParamsOrderby = "originalStart"
	UsersUserEventsEventInstancesDeltaParamsOrderbyOriginalStartDesc              UsersUserEventsEventInstancesDeltaParamsOrderby = "originalStart desc"
	UsersUserEventsEventInstancesDeltaParamsOrderbyOriginalStartTimeZone          UsersUserEventsEventInstancesDeltaParamsOrderby = "originalStartTimeZone"
	UsersUserEventsEventInstancesDeltaParamsOrderbyOriginalStartTimeZoneDesc      UsersUserEventsEventInstancesDeltaParamsOrderby = "originalStartTimeZone desc"
	UsersUserEventsEventInstancesDeltaParamsOrderbyRecurrence                     UsersUserEventsEventInstancesDeltaParamsOrderby = "recurrence"
	UsersUserEventsEventInstancesDeltaParamsOrderbyRecurrenceDesc                 UsersUserEventsEventInstancesDeltaParamsOrderby = "recurrence desc"
	UsersUserEventsEventInstancesDeltaParamsOrderbyReminderMinutesBeforeStart     UsersUserEventsEventInstancesDeltaParamsOrderby = "reminderMinutesBeforeStart"
	UsersUserEventsEventInstancesDeltaParamsOrderbyReminderMinutesBeforeStartDesc UsersUserEventsEventInstancesDeltaParamsOrderby = "reminderMinutesBeforeStart desc"
	UsersUserEventsEventInstancesDeltaParamsOrderbyResponseRequested              UsersUserEventsEventInstancesDeltaParamsOrderby = "responseRequested"
	UsersUserEventsEventInstancesDeltaParamsOrderbyResponseRequestedDesc          UsersUserEventsEventInstancesDeltaParamsOrderby = "responseRequested desc"
	UsersUserEventsEventInstancesDeltaParamsOrderbyResponseStatus                 UsersUserEventsEventInstancesDeltaParamsOrderby = "responseStatus"
	UsersUserEventsEventInstancesDeltaParamsOrderbyResponseStatusDesc             UsersUserEventsEventInstancesDeltaParamsOrderby = "responseStatus desc"
	UsersUserEventsEventInstancesDeltaParamsOrderbySensitivity                    UsersUserEventsEventInstancesDeltaParamsOrderby = "sensitivity"
	UsersUserEventsEventInstancesDeltaParamsOrderbySensitivityDesc                UsersUserEventsEventInstancesDeltaParamsOrderby = "sensitivity desc"
	UsersUserEventsEventInstancesDeltaParamsOrderbySeriesMasterId                 UsersUserEventsEventInstancesDeltaParamsOrderby = "seriesMasterId"
	UsersUserEventsEventInstancesDeltaParamsOrderbySeriesMasterIdDesc             UsersUserEventsEventInstancesDeltaParamsOrderby = "seriesMasterId desc"
	UsersUserEventsEventInstancesDeltaParamsOrderbyShowAs                         UsersUserEventsEventInstancesDeltaParamsOrderby = "showAs"
	UsersUserEventsEventInstancesDeltaParamsOrderbyShowAsDesc                     UsersUserEventsEventInstancesDeltaParamsOrderby = "showAs desc"
	UsersUserEventsEventInstancesDeltaParamsOrderbyStart                          UsersUserEventsEventInstancesDeltaParamsOrderby = "start"
	UsersUserEventsEventInstancesDeltaParamsOrderbyStartDesc                      UsersUserEventsEventInstancesDeltaParamsOrderby = "start desc"
	UsersUserEventsEventInstancesDeltaParamsOrderbySubject                        UsersUserEventsEventInstancesDeltaParamsOrderby = "subject"
	UsersUserEventsEventInstancesDeltaParamsOrderbySubjectDesc                    UsersUserEventsEventInstancesDeltaParamsOrderby = "subject desc"
	UsersUserEventsEventInstancesDeltaParamsOrderbyTransactionId                  UsersUserEventsEventInstancesDeltaParamsOrderby = "transactionId"
	UsersUserEventsEventInstancesDeltaParamsOrderbyTransactionIdDesc              UsersUserEventsEventInstancesDeltaParamsOrderby = "transactionId desc"
	UsersUserEventsEventInstancesDeltaParamsOrderbyType                           UsersUserEventsEventInstancesDeltaParamsOrderby = "type"
	UsersUserEventsEventInstancesDeltaParamsOrderbyTypeDesc                       UsersUserEventsEventInstancesDeltaParamsOrderby = "type desc"
	UsersUserEventsEventInstancesDeltaParamsOrderbyWebLink                        UsersUserEventsEventInstancesDeltaParamsOrderby = "webLink"
	UsersUserEventsEventInstancesDeltaParamsOrderbyWebLinkDesc                    UsersUserEventsEventInstancesDeltaParamsOrderby = "webLink desc"
)

// Defines values for UsersEventsGetInstancesParamsSelect.
const (
	UsersEventsGetInstancesParamsSelectAllowNewTimeProposals         UsersEventsGetInstancesParamsSelect = "allowNewTimeProposals"
	UsersEventsGetInstancesParamsSelectAttachments                   UsersEventsGetInstancesParamsSelect = "attachments"
	UsersEventsGetInstancesParamsSelectAttendees                     UsersEventsGetInstancesParamsSelect = "attendees"
	UsersEventsGetInstancesParamsSelectBody                          UsersEventsGetInstancesParamsSelect = "body"
	UsersEventsGetInstancesParamsSelectBodyPreview                   UsersEventsGetInstancesParamsSelect = "bodyPreview"
	UsersEventsGetInstancesParamsSelectCalendar                      UsersEventsGetInstancesParamsSelect = "calendar"
	UsersEventsGetInstancesParamsSelectCategories                    UsersEventsGetInstancesParamsSelect = "categories"
	UsersEventsGetInstancesParamsSelectChangeKey                     UsersEventsGetInstancesParamsSelect = "changeKey"
	UsersEventsGetInstancesParamsSelectCreatedDateTime               UsersEventsGetInstancesParamsSelect = "createdDateTime"
	UsersEventsGetInstancesParamsSelectEnd                           UsersEventsGetInstancesParamsSelect = "end"
	UsersEventsGetInstancesParamsSelectExtensions                    UsersEventsGetInstancesParamsSelect = "extensions"
	UsersEventsGetInstancesParamsSelectHasAttachments                UsersEventsGetInstancesParamsSelect = "hasAttachments"
	UsersEventsGetInstancesParamsSelectHideAttendees                 UsersEventsGetInstancesParamsSelect = "hideAttendees"
	UsersEventsGetInstancesParamsSelectICalUId                       UsersEventsGetInstancesParamsSelect = "iCalUId"
	UsersEventsGetInstancesParamsSelectId                            UsersEventsGetInstancesParamsSelect = "id"
	UsersEventsGetInstancesParamsSelectImportance                    UsersEventsGetInstancesParamsSelect = "importance"
	UsersEventsGetInstancesParamsSelectInstances                     UsersEventsGetInstancesParamsSelect = "instances"
	UsersEventsGetInstancesParamsSelectIsAllDay                      UsersEventsGetInstancesParamsSelect = "isAllDay"
	UsersEventsGetInstancesParamsSelectIsCancelled                   UsersEventsGetInstancesParamsSelect = "isCancelled"
	UsersEventsGetInstancesParamsSelectIsDraft                       UsersEventsGetInstancesParamsSelect = "isDraft"
	UsersEventsGetInstancesParamsSelectIsOnlineMeeting               UsersEventsGetInstancesParamsSelect = "isOnlineMeeting"
	UsersEventsGetInstancesParamsSelectIsOrganizer                   UsersEventsGetInstancesParamsSelect = "isOrganizer"
	UsersEventsGetInstancesParamsSelectIsReminderOn                  UsersEventsGetInstancesParamsSelect = "isReminderOn"
	UsersEventsGetInstancesParamsSelectLastModifiedDateTime          UsersEventsGetInstancesParamsSelect = "lastModifiedDateTime"
	UsersEventsGetInstancesParamsSelectLocation                      UsersEventsGetInstancesParamsSelect = "location"
	UsersEventsGetInstancesParamsSelectLocations                     UsersEventsGetInstancesParamsSelect = "locations"
	UsersEventsGetInstancesParamsSelectMultiValueExtendedProperties  UsersEventsGetInstancesParamsSelect = "multiValueExtendedProperties"
	UsersEventsGetInstancesParamsSelectOnlineMeeting                 UsersEventsGetInstancesParamsSelect = "onlineMeeting"
	UsersEventsGetInstancesParamsSelectOnlineMeetingProvider         UsersEventsGetInstancesParamsSelect = "onlineMeetingProvider"
	UsersEventsGetInstancesParamsSelectOnlineMeetingUrl              UsersEventsGetInstancesParamsSelect = "onlineMeetingUrl"
	UsersEventsGetInstancesParamsSelectOrganizer                     UsersEventsGetInstancesParamsSelect = "organizer"
	UsersEventsGetInstancesParamsSelectOriginalEndTimeZone           UsersEventsGetInstancesParamsSelect = "originalEndTimeZone"
	UsersEventsGetInstancesParamsSelectOriginalStart                 UsersEventsGetInstancesParamsSelect = "originalStart"
	UsersEventsGetInstancesParamsSelectOriginalStartTimeZone         UsersEventsGetInstancesParamsSelect = "originalStartTimeZone"
	UsersEventsGetInstancesParamsSelectRecurrence                    UsersEventsGetInstancesParamsSelect = "recurrence"
	UsersEventsGetInstancesParamsSelectReminderMinutesBeforeStart    UsersEventsGetInstancesParamsSelect = "reminderMinutesBeforeStart"
	UsersEventsGetInstancesParamsSelectResponseRequested             UsersEventsGetInstancesParamsSelect = "responseRequested"
	UsersEventsGetInstancesParamsSelectResponseStatus                UsersEventsGetInstancesParamsSelect = "responseStatus"
	UsersEventsGetInstancesParamsSelectSensitivity                   UsersEventsGetInstancesParamsSelect = "sensitivity"
	UsersEventsGetInstancesParamsSelectSeriesMasterId                UsersEventsGetInstancesParamsSelect = "seriesMasterId"
	UsersEventsGetInstancesParamsSelectShowAs                        UsersEventsGetInstancesParamsSelect = "showAs"
	UsersEventsGetInstancesParamsSelectSingleValueExtendedProperties UsersEventsGetInstancesParamsSelect = "singleValueExtendedProperties"
	UsersEventsGetInstancesParamsSelectStart                         UsersEventsGetInstancesParamsSelect = "start"
	UsersEventsGetInstancesParamsSelectSubject                       UsersEventsGetInstancesParamsSelect = "subject"
	UsersEventsGetInstancesParamsSelectTransactionId                 UsersEventsGetInstancesParamsSelect = "transactionId"
	UsersEventsGetInstancesParamsSelectType                          UsersEventsGetInstancesParamsSelect = "type"
	UsersEventsGetInstancesParamsSelectWebLink                       UsersEventsGetInstancesParamsSelect = "webLink"
)

// Defines values for UsersEventsInstancesListAttachmentsParamsOrderby.
const (
	UsersEventsInstancesListAttachmentsParamsOrderbyContentType              UsersEventsInstancesListAttachmentsParamsOrderby = "contentType"
	UsersEventsInstancesListAttachmentsParamsOrderbyContentTypeDesc          UsersEventsInstancesListAttachmentsParamsOrderby = "contentType desc"
	UsersEventsInstancesListAttachmentsParamsOrderbyId                       UsersEventsInstancesListAttachmentsParamsOrderby = "id"
	UsersEventsInstancesListAttachmentsParamsOrderbyIdDesc                   UsersEventsInstancesListAttachmentsParamsOrderby = "id desc"
	UsersEventsInstancesListAttachmentsParamsOrderbyIsInline                 UsersEventsInstancesListAttachmentsParamsOrderby = "isInline"
	UsersEventsInstancesListAttachmentsParamsOrderbyIsInlineDesc             UsersEventsInstancesListAttachmentsParamsOrderby = "isInline desc"
	UsersEventsInstancesListAttachmentsParamsOrderbyLastModifiedDateTime     UsersEventsInstancesListAttachmentsParamsOrderby = "lastModifiedDateTime"
	UsersEventsInstancesListAttachmentsParamsOrderbyLastModifiedDateTimeDesc UsersEventsInstancesListAttachmentsParamsOrderby = "lastModifiedDateTime desc"
	UsersEventsInstancesListAttachmentsParamsOrderbyName                     UsersEventsInstancesListAttachmentsParamsOrderby = "name"
	UsersEventsInstancesListAttachmentsParamsOrderbyNameDesc                 UsersEventsInstancesListAttachmentsParamsOrderby = "name desc"
	UsersEventsInstancesListAttachmentsParamsOrderbySize                     UsersEventsInstancesListAttachmentsParamsOrderby = "size"
	UsersEventsInstancesListAttachmentsParamsOrderbySizeDesc                 UsersEventsInstancesListAttachmentsParamsOrderby = "size desc"
)

// Defines values for UsersEventsInstancesListAttachmentsParamsSelect.
const (
	UsersEventsInstancesListAttachmentsParamsSelectContentType          UsersEventsInstancesListAttachmentsParamsSelect = "contentType"
	UsersEventsInstancesListAttachmentsParamsSelectId                   UsersEventsInstancesListAttachmentsParamsSelect = "id"
	UsersEventsInstancesListAttachmentsParamsSelectIsInline             UsersEventsInstancesListAttachmentsParamsSelect = "isInline"
	UsersEventsInstancesListAttachmentsParamsSelectLastModifiedDateTime UsersEventsInstancesListAttachmentsParamsSelect = "lastModifiedDateTime"
	UsersEventsInstancesListAttachmentsParamsSelectName                 UsersEventsInstancesListAttachmentsParamsSelect = "name"
	UsersEventsInstancesListAttachmentsParamsSelectSize                 UsersEventsInstancesListAttachmentsParamsSelect = "size"
)

// Defines values for UsersEventsInstancesListAttachmentsParamsExpand.
const (
	UsersEventsInstancesListAttachmentsParamsExpandAsterisk UsersEventsInstancesListAttachmentsParamsExpand = "*"
)

// Defines values for UsersEventsInstancesGetAttachmentsParamsSelect.
const (
	UsersEventsInstancesGetAttachmentsParamsSelectContentType          UsersEventsInstancesGetAttachmentsParamsSelect = "contentType"
	UsersEventsInstancesGetAttachmentsParamsSelectId                   UsersEventsInstancesGetAttachmentsParamsSelect = "id"
	UsersEventsInstancesGetAttachmentsParamsSelectIsInline             UsersEventsInstancesGetAttachmentsParamsSelect = "isInline"
	UsersEventsInstancesGetAttachmentsParamsSelectLastModifiedDateTime UsersEventsInstancesGetAttachmentsParamsSelect = "lastModifiedDateTime"
	UsersEventsInstancesGetAttachmentsParamsSelectName                 UsersEventsInstancesGetAttachmentsParamsSelect = "name"
	UsersEventsInstancesGetAttachmentsParamsSelectSize                 UsersEventsInstancesGetAttachmentsParamsSelect = "size"
)

// Defines values for UsersEventsInstancesGetAttachmentsParamsExpand.
const (
	UsersEventsInstancesGetAttachmentsParamsExpandAsterisk UsersEventsInstancesGetAttachmentsParamsExpand = "*"
)

// Defines values for UsersEventsInstancesGetCalendarParamsSelect.
const (
	UsersEventsInstancesGetCalendarParamsSelectAllowedOnlineMeetingProviders UsersEventsInstancesGetCalendarParamsSelect = "allowedOnlineMeetingProviders"
	UsersEventsInstancesGetCalendarParamsSelectCalendarPermissions           UsersEventsInstancesGetCalendarParamsSelect = "calendarPermissions"
	UsersEventsInstancesGetCalendarParamsSelectCalendarView                  UsersEventsInstancesGetCalendarParamsSelect = "calendarView"
	UsersEventsInstancesGetCalendarParamsSelectCanEdit                       UsersEventsInstancesGetCalendarParamsSelect = "canEdit"
	UsersEventsInstancesGetCalendarParamsSelectCanShare                      UsersEventsInstancesGetCalendarParamsSelect = "canShare"
	UsersEventsInstancesGetCalendarParamsSelectCanViewPrivateItems           UsersEventsInstancesGetCalendarParamsSelect = "canViewPrivateItems"
	UsersEventsInstancesGetCalendarParamsSelectChangeKey                     UsersEventsInstancesGetCalendarParamsSelect = "changeKey"
	UsersEventsInstancesGetCalendarParamsSelectColor                         UsersEventsInstancesGetCalendarParamsSelect = "color"
	UsersEventsInstancesGetCalendarParamsSelectDefaultOnlineMeetingProvider  UsersEventsInstancesGetCalendarParamsSelect = "defaultOnlineMeetingProvider"
	UsersEventsInstancesGetCalendarParamsSelectEvents                        UsersEventsInstancesGetCalendarParamsSelect = "events"
	UsersEventsInstancesGetCalendarParamsSelectHexColor                      UsersEventsInstancesGetCalendarParamsSelect = "hexColor"
	UsersEventsInstancesGetCalendarParamsSelectId                            UsersEventsInstancesGetCalendarParamsSelect = "id"
	UsersEventsInstancesGetCalendarParamsSelectIsDefaultCalendar             UsersEventsInstancesGetCalendarParamsSelect = "isDefaultCalendar"
	UsersEventsInstancesGetCalendarParamsSelectIsRemovable                   UsersEventsInstancesGetCalendarParamsSelect = "isRemovable"
	UsersEventsInstancesGetCalendarParamsSelectIsTallyingResponses           UsersEventsInstancesGetCalendarParamsSelect = "isTallyingResponses"
	UsersEventsInstancesGetCalendarParamsSelectMultiValueExtendedProperties  UsersEventsInstancesGetCalendarParamsSelect = "multiValueExtendedProperties"
	UsersEventsInstancesGetCalendarParamsSelectName                          UsersEventsInstancesGetCalendarParamsSelect = "name"
	UsersEventsInstancesGetCalendarParamsSelectOwner                         UsersEventsInstancesGetCalendarParamsSelect = "owner"
	UsersEventsInstancesGetCalendarParamsSelectSingleValueExtendedProperties UsersEventsInstancesGetCalendarParamsSelect = "singleValueExtendedProperties"
)

// Defines values for UsersEventsInstancesListExtensionsParamsOrderby.
const (
	UsersEventsInstancesListExtensionsParamsOrderbyId     UsersEventsInstancesListExtensionsParamsOrderby = "id"
	UsersEventsInstancesListExtensionsParamsOrderbyIdDesc UsersEventsInstancesListExtensionsParamsOrderby = "id desc"
)

// Defines values for UsersEventsInstancesListExtensionsParamsSelect.
const (
	UsersEventsInstancesListExtensionsParamsSelectId UsersEventsInstancesListExtensionsParamsSelect = "id"
)

// Defines values for UsersEventsInstancesListExtensionsParamsExpand.
const (
	UsersEventsInstancesListExtensionsParamsExpandAsterisk UsersEventsInstancesListExtensionsParamsExpand = "*"
)

// Defines values for UsersEventsInstancesGetExtensionsParamsSelect.
const (
	UsersEventsInstancesGetExtensionsParamsSelectId UsersEventsInstancesGetExtensionsParamsSelect = "id"
)

// Defines values for UsersEventsInstancesGetExtensionsParamsExpand.
const (
	UsersEventsInstancesGetExtensionsParamsExpandAsterisk UsersEventsInstancesGetExtensionsParamsExpand = "*"
)

// Defines values for UsersListExtensionsParamsOrderby.
const (
	UsersListExtensionsParamsOrderbyId     UsersListExtensionsParamsOrderby = "id"
	UsersListExtensionsParamsOrderbyIdDesc UsersListExtensionsParamsOrderby = "id desc"
)

// Defines values for UsersListExtensionsParamsSelect.
const (
	UsersListExtensionsParamsSelectId UsersListExtensionsParamsSelect = "id"
)

// Defines values for UsersListExtensionsParamsExpand.
const (
	UsersListExtensionsParamsExpandAsterisk UsersListExtensionsParamsExpand = "*"
)

// Defines values for UsersGetExtensionsParamsSelect.
const (
	UsersGetExtensionsParamsSelectId UsersGetExtensionsParamsSelect = "id"
)

// Defines values for UsersGetExtensionsParamsExpand.
const (
	Asterisk UsersGetExtensionsParamsExpand = "*"
)

// ODataCountResponse defines model for ODataCountResponse.
type ODataCountResponse = int32

// ReferenceNumeric defines model for ReferenceNumeric.
type ReferenceNumeric = interface{}

// MicrosoftGraphJson defines model for microsoft.graph.Json.
type MicrosoftGraphJson = map[string]interface{}

// MicrosoftGraphODataErrorsErrorDetails defines model for microsoft.graph.ODataErrors.ErrorDetails.
type MicrosoftGraphODataErrorsErrorDetails struct {
	Code    string  `json:"code"`
	Message string  `json:"message"`
	Target  *string `json:"target"`
}

// MicrosoftGraphODataErrorsInnerError The structure of this object is service-specific
type MicrosoftGraphODataErrorsInnerError = map[string]interface{}

// MicrosoftGraphODataErrorsMainError defines model for microsoft.graph.ODataErrors.MainError.
type MicrosoftGraphODataErrorsMainError struct {
	Code    string                                   `json:"code"`
	Details *[]MicrosoftGraphODataErrorsErrorDetails `json:"details,omitempty"`

	// InnerError The structure of this object is service-specific
	InnerError *MicrosoftGraphODataErrorsInnerError `json:"innerError,omitempty"`
	Message    string                               `json:"message"`
	Target     *string                              `json:"target"`
}

// MicrosoftGraphODataErrorsODataError defines model for microsoft.graph.ODataErrors.ODataError.
type MicrosoftGraphODataErrorsODataError struct {
	Error MicrosoftGraphODataErrorsMainError `json:"error"`
}

// MicrosoftGraphAccessAction defines model for microsoft.graph.accessAction.
type MicrosoftGraphAccessAction = map[string]interface{}

// MicrosoftGraphActionState State of the action on the device
type MicrosoftGraphActionState string

// MicrosoftGraphActivityHistoryItem defines model for microsoft.graph.activityHistoryItem.
type MicrosoftGraphActivityHistoryItem struct {
	// ActiveDurationSeconds Optional. The duration of active user engagement. if not supplied, this is calculated from the startedDateTime and lastActiveDateTime.
	ActiveDurationSeconds *int32                      `json:"activeDurationSeconds"`
	Activity              *MicrosoftGraphUserActivity `json:"activity,omitempty"`

	// CreatedDateTime Set by the server. DateTime in UTC when the object was created on the server.
	CreatedDateTime *time.Time `json:"createdDateTime"`

	// ExpirationDateTime Optional. UTC DateTime when the historyItem will undergo hard-delete. Can be set by the client.
	ExpirationDateTime *time.Time `json:"expirationDateTime"`

	// Id The unique idenfier for an entity. Read-only.
	Id *string `json:"id,omitempty"`

	// LastActiveDateTime Optional. UTC DateTime when the historyItem (activity session) was last understood as active or finished - if null, historyItem status should be Ongoing.
	LastActiveDateTime *time.Time `json:"lastActiveDateTime"`

	// LastModifiedDateTime Set by the server. DateTime in UTC when the object was modified on the server.
	LastModifiedDateTime *time.Time `json:"lastModifiedDateTime"`

	// StartedDateTime Required. UTC DateTime when the historyItem (activity session) was started. Required for timeline history.
	StartedDateTime *time.Time `json:"startedDateTime,omitempty"`

	// Status Set by the server. A status code used to identify valid objects. Values: active, updated, deleted, ignored.
	Status *MicrosoftGraphActivityHistoryItem_Status `json:"status,omitempty"`

	// UserTimezone Optional. The timezone in which the user's device used to generate the activity was located at activity creation time. Values supplied as Olson IDs in order to support cross-platform representation.
	UserTimezone *string `json:"userTimezone"`
}

// MicrosoftGraphActivityHistoryItemStatus1 defines model for .
type MicrosoftGraphActivityHistoryItemStatus1 = map[string]interface{}

// MicrosoftGraphActivityHistoryItem_Status Set by the server. A status code used to identify valid objects. Values: active, updated, deleted, ignored.
type MicrosoftGraphActivityHistoryItem_Status struct {
	union json.RawMessage
}

// MicrosoftGraphAgreementAcceptance defines model for microsoft.graph.agreementAcceptance.
type MicrosoftGraphAgreementAcceptance struct {
	// AgreementFileId The identifier of the agreement file accepted by the user.
	AgreementFileId *string `json:"agreementFileId"`

	// AgreementId The identifier of the agreement.
	AgreementId *string `json:"agreementId"`

	// DeviceDisplayName The display name of the device used for accepting the agreement.
	DeviceDisplayName *string `json:"deviceDisplayName"`

	// DeviceId The unique identifier of the device used for accepting the agreement. Supports $filter (eq) and eq for null values.
	DeviceId *string `json:"deviceId"`

	// DeviceOSType The operating system used to accept the agreement.
	DeviceOSType *string `json:"deviceOSType"`

	// DeviceOSVersion The operating system version of the device used to accept the agreement.
	DeviceOSVersion *string `json:"deviceOSVersion"`

	// ExpirationDateTime The expiration date time of the acceptance. The Timestamp type represents date and time information using ISO 8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 is 2014-01-01T00:00:00Z. Supports $filter (eq, ge, le) and eq for null values.
	ExpirationDateTime *time.Time `json:"expirationDateTime"`

	// Id The unique idenfier for an entity. Read-only.
	Id *string `json:"id,omitempty"`

	// RecordedDateTime The Timestamp type represents date and time information using ISO 8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 is 2014-01-01T00:00:00Z.
	RecordedDateTime *time.Time `json:"recordedDateTime"`

	// State The state of the agreement acceptance. Possible values are: accepted, declined. Supports $filter (eq).
	State *MicrosoftGraphAgreementAcceptance_State `json:"state,omitempty"`

	// UserDisplayName Display name of the user when the acceptance was recorded.
	UserDisplayName *string `json:"userDisplayName"`

	// UserEmail Email of the user when the acceptance was recorded.
	UserEmail *string `json:"userEmail"`

	// UserId The identifier of the user who accepted the agreement. Supports $filter (eq).
	UserId *string `json:"userId"`

	// UserPrincipalName UPN of the user when the acceptance was recorded.
	UserPrincipalName *string `json:"userPrincipalName"`
}

// MicrosoftGraphAgreementAcceptanceState1 defines model for .
type MicrosoftGraphAgreementAcceptanceState1 = map[string]interface{}

// MicrosoftGraphAgreementAcceptance_State The state of the agreement acceptance. Possible values are: accepted, declined. Supports $filter (eq).
type MicrosoftGraphAgreementAcceptance_State struct {
	union json.RawMessage
}

// MicrosoftGraphAgreementAcceptanceState defines model for microsoft.graph.agreementAcceptanceState.
type MicrosoftGraphAgreementAcceptanceState string

// MicrosoftGraphAlbum defines model for microsoft.graph.album.
type MicrosoftGraphAlbum struct {
	// CoverImageItemId Unique identifier of the [driveItem][] that is the cover of the album.
	CoverImageItemId *string `json:"coverImageItemId"`
}

// MicrosoftGraphAlternativeSecurityId defines model for microsoft.graph.alternativeSecurityId.
type MicrosoftGraphAlternativeSecurityId struct {
	// IdentityProvider For internal use only.
	IdentityProvider *string `json:"identityProvider"`

	// Key For internal use only.
	Key *string `json:"key"`

	// Type For internal use only.
	Type *int32 `json:"type"`
}

// MicrosoftGraphAppIdentity defines model for microsoft.graph.appIdentity.
type MicrosoftGraphAppIdentity struct {
	// AppId Refers to the Unique GUID representing Application Id in the Azure Active Directory.
	AppId *string `json:"appId"`

	// DisplayName Refers to the Application Name displayed in the Azure Portal.
	DisplayName *string `json:"displayName"`

	// ServicePrincipalId Refers to the Unique GUID indicating Service Principal Id in Azure Active Directory for the corresponding App.
	ServicePrincipalId *string `json:"servicePrincipalId"`

	// ServicePrincipalName Refers to the Service Principal Name is the Application name in the tenant.
	ServicePrincipalName *string `json:"servicePrincipalName"`
}

// MicrosoftGraphAppLogUploadState AppLogUploadStatus
type MicrosoftGraphAppLogUploadState string

// MicrosoftGraphAppRoleAssignment defines model for microsoft.graph.appRoleAssignment.
type MicrosoftGraphAppRoleAssignment struct {
	// AppRoleId The identifier (id) for the app role which is assigned to the principal. This app role must be exposed in the appRoles property on the resource application's service principal (resourceId). If the resource application has not declared any app roles, a default app role ID of 00000000-0000-0000-0000-000000000000 can be specified to signal that the principal is assigned to the resource app without any specific app roles. Required on create.
	AppRoleId *openapi_types.UUID `json:"appRoleId,omitempty"`

	// CreatedDateTime The time when the app role assignment was created. The Timestamp type represents date and time information using ISO 8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 is 2014-01-01T00:00:00Z. Read-only.
	CreatedDateTime *time.Time `json:"createdDateTime"`

	// DeletedDateTime Date and time when this object was deleted. Always null when the object hasn't been deleted.
	DeletedDateTime *time.Time `json:"deletedDateTime"`

	// Id The unique idenfier for an entity. Read-only.
	Id *string `json:"id,omitempty"`

	// PrincipalDisplayName The display name of the user, group, or service principal that was granted the app role assignment. Read-only. Supports $filter (eq and startswith).
	PrincipalDisplayName *string `json:"principalDisplayName"`

	// PrincipalId The unique identifier (id) for the user, security group, or service principal being granted the app role. Security groups with dynamic memberships are supported. Required on create.
	PrincipalId *openapi_types.UUID `json:"principalId"`

	// PrincipalType The type of the assigned principal. This can either be User, Group, or ServicePrincipal. Read-only.
	PrincipalType *string `json:"principalType"`

	// ResourceDisplayName The display name of the resource app's service principal to which the assignment is made.
	ResourceDisplayName *string `json:"resourceDisplayName"`

	// ResourceId The unique identifier (id) for the resource service principal for which the assignment is made. Required on create. Supports $filter (eq only).
	ResourceId *openapi_types.UUID `json:"resourceId"`
}

// MicrosoftGraphAssignedLabel defines model for microsoft.graph.assignedLabel.
type MicrosoftGraphAssignedLabel struct {
	// DisplayName The display name of the label. Read-only.
	DisplayName *string `json:"displayName"`

	// LabelId The unique identifier of the label.
	LabelId *string `json:"labelId"`
}

// MicrosoftGraphAssignedLicense defines model for microsoft.graph.assignedLicense.
type MicrosoftGraphAssignedLicense struct {
	// DisabledPlans A collection of the unique identifiers for plans that have been disabled.
	DisabledPlans *[]openapi_types.UUID `json:"disabledPlans,omitempty"`

	// SkuId The unique identifier for the SKU.
	SkuId *openapi_types.UUID `json:"skuId"`
}

// MicrosoftGraphAssignedPlan defines model for microsoft.graph.assignedPlan.
type MicrosoftGraphAssignedPlan struct {
	// AssignedDateTime The date and time at which the plan was assigned. The Timestamp type represents date and time information using ISO 8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 is 2014-01-01T00:00:00Z.
	AssignedDateTime *time.Time `json:"assignedDateTime"`

	// CapabilityStatus Condition of the capability assignment. The possible values are Enabled, Warning, Suspended, Deleted, LockedOut. See a detailed description of each value.
	CapabilityStatus *string `json:"capabilityStatus"`

	// Service The name of the service; for example, exchange.
	Service *string `json:"service"`

	// ServicePlanId A GUID that identifies the service plan. For a complete list of GUIDs and their equivalent friendly service names, see Product names and service plan identifiers for licensing.
	ServicePlanId *openapi_types.UUID `json:"servicePlanId"`
}

// MicrosoftGraphAssociatedTeamInfo defines model for microsoft.graph.associatedTeamInfo.
type MicrosoftGraphAssociatedTeamInfo struct {
	// DisplayName The name of the team.
	DisplayName *string `json:"displayName"`

	// Id The unique idenfier for an entity. Read-only.
	Id   *string                                `json:"id,omitempty"`
	Team *MicrosoftGraphAssociatedTeamInfo_Team `json:"team,omitempty"`

	// TenantId The ID of the Azure Active Directory tenant.
	TenantId *string `json:"tenantId"`
}

// MicrosoftGraphAssociatedTeamInfoTeam1 defines model for .
type MicrosoftGraphAssociatedTeamInfoTeam1 = map[string]interface{}

// MicrosoftGraphAssociatedTeamInfo_Team defines model for MicrosoftGraphAssociatedTeamInfo.Team.
type MicrosoftGraphAssociatedTeamInfo_Team struct {
	union json.RawMessage
}

// MicrosoftGraphAttachment defines model for microsoft.graph.attachment.
type MicrosoftGraphAttachment struct {
	// ContentType The MIME type.
	ContentType *string `json:"contentType"`

	// Id The unique idenfier for an entity. Read-only.
	Id *string `json:"id,omitempty"`

	// IsInline true if the attachment is an inline attachment; otherwise, false.
	IsInline *bool `json:"isInline,omitempty"`

	// LastModifiedDateTime The Timestamp type represents date and time information using ISO 8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 is 2014-01-01T00:00:00Z
	LastModifiedDateTime *time.Time `json:"lastModifiedDateTime"`

	// Name The attachment's file name.
	Name *string `json:"name"`

	// Size The length of the attachment in bytes.
	Size *int32 `json:"size,omitempty"`
}

// MicrosoftGraphAttachmentBase defines model for microsoft.graph.attachmentBase.
type MicrosoftGraphAttachmentBase struct {
	// ContentType The MIME type.
	ContentType *string `json:"contentType"`

	// Id The unique idenfier for an entity. Read-only.
	Id *string `json:"id,omitempty"`

	// LastModifiedDateTime The Timestamp type represents date and time information using ISO 8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 is 2014-01-01T00:00:00Z.
	LastModifiedDateTime *time.Time `json:"lastModifiedDateTime"`

	// Name The display name of the attachment. This does not need to be the actual file name.
	Name *string `json:"name"`

	// Size The length of the attachment in bytes.
	Size *int32 `json:"size,omitempty"`
}

// MicrosoftGraphAttachmentCollectionResponse defines model for microsoft.graph.attachmentCollectionResponse.
type MicrosoftGraphAttachmentCollectionResponse struct {
	OdataNextLink *string                     `json:"@odata.nextLink"`
	Value         *[]MicrosoftGraphAttachment `json:"value,omitempty"`
}

// MicrosoftGraphAttachmentItem defines model for microsoft.graph.attachmentItem.
type MicrosoftGraphAttachmentItem struct {
	// AttachmentType The type of attachment. Possible values are: file, item, reference. Required.
	AttachmentType *MicrosoftGraphAttachmentItem_AttachmentType `json:"attachmentType,omitempty"`

	// ContentId The CID or Content-Id of the attachment for referencing in case of in-line attachments using <img src='cid:contentId'> tag in HTML messages. Optional.
	ContentId *string `json:"contentId"`

	// ContentType The nature of the data in the attachment. Optional.
	ContentType *string `json:"contentType"`

	// IsInline true if the attachment is an inline attachment; otherwise, false. Optional.
	IsInline *bool `json:"isInline"`

	// Name The display name of the attachment. This can be a descriptive string and does not have to be the actual file name. Required.
	Name *string `json:"name"`

	// Size The length of the attachment in bytes. Required.
	Size *int64 `json:"size"`
}

// MicrosoftGraphAttachmentItemAttachmentType1 defines model for .
type MicrosoftGraphAttachmentItemAttachmentType1 = map[string]interface{}

// MicrosoftGraphAttachmentItem_AttachmentType The type of attachment. Possible values are: file, item, reference. Required.
type MicrosoftGraphAttachmentItem_AttachmentType struct {
	union json.RawMessage
}

// MicrosoftGraphAttachmentSession defines model for microsoft.graph.attachmentSession.
type MicrosoftGraphAttachmentSession struct {
	// Content The content streams that are uploaded.
	Content *string `json:"content"`

	// ExpirationDateTime The date and time in UTC when the upload session will expire. The complete file must be uploaded before this expiration time is reached.
	ExpirationDateTime *time.Time `json:"expirationDateTime"`

	// Id The unique idenfier for an entity. Read-only.
	Id *string `json:"id,omitempty"`

	// NextExpectedRanges Indicates a single value {start} that represents the location in the file where the next upload should begin.
	NextExpectedRanges *[]string `json:"nextExpectedRanges,omitempty"`
}

// MicrosoftGraphAttachmentType defines model for microsoft.graph.attachmentType.
type MicrosoftGraphAttachmentType string

// MicrosoftGraphAttendanceInterval defines model for microsoft.graph.attendanceInterval.
type MicrosoftGraphAttendanceInterval struct {
	// DurationInSeconds Duration of the meeting interval in seconds; that is, the difference between joinDateTime and leaveDateTime.
	DurationInSeconds *int32 `json:"durationInSeconds"`

	// JoinDateTime The time the attendee joined in UTC.
	JoinDateTime *time.Time `json:"joinDateTime"`

	// LeaveDateTime The time the attendee left in UTC.
	LeaveDateTime *time.Time `json:"leaveDateTime"`
}

// MicrosoftGraphAttendanceRecord defines model for microsoft.graph.attendanceRecord.
type MicrosoftGraphAttendanceRecord struct {
	// AttendanceIntervals List of time periods between joining and leaving a meeting.
	AttendanceIntervals *[]MicrosoftGraphAttendanceRecord_AttendanceIntervals_Item `json:"attendanceIntervals,omitempty"`

	// EmailAddress Email address of the user associated with this attendance record.
	EmailAddress *string `json:"emailAddress"`

	// Id The unique idenfier for an entity. Read-only.
	Id *string `json:"id,omitempty"`

	// Identity Identity of the user associated with this attendance record.
	Identity *MicrosoftGraphAttendanceRecord_Identity `json:"identity,omitempty"`

	// Role Role of the attendee. Possible values are: None, Attendee, Presenter, and Organizer.
	Role *string `json:"role"`

	// TotalAttendanceInSeconds Total duration of the attendances in seconds.
	TotalAttendanceInSeconds *int32 `json:"totalAttendanceInSeconds"`
}

// MicrosoftGraphAttendanceRecordAttendanceIntervals1 defines model for .
type MicrosoftGraphAttendanceRecordAttendanceIntervals1 = map[string]interface{}

// MicrosoftGraphAttendanceRecord_AttendanceIntervals_Item defines model for microsoft.graph.attendanceRecord.attendanceIntervals.Item.
type MicrosoftGraphAttendanceRecord_AttendanceIntervals_Item struct {
	union json.RawMessage
}

// MicrosoftGraphAttendanceRecordIdentity1 defines model for .
type MicrosoftGraphAttendanceRecordIdentity1 = map[string]interface{}

// MicrosoftGraphAttendanceRecord_Identity Identity of the user associated with this attendance record.
type MicrosoftGraphAttendanceRecord_Identity struct {
	union json.RawMessage
}

// MicrosoftGraphAttendee defines model for microsoft.graph.attendee.
type MicrosoftGraphAttendee struct {
	// EmailAddress The recipient's email address.
	EmailAddress *MicrosoftGraphAttendee_EmailAddress `json:"emailAddress,omitempty"`

	// ProposedNewTime An alternate date/time proposed by the attendee for a meeting request to start and end. If the attendee hasn't proposed another time, then this property is not included in a response of a GET event.
	ProposedNewTime *MicrosoftGraphAttendee_ProposedNewTime `json:"proposedNewTime,omitempty"`

	// Status The attendee's response (none, accepted, declined, etc.) for the event and date-time that the response was sent.
	Status *MicrosoftGraphAttendee_Status `json:"status,omitempty"`

	// Type The type of attendee. The possible values are: required, optional, resource. Currently if the attendee is a person, findMeetingTimes always considers the person is of the Required type.
	Type *MicrosoftGraphAttendee_Type `json:"type,omitempty"`
}

// MicrosoftGraphAttendeeEmailAddress1 defines model for .
type MicrosoftGraphAttendeeEmailAddress1 = map[string]interface{}

// MicrosoftGraphAttendee_EmailAddress The recipient's email address.
type MicrosoftGraphAttendee_EmailAddress struct {
	union json.RawMessage
}

// MicrosoftGraphAttendeeProposedNewTime1 defines model for .
type MicrosoftGraphAttendeeProposedNewTime1 = map[string]interface{}

// MicrosoftGraphAttendee_ProposedNewTime An alternate date/time proposed by the attendee for a meeting request to start and end. If the attendee hasn't proposed another time, then this property is not included in a response of a GET event.
type MicrosoftGraphAttendee_ProposedNewTime struct {
	union json.RawMessage
}

// MicrosoftGraphAttendeeStatus1 defines model for .
type MicrosoftGraphAttendeeStatus1 = map[string]interface{}

// MicrosoftGraphAttendee_Status The attendee's response (none, accepted, declined, etc.) for the event and date-time that the response was sent.
type MicrosoftGraphAttendee_Status struct {
	union json.RawMessage
}

// MicrosoftGraphAttendeeType1 defines model for .
type MicrosoftGraphAttendeeType1 = map[string]interface{}

// MicrosoftGraphAttendee_Type The type of attendee. The possible values are: required, optional, resource. Currently if the attendee is a person, findMeetingTimes always considers the person is of the Required type.
type MicrosoftGraphAttendee_Type struct {
	union json.RawMessage
}

// MicrosoftGraphAttendeeBase defines model for microsoft.graph.attendeeBase.
type MicrosoftGraphAttendeeBase struct {
	// EmailAddress The recipient's email address.
	EmailAddress *MicrosoftGraphAttendeeBase_EmailAddress `json:"emailAddress,omitempty"`

	// Type The type of attendee. The possible values are: required, optional, resource. Currently if the attendee is a person, findMeetingTimes always considers the person is of the Required type.
	Type *MicrosoftGraphAttendeeBase_Type `json:"type,omitempty"`
}

// MicrosoftGraphAttendeeBaseEmailAddress1 defines model for .
type MicrosoftGraphAttendeeBaseEmailAddress1 = map[string]interface{}

// MicrosoftGraphAttendeeBase_EmailAddress The recipient's email address.
type MicrosoftGraphAttendeeBase_EmailAddress struct {
	union json.RawMessage
}

// MicrosoftGraphAttendeeBaseType1 defines model for .
type MicrosoftGraphAttendeeBaseType1 = map[string]interface{}

// MicrosoftGraphAttendeeBase_Type The type of attendee. The possible values are: required, optional, resource. Currently if the attendee is a person, findMeetingTimes always considers the person is of the Required type.
type MicrosoftGraphAttendeeBase_Type struct {
	union json.RawMessage
}

// MicrosoftGraphAttendeeType defines model for microsoft.graph.attendeeType.
type MicrosoftGraphAttendeeType string

// MicrosoftGraphAttestationLevel defines model for microsoft.graph.attestationLevel.
type MicrosoftGraphAttestationLevel string

// MicrosoftGraphAudio defines model for microsoft.graph.audio.
type MicrosoftGraphAudio struct {
	// Album The title of the album for this audio file.
	Album *string `json:"album"`

	// AlbumArtist The artist named on the album for the audio file.
	AlbumArtist *string `json:"albumArtist"`

	// Artist The performing artist for the audio file.
	Artist *string `json:"artist"`

	// Bitrate Bitrate expressed in kbps.
	Bitrate *int64 `json:"bitrate"`

	// Composers The name of the composer of the audio file.
	Composers *string `json:"composers"`

	// Copyright Copyright information for the audio file.
	Copyright *string `json:"copyright"`

	// Disc The number of the disc this audio file came from.
	Disc *int16 `json:"disc"`

	// DiscCount The total number of discs in this album.
	DiscCount *int16 `json:"discCount"`

	// Duration Duration of the audio file, expressed in milliseconds
	Duration *int64 `json:"duration"`

	// Genre The genre of this audio file.
	Genre *string `json:"genre"`

	// HasDrm Indicates if the file is protected with digital rights management.
	HasDrm *bool `json:"hasDrm"`

	// IsVariableBitrate Indicates if the file is encoded with a variable bitrate.
	IsVariableBitrate *bool `json:"isVariableBitrate"`

	// Title The title of the audio file.
	Title *string `json:"title"`

	// Track The number of the track on the original disc for this audio file.
	Track *int32 `json:"track"`

	// TrackCount The total number of tracks on the original disc for this audio file.
	TrackCount *int32 `json:"trackCount"`

	// Year The year the audio file was recorded.
	Year *int32 `json:"year"`
}

// MicrosoftGraphAudioConferencing defines model for microsoft.graph.audioConferencing.
type MicrosoftGraphAudioConferencing struct {
	// ConferenceId The conference id of the online meeting.
	ConferenceId *string `json:"conferenceId"`

	// DialinUrl A URL to the externally-accessible web page that contains dial-in information.
	DialinUrl      *string `json:"dialinUrl"`
	TollFreeNumber *string `json:"tollFreeNumber"`

	// TollFreeNumbers List of toll-free numbers that are displayed in the meeting invite.
	TollFreeNumbers *[]string `json:"tollFreeNumbers,omitempty"`
	TollNumber      *string   `json:"tollNumber"`

	// TollNumbers List of toll numbers that are displayed in the meeting invite.
	TollNumbers *[]string `json:"tollNumbers,omitempty"`
}

// MicrosoftGraphAuthentication defines model for microsoft.graph.authentication.
type MicrosoftGraphAuthentication struct {
	// EmailMethods The email address registered to a user for authentication.
	EmailMethods *[]MicrosoftGraphEmailAuthenticationMethod `json:"emailMethods,omitempty"`

	// Fido2Methods Represents the FIDO2 security keys registered to a user for authentication.
	Fido2Methods *[]MicrosoftGraphFido2AuthenticationMethod `json:"fido2Methods,omitempty"`

	// Id The unique idenfier for an entity. Read-only.
	Id *string `json:"id,omitempty"`

	// Methods Represents all authentication methods registered to a user.
	Methods *[]MicrosoftGraphAuthenticationMethod `json:"methods,omitempty"`

	// MicrosoftAuthenticatorMethods The details of the Microsoft Authenticator app registered to a user for authentication.
	MicrosoftAuthenticatorMethods *[]MicrosoftGraphMicrosoftAuthenticatorAuthenticationMethod `json:"microsoftAuthenticatorMethods,omitempty"`

	// Operations Represents the status of a long-running operation.
	Operations *[]MicrosoftGraphLongRunningOperation `json:"operations,omitempty"`

	// PasswordMethods Represents the password that's registered to a user for authentication. For security, the password itself will never be returned in the object, but action can be taken to reset a password.
	PasswordMethods *[]MicrosoftGraphPasswordAuthenticationMethod `json:"passwordMethods,omitempty"`

	// PhoneMethods The phone numbers registered to a user for authentication.
	PhoneMethods *[]MicrosoftGraphPhoneAuthenticationMethod `json:"phoneMethods,omitempty"`

	// SoftwareOathMethods The software OATH TOTP applications registered to a user for authentication.
	SoftwareOathMethods *[]MicrosoftGraphSoftwareOathAuthenticationMethod `json:"softwareOathMethods,omitempty"`

	// TemporaryAccessPassMethods Represents a Temporary Access Pass registered to a user for authentication through time-limited passcodes.
	TemporaryAccessPassMethods *[]MicrosoftGraphTemporaryAccessPassAuthenticationMethod `json:"temporaryAccessPassMethods,omitempty"`

	// WindowsHelloForBusinessMethods Represents the Windows Hello for Business authentication method registered to a user for authentication.
	WindowsHelloForBusinessMethods *[]MicrosoftGraphWindowsHelloForBusinessAuthenticationMethod `json:"windowsHelloForBusinessMethods,omitempty"`
}

// MicrosoftGraphAuthenticationMethod defines model for microsoft.graph.authenticationMethod.
type MicrosoftGraphAuthenticationMethod struct {
	// Id The unique idenfier for an entity. Read-only.
	Id *string `json:"id,omitempty"`
}

// MicrosoftGraphAuthenticationMethodKeyStrength defines model for microsoft.graph.authenticationMethodKeyStrength.
type MicrosoftGraphAuthenticationMethodKeyStrength string

// MicrosoftGraphAuthenticationMethodSignInState defines model for microsoft.graph.authenticationMethodSignInState.
type MicrosoftGraphAuthenticationMethodSignInState string

// MicrosoftGraphAuthenticationPhoneType defines model for microsoft.graph.authenticationPhoneType.
type MicrosoftGraphAuthenticationPhoneType string

// MicrosoftGraphAuthorizationInfo defines model for microsoft.graph.authorizationInfo.
type MicrosoftGraphAuthorizationInfo struct {
	CertificateUserIds *[]string `json:"certificateUserIds,omitempty"`
}

// MicrosoftGraphAutomaticRepliesSetting defines model for microsoft.graph.automaticRepliesSetting.
type MicrosoftGraphAutomaticRepliesSetting struct {
	// ExternalAudience The set of audience external to the signed-in user's organization who will receive the ExternalReplyMessage, if Status is AlwaysEnabled or Scheduled. The possible values are: none, contactsOnly, all.
	ExternalAudience *MicrosoftGraphAutomaticRepliesSetting_ExternalAudience `json:"externalAudience,omitempty"`

	// ExternalReplyMessage The automatic reply to send to the specified external audience, if Status is AlwaysEnabled or Scheduled.
	ExternalReplyMessage *string `json:"externalReplyMessage"`

	// InternalReplyMessage The automatic reply to send to the audience internal to the signed-in user's organization, if Status is AlwaysEnabled or Scheduled.
	InternalReplyMessage *string `json:"internalReplyMessage"`

	// ScheduledEndDateTime The date and time that automatic replies are set to end, if Status is set to Scheduled.
	ScheduledEndDateTime *MicrosoftGraphAutomaticRepliesSetting_ScheduledEndDateTime `json:"scheduledEndDateTime,omitempty"`

	// ScheduledStartDateTime The date and time that automatic replies are set to begin, if Status is set to Scheduled.
	ScheduledStartDateTime *MicrosoftGraphAutomaticRepliesSetting_ScheduledStartDateTime `json:"scheduledStartDateTime,omitempty"`

	// Status Configurations status for automatic replies. The possible values are: disabled, alwaysEnabled, scheduled.
	Status *MicrosoftGraphAutomaticRepliesSetting_Status `json:"status,omitempty"`
}

// MicrosoftGraphAutomaticRepliesSettingExternalAudience1 defines model for .
type MicrosoftGraphAutomaticRepliesSettingExternalAudience1 = map[string]interface{}

// MicrosoftGraphAutomaticRepliesSetting_ExternalAudience The set of audience external to the signed-in user's organization who will receive the ExternalReplyMessage, if Status is AlwaysEnabled or Scheduled. The possible values are: none, contactsOnly, all.
type MicrosoftGraphAutomaticRepliesSetting_ExternalAudience struct {
	union json.RawMessage
}

// MicrosoftGraphAutomaticRepliesSettingScheduledEndDateTime1 defines model for .
type MicrosoftGraphAutomaticRepliesSettingScheduledEndDateTime1 = map[string]interface{}

// MicrosoftGraphAutomaticRepliesSetting_ScheduledEndDateTime The date and time that automatic replies are set to end, if Status is set to Scheduled.
type MicrosoftGraphAutomaticRepliesSetting_ScheduledEndDateTime struct {
	union json.RawMessage
}

// MicrosoftGraphAutomaticRepliesSettingScheduledStartDateTime1 defines model for .
type MicrosoftGraphAutomaticRepliesSettingScheduledStartDateTime1 = map[string]interface{}

// MicrosoftGraphAutomaticRepliesSetting_ScheduledStartDateTime The date and time that automatic replies are set to begin, if Status is set to Scheduled.
type MicrosoftGraphAutomaticRepliesSetting_ScheduledStartDateTime struct {
	union json.RawMessage
}

// MicrosoftGraphAutomaticRepliesSettingStatus1 defines model for .
type MicrosoftGraphAutomaticRepliesSettingStatus1 = map[string]interface{}

// MicrosoftGraphAutomaticRepliesSetting_Status Configurations status for automatic replies. The possible values are: disabled, alwaysEnabled, scheduled.
type MicrosoftGraphAutomaticRepliesSetting_Status struct {
	union json.RawMessage
}

// MicrosoftGraphAutomaticRepliesStatus defines model for microsoft.graph.automaticRepliesStatus.
type MicrosoftGraphAutomaticRepliesStatus string

// MicrosoftGraphBaseItem defines model for microsoft.graph.baseItem.
type MicrosoftGraphBaseItem struct {
	// CreatedBy Identity of the user, device, or application which created the item. Read-only.
	CreatedBy *MicrosoftGraphBaseItem_CreatedBy `json:"createdBy,omitempty"`

	// CreatedByUser Identity of the user who created the item. Read-only.
	CreatedByUser *MicrosoftGraphBaseItem_CreatedByUser `json:"createdByUser,omitempty"`

	// CreatedDateTime Date and time of item creation. Read-only.
	CreatedDateTime *time.Time `json:"createdDateTime,omitempty"`

	// Description Provides a user-visible description of the item. Optional.
	Description *string `json:"description"`

	// ETag ETag for the item. Read-only.
	ETag *string `json:"eTag"`

	// Id The unique idenfier for an entity. Read-only.
	Id *string `json:"id,omitempty"`

	// LastModifiedBy Identity of the user, device, and application which last modified the item. Read-only.
	LastModifiedBy *MicrosoftGraphBaseItem_LastModifiedBy `json:"lastModifiedBy,omitempty"`

	// LastModifiedByUser Identity of the user who last modified the item. Read-only.
	LastModifiedByUser *MicrosoftGraphBaseItem_LastModifiedByUser `json:"lastModifiedByUser,omitempty"`

	// LastModifiedDateTime Date and time the item was last modified. Read-only.
	LastModifiedDateTime *time.Time `json:"lastModifiedDateTime,omitempty"`

	// Name The name of the item. Read-write.
	Name *string `json:"name"`

	// ParentReference Parent information, if the item has a parent. Read-write.
	ParentReference *MicrosoftGraphBaseItem_ParentReference `json:"parentReference,omitempty"`

	// WebUrl URL that displays the resource in the browser. Read-only.
	WebUrl *string `json:"webUrl"`
}

// MicrosoftGraphBaseItemCreatedBy1 defines model for .
type MicrosoftGraphBaseItemCreatedBy1 = map[string]interface{}

// MicrosoftGraphBaseItem_CreatedBy Identity of the user, device, or application which created the item. Read-only.
type MicrosoftGraphBaseItem_CreatedBy struct {
	union json.RawMessage
}

// MicrosoftGraphBaseItemCreatedByUser1 defines model for .
type MicrosoftGraphBaseItemCreatedByUser1 = map[string]interface{}

// MicrosoftGraphBaseItem_CreatedByUser Identity of the user who created the item. Read-only.
type MicrosoftGraphBaseItem_CreatedByUser struct {
	union json.RawMessage
}

// MicrosoftGraphBaseItemLastModifiedBy1 defines model for .
type MicrosoftGraphBaseItemLastModifiedBy1 = map[string]interface{}

// MicrosoftGraphBaseItem_LastModifiedBy Identity of the user, device, and application which last modified the item. Read-only.
type MicrosoftGraphBaseItem_LastModifiedBy struct {
	union json.RawMessage
}

// MicrosoftGraphBaseItemLastModifiedByUser1 defines model for .
type MicrosoftGraphBaseItemLastModifiedByUser1 = map[string]interface{}

// MicrosoftGraphBaseItem_LastModifiedByUser Identity of the user who last modified the item. Read-only.
type MicrosoftGraphBaseItem_LastModifiedByUser struct {
	union json.RawMessage
}

// MicrosoftGraphBaseItemParentReference1 defines model for .
type MicrosoftGraphBaseItemParentReference1 = map[string]interface{}

// MicrosoftGraphBaseItem_ParentReference Parent information, if the item has a parent. Read-write.
type MicrosoftGraphBaseItem_ParentReference struct {
	union json.RawMessage
}

// MicrosoftGraphBaseItemVersion defines model for microsoft.graph.baseItemVersion.
type MicrosoftGraphBaseItemVersion struct {
	// Id The unique idenfier for an entity. Read-only.
	Id *string `json:"id,omitempty"`

	// LastModifiedBy Identity of the user which last modified the version. Read-only.
	LastModifiedBy *MicrosoftGraphBaseItemVersion_LastModifiedBy `json:"lastModifiedBy,omitempty"`

	// LastModifiedDateTime Date and time the version was last modified. Read-only.
	LastModifiedDateTime *time.Time `json:"lastModifiedDateTime"`

	// Publication Indicates the publication status of this particular version. Read-only.
	Publication *MicrosoftGraphBaseItemVersion_Publication `json:"publication,omitempty"`
}

// MicrosoftGraphBaseItemVersionLastModifiedBy1 defines model for .
type MicrosoftGraphBaseItemVersionLastModifiedBy1 = map[string]interface{}

// MicrosoftGraphBaseItemVersion_LastModifiedBy Identity of the user which last modified the version. Read-only.
type MicrosoftGraphBaseItemVersion_LastModifiedBy struct {
	union json.RawMessage
}

// MicrosoftGraphBaseItemVersionPublication1 defines model for .
type MicrosoftGraphBaseItemVersionPublication1 = map[string]interface{}

// MicrosoftGraphBaseItemVersion_Publication Indicates the publication status of this particular version. Read-only.
type MicrosoftGraphBaseItemVersion_Publication struct {
	union json.RawMessage
}

// MicrosoftGraphBodyType defines model for microsoft.graph.bodyType.
type MicrosoftGraphBodyType string

// MicrosoftGraphBooleanColumn defines model for microsoft.graph.booleanColumn.
type MicrosoftGraphBooleanColumn = map[string]interface{}

// MicrosoftGraphBroadcastMeetingAudience defines model for microsoft.graph.broadcastMeetingAudience.
type MicrosoftGraphBroadcastMeetingAudience string

// MicrosoftGraphBroadcastMeetingCaptionSettings defines model for microsoft.graph.broadcastMeetingCaptionSettings.
type MicrosoftGraphBroadcastMeetingCaptionSettings struct {
	// IsCaptionEnabled Indicates whether captions are enabled for this Teams live event.
	IsCaptionEnabled *bool `json:"isCaptionEnabled"`

	// SpokenLanguage The spoken language.
	SpokenLanguage *string `json:"spokenLanguage"`

	// TranslationLanguages The translation languages (choose up to 6).
	TranslationLanguages *[]string `json:"translationLanguages,omitempty"`
}

// MicrosoftGraphBroadcastMeetingSettings defines model for microsoft.graph.broadcastMeetingSettings.
type MicrosoftGraphBroadcastMeetingSettings struct {
	// AllowedAudience Defines who can join the Teams live event. Possible values are listed in the following table.
	AllowedAudience *MicrosoftGraphBroadcastMeetingSettings_AllowedAudience `json:"allowedAudience,omitempty"`

	// Captions Caption settings of a Teams live event.
	Captions *MicrosoftGraphBroadcastMeetingSettings_Captions `json:"captions,omitempty"`

	// IsAttendeeReportEnabled Indicates whether attendee report is enabled for this Teams live event. Default value is false.
	IsAttendeeReportEnabled *bool `json:"isAttendeeReportEnabled"`

	// IsQuestionAndAnswerEnabled Indicates whether Q&A is enabled for this Teams live event. Default value is false.
	IsQuestionAndAnswerEnabled *bool `json:"isQuestionAndAnswerEnabled"`

	// IsRecordingEnabled Indicates whether recording is enabled for this Teams live event. Default value is false.
	IsRecordingEnabled *bool `json:"isRecordingEnabled"`

	// IsVideoOnDemandEnabled Indicates whether video on demand is enabled for this Teams live event. Default value is false.
	IsVideoOnDemandEnabled *bool `json:"isVideoOnDemandEnabled"`
}

// MicrosoftGraphBroadcastMeetingSettingsAllowedAudience1 defines model for .
type MicrosoftGraphBroadcastMeetingSettingsAllowedAudience1 = map[string]interface{}

// MicrosoftGraphBroadcastMeetingSettings_AllowedAudience Defines who can join the Teams live event. Possible values are listed in the following table.
type MicrosoftGraphBroadcastMeetingSettings_AllowedAudience struct {
	union json.RawMessage
}

// MicrosoftGraphBroadcastMeetingSettingsCaptions1 defines model for .
type MicrosoftGraphBroadcastMeetingSettingsCaptions1 = map[string]interface{}

// MicrosoftGraphBroadcastMeetingSettings_Captions Caption settings of a Teams live event.
type MicrosoftGraphBroadcastMeetingSettings_Captions struct {
	union json.RawMessage
}

// MicrosoftGraphBundle defines model for microsoft.graph.bundle.
type MicrosoftGraphBundle struct {
	// Album If the bundle is an [album][], then the album property is included
	Album *MicrosoftGraphBundle_Album `json:"album,omitempty"`

	// ChildCount Number of children contained immediately within this container.
	ChildCount *int32 `json:"childCount"`
}

// MicrosoftGraphBundleAlbum1 defines model for .
type MicrosoftGraphBundleAlbum1 = map[string]interface{}

// MicrosoftGraphBundle_Album If the bundle is an [album][], then the album property is included
type MicrosoftGraphBundle_Album struct {
	union json.RawMessage
}

// MicrosoftGraphCalculatedColumn defines model for microsoft.graph.calculatedColumn.
type MicrosoftGraphCalculatedColumn struct {
	// Format For dateTime output types, the format of the value. Possible values are: dateOnly or dateTime.
	Format *string `json:"format"`

	// Formula The formula used to compute the value for this column.
	Formula *string `json:"formula"`

	// OutputType The output type used to format values in this column. Possible values are: boolean, currency, dateTime, number, or text.
	OutputType *string `json:"outputType"`
}

// MicrosoftGraphCalendar defines model for microsoft.graph.calendar.
type MicrosoftGraphCalendar struct {
	// AllowedOnlineMeetingProviders Represent the online meeting service providers that can be used to create online meetings in this calendar. Possible values are: unknown, skypeForBusiness, skypeForConsumer, teamsForBusiness.
	AllowedOnlineMeetingProviders *[]MicrosoftGraphCalendar_AllowedOnlineMeetingProviders_Item `json:"allowedOnlineMeetingProviders,omitempty"`

	// CalendarPermissions The permissions of the users with whom the calendar is shared.
	CalendarPermissions *[]MicrosoftGraphCalendarPermission `json:"calendarPermissions,omitempty"`

	// CalendarView The calendar view for the calendar. Navigation property. Read-only.
	CalendarView *[]MicrosoftGraphEvent `json:"calendarView,omitempty"`

	// CanEdit true if the user can write to the calendar, false otherwise. This property is true for the user who created the calendar. This property is also true for a user who has been shared a calendar and granted write access.
	CanEdit *bool `json:"canEdit"`

	// CanShare true if the user has the permission to share the calendar, false otherwise. Only the user who created the calendar can share it.
	CanShare *bool `json:"canShare"`

	// CanViewPrivateItems true if the user can read calendar items that have been marked private, false otherwise.
	CanViewPrivateItems *bool `json:"canViewPrivateItems"`

	// ChangeKey Identifies the version of the calendar object. Every time the calendar is changed, changeKey changes as well. This allows Exchange to apply changes to the correct version of the object. Read-only.
	ChangeKey *string `json:"changeKey"`

	// Color Specifies the color theme to distinguish the calendar from other calendars in a UI. The property values are: auto, lightBlue, lightGreen, lightOrange, lightGray, lightYellow, lightTeal, lightPink, lightBrown, lightRed, maxColor.
	Color *MicrosoftGraphCalendar_Color `json:"color,omitempty"`

	// DefaultOnlineMeetingProvider The default online meeting provider for meetings sent from this calendar. Possible values are: unknown, skypeForBusiness, skypeForConsumer, teamsForBusiness.
	DefaultOnlineMeetingProvider *MicrosoftGraphCalendar_DefaultOnlineMeetingProvider `json:"defaultOnlineMeetingProvider,omitempty"`

	// Events The events in the calendar. Navigation property. Read-only.
	Events *[]MicrosoftGraphEvent `json:"events,omitempty"`

	// HexColor The calendar color, expressed in a hex color code of three hexadecimal values, each ranging from 00 to FF and representing the red, green, or blue components of the color in the RGB color space. If the user has never explicitly set a color for the calendar, this property is empty. Read-only.
	HexColor *string `json:"hexColor"`

	// Id The unique idenfier for an entity. Read-only.
	Id *string `json:"id,omitempty"`

	// IsDefaultCalendar true if this is the default calendar where new events are created by default, false otherwise.
	IsDefaultCalendar *bool `json:"isDefaultCalendar"`

	// IsRemovable Indicates whether this user calendar can be deleted from the user mailbox.
	IsRemovable *bool `json:"isRemovable"`

	// IsTallyingResponses Indicates whether this user calendar supports tracking of meeting responses. Only meeting invites sent from users' primary calendars support tracking of meeting responses.
	IsTallyingResponses *bool `json:"isTallyingResponses"`

	// MultiValueExtendedProperties The collection of multi-value extended properties defined for the calendar. Read-only. Nullable.
	MultiValueExtendedProperties *[]MicrosoftGraphMultiValueLegacyExtendedProperty `json:"multiValueExtendedProperties,omitempty"`

	// Name The calendar name.
	Name *string `json:"name"`

	// Owner If set, this represents the user who created or added the calendar. For a calendar that the user created or added, the owner property is set to the user. For a calendar shared with the user, the owner property is set to the person who shared that calendar with the user.
	Owner *MicrosoftGraphCalendar_Owner `json:"owner,omitempty"`

	// SingleValueExtendedProperties The collection of single-value extended properties defined for the calendar. Read-only. Nullable.
	SingleValueExtendedProperties *[]MicrosoftGraphSingleValueLegacyExtendedProperty `json:"singleValueExtendedProperties,omitempty"`
}

// MicrosoftGraphCalendarAllowedOnlineMeetingProviders1 defines model for .
type MicrosoftGraphCalendarAllowedOnlineMeetingProviders1 = map[string]interface{}

// MicrosoftGraphCalendar_AllowedOnlineMeetingProviders_Item defines model for microsoft.graph.calendar.allowedOnlineMeetingProviders.Item.
type MicrosoftGraphCalendar_AllowedOnlineMeetingProviders_Item struct {
	union json.RawMessage
}

// MicrosoftGraphCalendarColor1 defines model for .
type MicrosoftGraphCalendarColor1 = map[string]interface{}

// MicrosoftGraphCalendar_Color Specifies the color theme to distinguish the calendar from other calendars in a UI. The property values are: auto, lightBlue, lightGreen, lightOrange, lightGray, lightYellow, lightTeal, lightPink, lightBrown, lightRed, maxColor.
type MicrosoftGraphCalendar_Color struct {
	union json.RawMessage
}

// MicrosoftGraphCalendarDefaultOnlineMeetingProvider1 defines model for .
type MicrosoftGraphCalendarDefaultOnlineMeetingProvider1 = map[string]interface{}

// MicrosoftGraphCalendar_DefaultOnlineMeetingProvider The default online meeting provider for meetings sent from this calendar. Possible values are: unknown, skypeForBusiness, skypeForConsumer, teamsForBusiness.
type MicrosoftGraphCalendar_DefaultOnlineMeetingProvider struct {
	union json.RawMessage
}

// MicrosoftGraphCalendarOwner1 defines model for .
type MicrosoftGraphCalendarOwner1 = map[string]interface{}

// MicrosoftGraphCalendar_Owner If set, this represents the user who created or added the calendar. For a calendar that the user created or added, the owner property is set to the user. For a calendar shared with the user, the owner property is set to the person who shared that calendar with the user.
type MicrosoftGraphCalendar_Owner struct {
	union json.RawMessage
}

// MicrosoftGraphCalendarColor defines model for microsoft.graph.calendarColor.
type MicrosoftGraphCalendarColor string

// MicrosoftGraphCalendarGroup defines model for microsoft.graph.calendarGroup.
type MicrosoftGraphCalendarGroup struct {
	// Calendars The calendars in the calendar group. Navigation property. Read-only. Nullable.
	Calendars *[]MicrosoftGraphCalendar `json:"calendars,omitempty"`

	// ChangeKey Identifies the version of the calendar group. Every time the calendar group is changed, ChangeKey changes as well. This allows Exchange to apply changes to the correct version of the object. Read-only.
	ChangeKey *string `json:"changeKey"`

	// ClassId The class identifier. Read-only.
	ClassId *openapi_types.UUID `json:"classId"`

	// Id The unique idenfier for an entity. Read-only.
	Id *string `json:"id,omitempty"`

	// Name The group name.
	Name *string `json:"name"`
}

// MicrosoftGraphCalendarPermission defines model for microsoft.graph.calendarPermission.
type MicrosoftGraphCalendarPermission struct {
	// AllowedRoles List of allowed sharing or delegating permission levels for the calendar. Possible values are: none, freeBusyRead, limitedRead, read, write, delegateWithoutPrivateEventAccess, delegateWithPrivateEventAccess, custom.
	AllowedRoles *[]MicrosoftGraphCalendarPermission_AllowedRoles_Item `json:"allowedRoles,omitempty"`

	// EmailAddress Represents a sharee or delegate who has access to the calendar. For the 'My Organization' sharee, the address property is null. Read-only.
	EmailAddress *MicrosoftGraphCalendarPermission_EmailAddress `json:"emailAddress,omitempty"`

	// Id The unique idenfier for an entity. Read-only.
	Id *string `json:"id,omitempty"`

	// IsInsideOrganization True if the user in context (sharee or delegate) is inside the same organization as the calendar owner.
	IsInsideOrganization *bool `json:"isInsideOrganization"`

	// IsRemovable True if the user can be removed from the list of sharees or delegates for the specified calendar, false otherwise. The 'My organization' user determines the permissions other people within your organization have to the given calendar. You cannot remove 'My organization' as a sharee to a calendar.
	IsRemovable *bool `json:"isRemovable"`

	// Role Current permission level of the calendar sharee or delegate.
	Role *MicrosoftGraphCalendarPermission_Role `json:"role,omitempty"`
}

// MicrosoftGraphCalendarPermissionAllowedRoles1 defines model for .
type MicrosoftGraphCalendarPermissionAllowedRoles1 = map[string]interface{}

// MicrosoftGraphCalendarPermission_AllowedRoles_Item defines model for microsoft.graph.calendarPermission.allowedRoles.Item.
type MicrosoftGraphCalendarPermission_AllowedRoles_Item struct {
	union json.RawMessage
}

// MicrosoftGraphCalendarPermissionEmailAddress1 defines model for .
type MicrosoftGraphCalendarPermissionEmailAddress1 = map[string]interface{}

// MicrosoftGraphCalendarPermission_EmailAddress Represents a sharee or delegate who has access to the calendar. For the 'My Organization' sharee, the address property is null. Read-only.
type MicrosoftGraphCalendarPermission_EmailAddress struct {
	union json.RawMessage
}

// MicrosoftGraphCalendarPermissionRole1 defines model for .
type MicrosoftGraphCalendarPermissionRole1 = map[string]interface{}

// MicrosoftGraphCalendarPermission_Role Current permission level of the calendar sharee or delegate.
type MicrosoftGraphCalendarPermission_Role struct {
	union json.RawMessage
}

// MicrosoftGraphCalendarRoleType defines model for microsoft.graph.calendarRoleType.
type MicrosoftGraphCalendarRoleType string

// MicrosoftGraphCategoryColor defines model for microsoft.graph.categoryColor.
type MicrosoftGraphCategoryColor string

// MicrosoftGraphChangeTrackedEntity defines model for microsoft.graph.changeTrackedEntity.
type MicrosoftGraphChangeTrackedEntity struct {
	// CreatedDateTime The Timestamp type represents date and time information using ISO 8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 is 2014-01-01T00:00:00Z
	CreatedDateTime *time.Time `json:"createdDateTime"`

	// Id The unique idenfier for an entity. Read-only.
	Id *string `json:"id,omitempty"`

	// LastModifiedBy Identity of the person who last modified the entity.
	LastModifiedBy *MicrosoftGraphChangeTrackedEntity_LastModifiedBy `json:"lastModifiedBy,omitempty"`

	// LastModifiedDateTime The Timestamp type represents date and time information using ISO 8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 is 2014-01-01T00:00:00Z
	LastModifiedDateTime *time.Time `json:"lastModifiedDateTime"`
}

// MicrosoftGraphChangeTrackedEntityLastModifiedBy1 defines model for .
type MicrosoftGraphChangeTrackedEntityLastModifiedBy1 = map[string]interface{}

// MicrosoftGraphChangeTrackedEntity_LastModifiedBy Identity of the person who last modified the entity.
type MicrosoftGraphChangeTrackedEntity_LastModifiedBy struct {
	union json.RawMessage
}

// MicrosoftGraphChannel defines model for microsoft.graph.channel.
type MicrosoftGraphChannel struct {
	// CreatedDateTime Read only. Timestamp at which the channel was created.
	CreatedDateTime *time.Time `json:"createdDateTime"`

	// Description Optional textual description for the channel.
	Description *string `json:"description"`

	// DisplayName Channel name as it will appear to the user in Microsoft Teams. The maximum length is 50 characters.
	DisplayName *string `json:"displayName,omitempty"`

	// Email The email address for sending messages to the channel. Read-only.
	Email *string `json:"email"`

	// FilesFolder Metadata for the location where the channel's files are stored.
	FilesFolder *MicrosoftGraphChannel_FilesFolder `json:"filesFolder,omitempty"`

	// Id The unique idenfier for an entity. Read-only.
	Id *string `json:"id,omitempty"`

	// IsFavoriteByDefault Indicates whether the channel should automatically be marked 'favorite' for all members of the team. Can only be set programmatically with Create team. Default: false.
	IsFavoriteByDefault *bool `json:"isFavoriteByDefault"`

	// Members A collection of membership records associated with the channel.
	Members *[]MicrosoftGraphConversationMember `json:"members,omitempty"`

	// MembershipType The type of the channel. Can be set during creation and can't be changed. The possible values are: standard, private, unknownFutureValue, shared. The default value is standard. Note that you must use the Prefer: include-unknown-enum-members request header to get the following value in this evolvable enum: shared.
	MembershipType *MicrosoftGraphChannel_MembershipType `json:"membershipType,omitempty"`

	// Messages A collection of all the messages in the channel. A navigation property. Nullable.
	Messages *[]MicrosoftGraphChatMessage `json:"messages,omitempty"`

	// SharedWithTeams A collection of teams with which a channel is shared.
	SharedWithTeams *[]MicrosoftGraphSharedWithChannelTeamInfo `json:"sharedWithTeams,omitempty"`

	// Tabs A collection of all the tabs in the channel. A navigation property.
	Tabs *[]MicrosoftGraphTeamsTab `json:"tabs,omitempty"`

	// TenantId The ID of the Azure Active Directory tenant.
	TenantId *string `json:"tenantId"`

	// WebUrl A hyperlink that will go to the channel in Microsoft Teams. This is the URL that you get when you right-click a channel in Microsoft Teams and select Get link to channel. This URL should be treated as an opaque blob, and not parsed. Read-only.
	WebUrl *string `json:"webUrl"`
}

// MicrosoftGraphChannelFilesFolder1 defines model for .
type MicrosoftGraphChannelFilesFolder1 = map[string]interface{}

// MicrosoftGraphChannel_FilesFolder Metadata for the location where the channel's files are stored.
type MicrosoftGraphChannel_FilesFolder struct {
	union json.RawMessage
}

// MicrosoftGraphChannelMembershipType1 defines model for .
type MicrosoftGraphChannelMembershipType1 = map[string]interface{}

// MicrosoftGraphChannel_MembershipType The type of the channel. Can be set during creation and can't be changed. The possible values are: standard, private, unknownFutureValue, shared. The default value is standard. Note that you must use the Prefer: include-unknown-enum-members request header to get the following value in this evolvable enum: shared.
type MicrosoftGraphChannel_MembershipType struct {
	union json.RawMessage
}

// MicrosoftGraphChannelIdentity defines model for microsoft.graph.channelIdentity.
type MicrosoftGraphChannelIdentity struct {
	// ChannelId The identity of the channel in which the message was posted.
	ChannelId *string `json:"channelId"`

	// TeamId The identity of the team in which the message was posted.
	TeamId *string `json:"teamId"`
}

// MicrosoftGraphChannelMembershipType defines model for microsoft.graph.channelMembershipType.
type MicrosoftGraphChannelMembershipType string

// MicrosoftGraphChat defines model for microsoft.graph.chat.
type MicrosoftGraphChat struct {
	ChatType *MicrosoftGraphChatType `json:"chatType,omitempty"`

	// CreatedDateTime Date and time at which the chat was created. Read-only.
	CreatedDateTime *time.Time `json:"createdDateTime"`

	// Id The unique idenfier for an entity. Read-only.
	Id *string `json:"id,omitempty"`

	// InstalledApps A collection of all the apps in the chat. Nullable.
	InstalledApps *[]MicrosoftGraphTeamsAppInstallation `json:"installedApps,omitempty"`

	// LastMessagePreview Preview of the last message sent in the chat. Null if no messages have been sent in the chat. Currently, only the list chats operation supports this property.
	LastMessagePreview *MicrosoftGraphChat_LastMessagePreview `json:"lastMessagePreview,omitempty"`

	// LastUpdatedDateTime Date and time at which the chat was renamed or list of members were last changed. Read-only.
	LastUpdatedDateTime *time.Time `json:"lastUpdatedDateTime"`

	// Members A collection of all the members in the chat. Nullable.
	Members *[]MicrosoftGraphConversationMember `json:"members,omitempty"`

	// Messages A collection of all the messages in the chat. Nullable.
	Messages *[]MicrosoftGraphChatMessage `json:"messages,omitempty"`

	// OnlineMeetingInfo Represents details about an online meeting. If the chat isn't associated with an online meeting, the property is empty. Read-only.
	OnlineMeetingInfo *MicrosoftGraphChat_OnlineMeetingInfo            `json:"onlineMeetingInfo,omitempty"`
	PermissionGrants  *[]MicrosoftGraphResourceSpecificPermissionGrant `json:"permissionGrants,omitempty"`

	// PinnedMessages A collection of all the pinned messages in the chat. Nullable.
	PinnedMessages *[]MicrosoftGraphPinnedChatMessageInfo `json:"pinnedMessages,omitempty"`

	// Tabs A collection of all the tabs in the chat. Nullable.
	Tabs *[]MicrosoftGraphTeamsTab `json:"tabs,omitempty"`

	// TenantId The identifier of the tenant in which the chat was created. Read-only.
	TenantId *string `json:"tenantId"`

	// Topic (Optional) Subject or topic for the chat. Only available for group chats.
	Topic *string `json:"topic"`

	// Viewpoint Represents caller-specific information about the chat, such as last message read date and time. This property is populated only when the request is made in a delegated context.
	Viewpoint *MicrosoftGraphChat_Viewpoint `json:"viewpoint,omitempty"`

	// WebUrl The URL for the chat in Microsoft Teams. The URL should be treated as an opaque blob, and not parsed. Read-only.
	WebUrl *string `json:"webUrl"`
}

// MicrosoftGraphChatLastMessagePreview1 defines model for .
type MicrosoftGraphChatLastMessagePreview1 = map[string]interface{}

// MicrosoftGraphChat_LastMessagePreview Preview of the last message sent in the chat. Null if no messages have been sent in the chat. Currently, only the list chats operation supports this property.
type MicrosoftGraphChat_LastMessagePreview struct {
	union json.RawMessage
}

// MicrosoftGraphChatOnlineMeetingInfo1 defines model for .
type MicrosoftGraphChatOnlineMeetingInfo1 = map[string]interface{}

// MicrosoftGraphChat_OnlineMeetingInfo Represents details about an online meeting. If the chat isn't associated with an online meeting, the property is empty. Read-only.
type MicrosoftGraphChat_OnlineMeetingInfo struct {
	union json.RawMessage
}

// MicrosoftGraphChatViewpoint1 defines model for .
type MicrosoftGraphChatViewpoint1 = map[string]interface{}

// MicrosoftGraphChat_Viewpoint Represents caller-specific information about the chat, such as last message read date and time. This property is populated only when the request is made in a delegated context.
type MicrosoftGraphChat_Viewpoint struct {
	union json.RawMessage
}

// MicrosoftGraphChatInfo defines model for microsoft.graph.chatInfo.
type MicrosoftGraphChatInfo struct {
	// MessageId The unique identifier of a message in a Microsoft Teams channel.
	MessageId *string `json:"messageId"`

	// ReplyChainMessageId The ID of the reply message.
	ReplyChainMessageId *string `json:"replyChainMessageId"`

	// ThreadId The unique identifier for a thread in Microsoft Teams.
	ThreadId *string `json:"threadId"`
}

// MicrosoftGraphChatMessage defines model for microsoft.graph.chatMessage.
type MicrosoftGraphChatMessage struct {
	// Attachments References to attached objects like files, tabs, meetings etc.
	Attachments *[]MicrosoftGraphChatMessage_Attachments_Item `json:"attachments,omitempty"`
	Body        *MicrosoftGraphItemBody                       `json:"body,omitempty"`

	// ChannelIdentity If the message was sent in a channel, represents identity of the channel.
	ChannelIdentity *MicrosoftGraphChatMessage_ChannelIdentity `json:"channelIdentity,omitempty"`

	// ChatId If the message was sent in a chat, represents the identity of the chat.
	ChatId *string `json:"chatId"`

	// CreatedDateTime Timestamp of when the chat message was created.
	CreatedDateTime *time.Time `json:"createdDateTime"`

	// DeletedDateTime Read only. Timestamp at which the chat message was deleted, or null if not deleted.
	DeletedDateTime *time.Time `json:"deletedDateTime"`

	// Etag Read-only. Version number of the chat message.
	Etag *string `json:"etag"`

	// EventDetail Read-only. If present, represents details of an event that happened in a chat, a channel, or a team, for example, adding new members. For event messages, the messageType property will be set to systemEventMessage.
	EventDetail *MicrosoftGraphChatMessage_EventDetail `json:"eventDetail,omitempty"`

	// From Details of the sender of the chat message. Can only be set during migration.
	From *MicrosoftGraphChatMessage_From `json:"from,omitempty"`

	// HostedContents Content in a message hosted by Microsoft Teams - for example, images or code snippets.
	HostedContents *[]MicrosoftGraphChatMessageHostedContent `json:"hostedContents,omitempty"`

	// Id The unique idenfier for an entity. Read-only.
	Id         *string                              `json:"id,omitempty"`
	Importance *MicrosoftGraphChatMessageImportance `json:"importance,omitempty"`

	// LastEditedDateTime Read only. Timestamp when edits to the chat message were made. Triggers an 'Edited' flag in the Teams UI. If no edits are made the value is null.
	LastEditedDateTime *time.Time `json:"lastEditedDateTime"`

	// LastModifiedDateTime Read only. Timestamp when the chat message is created (initial setting) or modified, including when a reaction is added or removed.
	LastModifiedDateTime *time.Time `json:"lastModifiedDateTime"`

	// Locale Locale of the chat message set by the client. Always set to en-us.
	Locale *string `json:"locale,omitempty"`

	// Mentions List of entities mentioned in the chat message. Supported entities are: user, bot, team, and channel.
	Mentions *[]MicrosoftGraphChatMessage_Mentions_Item `json:"mentions,omitempty"`

	// MessageHistory List of activity history of a message item, including modification time and actions, such as reactionAdded, reactionRemoved, or reaction changes, on the message.
	MessageHistory *[]MicrosoftGraphChatMessage_MessageHistory_Item `json:"messageHistory,omitempty"`
	MessageType    *MicrosoftGraphChatMessageType                   `json:"messageType,omitempty"`

	// PolicyViolation Defines the properties of a policy violation set by a data loss prevention (DLP) application.
	PolicyViolation *MicrosoftGraphChatMessage_PolicyViolation `json:"policyViolation,omitempty"`

	// Reactions Reactions for this chat message (for example, Like).
	Reactions *[]MicrosoftGraphChatMessage_Reactions_Item `json:"reactions,omitempty"`

	// Replies Replies for a specified message. Supports $expand for channel messages.
	Replies *[]MicrosoftGraphChatMessage `json:"replies,omitempty"`

	// ReplyToId Read-only. ID of the parent chat message or root chat message of the thread. (Only applies to chat messages in channels, not chats.)
	ReplyToId *string `json:"replyToId"`

	// Subject The subject of the chat message, in plaintext.
	Subject *string `json:"subject"`

	// Summary Summary text of the chat message that could be used for push notifications and summary views or fall back views. Only applies to channel chat messages, not chat messages in a chat.
	Summary *string `json:"summary"`

	// WebUrl Read-only. Link to the message in Microsoft Teams.
	WebUrl *string `json:"webUrl"`
}

// MicrosoftGraphChatMessageAttachments1 defines model for .
type MicrosoftGraphChatMessageAttachments1 = map[string]interface{}

// MicrosoftGraphChatMessage_Attachments_Item defines model for microsoft.graph.chatMessage.attachments.Item.
type MicrosoftGraphChatMessage_Attachments_Item struct {
	union json.RawMessage
}

// MicrosoftGraphChatMessageChannelIdentity1 defines model for .
type MicrosoftGraphChatMessageChannelIdentity1 = map[string]interface{}

// MicrosoftGraphChatMessage_ChannelIdentity If the message was sent in a channel, represents identity of the channel.
type MicrosoftGraphChatMessage_ChannelIdentity struct {
	union json.RawMessage
}

// MicrosoftGraphChatMessageEventDetail1 defines model for .
type MicrosoftGraphChatMessageEventDetail1 = map[string]interface{}

// MicrosoftGraphChatMessage_EventDetail Read-only. If present, represents details of an event that happened in a chat, a channel, or a team, for example, adding new members. For event messages, the messageType property will be set to systemEventMessage.
type MicrosoftGraphChatMessage_EventDetail struct {
	union json.RawMessage
}

// MicrosoftGraphChatMessageFrom1 defines model for .
type MicrosoftGraphChatMessageFrom1 = map[string]interface{}

// MicrosoftGraphChatMessage_From Details of the sender of the chat message. Can only be set during migration.
type MicrosoftGraphChatMessage_From struct {
	union json.RawMessage
}

// MicrosoftGraphChatMessageMentions1 defines model for .
type MicrosoftGraphChatMessageMentions1 = map[string]interface{}

// MicrosoftGraphChatMessage_Mentions_Item defines model for microsoft.graph.chatMessage.mentions.Item.
type MicrosoftGraphChatMessage_Mentions_Item struct {
	union json.RawMessage
}

// MicrosoftGraphChatMessageMessageHistory1 defines model for .
type MicrosoftGraphChatMessageMessageHistory1 = map[string]interface{}

// MicrosoftGraphChatMessage_MessageHistory_Item defines model for microsoft.graph.chatMessage.messageHistory.Item.
type MicrosoftGraphChatMessage_MessageHistory_Item struct {
	union json.RawMessage
}

// MicrosoftGraphChatMessagePolicyViolation1 defines model for .
type MicrosoftGraphChatMessagePolicyViolation1 = map[string]interface{}

// MicrosoftGraphChatMessage_PolicyViolation Defines the properties of a policy violation set by a data loss prevention (DLP) application.
type MicrosoftGraphChatMessage_PolicyViolation struct {
	union json.RawMessage
}

// MicrosoftGraphChatMessageReactions1 defines model for .
type MicrosoftGraphChatMessageReactions1 = map[string]interface{}

// MicrosoftGraphChatMessage_Reactions_Item defines model for microsoft.graph.chatMessage.reactions.Item.
type MicrosoftGraphChatMessage_Reactions_Item struct {
	union json.RawMessage
}

// MicrosoftGraphChatMessageActions defines model for microsoft.graph.chatMessageActions.
type MicrosoftGraphChatMessageActions string

// MicrosoftGraphChatMessageAttachment defines model for microsoft.graph.chatMessageAttachment.
type MicrosoftGraphChatMessageAttachment struct {
	// Content The content of the attachment. If the attachment is a rich card, set the property to the rich card object. This property and contentUrl are mutually exclusive.
	Content *string `json:"content"`

	// ContentType The media type of the content attachment. It can have the following values: reference: Attachment is a link to another file. Populate the contentURL with the link to the object.Any contentTypes supported by the Bot Framework's Attachment objectapplication/vnd.microsoft.card.codesnippet: A code snippet. application/vnd.microsoft.card.announcement: An announcement header.
	ContentType *string `json:"contentType"`

	// ContentUrl URL for the content of the attachment. Supported protocols: http, https, file and data.
	ContentUrl *string `json:"contentUrl"`

	// Id Read-only. Unique id of the attachment.
	Id *string `json:"id"`

	// Name Name of the attachment.
	Name *string `json:"name"`

	// TeamsAppId The ID of the Teams app that is associated with the attachment. The property is specifically used to attribute a Teams message card to the specified app.
	TeamsAppId *string `json:"teamsAppId"`

	// ThumbnailUrl URL to a thumbnail image that the channel can use if it supports using an alternative, smaller form of content or contentUrl. For example, if you set contentType to application/word and set contentUrl to the location of the Word document, you might include a thumbnail image that represents the document. The channel could display the thumbnail image instead of the document. When the user clicks the image, the channel would open the document.
	ThumbnailUrl *string `json:"thumbnailUrl"`
}

// MicrosoftGraphChatMessageFromIdentitySet defines model for microsoft.graph.chatMessageFromIdentitySet.
type MicrosoftGraphChatMessageFromIdentitySet struct {
	// Application Optional. The application associated with this action.
	Application *MicrosoftGraphChatMessageFromIdentitySet_Application `json:"application,omitempty"`

	// Device Optional. The device associated with this action.
	Device *MicrosoftGraphChatMessageFromIdentitySet_Device `json:"device,omitempty"`

	// User Optional. The user associated with this action.
	User *MicrosoftGraphChatMessageFromIdentitySet_User `json:"user,omitempty"`
}

// MicrosoftGraphChatMessageFromIdentitySetApplication1 defines model for .
type MicrosoftGraphChatMessageFromIdentitySetApplication1 = map[string]interface{}

// MicrosoftGraphChatMessageFromIdentitySet_Application Optional. The application associated with this action.
type MicrosoftGraphChatMessageFromIdentitySet_Application struct {
	union json.RawMessage
}

// MicrosoftGraphChatMessageFromIdentitySetDevice1 defines model for .
type MicrosoftGraphChatMessageFromIdentitySetDevice1 = map[string]interface{}

// MicrosoftGraphChatMessageFromIdentitySet_Device Optional. The device associated with this action.
type MicrosoftGraphChatMessageFromIdentitySet_Device struct {
	union json.RawMessage
}

// MicrosoftGraphChatMessageFromIdentitySetUser1 defines model for .
type MicrosoftGraphChatMessageFromIdentitySetUser1 = map[string]interface{}

// MicrosoftGraphChatMessageFromIdentitySet_User Optional. The user associated with this action.
type MicrosoftGraphChatMessageFromIdentitySet_User struct {
	union json.RawMessage
}

// MicrosoftGraphChatMessageHistoryItem defines model for microsoft.graph.chatMessageHistoryItem.
type MicrosoftGraphChatMessageHistoryItem struct {
	Actions *MicrosoftGraphChatMessageActions `json:"actions,omitempty"`

	// ModifiedDateTime The date and time when the message was modified.
	ModifiedDateTime *time.Time `json:"modifiedDateTime,omitempty"`

	// Reaction The reaction in the modified message.
	Reaction *MicrosoftGraphChatMessageHistoryItem_Reaction `json:"reaction,omitempty"`
}

// MicrosoftGraphChatMessageHistoryItemReaction1 defines model for .
type MicrosoftGraphChatMessageHistoryItemReaction1 = map[string]interface{}

// MicrosoftGraphChatMessageHistoryItem_Reaction The reaction in the modified message.
type MicrosoftGraphChatMessageHistoryItem_Reaction struct {
	union json.RawMessage
}

// MicrosoftGraphChatMessageHostedContent defines model for microsoft.graph.chatMessageHostedContent.
type MicrosoftGraphChatMessageHostedContent struct {
	// ContentBytes Write only. Bytes for the hosted content (such as images).
	ContentBytes *string `json:"contentBytes"`

	// ContentType Write only. Content type. sicj as image/png, image/jpg.
	ContentType *string `json:"contentType"`

	// Id The unique idenfier for an entity. Read-only.
	Id *string `json:"id,omitempty"`
}

// MicrosoftGraphChatMessageImportance defines model for microsoft.graph.chatMessageImportance.
type MicrosoftGraphChatMessageImportance string

// MicrosoftGraphChatMessageInfo defines model for microsoft.graph.chatMessageInfo.
type MicrosoftGraphChatMessageInfo struct {
	// Body Body of the chatMessage. This will still contain markers for @mentions and attachments even though the object does not return @mentions and attachments.
	Body *MicrosoftGraphChatMessageInfo_Body `json:"body,omitempty"`

	// CreatedDateTime Date time object representing the time at which message was created.
	CreatedDateTime *time.Time `json:"createdDateTime"`

	// EventDetail Read-only.  If present, represents details of an event that happened in a chat, a channel, or a team, for example, members were added, and so on. For event messages, the messageType property will be set to systemEventMessage.
	EventDetail *MicrosoftGraphChatMessageInfo_EventDetail `json:"eventDetail,omitempty"`

	// From Information about the sender of the message.
	From *MicrosoftGraphChatMessageInfo_From `json:"from,omitempty"`

	// Id The unique idenfier for an entity. Read-only.
	Id *string `json:"id,omitempty"`

	// IsDeleted If set to true, the original message has been deleted.
	IsDeleted   *bool                          `json:"isDeleted"`
	MessageType *MicrosoftGraphChatMessageType `json:"messageType,omitempty"`
}

// MicrosoftGraphChatMessageInfoBody1 defines model for .
type MicrosoftGraphChatMessageInfoBody1 = map[string]interface{}

// MicrosoftGraphChatMessageInfo_Body Body of the chatMessage. This will still contain markers for @mentions and attachments even though the object does not return @mentions and attachments.
type MicrosoftGraphChatMessageInfo_Body struct {
	union json.RawMessage
}

// MicrosoftGraphChatMessageInfoEventDetail1 defines model for .
type MicrosoftGraphChatMessageInfoEventDetail1 = map[string]interface{}

// MicrosoftGraphChatMessageInfo_EventDetail Read-only.  If present, represents details of an event that happened in a chat, a channel, or a team, for example, members were added, and so on. For event messages, the messageType property will be set to systemEventMessage.
type MicrosoftGraphChatMessageInfo_EventDetail struct {
	union json.RawMessage
}

// MicrosoftGraphChatMessageInfoFrom1 defines model for .
type MicrosoftGraphChatMessageInfoFrom1 = map[string]interface{}

// MicrosoftGraphChatMessageInfo_From Information about the sender of the message.
type MicrosoftGraphChatMessageInfo_From struct {
	union json.RawMessage
}

// MicrosoftGraphChatMessageMention defines model for microsoft.graph.chatMessageMention.
type MicrosoftGraphChatMessageMention struct {
	// Id Index of an entity being mentioned in the specified chatMessage. Matches the {index} value in the corresponding <at id='{index}'> tag in the message body.
	Id *int32 `json:"id"`

	// MentionText String used to represent the mention. For example, a user's display name, a team name.
	MentionText *string `json:"mentionText"`

	// Mentioned The entity (user, application, team, or channel) that was @mentioned.
	Mentioned *MicrosoftGraphChatMessageMention_Mentioned `json:"mentioned,omitempty"`
}

// MicrosoftGraphChatMessageMentionMentioned1 defines model for .
type MicrosoftGraphChatMessageMentionMentioned1 = map[string]interface{}

// MicrosoftGraphChatMessageMention_Mentioned The entity (user, application, team, or channel) that was @mentioned.
type MicrosoftGraphChatMessageMention_Mentioned struct {
	union json.RawMessage
}

// MicrosoftGraphChatMessageMentionedIdentitySet defines model for microsoft.graph.chatMessageMentionedIdentitySet.
type MicrosoftGraphChatMessageMentionedIdentitySet struct {
	// Application Optional. The application associated with this action.
	Application *MicrosoftGraphChatMessageMentionedIdentitySet_Application `json:"application,omitempty"`

	// Conversation If present, represents a conversation (for example, team or channel) @mentioned in a message.
	Conversation *MicrosoftGraphChatMessageMentionedIdentitySet_Conversation `json:"conversation,omitempty"`

	// Device Optional. The device associated with this action.
	Device *MicrosoftGraphChatMessageMentionedIdentitySet_Device `json:"device,omitempty"`

	// User Optional. The user associated with this action.
	User *MicrosoftGraphChatMessageMentionedIdentitySet_User `json:"user,omitempty"`
}

// MicrosoftGraphChatMessageMentionedIdentitySetApplication1 defines model for .
type MicrosoftGraphChatMessageMentionedIdentitySetApplication1 = map[string]interface{}

// MicrosoftGraphChatMessageMentionedIdentitySet_Application Optional. The application associated with this action.
type MicrosoftGraphChatMessageMentionedIdentitySet_Application struct {
	union json.RawMessage
}

// MicrosoftGraphChatMessageMentionedIdentitySetConversation1 defines model for .
type MicrosoftGraphChatMessageMentionedIdentitySetConversation1 = map[string]interface{}

// MicrosoftGraphChatMessageMentionedIdentitySet_Conversation If present, represents a conversation (for example, team or channel) @mentioned in a message.
type MicrosoftGraphChatMessageMentionedIdentitySet_Conversation struct {
	union json.RawMessage
}

// MicrosoftGraphChatMessageMentionedIdentitySetDevice1 defines model for .
type MicrosoftGraphChatMessageMentionedIdentitySetDevice1 = map[string]interface{}

// MicrosoftGraphChatMessageMentionedIdentitySet_Device Optional. The device associated with this action.
type MicrosoftGraphChatMessageMentionedIdentitySet_Device struct {
	union json.RawMessage
}

// MicrosoftGraphChatMessageMentionedIdentitySetUser1 defines model for .
type MicrosoftGraphChatMessageMentionedIdentitySetUser1 = map[string]interface{}

// MicrosoftGraphChatMessageMentionedIdentitySet_User Optional. The user associated with this action.
type MicrosoftGraphChatMessageMentionedIdentitySet_User struct {
	union json.RawMessage
}

// MicrosoftGraphChatMessagePolicyViolation defines model for microsoft.graph.chatMessagePolicyViolation.
type MicrosoftGraphChatMessagePolicyViolation struct {
	// DlpAction The action taken by the DLP provider on the message with sensitive content. Supported values are: NoneNotifySender -- Inform the sender of the violation but allow readers to read the message.BlockAccess -- Block readers from reading the message.BlockAccessExternal -- Block users outside the organization from reading the message, while allowing users within the organization to read the message.
	DlpAction *MicrosoftGraphChatMessagePolicyViolation_DlpAction `json:"dlpAction,omitempty"`

	// JustificationText Justification text provided by the sender of the message when overriding a policy violation.
	JustificationText *string `json:"justificationText"`

	// PolicyTip Information to display to the message sender about why the message was flagged as a violation.
	PolicyTip *MicrosoftGraphChatMessagePolicyViolation_PolicyTip `json:"policyTip,omitempty"`

	// UserAction Indicates the action taken by the user on a message blocked by the DLP provider. Supported values are: NoneOverrideReportFalsePositiveWhen the DLP provider is updating the message for blocking sensitive content, userAction is not required.
	UserAction *MicrosoftGraphChatMessagePolicyViolation_UserAction `json:"userAction,omitempty"`

	// VerdictDetails Indicates what actions the sender may take in response to the policy violation. Supported values are: NoneAllowFalsePositiveOverride -- Allows the sender to declare the policyViolation to be an error in the DLP app and its rules, and allow readers to see the message again if the dlpAction had hidden it.AllowOverrideWithoutJustification -- Allows the sender to overriide the DLP violation and allow readers to see the message again if the dlpAction had hidden it, without needing to provide an explanation for doing so. AllowOverrideWithJustification -- Allows the sender to overriide the DLP violation and allow readers to see the message again if the dlpAction had hidden it, after providing an explanation for doing so.AllowOverrideWithoutJustification and AllowOverrideWithJustification are mutually exclusive.
	VerdictDetails *MicrosoftGraphChatMessagePolicyViolation_VerdictDetails `json:"verdictDetails,omitempty"`
}

// MicrosoftGraphChatMessagePolicyViolationDlpAction1 defines model for .
type MicrosoftGraphChatMessagePolicyViolationDlpAction1 = map[string]interface{}

// MicrosoftGraphChatMessagePolicyViolation_DlpAction The action taken by the DLP provider on the message with sensitive content. Supported values are: NoneNotifySender -- Inform the sender of the violation but allow readers to read the message.BlockAccess -- Block readers from reading the message.BlockAccessExternal -- Block users outside the organization from reading the message, while allowing users within the organization to read the message.
type MicrosoftGraphChatMessagePolicyViolation_DlpAction struct {
	union json.RawMessage
}

// MicrosoftGraphChatMessagePolicyViolationPolicyTip1 defines model for .
type MicrosoftGraphChatMessagePolicyViolationPolicyTip1 = map[string]interface{}

// MicrosoftGraphChatMessagePolicyViolation_PolicyTip Information to display to the message sender about why the message was flagged as a violation.
type MicrosoftGraphChatMessagePolicyViolation_PolicyTip struct {
	union json.RawMessage
}

// MicrosoftGraphChatMessagePolicyViolationUserAction1 defines model for .
type MicrosoftGraphChatMessagePolicyViolationUserAction1 = map[string]interface{}

// MicrosoftGraphChatMessagePolicyViolation_UserAction Indicates the action taken by the user on a message blocked by the DLP provider. Supported values are: NoneOverrideReportFalsePositiveWhen the DLP provider is updating the message for blocking sensitive content, userAction is not required.
type MicrosoftGraphChatMessagePolicyViolation_UserAction struct {
	union json.RawMessage
}

// MicrosoftGraphChatMessagePolicyViolationVerdictDetails1 defines model for .
type MicrosoftGraphChatMessagePolicyViolationVerdictDetails1 = map[string]interface{}

// MicrosoftGraphChatMessagePolicyViolation_VerdictDetails Indicates what actions the sender may take in response to the policy violation. Supported values are: NoneAllowFalsePositiveOverride -- Allows the sender to declare the policyViolation to be an error in the DLP app and its rules, and allow readers to see the message again if the dlpAction had hidden it.AllowOverrideWithoutJustification -- Allows the sender to overriide the DLP violation and allow readers to see the message again if the dlpAction had hidden it, without needing to provide an explanation for doing so. AllowOverrideWithJustification -- Allows the sender to overriide the DLP violation and allow readers to see the message again if the dlpAction had hidden it, after providing an explanation for doing so.AllowOverrideWithoutJustification and AllowOverrideWithJustification are mutually exclusive.
type MicrosoftGraphChatMessagePolicyViolation_VerdictDetails struct {
	union json.RawMessage
}

// MicrosoftGraphChatMessagePolicyViolationDlpActionTypes defines model for microsoft.graph.chatMessagePolicyViolationDlpActionTypes.
type MicrosoftGraphChatMessagePolicyViolationDlpActionTypes string

// MicrosoftGraphChatMessagePolicyViolationPolicyTip defines model for microsoft.graph.chatMessagePolicyViolationPolicyTip.
type MicrosoftGraphChatMessagePolicyViolationPolicyTip struct {
	// ComplianceUrl The URL a user can visit to read about the data loss prevention policies for the organization. (ie, policies about what users shouldn't say in chats)
	ComplianceUrl *string `json:"complianceUrl"`

	// GeneralText Explanatory text shown to the sender of the message.
	GeneralText *string `json:"generalText"`

	// MatchedConditionDescriptions The list of improper data in the message that was detected by the data loss prevention app. Each DLP app defines its own conditions, examples include 'Credit Card Number' and 'Social Security Number'.
	MatchedConditionDescriptions *[]string `json:"matchedConditionDescriptions,omitempty"`
}

// MicrosoftGraphChatMessagePolicyViolationUserActionTypes defines model for microsoft.graph.chatMessagePolicyViolationUserActionTypes.
type MicrosoftGraphChatMessagePolicyViolationUserActionTypes string

// MicrosoftGraphChatMessagePolicyViolationVerdictDetailsTypes defines model for microsoft.graph.chatMessagePolicyViolationVerdictDetailsTypes.
type MicrosoftGraphChatMessagePolicyViolationVerdictDetailsTypes string

// MicrosoftGraphChatMessageReaction defines model for microsoft.graph.chatMessageReaction.
type MicrosoftGraphChatMessageReaction struct {
	// CreatedDateTime The Timestamp type represents date and time information using ISO 8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 is 2014-01-01T00:00:00Z
	CreatedDateTime *time.Time `json:"createdDateTime,omitempty"`

	// ReactionType Supported values are like, angry, sad, laugh, heart, surprised.
	ReactionType *string                                       `json:"reactionType,omitempty"`
	User         *MicrosoftGraphChatMessageReactionIdentitySet `json:"user,omitempty"`
}

// MicrosoftGraphChatMessageReactionIdentitySet defines model for microsoft.graph.chatMessageReactionIdentitySet.
type MicrosoftGraphChatMessageReactionIdentitySet struct {
	// Application Optional. The application associated with this action.
	Application *MicrosoftGraphChatMessageReactionIdentitySet_Application `json:"application,omitempty"`

	// Device Optional. The device associated with this action.
	Device *MicrosoftGraphChatMessageReactionIdentitySet_Device `json:"device,omitempty"`

	// User Optional. The user associated with this action.
	User *MicrosoftGraphChatMessageReactionIdentitySet_User `json:"user,omitempty"`
}

// MicrosoftGraphChatMessageReactionIdentitySetApplication1 defines model for .
type MicrosoftGraphChatMessageReactionIdentitySetApplication1 = map[string]interface{}

// MicrosoftGraphChatMessageReactionIdentitySet_Application Optional. The application associated with this action.
type MicrosoftGraphChatMessageReactionIdentitySet_Application struct {
	union json.RawMessage
}

// MicrosoftGraphChatMessageReactionIdentitySetDevice1 defines model for .
type MicrosoftGraphChatMessageReactionIdentitySetDevice1 = map[string]interface{}

// MicrosoftGraphChatMessageReactionIdentitySet_Device Optional. The device associated with this action.
type MicrosoftGraphChatMessageReactionIdentitySet_Device struct {
	union json.RawMessage
}

// MicrosoftGraphChatMessageReactionIdentitySetUser1 defines model for .
type MicrosoftGraphChatMessageReactionIdentitySetUser1 = map[string]interface{}

// MicrosoftGraphChatMessageReactionIdentitySet_User Optional. The user associated with this action.
type MicrosoftGraphChatMessageReactionIdentitySet_User struct {
	union json.RawMessage
}

// MicrosoftGraphChatMessageType defines model for microsoft.graph.chatMessageType.
type MicrosoftGraphChatMessageType string

// MicrosoftGraphChatType defines model for microsoft.graph.chatType.
type MicrosoftGraphChatType string

// MicrosoftGraphChatViewpoint defines model for microsoft.graph.chatViewpoint.
type MicrosoftGraphChatViewpoint struct {
	// IsHidden Indicates whether the chat is hidden for the current user.
	IsHidden *bool `json:"isHidden"`

	// LastMessageReadDateTime Represents the dateTime up until which the current user has read chatMessages in a specific chat.
	LastMessageReadDateTime *time.Time `json:"lastMessageReadDateTime"`
}

// MicrosoftGraphChecklistItem defines model for microsoft.graph.checklistItem.
type MicrosoftGraphChecklistItem struct {
	// CheckedDateTime The date and time when the checklistItem was finished.
	CheckedDateTime *time.Time `json:"checkedDateTime"`

	// CreatedDateTime The date and time when the checklistItem was created.
	CreatedDateTime *time.Time `json:"createdDateTime,omitempty"`

	// DisplayName Field indicating the title of checklistItem.
	DisplayName *string `json:"displayName"`

	// Id The unique idenfier for an entity. Read-only.
	Id *string `json:"id,omitempty"`

	// IsChecked State indicating whether the item is checked off or not.
	IsChecked *bool `json:"isChecked"`
}

// MicrosoftGraphChoiceColumn defines model for microsoft.graph.choiceColumn.
type MicrosoftGraphChoiceColumn struct {
	// AllowTextEntry If true, allows custom values that aren't in the configured choices.
	AllowTextEntry *bool `json:"allowTextEntry"`

	// Choices The list of values available for this column.
	Choices *[]string `json:"choices,omitempty"`

	// DisplayAs How the choices are to be presented in the UX. Must be one of checkBoxes, dropDownMenu, or radioButtons
	DisplayAs *string `json:"displayAs"`
}

// MicrosoftGraphColumnDefinition defines model for microsoft.graph.columnDefinition.
type MicrosoftGraphColumnDefinition struct {
	// Boolean This column stores boolean values.
	Boolean *MicrosoftGraphColumnDefinition_Boolean `json:"boolean,omitempty"`

	// Calculated This column's data is calculated based on other columns.
	Calculated *MicrosoftGraphColumnDefinition_Calculated `json:"calculated,omitempty"`

	// Choice This column stores data from a list of choices.
	Choice *MicrosoftGraphColumnDefinition_Choice `json:"choice,omitempty"`

	// ColumnGroup For site columns, the name of the group this column belongs to. Helps organize related columns.
	ColumnGroup *string `json:"columnGroup"`

	// ContentApprovalStatus This column stores content approval status.
	ContentApprovalStatus *MicrosoftGraphColumnDefinition_ContentApprovalStatus `json:"contentApprovalStatus,omitempty"`

	// Currency This column stores currency values.
	Currency *MicrosoftGraphColumnDefinition_Currency `json:"currency,omitempty"`

	// DateTime This column stores DateTime values.
	DateTime *MicrosoftGraphColumnDefinition_DateTime `json:"dateTime,omitempty"`

	// DefaultValue The default value for this column.
	DefaultValue *MicrosoftGraphColumnDefinition_DefaultValue `json:"defaultValue,omitempty"`

	// Description The user-facing description of the column.
	Description *string `json:"description"`

	// DisplayName The user-facing name of the column.
	DisplayName *string `json:"displayName"`

	// EnforceUniqueValues If true, no two list items may have the same value for this column.
	EnforceUniqueValues *bool `json:"enforceUniqueValues"`

	// Geolocation This column stores a geolocation.
	Geolocation *MicrosoftGraphColumnDefinition_Geolocation `json:"geolocation,omitempty"`

	// Hidden Specifies whether the column is displayed in the user interface.
	Hidden *bool `json:"hidden"`

	// HyperlinkOrPicture This column stores hyperlink or picture values.
	HyperlinkOrPicture *MicrosoftGraphColumnDefinition_HyperlinkOrPicture `json:"hyperlinkOrPicture,omitempty"`

	// Id The unique idenfier for an entity. Read-only.
	Id *string `json:"id,omitempty"`

	// Indexed Specifies whether the column values can be used for sorting and searching.
	Indexed *bool `json:"indexed"`

	// IsDeletable Indicates whether this column can be deleted.
	IsDeletable *bool `json:"isDeletable"`

	// IsReorderable Indicates whether values in the column can be reordered. Read-only.
	IsReorderable *bool `json:"isReorderable"`

	// IsSealed Specifies whether the column can be changed.
	IsSealed *bool `json:"isSealed"`

	// Lookup This column's data is looked up from another source in the site.
	Lookup *MicrosoftGraphColumnDefinition_Lookup `json:"lookup,omitempty"`

	// Name The API-facing name of the column as it appears in the [fields][] on a [listItem][]. For the user-facing name, see displayName.
	Name *string `json:"name"`

	// Number This column stores number values.
	Number *MicrosoftGraphColumnDefinition_Number `json:"number,omitempty"`

	// PersonOrGroup This column stores Person or Group values.
	PersonOrGroup *MicrosoftGraphColumnDefinition_PersonOrGroup `json:"personOrGroup,omitempty"`

	// PropagateChanges If 'true', changes to this column will be propagated to lists that implement the column.
	PropagateChanges *bool `json:"propagateChanges"`

	// ReadOnly Specifies whether the column values can be modified.
	ReadOnly *bool `json:"readOnly"`

	// Required Specifies whether the column value isn't optional.
	Required *bool `json:"required"`

	// SourceColumn The source column for the content type column.
	SourceColumn *MicrosoftGraphColumnDefinition_SourceColumn `json:"sourceColumn,omitempty"`

	// SourceContentType ContentType from which this column is inherited from. Present only in contentTypes columns response. Read-only.
	SourceContentType *MicrosoftGraphColumnDefinition_SourceContentType `json:"sourceContentType,omitempty"`

	// Term This column stores taxonomy terms.
	Term *MicrosoftGraphColumnDefinition_Term `json:"term,omitempty"`

	// Text This column stores text values.
	Text *MicrosoftGraphColumnDefinition_Text `json:"text,omitempty"`

	// Thumbnail This column stores thumbnail values.
	Thumbnail *MicrosoftGraphColumnDefinition_Thumbnail `json:"thumbnail,omitempty"`

	// Type For site columns, the type of column. Read-only.
	Type *MicrosoftGraphColumnDefinition_Type `json:"type,omitempty"`

	// Validation This column stores validation formula and message for the column.
	Validation *MicrosoftGraphColumnDefinition_Validation `json:"validation,omitempty"`
}

// MicrosoftGraphColumnDefinitionBoolean1 defines model for .
type MicrosoftGraphColumnDefinitionBoolean1 = map[string]interface{}

// MicrosoftGraphColumnDefinition_Boolean This column stores boolean values.
type MicrosoftGraphColumnDefinition_Boolean struct {
	union json.RawMessage
}

// MicrosoftGraphColumnDefinitionCalculated1 defines model for .
type MicrosoftGraphColumnDefinitionCalculated1 = map[string]interface{}

// MicrosoftGraphColumnDefinition_Calculated This column's data is calculated based on other columns.
type MicrosoftGraphColumnDefinition_Calculated struct {
	union json.RawMessage
}

// MicrosoftGraphColumnDefinitionChoice1 defines model for .
type MicrosoftGraphColumnDefinitionChoice1 = map[string]interface{}

// MicrosoftGraphColumnDefinition_Choice This column stores data from a list of choices.
type MicrosoftGraphColumnDefinition_Choice struct {
	union json.RawMessage
}

// MicrosoftGraphColumnDefinitionContentApprovalStatus1 defines model for .
type MicrosoftGraphColumnDefinitionContentApprovalStatus1 = map[string]interface{}

// MicrosoftGraphColumnDefinition_ContentApprovalStatus This column stores content approval status.
type MicrosoftGraphColumnDefinition_ContentApprovalStatus struct {
	union json.RawMessage
}

// MicrosoftGraphColumnDefinitionCurrency1 defines model for .
type MicrosoftGraphColumnDefinitionCurrency1 = map[string]interface{}

// MicrosoftGraphColumnDefinition_Currency This column stores currency values.
type MicrosoftGraphColumnDefinition_Currency struct {
	union json.RawMessage
}

// MicrosoftGraphColumnDefinitionDateTime1 defines model for .
type MicrosoftGraphColumnDefinitionDateTime1 = map[string]interface{}

// MicrosoftGraphColumnDefinition_DateTime This column stores DateTime values.
type MicrosoftGraphColumnDefinition_DateTime struct {
	union json.RawMessage
}

// MicrosoftGraphColumnDefinitionDefaultValue1 defines model for .
type MicrosoftGraphColumnDefinitionDefaultValue1 = map[string]interface{}

// MicrosoftGraphColumnDefinition_DefaultValue The default value for this column.
type MicrosoftGraphColumnDefinition_DefaultValue struct {
	union json.RawMessage
}

// MicrosoftGraphColumnDefinitionGeolocation1 defines model for .
type MicrosoftGraphColumnDefinitionGeolocation1 = map[string]interface{}

// MicrosoftGraphColumnDefinition_Geolocation This column stores a geolocation.
type MicrosoftGraphColumnDefinition_Geolocation struct {
	union json.RawMessage
}

// MicrosoftGraphColumnDefinitionHyperlinkOrPicture1 defines model for .
type MicrosoftGraphColumnDefinitionHyperlinkOrPicture1 = map[string]interface{}

// MicrosoftGraphColumnDefinition_HyperlinkOrPicture This column stores hyperlink or picture values.
type MicrosoftGraphColumnDefinition_HyperlinkOrPicture struct {
	union json.RawMessage
}

// MicrosoftGraphColumnDefinitionLookup1 defines model for .
type MicrosoftGraphColumnDefinitionLookup1 = map[string]interface{}

// MicrosoftGraphColumnDefinition_Lookup This column's data is looked up from another source in the site.
type MicrosoftGraphColumnDefinition_Lookup struct {
	union json.RawMessage
}

// MicrosoftGraphColumnDefinitionNumber1 defines model for .
type MicrosoftGraphColumnDefinitionNumber1 = map[string]interface{}

// MicrosoftGraphColumnDefinition_Number This column stores number values.
type MicrosoftGraphColumnDefinition_Number struct {
	union json.RawMessage
}

// MicrosoftGraphColumnDefinitionPersonOrGroup1 defines model for .
type MicrosoftGraphColumnDefinitionPersonOrGroup1 = map[string]interface{}

// MicrosoftGraphColumnDefinition_PersonOrGroup This column stores Person or Group values.
type MicrosoftGraphColumnDefinition_PersonOrGroup struct {
	union json.RawMessage
}

// MicrosoftGraphColumnDefinitionSourceColumn1 defines model for .
type MicrosoftGraphColumnDefinitionSourceColumn1 = map[string]interface{}

// MicrosoftGraphColumnDefinition_SourceColumn The source column for the content type column.
type MicrosoftGraphColumnDefinition_SourceColumn struct {
	union json.RawMessage
}

// MicrosoftGraphColumnDefinitionSourceContentType1 defines model for .
type MicrosoftGraphColumnDefinitionSourceContentType1 = map[string]interface{}

// MicrosoftGraphColumnDefinition_SourceContentType ContentType from which this column is inherited from. Present only in contentTypes columns response. Read-only.
type MicrosoftGraphColumnDefinition_SourceContentType struct {
	union json.RawMessage
}

// MicrosoftGraphColumnDefinitionTerm1 defines model for .
type MicrosoftGraphColumnDefinitionTerm1 = map[string]interface{}

// MicrosoftGraphColumnDefinition_Term This column stores taxonomy terms.
type MicrosoftGraphColumnDefinition_Term struct {
	union json.RawMessage
}

// MicrosoftGraphColumnDefinitionText1 defines model for .
type MicrosoftGraphColumnDefinitionText1 = map[string]interface{}

// MicrosoftGraphColumnDefinition_Text This column stores text values.
type MicrosoftGraphColumnDefinition_Text struct {
	union json.RawMessage
}

// MicrosoftGraphColumnDefinitionThumbnail1 defines model for .
type MicrosoftGraphColumnDefinitionThumbnail1 = map[string]interface{}

// MicrosoftGraphColumnDefinition_Thumbnail This column stores thumbnail values.
type MicrosoftGraphColumnDefinition_Thumbnail struct {
	union json.RawMessage
}

// MicrosoftGraphColumnDefinitionType1 defines model for .
type MicrosoftGraphColumnDefinitionType1 = map[string]interface{}

// MicrosoftGraphColumnDefinition_Type For site columns, the type of column. Read-only.
type MicrosoftGraphColumnDefinition_Type struct {
	union json.RawMessage
}

// MicrosoftGraphColumnDefinitionValidation1 defines model for .
type MicrosoftGraphColumnDefinitionValidation1 = map[string]interface{}

// MicrosoftGraphColumnDefinition_Validation This column stores validation formula and message for the column.
type MicrosoftGraphColumnDefinition_Validation struct {
	union json.RawMessage
}

// MicrosoftGraphColumnLink defines model for microsoft.graph.columnLink.
type MicrosoftGraphColumnLink struct {
	// Id The unique idenfier for an entity. Read-only.
	Id *string `json:"id,omitempty"`

	// Name The name of the column  in this content type.
	Name *string `json:"name"`
}

// MicrosoftGraphColumnTypes defines model for microsoft.graph.columnTypes.
type MicrosoftGraphColumnTypes string

// MicrosoftGraphColumnValidation defines model for microsoft.graph.columnValidation.
type MicrosoftGraphColumnValidation struct {
	// DefaultLanguage Default BCP 47 language tag for the description.
	DefaultLanguage *string `json:"defaultLanguage"`

	// Descriptions Localized messages that explain what is needed for this column's value to be considered valid. User will be prompted with this message if validation fails.
	Descriptions *[]MicrosoftGraphColumnValidation_Descriptions_Item `json:"descriptions,omitempty"`

	// Formula The formula to validate column value. For examples, see Examples of common formulas in lists.
	Formula *string `json:"formula"`
}

// MicrosoftGraphColumnValidationDescriptions1 defines model for .
type MicrosoftGraphColumnValidationDescriptions1 = map[string]interface{}

// MicrosoftGraphColumnValidation_Descriptions_Item defines model for microsoft.graph.columnValidation.descriptions.Item.
type MicrosoftGraphColumnValidation_Descriptions_Item struct {
	union json.RawMessage
}

// MicrosoftGraphComplianceState Compliance state.
type MicrosoftGraphComplianceState string

// MicrosoftGraphComplianceStatus defines model for microsoft.graph.complianceStatus.
type MicrosoftGraphComplianceStatus string

// MicrosoftGraphConfigurationManagerClientEnabledFeatures configuration Manager client enabled features
type MicrosoftGraphConfigurationManagerClientEnabledFeatures struct {
	// CompliancePolicy Whether compliance policy is managed by Intune
	CompliancePolicy *bool `json:"compliancePolicy,omitempty"`

	// DeviceConfiguration Whether device configuration is managed by Intune
	DeviceConfiguration *bool `json:"deviceConfiguration,omitempty"`

	// Inventory Whether inventory is managed by Intune
	Inventory *bool `json:"inventory,omitempty"`

	// ModernApps Whether modern application is managed by Intune
	ModernApps *bool `json:"modernApps,omitempty"`

	// ResourceAccess Whether resource access is managed by Intune
	ResourceAccess *bool `json:"resourceAccess,omitempty"`

	// WindowsUpdateForBusiness Whether Windows Update for Business is managed by Intune
	WindowsUpdateForBusiness *bool `json:"windowsUpdateForBusiness,omitempty"`
}

// MicrosoftGraphContact defines model for microsoft.graph.contact.
type MicrosoftGraphContact struct {
	// AssistantName The name of the contact's assistant.
	AssistantName *string `json:"assistantName"`

	// Birthday The contact's birthday. The Timestamp type represents date and time information using ISO 8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 is 2014-01-01T00:00:00Z
	Birthday *time.Time `json:"birthday"`

	// BusinessAddress The contact's business address.
	BusinessAddress *MicrosoftGraphContact_BusinessAddress `json:"businessAddress,omitempty"`

	// BusinessHomePage The business home page of the contact.
	BusinessHomePage *string `json:"businessHomePage"`

	// BusinessPhones The contact's business phone numbers.
	BusinessPhones *[]string `json:"businessPhones,omitempty"`

	// Categories The categories associated with the item
	Categories *[]string `json:"categories,omitempty"`

	// ChangeKey Identifies the version of the item. Every time the item is changed, changeKey changes as well. This allows Exchange to apply changes to the correct version of the object. Read-only.
	ChangeKey *string `json:"changeKey"`

	// Children The names of the contact's children.
	Children *[]string `json:"children,omitempty"`

	// CompanyName The name of the contact's company.
	CompanyName *string `json:"companyName"`

	// CreatedDateTime The Timestamp type represents date and time information using ISO 8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 is 2014-01-01T00:00:00Z
	CreatedDateTime *time.Time `json:"createdDateTime"`

	// Department The contact's department.
	Department *string `json:"department"`

	// DisplayName The contact's display name. You can specify the display name in a create or update operation. Note that later updates to other properties may cause an automatically generated value to overwrite the displayName value you have specified. To preserve a pre-existing value, always include it as displayName in an update operation.
	DisplayName *string `json:"displayName"`

	// EmailAddresses The contact's email addresses.
	EmailAddresses *[]MicrosoftGraphContact_EmailAddresses_Item `json:"emailAddresses,omitempty"`

	// Extensions The collection of open extensions defined for the contact. Read-only. Nullable.
	Extensions *[]MicrosoftGraphExtension `json:"extensions,omitempty"`

	// FileAs The name the contact is filed under.
	FileAs *string `json:"fileAs"`

	// Generation The contact's generation.
	Generation *string `json:"generation"`

	// GivenName The contact's given name.
	GivenName *string `json:"givenName"`

	// HomeAddress The contact's home address.
	HomeAddress *MicrosoftGraphContact_HomeAddress `json:"homeAddress,omitempty"`

	// HomePhones The contact's home phone numbers.
	HomePhones *[]string `json:"homePhones,omitempty"`

	// Id The unique idenfier for an entity. Read-only.
	Id          *string   `json:"id,omitempty"`
	ImAddresses *[]string `json:"imAddresses,omitempty"`
	Initials    *string   `json:"initials"`
	JobTitle    *string   `json:"jobTitle"`

	// LastModifiedDateTime The Timestamp type represents date and time information using ISO 8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 is 2014-01-01T00:00:00Z
	LastModifiedDateTime *time.Time `json:"lastModifiedDateTime"`
	Manager              *string    `json:"manager"`
	MiddleName           *string    `json:"middleName"`
	MobilePhone          *string    `json:"mobilePhone"`

	// MultiValueExtendedProperties The collection of multi-value extended properties defined for the contact. Read-only. Nullable.
	MultiValueExtendedProperties *[]MicrosoftGraphMultiValueLegacyExtendedProperty `json:"multiValueExtendedProperties,omitempty"`
	NickName                     *string                                           `json:"nickName"`
	OfficeLocation               *string                                           `json:"officeLocation"`
	OtherAddress                 *MicrosoftGraphContact_OtherAddress               `json:"otherAddress,omitempty"`
	ParentFolderId               *string                                           `json:"parentFolderId"`
	PersonalNotes                *string                                           `json:"personalNotes"`

	// Photo Optional contact picture. You can get or set a photo for a contact.
	Photo      *MicrosoftGraphContact_Photo `json:"photo,omitempty"`
	Profession *string                      `json:"profession"`

	// SingleValueExtendedProperties The collection of single-value extended properties defined for the contact. Read-only. Nullable.
	SingleValueExtendedProperties *[]MicrosoftGraphSingleValueLegacyExtendedProperty `json:"singleValueExtendedProperties,omitempty"`
	SpouseName                    *string                                            `json:"spouseName"`
	Surname                       *string                                            `json:"surname"`
	Title                         *string                                            `json:"title"`
	YomiCompanyName               *string                                            `json:"yomiCompanyName"`
	YomiGivenName                 *string                                            `json:"yomiGivenName"`
	YomiSurname                   *string                                            `json:"yomiSurname"`
}

// MicrosoftGraphContactBusinessAddress1 defines model for .
type MicrosoftGraphContactBusinessAddress1 = map[string]interface{}

// MicrosoftGraphContact_BusinessAddress The contact's business address.
type MicrosoftGraphContact_BusinessAddress struct {
	union json.RawMessage
}

// MicrosoftGraphContactEmailAddresses1 defines model for .
type MicrosoftGraphContactEmailAddresses1 = map[string]interface{}

// MicrosoftGraphContact_EmailAddresses_Item defines model for microsoft.graph.contact.emailAddresses.Item.
type MicrosoftGraphContact_EmailAddresses_Item struct {
	union json.RawMessage
}

// MicrosoftGraphContactHomeAddress1 defines model for .
type MicrosoftGraphContactHomeAddress1 = map[string]interface{}

// MicrosoftGraphContact_HomeAddress The contact's home address.
type MicrosoftGraphContact_HomeAddress struct {
	union json.RawMessage
}

// MicrosoftGraphContactOtherAddress1 defines model for .
type MicrosoftGraphContactOtherAddress1 = map[string]interface{}

// MicrosoftGraphContact_OtherAddress defines model for MicrosoftGraphContact.OtherAddress.
type MicrosoftGraphContact_OtherAddress struct {
	union json.RawMessage
}

// MicrosoftGraphContactPhoto1 defines model for .
type MicrosoftGraphContactPhoto1 = map[string]interface{}

// MicrosoftGraphContact_Photo Optional contact picture. You can get or set a photo for a contact.
type MicrosoftGraphContact_Photo struct {
	union json.RawMessage
}

// MicrosoftGraphContactFolder defines model for microsoft.graph.contactFolder.
type MicrosoftGraphContactFolder struct {
	// ChildFolders The collection of child folders in the folder. Navigation property. Read-only. Nullable.
	ChildFolders *[]MicrosoftGraphContactFolder `json:"childFolders,omitempty"`

	// Contacts The contacts in the folder. Navigation property. Read-only. Nullable.
	Contacts *[]MicrosoftGraphContact `json:"contacts,omitempty"`

	// DisplayName The folder's display name.
	DisplayName *string `json:"displayName"`

	// Id The unique idenfier for an entity. Read-only.
	Id *string `json:"id,omitempty"`

	// MultiValueExtendedProperties The collection of multi-value extended properties defined for the contactFolder. Read-only. Nullable.
	MultiValueExtendedProperties *[]MicrosoftGraphMultiValueLegacyExtendedProperty `json:"multiValueExtendedProperties,omitempty"`

	// ParentFolderId The ID of the folder's parent folder.
	ParentFolderId *string `json:"parentFolderId"`

	// SingleValueExtendedProperties The collection of single-value extended properties defined for the contactFolder. Read-only. Nullable.
	SingleValueExtendedProperties *[]MicrosoftGraphSingleValueLegacyExtendedProperty `json:"singleValueExtendedProperties,omitempty"`
}

// MicrosoftGraphContentApprovalStatusColumn defines model for microsoft.graph.contentApprovalStatusColumn.
type MicrosoftGraphContentApprovalStatusColumn = map[string]interface{}

// MicrosoftGraphContentType defines model for microsoft.graph.contentType.
type MicrosoftGraphContentType struct {
	// AssociatedHubsUrls List of canonical URLs for hub sites with which this content type is associated to. This will contain all hub sites where this content type is queued to be enforced or is already enforced. Enforcing a content type means that the content type will be applied to the lists in the enforced sites.
	AssociatedHubsUrls *[]string `json:"associatedHubsUrls,omitempty"`

	// Base Parent contentType from which this content type is derived.
	Base *MicrosoftGraphContentType_Base `json:"base,omitempty"`

	// BaseTypes The collection of content types that are ancestors of this content type.
	BaseTypes *[]MicrosoftGraphContentType `json:"baseTypes,omitempty"`

	// ColumnLinks The collection of columns that are required by this content type.
	ColumnLinks *[]MicrosoftGraphColumnLink `json:"columnLinks,omitempty"`

	// ColumnPositions Column order information in a content type.
	ColumnPositions *[]MicrosoftGraphColumnDefinition `json:"columnPositions,omitempty"`

	// Columns The collection of column definitions for this contentType.
	Columns *[]MicrosoftGraphColumnDefinition `json:"columns,omitempty"`

	// Description The descriptive text for the item.
	Description *string `json:"description"`

	// DocumentSet Document Set metadata.
	DocumentSet *MicrosoftGraphContentType_DocumentSet `json:"documentSet,omitempty"`

	// DocumentTemplate Document template metadata. To make sure that documents have consistent content across a site and its subsites, you can associate a Word, Excel, or PowerPoint template with a site content type.
	DocumentTemplate *MicrosoftGraphContentType_DocumentTemplate `json:"documentTemplate,omitempty"`

	// Group The name of the group this content type belongs to. Helps organize related content types.
	Group *string `json:"group"`

	// Hidden Indicates whether the content type is hidden in the list's 'New' menu.
	Hidden *bool `json:"hidden"`

	// Id The unique idenfier for an entity. Read-only.
	Id *string `json:"id,omitempty"`

	// InheritedFrom If this content type is inherited from another scope (like a site), provides a reference to the item where the content type is defined.
	InheritedFrom *MicrosoftGraphContentType_InheritedFrom `json:"inheritedFrom,omitempty"`

	// IsBuiltIn Specifies if a content type is a built-in content type.
	IsBuiltIn *bool `json:"isBuiltIn"`

	// Name The name of the content type.
	Name *string `json:"name"`

	// Order Specifies the order in which the content type appears in the selection UI.
	Order *MicrosoftGraphContentType_Order `json:"order,omitempty"`

	// ParentId The unique identifier of the content type.
	ParentId *string `json:"parentId"`

	// PropagateChanges If true, any changes made to the content type will be pushed to inherited content types and lists that implement the content type.
	PropagateChanges *bool `json:"propagateChanges"`

	// ReadOnly If true, the content type can't be modified unless this value is first set to false.
	ReadOnly *bool `json:"readOnly"`

	// Sealed If true, the content type can't be modified by users or through push-down operations. Only site collection administrators can seal or unseal content types.
	Sealed *bool `json:"sealed"`
}

// MicrosoftGraphContentTypeBase1 defines model for .
type MicrosoftGraphContentTypeBase1 = map[string]interface{}

// MicrosoftGraphContentType_Base Parent contentType from which this content type is derived.
type MicrosoftGraphContentType_Base struct {
	union json.RawMessage
}

// MicrosoftGraphContentTypeDocumentSet1 defines model for .
type MicrosoftGraphContentTypeDocumentSet1 = map[string]interface{}

// MicrosoftGraphContentType_DocumentSet Document Set metadata.
type MicrosoftGraphContentType_DocumentSet struct {
	union json.RawMessage
}

// MicrosoftGraphContentTypeDocumentTemplate1 defines model for .
type MicrosoftGraphContentTypeDocumentTemplate1 = map[string]interface{}

// MicrosoftGraphContentType_DocumentTemplate Document template metadata. To make sure that documents have consistent content across a site and its subsites, you can associate a Word, Excel, or PowerPoint template with a site content type.
type MicrosoftGraphContentType_DocumentTemplate struct {
	union json.RawMessage
}

// MicrosoftGraphContentTypeInheritedFrom1 defines model for .
type MicrosoftGraphContentTypeInheritedFrom1 = map[string]interface{}

// MicrosoftGraphContentType_InheritedFrom If this content type is inherited from another scope (like a site), provides a reference to the item where the content type is defined.
type MicrosoftGraphContentType_InheritedFrom struct {
	union json.RawMessage
}

// MicrosoftGraphContentTypeOrder1 defines model for .
type MicrosoftGraphContentTypeOrder1 = map[string]interface{}

// MicrosoftGraphContentType_Order Specifies the order in which the content type appears in the selection UI.
type MicrosoftGraphContentType_Order struct {
	union json.RawMessage
}

// MicrosoftGraphContentTypeInfo defines model for microsoft.graph.contentTypeInfo.
type MicrosoftGraphContentTypeInfo struct {
	// Id The ID of the content type.
	Id *string `json:"id"`

	// Name The name of the content type.
	Name *string `json:"name"`
}

// MicrosoftGraphContentTypeOrder defines model for microsoft.graph.contentTypeOrder.
type MicrosoftGraphContentTypeOrder struct {
	// Default Indicates whether this is the default content type
	Default *bool `json:"default"`

	// Position Specifies the position in which the content type appears in the selection UI.
	Position *int32 `json:"position"`
}

// MicrosoftGraphConversation defines model for microsoft.graph.conversation.
type MicrosoftGraphConversation struct {
	// HasAttachments Indicates whether any of the posts within this Conversation has at least one attachment. Supports $filter (eq, ne) and $search.
	HasAttachments *bool `json:"hasAttachments,omitempty"`

	// Id The unique idenfier for an entity. Read-only.
	Id *string `json:"id,omitempty"`

	// LastDeliveredDateTime The Timestamp type represents date and time information using ISO 8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 is 2014-01-01T00:00:00Z
	LastDeliveredDateTime *time.Time `json:"lastDeliveredDateTime,omitempty"`

	// Preview A short summary from the body of the latest post in this conversation. Supports $filter (eq, ne, le, ge).
	Preview *string `json:"preview,omitempty"`

	// Threads A collection of all the conversation threads in the conversation. A navigation property. Read-only. Nullable.
	Threads *[]MicrosoftGraphConversationThread `json:"threads,omitempty"`

	// Topic The topic of the conversation. This property can be set when the conversation is created, but it cannot be updated.
	Topic *string `json:"topic,omitempty"`

	// UniqueSenders All the users that sent a message to this Conversation.
	UniqueSenders *[]string `json:"uniqueSenders,omitempty"`
}

// MicrosoftGraphConversationMember defines model for microsoft.graph.conversationMember.
type MicrosoftGraphConversationMember struct {
	// DisplayName The display name of the user.
	DisplayName *string `json:"displayName"`

	// Id The unique idenfier for an entity. Read-only.
	Id *string `json:"id,omitempty"`

	// Roles The roles for that user. This property contains additional qualifiers only when relevant - for example, if the member has owner privileges, the roles property contains owner as one of the values. Similarly, if the member is an in-tenant guest, the roles property contains guest as one of the values. A basic member should not have any values specified in the roles property. An Out-of-tenant external member is assigned the owner role.
	Roles *[]string `json:"roles,omitempty"`

	// VisibleHistoryStartDateTime The timestamp denoting how far back a conversation's history is shared with the conversation member. This property is settable only for members of a chat.
	VisibleHistoryStartDateTime *time.Time `json:"visibleHistoryStartDateTime"`
}

// MicrosoftGraphConversationThread defines model for microsoft.graph.conversationThread.
type MicrosoftGraphConversationThread struct {
	// CcRecipients The Cc: recipients for the thread. Returned only on $select.
	CcRecipients *[]MicrosoftGraphRecipient `json:"ccRecipients,omitempty"`

	// HasAttachments Indicates whether any of the posts within this thread has at least one attachment. Returned by default.
	HasAttachments *bool `json:"hasAttachments,omitempty"`

	// Id The unique idenfier for an entity. Read-only.
	Id *string `json:"id,omitempty"`

	// IsLocked Indicates if the thread is locked. Returned by default.
	IsLocked *bool `json:"isLocked,omitempty"`

	// LastDeliveredDateTime The Timestamp type represents date and time information using ISO 8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 is 2014-01-01T00:00:00Z.Returned by default.
	LastDeliveredDateTime *time.Time            `json:"lastDeliveredDateTime,omitempty"`
	Posts                 *[]MicrosoftGraphPost `json:"posts,omitempty"`

	// Preview A short summary from the body of the latest post in this conversation. Returned by default.
	Preview *string `json:"preview,omitempty"`

	// ToRecipients The To: recipients for the thread. Returned only on $select.
	ToRecipients *[]MicrosoftGraphRecipient `json:"toRecipients,omitempty"`

	// Topic The topic of the conversation. This property can be set when the conversation is created, but it cannot be updated. Returned by default.
	Topic *string `json:"topic,omitempty"`

	// UniqueSenders All the users that sent a message to this thread. Returned by default.
	UniqueSenders *[]string `json:"uniqueSenders,omitempty"`
}

// MicrosoftGraphCourseStatus defines model for microsoft.graph.courseStatus.
type MicrosoftGraphCourseStatus string

// MicrosoftGraphCurrencyColumn defines model for microsoft.graph.currencyColumn.
type MicrosoftGraphCurrencyColumn struct {
	// Locale Specifies the locale from which to infer the currency symbol.
	Locale *string `json:"locale"`
}

// MicrosoftGraphCustomSecurityAttributeValue defines model for microsoft.graph.customSecurityAttributeValue.
type MicrosoftGraphCustomSecurityAttributeValue = map[string]interface{}

// MicrosoftGraphDateTimeColumn defines model for microsoft.graph.dateTimeColumn.
type MicrosoftGraphDateTimeColumn struct {
	// DisplayAs How the value should be presented in the UX. Must be one of default, friendly, or standard. See below for more details. If unspecified, treated as default.
	DisplayAs *string `json:"displayAs"`

	// Format Indicates whether the value should be presented as a date only or a date and time. Must be one of dateOnly or dateTime
	Format *string `json:"format"`
}

// MicrosoftGraphDateTimeTimeZone defines model for microsoft.graph.dateTimeTimeZone.
type MicrosoftGraphDateTimeTimeZone struct {
	// DateTime A single point of time in a combined date and time representation ({date}T{time}; for example, 2017-08-29T04:00:00.0000000).
	DateTime *string `json:"dateTime,omitempty"`

	// TimeZone Represents a time zone, for example, 'Pacific Standard Time'. See below for more possible values.
	TimeZone *string `json:"timeZone"`
}

// MicrosoftGraphDayOfWeek defines model for microsoft.graph.dayOfWeek.
type MicrosoftGraphDayOfWeek string

// MicrosoftGraphDefaultColumnValue defines model for microsoft.graph.defaultColumnValue.
type MicrosoftGraphDefaultColumnValue struct {
	// Formula The formula used to compute the default value for the column.
	Formula *string `json:"formula"`

	// Value The direct value to use as the default value for the column.
	Value *string `json:"value"`
}

// MicrosoftGraphDelegateMeetingMessageDeliveryOptions defines model for microsoft.graph.delegateMeetingMessageDeliveryOptions.
type MicrosoftGraphDelegateMeetingMessageDeliveryOptions string

// MicrosoftGraphDeleted defines model for microsoft.graph.deleted.
type MicrosoftGraphDeleted struct {
	// State Represents the state of the deleted item.
	State *string `json:"state"`
}

// MicrosoftGraphDevice defines model for microsoft.graph.device.
type MicrosoftGraphDevice struct {
	// AccountEnabled true if the account is enabled; otherwise, false. Required. Default is true.  Supports $filter (eq, ne, not, in). Only callers in Global Administrator and Cloud Device Administrator roles can set this property.
	AccountEnabled *bool `json:"accountEnabled"`

	// AlternativeSecurityIds For internal use only. Not nullable. Supports $filter (eq, not, ge, le).
	AlternativeSecurityIds *[]MicrosoftGraphAlternativeSecurityId `json:"alternativeSecurityIds,omitempty"`

	// ApproximateLastSignInDateTime The timestamp type represents date and time information using ISO 8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 is 2014-01-01T00:00:00Z. Read-only. Supports $filter (eq, ne, not, ge, le, and eq on null values) and $orderBy.
	ApproximateLastSignInDateTime *time.Time `json:"approximateLastSignInDateTime"`

	// ComplianceExpirationDateTime The timestamp when the device is no longer deemed compliant. The timestamp type represents date and time information using ISO 8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 is 2014-01-01T00:00:00Z. Read-only.
	ComplianceExpirationDateTime *time.Time `json:"complianceExpirationDateTime"`

	// DeletedDateTime Date and time when this object was deleted. Always null when the object hasn't been deleted.
	DeletedDateTime *time.Time `json:"deletedDateTime"`

	// DeviceCategory User-defined property set by Intune to automatically add devices to groups and simplify managing devices.
	DeviceCategory *string `json:"deviceCategory"`

	// DeviceId Unique identifier set by Azure Device Registration Service at the time of registration. This is an alternate key that can be used to reference the device object. Supports $filter (eq, ne, not, startsWith).
	DeviceId *string `json:"deviceId"`

	// DeviceMetadata For internal use only. Set to null.
	DeviceMetadata *string `json:"deviceMetadata"`

	// DeviceOwnership Ownership of the device. This property is set by Intune. Possible values are: unknown, company, personal.
	DeviceOwnership *string `json:"deviceOwnership"`

	// DeviceVersion For internal use only.
	DeviceVersion *int32 `json:"deviceVersion"`

	// DisplayName The display name for the device. Required. Supports $filter (eq, ne, not, ge, le, in, startsWith, and eq on null values), $search, and $orderBy.
	DisplayName *string `json:"displayName"`

	// EnrollmentProfileName Enrollment profile applied to the device. For example, Apple Device Enrollment Profile, Device enrollment - Corporate device identifiers, or Windows Autopilot profile name. This property is set by Intune.
	EnrollmentProfileName *string `json:"enrollmentProfileName"`

	// Extensions The collection of open extensions defined for the device. Read-only. Nullable.
	Extensions *[]MicrosoftGraphExtension `json:"extensions,omitempty"`

	// Id The unique idenfier for an entity. Read-only.
	Id *string `json:"id,omitempty"`

	// IsCompliant true if the device complies with Mobile Device Management (MDM) policies; otherwise, false. Read-only. This can only be updated by Intune for any device OS type or by an approved MDM app for Windows OS devices. Supports $filter (eq, ne, not).
	IsCompliant *bool `json:"isCompliant"`

	// IsManaged true if the device is managed by a Mobile Device Management (MDM) app; otherwise, false. This can only be updated by Intune for any device OS type or by an approved MDM app for Windows OS devices. Supports $filter (eq, ne, not).
	IsManaged *bool `json:"isManaged"`

	// MdmAppId Application identifier used to register device into MDM. Read-only. Supports $filter (eq, ne, not, startsWith).
	MdmAppId *string `json:"mdmAppId"`

	// MemberOf Groups and administrative units that this device is a member of. Read-only. Nullable. Supports $expand.
	MemberOf *[]MicrosoftGraphDirectoryObject `json:"memberOf,omitempty"`

	// OnPremisesLastSyncDateTime The last time at which the object was synced with the on-premises directory. The Timestamp type represents date and time information using ISO 8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 is 2014-01-01T00:00:00Z Read-only. Supports $filter (eq, ne, not, ge, le, in).
	OnPremisesLastSyncDateTime *time.Time `json:"onPremisesLastSyncDateTime"`

	// OnPremisesSyncEnabled true if this object is synced from an on-premises directory; false if this object was originally synced from an on-premises directory but is no longer synced; null if this object has never been synced from an on-premises directory (default). Read-only. Supports $filter (eq, ne, not, in, and eq on null values).
	OnPremisesSyncEnabled *bool `json:"onPremisesSyncEnabled"`

	// OperatingSystem The type of operating system on the device. Required. Supports $filter (eq, ne, not, ge, le, startsWith, and eq on null values).
	OperatingSystem *string `json:"operatingSystem"`

	// OperatingSystemVersion The version of the operating system on the device. Required. Supports $filter (eq, ne, not, ge, le, startsWith, and eq on null values).
	OperatingSystemVersion *string `json:"operatingSystemVersion"`

	// PhysicalIds For internal use only. Not nullable. Supports $filter (eq, not, ge, le, startsWith,/$count eq 0, /$count ne 0).
	PhysicalIds *[]string `json:"physicalIds,omitempty"`

	// ProfileType The profile type of the device. Possible values: RegisteredDevice (default), SecureVM, Printer, Shared, IoT.
	ProfileType *string `json:"profileType"`

	// RegisteredOwners The user that cloud joined the device or registered their personal device. The registered owner is set at the time of registration. Read-only. Nullable. Supports $expand.
	RegisteredOwners *[]MicrosoftGraphDirectoryObject `json:"registeredOwners,omitempty"`

	// RegisteredUsers Collection of registered users of the device. For cloud joined devices and registered personal devices, registered users are set to the same value as registered owners at the time of registration. Read-only. Nullable. Supports $expand.
	RegisteredUsers *[]MicrosoftGraphDirectoryObject `json:"registeredUsers,omitempty"`

	// RegistrationDateTime Date and time of when the device was registered. The timestamp type represents date and time information using ISO 8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 is 2014-01-01T00:00:00Z. Read-only.
	RegistrationDateTime *time.Time `json:"registrationDateTime"`

	// SystemLabels List of labels applied to the device by the system. Supports $filter (/$count eq 0, /$count ne 0).
	SystemLabels *[]string `json:"systemLabels,omitempty"`

	// TransitiveMemberOf Groups and administrative units that the device is a member of. This operation is transitive. Supports $expand.
	TransitiveMemberOf *[]MicrosoftGraphDirectoryObject `json:"transitiveMemberOf,omitempty"`

	// TrustType Type of trust for the joined device. Read-only. Possible values:  Workplace (indicates bring your own personal devices), AzureAd (Cloud only joined devices), ServerAd (on-premises domain joined devices joined to Azure AD). For more details, see Introduction to device management in Azure Active Directory
	TrustType *string `json:"trustType"`
}

// MicrosoftGraphDeviceActionResult Device action result
type MicrosoftGraphDeviceActionResult struct {
	// ActionName Action name
	ActionName *string `json:"actionName"`

	// ActionState State of the action on the device
	ActionState *MicrosoftGraphActionState `json:"actionState,omitempty"`

	// LastUpdatedDateTime Time the action state was last updated
	LastUpdatedDateTime *time.Time `json:"lastUpdatedDateTime,omitempty"`

	// StartDateTime Time the action was initiated
	StartDateTime *time.Time `json:"startDateTime,omitempty"`
}

// MicrosoftGraphDeviceCategory defines model for microsoft.graph.deviceCategory.
type MicrosoftGraphDeviceCategory struct {
	// Description Optional description for the device category.
	Description *string `json:"description"`

	// DisplayName Display name for the device category.
	DisplayName *string `json:"displayName"`

	// Id The unique idenfier for an entity. Read-only.
	Id *string `json:"id,omitempty"`
}

// MicrosoftGraphDeviceCompliancePolicySettingState Device Compilance Policy Setting State for a given device.
type MicrosoftGraphDeviceCompliancePolicySettingState struct {
	// CurrentValue Current value of setting on device
	CurrentValue *string `json:"currentValue"`

	// ErrorCode Error code for the setting
	ErrorCode *int64 `json:"errorCode,omitempty"`

	// ErrorDescription Error description
	ErrorDescription *string `json:"errorDescription"`

	// InstanceDisplayName Name of setting instance that is being reported.
	InstanceDisplayName *string `json:"instanceDisplayName"`

	// Setting The setting that is being reported
	Setting *string `json:"setting"`

	// SettingName Localized/user friendly setting name that is being reported
	SettingName *string `json:"settingName"`

	// Sources Contributing policies
	Sources *[]MicrosoftGraphDeviceCompliancePolicySettingState_Sources_Item `json:"sources,omitempty"`
	State   *MicrosoftGraphComplianceStatus                                  `json:"state,omitempty"`

	// UserEmail UserEmail
	UserEmail *string `json:"userEmail"`

	// UserId UserId
	UserId *string `json:"userId"`

	// UserName UserName
	UserName *string `json:"userName"`

	// UserPrincipalName UserPrincipalName.
	UserPrincipalName *string `json:"userPrincipalName"`
}

// MicrosoftGraphDeviceCompliancePolicySettingStateSources1 defines model for .
type MicrosoftGraphDeviceCompliancePolicySettingStateSources1 = map[string]interface{}

// MicrosoftGraphDeviceCompliancePolicySettingState_Sources_Item defines model for microsoft.graph.deviceCompliancePolicySettingState.sources.Item.
type MicrosoftGraphDeviceCompliancePolicySettingState_Sources_Item struct {
	union json.RawMessage
}

// MicrosoftGraphDeviceCompliancePolicyState defines model for microsoft.graph.deviceCompliancePolicyState.
type MicrosoftGraphDeviceCompliancePolicyState struct {
	// DisplayName The name of the policy for this policyBase
	DisplayName *string `json:"displayName"`

	// Id The unique idenfier for an entity. Read-only.
	Id *string `json:"id,omitempty"`

	// PlatformType Supported platform types for policies.
	PlatformType *MicrosoftGraphPolicyPlatformType `json:"platformType,omitempty"`

	// SettingCount Count of how many setting a policy holds
	SettingCount  *int32                                                          `json:"settingCount,omitempty"`
	SettingStates *[]MicrosoftGraphDeviceCompliancePolicyState_SettingStates_Item `json:"settingStates,omitempty"`
	State         *MicrosoftGraphComplianceStatus                                 `json:"state,omitempty"`

	// Version The version of the policy
	Version *int32 `json:"version,omitempty"`
}

// MicrosoftGraphDeviceCompliancePolicyStateSettingStates1 defines model for .
type MicrosoftGraphDeviceCompliancePolicyStateSettingStates1 = map[string]interface{}

// MicrosoftGraphDeviceCompliancePolicyState_SettingStates_Item defines model for microsoft.graph.deviceCompliancePolicyState.settingStates.Item.
type MicrosoftGraphDeviceCompliancePolicyState_SettingStates_Item struct {
	union json.RawMessage
}

// MicrosoftGraphDeviceConfigurationSettingState Device Configuration Setting State for a given device.
type MicrosoftGraphDeviceConfigurationSettingState struct {
	// CurrentValue Current value of setting on device
	CurrentValue *string `json:"currentValue"`

	// ErrorCode Error code for the setting
	ErrorCode *int64 `json:"errorCode,omitempty"`

	// ErrorDescription Error description
	ErrorDescription *string `json:"errorDescription"`

	// InstanceDisplayName Name of setting instance that is being reported.
	InstanceDisplayName *string `json:"instanceDisplayName"`

	// Setting The setting that is being reported
	Setting *string `json:"setting"`

	// SettingName Localized/user friendly setting name that is being reported
	SettingName *string `json:"settingName"`

	// Sources Contributing policies
	Sources *[]MicrosoftGraphDeviceConfigurationSettingState_Sources_Item `json:"sources,omitempty"`
	State   *MicrosoftGraphComplianceStatus                               `json:"state,omitempty"`

	// UserEmail UserEmail
	UserEmail *string `json:"userEmail"`

	// UserId UserId
	UserId *string `json:"userId"`

	// UserName UserName
	UserName *string `json:"userName"`

	// UserPrincipalName UserPrincipalName.
	UserPrincipalName *string `json:"userPrincipalName"`
}

// MicrosoftGraphDeviceConfigurationSettingStateSources1 defines model for .
type MicrosoftGraphDeviceConfigurationSettingStateSources1 = map[string]interface{}

// MicrosoftGraphDeviceConfigurationSettingState_Sources_Item defines model for microsoft.graph.deviceConfigurationSettingState.sources.Item.
type MicrosoftGraphDeviceConfigurationSettingState_Sources_Item struct {
	union json.RawMessage
}

// MicrosoftGraphDeviceConfigurationState defines model for microsoft.graph.deviceConfigurationState.
type MicrosoftGraphDeviceConfigurationState struct {
	// DisplayName The name of the policy for this policyBase
	DisplayName *string `json:"displayName"`

	// Id The unique idenfier for an entity. Read-only.
	Id *string `json:"id,omitempty"`

	// PlatformType Supported platform types for policies.
	PlatformType *MicrosoftGraphPolicyPlatformType `json:"platformType,omitempty"`

	// SettingCount Count of how many setting a policy holds
	SettingCount  *int32                                                       `json:"settingCount,omitempty"`
	SettingStates *[]MicrosoftGraphDeviceConfigurationState_SettingStates_Item `json:"settingStates,omitempty"`
	State         *MicrosoftGraphComplianceStatus                              `json:"state,omitempty"`

	// Version The version of the policy
	Version *int32 `json:"version,omitempty"`
}

// MicrosoftGraphDeviceConfigurationStateSettingStates1 defines model for .
type MicrosoftGraphDeviceConfigurationStateSettingStates1 = map[string]interface{}

// MicrosoftGraphDeviceConfigurationState_SettingStates_Item defines model for microsoft.graph.deviceConfigurationState.settingStates.Item.
type MicrosoftGraphDeviceConfigurationState_SettingStates_Item struct {
	union json.RawMessage
}

// MicrosoftGraphDeviceEnrollmentType Possible ways of adding a mobile device to management.
type MicrosoftGraphDeviceEnrollmentType string

// MicrosoftGraphDeviceHealthAttestationState defines model for microsoft.graph.deviceHealthAttestationState.
type MicrosoftGraphDeviceHealthAttestationState struct {
	// AttestationIdentityKey TWhen an Attestation Identity Key (AIK) is present on a device, it indicates that the device has an endorsement key (EK) certificate.
	AttestationIdentityKey *string `json:"attestationIdentityKey"`

	// BitLockerStatus On or Off of BitLocker Drive Encryption
	BitLockerStatus *string `json:"bitLockerStatus"`

	// BootAppSecurityVersion The security version number of the Boot Application
	BootAppSecurityVersion *string `json:"bootAppSecurityVersion"`

	// BootDebugging When bootDebugging is enabled, the device is used in development and testing
	BootDebugging *string `json:"bootDebugging"`

	// BootManagerSecurityVersion The security version number of the Boot Application
	BootManagerSecurityVersion *string `json:"bootManagerSecurityVersion"`

	// BootManagerVersion The version of the Boot Manager
	BootManagerVersion *string `json:"bootManagerVersion"`

	// BootRevisionListInfo The Boot Revision List that was loaded during initial boot on the attested device
	BootRevisionListInfo *string `json:"bootRevisionListInfo"`

	// CodeIntegrity When code integrity is enabled, code execution is restricted to integrity verified code
	CodeIntegrity *string `json:"codeIntegrity"`

	// CodeIntegrityCheckVersion The version of the Boot Manager
	CodeIntegrityCheckVersion *string `json:"codeIntegrityCheckVersion"`

	// CodeIntegrityPolicy The Code Integrity policy that is controlling the security of the boot environment
	CodeIntegrityPolicy *string `json:"codeIntegrityPolicy"`

	// ContentNamespaceUrl The DHA report version. (Namespace version)
	ContentNamespaceUrl *string `json:"contentNamespaceUrl"`

	// ContentVersion The HealthAttestation state schema version
	ContentVersion *string `json:"contentVersion"`

	// DataExcutionPolicy DEP Policy defines a set of hardware and software technologies that perform additional checks on memory
	DataExcutionPolicy *string `json:"dataExcutionPolicy"`

	// DeviceHealthAttestationStatus The DHA report version. (Namespace version)
	DeviceHealthAttestationStatus *string `json:"deviceHealthAttestationStatus"`

	// EarlyLaunchAntiMalwareDriverProtection ELAM provides protection for the computers in your network when they start up
	EarlyLaunchAntiMalwareDriverProtection *string `json:"earlyLaunchAntiMalwareDriverProtection"`

	// HealthAttestationSupportedStatus This attribute indicates if DHA is supported for the device
	HealthAttestationSupportedStatus *string `json:"healthAttestationSupportedStatus"`

	// HealthStatusMismatchInfo This attribute appears if DHA-Service detects an integrity issue
	HealthStatusMismatchInfo *string `json:"healthStatusMismatchInfo"`

	// IssuedDateTime The DateTime when device was evaluated or issued to MDM
	IssuedDateTime *time.Time `json:"issuedDateTime,omitempty"`

	// LastUpdateDateTime The Timestamp of the last update.
	LastUpdateDateTime *string `json:"lastUpdateDateTime"`

	// OperatingSystemKernelDebugging When operatingSystemKernelDebugging is enabled, the device is used in development and testing
	OperatingSystemKernelDebugging *string `json:"operatingSystemKernelDebugging"`

	// OperatingSystemRevListInfo The Operating System Revision List that was loaded during initial boot on the attested device
	OperatingSystemRevListInfo *string `json:"operatingSystemRevListInfo"`

	// Pcr0 The measurement that is captured in PCR[0]
	Pcr0 *string `json:"pcr0"`

	// PcrHashAlgorithm Informational attribute that identifies the HASH algorithm that was used by TPM
	PcrHashAlgorithm *string `json:"pcrHashAlgorithm"`

	// ResetCount The number of times a PC device has hibernated or resumed
	ResetCount *int64 `json:"resetCount,omitempty"`

	// RestartCount The number of times a PC device has rebooted
	RestartCount *int64 `json:"restartCount,omitempty"`

	// SafeMode Safe mode is a troubleshooting option for Windows that starts your computer in a limited state
	SafeMode *string `json:"safeMode"`

	// SecureBoot When Secure Boot is enabled, the core components must have the correct cryptographic signatures
	SecureBoot *string `json:"secureBoot"`

	// SecureBootConfigurationPolicyFingerPrint Fingerprint of the Custom Secure Boot Configuration Policy
	SecureBootConfigurationPolicyFingerPrint *string `json:"secureBootConfigurationPolicyFingerPrint"`

	// TestSigning When test signing is allowed, the device does not enforce signature validation during boot
	TestSigning *string `json:"testSigning"`

	// TpmVersion The security version number of the Boot Application
	TpmVersion *string `json:"tpmVersion"`

	// VirtualSecureMode VSM is a container that protects high value assets from a compromised kernel
	VirtualSecureMode *string `json:"virtualSecureMode"`

	// WindowsPE Operating system running with limited services that is used to prepare a computer for Windows
	WindowsPE *string `json:"windowsPE"`
}

// MicrosoftGraphDeviceLogCollectionResponse defines model for microsoft.graph.deviceLogCollectionResponse.
type MicrosoftGraphDeviceLogCollectionResponse struct {
	// EnrolledByUser The User Principal Name (UPN) of the user that enrolled the device.
	EnrolledByUser *string `json:"enrolledByUser"`

	// ExpirationDateTimeUTC The DateTime of the expiration of the logs.
	ExpirationDateTimeUTC *time.Time `json:"expirationDateTimeUTC"`

	// Id The unique idenfier for an entity. Read-only.
	Id *string `json:"id,omitempty"`

	// InitiatedByUserPrincipalName The UPN for who initiated the request.
	InitiatedByUserPrincipalName *string `json:"initiatedByUserPrincipalName"`

	// ManagedDeviceId Indicates Intune device unique identifier.
	ManagedDeviceId *openapi_types.UUID `json:"managedDeviceId,omitempty"`

	// ReceivedDateTimeUTC The DateTime the request was received.
	ReceivedDateTimeUTC *time.Time `json:"receivedDateTimeUTC"`

	// RequestedDateTimeUTC The DateTime of the request.
	RequestedDateTimeUTC *time.Time `json:"requestedDateTimeUTC"`

	// SizeInKB The size of the logs in KB. Valid values -1.79769313486232E+308 to 1.79769313486232E+308
	SizeInKB *MicrosoftGraphDeviceLogCollectionResponse_SizeInKB `json:"sizeInKB,omitempty"`

	// Status AppLogUploadStatus
	Status *MicrosoftGraphAppLogUploadState `json:"status,omitempty"`
}

// MicrosoftGraphDeviceLogCollectionResponseSizeInKB0 defines model for .
type MicrosoftGraphDeviceLogCollectionResponseSizeInKB0 = float64

// MicrosoftGraphDeviceLogCollectionResponseSizeInKB1 defines model for .
type MicrosoftGraphDeviceLogCollectionResponseSizeInKB1 = string

// MicrosoftGraphDeviceLogCollectionResponse_SizeInKB The size of the logs in KB. Valid values -1.79769313486232E+308 to 1.79769313486232E+308
type MicrosoftGraphDeviceLogCollectionResponse_SizeInKB struct {
	union json.RawMessage
}

// MicrosoftGraphDeviceManagementExchangeAccessState Device Exchange Access State.
type MicrosoftGraphDeviceManagementExchangeAccessState string

// MicrosoftGraphDeviceManagementExchangeAccessStateReason Device Exchange Access State Reason.
type MicrosoftGraphDeviceManagementExchangeAccessStateReason string

// MicrosoftGraphDeviceManagementTroubleshootingEvent defines model for microsoft.graph.deviceManagementTroubleshootingEvent.
type MicrosoftGraphDeviceManagementTroubleshootingEvent struct {
	// CorrelationId Id used for tracing the failure in the service.
	CorrelationId *string `json:"correlationId"`

	// EventDateTime Time when the event occurred .
	EventDateTime *time.Time `json:"eventDateTime,omitempty"`

	// Id The unique idenfier for an entity. Read-only.
	Id *string `json:"id,omitempty"`
}

// MicrosoftGraphDeviceRegistrationState Device registration status.
type MicrosoftGraphDeviceRegistrationState string

// MicrosoftGraphDirectoryObject defines model for microsoft.graph.directoryObject.
type MicrosoftGraphDirectoryObject struct {
	// DeletedDateTime Date and time when this object was deleted. Always null when the object hasn't been deleted.
	DeletedDateTime *time.Time `json:"deletedDateTime"`

	// Id The unique idenfier for an entity. Read-only.
	Id *string `json:"id,omitempty"`
}

// MicrosoftGraphDisplayNameLocalization defines model for microsoft.graph.displayNameLocalization.
type MicrosoftGraphDisplayNameLocalization struct {
	// DisplayName If present, the value of this field contains the displayName string that has been set for the language present in the languageTag field.
	DisplayName *string `json:"displayName"`

	// LanguageTag Provides the language culture-code and friendly name of the language that the displayName field has been provided in.
	LanguageTag *string `json:"languageTag"`
}

// MicrosoftGraphDocumentSet defines model for microsoft.graph.documentSet.
type MicrosoftGraphDocumentSet struct {
	// AllowedContentTypes Content types allowed in document set.
	AllowedContentTypes *[]MicrosoftGraphDocumentSet_AllowedContentTypes_Item `json:"allowedContentTypes,omitempty"`

	// DefaultContents Default contents of document set.
	DefaultContents *[]MicrosoftGraphDocumentSet_DefaultContents_Item `json:"defaultContents,omitempty"`

	// PropagateWelcomePageChanges Specifies whether to push welcome page changes to inherited content types.
	PropagateWelcomePageChanges *bool                             `json:"propagateWelcomePageChanges"`
	SharedColumns               *[]MicrosoftGraphColumnDefinition `json:"sharedColumns,omitempty"`

	// ShouldPrefixNameToFile Indicates whether to add the name of the document set to each file name.
	ShouldPrefixNameToFile *bool                             `json:"shouldPrefixNameToFile"`
	WelcomePageColumns     *[]MicrosoftGraphColumnDefinition `json:"welcomePageColumns,omitempty"`

	// WelcomePageUrl Welcome page absolute URL.
	WelcomePageUrl *string `json:"welcomePageUrl"`
}

// MicrosoftGraphDocumentSetAllowedContentTypes1 defines model for .
type MicrosoftGraphDocumentSetAllowedContentTypes1 = map[string]interface{}

// MicrosoftGraphDocumentSet_AllowedContentTypes_Item defines model for microsoft.graph.documentSet.allowedContentTypes.Item.
type MicrosoftGraphDocumentSet_AllowedContentTypes_Item struct {
	union json.RawMessage
}

// MicrosoftGraphDocumentSetDefaultContents1 defines model for .
type MicrosoftGraphDocumentSetDefaultContents1 = map[string]interface{}

// MicrosoftGraphDocumentSet_DefaultContents_Item defines model for microsoft.graph.documentSet.defaultContents.Item.
type MicrosoftGraphDocumentSet_DefaultContents_Item struct {
	union json.RawMessage
}

// MicrosoftGraphDocumentSetContent defines model for microsoft.graph.documentSetContent.
type MicrosoftGraphDocumentSetContent struct {
	// ContentType Content type information of the file.
	ContentType *MicrosoftGraphDocumentSetContent_ContentType `json:"contentType,omitempty"`

	// FileName Name of the file in resource folder that should be added as a default content or a template in the document set.
	FileName *string `json:"fileName"`

	// FolderName Folder name in which the file will be placed when a new document set is created in the library.
	FolderName *string `json:"folderName"`
}

// MicrosoftGraphDocumentSetContentContentType1 defines model for .
type MicrosoftGraphDocumentSetContentContentType1 = map[string]interface{}

// MicrosoftGraphDocumentSetContent_ContentType Content type information of the file.
type MicrosoftGraphDocumentSetContent_ContentType struct {
	union json.RawMessage
}

// MicrosoftGraphDocumentSetVersion defines model for microsoft.graph.documentSetVersion.
type MicrosoftGraphDocumentSetVersion struct {
	// Comment Comment about the captured version.
	Comment *string `json:"comment"`

	// CreatedBy User who captured the version.
	CreatedBy *MicrosoftGraphDocumentSetVersion_CreatedBy `json:"createdBy,omitempty"`

	// CreatedDateTime Date and time when this version was created.
	CreatedDateTime *time.Time `json:"createdDateTime"`

	// Fields A collection of the fields and values for this version of the list item.
	Fields *MicrosoftGraphDocumentSetVersion_Fields `json:"fields,omitempty"`

	// Id The unique idenfier for an entity. Read-only.
	Id *string `json:"id,omitempty"`

	// Items Items within the document set that are captured as part of this version.
	Items *[]MicrosoftGraphDocumentSetVersion_Items_Item `json:"items,omitempty"`

	// LastModifiedBy Identity of the user which last modified the version. Read-only.
	LastModifiedBy *MicrosoftGraphDocumentSetVersion_LastModifiedBy `json:"lastModifiedBy,omitempty"`

	// LastModifiedDateTime Date and time the version was last modified. Read-only.
	LastModifiedDateTime *time.Time `json:"lastModifiedDateTime"`

	// Publication Indicates the publication status of this particular version. Read-only.
	Publication *MicrosoftGraphDocumentSetVersion_Publication `json:"publication,omitempty"`

	// ShouldCaptureMinorVersion If true, minor versions of items are also captured; otherwise, only major versions will be captured. Default value is false.
	ShouldCaptureMinorVersion *bool `json:"shouldCaptureMinorVersion"`
}

// MicrosoftGraphDocumentSetVersionCreatedBy1 defines model for .
type MicrosoftGraphDocumentSetVersionCreatedBy1 = map[string]interface{}

// MicrosoftGraphDocumentSetVersion_CreatedBy User who captured the version.
type MicrosoftGraphDocumentSetVersion_CreatedBy struct {
	union json.RawMessage
}

// MicrosoftGraphDocumentSetVersionFields1 defines model for .
type MicrosoftGraphDocumentSetVersionFields1 = map[string]interface{}

// MicrosoftGraphDocumentSetVersion_Fields A collection of the fields and values for this version of the list item.
type MicrosoftGraphDocumentSetVersion_Fields struct {
	union json.RawMessage
}

// MicrosoftGraphDocumentSetVersionItems1 defines model for .
type MicrosoftGraphDocumentSetVersionItems1 = map[string]interface{}

// MicrosoftGraphDocumentSetVersion_Items_Item defines model for microsoft.graph.documentSetVersion.items.Item.
type MicrosoftGraphDocumentSetVersion_Items_Item struct {
	union json.RawMessage
}

// MicrosoftGraphDocumentSetVersionLastModifiedBy1 defines model for .
type MicrosoftGraphDocumentSetVersionLastModifiedBy1 = map[string]interface{}

// MicrosoftGraphDocumentSetVersion_LastModifiedBy Identity of the user which last modified the version. Read-only.
type MicrosoftGraphDocumentSetVersion_LastModifiedBy struct {
	union json.RawMessage
}

// MicrosoftGraphDocumentSetVersionPublication1 defines model for .
type MicrosoftGraphDocumentSetVersionPublication1 = map[string]interface{}

// MicrosoftGraphDocumentSetVersion_Publication Indicates the publication status of this particular version. Read-only.
type MicrosoftGraphDocumentSetVersion_Publication struct {
	union json.RawMessage
}

// MicrosoftGraphDocumentSetVersionItem defines model for microsoft.graph.documentSetVersionItem.
type MicrosoftGraphDocumentSetVersionItem struct {
	// ItemId The unique identifier for the item.
	ItemId *string `json:"itemId"`

	// Title The title of the item.
	Title *string `json:"title"`

	// VersionId The version ID of the item.
	VersionId *string `json:"versionId"`
}

// MicrosoftGraphDrive defines model for microsoft.graph.drive.
type MicrosoftGraphDrive struct {
	// Bundles Collection of [bundles][bundle] (albums and multi-select-shared sets of items). Only in personal OneDrive.
	Bundles *[]MicrosoftGraphDriveItem `json:"bundles,omitempty"`

	// CreatedBy Identity of the user, device, or application which created the item. Read-only.
	CreatedBy *MicrosoftGraphDrive_CreatedBy `json:"createdBy,omitempty"`

	// CreatedByUser Identity of the user who created the item. Read-only.
	CreatedByUser *MicrosoftGraphDrive_CreatedByUser `json:"createdByUser,omitempty"`

	// CreatedDateTime Date and time of item creation. Read-only.
	CreatedDateTime *time.Time `json:"createdDateTime,omitempty"`

	// Description Provides a user-visible description of the item. Optional.
	Description *string `json:"description"`

	// DriveType Describes the type of drive represented by this resource. OneDrive personal drives will return personal. OneDrive for Business will return business. SharePoint document libraries will return documentLibrary. Read-only.
	DriveType *string `json:"driveType"`

	// ETag ETag for the item. Read-only.
	ETag *string `json:"eTag"`

	// Following The list of items the user is following. Only in OneDrive for Business.
	Following *[]MicrosoftGraphDriveItem `json:"following,omitempty"`

	// Id The unique idenfier for an entity. Read-only.
	Id *string `json:"id,omitempty"`

	// Items All items contained in the drive. Read-only. Nullable.
	Items *[]MicrosoftGraphDriveItem `json:"items,omitempty"`

	// LastModifiedBy Identity of the user, device, and application which last modified the item. Read-only.
	LastModifiedBy *MicrosoftGraphDrive_LastModifiedBy `json:"lastModifiedBy,omitempty"`

	// LastModifiedByUser Identity of the user who last modified the item. Read-only.
	LastModifiedByUser *MicrosoftGraphDrive_LastModifiedByUser `json:"lastModifiedByUser,omitempty"`

	// LastModifiedDateTime Date and time the item was last modified. Read-only.
	LastModifiedDateTime *time.Time `json:"lastModifiedDateTime,omitempty"`

	// List For drives in SharePoint, the underlying document library list. Read-only. Nullable.
	List *MicrosoftGraphDrive_List `json:"list,omitempty"`

	// Name The name of the item. Read-write.
	Name *string `json:"name"`

	// Owner Optional. The user account that owns the drive. Read-only.
	Owner *MicrosoftGraphDrive_Owner `json:"owner,omitempty"`

	// ParentReference Parent information, if the item has a parent. Read-write.
	ParentReference *MicrosoftGraphDrive_ParentReference `json:"parentReference,omitempty"`

	// Quota Optional. Information about the drive's storage space quota. Read-only.
	Quota *MicrosoftGraphDrive_Quota `json:"quota,omitempty"`

	// Root The root folder of the drive. Read-only.
	Root          *MicrosoftGraphDrive_Root          `json:"root,omitempty"`
	SharePointIds *MicrosoftGraphDrive_SharePointIds `json:"sharePointIds,omitempty"`

	// Special Collection of common folders available in OneDrive. Read-only. Nullable.
	Special *[]MicrosoftGraphDriveItem `json:"special,omitempty"`

	// System If present, indicates that this is a system-managed drive. Read-only.
	System *MicrosoftGraphDrive_System `json:"system,omitempty"`

	// WebUrl URL that displays the resource in the browser. Read-only.
	WebUrl *string `json:"webUrl"`
}

// MicrosoftGraphDriveCreatedBy1 defines model for .
type MicrosoftGraphDriveCreatedBy1 = map[string]interface{}

// MicrosoftGraphDrive_CreatedBy Identity of the user, device, or application which created the item. Read-only.
type MicrosoftGraphDrive_CreatedBy struct {
	union json.RawMessage
}

// MicrosoftGraphDriveCreatedByUser1 defines model for .
type MicrosoftGraphDriveCreatedByUser1 = map[string]interface{}

// MicrosoftGraphDrive_CreatedByUser Identity of the user who created the item. Read-only.
type MicrosoftGraphDrive_CreatedByUser struct {
	union json.RawMessage
}

// MicrosoftGraphDriveLastModifiedBy1 defines model for .
type MicrosoftGraphDriveLastModifiedBy1 = map[string]interface{}

// MicrosoftGraphDrive_LastModifiedBy Identity of the user, device, and application which last modified the item. Read-only.
type MicrosoftGraphDrive_LastModifiedBy struct {
	union json.RawMessage
}

// MicrosoftGraphDriveLastModifiedByUser1 defines model for .
type MicrosoftGraphDriveLastModifiedByUser1 = map[string]interface{}

// MicrosoftGraphDrive_LastModifiedByUser Identity of the user who last modified the item. Read-only.
type MicrosoftGraphDrive_LastModifiedByUser struct {
	union json.RawMessage
}

// MicrosoftGraphDriveList1 defines model for .
type MicrosoftGraphDriveList1 = map[string]interface{}

// MicrosoftGraphDrive_List For drives in SharePoint, the underlying document library list. Read-only. Nullable.
type MicrosoftGraphDrive_List struct {
	union json.RawMessage
}

// MicrosoftGraphDriveOwner1 defines model for .
type MicrosoftGraphDriveOwner1 = map[string]interface{}

// MicrosoftGraphDrive_Owner Optional. The user account that owns the drive. Read-only.
type MicrosoftGraphDrive_Owner struct {
	union json.RawMessage
}

// MicrosoftGraphDriveParentReference1 defines model for .
type MicrosoftGraphDriveParentReference1 = map[string]interface{}

// MicrosoftGraphDrive_ParentReference Parent information, if the item has a parent. Read-write.
type MicrosoftGraphDrive_ParentReference struct {
	union json.RawMessage
}

// MicrosoftGraphDriveQuota1 defines model for .
type MicrosoftGraphDriveQuota1 = map[string]interface{}

// MicrosoftGraphDrive_Quota Optional. Information about the drive's storage space quota. Read-only.
type MicrosoftGraphDrive_Quota struct {
	union json.RawMessage
}

// MicrosoftGraphDriveRoot1 defines model for .
type MicrosoftGraphDriveRoot1 = map[string]interface{}

// MicrosoftGraphDrive_Root The root folder of the drive. Read-only.
type MicrosoftGraphDrive_Root struct {
	union json.RawMessage
}

// MicrosoftGraphDriveSharePointIds1 defines model for .
type MicrosoftGraphDriveSharePointIds1 = map[string]interface{}

// MicrosoftGraphDrive_SharePointIds defines model for MicrosoftGraphDrive.SharePointIds.
type MicrosoftGraphDrive_SharePointIds struct {
	union json.RawMessage
}

// MicrosoftGraphDriveSystem1 defines model for .
type MicrosoftGraphDriveSystem1 = map[string]interface{}

// MicrosoftGraphDrive_System If present, indicates that this is a system-managed drive. Read-only.
type MicrosoftGraphDrive_System struct {
	union json.RawMessage
}

// MicrosoftGraphDriveItem defines model for microsoft.graph.driveItem.
type MicrosoftGraphDriveItem struct {
	// Analytics Analytics about the view activities that took place on this item.
	Analytics *MicrosoftGraphDriveItem_Analytics `json:"analytics,omitempty"`

	// Audio Audio metadata, if the item is an audio file. Read-only. Read-only. Only on OneDrive Personal.
	Audio *MicrosoftGraphDriveItem_Audio `json:"audio,omitempty"`

	// Bundle Bundle metadata, if the item is a bundle. Read-only.
	Bundle *MicrosoftGraphDriveItem_Bundle `json:"bundle,omitempty"`

	// CTag An eTag for the content of the item. This eTag is not changed if only the metadata is changed. Note This property is not returned if the item is a folder. Read-only.
	CTag *string `json:"cTag"`

	// Children Collection containing Item objects for the immediate children of Item. Only items representing folders have children. Read-only. Nullable.
	Children *[]MicrosoftGraphDriveItem `json:"children,omitempty"`

	// Content The content stream, if the item represents a file.
	Content *string `json:"content"`

	// CreatedBy Identity of the user, device, or application which created the item. Read-only.
	CreatedBy *MicrosoftGraphDriveItem_CreatedBy `json:"createdBy,omitempty"`

	// CreatedByUser Identity of the user who created the item. Read-only.
	CreatedByUser *MicrosoftGraphDriveItem_CreatedByUser `json:"createdByUser,omitempty"`

	// CreatedDateTime Date and time of item creation. Read-only.
	CreatedDateTime *time.Time `json:"createdDateTime,omitempty"`

	// Deleted Information about the deleted state of the item. Read-only.
	Deleted *MicrosoftGraphDriveItem_Deleted `json:"deleted,omitempty"`

	// Description Provides a user-visible description of the item. Optional.
	Description *string `json:"description"`

	// ETag ETag for the item. Read-only.
	ETag *string `json:"eTag"`

	// File File metadata, if the item is a file. Read-only.
	File *MicrosoftGraphDriveItem_File `json:"file,omitempty"`

	// FileSystemInfo File system information on client. Read-write.
	FileSystemInfo *MicrosoftGraphDriveItem_FileSystemInfo `json:"fileSystemInfo,omitempty"`

	// Folder Folder metadata, if the item is a folder. Read-only.
	Folder *MicrosoftGraphDriveItem_Folder `json:"folder,omitempty"`

	// Id The unique idenfier for an entity. Read-only.
	Id *string `json:"id,omitempty"`

	// Image Image metadata, if the item is an image. Read-only.
	Image *MicrosoftGraphDriveItem_Image `json:"image,omitempty"`

	// LastModifiedBy Identity of the user, device, and application which last modified the item. Read-only.
	LastModifiedBy *MicrosoftGraphDriveItem_LastModifiedBy `json:"lastModifiedBy,omitempty"`

	// LastModifiedByUser Identity of the user who last modified the item. Read-only.
	LastModifiedByUser *MicrosoftGraphDriveItem_LastModifiedByUser `json:"lastModifiedByUser,omitempty"`

	// LastModifiedDateTime Date and time the item was last modified. Read-only.
	LastModifiedDateTime *time.Time `json:"lastModifiedDateTime,omitempty"`

	// ListItem For drives in SharePoint, the associated document library list item. Read-only. Nullable.
	ListItem *MicrosoftGraphDriveItem_ListItem `json:"listItem,omitempty"`

	// Location Location metadata, if the item has location data. Read-only.
	Location *MicrosoftGraphDriveItem_Location `json:"location,omitempty"`

	// Malware Malware metadata, if the item was detected to contain malware. Read-only.
	Malware *MicrosoftGraphDriveItem_Malware `json:"malware,omitempty"`

	// Name The name of the item. Read-write.
	Name *string `json:"name"`

	// Package If present, indicates that this item is a package instead of a folder or file. Packages are treated like files in some contexts and folders in others. Read-only.
	Package *MicrosoftGraphDriveItem_Package `json:"package,omitempty"`

	// ParentReference Parent information, if the item has a parent. Read-write.
	ParentReference *MicrosoftGraphDriveItem_ParentReference `json:"parentReference,omitempty"`

	// PendingOperations If present, indicates that one or more operations that might affect the state of the driveItem are pending completion. Read-only.
	PendingOperations *MicrosoftGraphDriveItem_PendingOperations `json:"pendingOperations,omitempty"`

	// Permissions The set of permissions for the item. Read-only. Nullable.
	Permissions *[]MicrosoftGraphPermission `json:"permissions,omitempty"`

	// Photo Photo metadata, if the item is a photo. Read-only.
	Photo *MicrosoftGraphDriveItem_Photo `json:"photo,omitempty"`

	// Publication Provides information about the published or checked-out state of an item, in locations that support such actions. This property is not returned by default. Read-only.
	Publication *MicrosoftGraphDriveItem_Publication `json:"publication,omitempty"`

	// RemoteItem Remote item data, if the item is shared from a drive other than the one being accessed. Read-only.
	RemoteItem *MicrosoftGraphDriveItem_RemoteItem `json:"remoteItem,omitempty"`

	// Root If this property is non-null, it indicates that the driveItem is the top-most driveItem in the drive.
	Root *MicrosoftGraphDriveItem_Root `json:"root,omitempty"`

	// SearchResult Search metadata, if the item is from a search result. Read-only.
	SearchResult *MicrosoftGraphDriveItem_SearchResult `json:"searchResult,omitempty"`

	// Shared Indicates that the item has been shared with others and provides information about the shared state of the item. Read-only.
	Shared *MicrosoftGraphDriveItem_Shared `json:"shared,omitempty"`

	// SharepointIds Returns identifiers useful for SharePoint REST compatibility. Read-only.
	SharepointIds *MicrosoftGraphDriveItem_SharepointIds `json:"sharepointIds,omitempty"`

	// Size Size of the item in bytes. Read-only.
	Size *int64 `json:"size"`

	// SpecialFolder If the current item is also available as a special folder, this facet is returned. Read-only.
	SpecialFolder *MicrosoftGraphDriveItem_SpecialFolder `json:"specialFolder,omitempty"`

	// Subscriptions The set of subscriptions on the item. Only supported on the root of a drive.
	Subscriptions *[]MicrosoftGraphSubscription `json:"subscriptions,omitempty"`

	// Thumbnails Collection containing [ThumbnailSet][] objects associated with the item. For more info, see [getting thumbnails][]. Read-only. Nullable.
	Thumbnails *[]MicrosoftGraphThumbnailSet `json:"thumbnails,omitempty"`

	// Versions The list of previous versions of the item. For more info, see [getting previous versions][]. Read-only. Nullable.
	Versions *[]MicrosoftGraphDriveItemVersion `json:"versions,omitempty"`

	// Video Video metadata, if the item is a video. Read-only.
	Video *MicrosoftGraphDriveItem_Video `json:"video,omitempty"`

	// WebDavUrl WebDAV compatible URL for the item.
	WebDavUrl *string `json:"webDavUrl"`

	// WebUrl URL that displays the resource in the browser. Read-only.
	WebUrl *string `json:"webUrl"`

	// Workbook For files that are Excel spreadsheets, accesses the workbook API to work with the spreadsheet's contents. Nullable.
	Workbook *MicrosoftGraphDriveItem_Workbook `json:"workbook,omitempty"`
}

// MicrosoftGraphDriveItemAnalytics1 defines model for .
type MicrosoftGraphDriveItemAnalytics1 = map[string]interface{}

// MicrosoftGraphDriveItem_Analytics Analytics about the view activities that took place on this item.
type MicrosoftGraphDriveItem_Analytics struct {
	union json.RawMessage
}

// MicrosoftGraphDriveItemAudio1 defines model for .
type MicrosoftGraphDriveItemAudio1 = map[string]interface{}

// MicrosoftGraphDriveItem_Audio Audio metadata, if the item is an audio file. Read-only. Read-only. Only on OneDrive Personal.
type MicrosoftGraphDriveItem_Audio struct {
	union json.RawMessage
}

// MicrosoftGraphDriveItemBundle1 defines model for .
type MicrosoftGraphDriveItemBundle1 = map[string]interface{}

// MicrosoftGraphDriveItem_Bundle Bundle metadata, if the item is a bundle. Read-only.
type MicrosoftGraphDriveItem_Bundle struct {
	union json.RawMessage
}

// MicrosoftGraphDriveItemCreatedBy1 defines model for .
type MicrosoftGraphDriveItemCreatedBy1 = map[string]interface{}

// MicrosoftGraphDriveItem_CreatedBy Identity of the user, device, or application which created the item. Read-only.
type MicrosoftGraphDriveItem_CreatedBy struct {
	union json.RawMessage
}

// MicrosoftGraphDriveItemCreatedByUser1 defines model for .
type MicrosoftGraphDriveItemCreatedByUser1 = map[string]interface{}

// MicrosoftGraphDriveItem_CreatedByUser Identity of the user who created the item. Read-only.
type MicrosoftGraphDriveItem_CreatedByUser struct {
	union json.RawMessage
}

// MicrosoftGraphDriveItemDeleted1 defines model for .
type MicrosoftGraphDriveItemDeleted1 = map[string]interface{}

// MicrosoftGraphDriveItem_Deleted Information about the deleted state of the item. Read-only.
type MicrosoftGraphDriveItem_Deleted struct {
	union json.RawMessage
}

// MicrosoftGraphDriveItemFile1 defines model for .
type MicrosoftGraphDriveItemFile1 = map[string]interface{}

// MicrosoftGraphDriveItem_File File metadata, if the item is a file. Read-only.
type MicrosoftGraphDriveItem_File struct {
	union json.RawMessage
}

// MicrosoftGraphDriveItemFileSystemInfo1 defines model for .
type MicrosoftGraphDriveItemFileSystemInfo1 = map[string]interface{}

// MicrosoftGraphDriveItem_FileSystemInfo File system information on client. Read-write.
type MicrosoftGraphDriveItem_FileSystemInfo struct {
	union json.RawMessage
}

// MicrosoftGraphDriveItemFolder1 defines model for .
type MicrosoftGraphDriveItemFolder1 = map[string]interface{}

// MicrosoftGraphDriveItem_Folder Folder metadata, if the item is a folder. Read-only.
type MicrosoftGraphDriveItem_Folder struct {
	union json.RawMessage
}

// MicrosoftGraphDriveItemImage1 defines model for .
type MicrosoftGraphDriveItemImage1 = map[string]interface{}

// MicrosoftGraphDriveItem_Image Image metadata, if the item is an image. Read-only.
type MicrosoftGraphDriveItem_Image struct {
	union json.RawMessage
}

// MicrosoftGraphDriveItemLastModifiedBy1 defines model for .
type MicrosoftGraphDriveItemLastModifiedBy1 = map[string]interface{}

// MicrosoftGraphDriveItem_LastModifiedBy Identity of the user, device, and application which last modified the item. Read-only.
type MicrosoftGraphDriveItem_LastModifiedBy struct {
	union json.RawMessage
}

// MicrosoftGraphDriveItemLastModifiedByUser1 defines model for .
type MicrosoftGraphDriveItemLastModifiedByUser1 = map[string]interface{}

// MicrosoftGraphDriveItem_LastModifiedByUser Identity of the user who last modified the item. Read-only.
type MicrosoftGraphDriveItem_LastModifiedByUser struct {
	union json.RawMessage
}

// MicrosoftGraphDriveItemListItem1 defines model for .
type MicrosoftGraphDriveItemListItem1 = map[string]interface{}

// MicrosoftGraphDriveItem_ListItem For drives in SharePoint, the associated document library list item. Read-only. Nullable.
type MicrosoftGraphDriveItem_ListItem struct {
	union json.RawMessage
}

// MicrosoftGraphDriveItemLocation1 defines model for .
type MicrosoftGraphDriveItemLocation1 = map[string]interface{}

// MicrosoftGraphDriveItem_Location Location metadata, if the item has location data. Read-only.
type MicrosoftGraphDriveItem_Location struct {
	union json.RawMessage
}

// MicrosoftGraphDriveItemMalware1 defines model for .
type MicrosoftGraphDriveItemMalware1 = map[string]interface{}

// MicrosoftGraphDriveItem_Malware Malware metadata, if the item was detected to contain malware. Read-only.
type MicrosoftGraphDriveItem_Malware struct {
	union json.RawMessage
}

// MicrosoftGraphDriveItemPackage1 defines model for .
type MicrosoftGraphDriveItemPackage1 = map[string]interface{}

// MicrosoftGraphDriveItem_Package If present, indicates that this item is a package instead of a folder or file. Packages are treated like files in some contexts and folders in others. Read-only.
type MicrosoftGraphDriveItem_Package struct {
	union json.RawMessage
}

// MicrosoftGraphDriveItemParentReference1 defines model for .
type MicrosoftGraphDriveItemParentReference1 = map[string]interface{}

// MicrosoftGraphDriveItem_ParentReference Parent information, if the item has a parent. Read-write.
type MicrosoftGraphDriveItem_ParentReference struct {
	union json.RawMessage
}

// MicrosoftGraphDriveItemPendingOperations1 defines model for .
type MicrosoftGraphDriveItemPendingOperations1 = map[string]interface{}

// MicrosoftGraphDriveItem_PendingOperations If present, indicates that one or more operations that might affect the state of the driveItem are pending completion. Read-only.
type MicrosoftGraphDriveItem_PendingOperations struct {
	union json.RawMessage
}

// MicrosoftGraphDriveItemPhoto1 defines model for .
type MicrosoftGraphDriveItemPhoto1 = map[string]interface{}

// MicrosoftGraphDriveItem_Photo Photo metadata, if the item is a photo. Read-only.
type MicrosoftGraphDriveItem_Photo struct {
	union json.RawMessage
}

// MicrosoftGraphDriveItemPublication1 defines model for .
type MicrosoftGraphDriveItemPublication1 = map[string]interface{}

// MicrosoftGraphDriveItem_Publication Provides information about the published or checked-out state of an item, in locations that support such actions. This property is not returned by default. Read-only.
type MicrosoftGraphDriveItem_Publication struct {
	union json.RawMessage
}

// MicrosoftGraphDriveItemRemoteItem1 defines model for .
type MicrosoftGraphDriveItemRemoteItem1 = map[string]interface{}

// MicrosoftGraphDriveItem_RemoteItem Remote item data, if the item is shared from a drive other than the one being accessed. Read-only.
type MicrosoftGraphDriveItem_RemoteItem struct {
	union json.RawMessage
}

// MicrosoftGraphDriveItemRoot1 defines model for .
type MicrosoftGraphDriveItemRoot1 = map[string]interface{}

// MicrosoftGraphDriveItem_Root If this property is non-null, it indicates that the driveItem is the top-most driveItem in the drive.
type MicrosoftGraphDriveItem_Root struct {
	union json.RawMessage
}

// MicrosoftGraphDriveItemSearchResult1 defines model for .
type MicrosoftGraphDriveItemSearchResult1 = map[string]interface{}

// MicrosoftGraphDriveItem_SearchResult Search metadata, if the item is from a search result. Read-only.
type MicrosoftGraphDriveItem_SearchResult struct {
	union json.RawMessage
}

// MicrosoftGraphDriveItemShared1 defines model for .
type MicrosoftGraphDriveItemShared1 = map[string]interface{}

// MicrosoftGraphDriveItem_Shared Indicates that the item has been shared with others and provides information about the shared state of the item. Read-only.
type MicrosoftGraphDriveItem_Shared struct {
	union json.RawMessage
}

// MicrosoftGraphDriveItemSharepointIds1 defines model for .
type MicrosoftGraphDriveItemSharepointIds1 = map[string]interface{}

// MicrosoftGraphDriveItem_SharepointIds Returns identifiers useful for SharePoint REST compatibility. Read-only.
type MicrosoftGraphDriveItem_SharepointIds struct {
	union json.RawMessage
}

// MicrosoftGraphDriveItemSpecialFolder1 defines model for .
type MicrosoftGraphDriveItemSpecialFolder1 = map[string]interface{}

// MicrosoftGraphDriveItem_SpecialFolder If the current item is also available as a special folder, this facet is returned. Read-only.
type MicrosoftGraphDriveItem_SpecialFolder struct {
	union json.RawMessage
}

// MicrosoftGraphDriveItemVideo1 defines model for .
type MicrosoftGraphDriveItemVideo1 = map[string]interface{}

// MicrosoftGraphDriveItem_Video Video metadata, if the item is a video. Read-only.
type MicrosoftGraphDriveItem_Video struct {
	union json.RawMessage
}

// MicrosoftGraphDriveItemWorkbook1 defines model for .
type MicrosoftGraphDriveItemWorkbook1 = map[string]interface{}

// MicrosoftGraphDriveItem_Workbook For files that are Excel spreadsheets, accesses the workbook API to work with the spreadsheet's contents. Nullable.
type MicrosoftGraphDriveItem_Workbook struct {
	union json.RawMessage
}

// MicrosoftGraphDriveItemVersion defines model for microsoft.graph.driveItemVersion.
type MicrosoftGraphDriveItemVersion struct {
	// Content The content stream for this version of the item.
	Content *string `json:"content"`

	// Id The unique idenfier for an entity. Read-only.
	Id *string `json:"id,omitempty"`

	// LastModifiedBy Identity of the user which last modified the version. Read-only.
	LastModifiedBy *MicrosoftGraphDriveItemVersion_LastModifiedBy `json:"lastModifiedBy,omitempty"`

	// LastModifiedDateTime Date and time the version was last modified. Read-only.
	LastModifiedDateTime *time.Time `json:"lastModifiedDateTime"`

	// Publication Indicates the publication status of this particular version. Read-only.
	Publication *MicrosoftGraphDriveItemVersion_Publication `json:"publication,omitempty"`

	// Size Indicates the size of the content stream for this version of the item.
	Size *int64 `json:"size"`
}

// MicrosoftGraphDriveItemVersionLastModifiedBy1 defines model for .
type MicrosoftGraphDriveItemVersionLastModifiedBy1 = map[string]interface{}

// MicrosoftGraphDriveItemVersion_LastModifiedBy Identity of the user which last modified the version. Read-only.
type MicrosoftGraphDriveItemVersion_LastModifiedBy struct {
	union json.RawMessage
}

// MicrosoftGraphDriveItemVersionPublication1 defines model for .
type MicrosoftGraphDriveItemVersionPublication1 = map[string]interface{}

// MicrosoftGraphDriveItemVersion_Publication Indicates the publication status of this particular version. Read-only.
type MicrosoftGraphDriveItemVersion_Publication struct {
	union json.RawMessage
}

// MicrosoftGraphEmailAddress defines model for microsoft.graph.emailAddress.
type MicrosoftGraphEmailAddress struct {
	// Address The email address of the person or entity.
	Address *string `json:"address"`

	// Name The display name of the person or entity.
	Name *string `json:"name"`
}

// MicrosoftGraphEmailAuthenticationMethod defines model for microsoft.graph.emailAuthenticationMethod.
type MicrosoftGraphEmailAuthenticationMethod struct {
	// EmailAddress The email address registered to this user.
	EmailAddress *string `json:"emailAddress"`

	// Id The unique idenfier for an entity. Read-only.
	Id *string `json:"id,omitempty"`
}

// MicrosoftGraphEmployeeExperienceUser defines model for microsoft.graph.employeeExperienceUser.
type MicrosoftGraphEmployeeExperienceUser struct {
	// Id The unique idenfier for an entity. Read-only.
	Id                       *string                                 `json:"id,omitempty"`
	LearningCourseActivities *[]MicrosoftGraphLearningCourseActivity `json:"learningCourseActivities,omitempty"`
}

// MicrosoftGraphEmployeeOrgData defines model for microsoft.graph.employeeOrgData.
type MicrosoftGraphEmployeeOrgData struct {
	// CostCenter The cost center associated with the user. Returned only on $select. Supports $filter.
	CostCenter *string `json:"costCenter"`

	// Division The name of the division in which the user works. Returned only on $select. Supports $filter.
	Division *string `json:"division"`
}

// MicrosoftGraphEntity defines model for microsoft.graph.entity.
type MicrosoftGraphEntity struct {
	// Id The unique idenfier for an entity. Read-only.
	Id *string `json:"id,omitempty"`
}

// MicrosoftGraphEvent defines model for microsoft.graph.event.
type MicrosoftGraphEvent struct {
	// AllowNewTimeProposals true if the meeting organizer allows invitees to propose a new time when responding; otherwise, false. Optional. Default is true.
	AllowNewTimeProposals *bool `json:"allowNewTimeProposals"`

	// Attachments The collection of FileAttachment, ItemAttachment, and referenceAttachment attachments for the event. Navigation property. Read-only. Nullable.
	Attachments *[]MicrosoftGraphAttachment `json:"attachments,omitempty"`

	// Attendees The collection of attendees for the event.
	Attendees *[]MicrosoftGraphEvent_Attendees_Item `json:"attendees,omitempty"`

	// Body The body of the message associated with the event. It can be in HTML or text format.
	Body *MicrosoftGraphEvent_Body `json:"body,omitempty"`

	// BodyPreview The preview of the message associated with the event. It is in text format.
	BodyPreview *string `json:"bodyPreview"`

	// Calendar The calendar that contains the event. Navigation property. Read-only.
	Calendar *MicrosoftGraphEvent_Calendar `json:"calendar,omitempty"`

	// Categories The categories associated with the item
	Categories *[]string `json:"categories,omitempty"`

	// ChangeKey Identifies the version of the item. Every time the item is changed, changeKey changes as well. This allows Exchange to apply changes to the correct version of the object. Read-only.
	ChangeKey *string `json:"changeKey"`

	// CreatedDateTime The Timestamp type represents date and time information using ISO 8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 is 2014-01-01T00:00:00Z
	CreatedDateTime *time.Time `json:"createdDateTime"`

	// End The date, time, and time zone that the event ends. By default, the end time is in UTC.
	End *MicrosoftGraphEvent_End `json:"end,omitempty"`

	// Extensions The collection of open extensions defined for the event. Nullable.
	Extensions *[]MicrosoftGraphExtension `json:"extensions,omitempty"`

	// HasAttachments Set to true if the event has attachments.
	HasAttachments *bool `json:"hasAttachments"`

	// HideAttendees When set to true, each attendee only sees themselves in the meeting request and meeting Tracking list. Default is false.
	HideAttendees *bool `json:"hideAttendees"`

	// ICalUId A unique identifier for an event across calendars. This ID is different for each occurrence in a recurring series. Read-only.
	ICalUId *string `json:"iCalUId"`

	// Id The unique idenfier for an entity. Read-only.
	Id         *string                         `json:"id,omitempty"`
	Importance *MicrosoftGraphEvent_Importance `json:"importance,omitempty"`

	// Instances The occurrences of a recurring series, if the event is a series master. This property includes occurrences that are part of the recurrence pattern, and exceptions that have been modified, but does not include occurrences that have been cancelled from the series. Navigation property. Read-only. Nullable.
	Instances       *[]MicrosoftGraphEvent `json:"instances,omitempty"`
	IsAllDay        *bool                  `json:"isAllDay"`
	IsCancelled     *bool                  `json:"isCancelled"`
	IsDraft         *bool                  `json:"isDraft"`
	IsOnlineMeeting *bool                  `json:"isOnlineMeeting"`
	IsOrganizer     *bool                  `json:"isOrganizer"`
	IsReminderOn    *bool                  `json:"isReminderOn"`

	// LastModifiedDateTime The Timestamp type represents date and time information using ISO 8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 is 2014-01-01T00:00:00Z
	LastModifiedDateTime *time.Time                            `json:"lastModifiedDateTime"`
	Location             *MicrosoftGraphEvent_Location         `json:"location,omitempty"`
	Locations            *[]MicrosoftGraphEvent_Locations_Item `json:"locations,omitempty"`

	// MultiValueExtendedProperties The collection of multi-value extended properties defined for the event. Read-only. Nullable.
	MultiValueExtendedProperties *[]MicrosoftGraphMultiValueLegacyExtendedProperty `json:"multiValueExtendedProperties,omitempty"`
	OnlineMeeting                *MicrosoftGraphEvent_OnlineMeeting                `json:"onlineMeeting,omitempty"`
	OnlineMeetingProvider        *MicrosoftGraphEvent_OnlineMeetingProvider        `json:"onlineMeetingProvider,omitempty"`
	OnlineMeetingUrl             *string                                           `json:"onlineMeetingUrl"`
	Organizer                    *MicrosoftGraphEvent_Organizer                    `json:"organizer,omitempty"`
	OriginalEndTimeZone          *string                                           `json:"originalEndTimeZone"`
	OriginalStart                *time.Time                                        `json:"originalStart"`
	OriginalStartTimeZone        *string                                           `json:"originalStartTimeZone"`
	Recurrence                   *MicrosoftGraphEvent_Recurrence                   `json:"recurrence,omitempty"`
	ReminderMinutesBeforeStart   *int32                                            `json:"reminderMinutesBeforeStart"`
	ResponseRequested            *bool                                             `json:"responseRequested"`
	ResponseStatus               *MicrosoftGraphEvent_ResponseStatus               `json:"responseStatus,omitempty"`
	Sensitivity                  *MicrosoftGraphEvent_Sensitivity                  `json:"sensitivity,omitempty"`
	SeriesMasterId               *string                                           `json:"seriesMasterId"`
	ShowAs                       *MicrosoftGraphEvent_ShowAs                       `json:"showAs,omitempty"`

	// SingleValueExtendedProperties The collection of single-value extended properties defined for the event. Read-only. Nullable.
	SingleValueExtendedProperties *[]MicrosoftGraphSingleValueLegacyExtendedProperty `json:"singleValueExtendedProperties,omitempty"`
	Start                         *MicrosoftGraphEvent_Start                         `json:"start,omitempty"`
	Subject                       *string                                            `json:"subject"`
	TransactionId                 *string                                            `json:"transactionId"`
	Type                          *MicrosoftGraphEvent_Type                          `json:"type,omitempty"`
	WebLink                       *string                                            `json:"webLink"`
}

// MicrosoftGraphEventAttendees1 defines model for .
type MicrosoftGraphEventAttendees1 = map[string]interface{}

// MicrosoftGraphEvent_Attendees_Item defines model for microsoft.graph.event.attendees.Item.
type MicrosoftGraphEvent_Attendees_Item struct {
	union json.RawMessage
}

// MicrosoftGraphEventBody1 defines model for .
type MicrosoftGraphEventBody1 = map[string]interface{}

// MicrosoftGraphEvent_Body The body of the message associated with the event. It can be in HTML or text format.
type MicrosoftGraphEvent_Body struct {
	union json.RawMessage
}

// MicrosoftGraphEventCalendar1 defines model for .
type MicrosoftGraphEventCalendar1 = map[string]interface{}

// MicrosoftGraphEvent_Calendar The calendar that contains the event. Navigation property. Read-only.
type MicrosoftGraphEvent_Calendar struct {
	union json.RawMessage
}

// MicrosoftGraphEventEnd1 defines model for .
type MicrosoftGraphEventEnd1 = map[string]interface{}

// MicrosoftGraphEvent_End The date, time, and time zone that the event ends. By default, the end time is in UTC.
type MicrosoftGraphEvent_End struct {
	union json.RawMessage
}

// MicrosoftGraphEventImportance1 defines model for .
type MicrosoftGraphEventImportance1 = map[string]interface{}

// MicrosoftGraphEvent_Importance defines model for MicrosoftGraphEvent.Importance.
type MicrosoftGraphEvent_Importance struct {
	union json.RawMessage
}

// MicrosoftGraphEventLocation1 defines model for .
type MicrosoftGraphEventLocation1 = map[string]interface{}

// MicrosoftGraphEvent_Location defines model for MicrosoftGraphEvent.Location.
type MicrosoftGraphEvent_Location struct {
	union json.RawMessage
}

// MicrosoftGraphEventLocations1 defines model for .
type MicrosoftGraphEventLocations1 = map[string]interface{}

// MicrosoftGraphEvent_Locations_Item defines model for microsoft.graph.event.locations.Item.
type MicrosoftGraphEvent_Locations_Item struct {
	union json.RawMessage
}

// MicrosoftGraphEventOnlineMeeting1 defines model for .
type MicrosoftGraphEventOnlineMeeting1 = map[string]interface{}

// MicrosoftGraphEvent_OnlineMeeting defines model for MicrosoftGraphEvent.OnlineMeeting.
type MicrosoftGraphEvent_OnlineMeeting struct {
	union json.RawMessage
}

// MicrosoftGraphEventOnlineMeetingProvider1 defines model for .
type MicrosoftGraphEventOnlineMeetingProvider1 = map[string]interface{}

// MicrosoftGraphEvent_OnlineMeetingProvider defines model for MicrosoftGraphEvent.OnlineMeetingProvider.
type MicrosoftGraphEvent_OnlineMeetingProvider struct {
	union json.RawMessage
}

// MicrosoftGraphEventOrganizer1 defines model for .
type MicrosoftGraphEventOrganizer1 = map[string]interface{}

// MicrosoftGraphEvent_Organizer defines model for MicrosoftGraphEvent.Organizer.
type MicrosoftGraphEvent_Organizer struct {
	union json.RawMessage
}

// MicrosoftGraphEventRecurrence1 defines model for .
type MicrosoftGraphEventRecurrence1 = map[string]interface{}

// MicrosoftGraphEvent_Recurrence defines model for MicrosoftGraphEvent.Recurrence.
type MicrosoftGraphEvent_Recurrence struct {
	union json.RawMessage
}

// MicrosoftGraphEventResponseStatus1 defines model for .
type MicrosoftGraphEventResponseStatus1 = map[string]interface{}

// MicrosoftGraphEvent_ResponseStatus defines model for MicrosoftGraphEvent.ResponseStatus.
type MicrosoftGraphEvent_ResponseStatus struct {
	union json.RawMessage
}

// MicrosoftGraphEventSensitivity1 defines model for .
type MicrosoftGraphEventSensitivity1 = map[string]interface{}

// MicrosoftGraphEvent_Sensitivity defines model for MicrosoftGraphEvent.Sensitivity.
type MicrosoftGraphEvent_Sensitivity struct {
	union json.RawMessage
}

// MicrosoftGraphEventShowAs1 defines model for .
type MicrosoftGraphEventShowAs1 = map[string]interface{}

// MicrosoftGraphEvent_ShowAs defines model for MicrosoftGraphEvent.ShowAs.
type MicrosoftGraphEvent_ShowAs struct {
	union json.RawMessage
}

// MicrosoftGraphEventStart1 defines model for .
type MicrosoftGraphEventStart1 = map[string]interface{}

// MicrosoftGraphEvent_Start defines model for MicrosoftGraphEvent.Start.
type MicrosoftGraphEvent_Start struct {
	union json.RawMessage
}

// MicrosoftGraphEventType1 defines model for .
type MicrosoftGraphEventType1 = map[string]interface{}

// MicrosoftGraphEvent_Type defines model for MicrosoftGraphEvent.Type.
type MicrosoftGraphEvent_Type struct {
	union json.RawMessage
}

// MicrosoftGraphEventCollectionResponse defines model for microsoft.graph.eventCollectionResponse.
type MicrosoftGraphEventCollectionResponse struct {
	OdataNextLink *string                `json:"@odata.nextLink"`
	Value         *[]MicrosoftGraphEvent `json:"value,omitempty"`
}

// MicrosoftGraphEventMessageDetail defines model for microsoft.graph.eventMessageDetail.
type MicrosoftGraphEventMessageDetail = map[string]interface{}

// MicrosoftGraphEventType defines model for microsoft.graph.eventType.
type MicrosoftGraphEventType string

// MicrosoftGraphExtension defines model for microsoft.graph.extension.
type MicrosoftGraphExtension struct {
	// Id The unique idenfier for an entity. Read-only.
	Id *string `json:"id,omitempty"`
}

// MicrosoftGraphExtensionCollectionResponse defines model for microsoft.graph.extensionCollectionResponse.
type MicrosoftGraphExtensionCollectionResponse struct {
	OdataNextLink *string                    `json:"@odata.nextLink"`
	Value         *[]MicrosoftGraphExtension `json:"value,omitempty"`
}

// MicrosoftGraphExternalAudienceScope defines model for microsoft.graph.externalAudienceScope.
type MicrosoftGraphExternalAudienceScope string

// MicrosoftGraphExternalLink defines model for microsoft.graph.externalLink.
type MicrosoftGraphExternalLink struct {
	// Href The URL of the link.
	Href *string `json:"href"`
}

// MicrosoftGraphFido2AuthenticationMethod defines model for microsoft.graph.fido2AuthenticationMethod.
type MicrosoftGraphFido2AuthenticationMethod struct {
	// AaGuid Authenticator Attestation GUID, an identifier that indicates the type (e.g. make and model) of the authenticator.
	AaGuid *string `json:"aaGuid"`

	// AttestationCertificates The attestation certificate(s) attached to this security key.
	AttestationCertificates *[]string `json:"attestationCertificates,omitempty"`

	// AttestationLevel The attestation level of this FIDO2 security key. Possible values are: attested, or notAttested.
	AttestationLevel *MicrosoftGraphFido2AuthenticationMethod_AttestationLevel `json:"attestationLevel,omitempty"`

	// CreatedDateTime The timestamp when this key was registered to the user.
	CreatedDateTime *time.Time `json:"createdDateTime"`

	// DisplayName The display name of the key as given by the user.
	DisplayName *string `json:"displayName"`

	// Id The unique idenfier for an entity. Read-only.
	Id *string `json:"id,omitempty"`

	// Model The manufacturer-assigned model of the FIDO2 security key.
	Model *string `json:"model"`
}

// MicrosoftGraphFido2AuthenticationMethodAttestationLevel1 defines model for .
type MicrosoftGraphFido2AuthenticationMethodAttestationLevel1 = map[string]interface{}

// MicrosoftGraphFido2AuthenticationMethod_AttestationLevel The attestation level of this FIDO2 security key. Possible values are: attested, or notAttested.
type MicrosoftGraphFido2AuthenticationMethod_AttestationLevel struct {
	union json.RawMessage
}

// MicrosoftGraphFieldValueSet defines model for microsoft.graph.fieldValueSet.
type MicrosoftGraphFieldValueSet struct {
	// Id The unique idenfier for an entity. Read-only.
	Id *string `json:"id,omitempty"`
}

// MicrosoftGraphFile defines model for microsoft.graph.file.
type MicrosoftGraphFile struct {
	// Hashes Hashes of the file's binary content, if available. Read-only.
	Hashes *MicrosoftGraphFile_Hashes `json:"hashes,omitempty"`

	// MimeType The MIME type for the file. This is determined by logic on the server and might not be the value provided when the file was uploaded. Read-only.
	MimeType           *string `json:"mimeType"`
	ProcessingMetadata *bool   `json:"processingMetadata"`
}

// MicrosoftGraphFileHashes1 defines model for .
type MicrosoftGraphFileHashes1 = map[string]interface{}

// MicrosoftGraphFile_Hashes Hashes of the file's binary content, if available. Read-only.
type MicrosoftGraphFile_Hashes struct {
	union json.RawMessage
}

// MicrosoftGraphFileSystemInfo defines model for microsoft.graph.fileSystemInfo.
type MicrosoftGraphFileSystemInfo struct {
	// CreatedDateTime The UTC date and time the file was created on a client.
	CreatedDateTime *time.Time `json:"createdDateTime"`

	// LastAccessedDateTime The UTC date and time the file was last accessed. Available for the recent file list only.
	LastAccessedDateTime *time.Time `json:"lastAccessedDateTime"`

	// LastModifiedDateTime The UTC date and time the file was last modified on a client.
	LastModifiedDateTime *time.Time `json:"lastModifiedDateTime"`
}

// MicrosoftGraphFolder defines model for microsoft.graph.folder.
type MicrosoftGraphFolder struct {
	// ChildCount Number of children contained immediately within this container.
	ChildCount *int32 `json:"childCount"`

	// View A collection of properties defining the recommended view for the folder.
	View *MicrosoftGraphFolder_View `json:"view,omitempty"`
}

// MicrosoftGraphFolderView1 defines model for .
type MicrosoftGraphFolderView1 = map[string]interface{}

// MicrosoftGraphFolder_View A collection of properties defining the recommended view for the folder.
type MicrosoftGraphFolder_View struct {
	union json.RawMessage
}

// MicrosoftGraphFolderView defines model for microsoft.graph.folderView.
type MicrosoftGraphFolderView struct {
	// SortBy The method by which the folder should be sorted.
	SortBy *string `json:"sortBy"`

	// SortOrder If true, indicates that items should be sorted in descending order. Otherwise, items should be sorted ascending.
	SortOrder *string `json:"sortOrder"`

	// ViewType The type of view that should be used to represent the folder.
	ViewType *string `json:"viewType"`
}

// MicrosoftGraphFollowupFlag defines model for microsoft.graph.followupFlag.
type MicrosoftGraphFollowupFlag struct {
	// CompletedDateTime The date and time that the follow-up was finished.
	CompletedDateTime *MicrosoftGraphFollowupFlag_CompletedDateTime `json:"completedDateTime,omitempty"`

	// DueDateTime The date and time that the follow up is to be finished. Note: To set the due date, you must also specify the startDateTime; otherwise, you will get a 400 Bad Request response.
	DueDateTime *MicrosoftGraphFollowupFlag_DueDateTime `json:"dueDateTime,omitempty"`

	// FlagStatus The status for follow-up for an item. Possible values are notFlagged, complete, and flagged.
	FlagStatus *MicrosoftGraphFollowupFlag_FlagStatus `json:"flagStatus,omitempty"`

	// StartDateTime The date and time that the follow-up is to begin.
	StartDateTime *MicrosoftGraphFollowupFlag_StartDateTime `json:"startDateTime,omitempty"`
}

// MicrosoftGraphFollowupFlagCompletedDateTime1 defines model for .
type MicrosoftGraphFollowupFlagCompletedDateTime1 = map[string]interface{}

// MicrosoftGraphFollowupFlag_CompletedDateTime The date and time that the follow-up was finished.
type MicrosoftGraphFollowupFlag_CompletedDateTime struct {
	union json.RawMessage
}

// MicrosoftGraphFollowupFlagDueDateTime1 defines model for .
type MicrosoftGraphFollowupFlagDueDateTime1 = map[string]interface{}

// MicrosoftGraphFollowupFlag_DueDateTime The date and time that the follow up is to be finished. Note: To set the due date, you must also specify the startDateTime; otherwise, you will get a 400 Bad Request response.
type MicrosoftGraphFollowupFlag_DueDateTime struct {
	union json.RawMessage
}

// MicrosoftGraphFollowupFlagFlagStatus1 defines model for .
type MicrosoftGraphFollowupFlagFlagStatus1 = map[string]interface{}

// MicrosoftGraphFollowupFlag_FlagStatus The status for follow-up for an item. Possible values are notFlagged, complete, and flagged.
type MicrosoftGraphFollowupFlag_FlagStatus struct {
	union json.RawMessage
}

// MicrosoftGraphFollowupFlagStartDateTime1 defines model for .
type MicrosoftGraphFollowupFlagStartDateTime1 = map[string]interface{}

// MicrosoftGraphFollowupFlag_StartDateTime The date and time that the follow-up is to begin.
type MicrosoftGraphFollowupFlag_StartDateTime struct {
	union json.RawMessage
}

// MicrosoftGraphFollowupFlagStatus defines model for microsoft.graph.followupFlagStatus.
type MicrosoftGraphFollowupFlagStatus string

// MicrosoftGraphFreeBusyStatus defines model for microsoft.graph.freeBusyStatus.
type MicrosoftGraphFreeBusyStatus string

// MicrosoftGraphGeoCoordinates defines model for microsoft.graph.geoCoordinates.
type MicrosoftGraphGeoCoordinates struct {
	// Altitude Optional. The altitude (height), in feet,  above sea level for the item. Read-only.
	Altitude *MicrosoftGraphGeoCoordinates_Altitude `json:"altitude"`

	// Latitude Optional. The latitude, in decimal, for the item. Read-only.
	Latitude *MicrosoftGraphGeoCoordinates_Latitude `json:"latitude"`

	// Longitude Optional. The longitude, in decimal, for the item. Read-only.
	Longitude *MicrosoftGraphGeoCoordinates_Longitude `json:"longitude"`
}

// MicrosoftGraphGeoCoordinatesAltitude0 defines model for .
type MicrosoftGraphGeoCoordinatesAltitude0 = float64

// MicrosoftGraphGeoCoordinatesAltitude1 defines model for .
type MicrosoftGraphGeoCoordinatesAltitude1 = string

// MicrosoftGraphGeoCoordinates_Altitude Optional. The altitude (height), in feet,  above sea level for the item. Read-only.
type MicrosoftGraphGeoCoordinates_Altitude struct {
	union json.RawMessage
}

// MicrosoftGraphGeoCoordinatesLatitude0 defines model for .
type MicrosoftGraphGeoCoordinatesLatitude0 = float64

// MicrosoftGraphGeoCoordinatesLatitude1 defines model for .
type MicrosoftGraphGeoCoordinatesLatitude1 = string

// MicrosoftGraphGeoCoordinates_Latitude Optional. The latitude, in decimal, for the item. Read-only.
type MicrosoftGraphGeoCoordinates_Latitude struct {
	union json.RawMessage
}

// MicrosoftGraphGeoCoordinatesLongitude0 defines model for .
type MicrosoftGraphGeoCoordinatesLongitude0 = float64

// MicrosoftGraphGeoCoordinatesLongitude1 defines model for .
type MicrosoftGraphGeoCoordinatesLongitude1 = string

// MicrosoftGraphGeoCoordinates_Longitude Optional. The longitude, in decimal, for the item. Read-only.
type MicrosoftGraphGeoCoordinates_Longitude struct {
	union json.RawMessage
}

// MicrosoftGraphGeolocationColumn defines model for microsoft.graph.geolocationColumn.
type MicrosoftGraphGeolocationColumn = map[string]interface{}

// MicrosoftGraphGiphyRatingType defines model for microsoft.graph.giphyRatingType.
type MicrosoftGraphGiphyRatingType string

// MicrosoftGraphGroup defines model for microsoft.graph.group.
type MicrosoftGraphGroup struct {
	// AcceptedSenders The list of users or groups that are allowed to create post's or calendar events in this group. If this list is non-empty then only users or groups listed here are allowed to post.
	AcceptedSenders *[]MicrosoftGraphDirectoryObject `json:"acceptedSenders,omitempty"`

	// AllowExternalSenders Indicates if people external to the organization can send messages to the group. Default value is false. Returned only on $select. Supported only on the Get group API (GET /groups/{ID}).
	AllowExternalSenders *bool `json:"allowExternalSenders"`

	// AppRoleAssignments Represents the app roles a group has been granted for an application. Supports $expand.
	AppRoleAssignments *[]MicrosoftGraphAppRoleAssignment `json:"appRoleAssignments,omitempty"`

	// AssignedLabels The list of sensitivity label pairs (label ID, label name) associated with a Microsoft 365 group. Returned only on $select.
	AssignedLabels *[]MicrosoftGraphGroup_AssignedLabels_Item `json:"assignedLabels,omitempty"`

	// AssignedLicenses The licenses that are assigned to the group. Returned only on $select. Supports $filter (eq).Read-only.
	AssignedLicenses *[]MicrosoftGraphGroup_AssignedLicenses_Item `json:"assignedLicenses,omitempty"`

	// AutoSubscribeNewMembers Indicates if new members added to the group will be auto-subscribed to receive email notifications. You can set this property in a PATCH request for the group; do not set it in the initial POST request that creates the group. Default value is false. Returned only on $select. Supported only on the Get group API (GET /groups/{ID}).
	AutoSubscribeNewMembers *bool `json:"autoSubscribeNewMembers"`

	// Calendar The group's calendar. Read-only.
	Calendar *MicrosoftGraphGroup_Calendar `json:"calendar,omitempty"`

	// CalendarView The calendar view for the calendar. Read-only.
	CalendarView *[]MicrosoftGraphEvent `json:"calendarView,omitempty"`

	// Classification Describes a classification for the group (such as low, medium or high business impact). Valid values for this property are defined by creating a ClassificationList setting value, based on the template definition.Returned by default. Supports $filter (eq, ne, not, ge, le, startsWith).
	Classification *string `json:"classification"`

	// Conversations The group's conversations.
	Conversations *[]MicrosoftGraphConversation `json:"conversations,omitempty"`

	// CreatedDateTime Timestamp of when the group was created. The value cannot be modified and is automatically populated when the group is created. The Timestamp type represents date and time information using ISO 8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 is 2014-01-01T00:00:00Z. Returned by default. Read-only.
	CreatedDateTime *time.Time `json:"createdDateTime"`

	// CreatedOnBehalfOf The user (or application) that created the group. NOTE: This is not set if the user is an administrator. Read-only.
	CreatedOnBehalfOf *MicrosoftGraphGroup_CreatedOnBehalfOf `json:"createdOnBehalfOf,omitempty"`

	// DeletedDateTime Date and time when this object was deleted. Always null when the object hasn't been deleted.
	DeletedDateTime *time.Time `json:"deletedDateTime"`

	// Description An optional description for the group. Returned by default. Supports $filter (eq, ne, not, ge, le, startsWith) and $search.
	Description *string `json:"description"`

	// DisplayName The display name for the group. This property is required when a group is created and cannot be cleared during updates. Maximum length is 256 characters. Returned by default. Supports $filter (eq, ne, not, ge, le, in, startsWith, and eq on null values), $search, and $orderBy.
	DisplayName *string `json:"displayName"`

	// Drive The group's default drive. Read-only.
	Drive *MicrosoftGraphGroup_Drive `json:"drive,omitempty"`

	// Drives The group's drives. Read-only.
	Drives *[]MicrosoftGraphDrive `json:"drives,omitempty"`

	// Events The group's calendar events.
	Events *[]MicrosoftGraphEvent `json:"events,omitempty"`

	// ExpirationDateTime Timestamp of when the group is set to expire. Is null for security groups but for Microsoft 365 groups, it represents when the group is set to expire as defined in the groupLifecyclePolicy. The Timestamp type represents date and time information using ISO 8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 is 2014-01-01T00:00:00Z. Returned by default. Supports $filter (eq, ne, not, ge, le, in). Read-only.
	ExpirationDateTime *time.Time `json:"expirationDateTime"`

	// Extensions The collection of open extensions defined for the group. Read-only. Nullable.
	Extensions *[]MicrosoftGraphExtension `json:"extensions,omitempty"`

	// GroupLifecyclePolicies The collection of lifecycle policies for this group. Read-only. Nullable.
	GroupLifecyclePolicies *[]MicrosoftGraphGroupLifecyclePolicy `json:"groupLifecyclePolicies,omitempty"`

	// GroupTypes Specifies the group type and its membership. If the collection contains Unified, the group is a Microsoft 365 group; otherwise, it's either a security group or distribution group. For details, see groups overview.If the collection includes DynamicMembership, the group has dynamic membership; otherwise, membership is static. Returned by default. Supports $filter (eq, not).
	GroupTypes *[]string `json:"groupTypes,omitempty"`

	// HasMembersWithLicenseErrors Indicates whether there are members in this group that have license errors from its group-based license assignment. This property is never returned on a GET operation. You can use it as a $filter argument to get groups that have members with license errors (that is, filter for this property being true). See an example. Supports $filter (eq).
	HasMembersWithLicenseErrors *bool `json:"hasMembersWithLicenseErrors"`

	// HideFromAddressLists True if the group is not displayed in certain parts of the Outlook UI: the Address Book, address lists for selecting message recipients, and the Browse Groups dialog for searching groups; otherwise, false. Default value is false. Returned only on $select. Supported only on the Get group API (GET /groups/{ID}).
	HideFromAddressLists *bool `json:"hideFromAddressLists"`

	// HideFromOutlookClients True if the group is not displayed in Outlook clients, such as Outlook for Windows and Outlook on the web; otherwise, false. Default value is false. Returned only on $select. Supported only on the Get group API (GET /groups/{ID}).
	HideFromOutlookClients *bool `json:"hideFromOutlookClients"`

	// Id The unique idenfier for an entity. Read-only.
	Id *string `json:"id,omitempty"`

	// IsArchived When a group is associated with a team this property determines whether the team is in read-only mode.To read this property, use the /group/{groupId}/team endpoint or the Get team API. To update this property, use the archiveTeam and unarchiveTeam APIs.
	IsArchived *bool `json:"isArchived"`

	// IsAssignableToRole Indicates whether this group can be assigned to an Azure Active Directory role or not. Optional. This property can only be set while creating the group and is immutable. If set to true, the securityEnabled property must also be set to true, visibility must be Hidden, and the group cannot be a dynamic group (that is, groupTypes cannot contain DynamicMembership). Only callers in Global Administrator and Privileged Role Administrator roles can set this property. The caller must also be assigned the RoleManagement.ReadWrite.Directory permission to set this property or update the membership of such groups. For more, see Using a group to manage Azure AD role assignmentsUsing this feature requires a Azure AD Premium P1 license. Returned by default. Supports $filter (eq, ne, not).
	IsAssignableToRole *bool `json:"isAssignableToRole"`

	// IsSubscribedByMail Indicates whether the signed-in user is subscribed to receive email conversations. Default value is true. Returned only on $select. Supported only on the Get group API (GET /groups/{ID}).
	IsSubscribedByMail *bool `json:"isSubscribedByMail"`

	// LicenseProcessingState Indicates status of the group license assignment to all members of the group. Default value is false. Read-only. Possible values: QueuedForProcessing, ProcessingInProgress, and ProcessingComplete.Returned only on $select. Read-only.
	LicenseProcessingState *MicrosoftGraphGroup_LicenseProcessingState `json:"licenseProcessingState,omitempty"`

	// Mail The SMTP address for the group, for example, 'serviceadmins@contoso.onmicrosoft.com'. Returned by default. Read-only. Supports $filter (eq, ne, not, ge, le, in, startsWith, and eq on null values).
	Mail *string `json:"mail"`

	// MailEnabled Specifies whether the group is mail-enabled. Required. Returned by default. Supports $filter (eq, ne, not).
	MailEnabled *bool `json:"mailEnabled"`

	// MailNickname The mail alias for the group, unique for Microsoft 365 groups in the organization. Maximum length is 64 characters. This property can contain only characters in the ASCII character set 0 - 127 except the following: @ () / [] ' ; : <> , SPACE. Required. Returned by default. Supports $filter (eq, ne, not, ge, le, in, startsWith, and eq on null values).
	MailNickname *string `json:"mailNickname"`

	// MemberOf Groups that this group is a member of. HTTP Methods: GET (supported for all groups). Read-only. Nullable. Supports $expand.
	MemberOf *[]MicrosoftGraphDirectoryObject `json:"memberOf,omitempty"`

	// Members The members of this group, who can be users, devices, other groups, or service principals. Supports the List members, Add member, and Remove member operations. Nullable. Supports $expand including nested $select. For example, /groups?$filter=startsWith(displayName,'Role')&$select=id,displayName&$expand=members($select=id,userPrincipalName,displayName).
	Members *[]MicrosoftGraphDirectoryObject `json:"members,omitempty"`

	// MembersWithLicenseErrors A list of group members with license errors from this group-based license assignment. Read-only.
	MembersWithLicenseErrors *[]MicrosoftGraphDirectoryObject `json:"membersWithLicenseErrors,omitempty"`

	// MembershipRule The rule that determines members for this group if the group is a dynamic group (groupTypes contains DynamicMembership). For more information about the syntax of the membership rule, see Membership Rules syntax. Returned by default. Supports $filter (eq, ne, not, ge, le, startsWith).
	MembershipRule *string `json:"membershipRule"`

	// MembershipRuleProcessingState Indicates whether the dynamic membership processing is on or paused. Possible values are On or Paused. Returned by default. Supports $filter (eq, ne, not, in).
	MembershipRuleProcessingState *string `json:"membershipRuleProcessingState"`
	OnPremisesDomainName          *string `json:"onPremisesDomainName"`

	// OnPremisesLastSyncDateTime Indicates the last time at which the group was synced with the on-premises directory.The Timestamp type represents date and time information using ISO 8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 is 2014-01-01T00:00:00Z. Returned by default. Read-only. Supports $filter (eq, ne, not, ge, le, in).
	OnPremisesLastSyncDateTime *time.Time `json:"onPremisesLastSyncDateTime"`
	OnPremisesNetBiosName      *string    `json:"onPremisesNetBiosName"`

	// OnPremisesProvisioningErrors Errors when using Microsoft synchronization product during provisioning. Returned by default. Supports $filter (eq, not).
	OnPremisesProvisioningErrors *[]MicrosoftGraphGroup_OnPremisesProvisioningErrors_Item `json:"onPremisesProvisioningErrors,omitempty"`

	// OnPremisesSamAccountName Contains the on-premises SAM account name synchronized from the on-premises directory. The property is only populated for customers who are synchronizing their on-premises directory to Azure Active Directory via Azure AD Connect.Returned by default. Supports $filter (eq, ne, not, ge, le, in, startsWith). Read-only.
	OnPremisesSamAccountName *string `json:"onPremisesSamAccountName"`

	// OnPremisesSecurityIdentifier Contains the on-premises security identifier (SID) for the group that was synchronized from on-premises to the cloud. Returned by default. Supports $filter (eq including on null values). Read-only.
	OnPremisesSecurityIdentifier *string `json:"onPremisesSecurityIdentifier"`

	// OnPremisesSyncEnabled true if this group is synced from an on-premises directory; false if this group was originally synced from an on-premises directory but is no longer synced; null if this object has never been synced from an on-premises directory (default). Returned by default. Read-only. Supports $filter (eq, ne, not, in, and eq on null values).
	OnPremisesSyncEnabled *bool                        `json:"onPremisesSyncEnabled"`
	Onenote               *MicrosoftGraphGroup_Onenote `json:"onenote,omitempty"`

	// Owners The owners of the group. Limited to 100 owners. Nullable. If this property is not specified when creating a Microsoft 365 group, the calling user is automatically assigned as the group owner.  Supports $filter (/$count eq 0, /$count ne 0, /$count eq 1, /$count ne 1). Supports $expand including nested $select. For example, /groups?$filter=startsWith(displayName,'Role')&$select=id,displayName&$expand=owners($select=id,userPrincipalName,displayName).
	Owners *[]MicrosoftGraphDirectoryObject `json:"owners,omitempty"`

	// PermissionGrants The permission that has been granted for a group to a specific application. Supports $expand.
	PermissionGrants *[]MicrosoftGraphResourceSpecificPermissionGrant `json:"permissionGrants,omitempty"`

	// Photo The group's profile photo
	Photo *MicrosoftGraphGroup_Photo `json:"photo,omitempty"`

	// Photos The profile photos owned by the group. Read-only. Nullable.
	Photos *[]MicrosoftGraphProfilePhoto `json:"photos,omitempty"`

	// Planner Entry-point to Planner resource that might exist for a Unified Group.
	Planner *MicrosoftGraphGroup_Planner `json:"planner,omitempty"`

	// PreferredDataLocation The preferred data location for the Microsoft 365 group. By default, the group inherits the group creator's preferred data location. To set this property, the calling user must be assigned one of the following Azure AD roles:  Global Administrator  User Account Administrator Directory Writer  Exchange Administrator  SharePoint Administrator  For more information about this property, see OneDrive Online Multi-Geo. Nullable. Returned by default.
	PreferredDataLocation *string `json:"preferredDataLocation"`

	// PreferredLanguage The preferred language for a Microsoft 365 group. Should follow ISO 639-1 Code; for example en-US. Returned by default. Supports $filter (eq, ne, not, ge, le, in, startsWith, and eq on null values).
	PreferredLanguage *string `json:"preferredLanguage"`

	// ProxyAddresses Email addresses for the group that direct to the same group mailbox. For example: ['SMTP: bob@contoso.com', 'smtp: bob@sales.contoso.com']. The any operator is required to filter expressions on multi-valued properties. Returned by default. Read-only. Not nullable. Supports $filter (eq, not, ge, le, startsWith, endsWith, /$count eq 0, /$count ne 0).
	ProxyAddresses *[]string `json:"proxyAddresses,omitempty"`

	// RejectedSenders The list of users or groups that are not allowed to create posts or calendar events in this group. Nullable
	RejectedSenders *[]MicrosoftGraphDirectoryObject `json:"rejectedSenders,omitempty"`

	// RenewedDateTime Timestamp of when the group was last renewed. This cannot be modified directly and is only updated via the renew service action. The Timestamp type represents date and time information using ISO 8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 is 2014-01-01T00:00:00Z. Returned by default. Supports $filter (eq, ne, not, ge, le, in). Read-only.
	RenewedDateTime *time.Time `json:"renewedDateTime"`

	// SecurityEnabled Specifies whether the group is a security group. Required. Returned by default. Supports $filter (eq, ne, not, in).
	SecurityEnabled *bool `json:"securityEnabled"`

	// SecurityIdentifier Security identifier of the group, used in Windows scenarios. Returned by default.
	SecurityIdentifier *string `json:"securityIdentifier"`

	// Settings Settings that can govern this group's behavior, like whether members can invite guest users to the group. Nullable.
	Settings *[]MicrosoftGraphGroupSetting `json:"settings,omitempty"`

	// Sites The list of SharePoint sites in this group. Access the default site with /sites/root.
	Sites *[]MicrosoftGraphSite `json:"sites,omitempty"`

	// Team The team associated with this group.
	Team *MicrosoftGraphGroup_Team `json:"team,omitempty"`

	// Theme Specifies a Microsoft 365 group's color theme. Possible values are Teal, Purple, Green, Blue, Pink, Orange or Red. Returned by default.
	Theme *string `json:"theme"`

	// Threads The group's conversation threads. Nullable.
	Threads *[]MicrosoftGraphConversationThread `json:"threads,omitempty"`

	// TransitiveMemberOf The groups that a group is a member of, either directly and through nested membership. Nullable.
	TransitiveMemberOf *[]MicrosoftGraphDirectoryObject `json:"transitiveMemberOf,omitempty"`

	// TransitiveMembers The direct and transitive members of a group. Nullable.
	TransitiveMembers *[]MicrosoftGraphDirectoryObject `json:"transitiveMembers,omitempty"`

	// UnseenCount Count of conversations that have received new posts since the signed-in user last visited the group. Returned only on $select. Supported only on the Get group API (GET /groups/{ID}).
	UnseenCount *int32 `json:"unseenCount"`

	// Visibility Specifies the group join policy and group content visibility for groups. Possible values are: Private, Public, or HiddenMembership. HiddenMembership can be set only for Microsoft 365 groups, when the groups are created. It can't be updated later. Other values of visibility can be updated after group creation. If visibility value is not specified during group creation on Microsoft Graph, a security group is created as Private by default and Microsoft 365 group is Public. Groups assignable to roles are always Private. See group visibility options to learn more. Returned by default. Nullable.
	Visibility *string `json:"visibility"`
}

// MicrosoftGraphGroupAssignedLabels1 defines model for .
type MicrosoftGraphGroupAssignedLabels1 = map[string]interface{}

// MicrosoftGraphGroup_AssignedLabels_Item defines model for microsoft.graph.group.assignedLabels.Item.
type MicrosoftGraphGroup_AssignedLabels_Item struct {
	union json.RawMessage
}

// MicrosoftGraphGroupAssignedLicenses1 defines model for .
type MicrosoftGraphGroupAssignedLicenses1 = map[string]interface{}

// MicrosoftGraphGroup_AssignedLicenses_Item defines model for microsoft.graph.group.assignedLicenses.Item.
type MicrosoftGraphGroup_AssignedLicenses_Item struct {
	union json.RawMessage
}

// MicrosoftGraphGroupCalendar1 defines model for .
type MicrosoftGraphGroupCalendar1 = map[string]interface{}

// MicrosoftGraphGroup_Calendar The group's calendar. Read-only.
type MicrosoftGraphGroup_Calendar struct {
	union json.RawMessage
}

// MicrosoftGraphGroupCreatedOnBehalfOf1 defines model for .
type MicrosoftGraphGroupCreatedOnBehalfOf1 = map[string]interface{}

// MicrosoftGraphGroup_CreatedOnBehalfOf The user (or application) that created the group. NOTE: This is not set if the user is an administrator. Read-only.
type MicrosoftGraphGroup_CreatedOnBehalfOf struct {
	union json.RawMessage
}

// MicrosoftGraphGroupDrive1 defines model for .
type MicrosoftGraphGroupDrive1 = map[string]interface{}

// MicrosoftGraphGroup_Drive The group's default drive. Read-only.
type MicrosoftGraphGroup_Drive struct {
	union json.RawMessage
}

// MicrosoftGraphGroupLicenseProcessingState1 defines model for .
type MicrosoftGraphGroupLicenseProcessingState1 = map[string]interface{}

// MicrosoftGraphGroup_LicenseProcessingState Indicates status of the group license assignment to all members of the group. Default value is false. Read-only. Possible values: QueuedForProcessing, ProcessingInProgress, and ProcessingComplete.Returned only on $select. Read-only.
type MicrosoftGraphGroup_LicenseProcessingState struct {
	union json.RawMessage
}

// MicrosoftGraphGroupOnPremisesProvisioningErrors1 defines model for .
type MicrosoftGraphGroupOnPremisesProvisioningErrors1 = map[string]interface{}

// MicrosoftGraphGroup_OnPremisesProvisioningErrors_Item defines model for microsoft.graph.group.onPremisesProvisioningErrors.Item.
type MicrosoftGraphGroup_OnPremisesProvisioningErrors_Item struct {
	union json.RawMessage
}

// MicrosoftGraphGroupOnenote1 defines model for .
type MicrosoftGraphGroupOnenote1 = map[string]interface{}

// MicrosoftGraphGroup_Onenote defines model for MicrosoftGraphGroup.Onenote.
type MicrosoftGraphGroup_Onenote struct {
	union json.RawMessage
}

// MicrosoftGraphGroupPhoto1 defines model for .
type MicrosoftGraphGroupPhoto1 = map[string]interface{}

// MicrosoftGraphGroup_Photo The group's profile photo
type MicrosoftGraphGroup_Photo struct {
	union json.RawMessage
}

// MicrosoftGraphGroupPlanner1 defines model for .
type MicrosoftGraphGroupPlanner1 = map[string]interface{}

// MicrosoftGraphGroup_Planner Entry-point to Planner resource that might exist for a Unified Group.
type MicrosoftGraphGroup_Planner struct {
	union json.RawMessage
}

// MicrosoftGraphGroupTeam1 defines model for .
type MicrosoftGraphGroupTeam1 = map[string]interface{}

// MicrosoftGraphGroup_Team The team associated with this group.
type MicrosoftGraphGroup_Team struct {
	union json.RawMessage
}

// MicrosoftGraphGroupLifecyclePolicy defines model for microsoft.graph.groupLifecyclePolicy.
type MicrosoftGraphGroupLifecyclePolicy struct {
	// AlternateNotificationEmails List of email address to send notifications for groups without owners. Multiple email address can be defined by separating email address with a semicolon.
	AlternateNotificationEmails *string `json:"alternateNotificationEmails"`

	// GroupLifetimeInDays Number of days before a group expires and needs to be renewed. Once renewed, the group expiration is extended by the number of days defined.
	GroupLifetimeInDays *int32 `json:"groupLifetimeInDays"`

	// Id The unique idenfier for an entity. Read-only.
	Id *string `json:"id,omitempty"`

	// ManagedGroupTypes The group type for which the expiration policy applies. Possible values are All, Selected or None.
	ManagedGroupTypes *string `json:"managedGroupTypes"`
}

// MicrosoftGraphGroupSetting defines model for microsoft.graph.groupSetting.
type MicrosoftGraphGroupSetting struct {
	// DisplayName Display name of this group of settings, which comes from the associated template.
	DisplayName *string `json:"displayName"`

	// Id The unique idenfier for an entity. Read-only.
	Id *string `json:"id,omitempty"`

	// TemplateId Unique identifier for the tenant-level groupSettingTemplates object that's been customized for this group-level settings object. Read-only.
	TemplateId *string `json:"templateId"`

	// Values Collection of name-value pairs corresponding to the name and defaultValue properties in the referenced groupSettingTemplates object.
	Values *[]MicrosoftGraphSettingValue `json:"values,omitempty"`
}

// MicrosoftGraphHashes defines model for microsoft.graph.hashes.
type MicrosoftGraphHashes struct {
	// Crc32Hash The CRC32 value of the file in little endian (if available). Read-only.
	Crc32Hash *string `json:"crc32Hash"`

	// QuickXorHash A proprietary hash of the file that can be used to determine if the contents of the file have changed (if available). Read-only.
	QuickXorHash *string `json:"quickXorHash"`

	// Sha1Hash SHA1 hash for the contents of the file (if available). Read-only.
	Sha1Hash *string `json:"sha1Hash"`

	// Sha256Hash SHA256 hash for the contents of the file (if available). Read-only.
	Sha256Hash *string `json:"sha256Hash"`
}

// MicrosoftGraphHyperlinkOrPictureColumn defines model for microsoft.graph.hyperlinkOrPictureColumn.
type MicrosoftGraphHyperlinkOrPictureColumn struct {
	// IsPicture Specifies whether the display format used for URL columns is an image or a hyperlink.
	IsPicture *bool `json:"isPicture"`
}

// MicrosoftGraphIdentity defines model for microsoft.graph.identity.
type MicrosoftGraphIdentity struct {
	// DisplayName The display name of the identity. Note that this might not always be available or up to date. For example, if a user changes their display name, the API might show the new value in a future response, but the items associated with the user won't show up as having changed when using delta.
	DisplayName *string `json:"displayName"`

	// Id Unique identifier for the identity.
	Id *string `json:"id"`
}

// MicrosoftGraphIdentitySet defines model for microsoft.graph.identitySet.
type MicrosoftGraphIdentitySet struct {
	// Application Optional. The application associated with this action.
	Application *MicrosoftGraphIdentitySet_Application `json:"application,omitempty"`

	// Device Optional. The device associated with this action.
	Device *MicrosoftGraphIdentitySet_Device `json:"device,omitempty"`

	// User Optional. The user associated with this action.
	User *MicrosoftGraphIdentitySet_User `json:"user,omitempty"`
}

// MicrosoftGraphIdentitySetApplication1 defines model for .
type MicrosoftGraphIdentitySetApplication1 = map[string]interface{}

// MicrosoftGraphIdentitySet_Application Optional. The application associated with this action.
type MicrosoftGraphIdentitySet_Application struct {
	union json.RawMessage
}

// MicrosoftGraphIdentitySetDevice1 defines model for .
type MicrosoftGraphIdentitySetDevice1 = map[string]interface{}

// MicrosoftGraphIdentitySet_Device Optional. The device associated with this action.
type MicrosoftGraphIdentitySet_Device struct {
	union json.RawMessage
}

// MicrosoftGraphIdentitySetUser1 defines model for .
type MicrosoftGraphIdentitySetUser1 = map[string]interface{}

// MicrosoftGraphIdentitySet_User Optional. The user associated with this action.
type MicrosoftGraphIdentitySet_User struct {
	union json.RawMessage
}

// MicrosoftGraphImage defines model for microsoft.graph.image.
type MicrosoftGraphImage struct {
	// Height Optional. Height of the image, in pixels. Read-only.
	Height *int32 `json:"height"`

	// Width Optional. Width of the image, in pixels. Read-only.
	Width *int32 `json:"width"`
}

// MicrosoftGraphImageInfo defines model for microsoft.graph.imageInfo.
type MicrosoftGraphImageInfo struct {
	// AddImageQuery Optional; parameter used to indicate the server is able to render image dynamically in response to parameterization. For example – a high contrast image
	AddImageQuery *bool `json:"addImageQuery"`

	// AlternateText Optional; alt-text accessible content for the image
	AlternateText   *string `json:"alternateText"`
	AlternativeText *string `json:"alternativeText"`

	// IconUrl Optional; URI that points to an icon which represents the application used to generate the activity
	IconUrl *string `json:"iconUrl"`
}

// MicrosoftGraphImportance defines model for microsoft.graph.importance.
type MicrosoftGraphImportance string

// MicrosoftGraphIncompleteData defines model for microsoft.graph.incompleteData.
type MicrosoftGraphIncompleteData struct {
	// MissingDataBeforeDateTime The service does not have source data before the specified time.
	MissingDataBeforeDateTime *time.Time `json:"missingDataBeforeDateTime"`

	// WasThrottled Some data was not recorded due to excessive activity.
	WasThrottled *bool `json:"wasThrottled"`
}

// MicrosoftGraphInferenceClassification defines model for microsoft.graph.inferenceClassification.
type MicrosoftGraphInferenceClassification struct {
	// Id The unique idenfier for an entity. Read-only.
	Id *string `json:"id,omitempty"`

	// Overrides A set of overrides for a user to always classify messages from specific senders in certain ways: focused, or other. Read-only. Nullable.
	Overrides *[]MicrosoftGraphInferenceClassificationOverride `json:"overrides,omitempty"`
}

// MicrosoftGraphInferenceClassificationOverride defines model for microsoft.graph.inferenceClassificationOverride.
type MicrosoftGraphInferenceClassificationOverride struct {
	// ClassifyAs Specifies how incoming messages from a specific sender should always be classified as. The possible values are: focused, other.
	ClassifyAs *MicrosoftGraphInferenceClassificationOverride_ClassifyAs `json:"classifyAs,omitempty"`

	// Id The unique idenfier for an entity. Read-only.
	Id *string `json:"id,omitempty"`

	// SenderEmailAddress The email address information of the sender for whom the override is created.
	SenderEmailAddress *MicrosoftGraphInferenceClassificationOverride_SenderEmailAddress `json:"senderEmailAddress,omitempty"`
}

// MicrosoftGraphInferenceClassificationOverrideClassifyAs1 defines model for .
type MicrosoftGraphInferenceClassificationOverrideClassifyAs1 = map[string]interface{}

// MicrosoftGraphInferenceClassificationOverride_ClassifyAs Specifies how incoming messages from a specific sender should always be classified as. The possible values are: focused, other.
type MicrosoftGraphInferenceClassificationOverride_ClassifyAs struct {
	union json.RawMessage
}

// MicrosoftGraphInferenceClassificationOverrideSenderEmailAddress1 defines model for .
type MicrosoftGraphInferenceClassificationOverrideSenderEmailAddress1 = map[string]interface{}

// MicrosoftGraphInferenceClassificationOverride_SenderEmailAddress The email address information of the sender for whom the override is created.
type MicrosoftGraphInferenceClassificationOverride_SenderEmailAddress struct {
	union json.RawMessage
}

// MicrosoftGraphInferenceClassificationType defines model for microsoft.graph.inferenceClassificationType.
type MicrosoftGraphInferenceClassificationType string

// MicrosoftGraphInsightIdentity defines model for microsoft.graph.insightIdentity.
type MicrosoftGraphInsightIdentity struct {
	// Address The email address of the user who shared the item.
	Address *string `json:"address"`

	// DisplayName The display name of the user who shared the item.
	DisplayName *string `json:"displayName"`

	// Id The id of the user who shared the item.
	Id *string `json:"id"`
}

// MicrosoftGraphIntegerRange defines model for microsoft.graph.integerRange.
type MicrosoftGraphIntegerRange struct {
	// End The inclusive upper bound of the integer range.
	End *int64 `json:"end"`

	// Start The inclusive lower bound of the integer range.
	Start *int64 `json:"start"`
}

// MicrosoftGraphInternetMessageHeader defines model for microsoft.graph.internetMessageHeader.
type MicrosoftGraphInternetMessageHeader struct {
	// Name Represents the key in a key-value pair.
	Name *string `json:"name"`

	// Value The value in a key-value pair.
	Value *string `json:"value"`
}

// MicrosoftGraphItemActionStat defines model for microsoft.graph.itemActionStat.
type MicrosoftGraphItemActionStat struct {
	// ActionCount The number of times the action took place. Read-only.
	ActionCount *int32 `json:"actionCount"`

	// ActorCount The number of distinct actors that performed the action. Read-only.
	ActorCount *int32 `json:"actorCount"`
}

// MicrosoftGraphItemActivity defines model for microsoft.graph.itemActivity.
type MicrosoftGraphItemActivity struct {
	// Access An item was accessed.
	Access *MicrosoftGraphItemActivity_Access `json:"access,omitempty"`

	// ActivityDateTime Details about when the activity took place. Read-only.
	ActivityDateTime *time.Time `json:"activityDateTime"`

	// Actor Identity of who performed the action. Read-only.
	Actor *MicrosoftGraphItemActivity_Actor `json:"actor,omitempty"`

	// DriveItem Exposes the driveItem that was the target of this activity.
	DriveItem *MicrosoftGraphItemActivity_DriveItem `json:"driveItem,omitempty"`

	// Id The unique idenfier for an entity. Read-only.
	Id *string `json:"id,omitempty"`
}

// MicrosoftGraphItemActivityAccess1 defines model for .
type MicrosoftGraphItemActivityAccess1 = map[string]interface{}

// MicrosoftGraphItemActivity_Access An item was accessed.
type MicrosoftGraphItemActivity_Access struct {
	union json.RawMessage
}

// MicrosoftGraphItemActivityActor1 defines model for .
type MicrosoftGraphItemActivityActor1 = map[string]interface{}

// MicrosoftGraphItemActivity_Actor Identity of who performed the action. Read-only.
type MicrosoftGraphItemActivity_Actor struct {
	union json.RawMessage
}

// MicrosoftGraphItemActivityDriveItem1 defines model for .
type MicrosoftGraphItemActivityDriveItem1 = map[string]interface{}

// MicrosoftGraphItemActivity_DriveItem Exposes the driveItem that was the target of this activity.
type MicrosoftGraphItemActivity_DriveItem struct {
	union json.RawMessage
}

// MicrosoftGraphItemActivityStat defines model for microsoft.graph.itemActivityStat.
type MicrosoftGraphItemActivityStat struct {
	// Access Statistics about the access actions in this interval. Read-only.
	Access *MicrosoftGraphItemActivityStat_Access `json:"access,omitempty"`

	// Activities Exposes the itemActivities represented in this itemActivityStat resource.
	Activities *[]MicrosoftGraphItemActivity `json:"activities,omitempty"`

	// Create Statistics about the create actions in this interval. Read-only.
	Create *MicrosoftGraphItemActivityStat_Create `json:"create,omitempty"`

	// Delete Statistics about the delete actions in this interval. Read-only.
	Delete *MicrosoftGraphItemActivityStat_Delete `json:"delete,omitempty"`

	// Edit Statistics about the edit actions in this interval. Read-only.
	Edit *MicrosoftGraphItemActivityStat_Edit `json:"edit,omitempty"`

	// EndDateTime When the interval ends. Read-only.
	EndDateTime *time.Time `json:"endDateTime"`

	// Id The unique idenfier for an entity. Read-only.
	Id *string `json:"id,omitempty"`

	// IncompleteData Indicates that the statistics in this interval are based on incomplete data. Read-only.
	IncompleteData *MicrosoftGraphItemActivityStat_IncompleteData `json:"incompleteData,omitempty"`

	// IsTrending Indicates whether the item is 'trending.' Read-only.
	IsTrending *bool `json:"isTrending"`

	// Move Statistics about the move actions in this interval. Read-only.
	Move *MicrosoftGraphItemActivityStat_Move `json:"move,omitempty"`

	// StartDateTime When the interval starts. Read-only.
	StartDateTime *time.Time `json:"startDateTime"`
}

// MicrosoftGraphItemActivityStatAccess1 defines model for .
type MicrosoftGraphItemActivityStatAccess1 = map[string]interface{}

// MicrosoftGraphItemActivityStat_Access Statistics about the access actions in this interval. Read-only.
type MicrosoftGraphItemActivityStat_Access struct {
	union json.RawMessage
}

// MicrosoftGraphItemActivityStatCreate1 defines model for .
type MicrosoftGraphItemActivityStatCreate1 = map[string]interface{}

// MicrosoftGraphItemActivityStat_Create Statistics about the create actions in this interval. Read-only.
type MicrosoftGraphItemActivityStat_Create struct {
	union json.RawMessage
}

// MicrosoftGraphItemActivityStatDelete1 defines model for .
type MicrosoftGraphItemActivityStatDelete1 = map[string]interface{}

// MicrosoftGraphItemActivityStat_Delete Statistics about the delete actions in this interval. Read-only.
type MicrosoftGraphItemActivityStat_Delete struct {
	union json.RawMessage
}

// MicrosoftGraphItemActivityStatEdit1 defines model for .
type MicrosoftGraphItemActivityStatEdit1 = map[string]interface{}

// MicrosoftGraphItemActivityStat_Edit Statistics about the edit actions in this interval. Read-only.
type MicrosoftGraphItemActivityStat_Edit struct {
	union json.RawMessage
}

// MicrosoftGraphItemActivityStatIncompleteData1 defines model for .
type MicrosoftGraphItemActivityStatIncompleteData1 = map[string]interface{}

// MicrosoftGraphItemActivityStat_IncompleteData Indicates that the statistics in this interval are based on incomplete data. Read-only.
type MicrosoftGraphItemActivityStat_IncompleteData struct {
	union json.RawMessage
}

// MicrosoftGraphItemActivityStatMove1 defines model for .
type MicrosoftGraphItemActivityStatMove1 = map[string]interface{}

// MicrosoftGraphItemActivityStat_Move Statistics about the move actions in this interval. Read-only.
type MicrosoftGraphItemActivityStat_Move struct {
	union json.RawMessage
}

// MicrosoftGraphItemAnalytics defines model for microsoft.graph.itemAnalytics.
type MicrosoftGraphItemAnalytics struct {
	AllTime *MicrosoftGraphItemAnalytics_AllTime `json:"allTime,omitempty"`

	// Id The unique idenfier for an entity. Read-only.
	Id                *string                                    `json:"id,omitempty"`
	ItemActivityStats *[]MicrosoftGraphItemActivityStat          `json:"itemActivityStats,omitempty"`
	LastSevenDays     *MicrosoftGraphItemAnalytics_LastSevenDays `json:"lastSevenDays,omitempty"`
}

// MicrosoftGraphItemAnalyticsAllTime1 defines model for .
type MicrosoftGraphItemAnalyticsAllTime1 = map[string]interface{}

// MicrosoftGraphItemAnalytics_AllTime defines model for MicrosoftGraphItemAnalytics.AllTime.
type MicrosoftGraphItemAnalytics_AllTime struct {
	union json.RawMessage
}

// MicrosoftGraphItemAnalyticsLastSevenDays1 defines model for .
type MicrosoftGraphItemAnalyticsLastSevenDays1 = map[string]interface{}

// MicrosoftGraphItemAnalytics_LastSevenDays defines model for MicrosoftGraphItemAnalytics.LastSevenDays.
type MicrosoftGraphItemAnalytics_LastSevenDays struct {
	union json.RawMessage
}

// MicrosoftGraphItemBody defines model for microsoft.graph.itemBody.
type MicrosoftGraphItemBody struct {
	// Content The content of the item.
	Content *string `json:"content"`

	// ContentType The type of the content. Possible values are text and html.
	ContentType *MicrosoftGraphItemBody_ContentType `json:"contentType,omitempty"`
}

// MicrosoftGraphItemBodyContentType1 defines model for .
type MicrosoftGraphItemBodyContentType1 = map[string]interface{}

// MicrosoftGraphItemBody_ContentType The type of the content. Possible values are text and html.
type MicrosoftGraphItemBody_ContentType struct {
	union json.RawMessage
}

// MicrosoftGraphItemReference defines model for microsoft.graph.itemReference.
type MicrosoftGraphItemReference struct {
	// DriveId Unique identifier of the drive instance that contains the driveItem. Only returned if the item is located in a [drive][]. Read-only.
	DriveId *string `json:"driveId"`

	// DriveType Identifies the type of drive. Only returned if the item is located in a [drive][]. See [drive][] resource for values.
	DriveType *string `json:"driveType"`

	// Id Unique identifier of the driveItem in the drive or a listItem in a list. Read-only.
	Id *string `json:"id"`

	// Name The name of the item being referenced. Read-only.
	Name *string `json:"name"`

	// Path Path that can be used to navigate to the item. Read-only.
	Path *string `json:"path"`

	// ShareId A unique identifier for a shared resource that can be accessed via the [Shares][] API.
	ShareId *string `json:"shareId"`

	// SharepointIds Returns identifiers useful for SharePoint REST compatibility. Read-only.
	SharepointIds *MicrosoftGraphItemReference_SharepointIds `json:"sharepointIds,omitempty"`

	// SiteId For OneDrive for Business and SharePoint, this property represents the ID of the site that contains the parent document library of the driveItem resource or the parent list of the listItem resource. The value is the same as the id property of that [site][] resource. It is an opaque string that consists of three identifiers of the site. For OneDrive, this property is not populated.
	SiteId *string `json:"siteId"`
}

// MicrosoftGraphItemReferenceSharepointIds1 defines model for .
type MicrosoftGraphItemReferenceSharepointIds1 = map[string]interface{}

// MicrosoftGraphItemReference_SharepointIds Returns identifiers useful for SharePoint REST compatibility. Read-only.
type MicrosoftGraphItemReference_SharepointIds struct {
	union json.RawMessage
}

// MicrosoftGraphJoinMeetingIdSettings defines model for microsoft.graph.joinMeetingIdSettings.
type MicrosoftGraphJoinMeetingIdSettings struct {
	// IsPasscodeRequired Indicates whether a passcode is required to join a meeting when using joinMeetingId. Optional.
	IsPasscodeRequired *bool `json:"isPasscodeRequired"`

	// JoinMeetingId The meeting ID to be used to join a meeting. Optional. Read-only.
	JoinMeetingId *string `json:"joinMeetingId"`

	// Passcode The passcode to join a meeting.  Optional. Read-only.
	Passcode *string `json:"passcode"`
}

// MicrosoftGraphKeyValue defines model for microsoft.graph.keyValue.
type MicrosoftGraphKeyValue struct {
	// Key Key for the key-value pair.
	Key *string `json:"key"`

	// Value Value for the key-value pair.
	Value *string `json:"value"`
}

// MicrosoftGraphLearningCourseActivity defines model for microsoft.graph.learningCourseActivity.
type MicrosoftGraphLearningCourseActivity struct {
	// CompletedDateTime Date and time when the assignment was completed. Optional.
	CompletedDateTime *time.Time `json:"completedDateTime"`

	// CompletionPercentage The percentage completion value of the course activity. Optional.
	CompletionPercentage *int32 `json:"completionPercentage"`

	// ExternalcourseActivityId A course activity ID generated by the provider. Optional.
	ExternalcourseActivityId *string `json:"externalcourseActivityId"`

	// Id The unique idenfier for an entity. Read-only.
	Id *string `json:"id,omitempty"`

	// LearnerUserId The user ID of the learner to whom the activity is assigned. Required.
	LearnerUserId *string `json:"learnerUserId,omitempty"`

	// LearningContentId The ID of the learning content created in Viva Learning. Required.
	LearningContentId *string `json:"learningContentId,omitempty"`

	// LearningProviderId The registration ID of the provider. Required.
	LearningProviderId *string `json:"learningProviderId"`

	// Status The status of the course activity. Possible values are: notStarted, inProgress, completed. Required.
	Status *MicrosoftGraphLearningCourseActivity_Status `json:"status,omitempty"`
}

// MicrosoftGraphLearningCourseActivityStatus1 defines model for .
type MicrosoftGraphLearningCourseActivityStatus1 = map[string]interface{}

// MicrosoftGraphLearningCourseActivity_Status The status of the course activity. Possible values are: notStarted, inProgress, completed. Required.
type MicrosoftGraphLearningCourseActivity_Status struct {
	union json.RawMessage
}

// MicrosoftGraphLicenseAssignmentState defines model for microsoft.graph.licenseAssignmentState.
type MicrosoftGraphLicenseAssignmentState struct {
	AssignedByGroup     *string               `json:"assignedByGroup"`
	DisabledPlans       *[]openapi_types.UUID `json:"disabledPlans,omitempty"`
	Error               *string               `json:"error"`
	LastUpdatedDateTime *time.Time            `json:"lastUpdatedDateTime"`
	SkuId               *openapi_types.UUID   `json:"skuId"`
	State               *string               `json:"state"`
}

// MicrosoftGraphLicenseDetails defines model for microsoft.graph.licenseDetails.
type MicrosoftGraphLicenseDetails struct {
	// Id The unique idenfier for an entity. Read-only.
	Id *string `json:"id,omitempty"`

	// ServicePlans Information about the service plans assigned with the license. Read-only, Not nullable
	ServicePlans *[]MicrosoftGraphServicePlanInfo `json:"servicePlans,omitempty"`

	// SkuId Unique identifier (GUID) for the service SKU. Equal to the skuId property on the related SubscribedSku object. Read-only
	SkuId *openapi_types.UUID `json:"skuId"`

	// SkuPartNumber Unique SKU display name. Equal to the skuPartNumber on the related SubscribedSku object; for example: 'AAD_Premium'. Read-only
	SkuPartNumber *string `json:"skuPartNumber"`
}

// MicrosoftGraphLicenseProcessingState defines model for microsoft.graph.licenseProcessingState.
type MicrosoftGraphLicenseProcessingState struct {
	State *string `json:"state"`
}

// MicrosoftGraphLinkedResource defines model for microsoft.graph.linkedResource.
type MicrosoftGraphLinkedResource struct {
	// ApplicationName The app name of the source that sends the linkedResource.
	ApplicationName *string `json:"applicationName"`

	// DisplayName The title of the linkedResource.
	DisplayName *string `json:"displayName"`

	// ExternalId ID of the object that is associated with this task on the third-party/partner system.
	ExternalId *string `json:"externalId"`

	// Id The unique idenfier for an entity. Read-only.
	Id *string `json:"id,omitempty"`

	// WebUrl Deep link to the linkedResource.
	WebUrl *string `json:"webUrl"`
}

// MicrosoftGraphList defines model for microsoft.graph.list.
type MicrosoftGraphList struct {
	// Columns The collection of field definitions for this list.
	Columns *[]MicrosoftGraphColumnDefinition `json:"columns,omitempty"`

	// ContentTypes The collection of content types present in this list.
	ContentTypes *[]MicrosoftGraphContentType `json:"contentTypes,omitempty"`

	// CreatedBy Identity of the user, device, or application which created the item. Read-only.
	CreatedBy *MicrosoftGraphList_CreatedBy `json:"createdBy,omitempty"`

	// CreatedByUser Identity of the user who created the item. Read-only.
	CreatedByUser *MicrosoftGraphList_CreatedByUser `json:"createdByUser,omitempty"`

	// CreatedDateTime Date and time of item creation. Read-only.
	CreatedDateTime *time.Time `json:"createdDateTime,omitempty"`

	// Description Provides a user-visible description of the item. Optional.
	Description *string `json:"description"`

	// DisplayName The displayable title of the list.
	DisplayName *string `json:"displayName"`

	// Drive Only present on document libraries. Allows access to the list as a [drive][] resource with [driveItems][driveItem].
	Drive *MicrosoftGraphList_Drive `json:"drive,omitempty"`

	// ETag ETag for the item. Read-only.
	ETag *string `json:"eTag"`

	// Id The unique idenfier for an entity. Read-only.
	Id *string `json:"id,omitempty"`

	// Items All items contained in the list.
	Items *[]MicrosoftGraphListItem `json:"items,omitempty"`

	// LastModifiedBy Identity of the user, device, and application which last modified the item. Read-only.
	LastModifiedBy *MicrosoftGraphList_LastModifiedBy `json:"lastModifiedBy,omitempty"`

	// LastModifiedByUser Identity of the user who last modified the item. Read-only.
	LastModifiedByUser *MicrosoftGraphList_LastModifiedByUser `json:"lastModifiedByUser,omitempty"`

	// LastModifiedDateTime Date and time the item was last modified. Read-only.
	LastModifiedDateTime *time.Time `json:"lastModifiedDateTime,omitempty"`

	// List Provides additional details about the list.
	List *MicrosoftGraphList_List `json:"list,omitempty"`

	// Name The name of the item. Read-write.
	Name *string `json:"name"`

	// Operations The collection of long-running operations on the list.
	Operations *[]MicrosoftGraphRichLongRunningOperation `json:"operations,omitempty"`

	// ParentReference Parent information, if the item has a parent. Read-write.
	ParentReference *MicrosoftGraphList_ParentReference `json:"parentReference,omitempty"`

	// SharepointIds Returns identifiers useful for SharePoint REST compatibility. Read-only.
	SharepointIds *MicrosoftGraphList_SharepointIds `json:"sharepointIds,omitempty"`

	// Subscriptions The set of subscriptions on the list.
	Subscriptions *[]MicrosoftGraphSubscription `json:"subscriptions,omitempty"`

	// System If present, indicates that this is a system-managed list. Read-only.
	System *MicrosoftGraphList_System `json:"system,omitempty"`

	// WebUrl URL that displays the resource in the browser. Read-only.
	WebUrl *string `json:"webUrl"`
}

// MicrosoftGraphListCreatedBy1 defines model for .
type MicrosoftGraphListCreatedBy1 = map[string]interface{}

// MicrosoftGraphList_CreatedBy Identity of the user, device, or application which created the item. Read-only.
type MicrosoftGraphList_CreatedBy struct {
	union json.RawMessage
}

// MicrosoftGraphListCreatedByUser1 defines model for .
type MicrosoftGraphListCreatedByUser1 = map[string]interface{}

// MicrosoftGraphList_CreatedByUser Identity of the user who created the item. Read-only.
type MicrosoftGraphList_CreatedByUser struct {
	union json.RawMessage
}

// MicrosoftGraphListDrive1 defines model for .
type MicrosoftGraphListDrive1 = map[string]interface{}

// MicrosoftGraphList_Drive Only present on document libraries. Allows access to the list as a [drive][] resource with [driveItems][driveItem].
type MicrosoftGraphList_Drive struct {
	union json.RawMessage
}

// MicrosoftGraphListLastModifiedBy1 defines model for .
type MicrosoftGraphListLastModifiedBy1 = map[string]interface{}

// MicrosoftGraphList_LastModifiedBy Identity of the user, device, and application which last modified the item. Read-only.
type MicrosoftGraphList_LastModifiedBy struct {
	union json.RawMessage
}

// MicrosoftGraphListLastModifiedByUser1 defines model for .
type MicrosoftGraphListLastModifiedByUser1 = map[string]interface{}

// MicrosoftGraphList_LastModifiedByUser Identity of the user who last modified the item. Read-only.
type MicrosoftGraphList_LastModifiedByUser struct {
	union json.RawMessage
}

// MicrosoftGraphListList1 defines model for .
type MicrosoftGraphListList1 = map[string]interface{}

// MicrosoftGraphList_List Provides additional details about the list.
type MicrosoftGraphList_List struct {
	union json.RawMessage
}

// MicrosoftGraphListParentReference1 defines model for .
type MicrosoftGraphListParentReference1 = map[string]interface{}

// MicrosoftGraphList_ParentReference Parent information, if the item has a parent. Read-write.
type MicrosoftGraphList_ParentReference struct {
	union json.RawMessage
}

// MicrosoftGraphListSharepointIds1 defines model for .
type MicrosoftGraphListSharepointIds1 = map[string]interface{}

// MicrosoftGraphList_SharepointIds Returns identifiers useful for SharePoint REST compatibility. Read-only.
type MicrosoftGraphList_SharepointIds struct {
	union json.RawMessage
}

// MicrosoftGraphListSystem1 defines model for .
type MicrosoftGraphListSystem1 = map[string]interface{}

// MicrosoftGraphList_System If present, indicates that this is a system-managed list. Read-only.
type MicrosoftGraphList_System struct {
	union json.RawMessage
}

// MicrosoftGraphListInfo defines model for microsoft.graph.listInfo.
type MicrosoftGraphListInfo struct {
	// ContentTypesEnabled If true, indicates that content types are enabled for this list.
	ContentTypesEnabled *bool `json:"contentTypesEnabled"`

	// Hidden If true, indicates that the list is not normally visible in the SharePoint user experience.
	Hidden *bool `json:"hidden"`

	// Template An enumerated value that represents the base list template used in creating the list. Possible values include documentLibrary, genericList, task, survey, announcements, contacts, and more.
	Template *string `json:"template"`
}

// MicrosoftGraphListItem defines model for microsoft.graph.listItem.
type MicrosoftGraphListItem struct {
	// Analytics Analytics about the view activities that took place on this item.
	Analytics *MicrosoftGraphListItem_Analytics `json:"analytics,omitempty"`

	// ContentType The content type of this list item
	ContentType *MicrosoftGraphListItem_ContentType `json:"contentType,omitempty"`

	// CreatedBy Identity of the user, device, or application which created the item. Read-only.
	CreatedBy *MicrosoftGraphListItem_CreatedBy `json:"createdBy,omitempty"`

	// CreatedByUser Identity of the user who created the item. Read-only.
	CreatedByUser *MicrosoftGraphListItem_CreatedByUser `json:"createdByUser,omitempty"`

	// CreatedDateTime Date and time of item creation. Read-only.
	CreatedDateTime *time.Time `json:"createdDateTime,omitempty"`

	// Description Provides a user-visible description of the item. Optional.
	Description *string `json:"description"`

	// DocumentSetVersions Version information for a document set version created by a user.
	DocumentSetVersions *[]MicrosoftGraphDocumentSetVersion `json:"documentSetVersions,omitempty"`

	// DriveItem For document libraries, the driveItem relationship exposes the listItem as a [driveItem][]
	DriveItem *MicrosoftGraphListItem_DriveItem `json:"driveItem,omitempty"`

	// ETag ETag for the item. Read-only.
	ETag *string `json:"eTag"`

	// Fields The values of the columns set on this list item.
	Fields *MicrosoftGraphListItem_Fields `json:"fields,omitempty"`

	// Id The unique idenfier for an entity. Read-only.
	Id *string `json:"id,omitempty"`

	// LastModifiedBy Identity of the user, device, and application which last modified the item. Read-only.
	LastModifiedBy *MicrosoftGraphListItem_LastModifiedBy `json:"lastModifiedBy,omitempty"`

	// LastModifiedByUser Identity of the user who last modified the item. Read-only.
	LastModifiedByUser *MicrosoftGraphListItem_LastModifiedByUser `json:"lastModifiedByUser,omitempty"`

	// LastModifiedDateTime Date and time the item was last modified. Read-only.
	LastModifiedDateTime *time.Time `json:"lastModifiedDateTime,omitempty"`

	// Name The name of the item. Read-write.
	Name *string `json:"name"`

	// ParentReference Parent information, if the item has a parent. Read-write.
	ParentReference *MicrosoftGraphListItem_ParentReference `json:"parentReference,omitempty"`

	// SharepointIds Returns identifiers useful for SharePoint REST compatibility. Read-only.
	SharepointIds *MicrosoftGraphListItem_SharepointIds `json:"sharepointIds,omitempty"`

	// Versions The list of previous versions of the list item.
	Versions *[]MicrosoftGraphListItemVersion `json:"versions,omitempty"`

	// WebUrl URL that displays the resource in the browser. Read-only.
	WebUrl *string `json:"webUrl"`
}

// MicrosoftGraphListItemAnalytics1 defines model for .
type MicrosoftGraphListItemAnalytics1 = map[string]interface{}

// MicrosoftGraphListItem_Analytics Analytics about the view activities that took place on this item.
type MicrosoftGraphListItem_Analytics struct {
	union json.RawMessage
}

// MicrosoftGraphListItemContentType1 defines model for .
type MicrosoftGraphListItemContentType1 = map[string]interface{}

// MicrosoftGraphListItem_ContentType The content type of this list item
type MicrosoftGraphListItem_ContentType struct {
	union json.RawMessage
}

// MicrosoftGraphListItemCreatedBy1 defines model for .
type MicrosoftGraphListItemCreatedBy1 = map[string]interface{}

// MicrosoftGraphListItem_CreatedBy Identity of the user, device, or application which created the item. Read-only.
type MicrosoftGraphListItem_CreatedBy struct {
	union json.RawMessage
}

// MicrosoftGraphListItemCreatedByUser1 defines model for .
type MicrosoftGraphListItemCreatedByUser1 = map[string]interface{}

// MicrosoftGraphListItem_CreatedByUser Identity of the user who created the item. Read-only.
type MicrosoftGraphListItem_CreatedByUser struct {
	union json.RawMessage
}

// MicrosoftGraphListItemDriveItem1 defines model for .
type MicrosoftGraphListItemDriveItem1 = map[string]interface{}

// MicrosoftGraphListItem_DriveItem For document libraries, the driveItem relationship exposes the listItem as a [driveItem][]
type MicrosoftGraphListItem_DriveItem struct {
	union json.RawMessage
}

// MicrosoftGraphListItemFields1 defines model for .
type MicrosoftGraphListItemFields1 = map[string]interface{}

// MicrosoftGraphListItem_Fields The values of the columns set on this list item.
type MicrosoftGraphListItem_Fields struct {
	union json.RawMessage
}

// MicrosoftGraphListItemLastModifiedBy1 defines model for .
type MicrosoftGraphListItemLastModifiedBy1 = map[string]interface{}

// MicrosoftGraphListItem_LastModifiedBy Identity of the user, device, and application which last modified the item. Read-only.
type MicrosoftGraphListItem_LastModifiedBy struct {
	union json.RawMessage
}

// MicrosoftGraphListItemLastModifiedByUser1 defines model for .
type MicrosoftGraphListItemLastModifiedByUser1 = map[string]interface{}

// MicrosoftGraphListItem_LastModifiedByUser Identity of the user who last modified the item. Read-only.
type MicrosoftGraphListItem_LastModifiedByUser struct {
	union json.RawMessage
}

// MicrosoftGraphListItemParentReference1 defines model for .
type MicrosoftGraphListItemParentReference1 = map[string]interface{}

// MicrosoftGraphListItem_ParentReference Parent information, if the item has a parent. Read-write.
type MicrosoftGraphListItem_ParentReference struct {
	union json.RawMessage
}

// MicrosoftGraphListItemSharepointIds1 defines model for .
type MicrosoftGraphListItemSharepointIds1 = map[string]interface{}

// MicrosoftGraphListItem_SharepointIds Returns identifiers useful for SharePoint REST compatibility. Read-only.
type MicrosoftGraphListItem_SharepointIds struct {
	union json.RawMessage
}

// MicrosoftGraphListItemVersion defines model for microsoft.graph.listItemVersion.
type MicrosoftGraphListItemVersion struct {
	// Fields A collection of the fields and values for this version of the list item.
	Fields *MicrosoftGraphListItemVersion_Fields `json:"fields,omitempty"`

	// Id The unique idenfier for an entity. Read-only.
	Id *string `json:"id,omitempty"`

	// LastModifiedBy Identity of the user which last modified the version. Read-only.
	LastModifiedBy *MicrosoftGraphListItemVersion_LastModifiedBy `json:"lastModifiedBy,omitempty"`

	// LastModifiedDateTime Date and time the version was last modified. Read-only.
	LastModifiedDateTime *time.Time `json:"lastModifiedDateTime"`

	// Publication Indicates the publication status of this particular version. Read-only.
	Publication *MicrosoftGraphListItemVersion_Publication `json:"publication,omitempty"`
}

// MicrosoftGraphListItemVersionFields1 defines model for .
type MicrosoftGraphListItemVersionFields1 = map[string]interface{}

// MicrosoftGraphListItemVersion_Fields A collection of the fields and values for this version of the list item.
type MicrosoftGraphListItemVersion_Fields struct {
	union json.RawMessage
}

// MicrosoftGraphListItemVersionLastModifiedBy1 defines model for .
type MicrosoftGraphListItemVersionLastModifiedBy1 = map[string]interface{}

// MicrosoftGraphListItemVersion_LastModifiedBy Identity of the user which last modified the version. Read-only.
type MicrosoftGraphListItemVersion_LastModifiedBy struct {
	union json.RawMessage
}

// MicrosoftGraphListItemVersionPublication1 defines model for .
type MicrosoftGraphListItemVersionPublication1 = map[string]interface{}

// MicrosoftGraphListItemVersion_Publication Indicates the publication status of this particular version. Read-only.
type MicrosoftGraphListItemVersion_Publication struct {
	union json.RawMessage
}

// MicrosoftGraphLobbyBypassScope defines model for microsoft.graph.lobbyBypassScope.
type MicrosoftGraphLobbyBypassScope string

// MicrosoftGraphLobbyBypassSettings defines model for microsoft.graph.lobbyBypassSettings.
type MicrosoftGraphLobbyBypassSettings struct {
	// IsDialInBypassEnabled Specifies whether or not to always let dial-in callers bypass the lobby. Optional.
	IsDialInBypassEnabled *bool `json:"isDialInBypassEnabled"`

	// Scope Specifies the type of participants that are automatically admitted into a meeting, bypassing the lobby. Optional.
	Scope *MicrosoftGraphLobbyBypassSettings_Scope `json:"scope,omitempty"`
}

// MicrosoftGraphLobbyBypassSettingsScope1 defines model for .
type MicrosoftGraphLobbyBypassSettingsScope1 = map[string]interface{}

// MicrosoftGraphLobbyBypassSettings_Scope Specifies the type of participants that are automatically admitted into a meeting, bypassing the lobby. Optional.
type MicrosoftGraphLobbyBypassSettings_Scope struct {
	union json.RawMessage
}

// MicrosoftGraphLocaleInfo defines model for microsoft.graph.localeInfo.
type MicrosoftGraphLocaleInfo struct {
	// DisplayName A name representing the user's locale in natural language, for example, 'English (United States)'.
	DisplayName *string `json:"displayName"`

	// Locale A locale representation for the user, which includes the user's preferred language and country/region. For example, 'en-us'. The language component follows 2-letter codes as defined in ISO 639-1, and the country component follows 2-letter codes as defined in ISO 3166-1 alpha-2.
	Locale *string `json:"locale"`
}

// MicrosoftGraphLocation defines model for microsoft.graph.location.
type MicrosoftGraphLocation struct {
	// Address The street address of the location.
	Address *MicrosoftGraphLocation_Address `json:"address,omitempty"`

	// Coordinates The geographic coordinates and elevation of the location.
	Coordinates *MicrosoftGraphLocation_Coordinates `json:"coordinates,omitempty"`

	// DisplayName The name associated with the location.
	DisplayName *string `json:"displayName"`

	// LocationEmailAddress Optional email address of the location.
	LocationEmailAddress *string `json:"locationEmailAddress"`

	// LocationType The type of location. The possible values are: default, conferenceRoom, homeAddress, businessAddress,geoCoordinates, streetAddress, hotel, restaurant, localBusiness, postalAddress. Read-only.
	LocationType *MicrosoftGraphLocation_LocationType `json:"locationType,omitempty"`

	// LocationUri Optional URI representing the location.
	LocationUri *string `json:"locationUri"`

	// UniqueId For internal use only.
	UniqueId *string `json:"uniqueId"`

	// UniqueIdType For internal use only.
	UniqueIdType *MicrosoftGraphLocation_UniqueIdType `json:"uniqueIdType,omitempty"`
}

// MicrosoftGraphLocationAddress1 defines model for .
type MicrosoftGraphLocationAddress1 = map[string]interface{}

// MicrosoftGraphLocation_Address The street address of the location.
type MicrosoftGraphLocation_Address struct {
	union json.RawMessage
}

// MicrosoftGraphLocationCoordinates1 defines model for .
type MicrosoftGraphLocationCoordinates1 = map[string]interface{}

// MicrosoftGraphLocation_Coordinates The geographic coordinates and elevation of the location.
type MicrosoftGraphLocation_Coordinates struct {
	union json.RawMessage
}

// MicrosoftGraphLocationLocationType1 defines model for .
type MicrosoftGraphLocationLocationType1 = map[string]interface{}

// MicrosoftGraphLocation_LocationType The type of location. The possible values are: default, conferenceRoom, homeAddress, businessAddress,geoCoordinates, streetAddress, hotel, restaurant, localBusiness, postalAddress. Read-only.
type MicrosoftGraphLocation_LocationType struct {
	union json.RawMessage
}

// MicrosoftGraphLocationUniqueIdType1 defines model for .
type MicrosoftGraphLocationUniqueIdType1 = map[string]interface{}

// MicrosoftGraphLocation_UniqueIdType For internal use only.
type MicrosoftGraphLocation_UniqueIdType struct {
	union json.RawMessage
}

// MicrosoftGraphLocationType defines model for microsoft.graph.locationType.
type MicrosoftGraphLocationType string

// MicrosoftGraphLocationUniqueIdType defines model for microsoft.graph.locationUniqueIdType.
type MicrosoftGraphLocationUniqueIdType string

// MicrosoftGraphLongRunningOperation defines model for microsoft.graph.longRunningOperation.
type MicrosoftGraphLongRunningOperation struct {
	// CreatedDateTime The start time of the operation. The Timestamp type represents date and time information using ISO 8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 is 2014-01-01T00:00:00Z.
	CreatedDateTime *time.Time `json:"createdDateTime"`

	// Id The unique idenfier for an entity. Read-only.
	Id *string `json:"id,omitempty"`

	// LastActionDateTime The time of the last action in the operation. The Timestamp type represents date and time information using ISO 8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 is 2014-01-01T00:00:00Z.
	LastActionDateTime *time.Time `json:"lastActionDateTime"`

	// ResourceLocation URI of the resource that the operation is performed on.
	ResourceLocation *string `json:"resourceLocation"`

	// Status The status of the operation. The possible values are: notStarted, running, succeeded, failed, unknownFutureValue.
	Status *MicrosoftGraphLongRunningOperation_Status `json:"status,omitempty"`

	// StatusDetail Details about the status of the operation.
	StatusDetail *string `json:"statusDetail"`
}

// MicrosoftGraphLongRunningOperationStatus1 defines model for .
type MicrosoftGraphLongRunningOperationStatus1 = map[string]interface{}

// MicrosoftGraphLongRunningOperation_Status The status of the operation. The possible values are: notStarted, running, succeeded, failed, unknownFutureValue.
type MicrosoftGraphLongRunningOperation_Status struct {
	union json.RawMessage
}

// MicrosoftGraphLongRunningOperationStatus defines model for microsoft.graph.longRunningOperationStatus.
type MicrosoftGraphLongRunningOperationStatus string

// MicrosoftGraphLookupColumn defines model for microsoft.graph.lookupColumn.
type MicrosoftGraphLookupColumn struct {
	// AllowMultipleValues Indicates whether multiple values can be selected from the source.
	AllowMultipleValues *bool `json:"allowMultipleValues"`

	// AllowUnlimitedLength Indicates whether values in the column should be able to exceed the standard limit of 255 characters.
	AllowUnlimitedLength *bool `json:"allowUnlimitedLength"`

	// ColumnName The name of the lookup source column.
	ColumnName *string `json:"columnName"`

	// ListId The unique identifier of the lookup source list.
	ListId *string `json:"listId"`

	// PrimaryLookupColumnId If specified, this column is a secondary lookup, pulling an additional field from the list item looked up by the primary lookup. Use the list item looked up by the primary as the source for the column named here.
	PrimaryLookupColumnId *string `json:"primaryLookupColumnId"`
}

// MicrosoftGraphMailFolder defines model for microsoft.graph.mailFolder.
type MicrosoftGraphMailFolder struct {
	// ChildFolderCount The number of immediate child mailFolders in the current mailFolder.
	ChildFolderCount *int32 `json:"childFolderCount"`

	// ChildFolders The collection of child folders in the mailFolder.
	ChildFolders *[]MicrosoftGraphMailFolder `json:"childFolders,omitempty"`

	// DisplayName The mailFolder's display name.
	DisplayName *string `json:"displayName"`

	// Id The unique idenfier for an entity. Read-only.
	Id *string `json:"id,omitempty"`

	// IsHidden Indicates whether the mailFolder is hidden. This property can be set only when creating the folder. Find more information in Hidden mail folders.
	IsHidden *bool `json:"isHidden"`

	// MessageRules The collection of rules that apply to the user's Inbox folder.
	MessageRules *[]MicrosoftGraphMessageRule `json:"messageRules,omitempty"`

	// Messages The collection of messages in the mailFolder.
	Messages *[]MicrosoftGraphMessage `json:"messages,omitempty"`

	// MultiValueExtendedProperties The collection of multi-value extended properties defined for the mailFolder. Read-only. Nullable.
	MultiValueExtendedProperties *[]MicrosoftGraphMultiValueLegacyExtendedProperty `json:"multiValueExtendedProperties,omitempty"`

	// ParentFolderId The unique identifier for the mailFolder's parent mailFolder.
	ParentFolderId *string `json:"parentFolderId"`

	// SingleValueExtendedProperties The collection of single-value extended properties defined for the mailFolder. Read-only. Nullable.
	SingleValueExtendedProperties *[]MicrosoftGraphSingleValueLegacyExtendedProperty `json:"singleValueExtendedProperties,omitempty"`

	// TotalItemCount The number of items in the mailFolder.
	TotalItemCount *int32 `json:"totalItemCount"`

	// UnreadItemCount The number of items in the mailFolder marked as unread.
	UnreadItemCount *int32 `json:"unreadItemCount"`
}

// MicrosoftGraphMailboxSettings defines model for microsoft.graph.mailboxSettings.
type MicrosoftGraphMailboxSettings struct {
	// ArchiveFolder Folder ID of an archive folder for the user.
	ArchiveFolder *string `json:"archiveFolder"`

	// AutomaticRepliesSetting Configuration settings to automatically notify the sender of an incoming email with a message from the signed-in user.
	AutomaticRepliesSetting *MicrosoftGraphMailboxSettings_AutomaticRepliesSetting `json:"automaticRepliesSetting,omitempty"`

	// DateFormat The date format for the user's mailbox.
	DateFormat *string `json:"dateFormat"`

	// DelegateMeetingMessageDeliveryOptions If the user has a calendar delegate, this specifies whether the delegate, mailbox owner, or both receive meeting messages and meeting responses. Possible values are: sendToDelegateAndInformationToPrincipal, sendToDelegateAndPrincipal, sendToDelegateOnly.
	DelegateMeetingMessageDeliveryOptions *MicrosoftGraphMailboxSettings_DelegateMeetingMessageDeliveryOptions `json:"delegateMeetingMessageDeliveryOptions,omitempty"`

	// Language The locale information for the user, including the preferred language and country/region.
	Language *MicrosoftGraphMailboxSettings_Language `json:"language,omitempty"`

	// TimeFormat The time format for the user's mailbox.
	TimeFormat *string `json:"timeFormat"`

	// TimeZone The default time zone for the user's mailbox.
	TimeZone *string `json:"timeZone"`

	// UserPurpose The purpose of the mailbox. Differentiates a mailbox for a single user from a shared mailbox and equipment mailbox in Exchange Online. Possible values are: user, linked, shared, room, equipment, others, unknownFutureValue. Read-only.
	UserPurpose *MicrosoftGraphMailboxSettings_UserPurpose `json:"userPurpose,omitempty"`

	// WorkingHours The days of the week and hours in a specific time zone that the user works.
	WorkingHours *MicrosoftGraphMailboxSettings_WorkingHours `json:"workingHours,omitempty"`
}

// MicrosoftGraphMailboxSettingsAutomaticRepliesSetting1 defines model for .
type MicrosoftGraphMailboxSettingsAutomaticRepliesSetting1 = map[string]interface{}

// MicrosoftGraphMailboxSettings_AutomaticRepliesSetting Configuration settings to automatically notify the sender of an incoming email with a message from the signed-in user.
type MicrosoftGraphMailboxSettings_AutomaticRepliesSetting struct {
	union json.RawMessage
}

// MicrosoftGraphMailboxSettingsDelegateMeetingMessageDeliveryOptions1 defines model for .
type MicrosoftGraphMailboxSettingsDelegateMeetingMessageDeliveryOptions1 = map[string]interface{}

// MicrosoftGraphMailboxSettings_DelegateMeetingMessageDeliveryOptions If the user has a calendar delegate, this specifies whether the delegate, mailbox owner, or both receive meeting messages and meeting responses. Possible values are: sendToDelegateAndInformationToPrincipal, sendToDelegateAndPrincipal, sendToDelegateOnly.
type MicrosoftGraphMailboxSettings_DelegateMeetingMessageDeliveryOptions struct {
	union json.RawMessage
}

// MicrosoftGraphMailboxSettingsLanguage1 defines model for .
type MicrosoftGraphMailboxSettingsLanguage1 = map[string]interface{}

// MicrosoftGraphMailboxSettings_Language The locale information for the user, including the preferred language and country/region.
type MicrosoftGraphMailboxSettings_Language struct {
	union json.RawMessage
}

// MicrosoftGraphMailboxSettingsUserPurpose1 defines model for .
type MicrosoftGraphMailboxSettingsUserPurpose1 = map[string]interface{}

// MicrosoftGraphMailboxSettings_UserPurpose The purpose of the mailbox. Differentiates a mailbox for a single user from a shared mailbox and equipment mailbox in Exchange Online. Possible values are: user, linked, shared, room, equipment, others, unknownFutureValue. Read-only.
type MicrosoftGraphMailboxSettings_UserPurpose struct {
	union json.RawMessage
}

// MicrosoftGraphMailboxSettingsWorkingHours1 defines model for .
type MicrosoftGraphMailboxSettingsWorkingHours1 = map[string]interface{}

// MicrosoftGraphMailboxSettings_WorkingHours The days of the week and hours in a specific time zone that the user works.
type MicrosoftGraphMailboxSettings_WorkingHours struct {
	union json.RawMessage
}

// MicrosoftGraphMalware defines model for microsoft.graph.malware.
type MicrosoftGraphMalware struct {
	// Description Contains the virus details for the malware facet.
	Description *string `json:"description"`
}

// MicrosoftGraphManagedAppFlaggedReason The reason for which a user has been flagged
type MicrosoftGraphManagedAppFlaggedReason string

// MicrosoftGraphManagedAppOperation defines model for microsoft.graph.managedAppOperation.
type MicrosoftGraphManagedAppOperation struct {
	// DisplayName The operation name.
	DisplayName *string `json:"displayName"`

	// Id The unique idenfier for an entity. Read-only.
	Id *string `json:"id,omitempty"`

	// LastModifiedDateTime The last time the app operation was modified.
	LastModifiedDateTime *time.Time `json:"lastModifiedDateTime,omitempty"`

	// State The current state of the operation
	State *string `json:"state"`

	// Version Version of the entity.
	Version *string `json:"version"`
}

// MicrosoftGraphManagedAppPolicy defines model for microsoft.graph.managedAppPolicy.
type MicrosoftGraphManagedAppPolicy struct {
	// CreatedDateTime The date and time the policy was created.
	CreatedDateTime *time.Time `json:"createdDateTime,omitempty"`

	// Description The policy's description.
	Description *string `json:"description"`

	// DisplayName Policy display name.
	DisplayName *string `json:"displayName,omitempty"`

	// Id The unique idenfier for an entity. Read-only.
	Id *string `json:"id,omitempty"`

	// LastModifiedDateTime Last time the policy was modified.
	LastModifiedDateTime *time.Time `json:"lastModifiedDateTime,omitempty"`

	// Version Version of the entity.
	Version *string `json:"version"`
}

// MicrosoftGraphManagedAppRegistration defines model for microsoft.graph.managedAppRegistration.
type MicrosoftGraphManagedAppRegistration struct {
	// AppIdentifier The app package Identifier
	AppIdentifier *MicrosoftGraphManagedAppRegistration_AppIdentifier `json:"appIdentifier,omitempty"`

	// ApplicationVersion App version
	ApplicationVersion *string `json:"applicationVersion"`

	// AppliedPolicies Zero or more policys already applied on the registered app when it last synchronized with managment service.
	AppliedPolicies *[]MicrosoftGraphManagedAppPolicy `json:"appliedPolicies,omitempty"`

	// CreatedDateTime Date and time of creation
	CreatedDateTime *time.Time `json:"createdDateTime,omitempty"`

	// DeviceName Host device name
	DeviceName *string `json:"deviceName"`

	// DeviceTag App management SDK generated tag, which helps relate apps hosted on the same device. Not guaranteed to relate apps in all conditions.
	DeviceTag *string `json:"deviceTag"`

	// DeviceType Host device type
	DeviceType *string `json:"deviceType"`

	// FlaggedReasons Zero or more reasons an app registration is flagged. E.g. app running on rooted device
	FlaggedReasons *[]MicrosoftGraphManagedAppFlaggedReason `json:"flaggedReasons,omitempty"`

	// Id The unique idenfier for an entity. Read-only.
	Id *string `json:"id,omitempty"`

	// IntendedPolicies Zero or more policies admin intended for the app as of now.
	IntendedPolicies *[]MicrosoftGraphManagedAppPolicy `json:"intendedPolicies,omitempty"`

	// LastSyncDateTime Date and time of last the app synced with management service.
	LastSyncDateTime *time.Time `json:"lastSyncDateTime,omitempty"`

	// ManagementSdkVersion App management SDK version
	ManagementSdkVersion *string `json:"managementSdkVersion"`

	// Operations Zero or more long running operations triggered on the app registration.
	Operations *[]MicrosoftGraphManagedAppOperation `json:"operations,omitempty"`

	// PlatformVersion Operating System version
	PlatformVersion *string `json:"platformVersion"`

	// UserId The user Id to who this app registration belongs.
	UserId *string `json:"userId"`

	// Version Version of the entity.
	Version *string `json:"version"`
}

// MicrosoftGraphManagedAppRegistrationAppIdentifier1 defines model for .
type MicrosoftGraphManagedAppRegistrationAppIdentifier1 = map[string]interface{}

// MicrosoftGraphManagedAppRegistration_AppIdentifier The app package Identifier
type MicrosoftGraphManagedAppRegistration_AppIdentifier struct {
	union json.RawMessage
}

// MicrosoftGraphManagedDevice defines model for microsoft.graph.managedDevice.
type MicrosoftGraphManagedDevice struct {
	// ActivationLockBypassCode The code that allows the Activation Lock on managed device to be bypassed. Default, is Null (Non-Default property) for this property when returned as part of managedDevice entity in LIST call. To retrieve actual values GET call needs to be made, with device id and included in select parameter. Supports: $select. $Search is not supported. Read-only. This property is read-only.
	ActivationLockBypassCode *string `json:"activationLockBypassCode"`

	// AndroidSecurityPatchLevel Android security patch level. This property is read-only.
	AndroidSecurityPatchLevel *string `json:"androidSecurityPatchLevel"`

	// AzureADDeviceId The unique identifier for the Azure Active Directory device. Read only. This property is read-only.
	AzureADDeviceId *string `json:"azureADDeviceId"`

	// AzureADRegistered Whether the device is Azure Active Directory registered. This property is read-only.
	AzureADRegistered *bool `json:"azureADRegistered"`

	// ComplianceGracePeriodExpirationDateTime The DateTime when device compliance grace period expires. This property is read-only.
	ComplianceGracePeriodExpirationDateTime *time.Time `json:"complianceGracePeriodExpirationDateTime,omitempty"`

	// ComplianceState Compliance state.
	ComplianceState *MicrosoftGraphComplianceState `json:"complianceState,omitempty"`

	// ConfigurationManagerClientEnabledFeatures ConfigrMgr client enabled features. This property is read-only.
	ConfigurationManagerClientEnabledFeatures *MicrosoftGraphManagedDevice_ConfigurationManagerClientEnabledFeatures `json:"configurationManagerClientEnabledFeatures,omitempty"`

	// DeviceActionResults List of ComplexType deviceActionResult objects. This property is read-only.
	DeviceActionResults *[]MicrosoftGraphManagedDevice_DeviceActionResults_Item `json:"deviceActionResults,omitempty"`

	// DeviceCategory Device category
	DeviceCategory *MicrosoftGraphManagedDevice_DeviceCategory `json:"deviceCategory,omitempty"`

	// DeviceCategoryDisplayName Device category display name. Default is an empty string. Supports $filter operator 'eq' and 'or'. This property is read-only.
	DeviceCategoryDisplayName *string `json:"deviceCategoryDisplayName"`

	// DeviceCompliancePolicyStates Device compliance policy states for this device.
	DeviceCompliancePolicyStates *[]MicrosoftGraphDeviceCompliancePolicyState `json:"deviceCompliancePolicyStates,omitempty"`

	// DeviceConfigurationStates Device configuration states for this device.
	DeviceConfigurationStates *[]MicrosoftGraphDeviceConfigurationState `json:"deviceConfigurationStates,omitempty"`

	// DeviceEnrollmentType Possible ways of adding a mobile device to management.
	DeviceEnrollmentType *MicrosoftGraphDeviceEnrollmentType `json:"deviceEnrollmentType,omitempty"`

	// DeviceHealthAttestationState The device health attestation state. This property is read-only.
	DeviceHealthAttestationState *MicrosoftGraphManagedDevice_DeviceHealthAttestationState `json:"deviceHealthAttestationState,omitempty"`

	// DeviceName Name of the device. This property is read-only.
	DeviceName *string `json:"deviceName"`

	// DeviceRegistrationState Device registration status.
	DeviceRegistrationState *MicrosoftGraphDeviceRegistrationState `json:"deviceRegistrationState,omitempty"`

	// EasActivated Whether the device is Exchange ActiveSync activated. This property is read-only.
	EasActivated *bool `json:"easActivated,omitempty"`

	// EasActivationDateTime Exchange ActivationSync activation time of the device. This property is read-only.
	EasActivationDateTime *time.Time `json:"easActivationDateTime,omitempty"`

	// EasDeviceId Exchange ActiveSync Id of the device. This property is read-only.
	EasDeviceId *string `json:"easDeviceId"`

	// EmailAddress Email(s) for the user associated with the device. This property is read-only.
	EmailAddress *string `json:"emailAddress"`

	// EnrolledDateTime Enrollment time of the device. Supports $filter operator 'lt' and 'gt'. This property is read-only.
	EnrolledDateTime *time.Time `json:"enrolledDateTime,omitempty"`

	// EthernetMacAddress Indicates Ethernet MAC Address of the device. Default, is Null (Non-Default property) for this property when returned as part of managedDevice entity. Individual get call with select query options is needed to retrieve actual values. Example: deviceManagement/managedDevices({managedDeviceId})?$select=ethernetMacAddress Supports: $select. $Search is not supported. Read-only. This property is read-only.
	EthernetMacAddress *string `json:"ethernetMacAddress"`

	// ExchangeAccessState Device Exchange Access State.
	ExchangeAccessState *MicrosoftGraphDeviceManagementExchangeAccessState `json:"exchangeAccessState,omitempty"`

	// ExchangeAccessStateReason Device Exchange Access State Reason.
	ExchangeAccessStateReason *MicrosoftGraphDeviceManagementExchangeAccessStateReason `json:"exchangeAccessStateReason,omitempty"`

	// ExchangeLastSuccessfulSyncDateTime Last time the device contacted Exchange. This property is read-only.
	ExchangeLastSuccessfulSyncDateTime *time.Time `json:"exchangeLastSuccessfulSyncDateTime,omitempty"`

	// FreeStorageSpaceInBytes Free Storage in Bytes. Default value is 0. Read-only. This property is read-only.
	FreeStorageSpaceInBytes *int64 `json:"freeStorageSpaceInBytes,omitempty"`

	// Iccid Integrated Circuit Card Identifier, it is A SIM card's unique identification number. Default is an empty string. To retrieve actual values GET call needs to be made, with device id and included in select parameter. Supports: $select. $Search is not supported. Read-only. This property is read-only.
	Iccid *string `json:"iccid"`

	// Id The unique idenfier for an entity. Read-only.
	Id *string `json:"id,omitempty"`

	// Imei IMEI. This property is read-only.
	Imei *string `json:"imei"`

	// IsEncrypted Device encryption status. This property is read-only.
	IsEncrypted *bool `json:"isEncrypted,omitempty"`

	// IsSupervised Device supervised status. This property is read-only.
	IsSupervised *bool `json:"isSupervised,omitempty"`

	// JailBroken Whether the device is jail broken or rooted. Default is an empty string. Supports $filter operator 'eq' and 'or'. This property is read-only.
	JailBroken *string `json:"jailBroken"`

	// LastSyncDateTime The date and time that the device last completed a successful sync with Intune. Supports $filter operator 'lt' and 'gt'. This property is read-only.
	LastSyncDateTime *time.Time `json:"lastSyncDateTime,omitempty"`

	// LogCollectionRequests List of log collection requests
	LogCollectionRequests *[]MicrosoftGraphDeviceLogCollectionResponse `json:"logCollectionRequests,omitempty"`

	// ManagedDeviceName Automatically generated name to identify a device. Can be overwritten to a user friendly name.
	ManagedDeviceName *string `json:"managedDeviceName"`

	// ManagedDeviceOwnerType Owner type of device.
	ManagedDeviceOwnerType *MicrosoftGraphManagedDeviceOwnerType `json:"managedDeviceOwnerType,omitempty"`
	ManagementAgent        *MicrosoftGraphManagementAgentType    `json:"managementAgent,omitempty"`

	// ManagementCertificateExpirationDate Reports device management certificate expiration date. This property is read-only.
	ManagementCertificateExpirationDate *time.Time `json:"managementCertificateExpirationDate,omitempty"`

	// Manufacturer Manufacturer of the device. This property is read-only.
	Manufacturer *string `json:"manufacturer"`

	// Meid MEID. This property is read-only.
	Meid *string `json:"meid"`

	// Model Model of the device. This property is read-only.
	Model *string `json:"model"`

	// Notes Notes on the device created by IT Admin. Default is null. To retrieve actual values GET call needs to be made, with device id and included in select parameter. Supports: $select. $Search is not supported.
	Notes *string `json:"notes"`

	// OperatingSystem Operating system of the device. Windows, iOS, etc. This property is read-only.
	OperatingSystem *string `json:"operatingSystem"`

	// OsVersion Operating system version of the device. This property is read-only.
	OsVersion *string `json:"osVersion"`

	// PartnerReportedThreatState Available health states for the Device Health API
	PartnerReportedThreatState *MicrosoftGraphManagedDevicePartnerReportedHealthState `json:"partnerReportedThreatState,omitempty"`

	// PhoneNumber Phone number of the device. This property is read-only.
	PhoneNumber *string `json:"phoneNumber"`

	// PhysicalMemoryInBytes Total Memory in Bytes. Default is 0. To retrieve actual values GET call needs to be made, with device id and included in select parameter. Supports: $select. Read-only. This property is read-only.
	PhysicalMemoryInBytes *int64 `json:"physicalMemoryInBytes,omitempty"`

	// RemoteAssistanceSessionErrorDetails An error string that identifies issues when creating Remote Assistance session objects. This property is read-only.
	RemoteAssistanceSessionErrorDetails *string `json:"remoteAssistanceSessionErrorDetails"`

	// RemoteAssistanceSessionUrl Url that allows a Remote Assistance session to be established with the device. Default is an empty string. To retrieve actual values GET call needs to be made, with device id and included in select parameter. This property is read-only.
	RemoteAssistanceSessionUrl *string `json:"remoteAssistanceSessionUrl"`

	// RequireUserEnrollmentApproval Reports if the managed iOS device is user approval enrollment. This property is read-only.
	RequireUserEnrollmentApproval *bool `json:"requireUserEnrollmentApproval"`

	// SerialNumber SerialNumber. This property is read-only.
	SerialNumber *string `json:"serialNumber"`

	// SubscriberCarrier Subscriber Carrier. This property is read-only.
	SubscriberCarrier *string `json:"subscriberCarrier"`

	// TotalStorageSpaceInBytes Total Storage in Bytes. This property is read-only.
	TotalStorageSpaceInBytes *int64 `json:"totalStorageSpaceInBytes,omitempty"`

	// Udid Unique Device Identifier for iOS and macOS devices. Default is an empty string. To retrieve actual values GET call needs to be made, with device id and included in select parameter. Supports: $select. $Search is not supported. Read-only. This property is read-only.
	Udid *string `json:"udid"`

	// UserDisplayName User display name. This property is read-only.
	UserDisplayName *string `json:"userDisplayName"`

	// UserId Unique Identifier for the user associated with the device. This property is read-only.
	UserId *string `json:"userId"`

	// UserPrincipalName Device user principal name. This property is read-only.
	UserPrincipalName *string `json:"userPrincipalName"`

	// Users The primary users associated with the managed device.
	Users *[]MicrosoftGraphUser `json:"users,omitempty"`

	// WiFiMacAddress Wi-Fi MAC. This property is read-only.
	WiFiMacAddress *string `json:"wiFiMacAddress"`

	// WindowsProtectionState The device protection status. This property is read-only.
	WindowsProtectionState *MicrosoftGraphManagedDevice_WindowsProtectionState `json:"windowsProtectionState,omitempty"`
}

// MicrosoftGraphManagedDeviceConfigurationManagerClientEnabledFeatures1 defines model for .
type MicrosoftGraphManagedDeviceConfigurationManagerClientEnabledFeatures1 = map[string]interface{}

// MicrosoftGraphManagedDevice_ConfigurationManagerClientEnabledFeatures ConfigrMgr client enabled features. This property is read-only.
type MicrosoftGraphManagedDevice_ConfigurationManagerClientEnabledFeatures struct {
	union json.RawMessage
}

// MicrosoftGraphManagedDeviceDeviceActionResults1 defines model for .
type MicrosoftGraphManagedDeviceDeviceActionResults1 = map[string]interface{}

// MicrosoftGraphManagedDevice_DeviceActionResults_Item defines model for microsoft.graph.managedDevice.deviceActionResults.Item.
type MicrosoftGraphManagedDevice_DeviceActionResults_Item struct {
	union json.RawMessage
}

// MicrosoftGraphManagedDeviceDeviceCategory1 defines model for .
type MicrosoftGraphManagedDeviceDeviceCategory1 = map[string]interface{}

// MicrosoftGraphManagedDevice_DeviceCategory Device category
type MicrosoftGraphManagedDevice_DeviceCategory struct {
	union json.RawMessage
}

// MicrosoftGraphManagedDeviceDeviceHealthAttestationState1 defines model for .
type MicrosoftGraphManagedDeviceDeviceHealthAttestationState1 = map[string]interface{}

// MicrosoftGraphManagedDevice_DeviceHealthAttestationState The device health attestation state. This property is read-only.
type MicrosoftGraphManagedDevice_DeviceHealthAttestationState struct {
	union json.RawMessage
}

// MicrosoftGraphManagedDeviceWindowsProtectionState1 defines model for .
type MicrosoftGraphManagedDeviceWindowsProtectionState1 = map[string]interface{}

// MicrosoftGraphManagedDevice_WindowsProtectionState The device protection status. This property is read-only.
type MicrosoftGraphManagedDevice_WindowsProtectionState struct {
	union json.RawMessage
}

// MicrosoftGraphManagedDeviceOwnerType Owner type of device.
type MicrosoftGraphManagedDeviceOwnerType string

// MicrosoftGraphManagedDevicePartnerReportedHealthState Available health states for the Device Health API
type MicrosoftGraphManagedDevicePartnerReportedHealthState string

// MicrosoftGraphManagementAgentType defines model for microsoft.graph.managementAgentType.
type MicrosoftGraphManagementAgentType string

// MicrosoftGraphMeetingAttendanceReport defines model for microsoft.graph.meetingAttendanceReport.
type MicrosoftGraphMeetingAttendanceReport struct {
	// AttendanceRecords List of attendance records of an attendance report. Read-only.
	AttendanceRecords *[]MicrosoftGraphAttendanceRecord `json:"attendanceRecords,omitempty"`

	// Id The unique idenfier for an entity. Read-only.
	Id *string `json:"id,omitempty"`

	// MeetingEndDateTime UTC time when the meeting ended. Read-only.
	MeetingEndDateTime *time.Time `json:"meetingEndDateTime"`

	// MeetingStartDateTime UTC time when the meeting started. Read-only.
	MeetingStartDateTime *time.Time `json:"meetingStartDateTime"`

	// TotalParticipantCount Total number of participants. Read-only.
	TotalParticipantCount *int32 `json:"totalParticipantCount"`
}

// MicrosoftGraphMeetingChatHistoryDefaultMode defines model for microsoft.graph.meetingChatHistoryDefaultMode.
type MicrosoftGraphMeetingChatHistoryDefaultMode string

// MicrosoftGraphMeetingChatMode defines model for microsoft.graph.meetingChatMode.
type MicrosoftGraphMeetingChatMode string

// MicrosoftGraphMeetingParticipantInfo defines model for microsoft.graph.meetingParticipantInfo.
type MicrosoftGraphMeetingParticipantInfo struct {
	// Identity Identity information of the participant.
	Identity *MicrosoftGraphMeetingParticipantInfo_Identity `json:"identity,omitempty"`

	// Role Specifies the participant's role in the meeting.
	Role *MicrosoftGraphMeetingParticipantInfo_Role `json:"role,omitempty"`

	// Upn User principal name of the participant.
	Upn *string `json:"upn"`
}

// MicrosoftGraphMeetingParticipantInfoIdentity1 defines model for .
type MicrosoftGraphMeetingParticipantInfoIdentity1 = map[string]interface{}

// MicrosoftGraphMeetingParticipantInfo_Identity Identity information of the participant.
type MicrosoftGraphMeetingParticipantInfo_Identity struct {
	union json.RawMessage
}

// MicrosoftGraphMeetingParticipantInfoRole1 defines model for .
type MicrosoftGraphMeetingParticipantInfoRole1 = map[string]interface{}

// MicrosoftGraphMeetingParticipantInfo_Role Specifies the participant's role in the meeting.
type MicrosoftGraphMeetingParticipantInfo_Role struct {
	union json.RawMessage
}

// MicrosoftGraphMeetingParticipants defines model for microsoft.graph.meetingParticipants.
type MicrosoftGraphMeetingParticipants struct {
	Attendees *[]MicrosoftGraphMeetingParticipants_Attendees_Item `json:"attendees,omitempty"`
	Organizer *MicrosoftGraphMeetingParticipants_Organizer        `json:"organizer,omitempty"`
}

// MicrosoftGraphMeetingParticipantsAttendees1 defines model for .
type MicrosoftGraphMeetingParticipantsAttendees1 = map[string]interface{}

// MicrosoftGraphMeetingParticipants_Attendees_Item defines model for microsoft.graph.meetingParticipants.attendees.Item.
type MicrosoftGraphMeetingParticipants_Attendees_Item struct {
	union json.RawMessage
}

// MicrosoftGraphMeetingParticipantsOrganizer1 defines model for .
type MicrosoftGraphMeetingParticipantsOrganizer1 = map[string]interface{}

// MicrosoftGraphMeetingParticipants_Organizer defines model for MicrosoftGraphMeetingParticipants.Organizer.
type MicrosoftGraphMeetingParticipants_Organizer struct {
	union json.RawMessage
}

// MicrosoftGraphMessage defines model for microsoft.graph.message.
type MicrosoftGraphMessage struct {
	// Attachments The fileAttachment and itemAttachment attachments for the message.
	Attachments *[]MicrosoftGraphAttachment `json:"attachments,omitempty"`

	// BccRecipients The Bcc: recipients for the message.
	BccRecipients *[]MicrosoftGraphMessage_BccRecipients_Item `json:"bccRecipients,omitempty"`

	// Body The body of the message. It can be in HTML or text format. Find out about safe HTML in a message body.
	Body *MicrosoftGraphMessage_Body `json:"body,omitempty"`

	// BodyPreview The first 255 characters of the message body. It is in text format.
	BodyPreview *string `json:"bodyPreview"`

	// Categories The categories associated with the item
	Categories *[]string `json:"categories,omitempty"`

	// CcRecipients The Cc: recipients for the message.
	CcRecipients *[]MicrosoftGraphMessage_CcRecipients_Item `json:"ccRecipients,omitempty"`

	// ChangeKey Identifies the version of the item. Every time the item is changed, changeKey changes as well. This allows Exchange to apply changes to the correct version of the object. Read-only.
	ChangeKey *string `json:"changeKey"`

	// ConversationId The ID of the conversation the email belongs to.
	ConversationId *string `json:"conversationId"`

	// ConversationIndex Indicates the position of the message within the conversation.
	ConversationIndex *string `json:"conversationIndex"`

	// CreatedDateTime The Timestamp type represents date and time information using ISO 8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 is 2014-01-01T00:00:00Z
	CreatedDateTime *time.Time `json:"createdDateTime"`

	// Extensions The collection of open extensions defined for the message. Nullable.
	Extensions *[]MicrosoftGraphExtension `json:"extensions,omitempty"`

	// Flag The flag value that indicates the status, start date, due date, or completion date for the message.
	Flag *MicrosoftGraphMessage_Flag `json:"flag,omitempty"`

	// From The owner of the mailbox from which the message is sent. In most cases, this value is the same as the sender property, except for sharing or delegation scenarios. The value must correspond to the actual mailbox used. Find out more about setting the from and sender properties of a message.
	From *MicrosoftGraphMessage_From `json:"from,omitempty"`

	// HasAttachments Indicates whether the message has attachments. This property doesn't include inline attachments, so if a message contains only inline attachments, this property is false. To verify the existence of inline attachments, parse the body property to look for a src attribute, such as <IMG src='cid:image001.jpg@01D26CD8.6C05F070'>.
	HasAttachments *bool `json:"hasAttachments"`

	// Id The unique idenfier for an entity. Read-only.
	Id                         *string                                              `json:"id,omitempty"`
	Importance                 *MicrosoftGraphMessage_Importance                    `json:"importance,omitempty"`
	InferenceClassification    *MicrosoftGraphMessage_InferenceClassification       `json:"inferenceClassification,omitempty"`
	InternetMessageHeaders     *[]MicrosoftGraphMessage_InternetMessageHeaders_Item `json:"internetMessageHeaders,omitempty"`
	InternetMessageId          *string                                              `json:"internetMessageId"`
	IsDeliveryReceiptRequested *bool                                                `json:"isDeliveryReceiptRequested"`
	IsDraft                    *bool                                                `json:"isDraft"`
	IsRead                     *bool                                                `json:"isRead"`
	IsReadReceiptRequested     *bool                                                `json:"isReadReceiptRequested"`

	// LastModifiedDateTime The Timestamp type represents date and time information using ISO 8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 is 2014-01-01T00:00:00Z
	LastModifiedDateTime *time.Time `json:"lastModifiedDateTime"`

	// MultiValueExtendedProperties The collection of multi-value extended properties defined for the message. Nullable.
	MultiValueExtendedProperties *[]MicrosoftGraphMultiValueLegacyExtendedProperty `json:"multiValueExtendedProperties,omitempty"`
	ParentFolderId               *string                                           `json:"parentFolderId"`
	ReceivedDateTime             *time.Time                                        `json:"receivedDateTime"`
	ReplyTo                      *[]MicrosoftGraphMessage_ReplyTo_Item             `json:"replyTo,omitempty"`
	Sender                       *MicrosoftGraphMessage_Sender                     `json:"sender,omitempty"`
	SentDateTime                 *time.Time                                        `json:"sentDateTime"`

	// SingleValueExtendedProperties The collection of single-value extended properties defined for the message. Nullable.
	SingleValueExtendedProperties *[]MicrosoftGraphSingleValueLegacyExtendedProperty `json:"singleValueExtendedProperties,omitempty"`
	Subject                       *string                                            `json:"subject"`
	ToRecipients                  *[]MicrosoftGraphMessage_ToRecipients_Item         `json:"toRecipients,omitempty"`
	UniqueBody                    *MicrosoftGraphMessage_UniqueBody                  `json:"uniqueBody,omitempty"`
	WebLink                       *string                                            `json:"webLink"`
}

// MicrosoftGraphMessageBccRecipients1 defines model for .
type MicrosoftGraphMessageBccRecipients1 = map[string]interface{}

// MicrosoftGraphMessage_BccRecipients_Item defines model for microsoft.graph.message.bccRecipients.Item.
type MicrosoftGraphMessage_BccRecipients_Item struct {
	union json.RawMessage
}

// MicrosoftGraphMessageBody1 defines model for .
type MicrosoftGraphMessageBody1 = map[string]interface{}

// MicrosoftGraphMessage_Body The body of the message. It can be in HTML or text format. Find out about safe HTML in a message body.
type MicrosoftGraphMessage_Body struct {
	union json.RawMessage
}

// MicrosoftGraphMessageCcRecipients1 defines model for .
type MicrosoftGraphMessageCcRecipients1 = map[string]interface{}

// MicrosoftGraphMessage_CcRecipients_Item defines model for microsoft.graph.message.ccRecipients.Item.
type MicrosoftGraphMessage_CcRecipients_Item struct {
	union json.RawMessage
}

// MicrosoftGraphMessageFlag1 defines model for .
type MicrosoftGraphMessageFlag1 = map[string]interface{}

// MicrosoftGraphMessage_Flag The flag value that indicates the status, start date, due date, or completion date for the message.
type MicrosoftGraphMessage_Flag struct {
	union json.RawMessage
}

// MicrosoftGraphMessageFrom1 defines model for .
type MicrosoftGraphMessageFrom1 = map[string]interface{}

// MicrosoftGraphMessage_From The owner of the mailbox from which the message is sent. In most cases, this value is the same as the sender property, except for sharing or delegation scenarios. The value must correspond to the actual mailbox used. Find out more about setting the from and sender properties of a message.
type MicrosoftGraphMessage_From struct {
	union json.RawMessage
}

// MicrosoftGraphMessageImportance1 defines model for .
type MicrosoftGraphMessageImportance1 = map[string]interface{}

// MicrosoftGraphMessage_Importance defines model for MicrosoftGraphMessage.Importance.
type MicrosoftGraphMessage_Importance struct {
	union json.RawMessage
}

// MicrosoftGraphMessageInferenceClassification1 defines model for .
type MicrosoftGraphMessageInferenceClassification1 = map[string]interface{}

// MicrosoftGraphMessage_InferenceClassification defines model for MicrosoftGraphMessage.InferenceClassification.
type MicrosoftGraphMessage_InferenceClassification struct {
	union json.RawMessage
}

// MicrosoftGraphMessageInternetMessageHeaders1 defines model for .
type MicrosoftGraphMessageInternetMessageHeaders1 = map[string]interface{}

// MicrosoftGraphMessage_InternetMessageHeaders_Item defines model for microsoft.graph.message.internetMessageHeaders.Item.
type MicrosoftGraphMessage_InternetMessageHeaders_Item struct {
	union json.RawMessage
}

// MicrosoftGraphMessageReplyTo1 defines model for .
type MicrosoftGraphMessageReplyTo1 = map[string]interface{}

// MicrosoftGraphMessage_ReplyTo_Item defines model for microsoft.graph.message.replyTo.Item.
type MicrosoftGraphMessage_ReplyTo_Item struct {
	union json.RawMessage
}

// MicrosoftGraphMessageSender1 defines model for .
type MicrosoftGraphMessageSender1 = map[string]interface{}

// MicrosoftGraphMessage_Sender defines model for MicrosoftGraphMessage.Sender.
type MicrosoftGraphMessage_Sender struct {
	union json.RawMessage
}

// MicrosoftGraphMessageToRecipients1 defines model for .
type MicrosoftGraphMessageToRecipients1 = map[string]interface{}

// MicrosoftGraphMessage_ToRecipients_Item defines model for microsoft.graph.message.toRecipients.Item.
type MicrosoftGraphMessage_ToRecipients_Item struct {
	union json.RawMessage
}

// MicrosoftGraphMessageUniqueBody1 defines model for .
type MicrosoftGraphMessageUniqueBody1 = map[string]interface{}

// MicrosoftGraphMessage_UniqueBody defines model for MicrosoftGraphMessage.UniqueBody.
type MicrosoftGraphMessage_UniqueBody struct {
	union json.RawMessage
}

// MicrosoftGraphMessageActionFlag defines model for microsoft.graph.messageActionFlag.
type MicrosoftGraphMessageActionFlag string

// MicrosoftGraphMessageRule defines model for microsoft.graph.messageRule.
type MicrosoftGraphMessageRule struct {
	// Actions Actions to be taken on a message when the corresponding conditions are fulfilled.
	Actions *MicrosoftGraphMessageRule_Actions `json:"actions,omitempty"`

	// Conditions Conditions that when fulfilled, will trigger the corresponding actions for that rule.
	Conditions *MicrosoftGraphMessageRule_Conditions `json:"conditions,omitempty"`

	// DisplayName The display name of the rule.
	DisplayName *string `json:"displayName"`

	// Exceptions Exception conditions for the rule.
	Exceptions *MicrosoftGraphMessageRule_Exceptions `json:"exceptions,omitempty"`

	// HasError Indicates whether the rule is in an error condition. Read-only.
	HasError *bool `json:"hasError"`

	// Id The unique idenfier for an entity. Read-only.
	Id *string `json:"id,omitempty"`

	// IsEnabled Indicates whether the rule is enabled to be applied to messages.
	IsEnabled *bool `json:"isEnabled"`

	// IsReadOnly Indicates if the rule is read-only and cannot be modified or deleted by the rules REST API.
	IsReadOnly *bool `json:"isReadOnly"`

	// Sequence Indicates the order in which the rule is executed, among other rules.
	Sequence *int32 `json:"sequence"`
}

// MicrosoftGraphMessageRuleActions1 defines model for .
type MicrosoftGraphMessageRuleActions1 = map[string]interface{}

// MicrosoftGraphMessageRule_Actions Actions to be taken on a message when the corresponding conditions are fulfilled.
type MicrosoftGraphMessageRule_Actions struct {
	union json.RawMessage
}

// MicrosoftGraphMessageRuleConditions1 defines model for .
type MicrosoftGraphMessageRuleConditions1 = map[string]interface{}

// MicrosoftGraphMessageRule_Conditions Conditions that when fulfilled, will trigger the corresponding actions for that rule.
type MicrosoftGraphMessageRule_Conditions struct {
	union json.RawMessage
}

// MicrosoftGraphMessageRuleExceptions1 defines model for .
type MicrosoftGraphMessageRuleExceptions1 = map[string]interface{}

// MicrosoftGraphMessageRule_Exceptions Exception conditions for the rule.
type MicrosoftGraphMessageRule_Exceptions struct {
	union json.RawMessage
}

// MicrosoftGraphMessageRuleActions defines model for microsoft.graph.messageRuleActions.
type MicrosoftGraphMessageRuleActions struct {
	// AssignCategories A list of categories to be assigned to a message.
	AssignCategories *[]string `json:"assignCategories,omitempty"`

	// CopyToFolder The ID of a folder that a message is to be copied to.
	CopyToFolder *string `json:"copyToFolder"`

	// Delete Indicates whether a message should be moved to the Deleted Items folder.
	Delete *bool `json:"delete"`

	// ForwardAsAttachmentTo The email addresses of the recipients to which a message should be forwarded as an attachment.
	ForwardAsAttachmentTo *[]MicrosoftGraphMessageRuleActions_ForwardAsAttachmentTo_Item `json:"forwardAsAttachmentTo,omitempty"`

	// ForwardTo The email addresses of the recipients to which a message should be forwarded.
	ForwardTo *[]MicrosoftGraphMessageRuleActions_ForwardTo_Item `json:"forwardTo,omitempty"`

	// MarkAsRead Indicates whether a message should be marked as read.
	MarkAsRead *bool `json:"markAsRead"`

	// MarkImportance Sets the importance of the message, which can be: low, normal, high.
	MarkImportance *MicrosoftGraphMessageRuleActions_MarkImportance `json:"markImportance,omitempty"`

	// MoveToFolder The ID of the folder that a message will be moved to.
	MoveToFolder *string `json:"moveToFolder"`

	// PermanentDelete Indicates whether a message should be permanently deleted and not saved to the Deleted Items folder.
	PermanentDelete *bool `json:"permanentDelete"`

	// RedirectTo The email addresses to which a message should be redirected.
	RedirectTo *[]MicrosoftGraphMessageRuleActions_RedirectTo_Item `json:"redirectTo,omitempty"`

	// StopProcessingRules Indicates whether subsequent rules should be evaluated.
	StopProcessingRules *bool `json:"stopProcessingRules"`
}

// MicrosoftGraphMessageRuleActionsForwardAsAttachmentTo1 defines model for .
type MicrosoftGraphMessageRuleActionsForwardAsAttachmentTo1 = map[string]interface{}

// MicrosoftGraphMessageRuleActions_ForwardAsAttachmentTo_Item defines model for microsoft.graph.messageRuleActions.forwardAsAttachmentTo.Item.
type MicrosoftGraphMessageRuleActions_ForwardAsAttachmentTo_Item struct {
	union json.RawMessage
}

// MicrosoftGraphMessageRuleActionsForwardTo1 defines model for .
type MicrosoftGraphMessageRuleActionsForwardTo1 = map[string]interface{}

// MicrosoftGraphMessageRuleActions_ForwardTo_Item defines model for microsoft.graph.messageRuleActions.forwardTo.Item.
type MicrosoftGraphMessageRuleActions_ForwardTo_Item struct {
	union json.RawMessage
}

// MicrosoftGraphMessageRuleActionsMarkImportance1 defines model for .
type MicrosoftGraphMessageRuleActionsMarkImportance1 = map[string]interface{}

// MicrosoftGraphMessageRuleActions_MarkImportance Sets the importance of the message, which can be: low, normal, high.
type MicrosoftGraphMessageRuleActions_MarkImportance struct {
	union json.RawMessage
}

// MicrosoftGraphMessageRuleActionsRedirectTo1 defines model for .
type MicrosoftGraphMessageRuleActionsRedirectTo1 = map[string]interface{}

// MicrosoftGraphMessageRuleActions_RedirectTo_Item defines model for microsoft.graph.messageRuleActions.redirectTo.Item.
type MicrosoftGraphMessageRuleActions_RedirectTo_Item struct {
	union json.RawMessage
}

// MicrosoftGraphMessageRulePredicates defines model for microsoft.graph.messageRulePredicates.
type MicrosoftGraphMessageRulePredicates struct {
	// BodyContains Represents the strings that should appear in the body of an incoming message in order for the condition or exception to apply.
	BodyContains *[]string `json:"bodyContains,omitempty"`

	// BodyOrSubjectContains Represents the strings that should appear in the body or subject of an incoming message in order for the condition or exception to apply.
	BodyOrSubjectContains *[]string `json:"bodyOrSubjectContains,omitempty"`

	// Categories Represents the categories that an incoming message should be labeled with in order for the condition or exception to apply.
	Categories *[]string `json:"categories,omitempty"`

	// FromAddresses Represents the specific sender email addresses of an incoming message in order for the condition or exception to apply.
	FromAddresses *[]MicrosoftGraphMessageRulePredicates_FromAddresses_Item `json:"fromAddresses,omitempty"`

	// HasAttachments Indicates whether an incoming message must have attachments in order for the condition or exception to apply.
	HasAttachments *bool `json:"hasAttachments"`

	// HeaderContains Represents the strings that appear in the headers of an incoming message in order for the condition or exception to apply.
	HeaderContains *[]string `json:"headerContains,omitempty"`

	// Importance The importance that is stamped on an incoming message in order for the condition or exception to apply: low, normal, high.
	Importance *MicrosoftGraphMessageRulePredicates_Importance `json:"importance,omitempty"`

	// IsApprovalRequest Indicates whether an incoming message must be an approval request in order for the condition or exception to apply.
	IsApprovalRequest *bool `json:"isApprovalRequest"`

	// IsAutomaticForward Indicates whether an incoming message must be automatically forwarded in order for the condition or exception to apply.
	IsAutomaticForward *bool `json:"isAutomaticForward"`

	// IsAutomaticReply Indicates whether an incoming message must be an auto reply in order for the condition or exception to apply.
	IsAutomaticReply *bool `json:"isAutomaticReply"`

	// IsEncrypted Indicates whether an incoming message must be encrypted in order for the condition or exception to apply.
	IsEncrypted *bool `json:"isEncrypted"`

	// IsMeetingRequest Indicates whether an incoming message must be a meeting request in order for the condition or exception to apply.
	IsMeetingRequest *bool `json:"isMeetingRequest"`

	// IsMeetingResponse Indicates whether an incoming message must be a meeting response in order for the condition or exception to apply.
	IsMeetingResponse *bool `json:"isMeetingResponse"`

	// IsNonDeliveryReport Indicates whether an incoming message must be a non-delivery report in order for the condition or exception to apply.
	IsNonDeliveryReport *bool `json:"isNonDeliveryReport"`

	// IsPermissionControlled Indicates whether an incoming message must be permission controlled (RMS-protected) in order for the condition or exception to apply.
	IsPermissionControlled *bool `json:"isPermissionControlled"`

	// IsReadReceipt Indicates whether an incoming message must be a read receipt in order for the condition or exception to apply.
	IsReadReceipt *bool `json:"isReadReceipt"`

	// IsSigned Indicates whether an incoming message must be S/MIME-signed in order for the condition or exception to apply.
	IsSigned *bool `json:"isSigned"`

	// IsVoicemail Indicates whether an incoming message must be a voice mail in order for the condition or exception to apply.
	IsVoicemail *bool `json:"isVoicemail"`

	// MessageActionFlag Represents the flag-for-action value that appears on an incoming message in order for the condition or exception to apply. The possible values are: any, call, doNotForward, followUp, fyi, forward, noResponseNecessary, read, reply, replyToAll, review.
	MessageActionFlag *MicrosoftGraphMessageRulePredicates_MessageActionFlag `json:"messageActionFlag,omitempty"`

	// NotSentToMe Indicates whether the owner of the mailbox must not be a recipient of an incoming message in order for the condition or exception to apply.
	NotSentToMe *bool `json:"notSentToMe"`

	// RecipientContains Represents the strings that appear in either the toRecipients or ccRecipients properties of an incoming message in order for the condition or exception to apply.
	RecipientContains *[]string `json:"recipientContains,omitempty"`

	// SenderContains Represents the strings that appear in the from property of an incoming message in order for the condition or exception to apply.
	SenderContains *[]string `json:"senderContains,omitempty"`

	// Sensitivity Represents the sensitivity level that must be stamped on an incoming message in order for the condition or exception to apply. The possible values are: normal, personal, private, confidential.
	Sensitivity *MicrosoftGraphMessageRulePredicates_Sensitivity `json:"sensitivity,omitempty"`

	// SentCcMe Indicates whether the owner of the mailbox must be in the ccRecipients property of an incoming message in order for the condition or exception to apply.
	SentCcMe *bool `json:"sentCcMe"`

	// SentOnlyToMe Indicates whether the owner of the mailbox must be the only recipient in an incoming message in order for the condition or exception to apply.
	SentOnlyToMe *bool `json:"sentOnlyToMe"`

	// SentToAddresses Represents the email addresses that an incoming message must have been sent to in order for the condition or exception to apply.
	SentToAddresses *[]MicrosoftGraphMessageRulePredicates_SentToAddresses_Item `json:"sentToAddresses,omitempty"`

	// SentToMe Indicates whether the owner of the mailbox must be in the toRecipients property of an incoming message in order for the condition or exception to apply.
	SentToMe *bool `json:"sentToMe"`

	// SentToOrCcMe Indicates whether the owner of the mailbox must be in either a toRecipients or ccRecipients property of an incoming message in order for the condition or exception to apply.
	SentToOrCcMe *bool `json:"sentToOrCcMe"`

	// SubjectContains Represents the strings that appear in the subject of an incoming message in order for the condition or exception to apply.
	SubjectContains *[]string `json:"subjectContains,omitempty"`

	// WithinSizeRange Represents the minimum and maximum sizes (in kilobytes) that an incoming message must fall in between in order for the condition or exception to apply.
	WithinSizeRange *MicrosoftGraphMessageRulePredicates_WithinSizeRange `json:"withinSizeRange,omitempty"`
}

// MicrosoftGraphMessageRulePredicatesFromAddresses1 defines model for .
type MicrosoftGraphMessageRulePredicatesFromAddresses1 = map[string]interface{}

// MicrosoftGraphMessageRulePredicates_FromAddresses_Item defines model for microsoft.graph.messageRulePredicates.fromAddresses.Item.
type MicrosoftGraphMessageRulePredicates_FromAddresses_Item struct {
	union json.RawMessage
}

// MicrosoftGraphMessageRulePredicatesImportance1 defines model for .
type MicrosoftGraphMessageRulePredicatesImportance1 = map[string]interface{}

// MicrosoftGraphMessageRulePredicates_Importance The importance that is stamped on an incoming message in order for the condition or exception to apply: low, normal, high.
type MicrosoftGraphMessageRulePredicates_Importance struct {
	union json.RawMessage
}

// MicrosoftGraphMessageRulePredicatesMessageActionFlag1 defines model for .
type MicrosoftGraphMessageRulePredicatesMessageActionFlag1 = map[string]interface{}

// MicrosoftGraphMessageRulePredicates_MessageActionFlag Represents the flag-for-action value that appears on an incoming message in order for the condition or exception to apply. The possible values are: any, call, doNotForward, followUp, fyi, forward, noResponseNecessary, read, reply, replyToAll, review.
type MicrosoftGraphMessageRulePredicates_MessageActionFlag struct {
	union json.RawMessage
}

// MicrosoftGraphMessageRulePredicatesSensitivity1 defines model for .
type MicrosoftGraphMessageRulePredicatesSensitivity1 = map[string]interface{}

// MicrosoftGraphMessageRulePredicates_Sensitivity Represents the sensitivity level that must be stamped on an incoming message in order for the condition or exception to apply. The possible values are: normal, personal, private, confidential.
type MicrosoftGraphMessageRulePredicates_Sensitivity struct {
	union json.RawMessage
}

// MicrosoftGraphMessageRulePredicatesSentToAddresses1 defines model for .
type MicrosoftGraphMessageRulePredicatesSentToAddresses1 = map[string]interface{}

// MicrosoftGraphMessageRulePredicates_SentToAddresses_Item defines model for microsoft.graph.messageRulePredicates.sentToAddresses.Item.
type MicrosoftGraphMessageRulePredicates_SentToAddresses_Item struct {
	union json.RawMessage
}

// MicrosoftGraphMessageRulePredicatesWithinSizeRange1 defines model for .
type MicrosoftGraphMessageRulePredicatesWithinSizeRange1 = map[string]interface{}

// MicrosoftGraphMessageRulePredicates_WithinSizeRange Represents the minimum and maximum sizes (in kilobytes) that an incoming message must fall in between in order for the condition or exception to apply.
type MicrosoftGraphMessageRulePredicates_WithinSizeRange struct {
	union json.RawMessage
}

// MicrosoftGraphMicrosoftAuthenticatorAuthenticationMethod defines model for microsoft.graph.microsoftAuthenticatorAuthenticationMethod.
type MicrosoftGraphMicrosoftAuthenticatorAuthenticationMethod struct {
	// CreatedDateTime The date and time that this app was registered. This property is null if the device is not registered for passwordless Phone Sign-In.
	CreatedDateTime *time.Time `json:"createdDateTime"`

	// Device The registered device on which Microsoft Authenticator resides. This property is null if the device is not registered for passwordless Phone Sign-In.
	Device *MicrosoftGraphMicrosoftAuthenticatorAuthenticationMethod_Device `json:"device,omitempty"`

	// DeviceTag Tags containing app metadata.
	DeviceTag *string `json:"deviceTag"`

	// DisplayName The name of the device on which this app is registered.
	DisplayName *string `json:"displayName"`

	// Id The unique idenfier for an entity. Read-only.
	Id *string `json:"id,omitempty"`

	// PhoneAppVersion Numerical version of this instance of the Authenticator app.
	PhoneAppVersion *string `json:"phoneAppVersion"`
}

// MicrosoftGraphMicrosoftAuthenticatorAuthenticationMethodDevice1 defines model for .
type MicrosoftGraphMicrosoftAuthenticatorAuthenticationMethodDevice1 = map[string]interface{}

// MicrosoftGraphMicrosoftAuthenticatorAuthenticationMethod_Device The registered device on which Microsoft Authenticator resides. This property is null if the device is not registered for passwordless Phone Sign-In.
type MicrosoftGraphMicrosoftAuthenticatorAuthenticationMethod_Device struct {
	union json.RawMessage
}

// MicrosoftGraphMobileAppIdentifier The identifier for a mobile app.
type MicrosoftGraphMobileAppIdentifier = map[string]interface{}

// MicrosoftGraphMultiValueLegacyExtendedProperty defines model for microsoft.graph.multiValueLegacyExtendedProperty.
type MicrosoftGraphMultiValueLegacyExtendedProperty struct {
	// Id The unique idenfier for an entity. Read-only.
	Id *string `json:"id,omitempty"`

	// Value A collection of property values.
	Value *[]string `json:"value,omitempty"`
}

// MicrosoftGraphNotebook defines model for microsoft.graph.notebook.
type MicrosoftGraphNotebook struct {
	// CreatedBy Identity of the user, device, and application which created the item. Read-only.
	CreatedBy *MicrosoftGraphNotebook_CreatedBy `json:"createdBy,omitempty"`

	// CreatedDateTime The date and time when the page was created. The timestamp represents date and time information using ISO 8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 is 2014-01-01T00:00:00Z. Read-only.
	CreatedDateTime *time.Time `json:"createdDateTime"`

	// DisplayName The name of the notebook.
	DisplayName *string `json:"displayName"`

	// Id The unique idenfier for an entity. Read-only.
	Id *string `json:"id,omitempty"`

	// IsDefault Indicates whether this is the user's default notebook. Read-only.
	IsDefault *bool `json:"isDefault"`

	// IsShared Indicates whether the notebook is shared. If true, the contents of the notebook can be seen by people other than the owner. Read-only.
	IsShared *bool `json:"isShared"`

	// LastModifiedBy Identity of the user, device, and application which created the item. Read-only.
	LastModifiedBy *MicrosoftGraphNotebook_LastModifiedBy `json:"lastModifiedBy,omitempty"`

	// LastModifiedDateTime The date and time when the notebook was last modified. The timestamp represents date and time information using ISO 8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 is 2014-01-01T00:00:00Z. Read-only.
	LastModifiedDateTime *time.Time `json:"lastModifiedDateTime"`

	// Links Links for opening the notebook. The oneNoteClientURL link opens the notebook in the OneNote native client if it's installed. The oneNoteWebURL link opens the notebook in OneNote on the web.
	Links *MicrosoftGraphNotebook_Links `json:"links,omitempty"`

	// SectionGroups The section groups in the notebook. Read-only. Nullable.
	SectionGroups *[]MicrosoftGraphSectionGroup `json:"sectionGroups,omitempty"`

	// SectionGroupsUrl The URL for the sectionGroups navigation property, which returns all the section groups in the notebook. Read-only.
	SectionGroupsUrl *string `json:"sectionGroupsUrl"`

	// Sections The sections in the notebook. Read-only. Nullable.
	Sections *[]MicrosoftGraphOnenoteSection `json:"sections,omitempty"`

	// SectionsUrl The URL for the sections navigation property, which returns all the sections in the notebook. Read-only.
	SectionsUrl *string `json:"sectionsUrl"`

	// Self The endpoint where you can get details about the page. Read-only.
	Self *string `json:"self"`

	// UserRole Possible values are: Owner, Contributor, Reader, None. Owner represents owner-level access to the notebook. Contributor represents read/write access to the notebook. Reader represents read-only access to the notebook. Read-only.
	UserRole *MicrosoftGraphNotebook_UserRole `json:"userRole,omitempty"`
}

// MicrosoftGraphNotebookCreatedBy1 defines model for .
type MicrosoftGraphNotebookCreatedBy1 = map[string]interface{}

// MicrosoftGraphNotebook_CreatedBy Identity of the user, device, and application which created the item. Read-only.
type MicrosoftGraphNotebook_CreatedBy struct {
	union json.RawMessage
}

// MicrosoftGraphNotebookLastModifiedBy1 defines model for .
type MicrosoftGraphNotebookLastModifiedBy1 = map[string]interface{}

// MicrosoftGraphNotebook_LastModifiedBy Identity of the user, device, and application which created the item. Read-only.
type MicrosoftGraphNotebook_LastModifiedBy struct {
	union json.RawMessage
}

// MicrosoftGraphNotebookLinks1 defines model for .
type MicrosoftGraphNotebookLinks1 = map[string]interface{}

// MicrosoftGraphNotebook_Links Links for opening the notebook. The oneNoteClientURL link opens the notebook in the OneNote native client if it's installed. The oneNoteWebURL link opens the notebook in OneNote on the web.
type MicrosoftGraphNotebook_Links struct {
	union json.RawMessage
}

// MicrosoftGraphNotebookUserRole1 defines model for .
type MicrosoftGraphNotebookUserRole1 = map[string]interface{}

// MicrosoftGraphNotebook_UserRole Possible values are: Owner, Contributor, Reader, None. Owner represents owner-level access to the notebook. Contributor represents read/write access to the notebook. Reader represents read-only access to the notebook. Read-only.
type MicrosoftGraphNotebook_UserRole struct {
	union json.RawMessage
}

// MicrosoftGraphNotebookLinks defines model for microsoft.graph.notebookLinks.
type MicrosoftGraphNotebookLinks struct {
	// OneNoteClientUrl Opens the notebook in the OneNote native client if it's installed.
	OneNoteClientUrl *MicrosoftGraphNotebookLinks_OneNoteClientUrl `json:"oneNoteClientUrl,omitempty"`

	// OneNoteWebUrl Opens the notebook in OneNote on the web.
	OneNoteWebUrl *MicrosoftGraphNotebookLinks_OneNoteWebUrl `json:"oneNoteWebUrl,omitempty"`
}

// MicrosoftGraphNotebookLinksOneNoteClientUrl1 defines model for .
type MicrosoftGraphNotebookLinksOneNoteClientUrl1 = map[string]interface{}

// MicrosoftGraphNotebookLinks_OneNoteClientUrl Opens the notebook in the OneNote native client if it's installed.
type MicrosoftGraphNotebookLinks_OneNoteClientUrl struct {
	union json.RawMessage
}

// MicrosoftGraphNotebookLinksOneNoteWebUrl1 defines model for .
type MicrosoftGraphNotebookLinksOneNoteWebUrl1 = map[string]interface{}

// MicrosoftGraphNotebookLinks_OneNoteWebUrl Opens the notebook in OneNote on the web.
type MicrosoftGraphNotebookLinks_OneNoteWebUrl struct {
	union json.RawMessage
}

// MicrosoftGraphNumberColumn defines model for microsoft.graph.numberColumn.
type MicrosoftGraphNumberColumn struct {
	// DecimalPlaces How many decimal places to display. See below for information about the possible values.
	DecimalPlaces *string `json:"decimalPlaces"`

	// DisplayAs How the value should be presented in the UX. Must be one of number or percentage. If unspecified, treated as number.
	DisplayAs *string `json:"displayAs"`

	// Maximum The maximum permitted value.
	Maximum *MicrosoftGraphNumberColumn_Maximum `json:"maximum"`

	// Minimum The minimum permitted value.
	Minimum *MicrosoftGraphNumberColumn_Minimum `json:"minimum"`
}

// MicrosoftGraphNumberColumnMaximum0 defines model for .
type MicrosoftGraphNumberColumnMaximum0 = float64

// MicrosoftGraphNumberColumnMaximum1 defines model for .
type MicrosoftGraphNumberColumnMaximum1 = string

// MicrosoftGraphNumberColumn_Maximum The maximum permitted value.
type MicrosoftGraphNumberColumn_Maximum struct {
	union json.RawMessage
}

// MicrosoftGraphNumberColumnMinimum0 defines model for .
type MicrosoftGraphNumberColumnMinimum0 = float64

// MicrosoftGraphNumberColumnMinimum1 defines model for .
type MicrosoftGraphNumberColumnMinimum1 = string

// MicrosoftGraphNumberColumn_Minimum The minimum permitted value.
type MicrosoftGraphNumberColumn_Minimum struct {
	union json.RawMessage
}

// MicrosoftGraphOAuth2PermissionGrant defines model for microsoft.graph.oAuth2PermissionGrant.
type MicrosoftGraphOAuth2PermissionGrant struct {
	// ClientId The object id (not appId) of the client service principal for the application which is authorized to act on behalf of a signed-in user when accessing an API. Required. Supports $filter (eq only).
	ClientId *string `json:"clientId,omitempty"`

	// ConsentType Indicates if authorization is granted for the client application to impersonate all users or only a specific user. AllPrincipals indicates authorization to impersonate all users. Principal indicates authorization to impersonate a specific user. Consent on behalf of all users can be granted by an administrator. Non-admin users may be authorized to consent on behalf of themselves in some cases, for some delegated permissions. Required. Supports $filter (eq only).
	ConsentType *string `json:"consentType"`

	// Id The unique idenfier for an entity. Read-only.
	Id *string `json:"id,omitempty"`

	// PrincipalId The id of the user on behalf of whom the client is authorized to access the resource, when consentType is Principal. If consentType is AllPrincipals this value is null. Required when consentType is Principal. Supports $filter (eq only).
	PrincipalId *string `json:"principalId"`

	// ResourceId The id of the resource service principal to which access is authorized. This identifies the API which the client is authorized to attempt to call on behalf of a signed-in user. Supports $filter (eq only).
	ResourceId *string `json:"resourceId,omitempty"`

	// Scope A space-separated list of the claim values for delegated permissions which should be included in access tokens for the resource application (the API). For example, openid User.Read GroupMember.Read.All. Each claim value should match the value field of one of the delegated permissions defined by the API, listed in the oauth2PermissionScopes property of the resource service principal. Must not exceed 3850 characters in length.
	Scope *string `json:"scope"`
}

// MicrosoftGraphObjectIdentity defines model for microsoft.graph.objectIdentity.
type MicrosoftGraphObjectIdentity struct {
	// Issuer Specifies the issuer of the identity, for example facebook.com.For local accounts (where signInType is not federated), this property is the local B2C tenant default domain name, for example contoso.onmicrosoft.com.For external users from other Azure AD organization, this will be the domain of the federated organization, for example contoso.com.Supports $filter. 512 character limit.
	Issuer *string `json:"issuer"`

	// IssuerAssignedId Specifies the unique identifier assigned to the user by the issuer. The combination of issuer and issuerAssignedId must be unique within the organization. Represents the sign-in name for the user, when signInType is set to emailAddress or userName (also known as local accounts).When signInType is set to: emailAddress, (or a custom string that starts with emailAddress like emailAddress1) issuerAssignedId must be a valid email addressuserName, issuerAssignedId must begin with alphabetical character or number, and can only contain alphanumeric characters and the following symbols: - or Supports $filter. 64 character limit.
	IssuerAssignedId *string `json:"issuerAssignedId"`

	// SignInType Specifies the user sign-in types in your directory, such as emailAddress, userName, federated, or userPrincipalName. federated represents a unique identifier for a user from an issuer, that can be in any format chosen by the issuer. Setting or updating a userPrincipalName identity will update the value of the userPrincipalName property on the user object. The validations performed on the userPrincipalName property on the user object, for example, verified domains and acceptable characters, will be performed when setting or updating a userPrincipalName identity. Additional validation is enforced on issuerAssignedId when the sign-in type is set to emailAddress or userName. This property can also be set to any custom string.
	SignInType *string `json:"signInType"`
}

// MicrosoftGraphOfferShiftRequest defines model for microsoft.graph.offerShiftRequest.
type MicrosoftGraphOfferShiftRequest struct {
	AssignedTo *MicrosoftGraphOfferShiftRequest_AssignedTo `json:"assignedTo,omitempty"`

	// CreatedDateTime The Timestamp type represents date and time information using ISO 8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 is 2014-01-01T00:00:00Z
	CreatedDateTime *time.Time `json:"createdDateTime"`

	// Id The unique idenfier for an entity. Read-only.
	Id *string `json:"id,omitempty"`

	// LastModifiedBy Identity of the person who last modified the entity.
	LastModifiedBy *MicrosoftGraphOfferShiftRequest_LastModifiedBy `json:"lastModifiedBy,omitempty"`

	// LastModifiedDateTime The Timestamp type represents date and time information using ISO 8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 is 2014-01-01T00:00:00Z
	LastModifiedDateTime  *time.Time `json:"lastModifiedDateTime"`
	ManagerActionDateTime *time.Time `json:"managerActionDateTime"`
	ManagerActionMessage  *string    `json:"managerActionMessage"`
	ManagerUserId         *string    `json:"managerUserId"`

	// RecipientActionDateTime The Timestamp type represents date and time information using ISO 8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 is 2014-01-01T00:00:00Z
	RecipientActionDateTime *time.Time `json:"recipientActionDateTime"`

	// RecipientActionMessage Custom message sent by recipient of the offer shift request.
	RecipientActionMessage *string `json:"recipientActionMessage"`

	// RecipientUserId User ID of the recipient of the offer shift request.
	RecipientUserId *string    `json:"recipientUserId"`
	SenderDateTime  *time.Time `json:"senderDateTime"`
	SenderMessage   *string    `json:"senderMessage"`

	// SenderShiftId User ID of the sender of the offer shift request.
	SenderShiftId *string                                `json:"senderShiftId"`
	SenderUserId  *string                                `json:"senderUserId"`
	State         *MicrosoftGraphOfferShiftRequest_State `json:"state,omitempty"`
}

// MicrosoftGraphOfferShiftRequestAssignedTo1 defines model for .
type MicrosoftGraphOfferShiftRequestAssignedTo1 = map[string]interface{}

// MicrosoftGraphOfferShiftRequest_AssignedTo defines model for MicrosoftGraphOfferShiftRequest.AssignedTo.
type MicrosoftGraphOfferShiftRequest_AssignedTo struct {
	union json.RawMessage
}

// MicrosoftGraphOfferShiftRequestLastModifiedBy1 defines model for .
type MicrosoftGraphOfferShiftRequestLastModifiedBy1 = map[string]interface{}

// MicrosoftGraphOfferShiftRequest_LastModifiedBy Identity of the person who last modified the entity.
type MicrosoftGraphOfferShiftRequest_LastModifiedBy struct {
	union json.RawMessage
}

// MicrosoftGraphOfferShiftRequestState1 defines model for .
type MicrosoftGraphOfferShiftRequestState1 = map[string]interface{}

// MicrosoftGraphOfferShiftRequest_State defines model for MicrosoftGraphOfferShiftRequest.State.
type MicrosoftGraphOfferShiftRequest_State struct {
	union json.RawMessage
}

// MicrosoftGraphOfficeGraphInsights defines model for microsoft.graph.officeGraphInsights.
type MicrosoftGraphOfficeGraphInsights struct {
	// Id The unique idenfier for an entity. Read-only.
	Id *string `json:"id,omitempty"`

	// Shared Calculated relationship identifying documents shared with or by the user. This includes URLs, file attachments, and reference attachments to OneDrive for Business and SharePoint files found in Outlook messages and meetings. This also includes URLs and reference attachments to Teams conversations. Ordered by recency of share.
	Shared *[]MicrosoftGraphSharedInsight `json:"shared,omitempty"`

	// Trending Calculated relationship identifying documents trending around a user. Trending documents are calculated based on activity of the user's closest network of people and include files stored in OneDrive for Business and SharePoint. Trending insights help the user to discover potentially useful content that the user has access to, but has never viewed before.
	Trending *[]MicrosoftGraphTrending `json:"trending,omitempty"`

	// Used Calculated relationship identifying the latest documents viewed or modified by a user, including OneDrive for Business and SharePoint documents, ranked by recency of use.
	Used *[]MicrosoftGraphUsedInsight `json:"used,omitempty"`
}

// MicrosoftGraphOnPremisesExtensionAttributes defines model for microsoft.graph.onPremisesExtensionAttributes.
type MicrosoftGraphOnPremisesExtensionAttributes struct {
	// ExtensionAttribute1 First customizable extension attribute.
	ExtensionAttribute1 *string `json:"extensionAttribute1"`

	// ExtensionAttribute10 Tenth customizable extension attribute.
	ExtensionAttribute10 *string `json:"extensionAttribute10"`

	// ExtensionAttribute11 Eleventh customizable extension attribute.
	ExtensionAttribute11 *string `json:"extensionAttribute11"`

	// ExtensionAttribute12 Twelfth customizable extension attribute.
	ExtensionAttribute12 *string `json:"extensionAttribute12"`

	// ExtensionAttribute13 Thirteenth customizable extension attribute.
	ExtensionAttribute13 *string `json:"extensionAttribute13"`

	// ExtensionAttribute14 Fourteenth customizable extension attribute.
	ExtensionAttribute14 *string `json:"extensionAttribute14"`

	// ExtensionAttribute15 Fifteenth customizable extension attribute.
	ExtensionAttribute15 *string `json:"extensionAttribute15"`

	// ExtensionAttribute2 Second customizable extension attribute.
	ExtensionAttribute2 *string `json:"extensionAttribute2"`

	// ExtensionAttribute3 Third customizable extension attribute.
	ExtensionAttribute3 *string `json:"extensionAttribute3"`

	// ExtensionAttribute4 Fourth customizable extension attribute.
	ExtensionAttribute4 *string `json:"extensionAttribute4"`

	// ExtensionAttribute5 Fifth customizable extension attribute.
	ExtensionAttribute5 *string `json:"extensionAttribute5"`

	// ExtensionAttribute6 Sixth customizable extension attribute.
	ExtensionAttribute6 *string `json:"extensionAttribute6"`

	// ExtensionAttribute7 Seventh customizable extension attribute.
	ExtensionAttribute7 *string `json:"extensionAttribute7"`

	// ExtensionAttribute8 Eighth customizable extension attribute.
	ExtensionAttribute8 *string `json:"extensionAttribute8"`

	// ExtensionAttribute9 Ninth customizable extension attribute.
	ExtensionAttribute9 *string `json:"extensionAttribute9"`
}

// MicrosoftGraphOnPremisesProvisioningError defines model for microsoft.graph.onPremisesProvisioningError.
type MicrosoftGraphOnPremisesProvisioningError struct {
	// Category Category of the provisioning error. Note: Currently, there is only one possible value. Possible value: PropertyConflict - indicates a property value is not unique. Other objects contain the same value for the property.
	Category *string `json:"category"`

	// OccurredDateTime The date and time at which the error occurred.
	OccurredDateTime *time.Time `json:"occurredDateTime"`

	// PropertyCausingError Name of the directory property causing the error. Current possible values: UserPrincipalName or ProxyAddress
	PropertyCausingError *string `json:"propertyCausingError"`

	// Value Value of the property causing the error.
	Value *string `json:"value"`
}

// MicrosoftGraphOnenote defines model for microsoft.graph.onenote.
type MicrosoftGraphOnenote struct {
	// Id The unique idenfier for an entity. Read-only.
	Id *string `json:"id,omitempty"`

	// Notebooks The collection of OneNote notebooks that are owned by the user or group. Read-only. Nullable.
	Notebooks *[]MicrosoftGraphNotebook `json:"notebooks,omitempty"`

	// Operations The status of OneNote operations. Getting an operations collection is not supported, but you can get the status of long-running operations if the Operation-Location header is returned in the response. Read-only. Nullable.
	Operations *[]MicrosoftGraphOnenoteOperation `json:"operations,omitempty"`

	// Pages The pages in all OneNote notebooks that are owned by the user or group.  Read-only. Nullable.
	Pages *[]MicrosoftGraphOnenotePage `json:"pages,omitempty"`

	// Resources The image and other file resources in OneNote pages. Getting a resources collection is not supported, but you can get the binary content of a specific resource. Read-only. Nullable.
	Resources *[]MicrosoftGraphOnenoteResource `json:"resources,omitempty"`

	// SectionGroups The section groups in all OneNote notebooks that are owned by the user or group.  Read-only. Nullable.
	SectionGroups *[]MicrosoftGraphSectionGroup `json:"sectionGroups,omitempty"`

	// Sections The sections in all OneNote notebooks that are owned by the user or group.  Read-only. Nullable.
	Sections *[]MicrosoftGraphOnenoteSection `json:"sections,omitempty"`
}

// MicrosoftGraphOnenoteEntityBaseModel defines model for microsoft.graph.onenoteEntityBaseModel.
type MicrosoftGraphOnenoteEntityBaseModel struct {
	// Id The unique idenfier for an entity. Read-only.
	Id *string `json:"id,omitempty"`

	// Self The endpoint where you can get details about the page. Read-only.
	Self *string `json:"self"`
}

// MicrosoftGraphOnenoteEntityHierarchyModel defines model for microsoft.graph.onenoteEntityHierarchyModel.
type MicrosoftGraphOnenoteEntityHierarchyModel struct {
	// CreatedBy Identity of the user, device, and application which created the item. Read-only.
	CreatedBy *MicrosoftGraphOnenoteEntityHierarchyModel_CreatedBy `json:"createdBy,omitempty"`

	// CreatedDateTime The date and time when the page was created. The timestamp represents date and time information using ISO 8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 is 2014-01-01T00:00:00Z. Read-only.
	CreatedDateTime *time.Time `json:"createdDateTime"`

	// DisplayName The name of the notebook.
	DisplayName *string `json:"displayName"`

	// Id The unique idenfier for an entity. Read-only.
	Id *string `json:"id,omitempty"`

	// LastModifiedBy Identity of the user, device, and application which created the item. Read-only.
	LastModifiedBy *MicrosoftGraphOnenoteEntityHierarchyModel_LastModifiedBy `json:"lastModifiedBy,omitempty"`

	// LastModifiedDateTime The date and time when the notebook was last modified. The timestamp represents date and time information using ISO 8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 is 2014-01-01T00:00:00Z. Read-only.
	LastModifiedDateTime *time.Time `json:"lastModifiedDateTime"`

	// Self The endpoint where you can get details about the page. Read-only.
	Self *string `json:"self"`
}

// MicrosoftGraphOnenoteEntityHierarchyModelCreatedBy1 defines model for .
type MicrosoftGraphOnenoteEntityHierarchyModelCreatedBy1 = map[string]interface{}

// MicrosoftGraphOnenoteEntityHierarchyModel_CreatedBy Identity of the user, device, and application which created the item. Read-only.
type MicrosoftGraphOnenoteEntityHierarchyModel_CreatedBy struct {
	union json.RawMessage
}

// MicrosoftGraphOnenoteEntityHierarchyModelLastModifiedBy1 defines model for .
type MicrosoftGraphOnenoteEntityHierarchyModelLastModifiedBy1 = map[string]interface{}

// MicrosoftGraphOnenoteEntityHierarchyModel_LastModifiedBy Identity of the user, device, and application which created the item. Read-only.
type MicrosoftGraphOnenoteEntityHierarchyModel_LastModifiedBy struct {
	union json.RawMessage
}

// MicrosoftGraphOnenoteEntitySchemaObjectModel defines model for microsoft.graph.onenoteEntitySchemaObjectModel.
type MicrosoftGraphOnenoteEntitySchemaObjectModel struct {
	// CreatedDateTime The date and time when the page was created. The timestamp represents date and time information using ISO 8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 is 2014-01-01T00:00:00Z. Read-only.
	CreatedDateTime *time.Time `json:"createdDateTime"`

	// Id The unique idenfier for an entity. Read-only.
	Id *string `json:"id,omitempty"`

	// Self The endpoint where you can get details about the page. Read-only.
	Self *string `json:"self"`
}

// MicrosoftGraphOnenoteOperation defines model for microsoft.graph.onenoteOperation.
type MicrosoftGraphOnenoteOperation struct {
	// CreatedDateTime The start time of the operation.
	CreatedDateTime *time.Time `json:"createdDateTime"`

	// Error The error returned by the operation.
	Error *MicrosoftGraphOnenoteOperation_Error `json:"error,omitempty"`

	// Id The unique idenfier for an entity. Read-only.
	Id *string `json:"id,omitempty"`

	// LastActionDateTime The time of the last action of the operation.
	LastActionDateTime *time.Time `json:"lastActionDateTime"`

	// PercentComplete The operation percent complete if the operation is still in running status.
	PercentComplete *string `json:"percentComplete"`

	// ResourceId The resource id.
	ResourceId *string `json:"resourceId"`

	// ResourceLocation The resource URI for the object. For example, the resource URI for a copied page or section.
	ResourceLocation *string `json:"resourceLocation"`

	// Status The current status of the operation: notStarted, running, completed, failed
	Status *MicrosoftGraphOnenoteOperation_Status `json:"status,omitempty"`
}

// MicrosoftGraphOnenoteOperationError1 defines model for .
type MicrosoftGraphOnenoteOperationError1 = map[string]interface{}

// MicrosoftGraphOnenoteOperation_Error The error returned by the operation.
type MicrosoftGraphOnenoteOperation_Error struct {
	union json.RawMessage
}

// MicrosoftGraphOnenoteOperationStatus1 defines model for .
type MicrosoftGraphOnenoteOperationStatus1 = map[string]interface{}

// MicrosoftGraphOnenoteOperation_Status The current status of the operation: notStarted, running, completed, failed
type MicrosoftGraphOnenoteOperation_Status struct {
	union json.RawMessage
}

// MicrosoftGraphOnenoteOperationError defines model for microsoft.graph.onenoteOperationError.
type MicrosoftGraphOnenoteOperationError struct {
	// Code The error code.
	Code *string `json:"code"`

	// Message The error message.
	Message *string `json:"message"`
}

// MicrosoftGraphOnenotePage defines model for microsoft.graph.onenotePage.
type MicrosoftGraphOnenotePage struct {
	// Content The page's HTML content.
	Content *string `json:"content"`

	// ContentUrl The URL for the page's HTML content.  Read-only.
	ContentUrl *string `json:"contentUrl"`

	// CreatedByAppId The unique identifier of the application that created the page. Read-only.
	CreatedByAppId *string `json:"createdByAppId"`

	// CreatedDateTime The date and time when the page was created. The timestamp represents date and time information using ISO 8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 is 2014-01-01T00:00:00Z. Read-only.
	CreatedDateTime *time.Time `json:"createdDateTime"`

	// Id The unique idenfier for an entity. Read-only.
	Id *string `json:"id,omitempty"`

	// LastModifiedDateTime The date and time when the page was last modified. The timestamp represents date and time information using ISO 8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 is 2014-01-01T00:00:00Z. Read-only.
	LastModifiedDateTime *time.Time `json:"lastModifiedDateTime"`

	// Level The indentation level of the page. Read-only.
	Level *int32 `json:"level"`

	// Links Links for opening the page. The oneNoteClientURL link opens the page in the OneNote native client if it 's installed. The oneNoteWebUrl link opens the page in OneNote on the web. Read-only.
	Links *MicrosoftGraphOnenotePage_Links `json:"links,omitempty"`

	// Order The order of the page within its parent section. Read-only.
	Order *int32 `json:"order"`

	// ParentNotebook The notebook that contains the page.  Read-only.
	ParentNotebook *MicrosoftGraphOnenotePage_ParentNotebook `json:"parentNotebook,omitempty"`

	// ParentSection The section that contains the page. Read-only.
	ParentSection *MicrosoftGraphOnenotePage_ParentSection `json:"parentSection,omitempty"`

	// Self The endpoint where you can get details about the page. Read-only.
	Self *string `json:"self"`

	// Title The title of the page.
	Title    *string   `json:"title"`
	UserTags *[]string `json:"userTags,omitempty"`
}

// MicrosoftGraphOnenotePageLinks1 defines model for .
type MicrosoftGraphOnenotePageLinks1 = map[string]interface{}

// MicrosoftGraphOnenotePage_Links Links for opening the page. The oneNoteClientURL link opens the page in the OneNote native client if it 's installed. The oneNoteWebUrl link opens the page in OneNote on the web. Read-only.
type MicrosoftGraphOnenotePage_Links struct {
	union json.RawMessage
}

// MicrosoftGraphOnenotePageParentNotebook1 defines model for .
type MicrosoftGraphOnenotePageParentNotebook1 = map[string]interface{}

// MicrosoftGraphOnenotePage_ParentNotebook The notebook that contains the page.  Read-only.
type MicrosoftGraphOnenotePage_ParentNotebook struct {
	union json.RawMessage
}

// MicrosoftGraphOnenotePageParentSection1 defines model for .
type MicrosoftGraphOnenotePageParentSection1 = map[string]interface{}

// MicrosoftGraphOnenotePage_ParentSection The section that contains the page. Read-only.
type MicrosoftGraphOnenotePage_ParentSection struct {
	union json.RawMessage
}

// MicrosoftGraphOnenoteResource defines model for microsoft.graph.onenoteResource.
type MicrosoftGraphOnenoteResource struct {
	// Content The content stream
	Content *string `json:"content"`

	// ContentUrl The URL for downloading the content
	ContentUrl *string `json:"contentUrl"`

	// Id The unique idenfier for an entity. Read-only.
	Id *string `json:"id,omitempty"`

	// Self The endpoint where you can get details about the page. Read-only.
	Self *string `json:"self"`
}

// MicrosoftGraphOnenoteSection defines model for microsoft.graph.onenoteSection.
type MicrosoftGraphOnenoteSection struct {
	// CreatedBy Identity of the user, device, and application which created the item. Read-only.
	CreatedBy *MicrosoftGraphOnenoteSection_CreatedBy `json:"createdBy,omitempty"`

	// CreatedDateTime The date and time when the page was created. The timestamp represents date and time information using ISO 8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 is 2014-01-01T00:00:00Z. Read-only.
	CreatedDateTime *time.Time `json:"createdDateTime"`

	// DisplayName The name of the notebook.
	DisplayName *string `json:"displayName"`

	// Id The unique idenfier for an entity. Read-only.
	Id *string `json:"id,omitempty"`

	// IsDefault Indicates whether this is the user's default section. Read-only.
	IsDefault *bool `json:"isDefault"`

	// LastModifiedBy Identity of the user, device, and application which created the item. Read-only.
	LastModifiedBy *MicrosoftGraphOnenoteSection_LastModifiedBy `json:"lastModifiedBy,omitempty"`

	// LastModifiedDateTime The date and time when the notebook was last modified. The timestamp represents date and time information using ISO 8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 is 2014-01-01T00:00:00Z. Read-only.
	LastModifiedDateTime *time.Time `json:"lastModifiedDateTime"`

	// Links Links for opening the section. The oneNoteClientURL link opens the section in the OneNote native client if it's installed. The oneNoteWebURL link opens the section in OneNote on the web.
	Links *MicrosoftGraphOnenoteSection_Links `json:"links,omitempty"`

	// Pages The collection of pages in the section.  Read-only. Nullable.
	Pages *[]MicrosoftGraphOnenotePage `json:"pages,omitempty"`

	// PagesUrl The pages endpoint where you can get details for all the pages in the section. Read-only.
	PagesUrl *string `json:"pagesUrl"`

	// ParentNotebook The notebook that contains the section.  Read-only.
	ParentNotebook *MicrosoftGraphOnenoteSection_ParentNotebook `json:"parentNotebook,omitempty"`

	// ParentSectionGroup The section group that contains the section.  Read-only.
	ParentSectionGroup *MicrosoftGraphOnenoteSection_ParentSectionGroup `json:"parentSectionGroup,omitempty"`

	// Self The endpoint where you can get details about the page. Read-only.
	Self *string `json:"self"`
}

// MicrosoftGraphOnenoteSectionCreatedBy1 defines model for .
type MicrosoftGraphOnenoteSectionCreatedBy1 = map[string]interface{}

// MicrosoftGraphOnenoteSection_CreatedBy Identity of the user, device, and application which created the item. Read-only.
type MicrosoftGraphOnenoteSection_CreatedBy struct {
	union json.RawMessage
}

// MicrosoftGraphOnenoteSectionLastModifiedBy1 defines model for .
type MicrosoftGraphOnenoteSectionLastModifiedBy1 = map[string]interface{}

// MicrosoftGraphOnenoteSection_LastModifiedBy Identity of the user, device, and application which created the item. Read-only.
type MicrosoftGraphOnenoteSection_LastModifiedBy struct {
	union json.RawMessage
}

// MicrosoftGraphOnenoteSectionLinks1 defines model for .
type MicrosoftGraphOnenoteSectionLinks1 = map[string]interface{}

// MicrosoftGraphOnenoteSection_Links Links for opening the section. The oneNoteClientURL link opens the section in the OneNote native client if it's installed. The oneNoteWebURL link opens the section in OneNote on the web.
type MicrosoftGraphOnenoteSection_Links struct {
	union json.RawMessage
}

// MicrosoftGraphOnenoteSectionParentNotebook1 defines model for .
type MicrosoftGraphOnenoteSectionParentNotebook1 = map[string]interface{}

// MicrosoftGraphOnenoteSection_ParentNotebook The notebook that contains the section.  Read-only.
type MicrosoftGraphOnenoteSection_ParentNotebook struct {
	union json.RawMessage
}

// MicrosoftGraphOnenoteSectionParentSectionGroup1 defines model for .
type MicrosoftGraphOnenoteSectionParentSectionGroup1 = map[string]interface{}

// MicrosoftGraphOnenoteSection_ParentSectionGroup The section group that contains the section.  Read-only.
type MicrosoftGraphOnenoteSection_ParentSectionGroup struct {
	union json.RawMessage
}

// MicrosoftGraphOnenoteUserRole defines model for microsoft.graph.onenoteUserRole.
type MicrosoftGraphOnenoteUserRole string

// MicrosoftGraphOnlineMeeting defines model for microsoft.graph.onlineMeeting.
type MicrosoftGraphOnlineMeeting struct {
	// AllowAttendeeToEnableCamera Indicates whether attendees can turn on their camera.
	AllowAttendeeToEnableCamera *bool `json:"allowAttendeeToEnableCamera"`

	// AllowAttendeeToEnableMic Indicates whether attendees can turn on their microphone.
	AllowAttendeeToEnableMic *bool `json:"allowAttendeeToEnableMic"`

	// AllowMeetingChat Specifies the mode of meeting chat.
	AllowMeetingChat *MicrosoftGraphOnlineMeeting_AllowMeetingChat `json:"allowMeetingChat,omitempty"`

	// AllowParticipantsToChangeName Specifies if participants are allowed to rename themselves in an instance of the meeting.
	AllowParticipantsToChangeName *bool `json:"allowParticipantsToChangeName"`

	// AllowTeamworkReactions Indicates whether Teams reactions are enabled for the meeting.
	AllowTeamworkReactions *bool `json:"allowTeamworkReactions"`

	// AllowedPresenters Specifies who can be a presenter in a meeting. Possible values are listed in the following table.
	AllowedPresenters *MicrosoftGraphOnlineMeeting_AllowedPresenters `json:"allowedPresenters,omitempty"`

	// AttendanceReports The attendance reports of an online meeting. Read-only.
	AttendanceReports *[]MicrosoftGraphMeetingAttendanceReport `json:"attendanceReports,omitempty"`

	// AttendeeReport The content stream of the attendee report of a Microsoft Teams live event. Read-only.
	AttendeeReport *string `json:"attendeeReport"`

	// AudioConferencing The phone access (dial-in) information for an online meeting. Read-only.
	AudioConferencing *MicrosoftGraphOnlineMeeting_AudioConferencing `json:"audioConferencing,omitempty"`

	// BroadcastSettings Settings related to a live event.
	BroadcastSettings *MicrosoftGraphOnlineMeeting_BroadcastSettings `json:"broadcastSettings,omitempty"`

	// ChatInfo The chat information associated with this online meeting.
	ChatInfo *MicrosoftGraphOnlineMeeting_ChatInfo `json:"chatInfo,omitempty"`

	// CreationDateTime The meeting creation time in UTC. Read-only.
	CreationDateTime *time.Time `json:"creationDateTime"`

	// EndDateTime The meeting end time in UTC.
	EndDateTime *time.Time `json:"endDateTime"`
	ExternalId  *string    `json:"externalId"`

	// Id The unique idenfier for an entity. Read-only.
	Id *string `json:"id,omitempty"`

	// IsBroadcast Indicates if this is a Teams live event.
	IsBroadcast *bool `json:"isBroadcast"`

	// IsEntryExitAnnounced Indicates whether to announce when callers join or leave.
	IsEntryExitAnnounced *bool `json:"isEntryExitAnnounced"`

	// JoinInformation The join information in the language and locale variant specified in the Accept-Language request HTTP header. Read-only.
	JoinInformation *MicrosoftGraphOnlineMeeting_JoinInformation `json:"joinInformation,omitempty"`

	// JoinMeetingIdSettings Specifies the joinMeetingId, the meeting passcode, and the requirement for the passcode. Once an onlineMeeting is created, the joinMeetingIdSettings cannot be modified. To make any changes to this property, the meeting needs to be canceled and a new one needs to be created.
	JoinMeetingIdSettings *MicrosoftGraphOnlineMeeting_JoinMeetingIdSettings `json:"joinMeetingIdSettings,omitempty"`

	// JoinWebUrl The join URL of the online meeting. Read-only.
	JoinWebUrl *string `json:"joinWebUrl"`

	// LobbyBypassSettings Specifies which participants can bypass the meeting   lobby.
	LobbyBypassSettings *MicrosoftGraphOnlineMeeting_LobbyBypassSettings `json:"lobbyBypassSettings,omitempty"`

	// Participants The participants associated with the online meeting.  This includes the organizer and the attendees.
	Participants *MicrosoftGraphOnlineMeeting_Participants `json:"participants,omitempty"`

	// RecordAutomatically Indicates whether to record the meeting automatically.
	RecordAutomatically *bool `json:"recordAutomatically"`

	// ShareMeetingChatHistoryDefault Specifies whether meeting chat history is shared with participants. Possible values are: all, none, unknownFutureValue.
	ShareMeetingChatHistoryDefault *MicrosoftGraphOnlineMeeting_ShareMeetingChatHistoryDefault `json:"shareMeetingChatHistoryDefault,omitempty"`

	// StartDateTime The meeting start time in UTC.
	StartDateTime *time.Time `json:"startDateTime"`

	// Subject The subject of the online meeting.
	Subject *string `json:"subject"`

	// VideoTeleconferenceId The video teleconferencing ID. Read-only.
	VideoTeleconferenceId *string `json:"videoTeleconferenceId"`

	// WatermarkProtection Specifies whether a watermark should be applied to a content type by the client application.
	WatermarkProtection *MicrosoftGraphOnlineMeeting_WatermarkProtection `json:"watermarkProtection,omitempty"`
}

// MicrosoftGraphOnlineMeetingAllowMeetingChat1 defines model for .
type MicrosoftGraphOnlineMeetingAllowMeetingChat1 = map[string]interface{}

// MicrosoftGraphOnlineMeeting_AllowMeetingChat Specifies the mode of meeting chat.
type MicrosoftGraphOnlineMeeting_AllowMeetingChat struct {
	union json.RawMessage
}

// MicrosoftGraphOnlineMeetingAllowedPresenters1 defines model for .
type MicrosoftGraphOnlineMeetingAllowedPresenters1 = map[string]interface{}

// MicrosoftGraphOnlineMeeting_AllowedPresenters Specifies who can be a presenter in a meeting. Possible values are listed in the following table.
type MicrosoftGraphOnlineMeeting_AllowedPresenters struct {
	union json.RawMessage
}

// MicrosoftGraphOnlineMeetingAudioConferencing1 defines model for .
type MicrosoftGraphOnlineMeetingAudioConferencing1 = map[string]interface{}

// MicrosoftGraphOnlineMeeting_AudioConferencing The phone access (dial-in) information for an online meeting. Read-only.
type MicrosoftGraphOnlineMeeting_AudioConferencing struct {
	union json.RawMessage
}

// MicrosoftGraphOnlineMeetingBroadcastSettings1 defines model for .
type MicrosoftGraphOnlineMeetingBroadcastSettings1 = map[string]interface{}

// MicrosoftGraphOnlineMeeting_BroadcastSettings Settings related to a live event.
type MicrosoftGraphOnlineMeeting_BroadcastSettings struct {
	union json.RawMessage
}

// MicrosoftGraphOnlineMeetingChatInfo1 defines model for .
type MicrosoftGraphOnlineMeetingChatInfo1 = map[string]interface{}

// MicrosoftGraphOnlineMeeting_ChatInfo The chat information associated with this online meeting.
type MicrosoftGraphOnlineMeeting_ChatInfo struct {
	union json.RawMessage
}

// MicrosoftGraphOnlineMeetingJoinInformation1 defines model for .
type MicrosoftGraphOnlineMeetingJoinInformation1 = map[string]interface{}

// MicrosoftGraphOnlineMeeting_JoinInformation The join information in the language and locale variant specified in the Accept-Language request HTTP header. Read-only.
type MicrosoftGraphOnlineMeeting_JoinInformation struct {
	union json.RawMessage
}

// MicrosoftGraphOnlineMeetingJoinMeetingIdSettings1 defines model for .
type MicrosoftGraphOnlineMeetingJoinMeetingIdSettings1 = map[string]interface{}

// MicrosoftGraphOnlineMeeting_JoinMeetingIdSettings Specifies the joinMeetingId, the meeting passcode, and the requirement for the passcode. Once an onlineMeeting is created, the joinMeetingIdSettings cannot be modified. To make any changes to this property, the meeting needs to be canceled and a new one needs to be created.
type MicrosoftGraphOnlineMeeting_JoinMeetingIdSettings struct {
	union json.RawMessage
}

// MicrosoftGraphOnlineMeetingLobbyBypassSettings1 defines model for .
type MicrosoftGraphOnlineMeetingLobbyBypassSettings1 = map[string]interface{}

// MicrosoftGraphOnlineMeeting_LobbyBypassSettings Specifies which participants can bypass the meeting   lobby.
type MicrosoftGraphOnlineMeeting_LobbyBypassSettings struct {
	union json.RawMessage
}

// MicrosoftGraphOnlineMeetingParticipants1 defines model for .
type MicrosoftGraphOnlineMeetingParticipants1 = map[string]interface{}

// MicrosoftGraphOnlineMeeting_Participants The participants associated with the online meeting.  This includes the organizer and the attendees.
type MicrosoftGraphOnlineMeeting_Participants struct {
	union json.RawMessage
}

// MicrosoftGraphOnlineMeetingShareMeetingChatHistoryDefault1 defines model for .
type MicrosoftGraphOnlineMeetingShareMeetingChatHistoryDefault1 = map[string]interface{}

// MicrosoftGraphOnlineMeeting_ShareMeetingChatHistoryDefault Specifies whether meeting chat history is shared with participants. Possible values are: all, none, unknownFutureValue.
type MicrosoftGraphOnlineMeeting_ShareMeetingChatHistoryDefault struct {
	union json.RawMessage
}

// MicrosoftGraphOnlineMeetingWatermarkProtection1 defines model for .
type MicrosoftGraphOnlineMeetingWatermarkProtection1 = map[string]interface{}

// MicrosoftGraphOnlineMeeting_WatermarkProtection Specifies whether a watermark should be applied to a content type by the client application.
type MicrosoftGraphOnlineMeeting_WatermarkProtection struct {
	union json.RawMessage
}

// MicrosoftGraphOnlineMeetingInfo defines model for microsoft.graph.onlineMeetingInfo.
type MicrosoftGraphOnlineMeetingInfo struct {
	// ConferenceId The ID of the conference.
	ConferenceId *string `json:"conferenceId"`

	// JoinUrl The external link that launches the online meeting. This is a URL that clients will launch into a browser and will redirect the user to join the meeting.
	JoinUrl *string `json:"joinUrl"`

	// Phones All of the phone numbers associated with this conference.
	Phones *[]MicrosoftGraphOnlineMeetingInfo_Phones_Item `json:"phones,omitempty"`

	// QuickDial The pre-formatted quickdial for this call.
	QuickDial *string `json:"quickDial"`

	// TollFreeNumbers The toll free numbers that can be used to join the conference.
	TollFreeNumbers *[]string `json:"tollFreeNumbers,omitempty"`

	// TollNumber The toll number that can be used to join the conference.
	TollNumber *string `json:"tollNumber"`
}

// MicrosoftGraphOnlineMeetingInfoPhones1 defines model for .
type MicrosoftGraphOnlineMeetingInfoPhones1 = map[string]interface{}

// MicrosoftGraphOnlineMeetingInfo_Phones_Item defines model for microsoft.graph.onlineMeetingInfo.phones.Item.
type MicrosoftGraphOnlineMeetingInfo_Phones_Item struct {
	union json.RawMessage
}

// MicrosoftGraphOnlineMeetingPresenters defines model for microsoft.graph.onlineMeetingPresenters.
type MicrosoftGraphOnlineMeetingPresenters string

// MicrosoftGraphOnlineMeetingProviderType defines model for microsoft.graph.onlineMeetingProviderType.
type MicrosoftGraphOnlineMeetingProviderType string

// MicrosoftGraphOnlineMeetingRole defines model for microsoft.graph.onlineMeetingRole.
type MicrosoftGraphOnlineMeetingRole string

// MicrosoftGraphOpenShift defines model for microsoft.graph.openShift.
type MicrosoftGraphOpenShift struct {
	// CreatedDateTime The Timestamp type represents date and time information using ISO 8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 is 2014-01-01T00:00:00Z
	CreatedDateTime *time.Time `json:"createdDateTime"`

	// DraftOpenShift An unpublished open shift.
	DraftOpenShift *MicrosoftGraphOpenShift_DraftOpenShift `json:"draftOpenShift,omitempty"`

	// Id The unique idenfier for an entity. Read-only.
	Id *string `json:"id,omitempty"`

	// LastModifiedBy Identity of the person who last modified the entity.
	LastModifiedBy *MicrosoftGraphOpenShift_LastModifiedBy `json:"lastModifiedBy,omitempty"`

	// LastModifiedDateTime The Timestamp type represents date and time information using ISO 8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 is 2014-01-01T00:00:00Z
	LastModifiedDateTime *time.Time `json:"lastModifiedDateTime"`

	// SchedulingGroupId ID for the scheduling group that the open shift belongs to.
	SchedulingGroupId *string `json:"schedulingGroupId"`

	// SharedOpenShift A published open shift.
	SharedOpenShift *MicrosoftGraphOpenShift_SharedOpenShift `json:"sharedOpenShift,omitempty"`
}

// MicrosoftGraphOpenShiftDraftOpenShift1 defines model for .
type MicrosoftGraphOpenShiftDraftOpenShift1 = map[string]interface{}

// MicrosoftGraphOpenShift_DraftOpenShift An unpublished open shift.
type MicrosoftGraphOpenShift_DraftOpenShift struct {
	union json.RawMessage
}

// MicrosoftGraphOpenShiftLastModifiedBy1 defines model for .
type MicrosoftGraphOpenShiftLastModifiedBy1 = map[string]interface{}

// MicrosoftGraphOpenShift_LastModifiedBy Identity of the person who last modified the entity.
type MicrosoftGraphOpenShift_LastModifiedBy struct {
	union json.RawMessage
}

// MicrosoftGraphOpenShiftSharedOpenShift1 defines model for .
type MicrosoftGraphOpenShiftSharedOpenShift1 = map[string]interface{}

// MicrosoftGraphOpenShift_SharedOpenShift A published open shift.
type MicrosoftGraphOpenShift_SharedOpenShift struct {
	union json.RawMessage
}

// MicrosoftGraphOpenShiftChangeRequest defines model for microsoft.graph.openShiftChangeRequest.
type MicrosoftGraphOpenShiftChangeRequest struct {
	AssignedTo *MicrosoftGraphOpenShiftChangeRequest_AssignedTo `json:"assignedTo,omitempty"`

	// CreatedDateTime The Timestamp type represents date and time information using ISO 8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 is 2014-01-01T00:00:00Z
	CreatedDateTime *time.Time `json:"createdDateTime"`

	// Id The unique idenfier for an entity. Read-only.
	Id *string `json:"id,omitempty"`

	// LastModifiedBy Identity of the person who last modified the entity.
	LastModifiedBy *MicrosoftGraphOpenShiftChangeRequest_LastModifiedBy `json:"lastModifiedBy,omitempty"`

	// LastModifiedDateTime The Timestamp type represents date and time information using ISO 8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 is 2014-01-01T00:00:00Z
	LastModifiedDateTime  *time.Time `json:"lastModifiedDateTime"`
	ManagerActionDateTime *time.Time `json:"managerActionDateTime"`
	ManagerActionMessage  *string    `json:"managerActionMessage"`
	ManagerUserId         *string    `json:"managerUserId"`

	// OpenShiftId ID for the open shift.
	OpenShiftId    *string                                     `json:"openShiftId"`
	SenderDateTime *time.Time                                  `json:"senderDateTime"`
	SenderMessage  *string                                     `json:"senderMessage"`
	SenderUserId   *string                                     `json:"senderUserId"`
	State          *MicrosoftGraphOpenShiftChangeRequest_State `json:"state,omitempty"`
}

// MicrosoftGraphOpenShiftChangeRequestAssignedTo1 defines model for .
type MicrosoftGraphOpenShiftChangeRequestAssignedTo1 = map[string]interface{}

// MicrosoftGraphOpenShiftChangeRequest_AssignedTo defines model for MicrosoftGraphOpenShiftChangeRequest.AssignedTo.
type MicrosoftGraphOpenShiftChangeRequest_AssignedTo struct {
	union json.RawMessage
}

// MicrosoftGraphOpenShiftChangeRequestLastModifiedBy1 defines model for .
type MicrosoftGraphOpenShiftChangeRequestLastModifiedBy1 = map[string]interface{}

// MicrosoftGraphOpenShiftChangeRequest_LastModifiedBy Identity of the person who last modified the entity.
type MicrosoftGraphOpenShiftChangeRequest_LastModifiedBy struct {
	union json.RawMessage
}

// MicrosoftGraphOpenShiftChangeRequestState1 defines model for .
type MicrosoftGraphOpenShiftChangeRequestState1 = map[string]interface{}

// MicrosoftGraphOpenShiftChangeRequest_State defines model for MicrosoftGraphOpenShiftChangeRequest.State.
type MicrosoftGraphOpenShiftChangeRequest_State struct {
	union json.RawMessage
}

// MicrosoftGraphOpenShiftItem defines model for microsoft.graph.openShiftItem.
type MicrosoftGraphOpenShiftItem struct {
	// Activities An incremental part of a shift which can cover details of when and where an employee is during their shift. For example, an assignment or a scheduled break or lunch. Required.
	Activities *[]MicrosoftGraphOpenShiftItem_Activities_Item `json:"activities,omitempty"`

	// DisplayName The shift label of the shiftItem.
	DisplayName *string    `json:"displayName"`
	EndDateTime *time.Time `json:"endDateTime"`

	// Notes The shift notes for the shiftItem.
	Notes *string `json:"notes"`

	// OpenSlotCount Count of the number of slots for the given open shift.
	OpenSlotCount *int32                             `json:"openSlotCount,omitempty"`
	StartDateTime *time.Time                         `json:"startDateTime"`
	Theme         *MicrosoftGraphScheduleEntityTheme `json:"theme,omitempty"`
}

// MicrosoftGraphOpenShiftItemActivities1 defines model for .
type MicrosoftGraphOpenShiftItemActivities1 = map[string]interface{}

// MicrosoftGraphOpenShiftItem_Activities_Item defines model for microsoft.graph.openShiftItem.activities.Item.
type MicrosoftGraphOpenShiftItem_Activities_Item struct {
	union json.RawMessage
}

// MicrosoftGraphOperation defines model for microsoft.graph.operation.
type MicrosoftGraphOperation struct {
	// CreatedDateTime The start time of the operation.
	CreatedDateTime *time.Time `json:"createdDateTime"`

	// Id The unique idenfier for an entity. Read-only.
	Id *string `json:"id,omitempty"`

	// LastActionDateTime The time of the last action of the operation.
	LastActionDateTime *time.Time `json:"lastActionDateTime"`

	// Status The current status of the operation: notStarted, running, completed, failed
	Status *MicrosoftGraphOperation_Status `json:"status,omitempty"`
}

// MicrosoftGraphOperationStatus1 defines model for .
type MicrosoftGraphOperationStatus1 = map[string]interface{}

// MicrosoftGraphOperation_Status The current status of the operation: notStarted, running, completed, failed
type MicrosoftGraphOperation_Status struct {
	union json.RawMessage
}

// MicrosoftGraphOperationError defines model for microsoft.graph.operationError.
type MicrosoftGraphOperationError struct {
	// Code Operation error code.
	Code *string `json:"code"`

	// Message Operation error message.
	Message *string `json:"message"`
}

// MicrosoftGraphOperationStatus defines model for microsoft.graph.operationStatus.
type MicrosoftGraphOperationStatus string

// MicrosoftGraphOutlookCategory defines model for microsoft.graph.outlookCategory.
type MicrosoftGraphOutlookCategory struct {
	// Color A pre-set color constant that characterizes a category, and that is mapped to one of 25 predefined colors. For more details, see the following note.
	Color *MicrosoftGraphOutlookCategory_Color `json:"color,omitempty"`

	// DisplayName A unique name that identifies a category in the user's mailbox. After a category is created, the name cannot be changed. Read-only.
	DisplayName *string `json:"displayName"`

	// Id The unique idenfier for an entity. Read-only.
	Id *string `json:"id,omitempty"`
}

// MicrosoftGraphOutlookCategoryColor1 defines model for .
type MicrosoftGraphOutlookCategoryColor1 = map[string]interface{}

// MicrosoftGraphOutlookCategory_Color A pre-set color constant that characterizes a category, and that is mapped to one of 25 predefined colors. For more details, see the following note.
type MicrosoftGraphOutlookCategory_Color struct {
	union json.RawMessage
}

// MicrosoftGraphOutlookGeoCoordinates defines model for microsoft.graph.outlookGeoCoordinates.
type MicrosoftGraphOutlookGeoCoordinates struct {
	// Accuracy The accuracy of the latitude and longitude. As an example, the accuracy can be measured in meters, such as the latitude and longitude are accurate to within 50 meters.
	Accuracy *MicrosoftGraphOutlookGeoCoordinates_Accuracy `json:"accuracy"`

	// Altitude The altitude of the location.
	Altitude *MicrosoftGraphOutlookGeoCoordinates_Altitude `json:"altitude"`

	// AltitudeAccuracy The accuracy of the altitude.
	AltitudeAccuracy *MicrosoftGraphOutlookGeoCoordinates_AltitudeAccuracy `json:"altitudeAccuracy"`

	// Latitude The latitude of the location.
	Latitude *MicrosoftGraphOutlookGeoCoordinates_Latitude `json:"latitude"`

	// Longitude The longitude of the location.
	Longitude *MicrosoftGraphOutlookGeoCoordinates_Longitude `json:"longitude"`
}

// MicrosoftGraphOutlookGeoCoordinatesAccuracy0 defines model for .
type MicrosoftGraphOutlookGeoCoordinatesAccuracy0 = float64

// MicrosoftGraphOutlookGeoCoordinatesAccuracy1 defines model for .
type MicrosoftGraphOutlookGeoCoordinatesAccuracy1 = string

// MicrosoftGraphOutlookGeoCoordinates_Accuracy The accuracy of the latitude and longitude. As an example, the accuracy can be measured in meters, such as the latitude and longitude are accurate to within 50 meters.
type MicrosoftGraphOutlookGeoCoordinates_Accuracy struct {
	union json.RawMessage
}

// MicrosoftGraphOutlookGeoCoordinatesAltitude0 defines model for .
type MicrosoftGraphOutlookGeoCoordinatesAltitude0 = float64

// MicrosoftGraphOutlookGeoCoordinatesAltitude1 defines model for .
type MicrosoftGraphOutlookGeoCoordinatesAltitude1 = string

// MicrosoftGraphOutlookGeoCoordinates_Altitude The altitude of the location.
type MicrosoftGraphOutlookGeoCoordinates_Altitude struct {
	union json.RawMessage
}

// MicrosoftGraphOutlookGeoCoordinatesAltitudeAccuracy0 defines model for .
type MicrosoftGraphOutlookGeoCoordinatesAltitudeAccuracy0 = float64

// MicrosoftGraphOutlookGeoCoordinatesAltitudeAccuracy1 defines model for .
type MicrosoftGraphOutlookGeoCoordinatesAltitudeAccuracy1 = string

// MicrosoftGraphOutlookGeoCoordinates_AltitudeAccuracy The accuracy of the altitude.
type MicrosoftGraphOutlookGeoCoordinates_AltitudeAccuracy struct {
	union json.RawMessage
}

// MicrosoftGraphOutlookGeoCoordinatesLatitude0 defines model for .
type MicrosoftGraphOutlookGeoCoordinatesLatitude0 = float64

// MicrosoftGraphOutlookGeoCoordinatesLatitude1 defines model for .
type MicrosoftGraphOutlookGeoCoordinatesLatitude1 = string

// MicrosoftGraphOutlookGeoCoordinates_Latitude The latitude of the location.
type MicrosoftGraphOutlookGeoCoordinates_Latitude struct {
	union json.RawMessage
}

// MicrosoftGraphOutlookGeoCoordinatesLongitude0 defines model for .
type MicrosoftGraphOutlookGeoCoordinatesLongitude0 = float64

// MicrosoftGraphOutlookGeoCoordinatesLongitude1 defines model for .
type MicrosoftGraphOutlookGeoCoordinatesLongitude1 = string

// MicrosoftGraphOutlookGeoCoordinates_Longitude The longitude of the location.
type MicrosoftGraphOutlookGeoCoordinates_Longitude struct {
	union json.RawMessage
}

// MicrosoftGraphOutlookItem defines model for microsoft.graph.outlookItem.
type MicrosoftGraphOutlookItem struct {
	// Categories The categories associated with the item
	Categories *[]string `json:"categories,omitempty"`

	// ChangeKey Identifies the version of the item. Every time the item is changed, changeKey changes as well. This allows Exchange to apply changes to the correct version of the object. Read-only.
	ChangeKey *string `json:"changeKey"`

	// CreatedDateTime The Timestamp type represents date and time information using ISO 8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 is 2014-01-01T00:00:00Z
	CreatedDateTime *time.Time `json:"createdDateTime"`

	// Id The unique idenfier for an entity. Read-only.
	Id *string `json:"id,omitempty"`

	// LastModifiedDateTime The Timestamp type represents date and time information using ISO 8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 is 2014-01-01T00:00:00Z
	LastModifiedDateTime *time.Time `json:"lastModifiedDateTime"`
}

// MicrosoftGraphOutlookUser defines model for microsoft.graph.outlookUser.
type MicrosoftGraphOutlookUser struct {
	// Id The unique idenfier for an entity. Read-only.
	Id *string `json:"id,omitempty"`

	// MasterCategories A list of categories defined for the user.
	MasterCategories *[]MicrosoftGraphOutlookCategory `json:"masterCategories,omitempty"`
}

// MicrosoftGraphPackage defines model for microsoft.graph.package.
type MicrosoftGraphPackage struct {
	// Type A string indicating the type of package. While oneNote is the only currently defined value, you should expect other package types to be returned and handle them accordingly.
	Type *string `json:"type"`
}

// MicrosoftGraphPageLinks defines model for microsoft.graph.pageLinks.
type MicrosoftGraphPageLinks struct {
	// OneNoteClientUrl Opens the page in the OneNote native client if it's installed.
	OneNoteClientUrl *MicrosoftGraphPageLinks_OneNoteClientUrl `json:"oneNoteClientUrl,omitempty"`

	// OneNoteWebUrl Opens the page in OneNote on the web.
	OneNoteWebUrl *MicrosoftGraphPageLinks_OneNoteWebUrl `json:"oneNoteWebUrl,omitempty"`
}

// MicrosoftGraphPageLinksOneNoteClientUrl1 defines model for .
type MicrosoftGraphPageLinksOneNoteClientUrl1 = map[string]interface{}

// MicrosoftGraphPageLinks_OneNoteClientUrl Opens the page in the OneNote native client if it's installed.
type MicrosoftGraphPageLinks_OneNoteClientUrl struct {
	union json.RawMessage
}

// MicrosoftGraphPageLinksOneNoteWebUrl1 defines model for .
type MicrosoftGraphPageLinksOneNoteWebUrl1 = map[string]interface{}

// MicrosoftGraphPageLinks_OneNoteWebUrl Opens the page in OneNote on the web.
type MicrosoftGraphPageLinks_OneNoteWebUrl struct {
	union json.RawMessage
}

// MicrosoftGraphPasswordAuthenticationMethod defines model for microsoft.graph.passwordAuthenticationMethod.
type MicrosoftGraphPasswordAuthenticationMethod struct {
	// CreatedDateTime The date and time when this password was last updated. This property is currently not populated. Read-only. The Timestamp type represents date and time information using ISO 8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 is 2014-01-01T00:00:00Z.
	CreatedDateTime *time.Time `json:"createdDateTime"`

	// Id The unique idenfier for an entity. Read-only.
	Id *string `json:"id,omitempty"`

	// Password For security, the password is always returned as null from a LIST or GET operation.
	Password *string `json:"password"`
}

// MicrosoftGraphPasswordProfile defines model for microsoft.graph.passwordProfile.
type MicrosoftGraphPasswordProfile struct {
	// ForceChangePasswordNextSignIn true if the user must change her password on the next login; otherwise false.
	ForceChangePasswordNextSignIn *bool `json:"forceChangePasswordNextSignIn"`

	// ForceChangePasswordNextSignInWithMfa If true, at next sign-in, the user must perform a multi-factor authentication (MFA) before being forced to change their password. The behavior is identical to forceChangePasswordNextSignIn except that the user is required to first perform a multi-factor authentication before password change. After a password change, this property will be automatically reset to false. If not set, default is false.
	ForceChangePasswordNextSignInWithMfa *bool `json:"forceChangePasswordNextSignInWithMfa"`

	// Password The password for the user. This property is required when a user is created. It can be updated, but the user will be required to change the password on the next login. The password must satisfy minimum requirements as specified by the user's passwordPolicies property. By default, a strong password is required.
	Password *string `json:"password"`
}

// MicrosoftGraphPatternedRecurrence defines model for microsoft.graph.patternedRecurrence.
type MicrosoftGraphPatternedRecurrence struct {
	// Pattern The frequency of an event.  For access reviews: Do not specify this property for a one-time access review.  Only interval, dayOfMonth, and type (weekly, absoluteMonthly) properties of recurrencePattern are supported.
	Pattern *MicrosoftGraphPatternedRecurrence_Pattern `json:"pattern,omitempty"`

	// Range The duration of an event.
	Range *MicrosoftGraphPatternedRecurrence_Range `json:"range,omitempty"`
}

// MicrosoftGraphPatternedRecurrencePattern1 defines model for .
type MicrosoftGraphPatternedRecurrencePattern1 = map[string]interface{}

// MicrosoftGraphPatternedRecurrence_Pattern The frequency of an event.  For access reviews: Do not specify this property for a one-time access review.  Only interval, dayOfMonth, and type (weekly, absoluteMonthly) properties of recurrencePattern are supported.
type MicrosoftGraphPatternedRecurrence_Pattern struct {
	union json.RawMessage
}

// MicrosoftGraphPatternedRecurrenceRange1 defines model for .
type MicrosoftGraphPatternedRecurrenceRange1 = map[string]interface{}

// MicrosoftGraphPatternedRecurrence_Range The duration of an event.
type MicrosoftGraphPatternedRecurrence_Range struct {
	union json.RawMessage
}

// MicrosoftGraphPendingContentUpdate defines model for microsoft.graph.pendingContentUpdate.
type MicrosoftGraphPendingContentUpdate struct {
	// QueuedDateTime Date and time the pending binary operation was queued in UTC time. Read-only.
	QueuedDateTime *time.Time `json:"queuedDateTime"`
}

// MicrosoftGraphPendingOperations defines model for microsoft.graph.pendingOperations.
type MicrosoftGraphPendingOperations struct {
	// PendingContentUpdate A property that indicates that an operation that might update the binary content of a file is pending completion.
	PendingContentUpdate *MicrosoftGraphPendingOperations_PendingContentUpdate `json:"pendingContentUpdate,omitempty"`
}

// MicrosoftGraphPendingOperationsPendingContentUpdate1 defines model for .
type MicrosoftGraphPendingOperationsPendingContentUpdate1 = map[string]interface{}

// MicrosoftGraphPendingOperations_PendingContentUpdate A property that indicates that an operation that might update the binary content of a file is pending completion.
type MicrosoftGraphPendingOperations_PendingContentUpdate struct {
	union json.RawMessage
}

// MicrosoftGraphPermission defines model for microsoft.graph.permission.
type MicrosoftGraphPermission struct {
	// ExpirationDateTime A format of yyyy-MM-ddTHH:mm:ssZ of DateTimeOffset indicates the expiration time of the permission. DateTime.MinValue indicates there is no expiration set for this permission. Optional.
	ExpirationDateTime  *time.Time                                           `json:"expirationDateTime"`
	GrantedTo           *MicrosoftGraphPermission_GrantedTo                  `json:"grantedTo,omitempty"`
	GrantedToIdentities *[]MicrosoftGraphPermission_GrantedToIdentities_Item `json:"grantedToIdentities,omitempty"`

	// GrantedToIdentitiesV2 For link type permissions, the details of the users to whom permission was granted. Read-only.
	GrantedToIdentitiesV2 *[]MicrosoftGraphPermission_GrantedToIdentitiesV2_Item `json:"grantedToIdentitiesV2,omitempty"`

	// GrantedToV2 For user type permissions, the details of the users and applications for this permission. Read-only.
	GrantedToV2 *MicrosoftGraphPermission_GrantedToV2 `json:"grantedToV2,omitempty"`

	// HasPassword Indicates whether the password is set for this permission. This property only appears in the response. Optional. Read-only. For OneDrive Personal only..
	HasPassword *bool `json:"hasPassword"`

	// Id The unique idenfier for an entity. Read-only.
	Id *string `json:"id,omitempty"`

	// InheritedFrom Provides a reference to the ancestor of the current permission, if it is inherited from an ancestor. Read-only.
	InheritedFrom *MicrosoftGraphPermission_InheritedFrom `json:"inheritedFrom,omitempty"`

	// Invitation Details of any associated sharing invitation for this permission. Read-only.
	Invitation *MicrosoftGraphPermission_Invitation `json:"invitation,omitempty"`

	// Link Provides the link details of the current permission, if it is a link type permissions. Read-only.
	Link *MicrosoftGraphPermission_Link `json:"link,omitempty"`

	// Roles The type of permission, for example, read. See below for the full list of roles. Read-only.
	Roles *[]string `json:"roles,omitempty"`

	// ShareId A unique token that can be used to access this shared item via the shares API. Read-only.
	ShareId *string `json:"shareId"`
}

// MicrosoftGraphPermissionGrantedTo1 defines model for .
type MicrosoftGraphPermissionGrantedTo1 = map[string]interface{}

// MicrosoftGraphPermission_GrantedTo defines model for MicrosoftGraphPermission.GrantedTo.
type MicrosoftGraphPermission_GrantedTo struct {
	union json.RawMessage
}

// MicrosoftGraphPermissionGrantedToIdentities1 defines model for .
type MicrosoftGraphPermissionGrantedToIdentities1 = map[string]interface{}

// MicrosoftGraphPermission_GrantedToIdentities_Item defines model for microsoft.graph.permission.grantedToIdentities.Item.
type MicrosoftGraphPermission_GrantedToIdentities_Item struct {
	union json.RawMessage
}

// MicrosoftGraphPermissionGrantedToIdentitiesV21 defines model for .
type MicrosoftGraphPermissionGrantedToIdentitiesV21 = map[string]interface{}

// MicrosoftGraphPermission_GrantedToIdentitiesV2_Item defines model for microsoft.graph.permission.grantedToIdentitiesV2.Item.
type MicrosoftGraphPermission_GrantedToIdentitiesV2_Item struct {
	union json.RawMessage
}

// MicrosoftGraphPermissionGrantedToV21 defines model for .
type MicrosoftGraphPermissionGrantedToV21 = map[string]interface{}

// MicrosoftGraphPermission_GrantedToV2 For user type permissions, the details of the users and applications for this permission. Read-only.
type MicrosoftGraphPermission_GrantedToV2 struct {
	union json.RawMessage
}

// MicrosoftGraphPermissionInheritedFrom1 defines model for .
type MicrosoftGraphPermissionInheritedFrom1 = map[string]interface{}

// MicrosoftGraphPermission_InheritedFrom Provides a reference to the ancestor of the current permission, if it is inherited from an ancestor. Read-only.
type MicrosoftGraphPermission_InheritedFrom struct {
	union json.RawMessage
}

// MicrosoftGraphPermissionInvitation1 defines model for .
type MicrosoftGraphPermissionInvitation1 = map[string]interface{}

// MicrosoftGraphPermission_Invitation Details of any associated sharing invitation for this permission. Read-only.
type MicrosoftGraphPermission_Invitation struct {
	union json.RawMessage
}

// MicrosoftGraphPermissionLink1 defines model for .
type MicrosoftGraphPermissionLink1 = map[string]interface{}

// MicrosoftGraphPermission_Link Provides the link details of the current permission, if it is a link type permissions. Read-only.
type MicrosoftGraphPermission_Link struct {
	union json.RawMessage
}

// MicrosoftGraphPerson defines model for microsoft.graph.person.
type MicrosoftGraphPerson struct {
	// Birthday The person's birthday.
	Birthday *string `json:"birthday"`

	// CompanyName The name of the person's company.
	CompanyName *string `json:"companyName"`

	// Department The person's department.
	Department *string `json:"department"`

	// DisplayName The person's display name.
	DisplayName *string `json:"displayName"`

	// GivenName The person's given name.
	GivenName *string `json:"givenName"`

	// Id The unique idenfier for an entity. Read-only.
	Id *string `json:"id,omitempty"`

	// ImAddress The instant message voice over IP (VOIP) session initiation protocol (SIP) address for the user. Read-only.
	ImAddress *string `json:"imAddress"`

	// IsFavorite True if the user has flagged this person as a favorite.
	IsFavorite *bool `json:"isFavorite"`

	// JobTitle The person's job title.
	JobTitle *string `json:"jobTitle"`

	// OfficeLocation The location of the person's office.
	OfficeLocation *string `json:"officeLocation"`

	// PersonNotes Free-form notes that the user has taken about this person.
	PersonNotes *string `json:"personNotes"`

	// PersonType The type of person.
	PersonType *MicrosoftGraphPerson_PersonType `json:"personType,omitempty"`

	// Phones The person's phone numbers.
	Phones *[]MicrosoftGraphPerson_Phones_Item `json:"phones,omitempty"`

	// PostalAddresses The person's addresses.
	PostalAddresses *[]MicrosoftGraphPerson_PostalAddresses_Item `json:"postalAddresses,omitempty"`

	// Profession The person's profession.
	Profession *string `json:"profession"`

	// ScoredEmailAddresses The person's email addresses.
	ScoredEmailAddresses *[]MicrosoftGraphPerson_ScoredEmailAddresses_Item `json:"scoredEmailAddresses,omitempty"`

	// Surname The person's surname.
	Surname *string `json:"surname"`

	// UserPrincipalName The user principal name (UPN) of the person. The UPN is an Internet-style login name for the person based on the Internet standard RFC 822. By convention, this should map to the person's email name. The general format is alias@domain.
	UserPrincipalName *string `json:"userPrincipalName"`

	// Websites The person's websites.
	Websites *[]MicrosoftGraphPerson_Websites_Item `json:"websites,omitempty"`

	// YomiCompany The phonetic Japanese name of the person's company.
	YomiCompany *string `json:"yomiCompany"`
}

// MicrosoftGraphPersonPersonType1 defines model for .
type MicrosoftGraphPersonPersonType1 = map[string]interface{}

// MicrosoftGraphPerson_PersonType The type of person.
type MicrosoftGraphPerson_PersonType struct {
	union json.RawMessage
}

// MicrosoftGraphPersonPhones1 defines model for .
type MicrosoftGraphPersonPhones1 = map[string]interface{}

// MicrosoftGraphPerson_Phones_Item defines model for microsoft.graph.person.phones.Item.
type MicrosoftGraphPerson_Phones_Item struct {
	union json.RawMessage
}

// MicrosoftGraphPersonPostalAddresses1 defines model for .
type MicrosoftGraphPersonPostalAddresses1 = map[string]interface{}

// MicrosoftGraphPerson_PostalAddresses_Item defines model for microsoft.graph.person.postalAddresses.Item.
type MicrosoftGraphPerson_PostalAddresses_Item struct {
	union json.RawMessage
}

// MicrosoftGraphPersonScoredEmailAddresses1 defines model for .
type MicrosoftGraphPersonScoredEmailAddresses1 = map[string]interface{}

// MicrosoftGraphPerson_ScoredEmailAddresses_Item defines model for microsoft.graph.person.scoredEmailAddresses.Item.
type MicrosoftGraphPerson_ScoredEmailAddresses_Item struct {
	union json.RawMessage
}

// MicrosoftGraphPersonWebsites1 defines model for .
type MicrosoftGraphPersonWebsites1 = map[string]interface{}

// MicrosoftGraphPerson_Websites_Item defines model for microsoft.graph.person.websites.Item.
type MicrosoftGraphPerson_Websites_Item struct {
	union json.RawMessage
}

// MicrosoftGraphPersonOrGroupColumn defines model for microsoft.graph.personOrGroupColumn.
type MicrosoftGraphPersonOrGroupColumn struct {
	// AllowMultipleSelection Indicates whether multiple values can be selected from the source.
	AllowMultipleSelection *bool `json:"allowMultipleSelection"`

	// ChooseFromType Whether to allow selection of people only, or people and groups. Must be one of peopleAndGroups or peopleOnly.
	ChooseFromType *string `json:"chooseFromType"`

	// DisplayAs How to display the information about the person or group chosen. See below.
	DisplayAs *string `json:"displayAs"`
}

// MicrosoftGraphPersonType defines model for microsoft.graph.personType.
type MicrosoftGraphPersonType struct {
	// Class The type of data source, such as Person.
	Class *string `json:"class"`

	// Subclass The secondary type of data source, such as OrganizationUser.
	Subclass *string `json:"subclass"`
}

// MicrosoftGraphPhone defines model for microsoft.graph.phone.
type MicrosoftGraphPhone struct {
	Language *string `json:"language"`

	// Number The phone number.
	Number *string `json:"number"`
	Region *string `json:"region"`

	// Type The type of phone number. The possible values are: home, business, mobile, other, assistant, homeFax, businessFax, otherFax, pager, radio.
	Type *MicrosoftGraphPhone_Type `json:"type,omitempty"`
}

// MicrosoftGraphPhoneType1 defines model for .
type MicrosoftGraphPhoneType1 = map[string]interface{}

// MicrosoftGraphPhone_Type The type of phone number. The possible values are: home, business, mobile, other, assistant, homeFax, businessFax, otherFax, pager, radio.
type MicrosoftGraphPhone_Type struct {
	union json.RawMessage
}

// MicrosoftGraphPhoneAuthenticationMethod defines model for microsoft.graph.phoneAuthenticationMethod.
type MicrosoftGraphPhoneAuthenticationMethod struct {
	// Id The unique idenfier for an entity. Read-only.
	Id *string `json:"id,omitempty"`

	// PhoneNumber The phone number to text or call for authentication. Phone numbers use the format +{country code} {number}x{extension}, with extension optional. For example, +1 5555551234 or +1 5555551234x123 are valid. Numbers are rejected when creating or updating if they do not match the required format.
	PhoneNumber *string `json:"phoneNumber"`

	// PhoneType The type of this phone. Possible values are: mobile, alternateMobile, or office.
	PhoneType *MicrosoftGraphPhoneAuthenticationMethod_PhoneType `json:"phoneType,omitempty"`

	// SmsSignInState Whether a phone is ready to be used for SMS sign-in or not. Possible values are: notSupported, notAllowedByPolicy, notEnabled, phoneNumberNotUnique, ready, or notConfigured, unknownFutureValue.
	SmsSignInState *MicrosoftGraphPhoneAuthenticationMethod_SmsSignInState `json:"smsSignInState,omitempty"`
}

// MicrosoftGraphPhoneAuthenticationMethodPhoneType1 defines model for .
type MicrosoftGraphPhoneAuthenticationMethodPhoneType1 = map[string]interface{}

// MicrosoftGraphPhoneAuthenticationMethod_PhoneType The type of this phone. Possible values are: mobile, alternateMobile, or office.
type MicrosoftGraphPhoneAuthenticationMethod_PhoneType struct {
	union json.RawMessage
}

// MicrosoftGraphPhoneAuthenticationMethodSmsSignInState1 defines model for .
type MicrosoftGraphPhoneAuthenticationMethodSmsSignInState1 = map[string]interface{}

// MicrosoftGraphPhoneAuthenticationMethod_SmsSignInState Whether a phone is ready to be used for SMS sign-in or not. Possible values are: notSupported, notAllowedByPolicy, notEnabled, phoneNumberNotUnique, ready, or notConfigured, unknownFutureValue.
type MicrosoftGraphPhoneAuthenticationMethod_SmsSignInState struct {
	union json.RawMessage
}

// MicrosoftGraphPhoneType defines model for microsoft.graph.phoneType.
type MicrosoftGraphPhoneType string

// MicrosoftGraphPhoto defines model for microsoft.graph.photo.
type MicrosoftGraphPhoto struct {
	// CameraMake Camera manufacturer. Read-only.
	CameraMake *string `json:"cameraMake"`

	// CameraModel Camera model. Read-only.
	CameraModel *string `json:"cameraModel"`

	// ExposureDenominator The denominator for the exposure time fraction from the camera. Read-only.
	ExposureDenominator *MicrosoftGraphPhoto_ExposureDenominator `json:"exposureDenominator"`

	// ExposureNumerator The numerator for the exposure time fraction from the camera. Read-only.
	ExposureNumerator *MicrosoftGraphPhoto_ExposureNumerator `json:"exposureNumerator"`

	// FNumber The F-stop value from the camera. Read-only.
	FNumber *MicrosoftGraphPhoto_FNumber `json:"fNumber"`

	// FocalLength The focal length from the camera. Read-only.
	FocalLength *MicrosoftGraphPhoto_FocalLength `json:"focalLength"`

	// Iso The ISO value from the camera. Read-only.
	Iso *int32 `json:"iso"`

	// Orientation The orientation value from the camera. Writable on OneDrive Personal.
	Orientation *int16 `json:"orientation"`

	// TakenDateTime Represents the date and time the photo was taken. Read-only.
	TakenDateTime *time.Time `json:"takenDateTime"`
}

// MicrosoftGraphPhotoExposureDenominator0 defines model for .
type MicrosoftGraphPhotoExposureDenominator0 = float64

// MicrosoftGraphPhotoExposureDenominator1 defines model for .
type MicrosoftGraphPhotoExposureDenominator1 = string

// MicrosoftGraphPhoto_ExposureDenominator The denominator for the exposure time fraction from the camera. Read-only.
type MicrosoftGraphPhoto_ExposureDenominator struct {
	union json.RawMessage
}

// MicrosoftGraphPhotoExposureNumerator0 defines model for .
type MicrosoftGraphPhotoExposureNumerator0 = float64

// MicrosoftGraphPhotoExposureNumerator1 defines model for .
type MicrosoftGraphPhotoExposureNumerator1 = string

// MicrosoftGraphPhoto_ExposureNumerator The numerator for the exposure time fraction from the camera. Read-only.
type MicrosoftGraphPhoto_ExposureNumerator struct {
	union json.RawMessage
}

// MicrosoftGraphPhotoFNumber0 defines model for .
type MicrosoftGraphPhotoFNumber0 = float64

// MicrosoftGraphPhotoFNumber1 defines model for .
type MicrosoftGraphPhotoFNumber1 = string

// MicrosoftGraphPhoto_FNumber The F-stop value from the camera. Read-only.
type MicrosoftGraphPhoto_FNumber struct {
	union json.RawMessage
}

// MicrosoftGraphPhotoFocalLength0 defines model for .
type MicrosoftGraphPhotoFocalLength0 = float64

// MicrosoftGraphPhotoFocalLength1 defines model for .
type MicrosoftGraphPhotoFocalLength1 = string

// MicrosoftGraphPhoto_FocalLength The focal length from the camera. Read-only.
type MicrosoftGraphPhoto_FocalLength struct {
	union json.RawMessage
}

// MicrosoftGraphPhysicalAddress defines model for microsoft.graph.physicalAddress.
type MicrosoftGraphPhysicalAddress struct {
	// City The city.
	City *string `json:"city"`

	// CountryOrRegion The country or region. It's a free-format string value, for example, 'United States'.
	CountryOrRegion *string `json:"countryOrRegion"`

	// PostalCode The postal code.
	PostalCode *string `json:"postalCode"`

	// State The state.
	State *string `json:"state"`

	// Street The street.
	Street *string `json:"street"`
}

// MicrosoftGraphPinnedChatMessageInfo defines model for microsoft.graph.pinnedChatMessageInfo.
type MicrosoftGraphPinnedChatMessageInfo struct {
	// Id The unique idenfier for an entity. Read-only.
	Id *string `json:"id,omitempty"`

	// Message Represents details about the chat message that is pinned.
	Message *MicrosoftGraphPinnedChatMessageInfo_Message `json:"message,omitempty"`
}

// MicrosoftGraphPinnedChatMessageInfoMessage1 defines model for .
type MicrosoftGraphPinnedChatMessageInfoMessage1 = map[string]interface{}

// MicrosoftGraphPinnedChatMessageInfo_Message Represents details about the chat message that is pinned.
type MicrosoftGraphPinnedChatMessageInfo_Message struct {
	union json.RawMessage
}

// MicrosoftGraphPlannerAppliedCategories defines model for microsoft.graph.plannerAppliedCategories.
type MicrosoftGraphPlannerAppliedCategories = map[string]interface{}

// MicrosoftGraphPlannerAssignedToTaskBoardTaskFormat defines model for microsoft.graph.plannerAssignedToTaskBoardTaskFormat.
type MicrosoftGraphPlannerAssignedToTaskBoardTaskFormat struct {
	// Id The unique idenfier for an entity. Read-only.
	Id *string `json:"id,omitempty"`

	// OrderHintsByAssignee Dictionary of hints used to order tasks on the AssignedTo view of the Task Board. The key of each entry is one of the users the task is assigned to and the value is the order hint. The format of each value is defined as outlined here.
	OrderHintsByAssignee *MicrosoftGraphPlannerAssignedToTaskBoardTaskFormat_OrderHintsByAssignee `json:"orderHintsByAssignee,omitempty"`

	// UnassignedOrderHint Hint value used to order the task on the AssignedTo view of the Task Board when the task is not assigned to anyone, or if the orderHintsByAssignee dictionary does not provide an order hint for the user the task is assigned to. The format is defined as outlined here.
	UnassignedOrderHint *string `json:"unassignedOrderHint"`
}

// MicrosoftGraphPlannerAssignedToTaskBoardTaskFormatOrderHintsByAssignee1 defines model for .
type MicrosoftGraphPlannerAssignedToTaskBoardTaskFormatOrderHintsByAssignee1 = map[string]interface{}

// MicrosoftGraphPlannerAssignedToTaskBoardTaskFormat_OrderHintsByAssignee Dictionary of hints used to order tasks on the AssignedTo view of the Task Board. The key of each entry is one of the users the task is assigned to and the value is the order hint. The format of each value is defined as outlined here.
type MicrosoftGraphPlannerAssignedToTaskBoardTaskFormat_OrderHintsByAssignee struct {
	union json.RawMessage
}

// MicrosoftGraphPlannerAssignments defines model for microsoft.graph.plannerAssignments.
type MicrosoftGraphPlannerAssignments = map[string]interface{}

// MicrosoftGraphPlannerBucket defines model for microsoft.graph.plannerBucket.
type MicrosoftGraphPlannerBucket struct {
	// Id The unique idenfier for an entity. Read-only.
	Id *string `json:"id,omitempty"`

	// Name Name of the bucket.
	Name *string `json:"name,omitempty"`

	// OrderHint Hint used to order items of this type in a list view. For details about the supported format, see Using order hints in Planner.
	OrderHint *string `json:"orderHint"`

	// PlanId Plan ID to which the bucket belongs.
	PlanId *string `json:"planId"`

	// Tasks Read-only. Nullable. The collection of tasks in the bucket.
	Tasks *[]MicrosoftGraphPlannerTask `json:"tasks,omitempty"`
}

// MicrosoftGraphPlannerBucketTaskBoardTaskFormat defines model for microsoft.graph.plannerBucketTaskBoardTaskFormat.
type MicrosoftGraphPlannerBucketTaskBoardTaskFormat struct {
	// Id The unique idenfier for an entity. Read-only.
	Id *string `json:"id,omitempty"`

	// OrderHint Hint used to order tasks in the bucket view of the task board. For details about the supported format, see Using order hints in Planner.
	OrderHint *string `json:"orderHint"`
}

// MicrosoftGraphPlannerCategoryDescriptions defines model for microsoft.graph.plannerCategoryDescriptions.
type MicrosoftGraphPlannerCategoryDescriptions struct {
	// Category1 The label associated with Category 1
	Category1 *string `json:"category1"`

	// Category10 The label associated with Category 10
	Category10 *string `json:"category10"`

	// Category11 The label associated with Category 11
	Category11 *string `json:"category11"`

	// Category12 The label associated with Category 12
	Category12 *string `json:"category12"`

	// Category13 The label associated with Category 13
	Category13 *string `json:"category13"`

	// Category14 The label associated with Category 14
	Category14 *string `json:"category14"`

	// Category15 The label associated with Category 15
	Category15 *string `json:"category15"`

	// Category16 The label associated with Category 16
	Category16 *string `json:"category16"`

	// Category17 The label associated with Category 17
	Category17 *string `json:"category17"`

	// Category18 The label associated with Category 18
	Category18 *string `json:"category18"`

	// Category19 The label associated with Category 19
	Category19 *string `json:"category19"`

	// Category2 The label associated with Category 2
	Category2 *string `json:"category2"`

	// Category20 The label associated with Category 20
	Category20 *string `json:"category20"`

	// Category21 The label associated with Category 21
	Category21 *string `json:"category21"`

	// Category22 The label associated with Category 22
	Category22 *string `json:"category22"`

	// Category23 The label associated with Category 23
	Category23 *string `json:"category23"`

	// Category24 The label associated with Category 24
	Category24 *string `json:"category24"`

	// Category25 The label associated with Category 25
	Category25 *string `json:"category25"`

	// Category3 The label associated with Category 3
	Category3 *string `json:"category3"`

	// Category4 The label associated with Category 4
	Category4 *string `json:"category4"`

	// Category5 The label associated with Category 5
	Category5 *string `json:"category5"`

	// Category6 The label associated with Category 6
	Category6 *string `json:"category6"`

	// Category7 The label associated with Category 7
	Category7 *string `json:"category7"`

	// Category8 The label associated with Category 8
	Category8 *string `json:"category8"`

	// Category9 The label associated with Category 9
	Category9 *string `json:"category9"`
}

// MicrosoftGraphPlannerChecklistItems defines model for microsoft.graph.plannerChecklistItems.
type MicrosoftGraphPlannerChecklistItems = map[string]interface{}

// MicrosoftGraphPlannerContainerType defines model for microsoft.graph.plannerContainerType.
type MicrosoftGraphPlannerContainerType string

// MicrosoftGraphPlannerExternalReferences defines model for microsoft.graph.plannerExternalReferences.
type MicrosoftGraphPlannerExternalReferences = map[string]interface{}

// MicrosoftGraphPlannerGroup defines model for microsoft.graph.plannerGroup.
type MicrosoftGraphPlannerGroup struct {
	// Id The unique idenfier for an entity. Read-only.
	Id *string `json:"id,omitempty"`

	// Plans Read-only. Nullable. Returns the plannerPlans owned by the group.
	Plans *[]MicrosoftGraphPlannerPlan `json:"plans,omitempty"`
}

// MicrosoftGraphPlannerOrderHintsByAssignee defines model for microsoft.graph.plannerOrderHintsByAssignee.
type MicrosoftGraphPlannerOrderHintsByAssignee = map[string]interface{}

// MicrosoftGraphPlannerPlan defines model for microsoft.graph.plannerPlan.
type MicrosoftGraphPlannerPlan struct {
	// Buckets Read-only. Nullable. Collection of buckets in the plan.
	Buckets *[]MicrosoftGraphPlannerBucket `json:"buckets,omitempty"`

	// Container Identifies the container of the plan. Specify only the url, the containerId and type, or all properties. After it is set, this property can’t be updated. Required.
	Container *MicrosoftGraphPlannerPlan_Container `json:"container,omitempty"`

	// CreatedBy Read-only. The user who created the plan.
	CreatedBy *MicrosoftGraphPlannerPlan_CreatedBy `json:"createdBy,omitempty"`

	// CreatedDateTime Read-only. Date and time at which the plan is created. The Timestamp type represents date and time information using ISO 8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 is 2014-01-01T00:00:00Z
	CreatedDateTime *time.Time `json:"createdDateTime"`

	// Details Read-only. Nullable. Additional details about the plan.
	Details *MicrosoftGraphPlannerPlan_Details `json:"details,omitempty"`

	// Id The unique idenfier for an entity. Read-only.
	Id    *string `json:"id,omitempty"`
	Owner *string `json:"owner"`

	// Tasks Read-only. Nullable. Collection of tasks in the plan.
	Tasks *[]MicrosoftGraphPlannerTask `json:"tasks,omitempty"`

	// Title Required. Title of the plan.
	Title *string `json:"title,omitempty"`
}

// MicrosoftGraphPlannerPlanContainer1 defines model for .
type MicrosoftGraphPlannerPlanContainer1 = map[string]interface{}

// MicrosoftGraphPlannerPlan_Container Identifies the container of the plan. Specify only the url, the containerId and type, or all properties. After it is set, this property can’t be updated. Required.
type MicrosoftGraphPlannerPlan_Container struct {
	union json.RawMessage
}

// MicrosoftGraphPlannerPlanCreatedBy1 defines model for .
type MicrosoftGraphPlannerPlanCreatedBy1 = map[string]interface{}

// MicrosoftGraphPlannerPlan_CreatedBy Read-only. The user who created the plan.
type MicrosoftGraphPlannerPlan_CreatedBy struct {
	union json.RawMessage
}

// MicrosoftGraphPlannerPlanDetails1 defines model for .
type MicrosoftGraphPlannerPlanDetails1 = map[string]interface{}

// MicrosoftGraphPlannerPlan_Details Read-only. Nullable. Additional details about the plan.
type MicrosoftGraphPlannerPlan_Details struct {
	union json.RawMessage
}

// MicrosoftGraphPlannerPlanContainer defines model for microsoft.graph.plannerPlanContainer.
type MicrosoftGraphPlannerPlanContainer struct {
	// ContainerId The identifier of the resource that contains the plan. Optional.
	ContainerId *string `json:"containerId"`

	// Type The type of the resource that contains the plan. For supported types, see the previous table. Possible values are: group, unknownFutureValue, roster. Note that you must use the Prefer: include-unknown-enum-members request header to get the following value in this evolvable enum: roster. Optional.
	Type *MicrosoftGraphPlannerPlanContainer_Type `json:"type,omitempty"`

	// Url The full canonical URL of the container. Optional.
	Url *string `json:"url"`
}

// MicrosoftGraphPlannerPlanContainerType1 defines model for .
type MicrosoftGraphPlannerPlanContainerType1 = map[string]interface{}

// MicrosoftGraphPlannerPlanContainer_Type The type of the resource that contains the plan. For supported types, see the previous table. Possible values are: group, unknownFutureValue, roster. Note that you must use the Prefer: include-unknown-enum-members request header to get the following value in this evolvable enum: roster. Optional.
type MicrosoftGraphPlannerPlanContainer_Type struct {
	union json.RawMessage
}

// MicrosoftGraphPlannerPlanDetails defines model for microsoft.graph.plannerPlanDetails.
type MicrosoftGraphPlannerPlanDetails struct {
	// CategoryDescriptions An object that specifies the descriptions of the 25 categories that can be associated with tasks in the plan.
	CategoryDescriptions *MicrosoftGraphPlannerPlanDetails_CategoryDescriptions `json:"categoryDescriptions,omitempty"`

	// Id The unique idenfier for an entity. Read-only.
	Id *string `json:"id,omitempty"`

	// SharedWith Set of user IDs that this plan is shared with. If you are leveraging Microsoft 365 groups, use the Groups API to manage group membership to share the group's plan. You can also add existing members of the group to this collection, although it is not required for them to access the plan owned by the group.
	SharedWith *MicrosoftGraphPlannerPlanDetails_SharedWith `json:"sharedWith,omitempty"`
}

// MicrosoftGraphPlannerPlanDetailsCategoryDescriptions1 defines model for .
type MicrosoftGraphPlannerPlanDetailsCategoryDescriptions1 = map[string]interface{}

// MicrosoftGraphPlannerPlanDetails_CategoryDescriptions An object that specifies the descriptions of the 25 categories that can be associated with tasks in the plan.
type MicrosoftGraphPlannerPlanDetails_CategoryDescriptions struct {
	union json.RawMessage
}

// MicrosoftGraphPlannerPlanDetailsSharedWith1 defines model for .
type MicrosoftGraphPlannerPlanDetailsSharedWith1 = map[string]interface{}

// MicrosoftGraphPlannerPlanDetails_SharedWith Set of user IDs that this plan is shared with. If you are leveraging Microsoft 365 groups, use the Groups API to manage group membership to share the group's plan. You can also add existing members of the group to this collection, although it is not required for them to access the plan owned by the group.
type MicrosoftGraphPlannerPlanDetails_SharedWith struct {
	union json.RawMessage
}

// MicrosoftGraphPlannerPreviewType defines model for microsoft.graph.plannerPreviewType.
type MicrosoftGraphPlannerPreviewType string

// MicrosoftGraphPlannerProgressTaskBoardTaskFormat defines model for microsoft.graph.plannerProgressTaskBoardTaskFormat.
type MicrosoftGraphPlannerProgressTaskBoardTaskFormat struct {
	// Id The unique idenfier for an entity. Read-only.
	Id *string `json:"id,omitempty"`

	// OrderHint Hint value used to order the task on the progress view of the task board. For details about the supported format, see Using order hints in Planner.
	OrderHint *string `json:"orderHint"`
}

// MicrosoftGraphPlannerTask defines model for microsoft.graph.plannerTask.
type MicrosoftGraphPlannerTask struct {
	// ActiveChecklistItemCount Number of checklist items with value set to false, representing incomplete items.
	ActiveChecklistItemCount *int32 `json:"activeChecklistItemCount"`

	// AppliedCategories The categories to which the task has been applied. See applied Categories for possible values.
	AppliedCategories *MicrosoftGraphPlannerTask_AppliedCategories `json:"appliedCategories,omitempty"`

	// AssignedToTaskBoardFormat Read-only. Nullable. Used to render the task correctly in the task board view when grouped by assignedTo.
	AssignedToTaskBoardFormat *MicrosoftGraphPlannerTask_AssignedToTaskBoardFormat `json:"assignedToTaskBoardFormat,omitempty"`

	// AssigneePriority Hint used to order items of this type in a list view. The format is defined as outlined here.
	AssigneePriority *string `json:"assigneePriority"`

	// Assignments The set of assignees the task is assigned to.
	Assignments *MicrosoftGraphPlannerTask_Assignments `json:"assignments,omitempty"`

	// BucketId Bucket ID to which the task belongs. The bucket needs to be in the plan that the task is in. It is 28 characters long and case-sensitive. Format validation is done on the service.
	BucketId *string `json:"bucketId"`

	// BucketTaskBoardFormat Read-only. Nullable. Used to render the task correctly in the task board view when grouped by bucket.
	BucketTaskBoardFormat *MicrosoftGraphPlannerTask_BucketTaskBoardFormat `json:"bucketTaskBoardFormat,omitempty"`

	// ChecklistItemCount Number of checklist items that are present on the task.
	ChecklistItemCount *int32 `json:"checklistItemCount"`

	// CompletedBy Identity of the user that completed the task.
	CompletedBy *MicrosoftGraphPlannerTask_CompletedBy `json:"completedBy,omitempty"`

	// CompletedDateTime Read-only. Date and time at which the 'percentComplete' of the task is set to '100'. The Timestamp type represents date and time information using ISO 8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 is 2014-01-01T00:00:00Z
	CompletedDateTime *time.Time `json:"completedDateTime"`

	// ConversationThreadId Thread ID of the conversation on the task. This is the ID of the conversation thread object created in the group.
	ConversationThreadId *string `json:"conversationThreadId"`

	// CreatedBy Identity of the user that created the task.
	CreatedBy *MicrosoftGraphPlannerTask_CreatedBy `json:"createdBy,omitempty"`

	// CreatedDateTime Read-only. Date and time at which the task is created. The Timestamp type represents date and time information using ISO 8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 is 2014-01-01T00:00:00Z
	CreatedDateTime *time.Time `json:"createdDateTime"`

	// Details Read-only. Nullable. Additional details about the task.
	Details *MicrosoftGraphPlannerTask_Details `json:"details,omitempty"`

	// DueDateTime Date and time at which the task is due. The Timestamp type represents date and time information using ISO 8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 is 2014-01-01T00:00:00Z
	DueDateTime *time.Time `json:"dueDateTime"`

	// HasDescription Read-only. Value is true if the details object of the task has a non-empty description and false otherwise.
	HasDescription *bool `json:"hasDescription"`

	// Id The unique idenfier for an entity. Read-only.
	Id *string `json:"id,omitempty"`

	// OrderHint Hint used to order items of this type in a list view. The format is defined as outlined here.
	OrderHint *string `json:"orderHint"`

	// PercentComplete Percentage of task completion. When set to 100, the task is considered completed.
	PercentComplete *int32 `json:"percentComplete"`

	// PlanId Plan ID to which the task belongs.
	PlanId *string `json:"planId"`

	// PreviewType This sets the type of preview that shows up on the task. The possible values are: automatic, noPreview, checklist, description, reference.
	PreviewType *MicrosoftGraphPlannerTask_PreviewType `json:"previewType,omitempty"`

	// Priority Priority of the task. The valid range of values is between 0 and 10, with the increasing value being lower priority (0 has the highest priority and 10 has the lowest priority).  Currently, Planner interprets values 0 and 1 as 'urgent', 2, 3 and 4 as 'important', 5, 6, and 7 as 'medium', and 8, 9, and 10 as 'low'.  Additionally, Planner sets the value 1 for 'urgent', 3 for 'important', 5 for 'medium', and 9 for 'low'.
	Priority *int32 `json:"priority"`

	// ProgressTaskBoardFormat Read-only. Nullable. Used to render the task correctly in the task board view when grouped by progress.
	ProgressTaskBoardFormat *MicrosoftGraphPlannerTask_ProgressTaskBoardFormat `json:"progressTaskBoardFormat,omitempty"`

	// ReferenceCount Number of external references that exist on the task.
	ReferenceCount *int32 `json:"referenceCount"`

	// StartDateTime Date and time at which the task starts. The Timestamp type represents date and time information using ISO 8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 is 2014-01-01T00:00:00Z
	StartDateTime *time.Time `json:"startDateTime"`

	// Title Title of the task.
	Title *string `json:"title,omitempty"`
}

// MicrosoftGraphPlannerTaskAppliedCategories1 defines model for .
type MicrosoftGraphPlannerTaskAppliedCategories1 = map[string]interface{}

// MicrosoftGraphPlannerTask_AppliedCategories The categories to which the task has been applied. See applied Categories for possible values.
type MicrosoftGraphPlannerTask_AppliedCategories struct {
	union json.RawMessage
}

// MicrosoftGraphPlannerTaskAssignedToTaskBoardFormat1 defines model for .
type MicrosoftGraphPlannerTaskAssignedToTaskBoardFormat1 = map[string]interface{}

// MicrosoftGraphPlannerTask_AssignedToTaskBoardFormat Read-only. Nullable. Used to render the task correctly in the task board view when grouped by assignedTo.
type MicrosoftGraphPlannerTask_AssignedToTaskBoardFormat struct {
	union json.RawMessage
}

// MicrosoftGraphPlannerTaskAssignments1 defines model for .
type MicrosoftGraphPlannerTaskAssignments1 = map[string]interface{}

// MicrosoftGraphPlannerTask_Assignments The set of assignees the task is assigned to.
type MicrosoftGraphPlannerTask_Assignments struct {
	union json.RawMessage
}

// MicrosoftGraphPlannerTaskBucketTaskBoardFormat1 defines model for .
type MicrosoftGraphPlannerTaskBucketTaskBoardFormat1 = map[string]interface{}

// MicrosoftGraphPlannerTask_BucketTaskBoardFormat Read-only. Nullable. Used to render the task correctly in the task board view when grouped by bucket.
type MicrosoftGraphPlannerTask_BucketTaskBoardFormat struct {
	union json.RawMessage
}

// MicrosoftGraphPlannerTaskCompletedBy1 defines model for .
type MicrosoftGraphPlannerTaskCompletedBy1 = map[string]interface{}

// MicrosoftGraphPlannerTask_CompletedBy Identity of the user that completed the task.
type MicrosoftGraphPlannerTask_CompletedBy struct {
	union json.RawMessage
}

// MicrosoftGraphPlannerTaskCreatedBy1 defines model for .
type MicrosoftGraphPlannerTaskCreatedBy1 = map[string]interface{}

// MicrosoftGraphPlannerTask_CreatedBy Identity of the user that created the task.
type MicrosoftGraphPlannerTask_CreatedBy struct {
	union json.RawMessage
}

// MicrosoftGraphPlannerTaskDetails1 defines model for .
type MicrosoftGraphPlannerTaskDetails1 = map[string]interface{}

// MicrosoftGraphPlannerTask_Details Read-only. Nullable. Additional details about the task.
type MicrosoftGraphPlannerTask_Details struct {
	union json.RawMessage
}

// MicrosoftGraphPlannerTaskPreviewType1 defines model for .
type MicrosoftGraphPlannerTaskPreviewType1 = map[string]interface{}

// MicrosoftGraphPlannerTask_PreviewType This sets the type of preview that shows up on the task. The possible values are: automatic, noPreview, checklist, description, reference.
type MicrosoftGraphPlannerTask_PreviewType struct {
	union json.RawMessage
}

// MicrosoftGraphPlannerTaskProgressTaskBoardFormat1 defines model for .
type MicrosoftGraphPlannerTaskProgressTaskBoardFormat1 = map[string]interface{}

// MicrosoftGraphPlannerTask_ProgressTaskBoardFormat Read-only. Nullable. Used to render the task correctly in the task board view when grouped by progress.
type MicrosoftGraphPlannerTask_ProgressTaskBoardFormat struct {
	union json.RawMessage
}

// MicrosoftGraphPlannerTaskDetails defines model for microsoft.graph.plannerTaskDetails.
type MicrosoftGraphPlannerTaskDetails struct {
	// Checklist The collection of checklist items on the task.
	Checklist *MicrosoftGraphPlannerTaskDetails_Checklist `json:"checklist,omitempty"`

	// Description Description of the task.
	Description *string `json:"description"`

	// Id The unique idenfier for an entity. Read-only.
	Id *string `json:"id,omitempty"`

	// PreviewType This sets the type of preview that shows up on the task. The possible values are: automatic, noPreview, checklist, description, reference. When set to automatic the displayed preview is chosen by the app viewing the task.
	PreviewType *MicrosoftGraphPlannerTaskDetails_PreviewType `json:"previewType,omitempty"`

	// References The collection of references on the task.
	References *MicrosoftGraphPlannerTaskDetails_References `json:"references,omitempty"`
}

// MicrosoftGraphPlannerTaskDetailsChecklist1 defines model for .
type MicrosoftGraphPlannerTaskDetailsChecklist1 = map[string]interface{}

// MicrosoftGraphPlannerTaskDetails_Checklist The collection of checklist items on the task.
type MicrosoftGraphPlannerTaskDetails_Checklist struct {
	union json.RawMessage
}

// MicrosoftGraphPlannerTaskDetailsPreviewType1 defines model for .
type MicrosoftGraphPlannerTaskDetailsPreviewType1 = map[string]interface{}

// MicrosoftGraphPlannerTaskDetails_PreviewType This sets the type of preview that shows up on the task. The possible values are: automatic, noPreview, checklist, description, reference. When set to automatic the displayed preview is chosen by the app viewing the task.
type MicrosoftGraphPlannerTaskDetails_PreviewType struct {
	union json.RawMessage
}

// MicrosoftGraphPlannerTaskDetailsReferences1 defines model for .
type MicrosoftGraphPlannerTaskDetailsReferences1 = map[string]interface{}

// MicrosoftGraphPlannerTaskDetails_References The collection of references on the task.
type MicrosoftGraphPlannerTaskDetails_References struct {
	union json.RawMessage
}

// MicrosoftGraphPlannerUser defines model for microsoft.graph.plannerUser.
type MicrosoftGraphPlannerUser struct {
	// Id The unique idenfier for an entity. Read-only.
	Id *string `json:"id,omitempty"`

	// Plans Read-only. Nullable. Returns the plannerTasks assigned to the user.
	Plans *[]MicrosoftGraphPlannerPlan `json:"plans,omitempty"`

	// Tasks Read-only. Nullable. Returns the plannerPlans shared with the user.
	Tasks *[]MicrosoftGraphPlannerTask `json:"tasks,omitempty"`
}

// MicrosoftGraphPlannerUserIds defines model for microsoft.graph.plannerUserIds.
type MicrosoftGraphPlannerUserIds = map[string]interface{}

// MicrosoftGraphPolicyPlatformType Supported platform types for policies.
type MicrosoftGraphPolicyPlatformType string

// MicrosoftGraphPost defines model for microsoft.graph.post.
type MicrosoftGraphPost struct {
	// Attachments Read-only. Nullable. Supports $expand.
	Attachments *[]MicrosoftGraphAttachment `json:"attachments,omitempty"`

	// Body The contents of the post. This is a default property. This property can be null.
	Body *MicrosoftGraphPost_Body `json:"body,omitempty"`

	// Categories The categories associated with the item
	Categories *[]string `json:"categories,omitempty"`

	// ChangeKey Identifies the version of the item. Every time the item is changed, changeKey changes as well. This allows Exchange to apply changes to the correct version of the object. Read-only.
	ChangeKey *string `json:"changeKey"`

	// ConversationId Unique ID of the conversation. Read-only.
	ConversationId *string `json:"conversationId"`

	// ConversationThreadId Unique ID of the conversation thread. Read-only.
	ConversationThreadId *string `json:"conversationThreadId"`

	// CreatedDateTime The Timestamp type represents date and time information using ISO 8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 is 2014-01-01T00:00:00Z
	CreatedDateTime *time.Time `json:"createdDateTime"`

	// Extensions The collection of open extensions defined for the post. Read-only. Nullable. Supports $expand.
	Extensions *[]MicrosoftGraphExtension `json:"extensions,omitempty"`
	From       *MicrosoftGraphRecipient   `json:"from,omitempty"`

	// HasAttachments Indicates whether the post has at least one attachment. This is a default property.
	HasAttachments *bool `json:"hasAttachments,omitempty"`

	// Id The unique idenfier for an entity. Read-only.
	Id *string `json:"id,omitempty"`

	// InReplyTo Read-only. Supports $expand.
	InReplyTo *MicrosoftGraphPost_InReplyTo `json:"inReplyTo,omitempty"`

	// LastModifiedDateTime The Timestamp type represents date and time information using ISO 8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 is 2014-01-01T00:00:00Z
	LastModifiedDateTime *time.Time `json:"lastModifiedDateTime"`

	// MultiValueExtendedProperties The collection of multi-value extended properties defined for the post. Read-only. Nullable.
	MultiValueExtendedProperties *[]MicrosoftGraphMultiValueLegacyExtendedProperty `json:"multiValueExtendedProperties,omitempty"`

	// NewParticipants Conversation participants that were added to the thread as part of this post.
	NewParticipants *[]MicrosoftGraphRecipient `json:"newParticipants,omitempty"`

	// ReceivedDateTime Specifies when the post was received. The DateTimeOffset type represents date and time information using ISO 8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 is 2014-01-01T00:00:00Z
	ReceivedDateTime *time.Time `json:"receivedDateTime,omitempty"`

	// Sender Contains the address of the sender. The value of Sender is assumed to be the address of the authenticated user in the case when Sender is not specified. This is a default property.
	Sender *MicrosoftGraphPost_Sender `json:"sender,omitempty"`

	// SingleValueExtendedProperties The collection of single-value extended properties defined for the post. Read-only. Nullable.
	SingleValueExtendedProperties *[]MicrosoftGraphSingleValueLegacyExtendedProperty `json:"singleValueExtendedProperties,omitempty"`
}

// MicrosoftGraphPostBody1 defines model for .
type MicrosoftGraphPostBody1 = map[string]interface{}

// MicrosoftGraphPost_Body The contents of the post. This is a default property. This property can be null.
type MicrosoftGraphPost_Body struct {
	union json.RawMessage
}

// MicrosoftGraphPostInReplyTo1 defines model for .
type MicrosoftGraphPostInReplyTo1 = map[string]interface{}

// MicrosoftGraphPost_InReplyTo Read-only. Supports $expand.
type MicrosoftGraphPost_InReplyTo struct {
	union json.RawMessage
}

// MicrosoftGraphPostSender1 defines model for .
type MicrosoftGraphPostSender1 = map[string]interface{}

// MicrosoftGraphPost_Sender Contains the address of the sender. The value of Sender is assumed to be the address of the authenticated user in the case when Sender is not specified. This is a default property.
type MicrosoftGraphPost_Sender struct {
	union json.RawMessage
}

// MicrosoftGraphPresence defines model for microsoft.graph.presence.
type MicrosoftGraphPresence struct {
	// Activity The supplemental information to a user's availability. Possible values are Available, Away, BeRightBack, Busy, DoNotDisturb, InACall, InAConferenceCall, Inactive, InAMeeting, Offline, OffWork, OutOfOffice, PresenceUnknown, Presenting, UrgentInterruptionsOnly.
	Activity *string `json:"activity"`

	// Availability The base presence information for a user. Possible values are Available, AvailableIdle,  Away, BeRightBack, Busy, BusyIdle, DoNotDisturb, Offline, PresenceUnknown
	Availability *string `json:"availability"`

	// Id The unique idenfier for an entity. Read-only.
	Id *string `json:"id,omitempty"`
}

// MicrosoftGraphPrintColorMode defines model for microsoft.graph.printColorMode.
type MicrosoftGraphPrintColorMode string

// MicrosoftGraphPrintConnector defines model for microsoft.graph.printConnector.
type MicrosoftGraphPrintConnector struct {
	// AppVersion The connector's version.
	AppVersion *string `json:"appVersion,omitempty"`

	// DisplayName The name of the connector.
	DisplayName *string `json:"displayName,omitempty"`

	// FullyQualifiedDomainName The connector machine's hostname.
	FullyQualifiedDomainName *string `json:"fullyQualifiedDomainName,omitempty"`

	// Id The unique idenfier for an entity. Read-only.
	Id *string `json:"id,omitempty"`

	// Location The physical and/or organizational location of the connector.
	Location *MicrosoftGraphPrintConnector_Location `json:"location,omitempty"`

	// OperatingSystem The connector machine's operating system version.
	OperatingSystem *string `json:"operatingSystem,omitempty"`

	// RegisteredDateTime The DateTimeOffset when the connector was registered.
	RegisteredDateTime *time.Time `json:"registeredDateTime,omitempty"`
}

// MicrosoftGraphPrintConnectorLocation1 defines model for .
type MicrosoftGraphPrintConnectorLocation1 = map[string]interface{}

// MicrosoftGraphPrintConnector_Location The physical and/or organizational location of the connector.
type MicrosoftGraphPrintConnector_Location struct {
	union json.RawMessage
}

// MicrosoftGraphPrintDocument defines model for microsoft.graph.printDocument.
type MicrosoftGraphPrintDocument struct {
	// ContentType The document's content (MIME) type. Read-only.
	ContentType *string `json:"contentType"`

	// DisplayName The document's name. Read-only.
	DisplayName *string `json:"displayName"`

	// Id The unique idenfier for an entity. Read-only.
	Id *string `json:"id,omitempty"`

	// Size The document's size in bytes. Read-only.
	Size *int64 `json:"size,omitempty"`
}

// MicrosoftGraphPrintDuplexMode defines model for microsoft.graph.printDuplexMode.
type MicrosoftGraphPrintDuplexMode string

// MicrosoftGraphPrintEvent defines model for microsoft.graph.printEvent.
type MicrosoftGraphPrintEvent string

// MicrosoftGraphPrintFinishing defines model for microsoft.graph.printFinishing.
type MicrosoftGraphPrintFinishing string

// MicrosoftGraphPrintJob defines model for microsoft.graph.printJob.
type MicrosoftGraphPrintJob struct {
	Configuration *MicrosoftGraphPrintJobConfiguration `json:"configuration,omitempty"`
	CreatedBy     *MicrosoftGraphPrintJob_CreatedBy    `json:"createdBy,omitempty"`

	// CreatedDateTime The DateTimeOffset when the job was created. Read-only.
	CreatedDateTime *time.Time                     `json:"createdDateTime,omitempty"`
	Documents       *[]MicrosoftGraphPrintDocument `json:"documents,omitempty"`

	// Id The unique idenfier for an entity. Read-only.
	Id *string `json:"id,omitempty"`

	// IsFetchable If true, document can be fetched by printer.
	IsFetchable *bool `json:"isFetchable,omitempty"`

	// RedirectedFrom Contains the source job URL, if the job has been redirected from another printer.
	RedirectedFrom *string `json:"redirectedFrom"`

	// RedirectedTo Contains the destination job URL, if the job has been redirected to another printer.
	RedirectedTo *string                       `json:"redirectedTo"`
	Status       *MicrosoftGraphPrintJobStatus `json:"status,omitempty"`

	// Tasks A list of printTasks that were triggered by this print job.
	Tasks *[]MicrosoftGraphPrintTask `json:"tasks,omitempty"`
}

// MicrosoftGraphPrintJobCreatedBy1 defines model for .
type MicrosoftGraphPrintJobCreatedBy1 = map[string]interface{}

// MicrosoftGraphPrintJob_CreatedBy defines model for MicrosoftGraphPrintJob.CreatedBy.
type MicrosoftGraphPrintJob_CreatedBy struct {
	union json.RawMessage
}

// MicrosoftGraphPrintJobConfiguration defines model for microsoft.graph.printJobConfiguration.
type MicrosoftGraphPrintJobConfiguration struct {
	// Collate Whether the printer should collate pages wehen printing multiple copies of a multi-page document.
	Collate *bool `json:"collate"`

	// ColorMode The color mode the printer should use to print the job. Valid values are described in the table below. Read-only.
	ColorMode *MicrosoftGraphPrintJobConfiguration_ColorMode `json:"colorMode,omitempty"`

	// Copies The number of copies that should be printed. Read-only.
	Copies *int32 `json:"copies"`

	// Dpi The resolution to use when printing the job, expressed in dots per inch (DPI). Read-only.
	Dpi *int32 `json:"dpi"`

	// DuplexMode The duplex mode the printer should use when printing the job. Valid values are described in the table below. Read-only.
	DuplexMode *MicrosoftGraphPrintJobConfiguration_DuplexMode `json:"duplexMode,omitempty"`

	// FeedOrientation The orientation to use when feeding media into the printer. Valid values are described in the following table. Read-only.
	FeedOrientation *MicrosoftGraphPrintJobConfiguration_FeedOrientation `json:"feedOrientation,omitempty"`

	// Finishings Finishing processes to use when printing.
	Finishings   *[]MicrosoftGraphPrintJobConfiguration_Finishings_Item `json:"finishings,omitempty"`
	FitPdfToPage *bool                                                  `json:"fitPdfToPage"`

	// InputBin The input bin (tray) to use when printing. See the printer's capabilities for a list of supported input bins.
	InputBin *string `json:"inputBin"`

	// Margin The margin settings to use when printing.
	Margin *MicrosoftGraphPrintJobConfiguration_Margin `json:"margin,omitempty"`

	// MediaSize The media size to use when printing. Supports standard size names for ISO and ANSI media sizes.
	MediaSize       *string                                                `json:"mediaSize"`
	MediaType       *string                                                `json:"mediaType"`
	MultipageLayout *MicrosoftGraphPrintJobConfiguration_MultipageLayout   `json:"multipageLayout,omitempty"`
	Orientation     *MicrosoftGraphPrintJobConfiguration_Orientation       `json:"orientation,omitempty"`
	OutputBin       *string                                                `json:"outputBin"`
	PageRanges      *[]MicrosoftGraphPrintJobConfiguration_PageRanges_Item `json:"pageRanges,omitempty"`
	PagesPerSheet   *int32                                                 `json:"pagesPerSheet"`
	Quality         *MicrosoftGraphPrintJobConfiguration_Quality           `json:"quality,omitempty"`
	Scaling         *MicrosoftGraphPrintJobConfiguration_Scaling           `json:"scaling,omitempty"`
}

// MicrosoftGraphPrintJobConfigurationColorMode1 defines model for .
type MicrosoftGraphPrintJobConfigurationColorMode1 = map[string]interface{}

// MicrosoftGraphPrintJobConfiguration_ColorMode The color mode the printer should use to print the job. Valid values are described in the table below. Read-only.
type MicrosoftGraphPrintJobConfiguration_ColorMode struct {
	union json.RawMessage
}

// MicrosoftGraphPrintJobConfigurationDuplexMode1 defines model for .
type MicrosoftGraphPrintJobConfigurationDuplexMode1 = map[string]interface{}

// MicrosoftGraphPrintJobConfiguration_DuplexMode The duplex mode the printer should use when printing the job. Valid values are described in the table below. Read-only.
type MicrosoftGraphPrintJobConfiguration_DuplexMode struct {
	union json.RawMessage
}

// MicrosoftGraphPrintJobConfigurationFeedOrientation1 defines model for .
type MicrosoftGraphPrintJobConfigurationFeedOrientation1 = map[string]interface{}

// MicrosoftGraphPrintJobConfiguration_FeedOrientation The orientation to use when feeding media into the printer. Valid values are described in the following table. Read-only.
type MicrosoftGraphPrintJobConfiguration_FeedOrientation struct {
	union json.RawMessage
}

// MicrosoftGraphPrintJobConfigurationFinishings1 defines model for .
type MicrosoftGraphPrintJobConfigurationFinishings1 = map[string]interface{}

// MicrosoftGraphPrintJobConfiguration_Finishings_Item defines model for microsoft.graph.printJobConfiguration.finishings.Item.
type MicrosoftGraphPrintJobConfiguration_Finishings_Item struct {
	union json.RawMessage
}

// MicrosoftGraphPrintJobConfigurationMargin1 defines model for .
type MicrosoftGraphPrintJobConfigurationMargin1 = map[string]interface{}

// MicrosoftGraphPrintJobConfiguration_Margin The margin settings to use when printing.
type MicrosoftGraphPrintJobConfiguration_Margin struct {
	union json.RawMessage
}

// MicrosoftGraphPrintJobConfigurationMultipageLayout1 defines model for .
type MicrosoftGraphPrintJobConfigurationMultipageLayout1 = map[string]interface{}

// MicrosoftGraphPrintJobConfiguration_MultipageLayout defines model for MicrosoftGraphPrintJobConfiguration.MultipageLayout.
type MicrosoftGraphPrintJobConfiguration_MultipageLayout struct {
	union json.RawMessage
}

// MicrosoftGraphPrintJobConfigurationOrientation1 defines model for .
type MicrosoftGraphPrintJobConfigurationOrientation1 = map[string]interface{}

// MicrosoftGraphPrintJobConfiguration_Orientation defines model for MicrosoftGraphPrintJobConfiguration.Orientation.
type MicrosoftGraphPrintJobConfiguration_Orientation struct {
	union json.RawMessage
}

// MicrosoftGraphPrintJobConfigurationPageRanges1 defines model for .
type MicrosoftGraphPrintJobConfigurationPageRanges1 = map[string]interface{}

// MicrosoftGraphPrintJobConfiguration_PageRanges_Item defines model for microsoft.graph.printJobConfiguration.pageRanges.Item.
type MicrosoftGraphPrintJobConfiguration_PageRanges_Item struct {
	union json.RawMessage
}

// MicrosoftGraphPrintJobConfigurationQuality1 defines model for .
type MicrosoftGraphPrintJobConfigurationQuality1 = map[string]interface{}

// MicrosoftGraphPrintJobConfiguration_Quality defines model for MicrosoftGraphPrintJobConfiguration.Quality.
type MicrosoftGraphPrintJobConfiguration_Quality struct {
	union json.RawMessage
}

// MicrosoftGraphPrintJobConfigurationScaling1 defines model for .
type MicrosoftGraphPrintJobConfigurationScaling1 = map[string]interface{}

// MicrosoftGraphPrintJobConfiguration_Scaling defines model for MicrosoftGraphPrintJobConfiguration.Scaling.
type MicrosoftGraphPrintJobConfiguration_Scaling struct {
	union json.RawMessage
}

// MicrosoftGraphPrintJobProcessingState defines model for microsoft.graph.printJobProcessingState.
type MicrosoftGraphPrintJobProcessingState string

// MicrosoftGraphPrintJobStateDetail defines model for microsoft.graph.printJobStateDetail.
type MicrosoftGraphPrintJobStateDetail string

// MicrosoftGraphPrintJobStatus defines model for microsoft.graph.printJobStatus.
type MicrosoftGraphPrintJobStatus struct {
	// Description A human-readable description of the print job's current processing state. Read-only.
	Description *string `json:"description,omitempty"`

	// Details Additional details for print job state. Valid values are described in the following table. Read-only.
	Details *[]MicrosoftGraphPrintJobStateDetail `json:"details,omitempty"`

	// IsAcquiredByPrinter True if the job was acknowledged by a printer; false otherwise. Read-only.
	IsAcquiredByPrinter *bool                                  `json:"isAcquiredByPrinter,omitempty"`
	State               *MicrosoftGraphPrintJobProcessingState `json:"state,omitempty"`
}

// MicrosoftGraphPrintMargin defines model for microsoft.graph.printMargin.
type MicrosoftGraphPrintMargin struct {
	// Bottom The margin in microns from the bottom edge.
	Bottom *int32 `json:"bottom"`

	// Left The margin in microns from the left edge.
	Left *int32 `json:"left"`

	// Right The margin in microns from the right edge.
	Right *int32 `json:"right"`

	// Top The margin in microns from the top edge.
	Top *int32 `json:"top"`
}

// MicrosoftGraphPrintMultipageLayout defines model for microsoft.graph.printMultipageLayout.
type MicrosoftGraphPrintMultipageLayout string

// MicrosoftGraphPrintOrientation defines model for microsoft.graph.printOrientation.
type MicrosoftGraphPrintOrientation string

// MicrosoftGraphPrintQuality defines model for microsoft.graph.printQuality.
type MicrosoftGraphPrintQuality string

// MicrosoftGraphPrintScaling defines model for microsoft.graph.printScaling.
type MicrosoftGraphPrintScaling string

// MicrosoftGraphPrintTask defines model for microsoft.graph.printTask.
type MicrosoftGraphPrintTask struct {
	Definition *MicrosoftGraphPrintTaskDefinition `json:"definition,omitempty"`

	// Id The unique idenfier for an entity. Read-only.
	Id *string `json:"id,omitempty"`

	// ParentUrl The URL for the print entity that triggered this task. For example, https://graph.microsoft.com/v1.0/print/printers/{printerId}/jobs/{jobId}. Read-only.
	ParentUrl *string                         `json:"parentUrl,omitempty"`
	Status    *MicrosoftGraphPrintTaskStatus  `json:"status,omitempty"`
	Trigger   *MicrosoftGraphPrintTaskTrigger `json:"trigger,omitempty"`
}

// MicrosoftGraphPrintTaskDefinition defines model for microsoft.graph.printTaskDefinition.
type MicrosoftGraphPrintTaskDefinition struct {
	CreatedBy *MicrosoftGraphAppIdentity `json:"createdBy,omitempty"`

	// DisplayName The name of the printTaskDefinition.
	DisplayName *string `json:"displayName,omitempty"`

	// Id The unique idenfier for an entity. Read-only.
	Id *string `json:"id,omitempty"`

	// Tasks A list of tasks that have been created based on this definition. The list includes currently running tasks and recently completed tasks. Read-only.
	Tasks *[]MicrosoftGraphPrintTask `json:"tasks,omitempty"`
}

// MicrosoftGraphPrintTaskProcessingState defines model for microsoft.graph.printTaskProcessingState.
type MicrosoftGraphPrintTaskProcessingState string

// MicrosoftGraphPrintTaskStatus defines model for microsoft.graph.printTaskStatus.
type MicrosoftGraphPrintTaskStatus struct {
	// Description A human-readable description of the current processing state of the printTask.
	Description *string                                 `json:"description,omitempty"`
	State       *MicrosoftGraphPrintTaskProcessingState `json:"state,omitempty"`
}

// MicrosoftGraphPrintTaskTrigger defines model for microsoft.graph.printTaskTrigger.
type MicrosoftGraphPrintTaskTrigger struct {
	Definition *MicrosoftGraphPrintTaskDefinition `json:"definition,omitempty"`
	Event      *MicrosoftGraphPrintEvent          `json:"event,omitempty"`

	// Id The unique idenfier for an entity. Read-only.
	Id *string `json:"id,omitempty"`
}

// MicrosoftGraphPrinter defines model for microsoft.graph.printer.
type MicrosoftGraphPrinter struct {
	// Capabilities The capabilities of the printer/printerShare.
	Capabilities *MicrosoftGraphPrinter_Capabilities `json:"capabilities,omitempty"`

	// Connectors The connectors that are associated with the printer.
	Connectors *[]MicrosoftGraphPrintConnector `json:"connectors,omitempty"`

	// Defaults The default print settings of printer/printerShare.
	Defaults *MicrosoftGraphPrinter_Defaults `json:"defaults,omitempty"`

	// DisplayName The name of the printer/printerShare.
	DisplayName *string `json:"displayName,omitempty"`

	// HasPhysicalDevice True if the printer has a physical device for printing. Read-only.
	HasPhysicalDevice *bool `json:"hasPhysicalDevice,omitempty"`

	// Id The unique idenfier for an entity. Read-only.
	Id *string `json:"id,omitempty"`

	// IsAcceptingJobs Whether the printer/printerShare is currently accepting new print jobs.
	IsAcceptingJobs *bool `json:"isAcceptingJobs"`

	// IsShared True if the printer is shared; false otherwise. Read-only.
	IsShared *bool `json:"isShared,omitempty"`

	// Jobs The list of jobs that are queued for printing by the printer/printerShare.
	Jobs *[]MicrosoftGraphPrintJob `json:"jobs,omitempty"`

	// LastSeenDateTime The most recent dateTimeOffset when a printer interacted with Universal Print. Read-only.
	LastSeenDateTime *time.Time `json:"lastSeenDateTime"`

	// Location The physical and/or organizational location of the printer/printerShare.
	Location *MicrosoftGraphPrinter_Location `json:"location,omitempty"`

	// Manufacturer The manufacturer of the printer/printerShare.
	Manufacturer *string `json:"manufacturer"`

	// Model The model name of the printer/printerShare.
	Model *string `json:"model"`

	// RegisteredDateTime The DateTimeOffset when the printer was registered. Read-only.
	RegisteredDateTime *time.Time `json:"registeredDateTime,omitempty"`

	// Shares The list of printerShares that are associated with the printer. Currently, only one printerShare can be associated with the printer. Read-only. Nullable.
	Shares *[]MicrosoftGraphPrinterShare `json:"shares,omitempty"`
	Status *MicrosoftGraphPrinterStatus  `json:"status,omitempty"`

	// TaskTriggers A list of task triggers that are associated with the printer.
	TaskTriggers *[]MicrosoftGraphPrintTaskTrigger `json:"taskTriggers,omitempty"`
}

// MicrosoftGraphPrinterCapabilities1 defines model for .
type MicrosoftGraphPrinterCapabilities1 = map[string]interface{}

// MicrosoftGraphPrinter_Capabilities The capabilities of the printer/printerShare.
type MicrosoftGraphPrinter_Capabilities struct {
	union json.RawMessage
}

// MicrosoftGraphPrinterDefaults1 defines model for .
type MicrosoftGraphPrinterDefaults1 = map[string]interface{}

// MicrosoftGraphPrinter_Defaults The default print settings of printer/printerShare.
type MicrosoftGraphPrinter_Defaults struct {
	union json.RawMessage
}

// MicrosoftGraphPrinterLocation1 defines model for .
type MicrosoftGraphPrinterLocation1 = map[string]interface{}

// MicrosoftGraphPrinter_Location The physical and/or organizational location of the printer/printerShare.
type MicrosoftGraphPrinter_Location struct {
	union json.RawMessage
}

// MicrosoftGraphPrinterBase defines model for microsoft.graph.printerBase.
type MicrosoftGraphPrinterBase struct {
	// Capabilities The capabilities of the printer/printerShare.
	Capabilities *MicrosoftGraphPrinterBase_Capabilities `json:"capabilities,omitempty"`

	// Defaults The default print settings of printer/printerShare.
	Defaults *MicrosoftGraphPrinterBase_Defaults `json:"defaults,omitempty"`

	// DisplayName The name of the printer/printerShare.
	DisplayName *string `json:"displayName,omitempty"`

	// Id The unique idenfier for an entity. Read-only.
	Id *string `json:"id,omitempty"`

	// IsAcceptingJobs Whether the printer/printerShare is currently accepting new print jobs.
	IsAcceptingJobs *bool `json:"isAcceptingJobs"`

	// Jobs The list of jobs that are queued for printing by the printer/printerShare.
	Jobs *[]MicrosoftGraphPrintJob `json:"jobs,omitempty"`

	// Location The physical and/or organizational location of the printer/printerShare.
	Location *MicrosoftGraphPrinterBase_Location `json:"location,omitempty"`

	// Manufacturer The manufacturer of the printer/printerShare.
	Manufacturer *string `json:"manufacturer"`

	// Model The model name of the printer/printerShare.
	Model  *string                      `json:"model"`
	Status *MicrosoftGraphPrinterStatus `json:"status,omitempty"`
}

// MicrosoftGraphPrinterBaseCapabilities1 defines model for .
type MicrosoftGraphPrinterBaseCapabilities1 = map[string]interface{}

// MicrosoftGraphPrinterBase_Capabilities The capabilities of the printer/printerShare.
type MicrosoftGraphPrinterBase_Capabilities struct {
	union json.RawMessage
}

// MicrosoftGraphPrinterBaseDefaults1 defines model for .
type MicrosoftGraphPrinterBaseDefaults1 = map[string]interface{}

// MicrosoftGraphPrinterBase_Defaults The default print settings of printer/printerShare.
type MicrosoftGraphPrinterBase_Defaults struct {
	union json.RawMessage
}

// MicrosoftGraphPrinterBaseLocation1 defines model for .
type MicrosoftGraphPrinterBaseLocation1 = map[string]interface{}

// MicrosoftGraphPrinterBase_Location The physical and/or organizational location of the printer/printerShare.
type MicrosoftGraphPrinterBase_Location struct {
	union json.RawMessage
}

// MicrosoftGraphPrinterCapabilities defines model for microsoft.graph.printerCapabilities.
type MicrosoftGraphPrinterCapabilities struct {
	// BottomMargins A list of supported bottom margins(in microns) for the printer.
	BottomMargins *[]int32 `json:"bottomMargins,omitempty"`

	// Collation True if the printer supports collating when printing muliple copies of a multi-page document; false otherwise.
	Collation *bool `json:"collation"`

	// ColorModes The color modes supported by the printer. Valid values are described in the following table.
	ColorModes *[]MicrosoftGraphPrinterCapabilities_ColorModes_Item `json:"colorModes,omitempty"`

	// ContentTypes A list of supported content (MIME) types that the printer supports. It is not guaranteed that the Universal Print service supports printing all of these MIME types.
	ContentTypes *[]string `json:"contentTypes,omitempty"`

	// CopiesPerJob The range of copies per job supported by the printer.
	CopiesPerJob *MicrosoftGraphPrinterCapabilities_CopiesPerJob `json:"copiesPerJob,omitempty"`

	// Dpis The list of print resolutions in DPI that are supported by the printer.
	Dpis *[]int32 `json:"dpis,omitempty"`

	// DuplexModes The list of duplex modes that are supported by the printer. Valid values are described in the following table.
	DuplexModes *[]MicrosoftGraphPrinterCapabilities_DuplexModes_Item `json:"duplexModes,omitempty"`

	// FeedOrientations The list of feed orientations that are supported by the printer.
	FeedOrientations *[]MicrosoftGraphPrinterCapabilities_FeedOrientations_Item `json:"feedOrientations,omitempty"`

	// Finishings Finishing processes the printer supports for a printed document.
	Finishings *[]MicrosoftGraphPrinterCapabilities_Finishings_Item `json:"finishings,omitempty"`

	// InputBins Supported input bins for the printer.
	InputBins *[]string `json:"inputBins,omitempty"`

	// IsColorPrintingSupported True if color printing is supported by the printer; false otherwise. Read-only.
	IsColorPrintingSupported *bool `json:"isColorPrintingSupported"`

	// IsPageRangeSupported True if the printer supports printing by page ranges; false otherwise.
	IsPageRangeSupported *bool `json:"isPageRangeSupported"`

	// LeftMargins A list of supported left margins(in microns) for the printer.
	LeftMargins *[]int32 `json:"leftMargins,omitempty"`

	// MediaColors The media (i.e., paper) colors supported by the printer.
	MediaColors *[]string `json:"mediaColors,omitempty"`

	// MediaSizes The media sizes supported by the printer. Supports standard size names for ISO and ANSI media sizes. Valid values are in the following table.
	MediaSizes *[]string `json:"mediaSizes,omitempty"`

	// MediaTypes The media types supported by the printer.
	MediaTypes *[]string `json:"mediaTypes,omitempty"`

	// MultipageLayouts The presentation directions supported by the printer. Supported values are described in the following table.
	MultipageLayouts *[]MicrosoftGraphPrinterCapabilities_MultipageLayouts_Item `json:"multipageLayouts,omitempty"`

	// Orientations The print orientations supported by the printer. Valid values are described in the following table.
	Orientations *[]MicrosoftGraphPrinterCapabilities_Orientations_Item `json:"orientations,omitempty"`

	// OutputBins The printer's supported output bins (trays).
	OutputBins *[]string `json:"outputBins,omitempty"`

	// PagesPerSheet Supported number of Input Pages to impose upon a single Impression.
	PagesPerSheet *[]int32 `json:"pagesPerSheet,omitempty"`

	// Qualities The print qualities supported by the printer.
	Qualities *[]MicrosoftGraphPrinterCapabilities_Qualities_Item `json:"qualities,omitempty"`

	// RightMargins A list of supported right margins(in microns) for the printer.
	RightMargins *[]int32 `json:"rightMargins,omitempty"`

	// Scalings Supported print scalings.
	Scalings *[]MicrosoftGraphPrinterCapabilities_Scalings_Item `json:"scalings,omitempty"`

	// SupportsFitPdfToPage True if the printer supports scaling PDF pages to match the print media size; false otherwise.
	SupportsFitPdfToPage *bool `json:"supportsFitPdfToPage"`

	// TopMargins A list of supported top margins(in microns) for the printer.
	TopMargins *[]int32 `json:"topMargins,omitempty"`
}

// MicrosoftGraphPrinterCapabilitiesColorModes1 defines model for .
type MicrosoftGraphPrinterCapabilitiesColorModes1 = map[string]interface{}

// MicrosoftGraphPrinterCapabilities_ColorModes_Item defines model for microsoft.graph.printerCapabilities.colorModes.Item.
type MicrosoftGraphPrinterCapabilities_ColorModes_Item struct {
	union json.RawMessage
}

// MicrosoftGraphPrinterCapabilitiesCopiesPerJob1 defines model for .
type MicrosoftGraphPrinterCapabilitiesCopiesPerJob1 = map[string]interface{}

// MicrosoftGraphPrinterCapabilities_CopiesPerJob The range of copies per job supported by the printer.
type MicrosoftGraphPrinterCapabilities_CopiesPerJob struct {
	union json.RawMessage
}

// MicrosoftGraphPrinterCapabilitiesDuplexModes1 defines model for .
type MicrosoftGraphPrinterCapabilitiesDuplexModes1 = map[string]interface{}

// MicrosoftGraphPrinterCapabilities_DuplexModes_Item defines model for microsoft.graph.printerCapabilities.duplexModes.Item.
type MicrosoftGraphPrinterCapabilities_DuplexModes_Item struct {
	union json.RawMessage
}

// MicrosoftGraphPrinterCapabilitiesFeedOrientations1 defines model for .
type MicrosoftGraphPrinterCapabilitiesFeedOrientations1 = map[string]interface{}

// MicrosoftGraphPrinterCapabilities_FeedOrientations_Item defines model for microsoft.graph.printerCapabilities.feedOrientations.Item.
type MicrosoftGraphPrinterCapabilities_FeedOrientations_Item struct {
	union json.RawMessage
}

// MicrosoftGraphPrinterCapabilitiesFinishings1 defines model for .
type MicrosoftGraphPrinterCapabilitiesFinishings1 = map[string]interface{}

// MicrosoftGraphPrinterCapabilities_Finishings_Item defines model for microsoft.graph.printerCapabilities.finishings.Item.
type MicrosoftGraphPrinterCapabilities_Finishings_Item struct {
	union json.RawMessage
}

// MicrosoftGraphPrinterCapabilitiesMultipageLayouts1 defines model for .
type MicrosoftGraphPrinterCapabilitiesMultipageLayouts1 = map[string]interface{}

// MicrosoftGraphPrinterCapabilities_MultipageLayouts_Item defines model for microsoft.graph.printerCapabilities.multipageLayouts.Item.
type MicrosoftGraphPrinterCapabilities_MultipageLayouts_Item struct {
	union json.RawMessage
}

// MicrosoftGraphPrinterCapabilitiesOrientations1 defines model for .
type MicrosoftGraphPrinterCapabilitiesOrientations1 = map[string]interface{}

// MicrosoftGraphPrinterCapabilities_Orientations_Item defines model for microsoft.graph.printerCapabilities.orientations.Item.
type MicrosoftGraphPrinterCapabilities_Orientations_Item struct {
	union json.RawMessage
}

// MicrosoftGraphPrinterCapabilitiesQualities1 defines model for .
type MicrosoftGraphPrinterCapabilitiesQualities1 = map[string]interface{}

// MicrosoftGraphPrinterCapabilities_Qualities_Item defines model for microsoft.graph.printerCapabilities.qualities.Item.
type MicrosoftGraphPrinterCapabilities_Qualities_Item struct {
	union json.RawMessage
}

// MicrosoftGraphPrinterCapabilitiesScalings1 defines model for .
type MicrosoftGraphPrinterCapabilitiesScalings1 = map[string]interface{}

// MicrosoftGraphPrinterCapabilities_Scalings_Item defines model for microsoft.graph.printerCapabilities.scalings.Item.
type MicrosoftGraphPrinterCapabilities_Scalings_Item struct {
	union json.RawMessage
}

// MicrosoftGraphPrinterDefaults defines model for microsoft.graph.printerDefaults.
type MicrosoftGraphPrinterDefaults struct {
	// ColorMode The default color mode to use when printing the document. Valid values are described in the following table.
	ColorMode *MicrosoftGraphPrinterDefaults_ColorMode `json:"colorMode,omitempty"`

	// ContentType The default content (MIME) type to use when processing documents.
	ContentType *string `json:"contentType"`

	// CopiesPerJob The default number of copies printed per job.
	CopiesPerJob *int32 `json:"copiesPerJob"`

	// Dpi The default resolution in DPI to use when printing the job.
	Dpi *int32 `json:"dpi"`

	// DuplexMode The default duplex (double-sided) configuration to use when printing a document. Valid values are described in the following table.
	DuplexMode *MicrosoftGraphPrinterDefaults_DuplexMode `json:"duplexMode,omitempty"`

	// Finishings The default set of finishings to apply to print jobs. Valid values are described in the following table.
	Finishings *[]MicrosoftGraphPrinterDefaults_Finishings_Item `json:"finishings,omitempty"`

	// FitPdfToPage The default fitPdfToPage setting. True to fit each page of a PDF document to a physical sheet of media; false to let the printer decide how to lay out impressions.
	FitPdfToPage *bool   `json:"fitPdfToPage"`
	InputBin     *string `json:"inputBin"`

	// MediaColor The default media (such as paper) color to print the document on.
	MediaColor *string `json:"mediaColor"`

	// MediaSize The default media size to use. Supports standard size names for ISO and ANSI media sizes. Valid values are listed in the printerCapabilities topic.
	MediaSize *string `json:"mediaSize"`

	// MediaType The default media (such as paper) type to print the document on.
	MediaType *string `json:"mediaType"`

	// MultipageLayout The default direction to lay out pages when multiple pages are being printed per sheet. Valid values are described in the following table.
	MultipageLayout *MicrosoftGraphPrinterDefaults_MultipageLayout `json:"multipageLayout,omitempty"`

	// Orientation The default orientation to use when printing the document. Valid values are described in the following table.
	Orientation *MicrosoftGraphPrinterDefaults_Orientation `json:"orientation,omitempty"`

	// OutputBin The default output bin to place completed prints into. See the printer's capabilities for a list of supported output bins.
	OutputBin *string `json:"outputBin"`

	// PagesPerSheet The default number of document pages to print on each sheet.
	PagesPerSheet *int32 `json:"pagesPerSheet"`

	// Quality The default quality to use when printing the document. Valid values are described in the following table.
	Quality *MicrosoftGraphPrinterDefaults_Quality `json:"quality,omitempty"`

	// Scaling Specifies how the printer scales the document data to fit the requested media. Valid values are described in the following table.
	Scaling *MicrosoftGraphPrinterDefaults_Scaling `json:"scaling,omitempty"`
}

// MicrosoftGraphPrinterDefaultsColorMode1 defines model for .
type MicrosoftGraphPrinterDefaultsColorMode1 = map[string]interface{}

// MicrosoftGraphPrinterDefaults_ColorMode The default color mode to use when printing the document. Valid values are described in the following table.
type MicrosoftGraphPrinterDefaults_ColorMode struct {
	union json.RawMessage
}

// MicrosoftGraphPrinterDefaultsDuplexMode1 defines model for .
type MicrosoftGraphPrinterDefaultsDuplexMode1 = map[string]interface{}

// MicrosoftGraphPrinterDefaults_DuplexMode The default duplex (double-sided) configuration to use when printing a document. Valid values are described in the following table.
type MicrosoftGraphPrinterDefaults_DuplexMode struct {
	union json.RawMessage
}

// MicrosoftGraphPrinterDefaultsFinishings1 defines model for .
type MicrosoftGraphPrinterDefaultsFinishings1 = map[string]interface{}

// MicrosoftGraphPrinterDefaults_Finishings_Item defines model for microsoft.graph.printerDefaults.finishings.Item.
type MicrosoftGraphPrinterDefaults_Finishings_Item struct {
	union json.RawMessage
}

// MicrosoftGraphPrinterDefaultsMultipageLayout1 defines model for .
type MicrosoftGraphPrinterDefaultsMultipageLayout1 = map[string]interface{}

// MicrosoftGraphPrinterDefaults_MultipageLayout The default direction to lay out pages when multiple pages are being printed per sheet. Valid values are described in the following table.
type MicrosoftGraphPrinterDefaults_MultipageLayout struct {
	union json.RawMessage
}

// MicrosoftGraphPrinterDefaultsOrientation1 defines model for .
type MicrosoftGraphPrinterDefaultsOrientation1 = map[string]interface{}

// MicrosoftGraphPrinterDefaults_Orientation The default orientation to use when printing the document. Valid values are described in the following table.
type MicrosoftGraphPrinterDefaults_Orientation struct {
	union json.RawMessage
}

// MicrosoftGraphPrinterDefaultsQuality1 defines model for .
type MicrosoftGraphPrinterDefaultsQuality1 = map[string]interface{}

// MicrosoftGraphPrinterDefaults_Quality The default quality to use when printing the document. Valid values are described in the following table.
type MicrosoftGraphPrinterDefaults_Quality struct {
	union json.RawMessage
}

// MicrosoftGraphPrinterDefaultsScaling1 defines model for .
type MicrosoftGraphPrinterDefaultsScaling1 = map[string]interface{}

// MicrosoftGraphPrinterDefaults_Scaling Specifies how the printer scales the document data to fit the requested media. Valid values are described in the following table.
type MicrosoftGraphPrinterDefaults_Scaling struct {
	union json.RawMessage
}

// MicrosoftGraphPrinterFeedOrientation defines model for microsoft.graph.printerFeedOrientation.
type MicrosoftGraphPrinterFeedOrientation string

// MicrosoftGraphPrinterLocation defines model for microsoft.graph.printerLocation.
type MicrosoftGraphPrinterLocation struct {
	// AltitudeInMeters The altitude, in meters, that the printer is located at.
	AltitudeInMeters *int32 `json:"altitudeInMeters"`

	// Building The building that the printer is located in.
	Building *string `json:"building"`

	// City The city that the printer is located in.
	City *string `json:"city"`

	// CountryOrRegion The country or region that the printer is located in.
	CountryOrRegion *string `json:"countryOrRegion"`

	// Floor The floor that the printer is located on. Only numerical values are supported right now.
	Floor *string `json:"floor"`

	// FloorDescription The description of the floor that the printer is located on.
	FloorDescription *string `json:"floorDescription"`

	// Latitude The latitude that the printer is located at.
	Latitude *MicrosoftGraphPrinterLocation_Latitude `json:"latitude"`

	// Longitude The longitude that the printer is located at.
	Longitude *MicrosoftGraphPrinterLocation_Longitude `json:"longitude"`

	// Organization The organizational hierarchy that the printer belongs to. The elements should be in hierarchical order.
	Organization *[]string `json:"organization,omitempty"`

	// PostalCode The postal code that the printer is located in.
	PostalCode *string `json:"postalCode"`

	// RoomDescription The description of the room that the printer is located in.
	RoomDescription *string `json:"roomDescription"`

	// RoomName The room that the printer is located in. Only numerical values are supported right now.
	RoomName *string `json:"roomName"`

	// Site The site that the printer is located in.
	Site *string `json:"site"`

	// StateOrProvince The state or province that the printer is located in.
	StateOrProvince *string `json:"stateOrProvince"`

	// StreetAddress The street address where the printer is located.
	StreetAddress *string `json:"streetAddress"`

	// Subdivision The subdivision that the printer is located in. The elements should be in hierarchical order.
	Subdivision *[]string `json:"subdivision,omitempty"`
	Subunit     *[]string `json:"subunit,omitempty"`
}

// MicrosoftGraphPrinterLocationLatitude0 defines model for .
type MicrosoftGraphPrinterLocationLatitude0 = float64

// MicrosoftGraphPrinterLocationLatitude1 defines model for .
type MicrosoftGraphPrinterLocationLatitude1 = string

// MicrosoftGraphPrinterLocation_Latitude The latitude that the printer is located at.
type MicrosoftGraphPrinterLocation_Latitude struct {
	union json.RawMessage
}

// MicrosoftGraphPrinterLocationLongitude0 defines model for .
type MicrosoftGraphPrinterLocationLongitude0 = float64

// MicrosoftGraphPrinterLocationLongitude1 defines model for .
type MicrosoftGraphPrinterLocationLongitude1 = string

// MicrosoftGraphPrinterLocation_Longitude The longitude that the printer is located at.
type MicrosoftGraphPrinterLocation_Longitude struct {
	union json.RawMessage
}

// MicrosoftGraphPrinterProcessingState defines model for microsoft.graph.printerProcessingState.
type MicrosoftGraphPrinterProcessingState string

// MicrosoftGraphPrinterProcessingStateDetail defines model for microsoft.graph.printerProcessingStateDetail.
type MicrosoftGraphPrinterProcessingStateDetail string

// MicrosoftGraphPrinterShare defines model for microsoft.graph.printerShare.
type MicrosoftGraphPrinterShare struct {
	// AllowAllUsers If true, all users and groups will be granted access to this printer share. This supersedes the allow lists defined by the allowedUsers and allowedGroups navigation properties.
	AllowAllUsers *bool `json:"allowAllUsers,omitempty"`

	// AllowedGroups The groups whose users have access to print using the printer.
	AllowedGroups *[]MicrosoftGraphGroup `json:"allowedGroups,omitempty"`

	// AllowedUsers The users who have access to print using the printer.
	AllowedUsers *[]MicrosoftGraphUser `json:"allowedUsers,omitempty"`

	// Capabilities The capabilities of the printer/printerShare.
	Capabilities *MicrosoftGraphPrinterShare_Capabilities `json:"capabilities,omitempty"`

	// CreatedDateTime The DateTimeOffset when the printer share was created. Read-only.
	CreatedDateTime *time.Time `json:"createdDateTime,omitempty"`

	// Defaults The default print settings of printer/printerShare.
	Defaults *MicrosoftGraphPrinterShare_Defaults `json:"defaults,omitempty"`

	// DisplayName The name of the printer/printerShare.
	DisplayName *string `json:"displayName,omitempty"`

	// Id The unique idenfier for an entity. Read-only.
	Id *string `json:"id,omitempty"`

	// IsAcceptingJobs Whether the printer/printerShare is currently accepting new print jobs.
	IsAcceptingJobs *bool `json:"isAcceptingJobs"`

	// Jobs The list of jobs that are queued for printing by the printer/printerShare.
	Jobs *[]MicrosoftGraphPrintJob `json:"jobs,omitempty"`

	// Location The physical and/or organizational location of the printer/printerShare.
	Location *MicrosoftGraphPrinterShare_Location `json:"location,omitempty"`

	// Manufacturer The manufacturer of the printer/printerShare.
	Manufacturer *string `json:"manufacturer"`

	// Model The model name of the printer/printerShare.
	Model *string `json:"model"`

	// Printer The printer that this printer share is related to.
	Printer *MicrosoftGraphPrinterShare_Printer `json:"printer,omitempty"`
	Status  *MicrosoftGraphPrinterStatus        `json:"status,omitempty"`

	// ViewPoint Additional data for a printer share as viewed by the signed-in user.
	ViewPoint *MicrosoftGraphPrinterShare_ViewPoint `json:"viewPoint,omitempty"`
}

// MicrosoftGraphPrinterShareCapabilities1 defines model for .
type MicrosoftGraphPrinterShareCapabilities1 = map[string]interface{}

// MicrosoftGraphPrinterShare_Capabilities The capabilities of the printer/printerShare.
type MicrosoftGraphPrinterShare_Capabilities struct {
	union json.RawMessage
}

// MicrosoftGraphPrinterShareDefaults1 defines model for .
type MicrosoftGraphPrinterShareDefaults1 = map[string]interface{}

// MicrosoftGraphPrinterShare_Defaults The default print settings of printer/printerShare.
type MicrosoftGraphPrinterShare_Defaults struct {
	union json.RawMessage
}

// MicrosoftGraphPrinterShareLocation1 defines model for .
type MicrosoftGraphPrinterShareLocation1 = map[string]interface{}

// MicrosoftGraphPrinterShare_Location The physical and/or organizational location of the printer/printerShare.
type MicrosoftGraphPrinterShare_Location struct {
	union json.RawMessage
}

// MicrosoftGraphPrinterSharePrinter1 defines model for .
type MicrosoftGraphPrinterSharePrinter1 = map[string]interface{}

// MicrosoftGraphPrinterShare_Printer The printer that this printer share is related to.
type MicrosoftGraphPrinterShare_Printer struct {
	union json.RawMessage
}

// MicrosoftGraphPrinterShareViewPoint1 defines model for .
type MicrosoftGraphPrinterShareViewPoint1 = map[string]interface{}

// MicrosoftGraphPrinterShare_ViewPoint Additional data for a printer share as viewed by the signed-in user.
type MicrosoftGraphPrinterShare_ViewPoint struct {
	union json.RawMessage
}

// MicrosoftGraphPrinterShareViewpoint defines model for microsoft.graph.printerShareViewpoint.
type MicrosoftGraphPrinterShareViewpoint struct {
	// LastUsedDateTime Date and time when the printer was last used by the signed-in user. The timestamp type represents date and time information using ISO 8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 is 2014-01-01T00:00:00Z.
	LastUsedDateTime *time.Time `json:"lastUsedDateTime"`
}

// MicrosoftGraphPrinterStatus defines model for microsoft.graph.printerStatus.
type MicrosoftGraphPrinterStatus struct {
	// Description A human-readable description of the printer's current processing state. Read-only.
	Description *string `json:"description"`

	// Details The list of details describing why the printer is in the current state. Valid values are described in the following table. Read-only.
	Details *[]MicrosoftGraphPrinterProcessingStateDetail `json:"details,omitempty"`
	State   *MicrosoftGraphPrinterProcessingState         `json:"state,omitempty"`
}

// MicrosoftGraphProfilePhoto defines model for microsoft.graph.profilePhoto.
type MicrosoftGraphProfilePhoto struct {
	// Height The height of the photo. Read-only.
	Height *int32 `json:"height"`

	// Id The unique idenfier for an entity. Read-only.
	Id *string `json:"id,omitempty"`

	// Width The width of the photo. Read-only.
	Width *int32 `json:"width"`
}

// MicrosoftGraphProvisionedPlan defines model for microsoft.graph.provisionedPlan.
type MicrosoftGraphProvisionedPlan struct {
	// CapabilityStatus For example, 'Enabled'.
	CapabilityStatus *string `json:"capabilityStatus"`

	// ProvisioningStatus For example, 'Success'.
	ProvisioningStatus *string `json:"provisioningStatus"`

	// Service The name of the service; for example, 'AccessControlS2S'
	Service *string `json:"service"`
}

// MicrosoftGraphPublicError defines model for microsoft.graph.publicError.
type MicrosoftGraphPublicError struct {
	// Code Represents the error code.
	Code *string `json:"code"`

	// Details Details of the error.
	Details *[]MicrosoftGraphPublicError_Details_Item `json:"details,omitempty"`

	// InnerError Details of the inner error.
	InnerError *MicrosoftGraphPublicError_InnerError `json:"innerError,omitempty"`

	// Message A non-localized message for the developer.
	Message *string `json:"message"`

	// Target The target of the error.
	Target *string `json:"target"`
}

// MicrosoftGraphPublicErrorDetails1 defines model for .
type MicrosoftGraphPublicErrorDetails1 = map[string]interface{}

// MicrosoftGraphPublicError_Details_Item defines model for microsoft.graph.publicError.details.Item.
type MicrosoftGraphPublicError_Details_Item struct {
	union json.RawMessage
}

// MicrosoftGraphPublicErrorInnerError1 defines model for .
type MicrosoftGraphPublicErrorInnerError1 = map[string]interface{}

// MicrosoftGraphPublicError_InnerError Details of the inner error.
type MicrosoftGraphPublicError_InnerError struct {
	union json.RawMessage
}

// MicrosoftGraphPublicErrorDetail defines model for microsoft.graph.publicErrorDetail.
type MicrosoftGraphPublicErrorDetail struct {
	// Code The error code.
	Code *string `json:"code"`

	// Message The error message.
	Message *string `json:"message"`

	// Target The target of the error.
	Target *string `json:"target"`
}

// MicrosoftGraphPublicInnerError defines model for microsoft.graph.publicInnerError.
type MicrosoftGraphPublicInnerError struct {
	// Code The error code.
	Code *string `json:"code"`

	// Details A collection of error details.
	Details *[]MicrosoftGraphPublicInnerError_Details_Item `json:"details,omitempty"`

	// Message The error message.
	Message *string `json:"message"`

	// Target The target of the error.
	Target *string `json:"target"`
}

// MicrosoftGraphPublicInnerErrorDetails1 defines model for .
type MicrosoftGraphPublicInnerErrorDetails1 = map[string]interface{}

// MicrosoftGraphPublicInnerError_Details_Item defines model for microsoft.graph.publicInnerError.details.Item.
type MicrosoftGraphPublicInnerError_Details_Item struct {
	union json.RawMessage
}

// MicrosoftGraphPublicationFacet defines model for microsoft.graph.publicationFacet.
type MicrosoftGraphPublicationFacet struct {
	// Level The state of publication for this document. Either published or checkout. Read-only.
	Level *string `json:"level"`

	// VersionId The unique identifier for the version that is visible to the current caller. Read-only.
	VersionId *string `json:"versionId"`
}

// MicrosoftGraphQuota defines model for microsoft.graph.quota.
type MicrosoftGraphQuota struct {
	// Deleted Total space consumed by files in the recycle bin, in bytes. Read-only.
	Deleted *int64 `json:"deleted"`

	// Remaining Total space remaining before reaching the quota limit, in bytes. Read-only.
	Remaining *int64 `json:"remaining"`

	// State Enumeration value that indicates the state of the storage space. Read-only.
	State *string `json:"state"`

	// StoragePlanInformation Information about the drive's storage quota plans. Only in Personal OneDrive.
	StoragePlanInformation *MicrosoftGraphQuota_StoragePlanInformation `json:"storagePlanInformation,omitempty"`

	// Total Total allowed storage space, in bytes. Read-only.
	Total *int64 `json:"total"`

	// Used Total space used, in bytes. Read-only.
	Used *int64 `json:"used"`
}

// MicrosoftGraphQuotaStoragePlanInformation1 defines model for .
type MicrosoftGraphQuotaStoragePlanInformation1 = map[string]interface{}

// MicrosoftGraphQuota_StoragePlanInformation Information about the drive's storage quota plans. Only in Personal OneDrive.
type MicrosoftGraphQuota_StoragePlanInformation struct {
	union json.RawMessage
}

// MicrosoftGraphRecipient defines model for microsoft.graph.recipient.
type MicrosoftGraphRecipient struct {
	// EmailAddress The recipient's email address.
	EmailAddress *MicrosoftGraphRecipient_EmailAddress `json:"emailAddress,omitempty"`
}

// MicrosoftGraphRecipientEmailAddress1 defines model for .
type MicrosoftGraphRecipientEmailAddress1 = map[string]interface{}

// MicrosoftGraphRecipient_EmailAddress The recipient's email address.
type MicrosoftGraphRecipient_EmailAddress struct {
	union json.RawMessage
}

// MicrosoftGraphRecurrencePattern defines model for microsoft.graph.recurrencePattern.
type MicrosoftGraphRecurrencePattern struct {
	// DayOfMonth The day of the month on which the event occurs. Required if type is absoluteMonthly or absoluteYearly.
	DayOfMonth *int32 `json:"dayOfMonth,omitempty"`

	// DaysOfWeek A collection of the days of the week on which the event occurs. The possible values are: sunday, monday, tuesday, wednesday, thursday, friday, saturday. If type is relativeMonthly or relativeYearly, and daysOfWeek specifies more than one day, the event falls on the first day that satisfies the pattern.  Required if type is weekly, relativeMonthly, or relativeYearly.
	DaysOfWeek *[]MicrosoftGraphRecurrencePattern_DaysOfWeek_Item `json:"daysOfWeek,omitempty"`

	// FirstDayOfWeek The first day of the week. The possible values are: sunday, monday, tuesday, wednesday, thursday, friday, saturday. Default is sunday. Required if type is weekly.
	FirstDayOfWeek *MicrosoftGraphRecurrencePattern_FirstDayOfWeek `json:"firstDayOfWeek,omitempty"`

	// Index Specifies on which instance of the allowed days specified in daysOfWeek the event occurs, counted from the first instance in the month. The possible values are: first, second, third, fourth, last. Default is first. Optional and used if type is relativeMonthly or relativeYearly.
	Index *MicrosoftGraphRecurrencePattern_Index `json:"index,omitempty"`

	// Interval The number of units between occurrences, where units can be in days, weeks, months, or years, depending on the type. Required.
	Interval *int32 `json:"interval,omitempty"`

	// Month The month in which the event occurs.  This is a number from 1 to 12.
	Month *int32 `json:"month,omitempty"`

	// Type The recurrence pattern type: daily, weekly, absoluteMonthly, relativeMonthly, absoluteYearly, relativeYearly. Required. For more information, see values of type property.
	Type *MicrosoftGraphRecurrencePattern_Type `json:"type,omitempty"`
}

// MicrosoftGraphRecurrencePatternDaysOfWeek1 defines model for .
type MicrosoftGraphRecurrencePatternDaysOfWeek1 = map[string]interface{}

// MicrosoftGraphRecurrencePattern_DaysOfWeek_Item defines model for microsoft.graph.recurrencePattern.daysOfWeek.Item.
type MicrosoftGraphRecurrencePattern_DaysOfWeek_Item struct {
	union json.RawMessage
}

// MicrosoftGraphRecurrencePatternFirstDayOfWeek1 defines model for .
type MicrosoftGraphRecurrencePatternFirstDayOfWeek1 = map[string]interface{}

// MicrosoftGraphRecurrencePattern_FirstDayOfWeek The first day of the week. The possible values are: sunday, monday, tuesday, wednesday, thursday, friday, saturday. Default is sunday. Required if type is weekly.
type MicrosoftGraphRecurrencePattern_FirstDayOfWeek struct {
	union json.RawMessage
}

// MicrosoftGraphRecurrencePatternIndex1 defines model for .
type MicrosoftGraphRecurrencePatternIndex1 = map[string]interface{}

// MicrosoftGraphRecurrencePattern_Index Specifies on which instance of the allowed days specified in daysOfWeek the event occurs, counted from the first instance in the month. The possible values are: first, second, third, fourth, last. Default is first. Optional and used if type is relativeMonthly or relativeYearly.
type MicrosoftGraphRecurrencePattern_Index struct {
	union json.RawMessage
}

// MicrosoftGraphRecurrencePatternType1 defines model for .
type MicrosoftGraphRecurrencePatternType1 = map[string]interface{}

// MicrosoftGraphRecurrencePattern_Type The recurrence pattern type: daily, weekly, absoluteMonthly, relativeMonthly, absoluteYearly, relativeYearly. Required. For more information, see values of type property.
type MicrosoftGraphRecurrencePattern_Type struct {
	union json.RawMessage
}

// MicrosoftGraphRecurrencePatternType defines model for microsoft.graph.recurrencePatternType.
type MicrosoftGraphRecurrencePatternType string

// MicrosoftGraphRecurrenceRange defines model for microsoft.graph.recurrenceRange.
type MicrosoftGraphRecurrenceRange struct {
	// EndDate The date to stop applying the recurrence pattern. Depending on the recurrence pattern of the event, the last occurrence of the meeting may not be this date. Required if type is endDate.
	EndDate *openapi_types.Date `json:"endDate"`

	// NumberOfOccurrences The number of times to repeat the event. Required and must be positive if type is numbered.
	NumberOfOccurrences *int32 `json:"numberOfOccurrences,omitempty"`

	// RecurrenceTimeZone Time zone for the startDate and endDate properties. Optional. If not specified, the time zone of the event is used.
	RecurrenceTimeZone *string `json:"recurrenceTimeZone"`

	// StartDate The date to start applying the recurrence pattern. The first occurrence of the meeting may be this date or later, depending on the recurrence pattern of the event. Must be the same value as the start property of the recurring event. Required.
	StartDate *openapi_types.Date `json:"startDate"`

	// Type The recurrence range. The possible values are: endDate, noEnd, numbered. Required.
	Type *MicrosoftGraphRecurrenceRange_Type `json:"type,omitempty"`
}

// MicrosoftGraphRecurrenceRangeType1 defines model for .
type MicrosoftGraphRecurrenceRangeType1 = map[string]interface{}

// MicrosoftGraphRecurrenceRange_Type The recurrence range. The possible values are: endDate, noEnd, numbered. Required.
type MicrosoftGraphRecurrenceRange_Type struct {
	union json.RawMessage
}

// MicrosoftGraphRecurrenceRangeType defines model for microsoft.graph.recurrenceRangeType.
type MicrosoftGraphRecurrenceRangeType string

// MicrosoftGraphRemoteItem defines model for microsoft.graph.remoteItem.
type MicrosoftGraphRemoteItem struct {
	// CreatedBy Identity of the user, device, and application which created the item. Read-only.
	CreatedBy *MicrosoftGraphRemoteItem_CreatedBy `json:"createdBy,omitempty"`

	// CreatedDateTime Date and time of item creation. Read-only.
	CreatedDateTime *time.Time `json:"createdDateTime"`

	// File Indicates that the remote item is a file. Read-only.
	File *MicrosoftGraphRemoteItem_File `json:"file,omitempty"`

	// FileSystemInfo Information about the remote item from the local file system. Read-only.
	FileSystemInfo *MicrosoftGraphRemoteItem_FileSystemInfo `json:"fileSystemInfo,omitempty"`

	// Folder Indicates that the remote item is a folder. Read-only.
	Folder *MicrosoftGraphRemoteItem_Folder `json:"folder,omitempty"`

	// Id Unique identifier for the remote item in its drive. Read-only.
	Id *string `json:"id"`

	// Image Image metadata, if the item is an image. Read-only.
	Image *MicrosoftGraphRemoteItem_Image `json:"image,omitempty"`

	// LastModifiedBy Identity of the user, device, and application which last modified the item. Read-only.
	LastModifiedBy *MicrosoftGraphRemoteItem_LastModifiedBy `json:"lastModifiedBy,omitempty"`

	// LastModifiedDateTime Date and time the item was last modified. Read-only.
	LastModifiedDateTime *time.Time `json:"lastModifiedDateTime"`

	// Name Optional. Filename of the remote item. Read-only.
	Name *string `json:"name"`

	// Package If present, indicates that this item is a package instead of a folder or file. Packages are treated like files in some contexts and folders in others. Read-only.
	Package *MicrosoftGraphRemoteItem_Package `json:"package,omitempty"`

	// ParentReference Properties of the parent of the remote item. Read-only.
	ParentReference *MicrosoftGraphRemoteItem_ParentReference `json:"parentReference,omitempty"`

	// Shared Indicates that the item has been shared with others and provides information about the shared state of the item. Read-only.
	Shared *MicrosoftGraphRemoteItem_Shared `json:"shared,omitempty"`

	// SharepointIds Provides interop between items in OneDrive for Business and SharePoint with the full set of item identifiers. Read-only.
	SharepointIds *MicrosoftGraphRemoteItem_SharepointIds `json:"sharepointIds,omitempty"`

	// Size Size of the remote item. Read-only.
	Size *int64 `json:"size"`

	// SpecialFolder If the current item is also available as a special folder, this facet is returned. Read-only.
	SpecialFolder *MicrosoftGraphRemoteItem_SpecialFolder `json:"specialFolder,omitempty"`

	// Video Video metadata, if the item is a video. Read-only.
	Video *MicrosoftGraphRemoteItem_Video `json:"video,omitempty"`

	// WebDavUrl DAV compatible URL for the item.
	WebDavUrl *string `json:"webDavUrl"`

	// WebUrl URL that displays the resource in the browser. Read-only.
	WebUrl *string `json:"webUrl"`
}

// MicrosoftGraphRemoteItemCreatedBy1 defines model for .
type MicrosoftGraphRemoteItemCreatedBy1 = map[string]interface{}

// MicrosoftGraphRemoteItem_CreatedBy Identity of the user, device, and application which created the item. Read-only.
type MicrosoftGraphRemoteItem_CreatedBy struct {
	union json.RawMessage
}

// MicrosoftGraphRemoteItemFile1 defines model for .
type MicrosoftGraphRemoteItemFile1 = map[string]interface{}

// MicrosoftGraphRemoteItem_File Indicates that the remote item is a file. Read-only.
type MicrosoftGraphRemoteItem_File struct {
	union json.RawMessage
}

// MicrosoftGraphRemoteItemFileSystemInfo1 defines model for .
type MicrosoftGraphRemoteItemFileSystemInfo1 = map[string]interface{}

// MicrosoftGraphRemoteItem_FileSystemInfo Information about the remote item from the local file system. Read-only.
type MicrosoftGraphRemoteItem_FileSystemInfo struct {
	union json.RawMessage
}

// MicrosoftGraphRemoteItemFolder1 defines model for .
type MicrosoftGraphRemoteItemFolder1 = map[string]interface{}

// MicrosoftGraphRemoteItem_Folder Indicates that the remote item is a folder. Read-only.
type MicrosoftGraphRemoteItem_Folder struct {
	union json.RawMessage
}

// MicrosoftGraphRemoteItemImage1 defines model for .
type MicrosoftGraphRemoteItemImage1 = map[string]interface{}

// MicrosoftGraphRemoteItem_Image Image metadata, if the item is an image. Read-only.
type MicrosoftGraphRemoteItem_Image struct {
	union json.RawMessage
}

// MicrosoftGraphRemoteItemLastModifiedBy1 defines model for .
type MicrosoftGraphRemoteItemLastModifiedBy1 = map[string]interface{}

// MicrosoftGraphRemoteItem_LastModifiedBy Identity of the user, device, and application which last modified the item. Read-only.
type MicrosoftGraphRemoteItem_LastModifiedBy struct {
	union json.RawMessage
}

// MicrosoftGraphRemoteItemPackage1 defines model for .
type MicrosoftGraphRemoteItemPackage1 = map[string]interface{}

// MicrosoftGraphRemoteItem_Package If present, indicates that this item is a package instead of a folder or file. Packages are treated like files in some contexts and folders in others. Read-only.
type MicrosoftGraphRemoteItem_Package struct {
	union json.RawMessage
}

// MicrosoftGraphRemoteItemParentReference1 defines model for .
type MicrosoftGraphRemoteItemParentReference1 = map[string]interface{}

// MicrosoftGraphRemoteItem_ParentReference Properties of the parent of the remote item. Read-only.
type MicrosoftGraphRemoteItem_ParentReference struct {
	union json.RawMessage
}

// MicrosoftGraphRemoteItemShared1 defines model for .
type MicrosoftGraphRemoteItemShared1 = map[string]interface{}

// MicrosoftGraphRemoteItem_Shared Indicates that the item has been shared with others and provides information about the shared state of the item. Read-only.
type MicrosoftGraphRemoteItem_Shared struct {
	union json.RawMessage
}

// MicrosoftGraphRemoteItemSharepointIds1 defines model for .
type MicrosoftGraphRemoteItemSharepointIds1 = map[string]interface{}

// MicrosoftGraphRemoteItem_SharepointIds Provides interop between items in OneDrive for Business and SharePoint with the full set of item identifiers. Read-only.
type MicrosoftGraphRemoteItem_SharepointIds struct {
	union json.RawMessage
}

// MicrosoftGraphRemoteItemSpecialFolder1 defines model for .
type MicrosoftGraphRemoteItemSpecialFolder1 = map[string]interface{}

// MicrosoftGraphRemoteItem_SpecialFolder If the current item is also available as a special folder, this facet is returned. Read-only.
type MicrosoftGraphRemoteItem_SpecialFolder struct {
	union json.RawMessage
}

// MicrosoftGraphRemoteItemVideo1 defines model for .
type MicrosoftGraphRemoteItemVideo1 = map[string]interface{}

// MicrosoftGraphRemoteItem_Video Video metadata, if the item is a video. Read-only.
type MicrosoftGraphRemoteItem_Video struct {
	union json.RawMessage
}

// MicrosoftGraphResourceReference defines model for microsoft.graph.resourceReference.
type MicrosoftGraphResourceReference struct {
	// Id The item's unique identifier.
	Id *string `json:"id"`

	// Type A string value that can be used to classify the item, such as 'microsoft.graph.driveItem'
	Type *string `json:"type"`

	// WebUrl A URL leading to the referenced item.
	WebUrl *string `json:"webUrl"`
}

// MicrosoftGraphResourceSpecificPermissionGrant defines model for microsoft.graph.resourceSpecificPermissionGrant.
type MicrosoftGraphResourceSpecificPermissionGrant struct {
	// ClientAppId ID of the service principal of the Azure AD app that has been granted access. Read-only.
	ClientAppId *string `json:"clientAppId"`

	// ClientId ID of the Azure AD app that has been granted access. Read-only.
	ClientId *string `json:"clientId"`

	// DeletedDateTime Date and time when this object was deleted. Always null when the object hasn't been deleted.
	DeletedDateTime *time.Time `json:"deletedDateTime"`

	// Id The unique idenfier for an entity. Read-only.
	Id *string `json:"id,omitempty"`

	// Permission The name of the resource-specific permission. Read-only.
	Permission *string `json:"permission"`

	// PermissionType The type of permission. Possible values are: Application, Delegated. Read-only.
	PermissionType *string `json:"permissionType"`

	// ResourceAppId ID of the Azure AD app that is hosting the resource. Read-only.
	ResourceAppId *string `json:"resourceAppId"`
}

// MicrosoftGraphResourceVisualization defines model for microsoft.graph.resourceVisualization.
type MicrosoftGraphResourceVisualization struct {
	// ContainerDisplayName A string describing where the item is stored. For example, the name of a SharePoint site or the user name identifying the owner of the OneDrive storing the item.
	ContainerDisplayName *string `json:"containerDisplayName"`

	// ContainerType Can be used for filtering by the type of container in which the file is stored. Such as Site or OneDriveBusiness.
	ContainerType *string `json:"containerType"`

	// ContainerWebUrl A path leading to the folder in which the item is stored.
	ContainerWebUrl *string `json:"containerWebUrl"`

	// MediaType The item's media type. Can be used for filtering for a specific type of file based on supported IANA Media Mime Types. Note that not all Media Mime Types are supported.
	MediaType *string `json:"mediaType"`

	// PreviewImageUrl A URL leading to the preview image for the item.
	PreviewImageUrl *string `json:"previewImageUrl"`

	// PreviewText A preview text for the item.
	PreviewText *string `json:"previewText"`

	// Title The item's title text.
	Title *string `json:"title"`

	// Type The item's media type. Can be used for filtering for a specific file based on a specific type. See below for supported types.
	Type *string `json:"type"`
}

// MicrosoftGraphResponseStatus defines model for microsoft.graph.responseStatus.
type MicrosoftGraphResponseStatus struct {
	// Response The response type. Possible values are: none, organizer, tentativelyAccepted, accepted, declined, notResponded.To differentiate between none and notResponded:  none – from organizer's perspective. This value is used when the status of an attendee/participant is reported to the organizer of a meeting.  notResponded – from attendee's perspective. Indicates the attendee has not responded to the meeting request.  Clients can treat notResponded == none.  As an example, if attendee Alex hasn't responded to a meeting request, getting Alex' response status for that event in Alex' calendar returns notResponded. Getting Alex' response from the calendar of any other attendee or the organizer's returns none. Getting the organizer's response for the event in anybody's calendar also returns none.
	Response *MicrosoftGraphResponseStatus_Response `json:"response,omitempty"`

	// Time The date and time when the response was returned. It uses ISO 8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 is 2014-01-01T00:00:00Z
	Time *time.Time `json:"time"`
}

// MicrosoftGraphResponseStatusResponse1 defines model for .
type MicrosoftGraphResponseStatusResponse1 = map[string]interface{}

// MicrosoftGraphResponseStatus_Response The response type. Possible values are: none, organizer, tentativelyAccepted, accepted, declined, notResponded.To differentiate between none and notResponded:  none – from organizer's perspective. This value is used when the status of an attendee/participant is reported to the organizer of a meeting.  notResponded – from attendee's perspective. Indicates the attendee has not responded to the meeting request.  Clients can treat notResponded == none.  As an example, if attendee Alex hasn't responded to a meeting request, getting Alex' response status for that event in Alex' calendar returns notResponded. Getting Alex' response from the calendar of any other attendee or the organizer's returns none. Getting the organizer's response for the event in anybody's calendar also returns none.
type MicrosoftGraphResponseStatus_Response struct {
	union json.RawMessage
}

// MicrosoftGraphResponseType defines model for microsoft.graph.responseType.
type MicrosoftGraphResponseType string

// MicrosoftGraphRichLongRunningOperation defines model for microsoft.graph.richLongRunningOperation.
type MicrosoftGraphRichLongRunningOperation struct {
	// CreatedDateTime The start time of the operation. The Timestamp type represents date and time information using ISO 8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 is 2014-01-01T00:00:00Z.
	CreatedDateTime *time.Time `json:"createdDateTime"`

	// Error Error that caused the operation to fail.
	Error *MicrosoftGraphRichLongRunningOperation_Error `json:"error,omitempty"`

	// Id The unique idenfier for an entity. Read-only.
	Id *string `json:"id,omitempty"`

	// LastActionDateTime The time of the last action in the operation. The Timestamp type represents date and time information using ISO 8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 is 2014-01-01T00:00:00Z.
	LastActionDateTime *time.Time `json:"lastActionDateTime"`

	// PercentageComplete A value between 0 and 100 that indicates the progress of the operation.
	PercentageComplete *int32 `json:"percentageComplete"`

	// ResourceId The unique identifier for the result.
	ResourceId *string `json:"resourceId"`

	// ResourceLocation URI of the resource that the operation is performed on.
	ResourceLocation *string `json:"resourceLocation"`

	// Status The status of the operation. The possible values are: notStarted, running, succeeded, failed, unknownFutureValue.
	Status *MicrosoftGraphRichLongRunningOperation_Status `json:"status,omitempty"`

	// StatusDetail Details about the status of the operation.
	StatusDetail *string `json:"statusDetail"`

	// Type The type of the operation.
	Type *string `json:"type"`
}

// MicrosoftGraphRichLongRunningOperationError1 defines model for .
type MicrosoftGraphRichLongRunningOperationError1 = map[string]interface{}

// MicrosoftGraphRichLongRunningOperation_Error Error that caused the operation to fail.
type MicrosoftGraphRichLongRunningOperation_Error struct {
	union json.RawMessage
}

// MicrosoftGraphRichLongRunningOperationStatus1 defines model for .
type MicrosoftGraphRichLongRunningOperationStatus1 = map[string]interface{}

// MicrosoftGraphRichLongRunningOperation_Status The status of the operation. The possible values are: notStarted, running, succeeded, failed, unknownFutureValue.
type MicrosoftGraphRichLongRunningOperation_Status struct {
	union json.RawMessage
}

// MicrosoftGraphRoot defines model for microsoft.graph.root.
type MicrosoftGraphRoot = map[string]interface{}

// MicrosoftGraphSchedule defines model for microsoft.graph.schedule.
type MicrosoftGraphSchedule struct {
	// Enabled Indicates whether the schedule is enabled for the team. Required.
	Enabled *bool `json:"enabled"`

	// Id The unique idenfier for an entity. Read-only.
	Id *string `json:"id,omitempty"`

	// OfferShiftRequests The offer requests for shifts in the schedule.
	OfferShiftRequests *[]MicrosoftGraphOfferShiftRequest `json:"offerShiftRequests,omitempty"`

	// OfferShiftRequestsEnabled Indicates whether offer shift requests are enabled for the schedule.
	OfferShiftRequestsEnabled *bool `json:"offerShiftRequestsEnabled"`

	// OpenShiftChangeRequests The open shift requests in the schedule.
	OpenShiftChangeRequests *[]MicrosoftGraphOpenShiftChangeRequest `json:"openShiftChangeRequests,omitempty"`

	// OpenShifts The set of open shifts in a scheduling group in the schedule.
	OpenShifts *[]MicrosoftGraphOpenShift `json:"openShifts,omitempty"`

	// OpenShiftsEnabled Indicates whether open shifts are enabled for the schedule.
	OpenShiftsEnabled *bool `json:"openShiftsEnabled"`

	// ProvisionStatus The status of the schedule provisioning. The possible values are notStarted, running, completed, failed.
	ProvisionStatus *MicrosoftGraphSchedule_ProvisionStatus `json:"provisionStatus,omitempty"`

	// ProvisionStatusCode Additional information about why schedule provisioning failed.
	ProvisionStatusCode *string `json:"provisionStatusCode"`

	// SchedulingGroups The logical grouping of users in the schedule (usually by role).
	SchedulingGroups *[]MicrosoftGraphSchedulingGroup `json:"schedulingGroups,omitempty"`

	// Shifts The shifts in the schedule.
	Shifts *[]MicrosoftGraphShift `json:"shifts,omitempty"`

	// SwapShiftsChangeRequests The swap requests for shifts in the schedule.
	SwapShiftsChangeRequests *[]MicrosoftGraphSwapShiftsChangeRequest `json:"swapShiftsChangeRequests,omitempty"`

	// SwapShiftsRequestsEnabled Indicates whether swap shifts requests are enabled for the schedule.
	SwapShiftsRequestsEnabled *bool `json:"swapShiftsRequestsEnabled"`

	// TimeClockEnabled Indicates whether time clock is enabled for the schedule.
	TimeClockEnabled *bool `json:"timeClockEnabled"`

	// TimeOffReasons The set of reasons for a time off in the schedule.
	TimeOffReasons *[]MicrosoftGraphTimeOffReason `json:"timeOffReasons,omitempty"`

	// TimeOffRequests The time off requests in the schedule.
	TimeOffRequests *[]MicrosoftGraphTimeOffRequest `json:"timeOffRequests,omitempty"`

	// TimeOffRequestsEnabled Indicates whether time off requests are enabled for the schedule.
	TimeOffRequestsEnabled *bool `json:"timeOffRequestsEnabled"`

	// TimeZone Indicates the time zone of the schedule team using tz database format. Required.
	TimeZone *string `json:"timeZone"`

	// TimesOff The instances of times off in the schedule.
	TimesOff                *[]MicrosoftGraphTimeOff `json:"timesOff,omitempty"`
	WorkforceIntegrationIds *[]string                `json:"workforceIntegrationIds,omitempty"`
}

// MicrosoftGraphScheduleProvisionStatus1 defines model for .
type MicrosoftGraphScheduleProvisionStatus1 = map[string]interface{}

// MicrosoftGraphSchedule_ProvisionStatus The status of the schedule provisioning. The possible values are notStarted, running, completed, failed.
type MicrosoftGraphSchedule_ProvisionStatus struct {
	union json.RawMessage
}

// MicrosoftGraphScheduleChangeRequest defines model for microsoft.graph.scheduleChangeRequest.
type MicrosoftGraphScheduleChangeRequest struct {
	AssignedTo *MicrosoftGraphScheduleChangeRequest_AssignedTo `json:"assignedTo,omitempty"`

	// CreatedDateTime The Timestamp type represents date and time information using ISO 8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 is 2014-01-01T00:00:00Z
	CreatedDateTime *time.Time `json:"createdDateTime"`

	// Id The unique idenfier for an entity. Read-only.
	Id *string `json:"id,omitempty"`

	// LastModifiedBy Identity of the person who last modified the entity.
	LastModifiedBy *MicrosoftGraphScheduleChangeRequest_LastModifiedBy `json:"lastModifiedBy,omitempty"`

	// LastModifiedDateTime The Timestamp type represents date and time information using ISO 8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 is 2014-01-01T00:00:00Z
	LastModifiedDateTime  *time.Time                                 `json:"lastModifiedDateTime"`
	ManagerActionDateTime *time.Time                                 `json:"managerActionDateTime"`
	ManagerActionMessage  *string                                    `json:"managerActionMessage"`
	ManagerUserId         *string                                    `json:"managerUserId"`
	SenderDateTime        *time.Time                                 `json:"senderDateTime"`
	SenderMessage         *string                                    `json:"senderMessage"`
	SenderUserId          *string                                    `json:"senderUserId"`
	State                 *MicrosoftGraphScheduleChangeRequest_State `json:"state,omitempty"`
}

// MicrosoftGraphScheduleChangeRequestAssignedTo1 defines model for .
type MicrosoftGraphScheduleChangeRequestAssignedTo1 = map[string]interface{}

// MicrosoftGraphScheduleChangeRequest_AssignedTo defines model for MicrosoftGraphScheduleChangeRequest.AssignedTo.
type MicrosoftGraphScheduleChangeRequest_AssignedTo struct {
	union json.RawMessage
}

// MicrosoftGraphScheduleChangeRequestLastModifiedBy1 defines model for .
type MicrosoftGraphScheduleChangeRequestLastModifiedBy1 = map[string]interface{}

// MicrosoftGraphScheduleChangeRequest_LastModifiedBy Identity of the person who last modified the entity.
type MicrosoftGraphScheduleChangeRequest_LastModifiedBy struct {
	union json.RawMessage
}

// MicrosoftGraphScheduleChangeRequestState1 defines model for .
type MicrosoftGraphScheduleChangeRequestState1 = map[string]interface{}

// MicrosoftGraphScheduleChangeRequest_State defines model for MicrosoftGraphScheduleChangeRequest.State.
type MicrosoftGraphScheduleChangeRequest_State struct {
	union json.RawMessage
}

// MicrosoftGraphScheduleChangeRequestActor defines model for microsoft.graph.scheduleChangeRequestActor.
type MicrosoftGraphScheduleChangeRequestActor string

// MicrosoftGraphScheduleChangeState defines model for microsoft.graph.scheduleChangeState.
type MicrosoftGraphScheduleChangeState string

// MicrosoftGraphScheduleEntity defines model for microsoft.graph.scheduleEntity.
type MicrosoftGraphScheduleEntity struct {
	EndDateTime   *time.Time                         `json:"endDateTime"`
	StartDateTime *time.Time                         `json:"startDateTime"`
	Theme         *MicrosoftGraphScheduleEntityTheme `json:"theme,omitempty"`
}

// MicrosoftGraphScheduleEntityTheme defines model for microsoft.graph.scheduleEntityTheme.
type MicrosoftGraphScheduleEntityTheme string

// MicrosoftGraphSchedulingGroup defines model for microsoft.graph.schedulingGroup.
type MicrosoftGraphSchedulingGroup struct {
	// CreatedDateTime The Timestamp type represents date and time information using ISO 8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 is 2014-01-01T00:00:00Z
	CreatedDateTime *time.Time `json:"createdDateTime"`

	// DisplayName The display name for the schedulingGroup. Required.
	DisplayName *string `json:"displayName"`

	// Id The unique idenfier for an entity. Read-only.
	Id *string `json:"id,omitempty"`

	// IsActive Indicates whether the schedulingGroup can be used when creating new entities or updating existing ones. Required.
	IsActive *bool `json:"isActive"`

	// LastModifiedBy Identity of the person who last modified the entity.
	LastModifiedBy *MicrosoftGraphSchedulingGroup_LastModifiedBy `json:"lastModifiedBy,omitempty"`

	// LastModifiedDateTime The Timestamp type represents date and time information using ISO 8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 is 2014-01-01T00:00:00Z
	LastModifiedDateTime *time.Time `json:"lastModifiedDateTime"`

	// UserIds The list of user IDs that are a member of the schedulingGroup. Required.
	UserIds *[]string `json:"userIds,omitempty"`
}

// MicrosoftGraphSchedulingGroupLastModifiedBy1 defines model for .
type MicrosoftGraphSchedulingGroupLastModifiedBy1 = map[string]interface{}

// MicrosoftGraphSchedulingGroup_LastModifiedBy Identity of the person who last modified the entity.
type MicrosoftGraphSchedulingGroup_LastModifiedBy struct {
	union json.RawMessage
}

// MicrosoftGraphScopedRoleMembership defines model for microsoft.graph.scopedRoleMembership.
type MicrosoftGraphScopedRoleMembership struct {
	// AdministrativeUnitId Unique identifier for the administrative unit that the directory role is scoped to
	AdministrativeUnitId *string `json:"administrativeUnitId,omitempty"`

	// Id The unique idenfier for an entity. Read-only.
	Id *string `json:"id,omitempty"`

	// RoleId Unique identifier for the directory role that the member is in.
	RoleId         *string                 `json:"roleId,omitempty"`
	RoleMemberInfo *MicrosoftGraphIdentity `json:"roleMemberInfo,omitempty"`
}

// MicrosoftGraphScoredEmailAddress defines model for microsoft.graph.scoredEmailAddress.
type MicrosoftGraphScoredEmailAddress struct {
	// Address The email address.
	Address *string `json:"address"`
	ItemId  *string `json:"itemId"`

	// RelevanceScore The relevance score of the email address. A relevance score is used as a sort key, in relation to the other returned results. A higher relevance score value corresponds to a more relevant result. Relevance is determined by the user’s communication and collaboration patterns and business relationships.
	RelevanceScore      *MicrosoftGraphScoredEmailAddress_RelevanceScore      `json:"relevanceScore"`
	SelectionLikelihood *MicrosoftGraphScoredEmailAddress_SelectionLikelihood `json:"selectionLikelihood,omitempty"`
}

// MicrosoftGraphScoredEmailAddressRelevanceScore0 defines model for .
type MicrosoftGraphScoredEmailAddressRelevanceScore0 = float64

// MicrosoftGraphScoredEmailAddressRelevanceScore1 defines model for .
type MicrosoftGraphScoredEmailAddressRelevanceScore1 = string

// MicrosoftGraphScoredEmailAddress_RelevanceScore The relevance score of the email address. A relevance score is used as a sort key, in relation to the other returned results. A higher relevance score value corresponds to a more relevant result. Relevance is determined by the user’s communication and collaboration patterns and business relationships.
type MicrosoftGraphScoredEmailAddress_RelevanceScore struct {
	union json.RawMessage
}

// MicrosoftGraphScoredEmailAddressSelectionLikelihood1 defines model for .
type MicrosoftGraphScoredEmailAddressSelectionLikelihood1 = map[string]interface{}

// MicrosoftGraphScoredEmailAddress_SelectionLikelihood defines model for MicrosoftGraphScoredEmailAddress.SelectionLikelihood.
type MicrosoftGraphScoredEmailAddress_SelectionLikelihood struct {
	union json.RawMessage
}

// MicrosoftGraphSearchResult defines model for microsoft.graph.searchResult.
type MicrosoftGraphSearchResult struct {
	// OnClickTelemetryUrl A callback URL that can be used to record telemetry information. The application should issue a GET on this URL if the user interacts with this item to improve the quality of results.
	OnClickTelemetryUrl *string `json:"onClickTelemetryUrl"`
}

// MicrosoftGraphSectionGroup defines model for microsoft.graph.sectionGroup.
type MicrosoftGraphSectionGroup struct {
	// CreatedBy Identity of the user, device, and application which created the item. Read-only.
	CreatedBy *MicrosoftGraphSectionGroup_CreatedBy `json:"createdBy,omitempty"`

	// CreatedDateTime The date and time when the page was created. The timestamp represents date and time information using ISO 8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 is 2014-01-01T00:00:00Z. Read-only.
	CreatedDateTime *time.Time `json:"createdDateTime"`

	// DisplayName The name of the notebook.
	DisplayName *string `json:"displayName"`

	// Id The unique idenfier for an entity. Read-only.
	Id *string `json:"id,omitempty"`

	// LastModifiedBy Identity of the user, device, and application which created the item. Read-only.
	LastModifiedBy *MicrosoftGraphSectionGroup_LastModifiedBy `json:"lastModifiedBy,omitempty"`

	// LastModifiedDateTime The date and time when the notebook was last modified. The timestamp represents date and time information using ISO 8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 is 2014-01-01T00:00:00Z. Read-only.
	LastModifiedDateTime *time.Time `json:"lastModifiedDateTime"`

	// ParentNotebook The notebook that contains the section group. Read-only.
	ParentNotebook *MicrosoftGraphSectionGroup_ParentNotebook `json:"parentNotebook,omitempty"`

	// ParentSectionGroup The section group that contains the section group. Read-only.
	ParentSectionGroup *MicrosoftGraphSectionGroup_ParentSectionGroup `json:"parentSectionGroup,omitempty"`

	// SectionGroups The section groups in the section. Read-only. Nullable.
	SectionGroups *[]MicrosoftGraphSectionGroup `json:"sectionGroups,omitempty"`

	// SectionGroupsUrl The URL for the sectionGroups navigation property, which returns all the section groups in the section group. Read-only.
	SectionGroupsUrl *string `json:"sectionGroupsUrl"`

	// Sections The sections in the section group. Read-only. Nullable.
	Sections *[]MicrosoftGraphOnenoteSection `json:"sections,omitempty"`

	// SectionsUrl The URL for the sections navigation property, which returns all the sections in the section group. Read-only.
	SectionsUrl *string `json:"sectionsUrl"`

	// Self The endpoint where you can get details about the page. Read-only.
	Self *string `json:"self"`
}

// MicrosoftGraphSectionGroupCreatedBy1 defines model for .
type MicrosoftGraphSectionGroupCreatedBy1 = map[string]interface{}

// MicrosoftGraphSectionGroup_CreatedBy Identity of the user, device, and application which created the item. Read-only.
type MicrosoftGraphSectionGroup_CreatedBy struct {
	union json.RawMessage
}

// MicrosoftGraphSectionGroupLastModifiedBy1 defines model for .
type MicrosoftGraphSectionGroupLastModifiedBy1 = map[string]interface{}

// MicrosoftGraphSectionGroup_LastModifiedBy Identity of the user, device, and application which created the item. Read-only.
type MicrosoftGraphSectionGroup_LastModifiedBy struct {
	union json.RawMessage
}

// MicrosoftGraphSectionGroupParentNotebook1 defines model for .
type MicrosoftGraphSectionGroupParentNotebook1 = map[string]interface{}

// MicrosoftGraphSectionGroup_ParentNotebook The notebook that contains the section group. Read-only.
type MicrosoftGraphSectionGroup_ParentNotebook struct {
	union json.RawMessage
}

// MicrosoftGraphSectionGroupParentSectionGroup1 defines model for .
type MicrosoftGraphSectionGroupParentSectionGroup1 = map[string]interface{}

// MicrosoftGraphSectionGroup_ParentSectionGroup The section group that contains the section group. Read-only.
type MicrosoftGraphSectionGroup_ParentSectionGroup struct {
	union json.RawMessage
}

// MicrosoftGraphSectionLinks defines model for microsoft.graph.sectionLinks.
type MicrosoftGraphSectionLinks struct {
	// OneNoteClientUrl Opens the section in the OneNote native client if it's installed.
	OneNoteClientUrl *MicrosoftGraphSectionLinks_OneNoteClientUrl `json:"oneNoteClientUrl,omitempty"`

	// OneNoteWebUrl Opens the section in OneNote on the web.
	OneNoteWebUrl *MicrosoftGraphSectionLinks_OneNoteWebUrl `json:"oneNoteWebUrl,omitempty"`
}

// MicrosoftGraphSectionLinksOneNoteClientUrl1 defines model for .
type MicrosoftGraphSectionLinksOneNoteClientUrl1 = map[string]interface{}

// MicrosoftGraphSectionLinks_OneNoteClientUrl Opens the section in the OneNote native client if it's installed.
type MicrosoftGraphSectionLinks_OneNoteClientUrl struct {
	union json.RawMessage
}

// MicrosoftGraphSectionLinksOneNoteWebUrl1 defines model for .
type MicrosoftGraphSectionLinksOneNoteWebUrl1 = map[string]interface{}

// MicrosoftGraphSectionLinks_OneNoteWebUrl Opens the section in OneNote on the web.
type MicrosoftGraphSectionLinks_OneNoteWebUrl struct {
	union json.RawMessage
}

// MicrosoftGraphSelectionLikelihoodInfo defines model for microsoft.graph.selectionLikelihoodInfo.
type MicrosoftGraphSelectionLikelihoodInfo string

// MicrosoftGraphSensitivity defines model for microsoft.graph.sensitivity.
type MicrosoftGraphSensitivity string

// MicrosoftGraphServicePlanInfo defines model for microsoft.graph.servicePlanInfo.
type MicrosoftGraphServicePlanInfo struct {
	// AppliesTo The object the service plan can be assigned to. The possible values are:User - service plan can be assigned to individual users.Company - service plan can be assigned to the entire tenant.
	AppliesTo *string `json:"appliesTo"`

	// ProvisioningStatus The provisioning status of the service plan. The possible values are:Success - Service is fully provisioned.Disabled - Service has been disabled.ErrorStatus - The service plan has not been provisioned and is in an error state.PendingInput - Service is not yet provisioned; awaiting service confirmation.PendingActivation - Service is provisioned but requires explicit activation by administrator (for example, Intune_O365 service plan)PendingProvisioning - Microsoft has added a new service to the product SKU and it has not been activated in the tenant, yet.
	ProvisioningStatus *string `json:"provisioningStatus"`

	// ServicePlanId The unique identifier of the service plan.
	ServicePlanId *openapi_types.UUID `json:"servicePlanId"`

	// ServicePlanName The name of the service plan.
	ServicePlanName *string `json:"servicePlanName"`
}

// MicrosoftGraphSettingSource defines model for microsoft.graph.settingSource.
type MicrosoftGraphSettingSource struct {
	// DisplayName Not yet documented
	DisplayName *string `json:"displayName"`

	// Id Not yet documented
	Id         *string                          `json:"id"`
	SourceType *MicrosoftGraphSettingSourceType `json:"sourceType,omitempty"`
}

// MicrosoftGraphSettingSourceType defines model for microsoft.graph.settingSourceType.
type MicrosoftGraphSettingSourceType string

// MicrosoftGraphSettingValue defines model for microsoft.graph.settingValue.
type MicrosoftGraphSettingValue struct {
	// Name Name of the setting (as defined by the groupSettingTemplate).
	Name *string `json:"name"`

	// Value Value of the setting.
	Value *string `json:"value"`
}

// MicrosoftGraphSharePointIdentity defines model for microsoft.graph.sharePointIdentity.
type MicrosoftGraphSharePointIdentity struct {
	// DisplayName The display name of the identity. Note that this might not always be available or up to date. For example, if a user changes their display name, the API might show the new value in a future response, but the items associated with the user won't show up as having changed when using delta.
	DisplayName *string `json:"displayName"`

	// Id Unique identifier for the identity.
	Id *string `json:"id"`

	// LoginName The sign in name of the SharePoint identity.
	LoginName *string `json:"loginName"`
}

// MicrosoftGraphSharePointIdentitySet defines model for microsoft.graph.sharePointIdentitySet.
type MicrosoftGraphSharePointIdentitySet struct {
	// Application Optional. The application associated with this action.
	Application *MicrosoftGraphSharePointIdentitySet_Application `json:"application,omitempty"`

	// Device Optional. The device associated with this action.
	Device *MicrosoftGraphSharePointIdentitySet_Device `json:"device,omitempty"`

	// Group The group associated with this action. Optional.
	Group *MicrosoftGraphSharePointIdentitySet_Group `json:"group,omitempty"`

	// SiteGroup The SharePoint group associated with this action. Optional.
	SiteGroup *MicrosoftGraphSharePointIdentitySet_SiteGroup `json:"siteGroup,omitempty"`

	// SiteUser The SharePoint user associated with this action. Optional.
	SiteUser *MicrosoftGraphSharePointIdentitySet_SiteUser `json:"siteUser,omitempty"`

	// User Optional. The user associated with this action.
	User *MicrosoftGraphSharePointIdentitySet_User `json:"user,omitempty"`
}

// MicrosoftGraphSharePointIdentitySetApplication1 defines model for .
type MicrosoftGraphSharePointIdentitySetApplication1 = map[string]interface{}

// MicrosoftGraphSharePointIdentitySet_Application Optional. The application associated with this action.
type MicrosoftGraphSharePointIdentitySet_Application struct {
	union json.RawMessage
}

// MicrosoftGraphSharePointIdentitySetDevice1 defines model for .
type MicrosoftGraphSharePointIdentitySetDevice1 = map[string]interface{}

// MicrosoftGraphSharePointIdentitySet_Device Optional. The device associated with this action.
type MicrosoftGraphSharePointIdentitySet_Device struct {
	union json.RawMessage
}

// MicrosoftGraphSharePointIdentitySetGroup1 defines model for .
type MicrosoftGraphSharePointIdentitySetGroup1 = map[string]interface{}

// MicrosoftGraphSharePointIdentitySet_Group The group associated with this action. Optional.
type MicrosoftGraphSharePointIdentitySet_Group struct {
	union json.RawMessage
}

// MicrosoftGraphSharePointIdentitySetSiteGroup1 defines model for .
type MicrosoftGraphSharePointIdentitySetSiteGroup1 = map[string]interface{}

// MicrosoftGraphSharePointIdentitySet_SiteGroup The SharePoint group associated with this action. Optional.
type MicrosoftGraphSharePointIdentitySet_SiteGroup struct {
	union json.RawMessage
}

// MicrosoftGraphSharePointIdentitySetSiteUser1 defines model for .
type MicrosoftGraphSharePointIdentitySetSiteUser1 = map[string]interface{}

// MicrosoftGraphSharePointIdentitySet_SiteUser The SharePoint user associated with this action. Optional.
type MicrosoftGraphSharePointIdentitySet_SiteUser struct {
	union json.RawMessage
}

// MicrosoftGraphSharePointIdentitySetUser1 defines model for .
type MicrosoftGraphSharePointIdentitySetUser1 = map[string]interface{}

// MicrosoftGraphSharePointIdentitySet_User Optional. The user associated with this action.
type MicrosoftGraphSharePointIdentitySet_User struct {
	union json.RawMessage
}

// MicrosoftGraphShared defines model for microsoft.graph.shared.
type MicrosoftGraphShared struct {
	// Owner The identity of the owner of the shared item. Read-only.
	Owner *MicrosoftGraphShared_Owner `json:"owner,omitempty"`

	// Scope Indicates the scope of how the item is shared: anonymous, organization, or users. Read-only.
	Scope *string `json:"scope"`

	// SharedBy The identity of the user who shared the item. Read-only.
	SharedBy *MicrosoftGraphShared_SharedBy `json:"sharedBy,omitempty"`

	// SharedDateTime The UTC date and time when the item was shared. Read-only.
	SharedDateTime *time.Time `json:"sharedDateTime"`
}

// MicrosoftGraphSharedOwner1 defines model for .
type MicrosoftGraphSharedOwner1 = map[string]interface{}

// MicrosoftGraphShared_Owner The identity of the owner of the shared item. Read-only.
type MicrosoftGraphShared_Owner struct {
	union json.RawMessage
}

// MicrosoftGraphSharedSharedBy1 defines model for .
type MicrosoftGraphSharedSharedBy1 = map[string]interface{}

// MicrosoftGraphShared_SharedBy The identity of the user who shared the item. Read-only.
type MicrosoftGraphShared_SharedBy struct {
	union json.RawMessage
}

// MicrosoftGraphSharedInsight defines model for microsoft.graph.sharedInsight.
type MicrosoftGraphSharedInsight struct {
	// Id The unique idenfier for an entity. Read-only.
	Id *string `json:"id,omitempty"`

	// LastShared Details about the shared item. Read only.
	LastShared       *MicrosoftGraphSharedInsight_LastShared       `json:"lastShared,omitempty"`
	LastSharedMethod *MicrosoftGraphSharedInsight_LastSharedMethod `json:"lastSharedMethod,omitempty"`

	// Resource Used for navigating to the item that was shared. For file attachments, the type is fileAttachment. For linked attachments, the type is driveItem.
	Resource *MicrosoftGraphSharedInsight_Resource `json:"resource,omitempty"`

	// ResourceReference Reference properties of the shared document, such as the url and type of the document. Read-only
	ResourceReference *MicrosoftGraphSharedInsight_ResourceReference `json:"resourceReference,omitempty"`

	// ResourceVisualization Properties that you can use to visualize the document in your experience. Read-only
	ResourceVisualization *MicrosoftGraphSharedInsight_ResourceVisualization `json:"resourceVisualization,omitempty"`
	SharingHistory        *[]MicrosoftGraphSharedInsight_SharingHistory_Item `json:"sharingHistory,omitempty"`
}

// MicrosoftGraphSharedInsightLastShared1 defines model for .
type MicrosoftGraphSharedInsightLastShared1 = map[string]interface{}

// MicrosoftGraphSharedInsight_LastShared Details about the shared item. Read only.
type MicrosoftGraphSharedInsight_LastShared struct {
	union json.RawMessage
}

// MicrosoftGraphSharedInsightLastSharedMethod1 defines model for .
type MicrosoftGraphSharedInsightLastSharedMethod1 = map[string]interface{}

// MicrosoftGraphSharedInsight_LastSharedMethod defines model for MicrosoftGraphSharedInsight.LastSharedMethod.
type MicrosoftGraphSharedInsight_LastSharedMethod struct {
	union json.RawMessage
}

// MicrosoftGraphSharedInsightResource1 defines model for .
type MicrosoftGraphSharedInsightResource1 = map[string]interface{}

// MicrosoftGraphSharedInsight_Resource Used for navigating to the item that was shared. For file attachments, the type is fileAttachment. For linked attachments, the type is driveItem.
type MicrosoftGraphSharedInsight_Resource struct {
	union json.RawMessage
}

// MicrosoftGraphSharedInsightResourceReference1 defines model for .
type MicrosoftGraphSharedInsightResourceReference1 = map[string]interface{}

// MicrosoftGraphSharedInsight_ResourceReference Reference properties of the shared document, such as the url and type of the document. Read-only
type MicrosoftGraphSharedInsight_ResourceReference struct {
	union json.RawMessage
}

// MicrosoftGraphSharedInsightResourceVisualization1 defines model for .
type MicrosoftGraphSharedInsightResourceVisualization1 = map[string]interface{}

// MicrosoftGraphSharedInsight_ResourceVisualization Properties that you can use to visualize the document in your experience. Read-only
type MicrosoftGraphSharedInsight_ResourceVisualization struct {
	union json.RawMessage
}

// MicrosoftGraphSharedInsightSharingHistory1 defines model for .
type MicrosoftGraphSharedInsightSharingHistory1 = map[string]interface{}

// MicrosoftGraphSharedInsight_SharingHistory_Item defines model for microsoft.graph.sharedInsight.sharingHistory.Item.
type MicrosoftGraphSharedInsight_SharingHistory_Item struct {
	union json.RawMessage
}

// MicrosoftGraphSharedWithChannelTeamInfo defines model for microsoft.graph.sharedWithChannelTeamInfo.
type MicrosoftGraphSharedWithChannelTeamInfo struct {
	// AllowedMembers A collection of team members who have access to the shared channel.
	AllowedMembers *[]MicrosoftGraphConversationMember `json:"allowedMembers,omitempty"`

	// DisplayName The name of the team.
	DisplayName *string `json:"displayName"`

	// Id The unique idenfier for an entity. Read-only.
	Id *string `json:"id,omitempty"`

	// IsHostTeam Indicates whether the team is the host of the channel.
	IsHostTeam *bool                                         `json:"isHostTeam"`
	Team       *MicrosoftGraphSharedWithChannelTeamInfo_Team `json:"team,omitempty"`

	// TenantId The ID of the Azure Active Directory tenant.
	TenantId *string `json:"tenantId"`
}

// MicrosoftGraphSharedWithChannelTeamInfoTeam1 defines model for .
type MicrosoftGraphSharedWithChannelTeamInfoTeam1 = map[string]interface{}

// MicrosoftGraphSharedWithChannelTeamInfo_Team defines model for MicrosoftGraphSharedWithChannelTeamInfo.Team.
type MicrosoftGraphSharedWithChannelTeamInfo_Team struct {
	union json.RawMessage
}

// MicrosoftGraphSharepointIds defines model for microsoft.graph.sharepointIds.
type MicrosoftGraphSharepointIds struct {
	// ListId The unique identifier (guid) for the item's list in SharePoint.
	ListId *string `json:"listId"`

	// ListItemId An integer identifier for the item within the containing list.
	ListItemId *string `json:"listItemId"`

	// ListItemUniqueId The unique identifier (guid) for the item within OneDrive for Business or a SharePoint site.
	ListItemUniqueId *string `json:"listItemUniqueId"`

	// SiteId The unique identifier (guid) for the item's site collection (SPSite).
	SiteId *string `json:"siteId"`

	// SiteUrl The SharePoint URL for the site that contains the item.
	SiteUrl *string `json:"siteUrl"`

	// TenantId The unique identifier (guid) for the tenancy.
	TenantId *string `json:"tenantId"`

	// WebId The unique identifier (guid) for the item's site (SPWeb).
	WebId *string `json:"webId"`
}

// MicrosoftGraphSharingDetail defines model for microsoft.graph.sharingDetail.
type MicrosoftGraphSharingDetail struct {
	// SharedBy The user who shared the document.
	SharedBy *MicrosoftGraphSharingDetail_SharedBy `json:"sharedBy,omitempty"`

	// SharedDateTime The date and time the file was last shared. The timestamp represents date and time information using ISO 8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 is 2014-01-01T00:00:00Z. Read-only.
	SharedDateTime   *time.Time                                    `json:"sharedDateTime"`
	SharingReference *MicrosoftGraphSharingDetail_SharingReference `json:"sharingReference,omitempty"`

	// SharingSubject The subject with which the document was shared.
	SharingSubject *string `json:"sharingSubject"`

	// SharingType Determines the way the document was shared, can be by a 'Link', 'Attachment', 'Group', 'Site'.
	SharingType *string `json:"sharingType"`
}

// MicrosoftGraphSharingDetailSharedBy1 defines model for .
type MicrosoftGraphSharingDetailSharedBy1 = map[string]interface{}

// MicrosoftGraphSharingDetail_SharedBy The user who shared the document.
type MicrosoftGraphSharingDetail_SharedBy struct {
	union json.RawMessage
}

// MicrosoftGraphSharingDetailSharingReference1 defines model for .
type MicrosoftGraphSharingDetailSharingReference1 = map[string]interface{}

// MicrosoftGraphSharingDetail_SharingReference defines model for MicrosoftGraphSharingDetail.SharingReference.
type MicrosoftGraphSharingDetail_SharingReference struct {
	union json.RawMessage
}

// MicrosoftGraphSharingInvitation defines model for microsoft.graph.sharingInvitation.
type MicrosoftGraphSharingInvitation struct {
	// Email The email address provided for the recipient of the sharing invitation. Read-only.
	Email *string `json:"email"`

	// InvitedBy Provides information about who sent the invitation that created this permission, if that information is available. Read-only.
	InvitedBy  *MicrosoftGraphSharingInvitation_InvitedBy `json:"invitedBy,omitempty"`
	RedeemedBy *string                                    `json:"redeemedBy"`

	// SignInRequired If true the recipient of the invitation needs to sign in in order to access the shared item. Read-only.
	SignInRequired *bool `json:"signInRequired"`
}

// MicrosoftGraphSharingInvitationInvitedBy1 defines model for .
type MicrosoftGraphSharingInvitationInvitedBy1 = map[string]interface{}

// MicrosoftGraphSharingInvitation_InvitedBy Provides information about who sent the invitation that created this permission, if that information is available. Read-only.
type MicrosoftGraphSharingInvitation_InvitedBy struct {
	union json.RawMessage
}

// MicrosoftGraphSharingLink defines model for microsoft.graph.sharingLink.
type MicrosoftGraphSharingLink struct {
	// Application The app the link is associated with.
	Application *MicrosoftGraphSharingLink_Application `json:"application,omitempty"`

	// PreventsDownload If true then the user can only use this link to view the item on the web, and cannot use it to download the contents of the item. Only for OneDrive for Business and SharePoint.
	PreventsDownload *bool `json:"preventsDownload"`

	// Scope The scope of the link represented by this permission. Value anonymous indicates the link is usable by anyone, organization indicates the link is only usable for users signed into the same tenant.
	Scope *string `json:"scope"`

	// Type The type of the link created.
	Type *string `json:"type"`

	// WebHtml For embed links, this property contains the HTML code for an <iframe> element that will embed the item in a webpage.
	WebHtml *string `json:"webHtml"`

	// WebUrl A URL that opens the item in the browser on the OneDrive website.
	WebUrl *string `json:"webUrl"`
}

// MicrosoftGraphSharingLinkApplication1 defines model for .
type MicrosoftGraphSharingLinkApplication1 = map[string]interface{}

// MicrosoftGraphSharingLink_Application The app the link is associated with.
type MicrosoftGraphSharingLink_Application struct {
	union json.RawMessage
}

// MicrosoftGraphShift defines model for microsoft.graph.shift.
type MicrosoftGraphShift struct {
	// CreatedDateTime The Timestamp type represents date and time information using ISO 8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 is 2014-01-01T00:00:00Z
	CreatedDateTime *time.Time `json:"createdDateTime"`

	// DraftShift The draft version of this shift that is viewable by managers. Required.
	DraftShift *MicrosoftGraphShift_DraftShift `json:"draftShift,omitempty"`

	// Id The unique idenfier for an entity. Read-only.
	Id *string `json:"id,omitempty"`

	// LastModifiedBy Identity of the person who last modified the entity.
	LastModifiedBy *MicrosoftGraphShift_LastModifiedBy `json:"lastModifiedBy,omitempty"`

	// LastModifiedDateTime The Timestamp type represents date and time information using ISO 8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 is 2014-01-01T00:00:00Z
	LastModifiedDateTime *time.Time `json:"lastModifiedDateTime"`

	// SchedulingGroupId ID of the scheduling group the shift is part of. Required.
	SchedulingGroupId *string `json:"schedulingGroupId"`

	// SharedShift The shared version of this shift that is viewable by both employees and managers. Required.
	SharedShift *MicrosoftGraphShift_SharedShift `json:"sharedShift,omitempty"`

	// UserId ID of the user assigned to the shift. Required.
	UserId *string `json:"userId"`
}

// MicrosoftGraphShiftDraftShift1 defines model for .
type MicrosoftGraphShiftDraftShift1 = map[string]interface{}

// MicrosoftGraphShift_DraftShift The draft version of this shift that is viewable by managers. Required.
type MicrosoftGraphShift_DraftShift struct {
	union json.RawMessage
}

// MicrosoftGraphShiftLastModifiedBy1 defines model for .
type MicrosoftGraphShiftLastModifiedBy1 = map[string]interface{}

// MicrosoftGraphShift_LastModifiedBy Identity of the person who last modified the entity.
type MicrosoftGraphShift_LastModifiedBy struct {
	union json.RawMessage
}

// MicrosoftGraphShiftSharedShift1 defines model for .
type MicrosoftGraphShiftSharedShift1 = map[string]interface{}

// MicrosoftGraphShift_SharedShift The shared version of this shift that is viewable by both employees and managers. Required.
type MicrosoftGraphShift_SharedShift struct {
	union json.RawMessage
}

// MicrosoftGraphShiftActivity defines model for microsoft.graph.shiftActivity.
type MicrosoftGraphShiftActivity struct {
	// Code Customer defined code for the shiftActivity. Required.
	Code *string `json:"code"`

	// DisplayName The name of the shiftActivity. Required.
	DisplayName *string `json:"displayName"`

	// EndDateTime The end date and time for the shiftActivity. The Timestamp type represents date and time information using ISO 8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 is 2014-01-01T00:00:00Z. Required.
	EndDateTime *time.Time `json:"endDateTime"`

	// IsPaid Indicates whether the microsoft.graph.user should be paid for the activity during their shift. Required.
	IsPaid *bool `json:"isPaid"`

	// StartDateTime The start date and time for the shiftActivity. The Timestamp type represents date and time information using ISO 8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 is 2014-01-01T00:00:00Z. Required.
	StartDateTime *time.Time                         `json:"startDateTime"`
	Theme         *MicrosoftGraphScheduleEntityTheme `json:"theme,omitempty"`
}

// MicrosoftGraphShiftAvailability defines model for microsoft.graph.shiftAvailability.
type MicrosoftGraphShiftAvailability struct {
	// Recurrence Specifies the pattern for recurrence
	Recurrence *MicrosoftGraphShiftAvailability_Recurrence `json:"recurrence,omitempty"`

	// TimeSlots The time slot(s) preferred by the user.
	TimeSlots *[]MicrosoftGraphShiftAvailability_TimeSlots_Item `json:"timeSlots,omitempty"`

	// TimeZone Specifies the time zone for the indicated time.
	TimeZone *string `json:"timeZone"`
}

// MicrosoftGraphShiftAvailabilityRecurrence1 defines model for .
type MicrosoftGraphShiftAvailabilityRecurrence1 = map[string]interface{}

// MicrosoftGraphShiftAvailability_Recurrence Specifies the pattern for recurrence
type MicrosoftGraphShiftAvailability_Recurrence struct {
	union json.RawMessage
}

// MicrosoftGraphShiftAvailabilityTimeSlots1 defines model for .
type MicrosoftGraphShiftAvailabilityTimeSlots1 = map[string]interface{}

// MicrosoftGraphShiftAvailability_TimeSlots_Item defines model for microsoft.graph.shiftAvailability.timeSlots.Item.
type MicrosoftGraphShiftAvailability_TimeSlots_Item struct {
	union json.RawMessage
}

// MicrosoftGraphShiftItem defines model for microsoft.graph.shiftItem.
type MicrosoftGraphShiftItem struct {
	// Activities An incremental part of a shift which can cover details of when and where an employee is during their shift. For example, an assignment or a scheduled break or lunch. Required.
	Activities *[]MicrosoftGraphShiftItem_Activities_Item `json:"activities,omitempty"`

	// DisplayName The shift label of the shiftItem.
	DisplayName *string    `json:"displayName"`
	EndDateTime *time.Time `json:"endDateTime"`

	// Notes The shift notes for the shiftItem.
	Notes         *string                            `json:"notes"`
	StartDateTime *time.Time                         `json:"startDateTime"`
	Theme         *MicrosoftGraphScheduleEntityTheme `json:"theme,omitempty"`
}

// MicrosoftGraphShiftItemActivities1 defines model for .
type MicrosoftGraphShiftItemActivities1 = map[string]interface{}

// MicrosoftGraphShiftItem_Activities_Item defines model for microsoft.graph.shiftItem.activities.Item.
type MicrosoftGraphShiftItem_Activities_Item struct {
	union json.RawMessage
}

// MicrosoftGraphShiftPreferences defines model for microsoft.graph.shiftPreferences.
type MicrosoftGraphShiftPreferences struct {
	// Availability Availability of the user to be scheduled for work and its recurrence pattern.
	Availability *[]MicrosoftGraphShiftPreferences_Availability_Item `json:"availability,omitempty"`

	// CreatedDateTime The Timestamp type represents date and time information using ISO 8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 is 2014-01-01T00:00:00Z
	CreatedDateTime *time.Time `json:"createdDateTime"`

	// Id The unique idenfier for an entity. Read-only.
	Id *string `json:"id,omitempty"`

	// LastModifiedBy Identity of the person who last modified the entity.
	LastModifiedBy *MicrosoftGraphShiftPreferences_LastModifiedBy `json:"lastModifiedBy,omitempty"`

	// LastModifiedDateTime The Timestamp type represents date and time information using ISO 8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 is 2014-01-01T00:00:00Z
	LastModifiedDateTime *time.Time `json:"lastModifiedDateTime"`
}

// MicrosoftGraphShiftPreferencesAvailability1 defines model for .
type MicrosoftGraphShiftPreferencesAvailability1 = map[string]interface{}

// MicrosoftGraphShiftPreferences_Availability_Item defines model for microsoft.graph.shiftPreferences.availability.Item.
type MicrosoftGraphShiftPreferences_Availability_Item struct {
	union json.RawMessage
}

// MicrosoftGraphShiftPreferencesLastModifiedBy1 defines model for .
type MicrosoftGraphShiftPreferencesLastModifiedBy1 = map[string]interface{}

// MicrosoftGraphShiftPreferences_LastModifiedBy Identity of the person who last modified the entity.
type MicrosoftGraphShiftPreferences_LastModifiedBy struct {
	union json.RawMessage
}

// MicrosoftGraphSignInActivity defines model for microsoft.graph.signInActivity.
type MicrosoftGraphSignInActivity struct {
	// LastNonInteractiveSignInDateTime The last non-interactive sign-in date for a specific user. You can use this field to calculate the last time a client attempted to sign into the directory on behalf of a user. Because some users may use clients to access tenant resources rather than signing into your tenant directly, you can use the non-interactive sign-in date to along with lastSignInDateTime to identify inactive users. The timestamp represents date and time information using ISO 8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 is: '2014-01-01T00:00:00Z'. Azure AD maintains non-interactive sign-ins going back to May 2020. For more information about using the value of this property, see Manage inactive user accounts in Azure AD.
	LastNonInteractiveSignInDateTime *time.Time `json:"lastNonInteractiveSignInDateTime"`

	// LastNonInteractiveSignInRequestId Request identifier of the last non-interactive sign-in performed by this user.
	LastNonInteractiveSignInRequestId *string `json:"lastNonInteractiveSignInRequestId"`

	// LastSignInDateTime The last interactive sign-in date and time for a specific user. You can use this field to calculate the last time a user attempted to sign into the directory with an interactive authentication method. This field can be used to build reports, such as inactive users. The timestamp represents date and time information using ISO 8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 is: '2014-01-01T00:00:00Z'. Azure AD maintains interactive sign-ins going back to April 2020. For more information about using the value of this property, see Manage inactive user accounts in Azure AD.
	LastSignInDateTime *time.Time `json:"lastSignInDateTime"`

	// LastSignInRequestId Request identifier of the last interactive sign-in performed by this user.
	LastSignInRequestId *string `json:"lastSignInRequestId"`
}

// MicrosoftGraphSingleValueLegacyExtendedProperty defines model for microsoft.graph.singleValueLegacyExtendedProperty.
type MicrosoftGraphSingleValueLegacyExtendedProperty struct {
	// Id The unique idenfier for an entity. Read-only.
	Id *string `json:"id,omitempty"`

	// Value A property value.
	Value *string `json:"value"`
}

// MicrosoftGraphSite defines model for microsoft.graph.site.
type MicrosoftGraphSite struct {
	// Analytics Analytics about the view activities that took place in this site.
	Analytics *MicrosoftGraphSite_Analytics `json:"analytics,omitempty"`

	// Columns The collection of column definitions reusable across lists under this site.
	Columns *[]MicrosoftGraphColumnDefinition `json:"columns,omitempty"`

	// ContentTypes The collection of content types defined for this site.
	ContentTypes *[]MicrosoftGraphContentType `json:"contentTypes,omitempty"`

	// CreatedBy Identity of the user, device, or application which created the item. Read-only.
	CreatedBy *MicrosoftGraphSite_CreatedBy `json:"createdBy,omitempty"`

	// CreatedByUser Identity of the user who created the item. Read-only.
	CreatedByUser *MicrosoftGraphSite_CreatedByUser `json:"createdByUser,omitempty"`

	// CreatedDateTime Date and time of item creation. Read-only.
	CreatedDateTime *time.Time `json:"createdDateTime,omitempty"`

	// Description Provides a user-visible description of the item. Optional.
	Description *string `json:"description"`

	// DisplayName The full title for the site. Read-only.
	DisplayName *string `json:"displayName"`

	// Drive The default drive (document library) for this site.
	Drive *MicrosoftGraphSite_Drive `json:"drive,omitempty"`

	// Drives The collection of drives (document libraries) under this site.
	Drives *[]MicrosoftGraphDrive `json:"drives,omitempty"`

	// ETag ETag for the item. Read-only.
	ETag            *string                           `json:"eTag"`
	Error           *MicrosoftGraphSite_Error         `json:"error,omitempty"`
	ExternalColumns *[]MicrosoftGraphColumnDefinition `json:"externalColumns,omitempty"`

	// Id The unique idenfier for an entity. Read-only.
	Id *string `json:"id,omitempty"`

	// Items Used to address any item contained in this site. This collection can't be enumerated.
	Items *[]MicrosoftGraphBaseItem `json:"items,omitempty"`

	// LastModifiedBy Identity of the user, device, and application which last modified the item. Read-only.
	LastModifiedBy *MicrosoftGraphSite_LastModifiedBy `json:"lastModifiedBy,omitempty"`

	// LastModifiedByUser Identity of the user who last modified the item. Read-only.
	LastModifiedByUser *MicrosoftGraphSite_LastModifiedByUser `json:"lastModifiedByUser,omitempty"`

	// LastModifiedDateTime Date and time the item was last modified. Read-only.
	LastModifiedDateTime *time.Time `json:"lastModifiedDateTime,omitempty"`

	// Lists The collection of lists under this site.
	Lists *[]MicrosoftGraphList `json:"lists,omitempty"`

	// Name The name of the item. Read-write.
	Name *string `json:"name"`

	// Onenote Calls the OneNote service for notebook related operations.
	Onenote *MicrosoftGraphSite_Onenote `json:"onenote,omitempty"`

	// Operations The collection of long-running operations on the site.
	Operations *[]MicrosoftGraphRichLongRunningOperation `json:"operations,omitempty"`

	// ParentReference Parent information, if the item has a parent. Read-write.
	ParentReference *MicrosoftGraphSite_ParentReference `json:"parentReference,omitempty"`

	// Permissions The permissions associated with the site. Nullable.
	Permissions *[]MicrosoftGraphPermission `json:"permissions,omitempty"`

	// Root If present, indicates that this is the root site in the site collection. Read-only.
	Root *MicrosoftGraphSite_Root `json:"root,omitempty"`

	// SharepointIds Returns identifiers useful for SharePoint REST compatibility. Read-only.
	SharepointIds *MicrosoftGraphSite_SharepointIds `json:"sharepointIds,omitempty"`

	// SiteCollection Provides details about the site's site collection. Available only on the root site. Read-only.
	SiteCollection *MicrosoftGraphSite_SiteCollection `json:"siteCollection,omitempty"`

	// Sites The collection of the sub-sites under this site.
	Sites *[]MicrosoftGraphSite `json:"sites,omitempty"`

	// TermStore The default termStore under this site.
	TermStore *MicrosoftGraphSite_TermStore `json:"termStore,omitempty"`

	// TermStores The collection of termStores under this site.
	TermStores *[]MicrosoftGraphTermStoreStore `json:"termStores,omitempty"`

	// WebUrl URL that displays the resource in the browser. Read-only.
	WebUrl *string `json:"webUrl"`
}

// MicrosoftGraphSiteAnalytics1 defines model for .
type MicrosoftGraphSiteAnalytics1 = map[string]interface{}

// MicrosoftGraphSite_Analytics Analytics about the view activities that took place in this site.
type MicrosoftGraphSite_Analytics struct {
	union json.RawMessage
}

// MicrosoftGraphSiteCreatedBy1 defines model for .
type MicrosoftGraphSiteCreatedBy1 = map[string]interface{}

// MicrosoftGraphSite_CreatedBy Identity of the user, device, or application which created the item. Read-only.
type MicrosoftGraphSite_CreatedBy struct {
	union json.RawMessage
}

// MicrosoftGraphSiteCreatedByUser1 defines model for .
type MicrosoftGraphSiteCreatedByUser1 = map[string]interface{}

// MicrosoftGraphSite_CreatedByUser Identity of the user who created the item. Read-only.
type MicrosoftGraphSite_CreatedByUser struct {
	union json.RawMessage
}

// MicrosoftGraphSiteDrive1 defines model for .
type MicrosoftGraphSiteDrive1 = map[string]interface{}

// MicrosoftGraphSite_Drive The default drive (document library) for this site.
type MicrosoftGraphSite_Drive struct {
	union json.RawMessage
}

// MicrosoftGraphSiteError1 defines model for .
type MicrosoftGraphSiteError1 = map[string]interface{}

// MicrosoftGraphSite_Error defines model for MicrosoftGraphSite.Error.
type MicrosoftGraphSite_Error struct {
	union json.RawMessage
}

// MicrosoftGraphSiteLastModifiedBy1 defines model for .
type MicrosoftGraphSiteLastModifiedBy1 = map[string]interface{}

// MicrosoftGraphSite_LastModifiedBy Identity of the user, device, and application which last modified the item. Read-only.
type MicrosoftGraphSite_LastModifiedBy struct {
	union json.RawMessage
}

// MicrosoftGraphSiteLastModifiedByUser1 defines model for .
type MicrosoftGraphSiteLastModifiedByUser1 = map[string]interface{}

// MicrosoftGraphSite_LastModifiedByUser Identity of the user who last modified the item. Read-only.
type MicrosoftGraphSite_LastModifiedByUser struct {
	union json.RawMessage
}

// MicrosoftGraphSiteOnenote1 defines model for .
type MicrosoftGraphSiteOnenote1 = map[string]interface{}

// MicrosoftGraphSite_Onenote Calls the OneNote service for notebook related operations.
type MicrosoftGraphSite_Onenote struct {
	union json.RawMessage
}

// MicrosoftGraphSiteParentReference1 defines model for .
type MicrosoftGraphSiteParentReference1 = map[string]interface{}

// MicrosoftGraphSite_ParentReference Parent information, if the item has a parent. Read-write.
type MicrosoftGraphSite_ParentReference struct {
	union json.RawMessage
}

// MicrosoftGraphSiteRoot1 defines model for .
type MicrosoftGraphSiteRoot1 = map[string]interface{}

// MicrosoftGraphSite_Root If present, indicates that this is the root site in the site collection. Read-only.
type MicrosoftGraphSite_Root struct {
	union json.RawMessage
}

// MicrosoftGraphSiteSharepointIds1 defines model for .
type MicrosoftGraphSiteSharepointIds1 = map[string]interface{}

// MicrosoftGraphSite_SharepointIds Returns identifiers useful for SharePoint REST compatibility. Read-only.
type MicrosoftGraphSite_SharepointIds struct {
	union json.RawMessage
}

// MicrosoftGraphSiteSiteCollection1 defines model for .
type MicrosoftGraphSiteSiteCollection1 = map[string]interface{}

// MicrosoftGraphSite_SiteCollection Provides details about the site's site collection. Available only on the root site. Read-only.
type MicrosoftGraphSite_SiteCollection struct {
	union json.RawMessage
}

// MicrosoftGraphSiteTermStore1 defines model for .
type MicrosoftGraphSiteTermStore1 = map[string]interface{}

// MicrosoftGraphSite_TermStore The default termStore under this site.
type MicrosoftGraphSite_TermStore struct {
	union json.RawMessage
}

// MicrosoftGraphSiteCollection defines model for microsoft.graph.siteCollection.
type MicrosoftGraphSiteCollection struct {
	// DataLocationCode The geographic region code for where this site collection resides. Read-only.
	DataLocationCode *string `json:"dataLocationCode"`

	// Hostname The hostname for the site collection. Read-only.
	Hostname *string `json:"hostname"`

	// Root If present, indicates that this is a root site collection in SharePoint. Read-only.
	Root *MicrosoftGraphSiteCollection_Root `json:"root,omitempty"`
}

// MicrosoftGraphSiteCollectionRoot1 defines model for .
type MicrosoftGraphSiteCollectionRoot1 = map[string]interface{}

// MicrosoftGraphSiteCollection_Root If present, indicates that this is a root site collection in SharePoint. Read-only.
type MicrosoftGraphSiteCollection_Root struct {
	union json.RawMessage
}

// MicrosoftGraphSizeRange defines model for microsoft.graph.sizeRange.
type MicrosoftGraphSizeRange struct {
	// MaximumSize The maximum size (in kilobytes) that an incoming message must have in order for a condition or exception to apply.
	MaximumSize *int32 `json:"maximumSize"`

	// MinimumSize The minimum size (in kilobytes) that an incoming message must have in order for a condition or exception to apply.
	MinimumSize *int32 `json:"minimumSize"`
}

// MicrosoftGraphSoftwareOathAuthenticationMethod defines model for microsoft.graph.softwareOathAuthenticationMethod.
type MicrosoftGraphSoftwareOathAuthenticationMethod struct {
	// Id The unique idenfier for an entity. Read-only.
	Id *string `json:"id,omitempty"`

	// SecretKey The secret key of the method. Always returns null.
	SecretKey *string `json:"secretKey"`
}

// MicrosoftGraphSpecialFolder defines model for microsoft.graph.specialFolder.
type MicrosoftGraphSpecialFolder struct {
	// Name The unique identifier for this item in the /drive/special collection
	Name *string `json:"name"`
}

// MicrosoftGraphStatus defines model for microsoft.graph.status.
type MicrosoftGraphStatus string

// MicrosoftGraphStoragePlanInformation defines model for microsoft.graph.storagePlanInformation.
type MicrosoftGraphStoragePlanInformation struct {
	// UpgradeAvailable Indicates whether there are higher storage quota plans available. Read-only.
	UpgradeAvailable *bool `json:"upgradeAvailable"`
}

// MicrosoftGraphSubscription defines model for microsoft.graph.subscription.
type MicrosoftGraphSubscription struct {
	// ApplicationId Optional. Identifier of the application used to create the subscription. Read-only.
	ApplicationId *string `json:"applicationId"`

	// ChangeType Required. Indicates the type of change in the subscribed resource that will raise a change notification. The supported values are: created, updated, deleted. Multiple values can be combined using a comma-separated list. Note:  Drive root item and list change notifications support only the updated changeType. User and group change notifications support updated and deleted changeType. Use updated to receive notifications when user or group is created, updated or soft deleted.  Use deleted to receive notifications when user or group is permanently deleted.
	ChangeType *string `json:"changeType,omitempty"`

	// ClientState Required. Specifies the value of the clientState property sent by the service in each change notification. The maximum length is 128 characters. The client can check that the change notification came from the service by comparing the value of the clientState property sent with the subscription with the value of the clientState property received with each change notification.
	ClientState *string `json:"clientState"`

	// CreatorId Optional. Identifier of the user or service principal that created the subscription. If the app used delegated permissions to create the subscription, this field contains the id of the signed-in user the app called on behalf of. If the app used application permissions, this field contains the id of the service principal corresponding to the app. Read-only.
	CreatorId *string `json:"creatorId"`

	// EncryptionCertificate Optional. A base64-encoded representation of a certificate with a public key used to encrypt resource data in change notifications. Optional but required when includeResourceData is true.
	EncryptionCertificate *string `json:"encryptionCertificate"`

	// EncryptionCertificateId Optional. A custom app-provided identifier to help identify the certificate needed to decrypt resource data.
	EncryptionCertificateId *string `json:"encryptionCertificateId"`

	// ExpirationDateTime Required. Specifies the date and time when the webhook subscription expires. The time is in UTC, and can be an amount of time from subscription creation that varies for the resource subscribed to. For the maximum supported subscription length of time, see the table below.
	ExpirationDateTime *time.Time `json:"expirationDateTime,omitempty"`

	// Id The unique idenfier for an entity. Read-only.
	Id *string `json:"id,omitempty"`

	// IncludeResourceData Optional. When set to true, change notifications include resource data (such as content of a chat message).
	IncludeResourceData *bool `json:"includeResourceData"`

	// LatestSupportedTlsVersion Optional. Specifies the latest version of Transport Layer Security (TLS) that the notification endpoint, specified by notificationUrl, supports. The possible values are: v10, v11, v12, v13. For subscribers whose notification endpoint supports a version lower than the currently recommended version (TLS 1.2), specifying this property by a set timeline allows them to temporarily use their deprecated version of TLS before completing their upgrade to TLS 1.2. For these subscribers, not setting this property per the timeline would result in subscription operations failing. For subscribers whose notification endpoint already supports TLS 1.2, setting this property is optional. In such cases, Microsoft Graph defaults the property to v1_2.
	LatestSupportedTlsVersion *string `json:"latestSupportedTlsVersion"`

	// LifecycleNotificationUrl Required for Teams resources if  the expirationDateTime value is more than 1 hour from now; optional otherwise. The URL of the endpoint that receives lifecycle notifications, including subscriptionRemoved, reauthorizationRequired, and missed notifications. This URL must make use of the HTTPS protocol. For more information, see Reduce missing subscriptions and change notifications.
	LifecycleNotificationUrl *string `json:"lifecycleNotificationUrl"`

	// NotificationQueryOptions Optional. OData query options for specifying value for the targeting resource. Clients receive notifications when resource reaches the state matching the query options provided here. With this new property in the subscription creation payload along with all existing properties, Webhooks will deliver notifications whenever a resource reaches the desired state mentioned in the notificationQueryOptions property. For example, when the print job is completed or when a print job resource isFetchable property value becomes true etc.  Supported only for Universal Print Service. For more information, see Subscribe to change notifications from cloud printing APIs using Microsoft Graph.
	NotificationQueryOptions *string `json:"notificationQueryOptions"`

	// NotificationUrl Required. The URL of the endpoint that will receive the change notifications. This URL must make use of the HTTPS protocol. Any query string parameter included in the notificationUrl property will be included in the HTTP POST request when Microsoft Graph sends the change notifications.
	NotificationUrl *string `json:"notificationUrl,omitempty"`

	// NotificationUrlAppId Optional. The app ID that the subscription service can use to generate the validation token. This allows the client to validate the authenticity of the notification received.
	NotificationUrlAppId *string `json:"notificationUrlAppId"`

	// Resource Required. Specifies the resource that will be monitored for changes. Do not include the base URL (https://graph.microsoft.com/v1.0/). See the possible resource path values for each supported resource.
	Resource *string `json:"resource,omitempty"`
}

// MicrosoftGraphSwapShiftsChangeRequest defines model for microsoft.graph.swapShiftsChangeRequest.
type MicrosoftGraphSwapShiftsChangeRequest struct {
	AssignedTo *MicrosoftGraphSwapShiftsChangeRequest_AssignedTo `json:"assignedTo,omitempty"`

	// CreatedDateTime The Timestamp type represents date and time information using ISO 8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 is 2014-01-01T00:00:00Z
	CreatedDateTime *time.Time `json:"createdDateTime"`

	// Id The unique idenfier for an entity. Read-only.
	Id *string `json:"id,omitempty"`

	// LastModifiedBy Identity of the person who last modified the entity.
	LastModifiedBy *MicrosoftGraphSwapShiftsChangeRequest_LastModifiedBy `json:"lastModifiedBy,omitempty"`

	// LastModifiedDateTime The Timestamp type represents date and time information using ISO 8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 is 2014-01-01T00:00:00Z
	LastModifiedDateTime  *time.Time `json:"lastModifiedDateTime"`
	ManagerActionDateTime *time.Time `json:"managerActionDateTime"`
	ManagerActionMessage  *string    `json:"managerActionMessage"`
	ManagerUserId         *string    `json:"managerUserId"`

	// RecipientActionDateTime The Timestamp type represents date and time information using ISO 8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 is 2014-01-01T00:00:00Z
	RecipientActionDateTime *time.Time `json:"recipientActionDateTime"`

	// RecipientActionMessage Custom message sent by recipient of the offer shift request.
	RecipientActionMessage *string `json:"recipientActionMessage"`

	// RecipientShiftId ShiftId for the recipient user with whom the request is to swap.
	RecipientShiftId *string `json:"recipientShiftId"`

	// RecipientUserId User ID of the recipient of the offer shift request.
	RecipientUserId *string    `json:"recipientUserId"`
	SenderDateTime  *time.Time `json:"senderDateTime"`
	SenderMessage   *string    `json:"senderMessage"`

	// SenderShiftId User ID of the sender of the offer shift request.
	SenderShiftId *string                                      `json:"senderShiftId"`
	SenderUserId  *string                                      `json:"senderUserId"`
	State         *MicrosoftGraphSwapShiftsChangeRequest_State `json:"state,omitempty"`
}

// MicrosoftGraphSwapShiftsChangeRequestAssignedTo1 defines model for .
type MicrosoftGraphSwapShiftsChangeRequestAssignedTo1 = map[string]interface{}

// MicrosoftGraphSwapShiftsChangeRequest_AssignedTo defines model for MicrosoftGraphSwapShiftsChangeRequest.AssignedTo.
type MicrosoftGraphSwapShiftsChangeRequest_AssignedTo struct {
	union json.RawMessage
}

// MicrosoftGraphSwapShiftsChangeRequestLastModifiedBy1 defines model for .
type MicrosoftGraphSwapShiftsChangeRequestLastModifiedBy1 = map[string]interface{}

// MicrosoftGraphSwapShiftsChangeRequest_LastModifiedBy Identity of the person who last modified the entity.
type MicrosoftGraphSwapShiftsChangeRequest_LastModifiedBy struct {
	union json.RawMessage
}

// MicrosoftGraphSwapShiftsChangeRequestState1 defines model for .
type MicrosoftGraphSwapShiftsChangeRequestState1 = map[string]interface{}

// MicrosoftGraphSwapShiftsChangeRequest_State defines model for MicrosoftGraphSwapShiftsChangeRequest.State.
type MicrosoftGraphSwapShiftsChangeRequest_State struct {
	union json.RawMessage
}

// MicrosoftGraphSystemFacet defines model for microsoft.graph.systemFacet.
type MicrosoftGraphSystemFacet = map[string]interface{}

// MicrosoftGraphTaskStatus defines model for microsoft.graph.taskStatus.
type MicrosoftGraphTaskStatus string

// MicrosoftGraphTeam defines model for microsoft.graph.team.
type MicrosoftGraphTeam struct {
	// AllChannels List of channels either hosted in or shared with the team (incoming channels).
	AllChannels *[]MicrosoftGraphChannel `json:"allChannels,omitempty"`

	// Channels The collection of channels and messages associated with the team.
	Channels *[]MicrosoftGraphChannel `json:"channels,omitempty"`

	// Classification An optional label. Typically describes the data or business sensitivity of the team. Must match one of a pre-configured set in the tenant's directory.
	Classification *string `json:"classification"`

	// CreatedDateTime Timestamp at which the team was created.
	CreatedDateTime *time.Time `json:"createdDateTime"`

	// Description An optional description for the team. Maximum length: 1024 characters.
	Description *string `json:"description"`

	// DisplayName The name of the team.
	DisplayName *string `json:"displayName"`

	// FunSettings Settings to configure use of Giphy, memes, and stickers in the team.
	FunSettings *MicrosoftGraphTeam_FunSettings `json:"funSettings,omitempty"`
	Group       *MicrosoftGraphTeam_Group       `json:"group,omitempty"`

	// GuestSettings Settings to configure whether guests can create, update, or delete channels in the team.
	GuestSettings *MicrosoftGraphTeam_GuestSettings `json:"guestSettings,omitempty"`

	// Id The unique idenfier for an entity. Read-only.
	Id *string `json:"id,omitempty"`

	// IncomingChannels List of channels shared with the team.
	IncomingChannels *[]MicrosoftGraphChannel `json:"incomingChannels,omitempty"`

	// InstalledApps The apps installed in this team.
	InstalledApps *[]MicrosoftGraphTeamsAppInstallation `json:"installedApps,omitempty"`

	// InternalId A unique ID for the team that has been used in a few places such as the audit log/Office 365 Management Activity API.
	InternalId *string `json:"internalId"`

	// IsArchived Whether this team is in read-only mode.
	IsArchived *bool `json:"isArchived"`

	// MemberSettings Settings to configure whether members can perform certain actions, for example, create channels and add bots, in the team.
	MemberSettings *MicrosoftGraphTeam_MemberSettings `json:"memberSettings,omitempty"`

	// Members Members and owners of the team.
	Members *[]MicrosoftGraphConversationMember `json:"members,omitempty"`

	// MessagingSettings Settings to configure messaging and mentions in the team.
	MessagingSettings *MicrosoftGraphTeam_MessagingSettings `json:"messagingSettings,omitempty"`

	// Operations The async operations that ran or are running on this team.
	Operations       *[]MicrosoftGraphTeamsAsyncOperation             `json:"operations,omitempty"`
	PermissionGrants *[]MicrosoftGraphResourceSpecificPermissionGrant `json:"permissionGrants,omitempty"`

	// Photo The profile photo for the team.
	Photo *MicrosoftGraphTeam_Photo `json:"photo,omitempty"`

	// PrimaryChannel The general channel for the team.
	PrimaryChannel *MicrosoftGraphTeam_PrimaryChannel `json:"primaryChannel,omitempty"`

	// Schedule The schedule of shifts for this team.
	Schedule *MicrosoftGraphTeam_Schedule `json:"schedule,omitempty"`

	// Specialization Optional. Indicates whether the team is intended for a particular use case.  Each team specialization has access to unique behaviors and experiences targeted to its use case.
	Specialization *MicrosoftGraphTeam_Specialization `json:"specialization,omitempty"`

	// Summary Contains summary information about the team, including number of owners, members, and guests.
	Summary *MicrosoftGraphTeam_Summary `json:"summary,omitempty"`

	// Tags The tags associated with the team.
	Tags *[]MicrosoftGraphTeamworkTag `json:"tags,omitempty"`

	// Template The template this team was created from. See available templates.
	Template *MicrosoftGraphTeam_Template `json:"template,omitempty"`

	// TenantId The ID of the Azure Active Directory tenant.
	TenantId *string `json:"tenantId"`

	// Visibility The visibility of the group and team. Defaults to Public.
	Visibility *MicrosoftGraphTeam_Visibility `json:"visibility,omitempty"`

	// WebUrl A hyperlink that will go to the team in the Microsoft Teams client. This is the URL that you get when you right-click a team in the Microsoft Teams client and select Get link to team. This URL should be treated as an opaque blob, and not parsed.
	WebUrl *string `json:"webUrl"`
}

// MicrosoftGraphTeamFunSettings1 defines model for .
type MicrosoftGraphTeamFunSettings1 = map[string]interface{}

// MicrosoftGraphTeam_FunSettings Settings to configure use of Giphy, memes, and stickers in the team.
type MicrosoftGraphTeam_FunSettings struct {
	union json.RawMessage
}

// MicrosoftGraphTeamGroup1 defines model for .
type MicrosoftGraphTeamGroup1 = map[string]interface{}

// MicrosoftGraphTeam_Group defines model for MicrosoftGraphTeam.Group.
type MicrosoftGraphTeam_Group struct {
	union json.RawMessage
}

// MicrosoftGraphTeamGuestSettings1 defines model for .
type MicrosoftGraphTeamGuestSettings1 = map[string]interface{}

// MicrosoftGraphTeam_GuestSettings Settings to configure whether guests can create, update, or delete channels in the team.
type MicrosoftGraphTeam_GuestSettings struct {
	union json.RawMessage
}

// MicrosoftGraphTeamMemberSettings1 defines model for .
type MicrosoftGraphTeamMemberSettings1 = map[string]interface{}

// MicrosoftGraphTeam_MemberSettings Settings to configure whether members can perform certain actions, for example, create channels and add bots, in the team.
type MicrosoftGraphTeam_MemberSettings struct {
	union json.RawMessage
}

// MicrosoftGraphTeamMessagingSettings1 defines model for .
type MicrosoftGraphTeamMessagingSettings1 = map[string]interface{}

// MicrosoftGraphTeam_MessagingSettings Settings to configure messaging and mentions in the team.
type MicrosoftGraphTeam_MessagingSettings struct {
	union json.RawMessage
}

// MicrosoftGraphTeamPhoto1 defines model for .
type MicrosoftGraphTeamPhoto1 = map[string]interface{}

// MicrosoftGraphTeam_Photo The profile photo for the team.
type MicrosoftGraphTeam_Photo struct {
	union json.RawMessage
}

// MicrosoftGraphTeamPrimaryChannel1 defines model for .
type MicrosoftGraphTeamPrimaryChannel1 = map[string]interface{}

// MicrosoftGraphTeam_PrimaryChannel The general channel for the team.
type MicrosoftGraphTeam_PrimaryChannel struct {
	union json.RawMessage
}

// MicrosoftGraphTeamSchedule1 defines model for .
type MicrosoftGraphTeamSchedule1 = map[string]interface{}

// MicrosoftGraphTeam_Schedule The schedule of shifts for this team.
type MicrosoftGraphTeam_Schedule struct {
	union json.RawMessage
}

// MicrosoftGraphTeamSpecialization1 defines model for .
type MicrosoftGraphTeamSpecialization1 = map[string]interface{}

// MicrosoftGraphTeam_Specialization Optional. Indicates whether the team is intended for a particular use case.  Each team specialization has access to unique behaviors and experiences targeted to its use case.
type MicrosoftGraphTeam_Specialization struct {
	union json.RawMessage
}

// MicrosoftGraphTeamSummary1 defines model for .
type MicrosoftGraphTeamSummary1 = map[string]interface{}

// MicrosoftGraphTeam_Summary Contains summary information about the team, including number of owners, members, and guests.
type MicrosoftGraphTeam_Summary struct {
	union json.RawMessage
}

// MicrosoftGraphTeamTemplate1 defines model for .
type MicrosoftGraphTeamTemplate1 = map[string]interface{}

// MicrosoftGraphTeam_Template The template this team was created from. See available templates.
type MicrosoftGraphTeam_Template struct {
	union json.RawMessage
}

// MicrosoftGraphTeamVisibility1 defines model for .
type MicrosoftGraphTeamVisibility1 = map[string]interface{}

// MicrosoftGraphTeam_Visibility The visibility of the group and team. Defaults to Public.
type MicrosoftGraphTeam_Visibility struct {
	union json.RawMessage
}

// MicrosoftGraphTeamFunSettings defines model for microsoft.graph.teamFunSettings.
type MicrosoftGraphTeamFunSettings struct {
	// AllowCustomMemes If set to true, enables users to include custom memes.
	AllowCustomMemes *bool `json:"allowCustomMemes"`

	// AllowGiphy If set to true, enables Giphy use.
	AllowGiphy *bool `json:"allowGiphy"`

	// AllowStickersAndMemes If set to true, enables users to include stickers and memes.
	AllowStickersAndMemes *bool `json:"allowStickersAndMemes"`

	// GiphyContentRating Giphy content rating. Possible values are: moderate, strict.
	GiphyContentRating *MicrosoftGraphTeamFunSettings_GiphyContentRating `json:"giphyContentRating,omitempty"`
}

// MicrosoftGraphTeamFunSettingsGiphyContentRating1 defines model for .
type MicrosoftGraphTeamFunSettingsGiphyContentRating1 = map[string]interface{}

// MicrosoftGraphTeamFunSettings_GiphyContentRating Giphy content rating. Possible values are: moderate, strict.
type MicrosoftGraphTeamFunSettings_GiphyContentRating struct {
	union json.RawMessage
}

// MicrosoftGraphTeamGuestSettings defines model for microsoft.graph.teamGuestSettings.
type MicrosoftGraphTeamGuestSettings struct {
	// AllowCreateUpdateChannels If set to true, guests can add and update channels.
	AllowCreateUpdateChannels *bool `json:"allowCreateUpdateChannels"`

	// AllowDeleteChannels If set to true, guests can delete channels.
	AllowDeleteChannels *bool `json:"allowDeleteChannels"`
}

// MicrosoftGraphTeamInfo defines model for microsoft.graph.teamInfo.
type MicrosoftGraphTeamInfo struct {
	// DisplayName The name of the team.
	DisplayName *string `json:"displayName"`

	// Id The unique idenfier for an entity. Read-only.
	Id   *string                      `json:"id,omitempty"`
	Team *MicrosoftGraphTeamInfo_Team `json:"team,omitempty"`

	// TenantId The ID of the Azure Active Directory tenant.
	TenantId *string `json:"tenantId"`
}

// MicrosoftGraphTeamInfoTeam1 defines model for .
type MicrosoftGraphTeamInfoTeam1 = map[string]interface{}

// MicrosoftGraphTeamInfo_Team defines model for MicrosoftGraphTeamInfo.Team.
type MicrosoftGraphTeamInfo_Team struct {
	union json.RawMessage
}

// MicrosoftGraphTeamMemberSettings defines model for microsoft.graph.teamMemberSettings.
type MicrosoftGraphTeamMemberSettings struct {
	// AllowAddRemoveApps If set to true, members can add and remove apps.
	AllowAddRemoveApps *bool `json:"allowAddRemoveApps"`

	// AllowCreatePrivateChannels If set to true, members can add and update private channels.
	AllowCreatePrivateChannels *bool `json:"allowCreatePrivateChannels"`

	// AllowCreateUpdateChannels If set to true, members can add and update channels.
	AllowCreateUpdateChannels *bool `json:"allowCreateUpdateChannels"`

	// AllowCreateUpdateRemoveConnectors If set to true, members can add, update, and remove connectors.
	AllowCreateUpdateRemoveConnectors *bool `json:"allowCreateUpdateRemoveConnectors"`

	// AllowCreateUpdateRemoveTabs If set to true, members can add, update, and remove tabs.
	AllowCreateUpdateRemoveTabs *bool `json:"allowCreateUpdateRemoveTabs"`

	// AllowDeleteChannels If set to true, members can delete channels.
	AllowDeleteChannels *bool `json:"allowDeleteChannels"`
}

// MicrosoftGraphTeamMessagingSettings defines model for microsoft.graph.teamMessagingSettings.
type MicrosoftGraphTeamMessagingSettings struct {
	// AllowChannelMentions If set to true, @channel mentions are allowed.
	AllowChannelMentions *bool `json:"allowChannelMentions"`

	// AllowOwnerDeleteMessages If set to true, owners can delete any message.
	AllowOwnerDeleteMessages *bool `json:"allowOwnerDeleteMessages"`

	// AllowTeamMentions If set to true, @team mentions are allowed.
	AllowTeamMentions *bool `json:"allowTeamMentions"`

	// AllowUserDeleteMessages If set to true, users can delete their messages.
	AllowUserDeleteMessages *bool `json:"allowUserDeleteMessages"`

	// AllowUserEditMessages If set to true, users can edit their messages.
	AllowUserEditMessages *bool `json:"allowUserEditMessages"`
}

// MicrosoftGraphTeamSpecialization defines model for microsoft.graph.teamSpecialization.
type MicrosoftGraphTeamSpecialization string

// MicrosoftGraphTeamSummary defines model for microsoft.graph.teamSummary.
type MicrosoftGraphTeamSummary struct {
	// GuestsCount Count of guests in a team.
	GuestsCount *int32 `json:"guestsCount"`

	// MembersCount Count of members in a team.
	MembersCount *int32 `json:"membersCount"`

	// OwnersCount Count of owners in a team.
	OwnersCount *int32 `json:"ownersCount"`
}

// MicrosoftGraphTeamVisibilityType defines model for microsoft.graph.teamVisibilityType.
type MicrosoftGraphTeamVisibilityType string

// MicrosoftGraphTeamsApp defines model for microsoft.graph.teamsApp.
type MicrosoftGraphTeamsApp struct {
	// AppDefinitions The details for each version of the app.
	AppDefinitions *[]MicrosoftGraphTeamsAppDefinition `json:"appDefinitions,omitempty"`

	// DisplayName The name of the catalog app provided by the app developer in the Microsoft Teams zip app package.
	DisplayName *string `json:"displayName"`

	// DistributionMethod The method of distribution for the app. Read-only.
	DistributionMethod *MicrosoftGraphTeamsApp_DistributionMethod `json:"distributionMethod,omitempty"`

	// ExternalId The ID of the catalog provided by the app developer in the Microsoft Teams zip app package.
	ExternalId *string `json:"externalId"`

	// Id The unique idenfier for an entity. Read-only.
	Id *string `json:"id,omitempty"`
}

// MicrosoftGraphTeamsAppDistributionMethod1 defines model for .
type MicrosoftGraphTeamsAppDistributionMethod1 = map[string]interface{}

// MicrosoftGraphTeamsApp_DistributionMethod The method of distribution for the app. Read-only.
type MicrosoftGraphTeamsApp_DistributionMethod struct {
	union json.RawMessage
}

// MicrosoftGraphTeamsAppAuthorization defines model for microsoft.graph.teamsAppAuthorization.
type MicrosoftGraphTeamsAppAuthorization struct {
	// RequiredPermissionSet Set of permissions required by the teamsApp.
	RequiredPermissionSet *MicrosoftGraphTeamsAppAuthorization_RequiredPermissionSet `json:"requiredPermissionSet,omitempty"`
}

// MicrosoftGraphTeamsAppAuthorizationRequiredPermissionSet1 defines model for .
type MicrosoftGraphTeamsAppAuthorizationRequiredPermissionSet1 = map[string]interface{}

// MicrosoftGraphTeamsAppAuthorization_RequiredPermissionSet Set of permissions required by the teamsApp.
type MicrosoftGraphTeamsAppAuthorization_RequiredPermissionSet struct {
	union json.RawMessage
}

// MicrosoftGraphTeamsAppDefinition defines model for microsoft.graph.teamsAppDefinition.
type MicrosoftGraphTeamsAppDefinition struct {
	// Authorization Authorization requirements specified in the Teams app manifest.
	Authorization *MicrosoftGraphTeamsAppDefinition_Authorization `json:"authorization,omitempty"`

	// Bot The details of the bot specified in the Teams app manifest.
	Bot       *MicrosoftGraphTeamsAppDefinition_Bot       `json:"bot,omitempty"`
	CreatedBy *MicrosoftGraphTeamsAppDefinition_CreatedBy `json:"createdBy,omitempty"`

	// Description Verbose description of the application.
	Description *string `json:"description"`

	// DisplayName The name of the app provided by the app developer.
	DisplayName *string `json:"displayName"`

	// Id The unique idenfier for an entity. Read-only.
	Id                   *string    `json:"id,omitempty"`
	LastModifiedDateTime *time.Time `json:"lastModifiedDateTime"`

	// PublishingState The published status of a specific version of a Teams app. Possible values are:submitted — The specific version of the Teams app has been submitted and is under review. published  — The request to publish the specific version of the Teams app has been approved by the admin and the app is published.  rejected — The request to publish the specific version of the Teams app was rejected by the admin.
	PublishingState *MicrosoftGraphTeamsAppDefinition_PublishingState `json:"publishingState,omitempty"`

	// ShortDescription Short description of the application.
	ShortDescription *string `json:"shortDescription"`

	// TeamsAppId The ID from the Teams app manifest.
	TeamsAppId *string `json:"teamsAppId"`

	// Version The version number of the application.
	Version *string `json:"version"`
}

// MicrosoftGraphTeamsAppDefinitionAuthorization1 defines model for .
type MicrosoftGraphTeamsAppDefinitionAuthorization1 = map[string]interface{}

// MicrosoftGraphTeamsAppDefinition_Authorization Authorization requirements specified in the Teams app manifest.
type MicrosoftGraphTeamsAppDefinition_Authorization struct {
	union json.RawMessage
}

// MicrosoftGraphTeamsAppDefinitionBot1 defines model for .
type MicrosoftGraphTeamsAppDefinitionBot1 = map[string]interface{}

// MicrosoftGraphTeamsAppDefinition_Bot The details of the bot specified in the Teams app manifest.
type MicrosoftGraphTeamsAppDefinition_Bot struct {
	union json.RawMessage
}

// MicrosoftGraphTeamsAppDefinitionCreatedBy1 defines model for .
type MicrosoftGraphTeamsAppDefinitionCreatedBy1 = map[string]interface{}

// MicrosoftGraphTeamsAppDefinition_CreatedBy defines model for MicrosoftGraphTeamsAppDefinition.CreatedBy.
type MicrosoftGraphTeamsAppDefinition_CreatedBy struct {
	union json.RawMessage
}

// MicrosoftGraphTeamsAppDefinitionPublishingState1 defines model for .
type MicrosoftGraphTeamsAppDefinitionPublishingState1 = map[string]interface{}

// MicrosoftGraphTeamsAppDefinition_PublishingState The published status of a specific version of a Teams app. Possible values are:submitted — The specific version of the Teams app has been submitted and is under review. published  — The request to publish the specific version of the Teams app has been approved by the admin and the app is published.  rejected — The request to publish the specific version of the Teams app was rejected by the admin.
type MicrosoftGraphTeamsAppDefinition_PublishingState struct {
	union json.RawMessage
}

// MicrosoftGraphTeamsAppDistributionMethod defines model for microsoft.graph.teamsAppDistributionMethod.
type MicrosoftGraphTeamsAppDistributionMethod string

// MicrosoftGraphTeamsAppInstallation defines model for microsoft.graph.teamsAppInstallation.
type MicrosoftGraphTeamsAppInstallation struct {
	// ConsentedPermissionSet The set of resource-specific permissions consented to while installing or upgrading the teamsApp.
	ConsentedPermissionSet *MicrosoftGraphTeamsAppInstallation_ConsentedPermissionSet `json:"consentedPermissionSet,omitempty"`

	// Id The unique idenfier for an entity. Read-only.
	Id *string `json:"id,omitempty"`

	// TeamsApp The app that is installed.
	TeamsApp *MicrosoftGraphTeamsAppInstallation_TeamsApp `json:"teamsApp,omitempty"`

	// TeamsAppDefinition The details of this version of the app.
	TeamsAppDefinition *MicrosoftGraphTeamsAppInstallation_TeamsAppDefinition `json:"teamsAppDefinition,omitempty"`
}

// MicrosoftGraphTeamsAppInstallationConsentedPermissionSet1 defines model for .
type MicrosoftGraphTeamsAppInstallationConsentedPermissionSet1 = map[string]interface{}

// MicrosoftGraphTeamsAppInstallation_ConsentedPermissionSet The set of resource-specific permissions consented to while installing or upgrading the teamsApp.
type MicrosoftGraphTeamsAppInstallation_ConsentedPermissionSet struct {
	union json.RawMessage
}

// MicrosoftGraphTeamsAppInstallationTeamsApp1 defines model for .
type MicrosoftGraphTeamsAppInstallationTeamsApp1 = map[string]interface{}

// MicrosoftGraphTeamsAppInstallation_TeamsApp The app that is installed.
type MicrosoftGraphTeamsAppInstallation_TeamsApp struct {
	union json.RawMessage
}

// MicrosoftGraphTeamsAppInstallationTeamsAppDefinition1 defines model for .
type MicrosoftGraphTeamsAppInstallationTeamsAppDefinition1 = map[string]interface{}

// MicrosoftGraphTeamsAppInstallation_TeamsAppDefinition The details of this version of the app.
type MicrosoftGraphTeamsAppInstallation_TeamsAppDefinition struct {
	union json.RawMessage
}

// MicrosoftGraphTeamsAppPermissionSet defines model for microsoft.graph.teamsAppPermissionSet.
type MicrosoftGraphTeamsAppPermissionSet struct {
	// ResourceSpecificPermissions A collection of resource-specific permissions.
	ResourceSpecificPermissions *[]MicrosoftGraphTeamsAppPermissionSet_ResourceSpecificPermissions_Item `json:"resourceSpecificPermissions,omitempty"`
}

// MicrosoftGraphTeamsAppPermissionSetResourceSpecificPermissions1 defines model for .
type MicrosoftGraphTeamsAppPermissionSetResourceSpecificPermissions1 = map[string]interface{}

// MicrosoftGraphTeamsAppPermissionSet_ResourceSpecificPermissions_Item defines model for microsoft.graph.teamsAppPermissionSet.resourceSpecificPermissions.Item.
type MicrosoftGraphTeamsAppPermissionSet_ResourceSpecificPermissions_Item struct {
	union json.RawMessage
}

// MicrosoftGraphTeamsAppPublishingState defines model for microsoft.graph.teamsAppPublishingState.
type MicrosoftGraphTeamsAppPublishingState string

// MicrosoftGraphTeamsAppResourceSpecificPermission defines model for microsoft.graph.teamsAppResourceSpecificPermission.
type MicrosoftGraphTeamsAppResourceSpecificPermission struct {
	// PermissionType The type of resource-specific permission.
	PermissionType *MicrosoftGraphTeamsAppResourceSpecificPermission_PermissionType `json:"permissionType,omitempty"`

	// PermissionValue The name of the resource-specific permission.
	PermissionValue *string `json:"permissionValue"`
}

// MicrosoftGraphTeamsAppResourceSpecificPermissionPermissionType1 defines model for .
type MicrosoftGraphTeamsAppResourceSpecificPermissionPermissionType1 = map[string]interface{}

// MicrosoftGraphTeamsAppResourceSpecificPermission_PermissionType The type of resource-specific permission.
type MicrosoftGraphTeamsAppResourceSpecificPermission_PermissionType struct {
	union json.RawMessage
}

// MicrosoftGraphTeamsAppResourceSpecificPermissionType defines model for microsoft.graph.teamsAppResourceSpecificPermissionType.
type MicrosoftGraphTeamsAppResourceSpecificPermissionType string

// MicrosoftGraphTeamsAsyncOperation defines model for microsoft.graph.teamsAsyncOperation.
type MicrosoftGraphTeamsAsyncOperation struct {
	// AttemptsCount Number of times the operation was attempted before being marked successful or failed.
	AttemptsCount *int32 `json:"attemptsCount,omitempty"`

	// CreatedDateTime Time when the operation was created.
	CreatedDateTime *time.Time `json:"createdDateTime,omitempty"`

	// Error Any error that causes the async operation to fail.
	Error *MicrosoftGraphTeamsAsyncOperation_Error `json:"error,omitempty"`

	// Id The unique idenfier for an entity. Read-only.
	Id *string `json:"id,omitempty"`

	// LastActionDateTime Time when the async operation was last updated.
	LastActionDateTime *time.Time                               `json:"lastActionDateTime,omitempty"`
	OperationType      *MicrosoftGraphTeamsAsyncOperationType   `json:"operationType,omitempty"`
	Status             *MicrosoftGraphTeamsAsyncOperationStatus `json:"status,omitempty"`

	// TargetResourceId The ID of the object that's created or modified as result of this async operation, typically a team.
	TargetResourceId *string `json:"targetResourceId"`

	// TargetResourceLocation The location of the object that's created or modified as result of this async operation. This URL should be treated as an opaque value and not parsed into its component paths.
	TargetResourceLocation *string `json:"targetResourceLocation"`
}

// MicrosoftGraphTeamsAsyncOperationError1 defines model for .
type MicrosoftGraphTeamsAsyncOperationError1 = map[string]interface{}

// MicrosoftGraphTeamsAsyncOperation_Error Any error that causes the async operation to fail.
type MicrosoftGraphTeamsAsyncOperation_Error struct {
	union json.RawMessage
}

// MicrosoftGraphTeamsAsyncOperationStatus defines model for microsoft.graph.teamsAsyncOperationStatus.
type MicrosoftGraphTeamsAsyncOperationStatus string

// MicrosoftGraphTeamsAsyncOperationType defines model for microsoft.graph.teamsAsyncOperationType.
type MicrosoftGraphTeamsAsyncOperationType string

// MicrosoftGraphTeamsTab defines model for microsoft.graph.teamsTab.
type MicrosoftGraphTeamsTab struct {
	// Configuration Container for custom settings applied to a tab. The tab is considered configured only once this property is set.
	Configuration *MicrosoftGraphTeamsTab_Configuration `json:"configuration,omitempty"`

	// DisplayName Name of the tab.
	DisplayName *string `json:"displayName"`

	// Id The unique idenfier for an entity. Read-only.
	Id *string `json:"id,omitempty"`

	// TeamsApp The application that is linked to the tab. This cannot be changed after tab creation.
	TeamsApp *MicrosoftGraphTeamsTab_TeamsApp `json:"teamsApp,omitempty"`

	// WebUrl Deep link URL of the tab instance. Read only.
	WebUrl *string `json:"webUrl"`
}

// MicrosoftGraphTeamsTabConfiguration1 defines model for .
type MicrosoftGraphTeamsTabConfiguration1 = map[string]interface{}

// MicrosoftGraphTeamsTab_Configuration Container for custom settings applied to a tab. The tab is considered configured only once this property is set.
type MicrosoftGraphTeamsTab_Configuration struct {
	union json.RawMessage
}

// MicrosoftGraphTeamsTabTeamsApp1 defines model for .
type MicrosoftGraphTeamsTabTeamsApp1 = map[string]interface{}

// MicrosoftGraphTeamsTab_TeamsApp The application that is linked to the tab. This cannot be changed after tab creation.
type MicrosoftGraphTeamsTab_TeamsApp struct {
	union json.RawMessage
}

// MicrosoftGraphTeamsTabConfiguration defines model for microsoft.graph.teamsTabConfiguration.
type MicrosoftGraphTeamsTabConfiguration struct {
	// ContentUrl Url used for rendering tab contents in Teams. Required.
	ContentUrl *string `json:"contentUrl"`

	// EntityId Identifier for the entity hosted by the tab provider.
	EntityId *string `json:"entityId"`

	// RemoveUrl Url called by Teams client when a Tab is removed using the Teams Client.
	RemoveUrl *string `json:"removeUrl"`

	// WebsiteUrl Url for showing tab contents outside of Teams.
	WebsiteUrl *string `json:"websiteUrl"`
}

// MicrosoftGraphTeamsTemplate defines model for microsoft.graph.teamsTemplate.
type MicrosoftGraphTeamsTemplate struct {
	// Id The unique idenfier for an entity. Read-only.
	Id *string `json:"id,omitempty"`
}

// MicrosoftGraphTeamworkBot defines model for microsoft.graph.teamworkBot.
type MicrosoftGraphTeamworkBot struct {
	// Id The unique idenfier for an entity. Read-only.
	Id *string `json:"id,omitempty"`
}

// MicrosoftGraphTeamworkConversationIdentity defines model for microsoft.graph.teamworkConversationIdentity.
type MicrosoftGraphTeamworkConversationIdentity struct {
	// ConversationIdentityType Type of conversation. Possible values are: team, channel, chat, and unknownFutureValue.
	ConversationIdentityType *MicrosoftGraphTeamworkConversationIdentity_ConversationIdentityType `json:"conversationIdentityType,omitempty"`

	// DisplayName The display name of the identity. Note that this might not always be available or up to date. For example, if a user changes their display name, the API might show the new value in a future response, but the items associated with the user won't show up as having changed when using delta.
	DisplayName *string `json:"displayName"`

	// Id Unique identifier for the identity.
	Id *string `json:"id"`
}

// MicrosoftGraphTeamworkConversationIdentityConversationIdentityType1 defines model for .
type MicrosoftGraphTeamworkConversationIdentityConversationIdentityType1 = map[string]interface{}

// MicrosoftGraphTeamworkConversationIdentity_ConversationIdentityType Type of conversation. Possible values are: team, channel, chat, and unknownFutureValue.
type MicrosoftGraphTeamworkConversationIdentity_ConversationIdentityType struct {
	union json.RawMessage
}

// MicrosoftGraphTeamworkConversationIdentityType defines model for microsoft.graph.teamworkConversationIdentityType.
type MicrosoftGraphTeamworkConversationIdentityType string

// MicrosoftGraphTeamworkHostedContent defines model for microsoft.graph.teamworkHostedContent.
type MicrosoftGraphTeamworkHostedContent struct {
	// ContentBytes Write only. Bytes for the hosted content (such as images).
	ContentBytes *string `json:"contentBytes"`

	// ContentType Write only. Content type. sicj as image/png, image/jpg.
	ContentType *string `json:"contentType"`

	// Id The unique idenfier for an entity. Read-only.
	Id *string `json:"id,omitempty"`
}

// MicrosoftGraphTeamworkOnlineMeetingInfo defines model for microsoft.graph.teamworkOnlineMeetingInfo.
type MicrosoftGraphTeamworkOnlineMeetingInfo struct {
	// CalendarEventId The identifier of the calendar event associated with the meeting.
	CalendarEventId *string `json:"calendarEventId"`

	// JoinWebUrl The URL that users click to join or uniquely identify the meeting.
	JoinWebUrl *string `json:"joinWebUrl"`

	// Organizer The organizer of the meeting.
	Organizer *MicrosoftGraphTeamworkOnlineMeetingInfo_Organizer `json:"organizer,omitempty"`
}

// MicrosoftGraphTeamworkOnlineMeetingInfoOrganizer1 defines model for .
type MicrosoftGraphTeamworkOnlineMeetingInfoOrganizer1 = map[string]interface{}

// MicrosoftGraphTeamworkOnlineMeetingInfo_Organizer The organizer of the meeting.
type MicrosoftGraphTeamworkOnlineMeetingInfo_Organizer struct {
	union json.RawMessage
}

// MicrosoftGraphTeamworkTag defines model for microsoft.graph.teamworkTag.
type MicrosoftGraphTeamworkTag struct {
	// Description The description of the tag as it will appear to the user in Microsoft Teams. A teamworkTag can't have more than 200 teamworkTagMembers.
	Description *string `json:"description"`

	// DisplayName The name of the tag as it will appear to the user in Microsoft Teams.
	DisplayName *string `json:"displayName"`

	// Id The unique idenfier for an entity. Read-only.
	Id *string `json:"id,omitempty"`

	// MemberCount The number of users assigned to the tag.
	MemberCount *int32 `json:"memberCount"`

	// Members Users assigned to the tag.
	Members *[]MicrosoftGraphTeamworkTagMember `json:"members,omitempty"`

	// TagType The type of the tag. Default is standard.
	TagType *MicrosoftGraphTeamworkTag_TagType `json:"tagType,omitempty"`

	// TeamId ID of the team in which the tag is defined.
	TeamId *string `json:"teamId"`
}

// MicrosoftGraphTeamworkTagTagType1 defines model for .
type MicrosoftGraphTeamworkTagTagType1 = map[string]interface{}

// MicrosoftGraphTeamworkTag_TagType The type of the tag. Default is standard.
type MicrosoftGraphTeamworkTag_TagType struct {
	union json.RawMessage
}

// MicrosoftGraphTeamworkTagMember defines model for microsoft.graph.teamworkTagMember.
type MicrosoftGraphTeamworkTagMember struct {
	// DisplayName The member's display name.
	DisplayName *string `json:"displayName"`

	// Id The unique idenfier for an entity. Read-only.
	Id *string `json:"id,omitempty"`

	// TenantId The ID of the tenant that the tag member is a part of.
	TenantId *string `json:"tenantId"`

	// UserId The user ID of the member.
	UserId *string `json:"userId"`
}

// MicrosoftGraphTeamworkTagType defines model for microsoft.graph.teamworkTagType.
type MicrosoftGraphTeamworkTagType string

// MicrosoftGraphTeamworkUserIdentity defines model for microsoft.graph.teamworkUserIdentity.
type MicrosoftGraphTeamworkUserIdentity struct {
	// DisplayName The display name of the identity. Note that this might not always be available or up to date. For example, if a user changes their display name, the API might show the new value in a future response, but the items associated with the user won't show up as having changed when using delta.
	DisplayName *string `json:"displayName"`

	// Id Unique identifier for the identity.
	Id *string `json:"id"`

	// UserIdentityType Type of user. Possible values are: aadUser, onPremiseAadUser, anonymousGuest, federatedUser, personalMicrosoftAccountUser, skypeUser, phoneUser, unknownFutureValue and emailUser.
	UserIdentityType *MicrosoftGraphTeamworkUserIdentity_UserIdentityType `json:"userIdentityType,omitempty"`
}

// MicrosoftGraphTeamworkUserIdentityUserIdentityType1 defines model for .
type MicrosoftGraphTeamworkUserIdentityUserIdentityType1 = map[string]interface{}

// MicrosoftGraphTeamworkUserIdentity_UserIdentityType Type of user. Possible values are: aadUser, onPremiseAadUser, anonymousGuest, federatedUser, personalMicrosoftAccountUser, skypeUser, phoneUser, unknownFutureValue and emailUser.
type MicrosoftGraphTeamworkUserIdentity_UserIdentityType struct {
	union json.RawMessage
}

// MicrosoftGraphTeamworkUserIdentityType defines model for microsoft.graph.teamworkUserIdentityType.
type MicrosoftGraphTeamworkUserIdentityType string

// MicrosoftGraphTemporaryAccessPassAuthenticationMethod defines model for microsoft.graph.temporaryAccessPassAuthenticationMethod.
type MicrosoftGraphTemporaryAccessPassAuthenticationMethod struct {
	// CreatedDateTime The date and time when the Temporary Access Pass was created.
	CreatedDateTime *time.Time `json:"createdDateTime"`

	// Id The unique idenfier for an entity. Read-only.
	Id *string `json:"id,omitempty"`

	// IsUsable The state of the authentication method that indicates whether it's currently usable by the user.
	IsUsable *bool `json:"isUsable"`

	// IsUsableOnce Determines whether the pass is limited to a one-time use. If true, the pass can be used once; if false, the pass can be used multiple times within the Temporary Access Pass lifetime.
	IsUsableOnce *bool `json:"isUsableOnce"`

	// LifetimeInMinutes The lifetime of the Temporary Access Pass in minutes starting at startDateTime. Must be between 10 and 43200 inclusive (equivalent to 30 days).
	LifetimeInMinutes *int32 `json:"lifetimeInMinutes"`

	// MethodUsabilityReason Details about the usability state (isUsable). Reasons can include: EnabledByPolicy, DisabledByPolicy, Expired, NotYetValid, OneTimeUsed.
	MethodUsabilityReason *string `json:"methodUsabilityReason"`

	// StartDateTime The date and time when the Temporary Access Pass becomes available to use and when isUsable is true is enforced.
	StartDateTime *time.Time `json:"startDateTime"`

	// TemporaryAccessPass The Temporary Access Pass used to authenticate. Returned only on creation of a new temporaryAccessPassAuthenticationMethod object; Hidden in subsequent read operations and returned as null with GET.
	TemporaryAccessPass *string `json:"temporaryAccessPass"`
}

// MicrosoftGraphTermColumn defines model for microsoft.graph.termColumn.
type MicrosoftGraphTermColumn struct {
	// AllowMultipleValues Specifies whether the column will allow more than one value.
	AllowMultipleValues *bool                                `json:"allowMultipleValues"`
	ParentTerm          *MicrosoftGraphTermColumn_ParentTerm `json:"parentTerm,omitempty"`

	// ShowFullyQualifiedName Specifies whether to display the entire term path or only the term label.
	ShowFullyQualifiedName *bool                             `json:"showFullyQualifiedName"`
	TermSet                *MicrosoftGraphTermColumn_TermSet `json:"termSet,omitempty"`
}

// MicrosoftGraphTermColumnParentTerm1 defines model for .
type MicrosoftGraphTermColumnParentTerm1 = map[string]interface{}

// MicrosoftGraphTermColumn_ParentTerm defines model for MicrosoftGraphTermColumn.ParentTerm.
type MicrosoftGraphTermColumn_ParentTerm struct {
	union json.RawMessage
}

// MicrosoftGraphTermColumnTermSet1 defines model for .
type MicrosoftGraphTermColumnTermSet1 = map[string]interface{}

// MicrosoftGraphTermColumn_TermSet defines model for MicrosoftGraphTermColumn.TermSet.
type MicrosoftGraphTermColumn_TermSet struct {
	union json.RawMessage
}

// MicrosoftGraphTermStoreGroup defines model for microsoft.graph.termStore.group.
type MicrosoftGraphTermStoreGroup struct {
	// CreatedDateTime Date and time of the group creation. Read-only.
	CreatedDateTime *time.Time `json:"createdDateTime"`

	// Description Description that gives details on the term usage.
	Description *string `json:"description"`

	// DisplayName Name of the group.
	DisplayName *string `json:"displayName"`

	// Id The unique idenfier for an entity. Read-only.
	Id *string `json:"id,omitempty"`

	// ParentSiteId ID of the parent site of this group.
	ParentSiteId *string `json:"parentSiteId"`

	// Scope Returns the type of the group. Possible values are: global, system, and siteCollection.
	Scope *MicrosoftGraphTermStoreGroup_Scope `json:"scope,omitempty"`

	// Sets All sets under the group in a term [store].
	Sets *[]MicrosoftGraphTermStoreSet `json:"sets,omitempty"`
}

// MicrosoftGraphTermStoreGroupScope1 defines model for .
type MicrosoftGraphTermStoreGroupScope1 = map[string]interface{}

// MicrosoftGraphTermStoreGroup_Scope Returns the type of the group. Possible values are: global, system, and siteCollection.
type MicrosoftGraphTermStoreGroup_Scope struct {
	union json.RawMessage
}

// MicrosoftGraphTermStoreLocalizedDescription defines model for microsoft.graph.termStore.localizedDescription.
type MicrosoftGraphTermStoreLocalizedDescription struct {
	// Description The description in the localized language.
	Description *string `json:"description"`

	// LanguageTag The language tag for the label.
	LanguageTag *string `json:"languageTag"`
}

// MicrosoftGraphTermStoreLocalizedLabel defines model for microsoft.graph.termStore.localizedLabel.
type MicrosoftGraphTermStoreLocalizedLabel struct {
	// IsDefault Indicates whether the label is the default label.
	IsDefault *bool `json:"isDefault"`

	// LanguageTag The language tag for the label.
	LanguageTag *string `json:"languageTag"`

	// Name The name of the label.
	Name *string `json:"name"`
}

// MicrosoftGraphTermStoreLocalizedName defines model for microsoft.graph.termStore.localizedName.
type MicrosoftGraphTermStoreLocalizedName struct {
	// LanguageTag The language tag for the label.
	LanguageTag *string `json:"languageTag"`

	// Name The name in the localized language.
	Name *string `json:"name"`
}

// MicrosoftGraphTermStoreRelation defines model for microsoft.graph.termStore.relation.
type MicrosoftGraphTermStoreRelation struct {
	// FromTerm The from [term] of the relation. The term from which the relationship is defined. A null value would indicate the relation is directly with the [set].
	FromTerm *MicrosoftGraphTermStoreRelation_FromTerm `json:"fromTerm,omitempty"`

	// Id The unique idenfier for an entity. Read-only.
	Id *string `json:"id,omitempty"`

	// Relationship The type of relation. Possible values are: pin, reuse.
	Relationship *MicrosoftGraphTermStoreRelation_Relationship `json:"relationship,omitempty"`

	// Set The [set] in which the relation is relevant.
	Set *MicrosoftGraphTermStoreRelation_Set `json:"set,omitempty"`

	// ToTerm The to [term] of the relation. The term to which the relationship is defined.
	ToTerm *MicrosoftGraphTermStoreRelation_ToTerm `json:"toTerm,omitempty"`
}

// MicrosoftGraphTermStoreRelationFromTerm1 defines model for .
type MicrosoftGraphTermStoreRelationFromTerm1 = map[string]interface{}

// MicrosoftGraphTermStoreRelation_FromTerm The from [term] of the relation. The term from which the relationship is defined. A null value would indicate the relation is directly with the [set].
type MicrosoftGraphTermStoreRelation_FromTerm struct {
	union json.RawMessage
}

// MicrosoftGraphTermStoreRelationRelationship1 defines model for .
type MicrosoftGraphTermStoreRelationRelationship1 = map[string]interface{}

// MicrosoftGraphTermStoreRelation_Relationship The type of relation. Possible values are: pin, reuse.
type MicrosoftGraphTermStoreRelation_Relationship struct {
	union json.RawMessage
}

// MicrosoftGraphTermStoreRelationSet1 defines model for .
type MicrosoftGraphTermStoreRelationSet1 = map[string]interface{}

// MicrosoftGraphTermStoreRelation_Set The [set] in which the relation is relevant.
type MicrosoftGraphTermStoreRelation_Set struct {
	union json.RawMessage
}

// MicrosoftGraphTermStoreRelationToTerm1 defines model for .
type MicrosoftGraphTermStoreRelationToTerm1 = map[string]interface{}

// MicrosoftGraphTermStoreRelation_ToTerm The to [term] of the relation. The term to which the relationship is defined.
type MicrosoftGraphTermStoreRelation_ToTerm struct {
	union json.RawMessage
}

// MicrosoftGraphTermStoreRelationType defines model for microsoft.graph.termStore.relationType.
type MicrosoftGraphTermStoreRelationType string

// MicrosoftGraphTermStoreSet defines model for microsoft.graph.termStore.set.
type MicrosoftGraphTermStoreSet struct {
	// Children Children terms of set in term [store].
	Children *[]MicrosoftGraphTermStoreTerm `json:"children,omitempty"`

	// CreatedDateTime Date and time of set creation. Read-only.
	CreatedDateTime *time.Time `json:"createdDateTime"`

	// Description Description that gives details on the term usage.
	Description *string `json:"description"`

	// Id The unique idenfier for an entity. Read-only.
	Id *string `json:"id,omitempty"`

	// LocalizedNames Name of the set for each languageTag.
	LocalizedNames *[]MicrosoftGraphTermStoreSet_LocalizedNames_Item `json:"localizedNames,omitempty"`
	ParentGroup    *MicrosoftGraphTermStoreGroup                     `json:"parentGroup,omitempty"`

	// Properties Custom properties for the set.
	Properties *[]MicrosoftGraphTermStoreSet_Properties_Item `json:"properties,omitempty"`

	// Relations Indicates which terms have been pinned or reused directly under the set.
	Relations *[]MicrosoftGraphTermStoreRelation `json:"relations,omitempty"`

	// Terms All the terms under the set.
	Terms *[]MicrosoftGraphTermStoreTerm `json:"terms,omitempty"`
}

// MicrosoftGraphTermStoreSetLocalizedNames1 defines model for .
type MicrosoftGraphTermStoreSetLocalizedNames1 = map[string]interface{}

// MicrosoftGraphTermStoreSet_LocalizedNames_Item defines model for microsoft.graph.termStore.set.localizedNames.Item.
type MicrosoftGraphTermStoreSet_LocalizedNames_Item struct {
	union json.RawMessage
}

// MicrosoftGraphTermStoreSetProperties1 defines model for .
type MicrosoftGraphTermStoreSetProperties1 = map[string]interface{}

// MicrosoftGraphTermStoreSet_Properties_Item defines model for microsoft.graph.termStore.set.properties.Item.
type MicrosoftGraphTermStoreSet_Properties_Item struct {
	union json.RawMessage
}

// MicrosoftGraphTermStoreStore defines model for microsoft.graph.termStore.store.
type MicrosoftGraphTermStoreStore struct {
	// DefaultLanguageTag Default language of the term store.
	DefaultLanguageTag *string `json:"defaultLanguageTag,omitempty"`

	// Groups Collection of all groups available in the term store.
	Groups *[]MicrosoftGraphTermStoreGroup `json:"groups,omitempty"`

	// Id The unique idenfier for an entity. Read-only.
	Id *string `json:"id,omitempty"`

	// LanguageTags List of languages for the term store.
	LanguageTags *[]string `json:"languageTags,omitempty"`

	// Sets Collection of all sets available in the term store. This relationship can only be used to load a specific term set.
	Sets *[]MicrosoftGraphTermStoreSet `json:"sets,omitempty"`
}

// MicrosoftGraphTermStoreTerm defines model for microsoft.graph.termStore.term.
type MicrosoftGraphTermStoreTerm struct {
	// Children Children of current term.
	Children *[]MicrosoftGraphTermStoreTerm `json:"children,omitempty"`

	// CreatedDateTime Date and time of term creation. Read-only.
	CreatedDateTime *time.Time `json:"createdDateTime"`

	// Descriptions Description about term that is dependent on the languageTag.
	Descriptions *[]MicrosoftGraphTermStoreTerm_Descriptions_Item `json:"descriptions,omitempty"`

	// Id The unique idenfier for an entity. Read-only.
	Id *string `json:"id,omitempty"`

	// Labels Label metadata for a term.
	Labels *[]MicrosoftGraphTermStoreTerm_Labels_Item `json:"labels,omitempty"`

	// LastModifiedDateTime Last date and time of term modification. Read-only.
	LastModifiedDateTime *time.Time `json:"lastModifiedDateTime"`

	// Properties Collection of properties on the term.
	Properties *[]MicrosoftGraphTermStoreTerm_Properties_Item `json:"properties,omitempty"`

	// Relations To indicate which terms are related to the current term as either pinned or reused.
	Relations *[]MicrosoftGraphTermStoreRelation `json:"relations,omitempty"`

	// Set The [set] in which the term is created.
	Set *MicrosoftGraphTermStoreTerm_Set `json:"set,omitempty"`
}

// MicrosoftGraphTermStoreTermDescriptions1 defines model for .
type MicrosoftGraphTermStoreTermDescriptions1 = map[string]interface{}

// MicrosoftGraphTermStoreTerm_Descriptions_Item defines model for microsoft.graph.termStore.term.descriptions.Item.
type MicrosoftGraphTermStoreTerm_Descriptions_Item struct {
	union json.RawMessage
}

// MicrosoftGraphTermStoreTermLabels1 defines model for .
type MicrosoftGraphTermStoreTermLabels1 = map[string]interface{}

// MicrosoftGraphTermStoreTerm_Labels_Item defines model for microsoft.graph.termStore.term.labels.Item.
type MicrosoftGraphTermStoreTerm_Labels_Item struct {
	union json.RawMessage
}

// MicrosoftGraphTermStoreTermProperties1 defines model for .
type MicrosoftGraphTermStoreTermProperties1 = map[string]interface{}

// MicrosoftGraphTermStoreTerm_Properties_Item defines model for microsoft.graph.termStore.term.properties.Item.
type MicrosoftGraphTermStoreTerm_Properties_Item struct {
	union json.RawMessage
}

// MicrosoftGraphTermStoreTermSet1 defines model for .
type MicrosoftGraphTermStoreTermSet1 = map[string]interface{}

// MicrosoftGraphTermStoreTerm_Set The [set] in which the term is created.
type MicrosoftGraphTermStoreTerm_Set struct {
	union json.RawMessage
}

// MicrosoftGraphTermStoreTermGroupScope defines model for microsoft.graph.termStore.termGroupScope.
type MicrosoftGraphTermStoreTermGroupScope string

// MicrosoftGraphTextColumn defines model for microsoft.graph.textColumn.
type MicrosoftGraphTextColumn struct {
	// AllowMultipleLines Whether to allow multiple lines of text.
	AllowMultipleLines *bool `json:"allowMultipleLines"`

	// AppendChangesToExistingText Whether updates to this column should replace existing text, or append to it.
	AppendChangesToExistingText *bool `json:"appendChangesToExistingText"`

	// LinesForEditing The size of the text box.
	LinesForEditing *int32 `json:"linesForEditing"`

	// MaxLength The maximum number of characters for the value.
	MaxLength *int32 `json:"maxLength"`

	// TextType The type of text being stored. Must be one of plain or richText
	TextType *string `json:"textType"`
}

// MicrosoftGraphThumbnail defines model for microsoft.graph.thumbnail.
type MicrosoftGraphThumbnail struct {
	// Content The content stream for the thumbnail.
	Content *string `json:"content"`

	// Height The height of the thumbnail, in pixels.
	Height *int32 `json:"height"`

	// SourceItemId The unique identifier of the item that provided the thumbnail. This is only available when a folder thumbnail is requested.
	SourceItemId *string `json:"sourceItemId"`

	// Url The URL used to fetch the thumbnail content.
	Url *string `json:"url"`

	// Width The width of the thumbnail, in pixels.
	Width *int32 `json:"width"`
}

// MicrosoftGraphThumbnailColumn defines model for microsoft.graph.thumbnailColumn.
type MicrosoftGraphThumbnailColumn = map[string]interface{}

// MicrosoftGraphThumbnailSet defines model for microsoft.graph.thumbnailSet.
type MicrosoftGraphThumbnailSet struct {
	// Id The unique idenfier for an entity. Read-only.
	Id *string `json:"id,omitempty"`

	// Large A 1920x1920 scaled thumbnail.
	Large *MicrosoftGraphThumbnailSet_Large `json:"large,omitempty"`

	// Medium A 176x176 scaled thumbnail.
	Medium *MicrosoftGraphThumbnailSet_Medium `json:"medium,omitempty"`

	// Small A 48x48 cropped thumbnail.
	Small *MicrosoftGraphThumbnailSet_Small `json:"small,omitempty"`

	// Source A custom thumbnail image or the original image used to generate other thumbnails.
	Source *MicrosoftGraphThumbnailSet_Source `json:"source,omitempty"`
}

// MicrosoftGraphThumbnailSetLarge1 defines model for .
type MicrosoftGraphThumbnailSetLarge1 = map[string]interface{}

// MicrosoftGraphThumbnailSet_Large A 1920x1920 scaled thumbnail.
type MicrosoftGraphThumbnailSet_Large struct {
	union json.RawMessage
}

// MicrosoftGraphThumbnailSetMedium1 defines model for .
type MicrosoftGraphThumbnailSetMedium1 = map[string]interface{}

// MicrosoftGraphThumbnailSet_Medium A 176x176 scaled thumbnail.
type MicrosoftGraphThumbnailSet_Medium struct {
	union json.RawMessage
}

// MicrosoftGraphThumbnailSetSmall1 defines model for .
type MicrosoftGraphThumbnailSetSmall1 = map[string]interface{}

// MicrosoftGraphThumbnailSet_Small A 48x48 cropped thumbnail.
type MicrosoftGraphThumbnailSet_Small struct {
	union json.RawMessage
}

// MicrosoftGraphThumbnailSetSource1 defines model for .
type MicrosoftGraphThumbnailSetSource1 = map[string]interface{}

// MicrosoftGraphThumbnailSet_Source A custom thumbnail image or the original image used to generate other thumbnails.
type MicrosoftGraphThumbnailSet_Source struct {
	union json.RawMessage
}

// MicrosoftGraphTimeOff defines model for microsoft.graph.timeOff.
type MicrosoftGraphTimeOff struct {
	// CreatedDateTime The Timestamp type represents date and time information using ISO 8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 is 2014-01-01T00:00:00Z
	CreatedDateTime *time.Time `json:"createdDateTime"`

	// DraftTimeOff The draft version of this timeOff that is viewable by managers. Required.
	DraftTimeOff *MicrosoftGraphTimeOff_DraftTimeOff `json:"draftTimeOff,omitempty"`

	// Id The unique idenfier for an entity. Read-only.
	Id *string `json:"id,omitempty"`

	// LastModifiedBy Identity of the person who last modified the entity.
	LastModifiedBy *MicrosoftGraphTimeOff_LastModifiedBy `json:"lastModifiedBy,omitempty"`

	// LastModifiedDateTime The Timestamp type represents date and time information using ISO 8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 is 2014-01-01T00:00:00Z
	LastModifiedDateTime *time.Time `json:"lastModifiedDateTime"`

	// SharedTimeOff The shared version of this timeOff that is viewable by both employees and managers. Required.
	SharedTimeOff *MicrosoftGraphTimeOff_SharedTimeOff `json:"sharedTimeOff,omitempty"`

	// UserId ID of the user assigned to the timeOff. Required.
	UserId *string `json:"userId"`
}

// MicrosoftGraphTimeOffDraftTimeOff1 defines model for .
type MicrosoftGraphTimeOffDraftTimeOff1 = map[string]interface{}

// MicrosoftGraphTimeOff_DraftTimeOff The draft version of this timeOff that is viewable by managers. Required.
type MicrosoftGraphTimeOff_DraftTimeOff struct {
	union json.RawMessage
}

// MicrosoftGraphTimeOffLastModifiedBy1 defines model for .
type MicrosoftGraphTimeOffLastModifiedBy1 = map[string]interface{}

// MicrosoftGraphTimeOff_LastModifiedBy Identity of the person who last modified the entity.
type MicrosoftGraphTimeOff_LastModifiedBy struct {
	union json.RawMessage
}

// MicrosoftGraphTimeOffSharedTimeOff1 defines model for .
type MicrosoftGraphTimeOffSharedTimeOff1 = map[string]interface{}

// MicrosoftGraphTimeOff_SharedTimeOff The shared version of this timeOff that is viewable by both employees and managers. Required.
type MicrosoftGraphTimeOff_SharedTimeOff struct {
	union json.RawMessage
}

// MicrosoftGraphTimeOffItem defines model for microsoft.graph.timeOffItem.
type MicrosoftGraphTimeOffItem struct {
	EndDateTime   *time.Time                         `json:"endDateTime"`
	StartDateTime *time.Time                         `json:"startDateTime"`
	Theme         *MicrosoftGraphScheduleEntityTheme `json:"theme,omitempty"`

	// TimeOffReasonId ID of the timeOffReason for this timeOffItem. Required.
	TimeOffReasonId *string `json:"timeOffReasonId"`
}

// MicrosoftGraphTimeOffReason defines model for microsoft.graph.timeOffReason.
type MicrosoftGraphTimeOffReason struct {
	// CreatedDateTime The Timestamp type represents date and time information using ISO 8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 is 2014-01-01T00:00:00Z
	CreatedDateTime *time.Time `json:"createdDateTime"`

	// DisplayName The name of the timeOffReason. Required.
	DisplayName *string `json:"displayName"`

	// IconType Supported icon types are: none, car, calendar, running, plane, firstAid, doctor, notWorking, clock, juryDuty, globe, cup, phone, weather, umbrella, piggyBank, dog, cake, trafficCone, pin, sunny. Required.
	IconType *MicrosoftGraphTimeOffReason_IconType `json:"iconType,omitempty"`

	// Id The unique idenfier for an entity. Read-only.
	Id *string `json:"id,omitempty"`

	// IsActive Indicates whether the timeOffReason can be used when creating new entities or updating existing ones. Required.
	IsActive *bool `json:"isActive"`

	// LastModifiedBy Identity of the person who last modified the entity.
	LastModifiedBy *MicrosoftGraphTimeOffReason_LastModifiedBy `json:"lastModifiedBy,omitempty"`

	// LastModifiedDateTime The Timestamp type represents date and time information using ISO 8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 is 2014-01-01T00:00:00Z
	LastModifiedDateTime *time.Time `json:"lastModifiedDateTime"`
}

// MicrosoftGraphTimeOffReasonIconType1 defines model for .
type MicrosoftGraphTimeOffReasonIconType1 = map[string]interface{}

// MicrosoftGraphTimeOffReason_IconType Supported icon types are: none, car, calendar, running, plane, firstAid, doctor, notWorking, clock, juryDuty, globe, cup, phone, weather, umbrella, piggyBank, dog, cake, trafficCone, pin, sunny. Required.
type MicrosoftGraphTimeOffReason_IconType struct {
	union json.RawMessage
}

// MicrosoftGraphTimeOffReasonLastModifiedBy1 defines model for .
type MicrosoftGraphTimeOffReasonLastModifiedBy1 = map[string]interface{}

// MicrosoftGraphTimeOffReason_LastModifiedBy Identity of the person who last modified the entity.
type MicrosoftGraphTimeOffReason_LastModifiedBy struct {
	union json.RawMessage
}

// MicrosoftGraphTimeOffReasonIconType defines model for microsoft.graph.timeOffReasonIconType.
type MicrosoftGraphTimeOffReasonIconType string

// MicrosoftGraphTimeOffRequest defines model for microsoft.graph.timeOffRequest.
type MicrosoftGraphTimeOffRequest struct {
	AssignedTo *MicrosoftGraphTimeOffRequest_AssignedTo `json:"assignedTo,omitempty"`

	// CreatedDateTime The Timestamp type represents date and time information using ISO 8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 is 2014-01-01T00:00:00Z
	CreatedDateTime *time.Time `json:"createdDateTime"`

	// EndDateTime The Timestamp type represents date and time information using ISO 8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 is 2014-01-01T00:00:00Z
	EndDateTime *time.Time `json:"endDateTime"`

	// Id The unique idenfier for an entity. Read-only.
	Id *string `json:"id,omitempty"`

	// LastModifiedBy Identity of the person who last modified the entity.
	LastModifiedBy *MicrosoftGraphTimeOffRequest_LastModifiedBy `json:"lastModifiedBy,omitempty"`

	// LastModifiedDateTime The Timestamp type represents date and time information using ISO 8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 is 2014-01-01T00:00:00Z
	LastModifiedDateTime  *time.Time `json:"lastModifiedDateTime"`
	ManagerActionDateTime *time.Time `json:"managerActionDateTime"`
	ManagerActionMessage  *string    `json:"managerActionMessage"`
	ManagerUserId         *string    `json:"managerUserId"`
	SenderDateTime        *time.Time `json:"senderDateTime"`
	SenderMessage         *string    `json:"senderMessage"`
	SenderUserId          *string    `json:"senderUserId"`

	// StartDateTime The Timestamp type represents date and time information using ISO 8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 is 2014-01-01T00:00:00Z
	StartDateTime *time.Time                          `json:"startDateTime"`
	State         *MicrosoftGraphTimeOffRequest_State `json:"state,omitempty"`

	// TimeOffReasonId The reason for the time off.
	TimeOffReasonId *string `json:"timeOffReasonId"`
}

// MicrosoftGraphTimeOffRequestAssignedTo1 defines model for .
type MicrosoftGraphTimeOffRequestAssignedTo1 = map[string]interface{}

// MicrosoftGraphTimeOffRequest_AssignedTo defines model for MicrosoftGraphTimeOffRequest.AssignedTo.
type MicrosoftGraphTimeOffRequest_AssignedTo struct {
	union json.RawMessage
}

// MicrosoftGraphTimeOffRequestLastModifiedBy1 defines model for .
type MicrosoftGraphTimeOffRequestLastModifiedBy1 = map[string]interface{}

// MicrosoftGraphTimeOffRequest_LastModifiedBy Identity of the person who last modified the entity.
type MicrosoftGraphTimeOffRequest_LastModifiedBy struct {
	union json.RawMessage
}

// MicrosoftGraphTimeOffRequestState1 defines model for .
type MicrosoftGraphTimeOffRequestState1 = map[string]interface{}

// MicrosoftGraphTimeOffRequest_State defines model for MicrosoftGraphTimeOffRequest.State.
type MicrosoftGraphTimeOffRequest_State struct {
	union json.RawMessage
}

// MicrosoftGraphTimeRange defines model for microsoft.graph.timeRange.
type MicrosoftGraphTimeRange struct {
	// EndTime End time for the time range.
	EndTime *string `json:"endTime"`

	// StartTime Start time for the time range.
	StartTime *string `json:"startTime"`
}

// MicrosoftGraphTimeSlot defines model for microsoft.graph.timeSlot.
type MicrosoftGraphTimeSlot struct {
	End   *MicrosoftGraphDateTimeTimeZone `json:"end,omitempty"`
	Start *MicrosoftGraphDateTimeTimeZone `json:"start,omitempty"`
}

// MicrosoftGraphTimeZoneBase defines model for microsoft.graph.timeZoneBase.
type MicrosoftGraphTimeZoneBase struct {
	// Name The name of a time zone. It can be a standard time zone name such as 'Hawaii-Aleutian Standard Time', or 'Customized Time Zone' for a custom time zone.
	Name *string `json:"name"`
}

// MicrosoftGraphTodo defines model for microsoft.graph.todo.
type MicrosoftGraphTodo struct {
	// Id The unique idenfier for an entity. Read-only.
	Id *string `json:"id,omitempty"`

	// Lists The task lists in the users mailbox.
	Lists *[]MicrosoftGraphTodoTaskList `json:"lists,omitempty"`
}

// MicrosoftGraphTodoTask defines model for microsoft.graph.todoTask.
type MicrosoftGraphTodoTask struct {
	AttachmentSessions *[]MicrosoftGraphAttachmentSession `json:"attachmentSessions,omitempty"`

	// Attachments A collection of file attachments for the task.
	Attachments *[]MicrosoftGraphAttachmentBase `json:"attachments,omitempty"`

	// Body The task body that typically contains information about the task.
	Body *MicrosoftGraphTodoTask_Body `json:"body,omitempty"`

	// BodyLastModifiedDateTime The date and time when the task body was last modified. By default, it is in UTC. You can provide a custom time zone in the request header. The property value uses ISO 8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2020 would look like this: '2020-01-01T00:00:00Z'.
	BodyLastModifiedDateTime *time.Time `json:"bodyLastModifiedDateTime,omitempty"`

	// Categories The categories associated with the task. Each category corresponds to the displayName property of an outlookCategory that the user has defined.
	Categories *[]string `json:"categories,omitempty"`

	// ChecklistItems A collection of checklistItems linked to a task.
	ChecklistItems *[]MicrosoftGraphChecklistItem `json:"checklistItems,omitempty"`

	// CompletedDateTime The date and time in the specified time zone that the task was finished.
	CompletedDateTime *MicrosoftGraphTodoTask_CompletedDateTime `json:"completedDateTime,omitempty"`

	// CreatedDateTime The date and time when the task was created. By default, it is in UTC. You can provide a custom time zone in the request header. The property value uses ISO 8601 format. For example, midnight UTC on Jan 1, 2020 would look like this: '2020-01-01T00:00:00Z'.
	CreatedDateTime *time.Time `json:"createdDateTime,omitempty"`

	// DueDateTime The date and time in the specified time zone that the task is to be finished.
	DueDateTime *MicrosoftGraphTodoTask_DueDateTime `json:"dueDateTime,omitempty"`

	// Extensions The collection of open extensions defined for the task. Nullable.
	Extensions *[]MicrosoftGraphExtension `json:"extensions,omitempty"`

	// HasAttachments Indicates whether the task has attachments.
	HasAttachments *bool `json:"hasAttachments"`

	// Id The unique idenfier for an entity. Read-only.
	Id         *string                   `json:"id,omitempty"`
	Importance *MicrosoftGraphImportance `json:"importance,omitempty"`

	// IsReminderOn Set to true if an alert is set to remind the user of the task.
	IsReminderOn *bool `json:"isReminderOn,omitempty"`

	// LastModifiedDateTime The date and time when the task was last modified. By default, it is in UTC. You can provide a custom time zone in the request header. The property value uses ISO 8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2020 would look like this: '2020-01-01T00:00:00Z'.
	LastModifiedDateTime *time.Time `json:"lastModifiedDateTime,omitempty"`

	// LinkedResources A collection of resources linked to the task.
	LinkedResources *[]MicrosoftGraphLinkedResource `json:"linkedResources,omitempty"`

	// Recurrence The recurrence pattern for the task.
	Recurrence *MicrosoftGraphTodoTask_Recurrence `json:"recurrence,omitempty"`

	// ReminderDateTime The date and time in the specified time zone for a reminder alert of the task to occur.
	ReminderDateTime *MicrosoftGraphTodoTask_ReminderDateTime `json:"reminderDateTime,omitempty"`

	// StartDateTime The date and time in the specified time zone at which the task is scheduled to start.
	StartDateTime *MicrosoftGraphTodoTask_StartDateTime `json:"startDateTime,omitempty"`
	Status        *MicrosoftGraphTaskStatus             `json:"status,omitempty"`

	// Title A brief description of the task.
	Title *string `json:"title"`
}

// MicrosoftGraphTodoTaskBody1 defines model for .
type MicrosoftGraphTodoTaskBody1 = map[string]interface{}

// MicrosoftGraphTodoTask_Body The task body that typically contains information about the task.
type MicrosoftGraphTodoTask_Body struct {
	union json.RawMessage
}

// MicrosoftGraphTodoTaskCompletedDateTime1 defines model for .
type MicrosoftGraphTodoTaskCompletedDateTime1 = map[string]interface{}

// MicrosoftGraphTodoTask_CompletedDateTime The date and time in the specified time zone that the task was finished.
type MicrosoftGraphTodoTask_CompletedDateTime struct {
	union json.RawMessage
}

// MicrosoftGraphTodoTaskDueDateTime1 defines model for .
type MicrosoftGraphTodoTaskDueDateTime1 = map[string]interface{}

// MicrosoftGraphTodoTask_DueDateTime The date and time in the specified time zone that the task is to be finished.
type MicrosoftGraphTodoTask_DueDateTime struct {
	union json.RawMessage
}

// MicrosoftGraphTodoTaskRecurrence1 defines model for .
type MicrosoftGraphTodoTaskRecurrence1 = map[string]interface{}

// MicrosoftGraphTodoTask_Recurrence The recurrence pattern for the task.
type MicrosoftGraphTodoTask_Recurrence struct {
	union json.RawMessage
}

// MicrosoftGraphTodoTaskReminderDateTime1 defines model for .
type MicrosoftGraphTodoTaskReminderDateTime1 = map[string]interface{}

// MicrosoftGraphTodoTask_ReminderDateTime The date and time in the specified time zone for a reminder alert of the task to occur.
type MicrosoftGraphTodoTask_ReminderDateTime struct {
	union json.RawMessage
}

// MicrosoftGraphTodoTaskStartDateTime1 defines model for .
type MicrosoftGraphTodoTaskStartDateTime1 = map[string]interface{}

// MicrosoftGraphTodoTask_StartDateTime The date and time in the specified time zone at which the task is scheduled to start.
type MicrosoftGraphTodoTask_StartDateTime struct {
	union json.RawMessage
}

// MicrosoftGraphTodoTaskList defines model for microsoft.graph.todoTaskList.
type MicrosoftGraphTodoTaskList struct {
	// DisplayName The name of the task list.
	DisplayName *string `json:"displayName"`

	// Extensions The collection of open extensions defined for the task list. Nullable.
	Extensions *[]MicrosoftGraphExtension `json:"extensions,omitempty"`

	// Id The unique idenfier for an entity. Read-only.
	Id *string `json:"id,omitempty"`

	// IsOwner True if the user is owner of the given task list.
	IsOwner *bool `json:"isOwner,omitempty"`

	// IsShared True if the task list is shared with other users
	IsShared *bool `json:"isShared,omitempty"`

	// Tasks The tasks in this task list. Read-only. Nullable.
	Tasks             *[]MicrosoftGraphTodoTask        `json:"tasks,omitempty"`
	WellknownListName *MicrosoftGraphWellknownListName `json:"wellknownListName,omitempty"`
}

// MicrosoftGraphTrending defines model for microsoft.graph.trending.
type MicrosoftGraphTrending struct {
	// Id The unique idenfier for an entity. Read-only.
	Id                   *string    `json:"id,omitempty"`
	LastModifiedDateTime *time.Time `json:"lastModifiedDateTime"`

	// Resource Used for navigating to the trending document.
	Resource *MicrosoftGraphTrending_Resource `json:"resource,omitempty"`

	// ResourceReference Reference properties of the trending document, such as the url and type of the document.
	ResourceReference *MicrosoftGraphTrending_ResourceReference `json:"resourceReference,omitempty"`

	// ResourceVisualization Properties that you can use to visualize the document in your experience.
	ResourceVisualization *MicrosoftGraphTrending_ResourceVisualization `json:"resourceVisualization,omitempty"`

	// Weight Value indicating how much the document is currently trending. The larger the number, the more the document is currently trending around the user (the more relevant it is). Returned documents are sorted by this value.
	Weight *MicrosoftGraphTrending_Weight `json:"weight,omitempty"`
}

// MicrosoftGraphTrendingResource1 defines model for .
type MicrosoftGraphTrendingResource1 = map[string]interface{}

// MicrosoftGraphTrending_Resource Used for navigating to the trending document.
type MicrosoftGraphTrending_Resource struct {
	union json.RawMessage
}

// MicrosoftGraphTrendingResourceReference1 defines model for .
type MicrosoftGraphTrendingResourceReference1 = map[string]interface{}

// MicrosoftGraphTrending_ResourceReference Reference properties of the trending document, such as the url and type of the document.
type MicrosoftGraphTrending_ResourceReference struct {
	union json.RawMessage
}

// MicrosoftGraphTrendingResourceVisualization1 defines model for .
type MicrosoftGraphTrendingResourceVisualization1 = map[string]interface{}

// MicrosoftGraphTrending_ResourceVisualization Properties that you can use to visualize the document in your experience.
type MicrosoftGraphTrending_ResourceVisualization struct {
	union json.RawMessage
}

// MicrosoftGraphTrendingWeight0 defines model for .
type MicrosoftGraphTrendingWeight0 = float64

// MicrosoftGraphTrendingWeight1 defines model for .
type MicrosoftGraphTrendingWeight1 = string

// MicrosoftGraphTrending_Weight Value indicating how much the document is currently trending. The larger the number, the more the document is currently trending around the user (the more relevant it is). Returned documents are sorted by this value.
type MicrosoftGraphTrending_Weight struct {
	union json.RawMessage
}

// MicrosoftGraphUploadSession defines model for microsoft.graph.uploadSession.
type MicrosoftGraphUploadSession struct {
	// ExpirationDateTime The date and time in UTC that the upload session will expire. The complete file must be uploaded before this expiration time is reached.
	ExpirationDateTime *time.Time `json:"expirationDateTime"`

	// NextExpectedRanges A collection of byte ranges that the server is missing for the file. These ranges are zero indexed and of the format 'start-end' (e.g. '0-26' to indicate the first 27 bytes of the file). When uploading files as Outlook attachments, instead of a collection of ranges, this property always indicates a single value '{start}', the location in the file where the next upload should begin.
	NextExpectedRanges *[]string `json:"nextExpectedRanges,omitempty"`

	// UploadUrl The URL endpoint that accepts PUT requests for byte ranges of the file.
	UploadUrl *string `json:"uploadUrl"`
}

// MicrosoftGraphUsageDetails defines model for microsoft.graph.usageDetails.
type MicrosoftGraphUsageDetails struct {
	// LastAccessedDateTime The date and time the resource was last accessed by the user. The timestamp represents date and time information using ISO 8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 is 2014-01-01T00:00:00Z. Read-only.
	LastAccessedDateTime *time.Time `json:"lastAccessedDateTime"`

	// LastModifiedDateTime The date and time the resource was last modified by the user. The timestamp represents date and time information using ISO 8601 format and is always in UTC time.For example, midnight UTC on Jan 1, 2014 is 2014-01-01T00:00:00Z. Read-only.
	LastModifiedDateTime *time.Time `json:"lastModifiedDateTime"`
}

// MicrosoftGraphUsedInsight defines model for microsoft.graph.usedInsight.
type MicrosoftGraphUsedInsight struct {
	// Id The unique idenfier for an entity. Read-only.
	Id *string `json:"id,omitempty"`

	// LastUsed Information about when the item was last viewed or modified by the user. Read only.
	LastUsed *MicrosoftGraphUsedInsight_LastUsed `json:"lastUsed,omitempty"`

	// Resource Used for navigating to the item that was used. For file attachments, the type is fileAttachment. For linked attachments, the type is driveItem.
	Resource *MicrosoftGraphUsedInsight_Resource `json:"resource,omitempty"`

	// ResourceReference Reference properties of the used document, such as the url and type of the document. Read-only
	ResourceReference *MicrosoftGraphUsedInsight_ResourceReference `json:"resourceReference,omitempty"`

	// ResourceVisualization Properties that you can use to visualize the document in your experience. Read-only
	ResourceVisualization *MicrosoftGraphUsedInsight_ResourceVisualization `json:"resourceVisualization,omitempty"`
}

// MicrosoftGraphUsedInsightLastUsed1 defines model for .
type MicrosoftGraphUsedInsightLastUsed1 = map[string]interface{}

// MicrosoftGraphUsedInsight_LastUsed Information about when the item was last viewed or modified by the user. Read only.
type MicrosoftGraphUsedInsight_LastUsed struct {
	union json.RawMessage
}

// MicrosoftGraphUsedInsightResource1 defines model for .
type MicrosoftGraphUsedInsightResource1 = map[string]interface{}

// MicrosoftGraphUsedInsight_Resource Used for navigating to the item that was used. For file attachments, the type is fileAttachment. For linked attachments, the type is driveItem.
type MicrosoftGraphUsedInsight_Resource struct {
	union json.RawMessage
}

// MicrosoftGraphUsedInsightResourceReference1 defines model for .
type MicrosoftGraphUsedInsightResourceReference1 = map[string]interface{}

// MicrosoftGraphUsedInsight_ResourceReference Reference properties of the used document, such as the url and type of the document. Read-only
type MicrosoftGraphUsedInsight_ResourceReference struct {
	union json.RawMessage
}

// MicrosoftGraphUsedInsightResourceVisualization1 defines model for .
type MicrosoftGraphUsedInsightResourceVisualization1 = map[string]interface{}

// MicrosoftGraphUsedInsight_ResourceVisualization Properties that you can use to visualize the document in your experience. Read-only
type MicrosoftGraphUsedInsight_ResourceVisualization struct {
	union json.RawMessage
}

// MicrosoftGraphUser defines model for microsoft.graph.user.
type MicrosoftGraphUser struct {
	// AboutMe A freeform text entry field for the user to describe themselves. Returned only on $select.
	AboutMe *string `json:"aboutMe"`

	// AccountEnabled true if the account is enabled; otherwise, false. This property is required when a user is created. Returned only on $select. Supports $filter (eq, ne, not, and in).
	AccountEnabled *bool `json:"accountEnabled"`

	// Activities The user's activities across devices. Read-only. Nullable.
	Activities *[]MicrosoftGraphUserActivity `json:"activities,omitempty"`

	// AgeGroup Sets the age group of the user. Allowed values: null, Minor, NotAdult and Adult. Refer to the legal age group property definitions for further information. Returned only on $select. Supports $filter (eq, ne, not, and in).
	AgeGroup *string `json:"ageGroup"`

	// AgreementAcceptances The user's terms of use acceptance statuses. Read-only. Nullable.
	AgreementAcceptances *[]MicrosoftGraphAgreementAcceptance `json:"agreementAcceptances,omitempty"`

	// AppRoleAssignments Represents the app roles a user has been granted for an application. Supports $expand.
	AppRoleAssignments *[]MicrosoftGraphAppRoleAssignment `json:"appRoleAssignments,omitempty"`

	// AssignedLicenses The licenses that are assigned to the user, including inherited (group-based) licenses. This property doesn't differentiate directly-assigned and inherited licenses. Use the licenseAssignmentStates property to identify the directly-assigned and inherited licenses.  Not nullable. Returned only on $select. Supports $filter (eq, not, /$count eq 0, /$count ne 0).
	AssignedLicenses *[]MicrosoftGraphAssignedLicense `json:"assignedLicenses,omitempty"`

	// AssignedPlans The plans that are assigned to the user. Read-only. Not nullable. Returned only on $select. Supports $filter (eq and not).
	AssignedPlans *[]MicrosoftGraphAssignedPlan `json:"assignedPlans,omitempty"`

	// Authentication The authentication methods that are supported for the user.
	Authentication    *MicrosoftGraphUser_Authentication    `json:"authentication,omitempty"`
	AuthorizationInfo *MicrosoftGraphUser_AuthorizationInfo `json:"authorizationInfo,omitempty"`

	// Birthday The birthday of the user. The Timestamp type represents date and time information using ISO 8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 is 2014-01-01T00:00:00Z. Returned only on $select.
	Birthday *time.Time `json:"birthday,omitempty"`

	// BusinessPhones The telephone numbers for the user. NOTE: Although this is a string collection, only one number can be set for this property. Read-only for users synced from on-premises directory. Returned by default. Supports $filter (eq, not, ge, le, startsWith).
	BusinessPhones *[]string `json:"businessPhones,omitempty"`

	// Calendar The user's primary calendar. Read-only.
	Calendar *MicrosoftGraphUser_Calendar `json:"calendar,omitempty"`

	// CalendarGroups The user's calendar groups. Read-only. Nullable.
	CalendarGroups *[]MicrosoftGraphCalendarGroup `json:"calendarGroups,omitempty"`

	// CalendarView The calendar view for the calendar. Read-only. Nullable.
	CalendarView *[]MicrosoftGraphEvent `json:"calendarView,omitempty"`

	// Calendars The user's calendars. Read-only. Nullable.
	Calendars *[]MicrosoftGraphCalendar `json:"calendars,omitempty"`
	Chats     *[]MicrosoftGraphChat     `json:"chats,omitempty"`

	// City The city in which the user is located. Maximum length is 128 characters. Returned only on $select. Supports $filter (eq, ne, not, ge, le, in, startsWith, and eq on null values).
	City *string `json:"city"`

	// CompanyName The company name which the user is associated. This property can be useful for describing the company that an external user comes from. The maximum length is 64 characters.Returned only on $select. Supports $filter (eq, ne, not, ge, le, in, startsWith, and eq on null values).
	CompanyName *string `json:"companyName"`

	// ConsentProvidedForMinor Sets whether consent has been obtained for minors. Allowed values: null, Granted, Denied and NotRequired. Refer to the legal age group property definitions for further information. Returned only on $select. Supports $filter (eq, ne, not, and in).
	ConsentProvidedForMinor *string `json:"consentProvidedForMinor"`

	// ContactFolders The user's contacts folders. Read-only. Nullable.
	ContactFolders *[]MicrosoftGraphContactFolder `json:"contactFolders,omitempty"`

	// Contacts The user's contacts. Read-only. Nullable.
	Contacts *[]MicrosoftGraphContact `json:"contacts,omitempty"`

	// Country The country/region in which the user is located; for example, US or UK. Maximum length is 128 characters. Returned only on $select. Supports $filter (eq, ne, not, ge, le, in, startsWith, and eq on null values).
	Country *string `json:"country"`

	// CreatedDateTime The date and time the user was created, in ISO 8601 format and in UTC time. The value cannot be modified and is automatically populated when the entity is created. Nullable. For on-premises users, the value represents when they were first created in Azure AD. Property is null for some users created before June 2018 and on-premises users that were synced to Azure AD before June 2018. Read-only. Returned only on $select. Supports $filter (eq, ne, not , ge, le, in).
	CreatedDateTime *time.Time `json:"createdDateTime"`

	// CreatedObjects Directory objects that were created by the user. Read-only. Nullable.
	CreatedObjects *[]MicrosoftGraphDirectoryObject `json:"createdObjects,omitempty"`

	// CreationType Indicates whether the user account was created through one of the following methods:  As a regular school or work account (null). As an external account (Invitation). As a local account for an Azure Active Directory B2C tenant (LocalAccount). Through self-service sign-up by an internal user using email verification (EmailVerified). Through self-service sign-up by an external user signing up through a link that is part of a user flow (SelfServiceSignUp). Read-only.Returned only on $select. Supports $filter (eq, ne, not, in).
	CreationType             *string                                      `json:"creationType"`
	CustomSecurityAttributes *MicrosoftGraphUser_CustomSecurityAttributes `json:"customSecurityAttributes,omitempty"`

	// DeletedDateTime Date and time when this object was deleted. Always null when the object hasn't been deleted.
	DeletedDateTime *time.Time `json:"deletedDateTime"`

	// Department The name for the department in which the user works. Maximum length is 64 characters. Returned only on $select. Supports $filter (eq, ne, not , ge, le, in, and eq on null values).
	Department *string `json:"department"`

	// DeviceEnrollmentLimit The limit on the maximum number of devices that the user is permitted to enroll. Allowed values are 5 or 1000.
	DeviceEnrollmentLimit *int32 `json:"deviceEnrollmentLimit,omitempty"`

	// DeviceManagementTroubleshootingEvents The list of troubleshooting events for this user.
	DeviceManagementTroubleshootingEvents *[]MicrosoftGraphDeviceManagementTroubleshootingEvent `json:"deviceManagementTroubleshootingEvents,omitempty"`

	// DirectReports The users and contacts that report to the user. (The users and contacts that have their manager property set to this user.) Read-only. Nullable. Supports $expand.
	DirectReports *[]MicrosoftGraphDirectoryObject `json:"directReports,omitempty"`

	// DisplayName The name displayed in the address book for the user. This is usually the combination of the user's first name, middle initial and last name. This property is required when a user is created and it cannot be cleared during updates. Maximum length is 256 characters. Returned by default. Supports $filter (eq, ne, not , ge, le, in, startsWith, and eq on null values), $orderBy, and $search.
	DisplayName *string `json:"displayName"`

	// Drive The user's OneDrive. Read-only.
	Drive *MicrosoftGraphUser_Drive `json:"drive,omitempty"`

	// Drives A collection of drives available for this user. Read-only.
	Drives             *[]MicrosoftGraphDrive                 `json:"drives,omitempty"`
	EmployeeExperience *MicrosoftGraphUser_EmployeeExperience `json:"employeeExperience,omitempty"`

	// EmployeeHireDate The date and time when the user was hired or will start work in case of a future hire. Returned only on $select. Supports $filter (eq, ne, not , ge, le, in).
	EmployeeHireDate *time.Time `json:"employeeHireDate"`

	// EmployeeId The employee identifier assigned to the user by the organization. The maximum length is 16 characters. Returned only on $select. Supports $filter (eq, ne, not , ge, le, in, startsWith, and eq on null values).
	EmployeeId *string `json:"employeeId"`

	// EmployeeLeaveDateTime The date and time when the user left or will leave the organization. To read this property, the calling app must be assigned the User-LifeCycleInfo.Read.All permission. To write this property, the calling app must be assigned the User.Read.All and User-LifeCycleInfo.ReadWrite.All permissions. To read this property in delegated scenarios, the admin needs one of the following Azure AD roles: Lifecycle Workflows Administrator, Global Reader, or Global Administrator. To write this property in delegated scenarios, the admin needs the Global Administrator role. Supports $filter (eq, ne, not , ge, le, in). For more information, see Configure the employeeLeaveDateTime property for a user.
	EmployeeLeaveDateTime *time.Time `json:"employeeLeaveDateTime"`

	// EmployeeOrgData Represents organization data (e.g. division and costCenter) associated with a user. Returned only on $select. Supports $filter (eq, ne, not , ge, le, in).
	EmployeeOrgData *MicrosoftGraphUser_EmployeeOrgData `json:"employeeOrgData,omitempty"`

	// EmployeeType Captures enterprise worker type. For example, Employee, Contractor, Consultant, or Vendor. Returned only on $select. Supports $filter (eq, ne, not , ge, le, in, startsWith).
	EmployeeType *string `json:"employeeType"`

	// Events The user's events. Default is to show Events under the Default Calendar. Read-only. Nullable.
	Events *[]MicrosoftGraphEvent `json:"events,omitempty"`

	// Extensions The collection of open extensions defined for the user. Read-only. Supports $expand. Nullable.
	Extensions *[]MicrosoftGraphExtension `json:"extensions,omitempty"`

	// ExternalUserState For an external user invited to the tenant using the invitation API, this property represents the invited user's invitation status. For invited users, the state can be PendingAcceptance or Accepted, or null for all other users. Returned only on $select. Supports $filter (eq, ne, not , in).
	ExternalUserState *string `json:"externalUserState"`

	// ExternalUserStateChangeDateTime Shows the timestamp for the latest change to the externalUserState property. Returned only on $select. Supports $filter (eq, ne, not , in).
	ExternalUserStateChangeDateTime *time.Time `json:"externalUserStateChangeDateTime"`

	// FaxNumber The fax number of the user. Returned only on $select. Supports $filter (eq, ne, not , ge, le, in, startsWith, and eq on null values).
	FaxNumber     *string               `json:"faxNumber"`
	FollowedSites *[]MicrosoftGraphSite `json:"followedSites,omitempty"`

	// GivenName The given name (first name) of the user. Maximum length is 64 characters. Returned by default. Supports $filter (eq, ne, not , ge, le, in, startsWith, and eq on null values).
	GivenName *string `json:"givenName"`

	// HireDate The hire date of the user. The Timestamp type represents date and time information using ISO 8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 is 2014-01-01T00:00:00Z. Returned only on $select.  Note: This property is specific to SharePoint Online. We recommend using the native employeeHireDate property to set and update hire date values using Microsoft Graph APIs.
	HireDate *time.Time `json:"hireDate,omitempty"`

	// Id The unique idenfier for an entity. Read-only.
	Id *string `json:"id,omitempty"`

	// Identities Represents the identities that can be used to sign in to this user account. An identity can be provided by Microsoft (also known as a local account), by organizations, or by social identity providers such as Facebook, Google, and Microsoft, and tied to a user account. May contain multiple items with the same signInType value. Returned only on $select. Supports $filter (eq) including on null values, only where the signInType is not userPrincipalName.
	Identities *[]MicrosoftGraphUser_Identities_Item `json:"identities,omitempty"`

	// ImAddresses The instant message voice over IP (VOIP) session initiation protocol (SIP) addresses for the user. Read-only. Returned only on $select. Supports $filter (eq, not, ge, le, startsWith).
	ImAddresses *[]string `json:"imAddresses,omitempty"`

	// InferenceClassification Relevance classification of the user's messages based on explicit designations which override inferred relevance or importance.
	InferenceClassification *MicrosoftGraphUser_InferenceClassification `json:"inferenceClassification,omitempty"`
	Insights                *MicrosoftGraphUser_Insights                `json:"insights,omitempty"`

	// Interests A list for the user to describe their interests. Returned only on $select.
	Interests *[]string `json:"interests,omitempty"`

	// IsResourceAccount Do not use – reserved for future use.
	IsResourceAccount *bool `json:"isResourceAccount"`

	// JobTitle The user's job title. Maximum length is 128 characters. Returned by default. Supports $filter (eq, ne, not , ge, le, in, startsWith, and eq on null values).
	JobTitle    *string               `json:"jobTitle"`
	JoinedTeams *[]MicrosoftGraphTeam `json:"joinedTeams,omitempty"`

	// LastPasswordChangeDateTime The time when this Azure AD user last changed their password or when their password was created, whichever date the latest action was performed. The date and time information uses ISO 8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 is 2014-01-01T00:00:00Z. Returned only on $select.
	LastPasswordChangeDateTime *time.Time `json:"lastPasswordChangeDateTime"`

	// LegalAgeGroupClassification Used by enterprise applications to determine the legal age group of the user. This property is read-only and calculated based on ageGroup and consentProvidedForMinor properties. Allowed values: null, MinorWithOutParentalConsent, MinorWithParentalConsent, MinorNoParentalConsentRequired, NotAdult and Adult. Refer to the legal age group property definitions for further information. Returned only on $select.
	LegalAgeGroupClassification *string `json:"legalAgeGroupClassification"`

	// LicenseAssignmentStates State of license assignments for this user. Also indicates licenses that are directly-assigned and those that the user has inherited through group memberships. Read-only. Returned only on $select.
	LicenseAssignmentStates *[]MicrosoftGraphUser_LicenseAssignmentStates_Item `json:"licenseAssignmentStates,omitempty"`

	// LicenseDetails A collection of this user's license details. Read-only.
	LicenseDetails *[]MicrosoftGraphLicenseDetails `json:"licenseDetails,omitempty"`

	// Mail The SMTP address for the user, for example, jeff@contoso.onmicrosoft.com. Changes to this property will also update the user's proxyAddresses collection to include the value as an SMTP address. This property cannot contain accent characters.  NOTE: We do not recommend updating this property for Azure AD B2C user profiles. Use the otherMails property instead. Returned by default. Supports $filter (eq, ne, not, ge, le, in, startsWith, endsWith, and eq on null values).
	Mail *string `json:"mail"`

	// MailFolders The user's mail folders. Read-only. Nullable.
	MailFolders *[]MicrosoftGraphMailFolder `json:"mailFolders,omitempty"`

	// MailNickname The mail alias for the user. This property must be specified when a user is created. Maximum length is 64 characters. Returned only on $select. Supports $filter (eq, ne, not, ge, le, in, startsWith, and eq on null values).
	MailNickname *string `json:"mailNickname"`

	// MailboxSettings Settings for the primary mailbox of the signed-in user. You can get or update settings for sending automatic replies to incoming messages, locale and time zone. Returned only on $select.
	MailboxSettings *MicrosoftGraphUser_MailboxSettings `json:"mailboxSettings,omitempty"`

	// ManagedAppRegistrations Zero or more managed app registrations that belong to the user.
	ManagedAppRegistrations *[]MicrosoftGraphManagedAppRegistration `json:"managedAppRegistrations,omitempty"`

	// ManagedDevices The managed devices associated with the user.
	ManagedDevices *[]MicrosoftGraphManagedDevice `json:"managedDevices,omitempty"`

	// Manager The user or contact that is this user's manager. Read-only. (HTTP Methods: GET, PUT, DELETE.). Supports $expand.
	Manager *MicrosoftGraphUser_Manager `json:"manager,omitempty"`

	// MemberOf The groups and directory roles that the user is a member of. Read-only. Nullable. Supports $expand.
	MemberOf *[]MicrosoftGraphDirectoryObject `json:"memberOf,omitempty"`

	// Messages The messages in a mailbox or folder. Read-only. Nullable.
	Messages *[]MicrosoftGraphMessage `json:"messages,omitempty"`

	// MobilePhone The primary cellular telephone number for the user. Read-only for users synced from on-premises directory. Maximum length is 64 characters. Returned by default. Supports $filter (eq, ne, not, ge, le, in, startsWith, and eq on null values) and $search.
	MobilePhone *string `json:"mobilePhone"`

	// MySite The URL for the user's personal site. Returned only on $select.
	MySite                 *string                                `json:"mySite"`
	Oauth2PermissionGrants *[]MicrosoftGraphOAuth2PermissionGrant `json:"oauth2PermissionGrants,omitempty"`

	// OfficeLocation The office location in the user's place of business. Returned by default. Supports $filter (eq, ne, not, ge, le, in, startsWith, and eq on null values).
	OfficeLocation *string `json:"officeLocation"`

	// OnPremisesDistinguishedName Contains the on-premises Active Directory distinguished name or DN. The property is only populated for customers who are synchronizing their on-premises directory to Azure Active Directory via Azure AD Connect. Read-only. Returned only on $select.
	OnPremisesDistinguishedName *string `json:"onPremisesDistinguishedName"`

	// OnPremisesDomainName Contains the on-premises domainFQDN, also called dnsDomainName synchronized from the on-premises directory. The property is only populated for customers who are synchronizing their on-premises directory to Azure Active Directory via Azure AD Connect. Read-only. Returned only on $select.
	OnPremisesDomainName *string `json:"onPremisesDomainName"`

	// OnPremisesExtensionAttributes Contains extensionAttributes1-15 for the user. These extension attributes are also known as Exchange custom attributes 1-15. For an onPremisesSyncEnabled user, the source of authority for this set of properties is the on-premises and is read-only. For a cloud-only user (where onPremisesSyncEnabled is false), these properties can be set during creation or update of a user object.  For a cloud-only user previously synced from on-premises Active Directory, these properties are read-only in Microsoft Graph but can be fully managed through the Exchange Admin Center or the Exchange Online V2 module in PowerShell. Returned only on $select. Supports $filter (eq, ne, not, in).
	OnPremisesExtensionAttributes *MicrosoftGraphUser_OnPremisesExtensionAttributes `json:"onPremisesExtensionAttributes,omitempty"`

	// OnPremisesImmutableId This property is used to associate an on-premises Active Directory user account to their Azure AD user object. This property must be specified when creating a new user account in the Graph if you are using a federated domain for the user's userPrincipalName (UPN) property. NOTE: The $ and _ characters cannot be used when specifying this property. Returned only on $select. Supports $filter (eq, ne, not, ge, le, in)..
	OnPremisesImmutableId *string `json:"onPremisesImmutableId"`

	// OnPremisesLastSyncDateTime Indicates the last time at which the object was synced with the on-premises directory; for example: 2013-02-16T03:04:54Z. The Timestamp type represents date and time information using ISO 8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 is 2014-01-01T00:00:00Z. Read-only. Returned only on $select. Supports $filter (eq, ne, not, ge, le, in).
	OnPremisesLastSyncDateTime *time.Time `json:"onPremisesLastSyncDateTime"`

	// OnPremisesProvisioningErrors Errors when using Microsoft synchronization product during provisioning. Returned only on $select. Supports $filter (eq, not, ge, le).
	OnPremisesProvisioningErrors *[]MicrosoftGraphUser_OnPremisesProvisioningErrors_Item `json:"onPremisesProvisioningErrors,omitempty"`

	// OnPremisesSamAccountName Contains the on-premises samAccountName synchronized from the on-premises directory. The property is only populated for customers who are synchronizing their on-premises directory to Azure Active Directory via Azure AD Connect. Read-only. Returned only on $select. Supports $filter (eq, ne, not, ge, le, in, startsWith).
	OnPremisesSamAccountName *string `json:"onPremisesSamAccountName"`

	// OnPremisesSecurityIdentifier Contains the on-premises security identifier (SID) for the user that was synchronized from on-premises to the cloud. Read-only. Returned only on $select.  Supports $filter (eq including on null values).
	OnPremisesSecurityIdentifier *string `json:"onPremisesSecurityIdentifier"`

	// OnPremisesSyncEnabled true if this user object is currently being synced from an on-premises Active Directory (AD); otherwise the user isn't being synced and can be managed in Azure Active Directory (Azure AD). Read-only. Returned only on $select. Supports $filter (eq, ne, not, in, and eq on null values).
	OnPremisesSyncEnabled *bool `json:"onPremisesSyncEnabled"`

	// OnPremisesUserPrincipalName Contains the on-premises userPrincipalName synchronized from the on-premises directory. The property is only populated for customers who are synchronizing their on-premises directory to Azure Active Directory via Azure AD Connect. Read-only. Returned only on $select. Supports $filter (eq, ne, not, ge, le, in, startsWith).
	OnPremisesUserPrincipalName *string                     `json:"onPremisesUserPrincipalName"`
	Onenote                     *MicrosoftGraphUser_Onenote `json:"onenote,omitempty"`

	// OnlineMeetings Information about a meeting, including the URL used to join a meeting, the attendees' list, and the description.
	OnlineMeetings *[]MicrosoftGraphOnlineMeeting `json:"onlineMeetings,omitempty"`

	// OtherMails A list of additional email addresses for the user; for example: ['bob@contoso.com', 'Robert@fabrikam.com']. NOTE: This property cannot contain accent characters. Returned only on $select. Supports $filter (eq, not, ge, le, in, startsWith, endsWith, /$count eq 0, /$count ne 0).
	OtherMails *[]string                   `json:"otherMails,omitempty"`
	Outlook    *MicrosoftGraphUser_Outlook `json:"outlook,omitempty"`

	// OwnedDevices Devices that are owned by the user. Read-only. Nullable. Supports $expand and $filter (/$count eq 0, /$count ne 0, /$count eq 1, /$count ne 1).
	OwnedDevices *[]MicrosoftGraphDirectoryObject `json:"ownedDevices,omitempty"`

	// OwnedObjects Directory objects that are owned by the user. Read-only. Nullable. Supports $expand.
	OwnedObjects *[]MicrosoftGraphDirectoryObject `json:"ownedObjects,omitempty"`

	// PasswordPolicies Specifies password policies for the user. This value is an enumeration with one possible value being DisableStrongPassword, which allows weaker passwords than the default policy to be specified. DisablePasswordExpiration can also be specified. The two may be specified together; for example: DisablePasswordExpiration, DisableStrongPassword. Returned only on $select. For more information on the default password policies, see Azure AD pasword policies. Supports $filter (ne, not, and eq on null values).
	PasswordPolicies *string `json:"passwordPolicies"`

	// PasswordProfile Specifies the password profile for the user. The profile contains the user's password. This property is required when a user is created. The password in the profile must satisfy minimum requirements as specified by the passwordPolicies property. By default, a strong password is required. Returned only on $select. Supports $filter (eq, ne, not, in, and eq on null values).
	PasswordProfile *MicrosoftGraphUser_PasswordProfile `json:"passwordProfile,omitempty"`

	// PastProjects A list for the user to enumerate their past projects. Returned only on $select.
	PastProjects *[]string `json:"pastProjects,omitempty"`

	// People People that are relevant to the user. Read-only. Nullable.
	People *[]MicrosoftGraphPerson `json:"people,omitempty"`

	// Photo The user's profile photo. Read-only.
	Photo  *MicrosoftGraphUser_Photo     `json:"photo,omitempty"`
	Photos *[]MicrosoftGraphProfilePhoto `json:"photos,omitempty"`

	// Planner Entry-point to the Planner resource that might exist for a user. Read-only.
	Planner *MicrosoftGraphUser_Planner `json:"planner,omitempty"`

	// PostalCode The postal code for the user's postal address. The postal code is specific to the user's country/region. In the United States of America, this attribute contains the ZIP code. Maximum length is 40 characters. Returned only on $select. Supports $filter (eq, ne, not, ge, le, in, startsWith, and eq on null values).
	PostalCode *string `json:"postalCode"`

	// PreferredDataLocation The preferred data location for the user. For more information, see OneDrive Online Multi-Geo.
	PreferredDataLocation *string `json:"preferredDataLocation"`

	// PreferredLanguage The preferred language for the user. Should follow ISO 639-1 Code; for example en-US. Returned by default. Supports $filter (eq, ne, not, ge, le, in, startsWith, and eq on null values)
	PreferredLanguage *string `json:"preferredLanguage"`

	// PreferredName The preferred name for the user. Not Supported. This attribute returns an empty string.Returned only on $select.
	PreferredName *string                      `json:"preferredName"`
	Presence      *MicrosoftGraphUser_Presence `json:"presence,omitempty"`
	Print         *MicrosoftGraphUser_Print    `json:"print,omitempty"`

	// ProvisionedPlans The plans that are provisioned for the user. Read-only. Not nullable. Returned only on $select. Supports $filter (eq, not, ge, le).
	ProvisionedPlans *[]MicrosoftGraphProvisionedPlan `json:"provisionedPlans,omitempty"`

	// ProxyAddresses For example: ['SMTP: bob@contoso.com', 'smtp: bob@sales.contoso.com']. Changes to the mail property will also update this collection to include the value as an SMTP address. For more information, see mail and proxyAddresses properties. The proxy address prefixed with SMTP (capitalized) is the primary proxy address while those prefixed with smtp are the secondary proxy addresses. For Azure AD B2C accounts, this property has a limit of ten unique addresses. Read-only in Microsoft Graph; you can update this property only through the Microsoft 365 admin center. Not nullable. Returned only on $select. Supports $filter (eq, not, ge, le, startsWith, endsWith, /$count eq 0, /$count ne 0).
	ProxyAddresses *[]string `json:"proxyAddresses,omitempty"`

	// RegisteredDevices Devices that are registered for the user. Read-only. Nullable. Supports $expand.
	RegisteredDevices *[]MicrosoftGraphDirectoryObject `json:"registeredDevices,omitempty"`

	// Responsibilities A list for the user to enumerate their responsibilities. Returned only on $select.
	Responsibilities *[]string `json:"responsibilities,omitempty"`

	// Schools A list for the user to enumerate the schools they have attended. Returned only on $select.
	Schools            *[]string                             `json:"schools,omitempty"`
	ScopedRoleMemberOf *[]MicrosoftGraphScopedRoleMembership `json:"scopedRoleMemberOf,omitempty"`

	// SecurityIdentifier Security identifier (SID) of the user, used in Windows scenarios. Read-only. Returned by default. Supports $select and $filter (eq, not, ge, le, startsWith).
	SecurityIdentifier *string                      `json:"securityIdentifier"`
	Settings           *MicrosoftGraphUser_Settings `json:"settings,omitempty"`

	// ShowInAddressList Do not use in Microsoft Graph. Manage this property through the Microsoft 365 admin center instead. Represents whether the user should be included in the Outlook global address list. See Known issue.
	ShowInAddressList *bool `json:"showInAddressList"`

	// SignInActivity Get the last signed-in date and request ID of the sign-in for a given user. Read-only.Returned only on $select. Supports $filter (eq, ne, not, ge, le) but not with any other filterable properties. Note: Details for this property require an Azure AD Premium P1/P2 license and the AuditLog.Read.All permission.This property is not returned for a user who has never signed in or last signed in before April 2020.
	SignInActivity *MicrosoftGraphUser_SignInActivity `json:"signInActivity,omitempty"`

	// SignInSessionsValidFromDateTime Any refresh tokens or sessions tokens (session cookies) issued before this time are invalid, and applications will get an error when using an invalid refresh or sessions token to acquire a delegated access token (to access APIs such as Microsoft Graph).  If this happens, the application will need to acquire a new refresh token by making a request to the authorize endpoint. Read-only. Use revokeSignInSessions to reset. Returned only on $select.
	SignInSessionsValidFromDateTime *time.Time `json:"signInSessionsValidFromDateTime"`

	// Skills A list for the user to enumerate their skills. Returned only on $select.
	Skills *[]string `json:"skills,omitempty"`

	// State The state or province in the user's address. Maximum length is 128 characters. Returned only on $select. Supports $filter (eq, ne, not, ge, le, in, startsWith, and eq on null values).
	State *string `json:"state"`

	// StreetAddress The street address of the user's place of business. Maximum length is 1024 characters. Returned only on $select. Supports $filter (eq, ne, not, ge, le, in, startsWith, and eq on null values).
	StreetAddress *string `json:"streetAddress"`

	// Surname The user's surname (family name or last name). Maximum length is 64 characters. Returned by default. Supports $filter (eq, ne, not, ge, le, in, startsWith, and eq on null values).
	Surname *string `json:"surname"`

	// Teamwork A container for Microsoft Teams features available for the user. Read-only. Nullable.
	Teamwork *MicrosoftGraphUser_Teamwork `json:"teamwork,omitempty"`

	// Todo Represents the To Do services available to a user.
	Todo *MicrosoftGraphUser_Todo `json:"todo,omitempty"`

	// TransitiveMemberOf The groups, including nested groups, and directory roles that a user is a member of. Nullable.
	TransitiveMemberOf *[]MicrosoftGraphDirectoryObject `json:"transitiveMemberOf,omitempty"`

	// UsageLocation A two letter country code (ISO standard 3166). Required for users that will be assigned licenses due to legal requirement to check for availability of services in countries.  Examples include: US, JP, and GB. Not nullable. Returned only on $select. Supports $filter (eq, ne, not, ge, le, in, startsWith, and eq on null values).
	UsageLocation *string `json:"usageLocation"`

	// UserPrincipalName The user principal name (UPN) of the user. The UPN is an Internet-style login name for the user based on the Internet standard RFC 822. By convention, this should map to the user's email name. The general format is alias@domain, where domain must be present in the tenant's collection of verified domains. This property is required when a user is created. The verified domains for the tenant can be accessed from the verifiedDomains property of organization.NOTE: This property cannot contain accent characters. Only the following characters are allowed A - Z, a - z, 0 - 9, ' . - _ ! # ^ ~. For the complete list of allowed characters, see username policies. Returned by default. Supports $filter (eq, ne, not, ge, le, in, startsWith, endsWith) and $orderBy.
	UserPrincipalName *string `json:"userPrincipalName"`

	// UserType A string value that can be used to classify user types in your directory, such as Member and Guest. Returned only on $select. Supports $filter (eq, ne, not, in, and eq on null values). NOTE: For more information about the permissions for member and guest users, see What are the default user permissions in Azure Active Directory?
	UserType *string `json:"userType"`
}

// MicrosoftGraphUserAuthentication1 defines model for .
type MicrosoftGraphUserAuthentication1 = map[string]interface{}

// MicrosoftGraphUser_Authentication The authentication methods that are supported for the user.
type MicrosoftGraphUser_Authentication struct {
	union json.RawMessage
}

// MicrosoftGraphUserAuthorizationInfo1 defines model for .
type MicrosoftGraphUserAuthorizationInfo1 = map[string]interface{}

// MicrosoftGraphUser_AuthorizationInfo defines model for MicrosoftGraphUser.AuthorizationInfo.
type MicrosoftGraphUser_AuthorizationInfo struct {
	union json.RawMessage
}

// MicrosoftGraphUserCalendar1 defines model for .
type MicrosoftGraphUserCalendar1 = map[string]interface{}

// MicrosoftGraphUser_Calendar The user's primary calendar. Read-only.
type MicrosoftGraphUser_Calendar struct {
	union json.RawMessage
}

// MicrosoftGraphUserCustomSecurityAttributes1 defines model for .
type MicrosoftGraphUserCustomSecurityAttributes1 = map[string]interface{}

// MicrosoftGraphUser_CustomSecurityAttributes defines model for MicrosoftGraphUser.CustomSecurityAttributes.
type MicrosoftGraphUser_CustomSecurityAttributes struct {
	union json.RawMessage
}

// MicrosoftGraphUserDrive1 defines model for .
type MicrosoftGraphUserDrive1 = map[string]interface{}

// MicrosoftGraphUser_Drive The user's OneDrive. Read-only.
type MicrosoftGraphUser_Drive struct {
	union json.RawMessage
}

// MicrosoftGraphUserEmployeeExperience1 defines model for .
type MicrosoftGraphUserEmployeeExperience1 = map[string]interface{}

// MicrosoftGraphUser_EmployeeExperience defines model for MicrosoftGraphUser.EmployeeExperience.
type MicrosoftGraphUser_EmployeeExperience struct {
	union json.RawMessage
}

// MicrosoftGraphUserEmployeeOrgData1 defines model for .
type MicrosoftGraphUserEmployeeOrgData1 = map[string]interface{}

// MicrosoftGraphUser_EmployeeOrgData Represents organization data (e.g. division and costCenter) associated with a user. Returned only on $select. Supports $filter (eq, ne, not , ge, le, in).
type MicrosoftGraphUser_EmployeeOrgData struct {
	union json.RawMessage
}

// MicrosoftGraphUserIdentities1 defines model for .
type MicrosoftGraphUserIdentities1 = map[string]interface{}

// MicrosoftGraphUser_Identities_Item defines model for microsoft.graph.user.identities.Item.
type MicrosoftGraphUser_Identities_Item struct {
	union json.RawMessage
}

// MicrosoftGraphUserInferenceClassification1 defines model for .
type MicrosoftGraphUserInferenceClassification1 = map[string]interface{}

// MicrosoftGraphUser_InferenceClassification Relevance classification of the user's messages based on explicit designations which override inferred relevance or importance.
type MicrosoftGraphUser_InferenceClassification struct {
	union json.RawMessage
}

// MicrosoftGraphUserInsights1 defines model for .
type MicrosoftGraphUserInsights1 = map[string]interface{}

// MicrosoftGraphUser_Insights defines model for MicrosoftGraphUser.Insights.
type MicrosoftGraphUser_Insights struct {
	union json.RawMessage
}

// MicrosoftGraphUserLicenseAssignmentStates1 defines model for .
type MicrosoftGraphUserLicenseAssignmentStates1 = map[string]interface{}

// MicrosoftGraphUser_LicenseAssignmentStates_Item defines model for microsoft.graph.user.licenseAssignmentStates.Item.
type MicrosoftGraphUser_LicenseAssignmentStates_Item struct {
	union json.RawMessage
}

// MicrosoftGraphUserMailboxSettings1 defines model for .
type MicrosoftGraphUserMailboxSettings1 = map[string]interface{}

// MicrosoftGraphUser_MailboxSettings Settings for the primary mailbox of the signed-in user. You can get or update settings for sending automatic replies to incoming messages, locale and time zone. Returned only on $select.
type MicrosoftGraphUser_MailboxSettings struct {
	union json.RawMessage
}

// MicrosoftGraphUserManager1 defines model for .
type MicrosoftGraphUserManager1 = map[string]interface{}

// MicrosoftGraphUser_Manager The user or contact that is this user's manager. Read-only. (HTTP Methods: GET, PUT, DELETE.). Supports $expand.
type MicrosoftGraphUser_Manager struct {
	union json.RawMessage
}

// MicrosoftGraphUserOnPremisesExtensionAttributes1 defines model for .
type MicrosoftGraphUserOnPremisesExtensionAttributes1 = map[string]interface{}

// MicrosoftGraphUser_OnPremisesExtensionAttributes Contains extensionAttributes1-15 for the user. These extension attributes are also known as Exchange custom attributes 1-15. For an onPremisesSyncEnabled user, the source of authority for this set of properties is the on-premises and is read-only. For a cloud-only user (where onPremisesSyncEnabled is false), these properties can be set during creation or update of a user object.  For a cloud-only user previously synced from on-premises Active Directory, these properties are read-only in Microsoft Graph but can be fully managed through the Exchange Admin Center or the Exchange Online V2 module in PowerShell. Returned only on $select. Supports $filter (eq, ne, not, in).
type MicrosoftGraphUser_OnPremisesExtensionAttributes struct {
	union json.RawMessage
}

// MicrosoftGraphUserOnPremisesProvisioningErrors1 defines model for .
type MicrosoftGraphUserOnPremisesProvisioningErrors1 = map[string]interface{}

// MicrosoftGraphUser_OnPremisesProvisioningErrors_Item defines model for microsoft.graph.user.onPremisesProvisioningErrors.Item.
type MicrosoftGraphUser_OnPremisesProvisioningErrors_Item struct {
	union json.RawMessage
}

// MicrosoftGraphUserOnenote1 defines model for .
type MicrosoftGraphUserOnenote1 = map[string]interface{}

// MicrosoftGraphUser_Onenote defines model for MicrosoftGraphUser.Onenote.
type MicrosoftGraphUser_Onenote struct {
	union json.RawMessage
}

// MicrosoftGraphUserOutlook1 defines model for .
type MicrosoftGraphUserOutlook1 = map[string]interface{}

// MicrosoftGraphUser_Outlook defines model for MicrosoftGraphUser.Outlook.
type MicrosoftGraphUser_Outlook struct {
	union json.RawMessage
}

// MicrosoftGraphUserPasswordProfile1 defines model for .
type MicrosoftGraphUserPasswordProfile1 = map[string]interface{}

// MicrosoftGraphUser_PasswordProfile Specifies the password profile for the user. The profile contains the user's password. This property is required when a user is created. The password in the profile must satisfy minimum requirements as specified by the passwordPolicies property. By default, a strong password is required. Returned only on $select. Supports $filter (eq, ne, not, in, and eq on null values).
type MicrosoftGraphUser_PasswordProfile struct {
	union json.RawMessage
}

// MicrosoftGraphUserPhoto1 defines model for .
type MicrosoftGraphUserPhoto1 = map[string]interface{}

// MicrosoftGraphUser_Photo The user's profile photo. Read-only.
type MicrosoftGraphUser_Photo struct {
	union json.RawMessage
}

// MicrosoftGraphUserPlanner1 defines model for .
type MicrosoftGraphUserPlanner1 = map[string]interface{}

// MicrosoftGraphUser_Planner Entry-point to the Planner resource that might exist for a user. Read-only.
type MicrosoftGraphUser_Planner struct {
	union json.RawMessage
}

// MicrosoftGraphUserPresence1 defines model for .
type MicrosoftGraphUserPresence1 = map[string]interface{}

// MicrosoftGraphUser_Presence defines model for MicrosoftGraphUser.Presence.
type MicrosoftGraphUser_Presence struct {
	union json.RawMessage
}

// MicrosoftGraphUserPrint1 defines model for .
type MicrosoftGraphUserPrint1 = map[string]interface{}

// MicrosoftGraphUser_Print defines model for MicrosoftGraphUser.Print.
type MicrosoftGraphUser_Print struct {
	union json.RawMessage
}

// MicrosoftGraphUserSettings1 defines model for .
type MicrosoftGraphUserSettings1 = map[string]interface{}

// MicrosoftGraphUser_Settings defines model for MicrosoftGraphUser.Settings.
type MicrosoftGraphUser_Settings struct {
	union json.RawMessage
}

// MicrosoftGraphUserSignInActivity1 defines model for .
type MicrosoftGraphUserSignInActivity1 = map[string]interface{}

// MicrosoftGraphUser_SignInActivity Get the last signed-in date and request ID of the sign-in for a given user. Read-only.Returned only on $select. Supports $filter (eq, ne, not, ge, le) but not with any other filterable properties. Note: Details for this property require an Azure AD Premium P1/P2 license and the AuditLog.Read.All permission.This property is not returned for a user who has never signed in or last signed in before April 2020.
type MicrosoftGraphUser_SignInActivity struct {
	union json.RawMessage
}

// MicrosoftGraphUserTeamwork1 defines model for .
type MicrosoftGraphUserTeamwork1 = map[string]interface{}

// MicrosoftGraphUser_Teamwork A container for Microsoft Teams features available for the user. Read-only. Nullable.
type MicrosoftGraphUser_Teamwork struct {
	union json.RawMessage
}

// MicrosoftGraphUserTodo1 defines model for .
type MicrosoftGraphUserTodo1 = map[string]interface{}

// MicrosoftGraphUser_Todo Represents the To Do services available to a user.
type MicrosoftGraphUser_Todo struct {
	union json.RawMessage
}

// MicrosoftGraphUserActivity defines model for microsoft.graph.userActivity.
type MicrosoftGraphUserActivity struct {
	// ActivationUrl Required. URL used to launch the activity in the best native experience represented by the appId. Might launch a web-based app if no native app exists.
	ActivationUrl *string `json:"activationUrl,omitempty"`

	// ActivitySourceHost Required. URL for the domain representing the cross-platform identity mapping for the app. Mapping is stored either as a JSON file hosted on the domain or configurable via Windows Dev Center. The JSON file is named cross-platform-app-identifiers and is hosted at root of your HTTPS domain, either at the top level domain or include a sub domain. For example: https://contoso.com or https://myapp.contoso.com but NOT https://myapp.contoso.com/somepath. You must have a unique file and domain (or sub domain) per cross-platform app identity. For example, a separate file and domain is needed for Word vs. PowerPoint.
	ActivitySourceHost *string `json:"activitySourceHost,omitempty"`

	// AppActivityId Required. The unique activity ID in the context of the app - supplied by caller and immutable thereafter.
	AppActivityId *string `json:"appActivityId,omitempty"`

	// AppDisplayName Optional. Short text description of the app used to generate the activity for use in cases when the app is not installed on the user’s local device.
	AppDisplayName *string `json:"appDisplayName"`

	// ContentInfo Optional. A custom piece of data - JSON-LD extensible description of content according to schema.org syntax.
	ContentInfo *MicrosoftGraphUserActivity_ContentInfo `json:"contentInfo,omitempty"`

	// ContentUrl Optional. Used in the event the content can be rendered outside of a native or web-based app experience (for example, a pointer to an item in an RSS feed).
	ContentUrl *string `json:"contentUrl"`

	// CreatedDateTime Set by the server. DateTime in UTC when the object was created on the server.
	CreatedDateTime *time.Time `json:"createdDateTime"`

	// ExpirationDateTime Set by the server. DateTime in UTC when the object expired on the server.
	ExpirationDateTime *time.Time `json:"expirationDateTime"`

	// FallbackUrl Optional. URL used to launch the activity in a web-based app, if available.
	FallbackUrl *string `json:"fallbackUrl"`

	// HistoryItems Optional. NavigationProperty/Containment; navigation property to the activity's historyItems.
	HistoryItems *[]MicrosoftGraphActivityHistoryItem `json:"historyItems,omitempty"`

	// Id The unique idenfier for an entity. Read-only.
	Id *string `json:"id,omitempty"`

	// LastModifiedDateTime Set by the server. DateTime in UTC when the object was modified on the server.
	LastModifiedDateTime *time.Time `json:"lastModifiedDateTime"`

	// Status Set by the server. A status code used to identify valid objects. Values: active, updated, deleted, ignored.
	Status *MicrosoftGraphUserActivity_Status `json:"status,omitempty"`

	// UserTimezone Optional. The timezone in which the user's device used to generate the activity was located at activity creation time; values supplied as Olson IDs in order to support cross-platform representation.
	UserTimezone   *string                   `json:"userTimezone"`
	VisualElements *MicrosoftGraphVisualInfo `json:"visualElements,omitempty"`
}

// MicrosoftGraphUserActivityContentInfo1 defines model for .
type MicrosoftGraphUserActivityContentInfo1 = map[string]interface{}

// MicrosoftGraphUserActivity_ContentInfo Optional. A custom piece of data - JSON-LD extensible description of content according to schema.org syntax.
type MicrosoftGraphUserActivity_ContentInfo struct {
	union json.RawMessage
}

// MicrosoftGraphUserActivityStatus1 defines model for .
type MicrosoftGraphUserActivityStatus1 = map[string]interface{}

// MicrosoftGraphUserActivity_Status Set by the server. A status code used to identify valid objects. Values: active, updated, deleted, ignored.
type MicrosoftGraphUserActivity_Status struct {
	union json.RawMessage
}

// MicrosoftGraphUserCollectionResponse defines model for microsoft.graph.userCollectionResponse.
type MicrosoftGraphUserCollectionResponse struct {
	OdataNextLink *string               `json:"@odata.nextLink"`
	Value         *[]MicrosoftGraphUser `json:"value,omitempty"`
}

// MicrosoftGraphUserIdentity defines model for microsoft.graph.userIdentity.
type MicrosoftGraphUserIdentity struct {
	// DisplayName The display name of the identity. Note that this might not always be available or up to date. For example, if a user changes their display name, the API might show the new value in a future response, but the items associated with the user won't show up as having changed when using delta.
	DisplayName *string `json:"displayName"`

	// Id Unique identifier for the identity.
	Id *string `json:"id"`

	// IpAddress Indicates the client IP address used by user performing the activity (audit log only).
	IpAddress *string `json:"ipAddress"`

	// UserPrincipalName The userPrincipalName attribute of the user.
	UserPrincipalName *string `json:"userPrincipalName"`
}

// MicrosoftGraphUserPrint defines model for microsoft.graph.userPrint.
type MicrosoftGraphUserPrint struct {
	RecentPrinterShares *[]MicrosoftGraphPrinterShare `json:"recentPrinterShares,omitempty"`
}

// MicrosoftGraphUserPurpose defines model for microsoft.graph.userPurpose.
type MicrosoftGraphUserPurpose string

// MicrosoftGraphUserScopeTeamsAppInstallation defines model for microsoft.graph.userScopeTeamsAppInstallation.
type MicrosoftGraphUserScopeTeamsAppInstallation struct {
	// Chat The chat between the user and Teams app.
	Chat *MicrosoftGraphUserScopeTeamsAppInstallation_Chat `json:"chat,omitempty"`

	// ConsentedPermissionSet The set of resource-specific permissions consented to while installing or upgrading the teamsApp.
	ConsentedPermissionSet *MicrosoftGraphUserScopeTeamsAppInstallation_ConsentedPermissionSet `json:"consentedPermissionSet,omitempty"`

	// Id The unique idenfier for an entity. Read-only.
	Id *string `json:"id,omitempty"`

	// TeamsApp The app that is installed.
	TeamsApp *MicrosoftGraphUserScopeTeamsAppInstallation_TeamsApp `json:"teamsApp,omitempty"`

	// TeamsAppDefinition The details of this version of the app.
	TeamsAppDefinition *MicrosoftGraphUserScopeTeamsAppInstallation_TeamsAppDefinition `json:"teamsAppDefinition,omitempty"`
}

// MicrosoftGraphUserScopeTeamsAppInstallationChat1 defines model for .
type MicrosoftGraphUserScopeTeamsAppInstallationChat1 = map[string]interface{}

// MicrosoftGraphUserScopeTeamsAppInstallation_Chat The chat between the user and Teams app.
type MicrosoftGraphUserScopeTeamsAppInstallation_Chat struct {
	union json.RawMessage
}

// MicrosoftGraphUserScopeTeamsAppInstallationConsentedPermissionSet1 defines model for .
type MicrosoftGraphUserScopeTeamsAppInstallationConsentedPermissionSet1 = map[string]interface{}

// MicrosoftGraphUserScopeTeamsAppInstallation_ConsentedPermissionSet The set of resource-specific permissions consented to while installing or upgrading the teamsApp.
type MicrosoftGraphUserScopeTeamsAppInstallation_ConsentedPermissionSet struct {
	union json.RawMessage
}

// MicrosoftGraphUserScopeTeamsAppInstallationTeamsApp1 defines model for .
type MicrosoftGraphUserScopeTeamsAppInstallationTeamsApp1 = map[string]interface{}

// MicrosoftGraphUserScopeTeamsAppInstallation_TeamsApp The app that is installed.
type MicrosoftGraphUserScopeTeamsAppInstallation_TeamsApp struct {
	union json.RawMessage
}

// MicrosoftGraphUserScopeTeamsAppInstallationTeamsAppDefinition1 defines model for .
type MicrosoftGraphUserScopeTeamsAppInstallationTeamsAppDefinition1 = map[string]interface{}

// MicrosoftGraphUserScopeTeamsAppInstallation_TeamsAppDefinition The details of this version of the app.
type MicrosoftGraphUserScopeTeamsAppInstallation_TeamsAppDefinition struct {
	union json.RawMessage
}

// MicrosoftGraphUserSettings defines model for microsoft.graph.userSettings.
type MicrosoftGraphUserSettings struct {
	// ContributionToContentDiscoveryAsOrganizationDisabled Reflects the organization level setting controlling delegate access to the trending API. When set to true, the organization doesn't have access to Office Delve. The relevancy of the content displayed in Microsoft 365, for example in Suggested sites in SharePoint Home and the Discover view in OneDrive for Business is affected for the whole organization. This setting is read-only and can only be changed by administrators in the SharePoint admin center.
	ContributionToContentDiscoveryAsOrganizationDisabled *bool `json:"contributionToContentDiscoveryAsOrganizationDisabled,omitempty"`

	// ContributionToContentDiscoveryDisabled When set to true, the delegate access to the user's trending API is disabled. When set to true, documents in the user's Office Delve are disabled. When set to true, the relevancy of the content displayed in Microsoft 365, for example in Suggested sites in SharePoint Home and the Discover view in OneDrive for Business is affected. Users can control this setting in Office Delve.
	ContributionToContentDiscoveryDisabled *bool `json:"contributionToContentDiscoveryDisabled,omitempty"`

	// Id The unique idenfier for an entity. Read-only.
	Id               *string                                      `json:"id,omitempty"`
	ShiftPreferences *MicrosoftGraphUserSettings_ShiftPreferences `json:"shiftPreferences,omitempty"`
}

// MicrosoftGraphUserSettingsShiftPreferences1 defines model for .
type MicrosoftGraphUserSettingsShiftPreferences1 = map[string]interface{}

// MicrosoftGraphUserSettings_ShiftPreferences defines model for MicrosoftGraphUserSettings.ShiftPreferences.
type MicrosoftGraphUserSettings_ShiftPreferences struct {
	union json.RawMessage
}

// MicrosoftGraphUserTeamwork defines model for microsoft.graph.userTeamwork.
type MicrosoftGraphUserTeamwork struct {
	// AssociatedTeams The list of associatedTeamInfo objects that a user is associated with.
	AssociatedTeams *[]MicrosoftGraphAssociatedTeamInfo `json:"associatedTeams,omitempty"`

	// Id The unique idenfier for an entity. Read-only.
	Id *string `json:"id,omitempty"`

	// InstalledApps The apps installed in the personal scope of this user.
	InstalledApps *[]MicrosoftGraphUserScopeTeamsAppInstallation `json:"installedApps,omitempty"`
}

// MicrosoftGraphVideo defines model for microsoft.graph.video.
type MicrosoftGraphVideo struct {
	// AudioBitsPerSample Number of audio bits per sample.
	AudioBitsPerSample *int32 `json:"audioBitsPerSample"`

	// AudioChannels Number of audio channels.
	AudioChannels *int32 `json:"audioChannels"`

	// AudioFormat Name of the audio format (AAC, MP3, etc.).
	AudioFormat *string `json:"audioFormat"`

	// AudioSamplesPerSecond Number of audio samples per second.
	AudioSamplesPerSecond *int32 `json:"audioSamplesPerSecond"`

	// Bitrate Bit rate of the video in bits per second.
	Bitrate *int32 `json:"bitrate"`

	// Duration Duration of the file in milliseconds.
	Duration *int64 `json:"duration"`

	// FourCC 'Four character code' name of the video format.
	FourCC *string `json:"fourCC"`

	// FrameRate Frame rate of the video.
	FrameRate *MicrosoftGraphVideo_FrameRate `json:"frameRate"`

	// Height Height of the video, in pixels.
	Height *int32 `json:"height"`

	// Width Width of the video, in pixels.
	Width *int32 `json:"width"`
}

// MicrosoftGraphVideoFrameRate0 defines model for .
type MicrosoftGraphVideoFrameRate0 = float64

// MicrosoftGraphVideoFrameRate1 defines model for .
type MicrosoftGraphVideoFrameRate1 = string

// MicrosoftGraphVideo_FrameRate Frame rate of the video.
type MicrosoftGraphVideo_FrameRate struct {
	union json.RawMessage
}

// MicrosoftGraphVisualInfo defines model for microsoft.graph.visualInfo.
type MicrosoftGraphVisualInfo struct {
	// Attribution Optional. JSON object used to represent an icon which represents the application used to generate the activity
	Attribution *MicrosoftGraphVisualInfo_Attribution `json:"attribution,omitempty"`

	// BackgroundColor Optional. Background color used to render the activity in the UI - brand color for the application source of the activity. Must be a valid hex color
	BackgroundColor *string `json:"backgroundColor"`

	// Content Optional. Custom piece of data - JSON object used to provide custom content to render the activity in the Windows Shell UI
	Content *MicrosoftGraphVisualInfo_Content `json:"content,omitempty"`

	// Description Optional. Longer text description of the user's unique activity (example: document name, first sentence, and/or metadata)
	Description *string `json:"description"`

	// DisplayText Required. Short text description of the user's unique activity (for example, document name in cases where an activity refers to document creation)
	DisplayText *string `json:"displayText,omitempty"`
}

// MicrosoftGraphVisualInfoAttribution1 defines model for .
type MicrosoftGraphVisualInfoAttribution1 = map[string]interface{}

// MicrosoftGraphVisualInfo_Attribution Optional. JSON object used to represent an icon which represents the application used to generate the activity
type MicrosoftGraphVisualInfo_Attribution struct {
	union json.RawMessage
}

// MicrosoftGraphVisualInfoContent1 defines model for .
type MicrosoftGraphVisualInfoContent1 = map[string]interface{}

// MicrosoftGraphVisualInfo_Content Optional. Custom piece of data - JSON object used to provide custom content to render the activity in the Windows Shell UI
type MicrosoftGraphVisualInfo_Content struct {
	union json.RawMessage
}

// MicrosoftGraphWatermarkProtectionValues defines model for microsoft.graph.watermarkProtectionValues.
type MicrosoftGraphWatermarkProtectionValues struct {
	// IsEnabledForContentSharing Indicates whether to apply a watermark to any shared content.
	IsEnabledForContentSharing *bool `json:"isEnabledForContentSharing"`

	// IsEnabledForVideo Indicates whether to apply a watermark to everyone's video feed.
	IsEnabledForVideo *bool `json:"isEnabledForVideo"`
}

// MicrosoftGraphWebsite defines model for microsoft.graph.website.
type MicrosoftGraphWebsite struct {
	// Address The URL of the website.
	Address *string `json:"address"`

	// DisplayName The display name of the web site.
	DisplayName *string `json:"displayName"`

	// Type The possible values are: other, home, work, blog, profile.
	Type *MicrosoftGraphWebsite_Type `json:"type,omitempty"`
}

// MicrosoftGraphWebsiteType1 defines model for .
type MicrosoftGraphWebsiteType1 = map[string]interface{}

// MicrosoftGraphWebsite_Type The possible values are: other, home, work, blog, profile.
type MicrosoftGraphWebsite_Type struct {
	union json.RawMessage
}

// MicrosoftGraphWebsiteType defines model for microsoft.graph.websiteType.
type MicrosoftGraphWebsiteType string

// MicrosoftGraphWeekIndex defines model for microsoft.graph.weekIndex.
type MicrosoftGraphWeekIndex string

// MicrosoftGraphWellknownListName defines model for microsoft.graph.wellknownListName.
type MicrosoftGraphWellknownListName string

// MicrosoftGraphWindowsDefenderProductStatus Product Status of Windows Defender
type MicrosoftGraphWindowsDefenderProductStatus string

// MicrosoftGraphWindowsDeviceHealthState Computer endpoint protection state
type MicrosoftGraphWindowsDeviceHealthState string

// MicrosoftGraphWindowsDeviceMalwareState defines model for microsoft.graph.windowsDeviceMalwareState.
type MicrosoftGraphWindowsDeviceMalwareState struct {
	// AdditionalInformationUrl Information URL to learn more about the malware
	AdditionalInformationUrl *string `json:"additionalInformationUrl"`

	// Category Category of the malware. Possible values are: invalid, adware, spyware, passwordStealer, trojanDownloader, worm, backdoor, remoteAccessTrojan, trojan, emailFlooder, keylogger, dialer, monitoringSoftware, browserModifier, cookie, browserPlugin, aolExploit, nuker, securityDisabler, jokeProgram, hostileActiveXControl, softwareBundler, stealthNotifier, settingsModifier, toolBar, remoteControlSoftware, trojanFtp, potentialUnwantedSoftware, icqExploit, trojanTelnet, exploit, filesharingProgram, malwareCreationTool, remoteControlSoftware, tool, trojanDenialOfService, trojanDropper, trojanMassMailer, trojanMonitoringSoftware, trojanProxyServer, virus, known, unknown, spp, behavior, vulnerability, policy, enterpriseUnwantedSoftware, ransom, hipsRule.
	Category *MicrosoftGraphWindowsDeviceMalwareState_Category `json:"category,omitempty"`

	// DetectionCount Number of times the malware is detected
	DetectionCount *int32 `json:"detectionCount"`

	// DisplayName Malware name
	DisplayName *string `json:"displayName"`

	// ExecutionState Execution status of the malware like blocked/executing etc. Possible values are: unknown, blocked, allowed, running, notRunning.
	ExecutionState *MicrosoftGraphWindowsDeviceMalwareState_ExecutionState `json:"executionState,omitempty"`

	// Id The unique idenfier for an entity. Read-only.
	Id *string `json:"id,omitempty"`

	// InitialDetectionDateTime Initial detection datetime of the malware
	InitialDetectionDateTime *time.Time `json:"initialDetectionDateTime"`

	// LastStateChangeDateTime The last time this particular threat was changed
	LastStateChangeDateTime *time.Time `json:"lastStateChangeDateTime"`

	// Severity Severity of the malware. Possible values are: unknown, low, moderate, high, severe.
	Severity *MicrosoftGraphWindowsDeviceMalwareState_Severity `json:"severity,omitempty"`

	// State Current status of the malware like cleaned/quarantined/allowed etc. Possible values are: unknown, detected, cleaned, quarantined, removed, allowed, blocked, cleanFailed, quarantineFailed, removeFailed, allowFailed, abandoned, blockFailed.
	State *MicrosoftGraphWindowsDeviceMalwareState_State `json:"state,omitempty"`

	// ThreatState Current status of the malware like cleaned/quarantined/allowed etc. Possible values are: active, actionFailed, manualStepsRequired, fullScanRequired, rebootRequired, remediatedWithNonCriticalFailures, quarantined, removed, cleaned, allowed, noStatusCleared.
	ThreatState *MicrosoftGraphWindowsDeviceMalwareState_ThreatState `json:"threatState,omitempty"`
}

// MicrosoftGraphWindowsDeviceMalwareStateCategory1 defines model for .
type MicrosoftGraphWindowsDeviceMalwareStateCategory1 = map[string]interface{}

// MicrosoftGraphWindowsDeviceMalwareState_Category Category of the malware. Possible values are: invalid, adware, spyware, passwordStealer, trojanDownloader, worm, backdoor, remoteAccessTrojan, trojan, emailFlooder, keylogger, dialer, monitoringSoftware, browserModifier, cookie, browserPlugin, aolExploit, nuker, securityDisabler, jokeProgram, hostileActiveXControl, softwareBundler, stealthNotifier, settingsModifier, toolBar, remoteControlSoftware, trojanFtp, potentialUnwantedSoftware, icqExploit, trojanTelnet, exploit, filesharingProgram, malwareCreationTool, remoteControlSoftware, tool, trojanDenialOfService, trojanDropper, trojanMassMailer, trojanMonitoringSoftware, trojanProxyServer, virus, known, unknown, spp, behavior, vulnerability, policy, enterpriseUnwantedSoftware, ransom, hipsRule.
type MicrosoftGraphWindowsDeviceMalwareState_Category struct {
	union json.RawMessage
}

// MicrosoftGraphWindowsDeviceMalwareStateExecutionState1 defines model for .
type MicrosoftGraphWindowsDeviceMalwareStateExecutionState1 = map[string]interface{}

// MicrosoftGraphWindowsDeviceMalwareState_ExecutionState Execution status of the malware like blocked/executing etc. Possible values are: unknown, blocked, allowed, running, notRunning.
type MicrosoftGraphWindowsDeviceMalwareState_ExecutionState struct {
	union json.RawMessage
}

// MicrosoftGraphWindowsDeviceMalwareStateSeverity1 defines model for .
type MicrosoftGraphWindowsDeviceMalwareStateSeverity1 = map[string]interface{}

// MicrosoftGraphWindowsDeviceMalwareState_Severity Severity of the malware. Possible values are: unknown, low, moderate, high, severe.
type MicrosoftGraphWindowsDeviceMalwareState_Severity struct {
	union json.RawMessage
}

// MicrosoftGraphWindowsDeviceMalwareStateState1 defines model for .
type MicrosoftGraphWindowsDeviceMalwareStateState1 = map[string]interface{}

// MicrosoftGraphWindowsDeviceMalwareState_State Current status of the malware like cleaned/quarantined/allowed etc. Possible values are: unknown, detected, cleaned, quarantined, removed, allowed, blocked, cleanFailed, quarantineFailed, removeFailed, allowFailed, abandoned, blockFailed.
type MicrosoftGraphWindowsDeviceMalwareState_State struct {
	union json.RawMessage
}

// MicrosoftGraphWindowsDeviceMalwareStateThreatState1 defines model for .
type MicrosoftGraphWindowsDeviceMalwareStateThreatState1 = map[string]interface{}

// MicrosoftGraphWindowsDeviceMalwareState_ThreatState Current status of the malware like cleaned/quarantined/allowed etc. Possible values are: active, actionFailed, manualStepsRequired, fullScanRequired, rebootRequired, remediatedWithNonCriticalFailures, quarantined, removed, cleaned, allowed, noStatusCleared.
type MicrosoftGraphWindowsDeviceMalwareState_ThreatState struct {
	union json.RawMessage
}

// MicrosoftGraphWindowsHelloForBusinessAuthenticationMethod defines model for microsoft.graph.windowsHelloForBusinessAuthenticationMethod.
type MicrosoftGraphWindowsHelloForBusinessAuthenticationMethod struct {
	// CreatedDateTime The date and time that this Windows Hello for Business key was registered.
	CreatedDateTime *time.Time `json:"createdDateTime"`

	// Device The registered device on which this Windows Hello for Business key resides. Supports $expand. When you get a user's Windows Hello for Business registration information, this property is returned only on a single GET and when you specify ?$expand. For example, GET /users/admin@contoso.com/authentication/windowsHelloForBusinessMethods/_jpuR-TGZtk6aQCLF3BQjA2?$expand=device.
	Device *MicrosoftGraphWindowsHelloForBusinessAuthenticationMethod_Device `json:"device,omitempty"`

	// DisplayName The name of the device on which Windows Hello for Business is registered
	DisplayName *string `json:"displayName"`

	// Id The unique idenfier for an entity. Read-only.
	Id *string `json:"id,omitempty"`

	// KeyStrength Key strength of this Windows Hello for Business key. Possible values are: normal, weak, unknown.
	KeyStrength *MicrosoftGraphWindowsHelloForBusinessAuthenticationMethod_KeyStrength `json:"keyStrength,omitempty"`
}

// MicrosoftGraphWindowsHelloForBusinessAuthenticationMethodDevice1 defines model for .
type MicrosoftGraphWindowsHelloForBusinessAuthenticationMethodDevice1 = map[string]interface{}

// MicrosoftGraphWindowsHelloForBusinessAuthenticationMethod_Device The registered device on which this Windows Hello for Business key resides. Supports $expand. When you get a user's Windows Hello for Business registration information, this property is returned only on a single GET and when you specify ?$expand. For example, GET /users/admin@contoso.com/authentication/windowsHelloForBusinessMethods/_jpuR-TGZtk6aQCLF3BQjA2?$expand=device.
type MicrosoftGraphWindowsHelloForBusinessAuthenticationMethod_Device struct {
	union json.RawMessage
}

// MicrosoftGraphWindowsHelloForBusinessAuthenticationMethodKeyStrength1 defines model for .
type MicrosoftGraphWindowsHelloForBusinessAuthenticationMethodKeyStrength1 = map[string]interface{}

// MicrosoftGraphWindowsHelloForBusinessAuthenticationMethod_KeyStrength Key strength of this Windows Hello for Business key. Possible values are: normal, weak, unknown.
type MicrosoftGraphWindowsHelloForBusinessAuthenticationMethod_KeyStrength struct {
	union json.RawMessage
}

// MicrosoftGraphWindowsMalwareCategory Malware category id
type MicrosoftGraphWindowsMalwareCategory string

// MicrosoftGraphWindowsMalwareExecutionState Malware execution status
type MicrosoftGraphWindowsMalwareExecutionState string

// MicrosoftGraphWindowsMalwareSeverity Malware severity
type MicrosoftGraphWindowsMalwareSeverity string

// MicrosoftGraphWindowsMalwareState Malware current status
type MicrosoftGraphWindowsMalwareState string

// MicrosoftGraphWindowsMalwareThreatState Malware threat status
type MicrosoftGraphWindowsMalwareThreatState string

// MicrosoftGraphWindowsProtectionState defines model for microsoft.graph.windowsProtectionState.
type MicrosoftGraphWindowsProtectionState struct {
	// AntiMalwareVersion Current anti malware version
	AntiMalwareVersion *string `json:"antiMalwareVersion"`

	// DetectedMalwareState Device malware list
	DetectedMalwareState *[]MicrosoftGraphWindowsDeviceMalwareState `json:"detectedMalwareState,omitempty"`

	// DeviceState Indicates device's health state. Possible values are: clean, fullScanPending, rebootPending, manualStepsPending, offlineScanPending, critical. Possible values are: clean, fullScanPending, rebootPending, manualStepsPending, offlineScanPending, critical.
	DeviceState *MicrosoftGraphWindowsProtectionState_DeviceState `json:"deviceState,omitempty"`

	// EngineVersion Current endpoint protection engine's version
	EngineVersion *string `json:"engineVersion"`

	// FullScanOverdue When TRUE indicates full scan is overdue, when FALSE indicates full scan is not overdue. Defaults to setting on client device.
	FullScanOverdue *bool `json:"fullScanOverdue"`

	// FullScanRequired When TRUE indicates full scan is required, when FALSE indicates full scan is not required. Defaults to setting on client device.
	FullScanRequired *bool `json:"fullScanRequired"`

	// Id The unique idenfier for an entity. Read-only.
	Id *string `json:"id,omitempty"`

	// IsVirtualMachine When TRUE indicates the device is a virtual machine, when FALSE indicates the device is not a virtual machine. Defaults to setting on client device.
	IsVirtualMachine *bool `json:"isVirtualMachine"`

	// LastFullScanDateTime Last quick scan datetime
	LastFullScanDateTime *time.Time `json:"lastFullScanDateTime"`

	// LastFullScanSignatureVersion Last full scan signature version
	LastFullScanSignatureVersion *string `json:"lastFullScanSignatureVersion"`

	// LastQuickScanDateTime Last quick scan datetime
	LastQuickScanDateTime *time.Time `json:"lastQuickScanDateTime"`

	// LastQuickScanSignatureVersion Last quick scan signature version
	LastQuickScanSignatureVersion *string `json:"lastQuickScanSignatureVersion"`

	// LastReportedDateTime Last device health status reported time
	LastReportedDateTime *time.Time `json:"lastReportedDateTime"`

	// MalwareProtectionEnabled When TRUE indicates anti malware is enabled when FALSE indicates anti malware is not enabled.
	MalwareProtectionEnabled *bool `json:"malwareProtectionEnabled"`

	// NetworkInspectionSystemEnabled When TRUE indicates network inspection system enabled, when FALSE indicates network inspection system is not enabled. Defaults to setting on client device.
	NetworkInspectionSystemEnabled *bool `json:"networkInspectionSystemEnabled"`

	// ProductStatus Product Status of Windows Defender Antivirus. Possible values are: noStatus, serviceNotRunning, serviceStartedWithoutMalwareProtection, pendingFullScanDueToThreatAction, pendingRebootDueToThreatAction, pendingManualStepsDueToThreatAction, avSignaturesOutOfDate, asSignaturesOutOfDate, noQuickScanHappenedForSpecifiedPeriod, noFullScanHappenedForSpecifiedPeriod, systemInitiatedScanInProgress, systemInitiatedCleanInProgress, samplesPendingSubmission, productRunningInEvaluationMode, productRunningInNonGenuineMode, productExpired, offlineScanRequired, serviceShutdownAsPartOfSystemShutdown, threatRemediationFailedCritically, threatRemediationFailedNonCritically, noStatusFlagsSet, platformOutOfDate, platformUpdateInProgress, platformAboutToBeOutdated, signatureOrPlatformEndOfLifeIsPastOrIsImpending, windowsSModeSignaturesInUseOnNonWin10SInstall. Possible values are: noStatus, serviceNotRunning, serviceStartedWithoutMalwareProtection, pendingFullScanDueToThreatAction, pendingRebootDueToThreatAction, pendingManualStepsDueToThreatAction, avSignaturesOutOfDate, asSignaturesOutOfDate, noQuickScanHappenedForSpecifiedPeriod, noFullScanHappenedForSpecifiedPeriod, systemInitiatedScanInProgress, systemInitiatedCleanInProgress, samplesPendingSubmission, productRunningInEvaluationMode, productRunningInNonGenuineMode, productExpired, offlineScanRequired, serviceShutdownAsPartOfSystemShutdown, threatRemediationFailedCritically, threatRemediationFailedNonCritically, noStatusFlagsSet, platformOutOfDate, platformUpdateInProgress, platformAboutToBeOutdated, signatureOrPlatformEndOfLifeIsPastOrIsImpending, windowsSModeSignaturesInUseOnNonWin10SInstall.
	ProductStatus *MicrosoftGraphWindowsProtectionState_ProductStatus `json:"productStatus,omitempty"`

	// QuickScanOverdue When TRUE indicates quick scan is overdue, when FALSE indicates quick scan is not overdue. Defaults to setting on client device.
	QuickScanOverdue *bool `json:"quickScanOverdue"`

	// RealTimeProtectionEnabled When TRUE indicates real time protection is enabled, when FALSE indicates real time protection is not enabled. Defaults to setting on client device.
	RealTimeProtectionEnabled *bool `json:"realTimeProtectionEnabled"`

	// RebootRequired When TRUE indicates reboot is required, when FALSE indicates when TRUE indicates reboot is not required. Defaults to setting on client device.
	RebootRequired *bool `json:"rebootRequired"`

	// SignatureUpdateOverdue When TRUE indicates signature is out of date, when FALSE indicates signature is not out of date. Defaults to setting on client device.
	SignatureUpdateOverdue *bool `json:"signatureUpdateOverdue"`

	// SignatureVersion Current malware definitions version
	SignatureVersion *string `json:"signatureVersion"`

	// TamperProtectionEnabled When TRUE indicates the Windows Defender tamper protection feature is enabled, when FALSE indicates the Windows Defender tamper protection feature is not enabled. Defaults to setting on client device.
	TamperProtectionEnabled *bool `json:"tamperProtectionEnabled"`
}

// MicrosoftGraphWindowsProtectionStateDeviceState1 defines model for .
type MicrosoftGraphWindowsProtectionStateDeviceState1 = map[string]interface{}

// MicrosoftGraphWindowsProtectionState_DeviceState Indicates device's health state. Possible values are: clean, fullScanPending, rebootPending, manualStepsPending, offlineScanPending, critical. Possible values are: clean, fullScanPending, rebootPending, manualStepsPending, offlineScanPending, critical.
type MicrosoftGraphWindowsProtectionState_DeviceState struct {
	union json.RawMessage
}

// MicrosoftGraphWindowsProtectionStateProductStatus1 defines model for .
type MicrosoftGraphWindowsProtectionStateProductStatus1 = map[string]interface{}

// MicrosoftGraphWindowsProtectionState_ProductStatus Product Status of Windows Defender Antivirus. Possible values are: noStatus, serviceNotRunning, serviceStartedWithoutMalwareProtection, pendingFullScanDueToThreatAction, pendingRebootDueToThreatAction, pendingManualStepsDueToThreatAction, avSignaturesOutOfDate, asSignaturesOutOfDate, noQuickScanHappenedForSpecifiedPeriod, noFullScanHappenedForSpecifiedPeriod, systemInitiatedScanInProgress, systemInitiatedCleanInProgress, samplesPendingSubmission, productRunningInEvaluationMode, productRunningInNonGenuineMode, productExpired, offlineScanRequired, serviceShutdownAsPartOfSystemShutdown, threatRemediationFailedCritically, threatRemediationFailedNonCritically, noStatusFlagsSet, platformOutOfDate, platformUpdateInProgress, platformAboutToBeOutdated, signatureOrPlatformEndOfLifeIsPastOrIsImpending, windowsSModeSignaturesInUseOnNonWin10SInstall. Possible values are: noStatus, serviceNotRunning, serviceStartedWithoutMalwareProtection, pendingFullScanDueToThreatAction, pendingRebootDueToThreatAction, pendingManualStepsDueToThreatAction, avSignaturesOutOfDate, asSignaturesOutOfDate, noQuickScanHappenedForSpecifiedPeriod, noFullScanHappenedForSpecifiedPeriod, systemInitiatedScanInProgress, systemInitiatedCleanInProgress, samplesPendingSubmission, productRunningInEvaluationMode, productRunningInNonGenuineMode, productExpired, offlineScanRequired, serviceShutdownAsPartOfSystemShutdown, threatRemediationFailedCritically, threatRemediationFailedNonCritically, noStatusFlagsSet, platformOutOfDate, platformUpdateInProgress, platformAboutToBeOutdated, signatureOrPlatformEndOfLifeIsPastOrIsImpending, windowsSModeSignaturesInUseOnNonWin10SInstall.
type MicrosoftGraphWindowsProtectionState_ProductStatus struct {
	union json.RawMessage
}

// MicrosoftGraphWorkbook defines model for microsoft.graph.workbook.
type MicrosoftGraphWorkbook struct {
	Application *MicrosoftGraphWorkbook_Application `json:"application,omitempty"`

	// Comments Represents a collection of comments in a workbook.
	Comments  *[]MicrosoftGraphWorkbookComment  `json:"comments,omitempty"`
	Functions *MicrosoftGraphWorkbook_Functions `json:"functions,omitempty"`

	// Id The unique idenfier for an entity. Read-only.
	Id *string `json:"id,omitempty"`

	// Names Represents a collection of workbooks scoped named items (named ranges and constants). Read-only.
	Names *[]MicrosoftGraphWorkbookNamedItem `json:"names,omitempty"`

	// Operations The status of workbook operations. Getting an operation collection is not supported, but you can get the status of a long-running operation if the Location header is returned in the response. Read-only.
	Operations *[]MicrosoftGraphWorkbookOperation `json:"operations,omitempty"`

	// Tables Represents a collection of tables associated with the workbook. Read-only.
	Tables *[]MicrosoftGraphWorkbookTable `json:"tables,omitempty"`

	// Worksheets Represents a collection of worksheets associated with the workbook. Read-only.
	Worksheets *[]MicrosoftGraphWorkbookWorksheet `json:"worksheets,omitempty"`
}

// MicrosoftGraphWorkbookApplication1 defines model for .
type MicrosoftGraphWorkbookApplication1 = map[string]interface{}

// MicrosoftGraphWorkbook_Application defines model for MicrosoftGraphWorkbook.Application.
type MicrosoftGraphWorkbook_Application struct {
	union json.RawMessage
}

// MicrosoftGraphWorkbookFunctions1 defines model for .
type MicrosoftGraphWorkbookFunctions1 = map[string]interface{}

// MicrosoftGraphWorkbook_Functions defines model for MicrosoftGraphWorkbook.Functions.
type MicrosoftGraphWorkbook_Functions struct {
	union json.RawMessage
}

// MicrosoftGraphWorkbookApplication defines model for microsoft.graph.workbookApplication.
type MicrosoftGraphWorkbookApplication struct {
	// CalculationMode Returns the calculation mode used in the workbook. Possible values are: Automatic, AutomaticExceptTables, Manual.
	CalculationMode *string `json:"calculationMode,omitempty"`

	// Id The unique idenfier for an entity. Read-only.
	Id *string `json:"id,omitempty"`
}

// MicrosoftGraphWorkbookChart defines model for microsoft.graph.workbookChart.
type MicrosoftGraphWorkbookChart struct {
	// Axes Represents chart axes. Read-only.
	Axes *MicrosoftGraphWorkbookChart_Axes `json:"axes,omitempty"`

	// DataLabels Represents the datalabels on the chart. Read-only.
	DataLabels *MicrosoftGraphWorkbookChart_DataLabels `json:"dataLabels,omitempty"`

	// Format Encapsulates the format properties for the chart area. Read-only.
	Format *MicrosoftGraphWorkbookChart_Format `json:"format,omitempty"`

	// Height Represents the height, in points, of the chart object.
	Height *MicrosoftGraphWorkbookChart_Height `json:"height,omitempty"`

	// Id The unique idenfier for an entity. Read-only.
	Id *string `json:"id,omitempty"`

	// Left The distance, in points, from the left side of the chart to the worksheet origin.
	Left *MicrosoftGraphWorkbookChart_Left `json:"left,omitempty"`

	// Legend Represents the legend for the chart. Read-only.
	Legend *MicrosoftGraphWorkbookChart_Legend `json:"legend,omitempty"`

	// Name Represents the name of a chart object.
	Name *string `json:"name"`

	// Series Represents either a single series or collection of series in the chart. Read-only.
	Series *[]MicrosoftGraphWorkbookChartSeries `json:"series,omitempty"`

	// Title Represents the title of the specified chart, including the text, visibility, position and formating of the title. Read-only.
	Title *MicrosoftGraphWorkbookChart_Title `json:"title,omitempty"`

	// Top Represents the distance, in points, from the top edge of the object to the top of row 1 (on a worksheet) or the top of the chart area (on a chart).
	Top *MicrosoftGraphWorkbookChart_Top `json:"top,omitempty"`

	// Width Represents the width, in points, of the chart object.
	Width *MicrosoftGraphWorkbookChart_Width `json:"width,omitempty"`

	// Worksheet The worksheet containing the current chart. Read-only.
	Worksheet *MicrosoftGraphWorkbookChart_Worksheet `json:"worksheet,omitempty"`
}

// MicrosoftGraphWorkbookChartAxes1 defines model for .
type MicrosoftGraphWorkbookChartAxes1 = map[string]interface{}

// MicrosoftGraphWorkbookChart_Axes Represents chart axes. Read-only.
type MicrosoftGraphWorkbookChart_Axes struct {
	union json.RawMessage
}

// MicrosoftGraphWorkbookChartDataLabels1 defines model for .
type MicrosoftGraphWorkbookChartDataLabels1 = map[string]interface{}

// MicrosoftGraphWorkbookChart_DataLabels Represents the datalabels on the chart. Read-only.
type MicrosoftGraphWorkbookChart_DataLabels struct {
	union json.RawMessage
}

// MicrosoftGraphWorkbookChartFormat1 defines model for .
type MicrosoftGraphWorkbookChartFormat1 = map[string]interface{}

// MicrosoftGraphWorkbookChart_Format Encapsulates the format properties for the chart area. Read-only.
type MicrosoftGraphWorkbookChart_Format struct {
	union json.RawMessage
}

// MicrosoftGraphWorkbookChartHeight0 defines model for .
type MicrosoftGraphWorkbookChartHeight0 = float64

// MicrosoftGraphWorkbookChartHeight1 defines model for .
type MicrosoftGraphWorkbookChartHeight1 = string

// MicrosoftGraphWorkbookChart_Height Represents the height, in points, of the chart object.
type MicrosoftGraphWorkbookChart_Height struct {
	union json.RawMessage
}

// MicrosoftGraphWorkbookChartLeft0 defines model for .
type MicrosoftGraphWorkbookChartLeft0 = float64

// MicrosoftGraphWorkbookChartLeft1 defines model for .
type MicrosoftGraphWorkbookChartLeft1 = string

// MicrosoftGraphWorkbookChart_Left The distance, in points, from the left side of the chart to the worksheet origin.
type MicrosoftGraphWorkbookChart_Left struct {
	union json.RawMessage
}

// MicrosoftGraphWorkbookChartLegend1 defines model for .
type MicrosoftGraphWorkbookChartLegend1 = map[string]interface{}

// MicrosoftGraphWorkbookChart_Legend Represents the legend for the chart. Read-only.
type MicrosoftGraphWorkbookChart_Legend struct {
	union json.RawMessage
}

// MicrosoftGraphWorkbookChartTitle1 defines model for .
type MicrosoftGraphWorkbookChartTitle1 = map[string]interface{}

// MicrosoftGraphWorkbookChart_Title Represents the title of the specified chart, including the text, visibility, position and formating of the title. Read-only.
type MicrosoftGraphWorkbookChart_Title struct {
	union json.RawMessage
}

// MicrosoftGraphWorkbookChartTop0 defines model for .
type MicrosoftGraphWorkbookChartTop0 = float64

// MicrosoftGraphWorkbookChartTop1 defines model for .
type MicrosoftGraphWorkbookChartTop1 = string

// MicrosoftGraphWorkbookChart_Top Represents the distance, in points, from the top edge of the object to the top of row 1 (on a worksheet) or the top of the chart area (on a chart).
type MicrosoftGraphWorkbookChart_Top struct {
	union json.RawMessage
}

// MicrosoftGraphWorkbookChartWidth0 defines model for .
type MicrosoftGraphWorkbookChartWidth0 = float64

// MicrosoftGraphWorkbookChartWidth1 defines model for .
type MicrosoftGraphWorkbookChartWidth1 = string

// MicrosoftGraphWorkbookChart_Width Represents the width, in points, of the chart object.
type MicrosoftGraphWorkbookChart_Width struct {
	union json.RawMessage
}

// MicrosoftGraphWorkbookChartWorksheet1 defines model for .
type MicrosoftGraphWorkbookChartWorksheet1 = map[string]interface{}

// MicrosoftGraphWorkbookChart_Worksheet The worksheet containing the current chart. Read-only.
type MicrosoftGraphWorkbookChart_Worksheet struct {
	union json.RawMessage
}

// MicrosoftGraphWorkbookChartAreaFormat defines model for microsoft.graph.workbookChartAreaFormat.
type MicrosoftGraphWorkbookChartAreaFormat struct {
	// Fill Represents the fill format of an object, which includes background formatting information. Read-only.
	Fill *MicrosoftGraphWorkbookChartAreaFormat_Fill `json:"fill,omitempty"`

	// Font Represents the font attributes (font name, font size, color, etc.) for the current object. Read-only.
	Font *MicrosoftGraphWorkbookChartAreaFormat_Font `json:"font,omitempty"`

	// Id The unique idenfier for an entity. Read-only.
	Id *string `json:"id,omitempty"`
}

// MicrosoftGraphWorkbookChartAreaFormatFill1 defines model for .
type MicrosoftGraphWorkbookChartAreaFormatFill1 = map[string]interface{}

// MicrosoftGraphWorkbookChartAreaFormat_Fill Represents the fill format of an object, which includes background formatting information. Read-only.
type MicrosoftGraphWorkbookChartAreaFormat_Fill struct {
	union json.RawMessage
}

// MicrosoftGraphWorkbookChartAreaFormatFont1 defines model for .
type MicrosoftGraphWorkbookChartAreaFormatFont1 = map[string]interface{}

// MicrosoftGraphWorkbookChartAreaFormat_Font Represents the font attributes (font name, font size, color, etc.) for the current object. Read-only.
type MicrosoftGraphWorkbookChartAreaFormat_Font struct {
	union json.RawMessage
}

// MicrosoftGraphWorkbookChartAxes defines model for microsoft.graph.workbookChartAxes.
type MicrosoftGraphWorkbookChartAxes struct {
	// CategoryAxis Represents the category axis in a chart. Read-only.
	CategoryAxis *MicrosoftGraphWorkbookChartAxes_CategoryAxis `json:"categoryAxis,omitempty"`

	// Id The unique idenfier for an entity. Read-only.
	Id *string `json:"id,omitempty"`

	// SeriesAxis Represents the series axis of a 3-dimensional chart. Read-only.
	SeriesAxis *MicrosoftGraphWorkbookChartAxes_SeriesAxis `json:"seriesAxis,omitempty"`

	// ValueAxis Represents the value axis in an axis. Read-only.
	ValueAxis *MicrosoftGraphWorkbookChartAxes_ValueAxis `json:"valueAxis,omitempty"`
}

// MicrosoftGraphWorkbookChartAxesCategoryAxis1 defines model for .
type MicrosoftGraphWorkbookChartAxesCategoryAxis1 = map[string]interface{}

// MicrosoftGraphWorkbookChartAxes_CategoryAxis Represents the category axis in a chart. Read-only.
type MicrosoftGraphWorkbookChartAxes_CategoryAxis struct {
	union json.RawMessage
}

// MicrosoftGraphWorkbookChartAxesSeriesAxis1 defines model for .
type MicrosoftGraphWorkbookChartAxesSeriesAxis1 = map[string]interface{}

// MicrosoftGraphWorkbookChartAxes_SeriesAxis Represents the series axis of a 3-dimensional chart. Read-only.
type MicrosoftGraphWorkbookChartAxes_SeriesAxis struct {
	union json.RawMessage
}

// MicrosoftGraphWorkbookChartAxesValueAxis1 defines model for .
type MicrosoftGraphWorkbookChartAxesValueAxis1 = map[string]interface{}

// MicrosoftGraphWorkbookChartAxes_ValueAxis Represents the value axis in an axis. Read-only.
type MicrosoftGraphWorkbookChartAxes_ValueAxis struct {
	union json.RawMessage
}

// MicrosoftGraphWorkbookChartAxis defines model for microsoft.graph.workbookChartAxis.
type MicrosoftGraphWorkbookChartAxis struct {
	// Format Represents the formatting of a chart object, which includes line and font formatting. Read-only.
	Format *MicrosoftGraphWorkbookChartAxis_Format `json:"format,omitempty"`

	// Id The unique idenfier for an entity. Read-only.
	Id *string `json:"id,omitempty"`

	// MajorGridlines Returns a gridlines object that represents the major gridlines for the specified axis. Read-only.
	MajorGridlines *MicrosoftGraphWorkbookChartAxis_MajorGridlines `json:"majorGridlines,omitempty"`

	// MajorUnit Represents the interval between two major tick marks. Can be set to a numeric value or an empty string.  The returned value is always a number.
	MajorUnit *MicrosoftGraphWorkbookChartAxis_MajorUnit `json:"majorUnit,omitempty"`

	// Maximum Represents the maximum value on the value axis.  Can be set to a numeric value or an empty string (for automatic axis values).  The returned value is always a number.
	Maximum *MicrosoftGraphWorkbookChartAxis_Maximum `json:"maximum,omitempty"`

	// Minimum Represents the minimum value on the value axis. Can be set to a numeric value or an empty string (for automatic axis values).  The returned value is always a number.
	Minimum *MicrosoftGraphWorkbookChartAxis_Minimum `json:"minimum,omitempty"`

	// MinorGridlines Returns a Gridlines object that represents the minor gridlines for the specified axis. Read-only.
	MinorGridlines *MicrosoftGraphWorkbookChartAxis_MinorGridlines `json:"minorGridlines,omitempty"`

	// MinorUnit Represents the interval between two minor tick marks. 'Can be set to a numeric value or an empty string (for automatic axis values). The returned value is always a number.
	MinorUnit *MicrosoftGraphWorkbookChartAxis_MinorUnit `json:"minorUnit,omitempty"`

	// Title Represents the axis title. Read-only.
	Title *MicrosoftGraphWorkbookChartAxis_Title `json:"title,omitempty"`
}

// MicrosoftGraphWorkbookChartAxisFormat1 defines model for .
type MicrosoftGraphWorkbookChartAxisFormat1 = map[string]interface{}

// MicrosoftGraphWorkbookChartAxis_Format Represents the formatting of a chart object, which includes line and font formatting. Read-only.
type MicrosoftGraphWorkbookChartAxis_Format struct {
	union json.RawMessage
}

// MicrosoftGraphWorkbookChartAxisMajorGridlines1 defines model for .
type MicrosoftGraphWorkbookChartAxisMajorGridlines1 = map[string]interface{}

// MicrosoftGraphWorkbookChartAxis_MajorGridlines Returns a gridlines object that represents the major gridlines for the specified axis. Read-only.
type MicrosoftGraphWorkbookChartAxis_MajorGridlines struct {
	union json.RawMessage
}

// MicrosoftGraphWorkbookChartAxisMajorUnit1 defines model for .
type MicrosoftGraphWorkbookChartAxisMajorUnit1 = map[string]interface{}

// MicrosoftGraphWorkbookChartAxis_MajorUnit Represents the interval between two major tick marks. Can be set to a numeric value or an empty string.  The returned value is always a number.
type MicrosoftGraphWorkbookChartAxis_MajorUnit struct {
	union json.RawMessage
}

// MicrosoftGraphWorkbookChartAxisMaximum1 defines model for .
type MicrosoftGraphWorkbookChartAxisMaximum1 = map[string]interface{}

// MicrosoftGraphWorkbookChartAxis_Maximum Represents the maximum value on the value axis.  Can be set to a numeric value or an empty string (for automatic axis values).  The returned value is always a number.
type MicrosoftGraphWorkbookChartAxis_Maximum struct {
	union json.RawMessage
}

// MicrosoftGraphWorkbookChartAxisMinimum1 defines model for .
type MicrosoftGraphWorkbookChartAxisMinimum1 = map[string]interface{}

// MicrosoftGraphWorkbookChartAxis_Minimum Represents the minimum value on the value axis. Can be set to a numeric value or an empty string (for automatic axis values).  The returned value is always a number.
type MicrosoftGraphWorkbookChartAxis_Minimum struct {
	union json.RawMessage
}

// MicrosoftGraphWorkbookChartAxisMinorGridlines1 defines model for .
type MicrosoftGraphWorkbookChartAxisMinorGridlines1 = map[string]interface{}

// MicrosoftGraphWorkbookChartAxis_MinorGridlines Returns a Gridlines object that represents the minor gridlines for the specified axis. Read-only.
type MicrosoftGraphWorkbookChartAxis_MinorGridlines struct {
	union json.RawMessage
}

// MicrosoftGraphWorkbookChartAxisMinorUnit1 defines model for .
type MicrosoftGraphWorkbookChartAxisMinorUnit1 = map[string]interface{}

// MicrosoftGraphWorkbookChartAxis_MinorUnit Represents the interval between two minor tick marks. 'Can be set to a numeric value or an empty string (for automatic axis values). The returned value is always a number.
type MicrosoftGraphWorkbookChartAxis_MinorUnit struct {
	union json.RawMessage
}

// MicrosoftGraphWorkbookChartAxisTitle1 defines model for .
type MicrosoftGraphWorkbookChartAxisTitle1 = map[string]interface{}

// MicrosoftGraphWorkbookChartAxis_Title Represents the axis title. Read-only.
type MicrosoftGraphWorkbookChartAxis_Title struct {
	union json.RawMessage
}

// MicrosoftGraphWorkbookChartAxisFormat defines model for microsoft.graph.workbookChartAxisFormat.
type MicrosoftGraphWorkbookChartAxisFormat struct {
	// Font Represents the font attributes (font name, font size, color, etc.) for a chart axis element. Read-only.
	Font *MicrosoftGraphWorkbookChartAxisFormat_Font `json:"font,omitempty"`

	// Id The unique idenfier for an entity. Read-only.
	Id *string `json:"id,omitempty"`

	// Line Represents chart line formatting. Read-only.
	Line *MicrosoftGraphWorkbookChartAxisFormat_Line `json:"line,omitempty"`
}

// MicrosoftGraphWorkbookChartAxisFormatFont1 defines model for .
type MicrosoftGraphWorkbookChartAxisFormatFont1 = map[string]interface{}

// MicrosoftGraphWorkbookChartAxisFormat_Font Represents the font attributes (font name, font size, color, etc.) for a chart axis element. Read-only.
type MicrosoftGraphWorkbookChartAxisFormat_Font struct {
	union json.RawMessage
}

// MicrosoftGraphWorkbookChartAxisFormatLine1 defines model for .
type MicrosoftGraphWorkbookChartAxisFormatLine1 = map[string]interface{}

// MicrosoftGraphWorkbookChartAxisFormat_Line Represents chart line formatting. Read-only.
type MicrosoftGraphWorkbookChartAxisFormat_Line struct {
	union json.RawMessage
}

// MicrosoftGraphWorkbookChartAxisTitle defines model for microsoft.graph.workbookChartAxisTitle.
type MicrosoftGraphWorkbookChartAxisTitle struct {
	// Format Represents the formatting of chart axis title. Read-only.
	Format *MicrosoftGraphWorkbookChartAxisTitle_Format `json:"format,omitempty"`

	// Id The unique idenfier for an entity. Read-only.
	Id *string `json:"id,omitempty"`

	// Text Represents the axis title.
	Text *string `json:"text"`

	// Visible A boolean that specifies the visibility of an axis title.
	Visible *bool `json:"visible,omitempty"`
}

// MicrosoftGraphWorkbookChartAxisTitleFormat1 defines model for .
type MicrosoftGraphWorkbookChartAxisTitleFormat1 = map[string]interface{}

// MicrosoftGraphWorkbookChartAxisTitle_Format Represents the formatting of chart axis title. Read-only.
type MicrosoftGraphWorkbookChartAxisTitle_Format struct {
	union json.RawMessage
}

// MicrosoftGraphWorkbookChartAxisTitleFormat defines model for microsoft.graph.workbookChartAxisTitleFormat.
type MicrosoftGraphWorkbookChartAxisTitleFormat struct {
	// Font Represents the font attributes, such as font name, font size, color, etc. of chart axis title object. Read-only.
	Font *MicrosoftGraphWorkbookChartAxisTitleFormat_Font `json:"font,omitempty"`

	// Id The unique idenfier for an entity. Read-only.
	Id *string `json:"id,omitempty"`
}

// MicrosoftGraphWorkbookChartAxisTitleFormatFont1 defines model for .
type MicrosoftGraphWorkbookChartAxisTitleFormatFont1 = map[string]interface{}

// MicrosoftGraphWorkbookChartAxisTitleFormat_Font Represents the font attributes, such as font name, font size, color, etc. of chart axis title object. Read-only.
type MicrosoftGraphWorkbookChartAxisTitleFormat_Font struct {
	union json.RawMessage
}

// MicrosoftGraphWorkbookChartDataLabelFormat defines model for microsoft.graph.workbookChartDataLabelFormat.
type MicrosoftGraphWorkbookChartDataLabelFormat struct {
	// Fill Represents the fill format of the current chart data label. Read-only.
	Fill *MicrosoftGraphWorkbookChartDataLabelFormat_Fill `json:"fill,omitempty"`

	// Font Represents the font attributes (font name, font size, color, etc.) for a chart data label. Read-only.
	Font *MicrosoftGraphWorkbookChartDataLabelFormat_Font `json:"font,omitempty"`

	// Id The unique idenfier for an entity. Read-only.
	Id *string `json:"id,omitempty"`
}

// MicrosoftGraphWorkbookChartDataLabelFormatFill1 defines model for .
type MicrosoftGraphWorkbookChartDataLabelFormatFill1 = map[string]interface{}

// MicrosoftGraphWorkbookChartDataLabelFormat_Fill Represents the fill format of the current chart data label. Read-only.
type MicrosoftGraphWorkbookChartDataLabelFormat_Fill struct {
	union json.RawMessage
}

// MicrosoftGraphWorkbookChartDataLabelFormatFont1 defines model for .
type MicrosoftGraphWorkbookChartDataLabelFormatFont1 = map[string]interface{}

// MicrosoftGraphWorkbookChartDataLabelFormat_Font Represents the font attributes (font name, font size, color, etc.) for a chart data label. Read-only.
type MicrosoftGraphWorkbookChartDataLabelFormat_Font struct {
	union json.RawMessage
}

// MicrosoftGraphWorkbookChartDataLabels defines model for microsoft.graph.workbookChartDataLabels.
type MicrosoftGraphWorkbookChartDataLabels struct {
	// Format Represents the format of chart data labels, which includes fill and font formatting. Read-only.
	Format *MicrosoftGraphWorkbookChartDataLabels_Format `json:"format,omitempty"`

	// Id The unique idenfier for an entity. Read-only.
	Id *string `json:"id,omitempty"`

	// Position DataLabelPosition value that represents the position of the data label. The possible values are: None, Center, InsideEnd, InsideBase, OutsideEnd, Left, Right, Top, Bottom, BestFit, Callout.
	Position *string `json:"position"`

	// Separator String representing the separator used for the data labels on a chart.
	Separator *string `json:"separator"`

	// ShowBubbleSize Boolean value representing if the data label bubble size is visible or not.
	ShowBubbleSize *bool `json:"showBubbleSize"`

	// ShowCategoryName Boolean value representing if the data label category name is visible or not.
	ShowCategoryName *bool `json:"showCategoryName"`

	// ShowLegendKey Boolean value representing if the data label legend key is visible or not.
	ShowLegendKey *bool `json:"showLegendKey"`

	// ShowPercentage Boolean value representing if the data label percentage is visible or not.
	ShowPercentage *bool `json:"showPercentage"`

	// ShowSeriesName Boolean value representing if the data label series name is visible or not.
	ShowSeriesName *bool `json:"showSeriesName"`

	// ShowValue Boolean value representing if the data label value is visible or not.
	ShowValue *bool `json:"showValue"`
}

// MicrosoftGraphWorkbookChartDataLabelsFormat1 defines model for .
type MicrosoftGraphWorkbookChartDataLabelsFormat1 = map[string]interface{}

// MicrosoftGraphWorkbookChartDataLabels_Format Represents the format of chart data labels, which includes fill and font formatting. Read-only.
type MicrosoftGraphWorkbookChartDataLabels_Format struct {
	union json.RawMessage
}

// MicrosoftGraphWorkbookChartFill defines model for microsoft.graph.workbookChartFill.
type MicrosoftGraphWorkbookChartFill struct {
	// Id The unique idenfier for an entity. Read-only.
	Id *string `json:"id,omitempty"`
}

// MicrosoftGraphWorkbookChartFont defines model for microsoft.graph.workbookChartFont.
type MicrosoftGraphWorkbookChartFont struct {
	// Bold Represents the bold status of font.
	Bold *bool `json:"bold"`

	// Color HTML color code representation of the text color. E.g. #FF0000 represents Red.
	Color *string `json:"color"`

	// Id The unique idenfier for an entity. Read-only.
	Id *string `json:"id,omitempty"`

	// Italic Represents the italic status of the font.
	Italic *bool `json:"italic"`

	// Name Font name (e.g. 'Calibri')
	Name *string `json:"name"`

	// Size Size of the font (e.g. 11)
	Size *MicrosoftGraphWorkbookChartFont_Size `json:"size"`

	// Underline Type of underline applied to the font. The possible values are: None, Single.
	Underline *string `json:"underline"`
}

// MicrosoftGraphWorkbookChartFontSize0 defines model for .
type MicrosoftGraphWorkbookChartFontSize0 = float64

// MicrosoftGraphWorkbookChartFontSize1 defines model for .
type MicrosoftGraphWorkbookChartFontSize1 = string

// MicrosoftGraphWorkbookChartFont_Size Size of the font (e.g. 11)
type MicrosoftGraphWorkbookChartFont_Size struct {
	union json.RawMessage
}

// MicrosoftGraphWorkbookChartGridlines defines model for microsoft.graph.workbookChartGridlines.
type MicrosoftGraphWorkbookChartGridlines struct {
	// Format Represents the formatting of chart gridlines. Read-only.
	Format *MicrosoftGraphWorkbookChartGridlines_Format `json:"format,omitempty"`

	// Id The unique idenfier for an entity. Read-only.
	Id *string `json:"id,omitempty"`

	// Visible Boolean value representing if the axis gridlines are visible or not.
	Visible *bool `json:"visible,omitempty"`
}

// MicrosoftGraphWorkbookChartGridlinesFormat1 defines model for .
type MicrosoftGraphWorkbookChartGridlinesFormat1 = map[string]interface{}

// MicrosoftGraphWorkbookChartGridlines_Format Represents the formatting of chart gridlines. Read-only.
type MicrosoftGraphWorkbookChartGridlines_Format struct {
	union json.RawMessage
}

// MicrosoftGraphWorkbookChartGridlinesFormat defines model for microsoft.graph.workbookChartGridlinesFormat.
type MicrosoftGraphWorkbookChartGridlinesFormat struct {
	// Id The unique idenfier for an entity. Read-only.
	Id *string `json:"id,omitempty"`

	// Line Represents chart line formatting. Read-only.
	Line *MicrosoftGraphWorkbookChartGridlinesFormat_Line `json:"line,omitempty"`
}

// MicrosoftGraphWorkbookChartGridlinesFormatLine1 defines model for .
type MicrosoftGraphWorkbookChartGridlinesFormatLine1 = map[string]interface{}

// MicrosoftGraphWorkbookChartGridlinesFormat_Line Represents chart line formatting. Read-only.
type MicrosoftGraphWorkbookChartGridlinesFormat_Line struct {
	union json.RawMessage
}

// MicrosoftGraphWorkbookChartLegend defines model for microsoft.graph.workbookChartLegend.
type MicrosoftGraphWorkbookChartLegend struct {
	// Format Represents the formatting of a chart legend, which includes fill and font formatting. Read-only.
	Format *MicrosoftGraphWorkbookChartLegend_Format `json:"format,omitempty"`

	// Id The unique idenfier for an entity. Read-only.
	Id *string `json:"id,omitempty"`

	// Overlay Boolean value for whether the chart legend should overlap with the main body of the chart.
	Overlay *bool `json:"overlay"`

	// Position Represents the position of the legend on the chart. The possible values are: Top, Bottom, Left, Right, Corner, Custom.
	Position *string `json:"position"`

	// Visible A boolean value the represents the visibility of a ChartLegend object.
	Visible *bool `json:"visible,omitempty"`
}

// MicrosoftGraphWorkbookChartLegendFormat1 defines model for .
type MicrosoftGraphWorkbookChartLegendFormat1 = map[string]interface{}

// MicrosoftGraphWorkbookChartLegend_Format Represents the formatting of a chart legend, which includes fill and font formatting. Read-only.
type MicrosoftGraphWorkbookChartLegend_Format struct {
	union json.RawMessage
}

// MicrosoftGraphWorkbookChartLegendFormat defines model for microsoft.graph.workbookChartLegendFormat.
type MicrosoftGraphWorkbookChartLegendFormat struct {
	// Fill Represents the fill format of an object, which includes background formating information. Read-only.
	Fill *MicrosoftGraphWorkbookChartLegendFormat_Fill `json:"fill,omitempty"`

	// Font Represents the font attributes such as font name, font size, color, etc. of a chart legend. Read-only.
	Font *MicrosoftGraphWorkbookChartLegendFormat_Font `json:"font,omitempty"`

	// Id The unique idenfier for an entity. Read-only.
	Id *string `json:"id,omitempty"`
}

// MicrosoftGraphWorkbookChartLegendFormatFill1 defines model for .
type MicrosoftGraphWorkbookChartLegendFormatFill1 = map[string]interface{}

// MicrosoftGraphWorkbookChartLegendFormat_Fill Represents the fill format of an object, which includes background formating information. Read-only.
type MicrosoftGraphWorkbookChartLegendFormat_Fill struct {
	union json.RawMessage
}

// MicrosoftGraphWorkbookChartLegendFormatFont1 defines model for .
type MicrosoftGraphWorkbookChartLegendFormatFont1 = map[string]interface{}

// MicrosoftGraphWorkbookChartLegendFormat_Font Represents the font attributes such as font name, font size, color, etc. of a chart legend. Read-only.
type MicrosoftGraphWorkbookChartLegendFormat_Font struct {
	union json.RawMessage
}

// MicrosoftGraphWorkbookChartLineFormat defines model for microsoft.graph.workbookChartLineFormat.
type MicrosoftGraphWorkbookChartLineFormat struct {
	// Color HTML color code representing the color of lines in the chart.
	Color *string `json:"color"`

	// Id The unique idenfier for an entity. Read-only.
	Id *string `json:"id,omitempty"`
}

// MicrosoftGraphWorkbookChartPoint defines model for microsoft.graph.workbookChartPoint.
type MicrosoftGraphWorkbookChartPoint struct {
	// Format Encapsulates the format properties chart point. Read-only.
	Format *MicrosoftGraphWorkbookChartPoint_Format `json:"format,omitempty"`

	// Id The unique idenfier for an entity. Read-only.
	Id *string `json:"id,omitempty"`

	// Value Returns the value of a chart point. Read-only.
	Value *MicrosoftGraphWorkbookChartPoint_Value `json:"value,omitempty"`
}

// MicrosoftGraphWorkbookChartPointFormat1 defines model for .
type MicrosoftGraphWorkbookChartPointFormat1 = map[string]interface{}

// MicrosoftGraphWorkbookChartPoint_Format Encapsulates the format properties chart point. Read-only.
type MicrosoftGraphWorkbookChartPoint_Format struct {
	union json.RawMessage
}

// MicrosoftGraphWorkbookChartPointValue1 defines model for .
type MicrosoftGraphWorkbookChartPointValue1 = map[string]interface{}

// MicrosoftGraphWorkbookChartPoint_Value Returns the value of a chart point. Read-only.
type MicrosoftGraphWorkbookChartPoint_Value struct {
	union json.RawMessage
}

// MicrosoftGraphWorkbookChartPointFormat defines model for microsoft.graph.workbookChartPointFormat.
type MicrosoftGraphWorkbookChartPointFormat struct {
	// Fill Represents the fill format of a chart, which includes background formating information. Read-only.
	Fill *MicrosoftGraphWorkbookChartPointFormat_Fill `json:"fill,omitempty"`

	// Id The unique idenfier for an entity. Read-only.
	Id *string `json:"id,omitempty"`
}

// MicrosoftGraphWorkbookChartPointFormatFill1 defines model for .
type MicrosoftGraphWorkbookChartPointFormatFill1 = map[string]interface{}

// MicrosoftGraphWorkbookChartPointFormat_Fill Represents the fill format of a chart, which includes background formating information. Read-only.
type MicrosoftGraphWorkbookChartPointFormat_Fill struct {
	union json.RawMessage
}

// MicrosoftGraphWorkbookChartSeries defines model for microsoft.graph.workbookChartSeries.
type MicrosoftGraphWorkbookChartSeries struct {
	// Format Represents the formatting of a chart series, which includes fill and line formatting. Read-only.
	Format *MicrosoftGraphWorkbookChartSeries_Format `json:"format,omitempty"`

	// Id The unique idenfier for an entity. Read-only.
	Id *string `json:"id,omitempty"`

	// Name Represents the name of a series in a chart.
	Name *string `json:"name"`

	// Points Represents a collection of all points in the series. Read-only.
	Points *[]MicrosoftGraphWorkbookChartPoint `json:"points,omitempty"`
}

// MicrosoftGraphWorkbookChartSeriesFormat1 defines model for .
type MicrosoftGraphWorkbookChartSeriesFormat1 = map[string]interface{}

// MicrosoftGraphWorkbookChartSeries_Format Represents the formatting of a chart series, which includes fill and line formatting. Read-only.
type MicrosoftGraphWorkbookChartSeries_Format struct {
	union json.RawMessage
}

// MicrosoftGraphWorkbookChartSeriesFormat defines model for microsoft.graph.workbookChartSeriesFormat.
type MicrosoftGraphWorkbookChartSeriesFormat struct {
	// Fill Represents the fill format of a chart series, which includes background formating information. Read-only.
	Fill *MicrosoftGraphWorkbookChartSeriesFormat_Fill `json:"fill,omitempty"`

	// Id The unique idenfier for an entity. Read-only.
	Id *string `json:"id,omitempty"`

	// Line Represents line formatting. Read-only.
	Line *MicrosoftGraphWorkbookChartSeriesFormat_Line `json:"line,omitempty"`
}

// MicrosoftGraphWorkbookChartSeriesFormatFill1 defines model for .
type MicrosoftGraphWorkbookChartSeriesFormatFill1 = map[string]interface{}

// MicrosoftGraphWorkbookChartSeriesFormat_Fill Represents the fill format of a chart series, which includes background formating information. Read-only.
type MicrosoftGraphWorkbookChartSeriesFormat_Fill struct {
	union json.RawMessage
}

// MicrosoftGraphWorkbookChartSeriesFormatLine1 defines model for .
type MicrosoftGraphWorkbookChartSeriesFormatLine1 = map[string]interface{}

// MicrosoftGraphWorkbookChartSeriesFormat_Line Represents line formatting. Read-only.
type MicrosoftGraphWorkbookChartSeriesFormat_Line struct {
	union json.RawMessage
}

// MicrosoftGraphWorkbookChartTitle defines model for microsoft.graph.workbookChartTitle.
type MicrosoftGraphWorkbookChartTitle struct {
	// Format Represents the formatting of a chart title, which includes fill and font formatting. Read-only.
	Format *MicrosoftGraphWorkbookChartTitle_Format `json:"format,omitempty"`

	// Id The unique idenfier for an entity. Read-only.
	Id *string `json:"id,omitempty"`

	// Overlay Boolean value representing if the chart title will overlay the chart or not.
	Overlay *bool `json:"overlay"`

	// Text Represents the title text of a chart.
	Text *string `json:"text"`

	// Visible A boolean value the represents the visibility of a chart title object.
	Visible *bool `json:"visible,omitempty"`
}

// MicrosoftGraphWorkbookChartTitleFormat1 defines model for .
type MicrosoftGraphWorkbookChartTitleFormat1 = map[string]interface{}

// MicrosoftGraphWorkbookChartTitle_Format Represents the formatting of a chart title, which includes fill and font formatting. Read-only.
type MicrosoftGraphWorkbookChartTitle_Format struct {
	union json.RawMessage
}

// MicrosoftGraphWorkbookChartTitleFormat defines model for microsoft.graph.workbookChartTitleFormat.
type MicrosoftGraphWorkbookChartTitleFormat struct {
	// Fill Represents the fill format of an object, which includes background formatting information. Read-only.
	Fill *MicrosoftGraphWorkbookChartTitleFormat_Fill `json:"fill,omitempty"`

	// Font Represents the font attributes (font name, font size, color, etc.) for the current object. Read-only.
	Font *MicrosoftGraphWorkbookChartTitleFormat_Font `json:"font,omitempty"`

	// Id The unique idenfier for an entity. Read-only.
	Id *string `json:"id,omitempty"`
}

// MicrosoftGraphWorkbookChartTitleFormatFill1 defines model for .
type MicrosoftGraphWorkbookChartTitleFormatFill1 = map[string]interface{}

// MicrosoftGraphWorkbookChartTitleFormat_Fill Represents the fill format of an object, which includes background formatting information. Read-only.
type MicrosoftGraphWorkbookChartTitleFormat_Fill struct {
	union json.RawMessage
}

// MicrosoftGraphWorkbookChartTitleFormatFont1 defines model for .
type MicrosoftGraphWorkbookChartTitleFormatFont1 = map[string]interface{}

// MicrosoftGraphWorkbookChartTitleFormat_Font Represents the font attributes (font name, font size, color, etc.) for the current object. Read-only.
type MicrosoftGraphWorkbookChartTitleFormat_Font struct {
	union json.RawMessage
}

// MicrosoftGraphWorkbookComment defines model for microsoft.graph.workbookComment.
type MicrosoftGraphWorkbookComment struct {
	// Content The content of comment.
	Content *string `json:"content"`

	// ContentType Indicates the type for the comment.
	ContentType *string `json:"contentType,omitempty"`

	// Id The unique idenfier for an entity. Read-only.
	Id      *string                               `json:"id,omitempty"`
	Replies *[]MicrosoftGraphWorkbookCommentReply `json:"replies,omitempty"`
}

// MicrosoftGraphWorkbookCommentReply defines model for microsoft.graph.workbookCommentReply.
type MicrosoftGraphWorkbookCommentReply struct {
	// Content The content of a comment reply.
	Content *string `json:"content"`

	// ContentType Indicates the type for the comment reply.
	ContentType *string `json:"contentType,omitempty"`

	// Id The unique idenfier for an entity. Read-only.
	Id *string `json:"id,omitempty"`
}

// MicrosoftGraphWorkbookFilter defines model for microsoft.graph.workbookFilter.
type MicrosoftGraphWorkbookFilter struct {
	// Criteria The currently applied filter on the given column. Read-only.
	Criteria *MicrosoftGraphWorkbookFilter_Criteria `json:"criteria,omitempty"`

	// Id The unique idenfier for an entity. Read-only.
	Id *string `json:"id,omitempty"`
}

// MicrosoftGraphWorkbookFilterCriteria1 defines model for .
type MicrosoftGraphWorkbookFilterCriteria1 = map[string]interface{}

// MicrosoftGraphWorkbookFilter_Criteria The currently applied filter on the given column. Read-only.
type MicrosoftGraphWorkbookFilter_Criteria struct {
	union json.RawMessage
}

// MicrosoftGraphWorkbookFilterCriteria defines model for microsoft.graph.workbookFilterCriteria.
type MicrosoftGraphWorkbookFilterCriteria struct {
	Color           *string                                      `json:"color"`
	Criterion1      *string                                      `json:"criterion1"`
	Criterion2      *string                                      `json:"criterion2"`
	DynamicCriteria *string                                      `json:"dynamicCriteria,omitempty"`
	FilterOn        *string                                      `json:"filterOn,omitempty"`
	Icon            *MicrosoftGraphWorkbookFilterCriteria_Icon   `json:"icon,omitempty"`
	Operator        *string                                      `json:"operator,omitempty"`
	Values          *MicrosoftGraphWorkbookFilterCriteria_Values `json:"values,omitempty"`
}

// MicrosoftGraphWorkbookFilterCriteriaIcon1 defines model for .
type MicrosoftGraphWorkbookFilterCriteriaIcon1 = map[string]interface{}

// MicrosoftGraphWorkbookFilterCriteria_Icon defines model for MicrosoftGraphWorkbookFilterCriteria.Icon.
type MicrosoftGraphWorkbookFilterCriteria_Icon struct {
	union json.RawMessage
}

// MicrosoftGraphWorkbookFilterCriteriaValues1 defines model for .
type MicrosoftGraphWorkbookFilterCriteriaValues1 = map[string]interface{}

// MicrosoftGraphWorkbookFilterCriteria_Values defines model for MicrosoftGraphWorkbookFilterCriteria.Values.
type MicrosoftGraphWorkbookFilterCriteria_Values struct {
	union json.RawMessage
}

// MicrosoftGraphWorkbookFunctions defines model for microsoft.graph.workbookFunctions.
type MicrosoftGraphWorkbookFunctions struct {
	// Id The unique idenfier for an entity. Read-only.
	Id *string `json:"id,omitempty"`
}

// MicrosoftGraphWorkbookIcon defines model for microsoft.graph.workbookIcon.
type MicrosoftGraphWorkbookIcon struct {
	// Index Represents the index of the icon in the given set.
	Index *int32 `json:"index,omitempty"`

	// Set Represents the set that the icon is part of. The possible values are: Invalid, ThreeArrows, ThreeArrowsGray, ThreeFlags, ThreeTrafficLights1, ThreeTrafficLights2, ThreeSigns, ThreeSymbols, ThreeSymbols2, FourArrows, FourArrowsGray, FourRedToBlack, FourRating, FourTrafficLights, FiveArrows, FiveArrowsGray, FiveRating, FiveQuarters, ThreeStars, ThreeTriangles, FiveBoxes.
	Set *string `json:"set,omitempty"`
}

// MicrosoftGraphWorkbookNamedItem defines model for microsoft.graph.workbookNamedItem.
type MicrosoftGraphWorkbookNamedItem struct {
	// Comment Represents the comment associated with this name.
	Comment *string `json:"comment"`

	// Id The unique idenfier for an entity. Read-only.
	Id *string `json:"id,omitempty"`

	// Name The name of the object. Read-only.
	Name *string `json:"name"`

	// Scope Indicates whether the name is scoped to the workbook or to a specific worksheet. Read-only.
	Scope *string `json:"scope,omitempty"`

	// Type Indicates what type of reference is associated with the name. The possible values are: String, Integer, Double, Boolean, Range. Read-only.
	Type *string `json:"type"`

	// Value Represents the formula that the name is defined to refer to. E.g. =Sheet14!$B$2:$H$12, =4.75, etc. Read-only.
	Value *MicrosoftGraphWorkbookNamedItem_Value `json:"value,omitempty"`

	// Visible Specifies whether the object is visible or not.
	Visible *bool `json:"visible,omitempty"`

	// Worksheet Returns the worksheet on which the named item is scoped to. Available only if the item is scoped to the worksheet. Read-only.
	Worksheet *MicrosoftGraphWorkbookNamedItem_Worksheet `json:"worksheet,omitempty"`
}

// MicrosoftGraphWorkbookNamedItemValue1 defines model for .
type MicrosoftGraphWorkbookNamedItemValue1 = map[string]interface{}

// MicrosoftGraphWorkbookNamedItem_Value Represents the formula that the name is defined to refer to. E.g. =Sheet14!$B$2:$H$12, =4.75, etc. Read-only.
type MicrosoftGraphWorkbookNamedItem_Value struct {
	union json.RawMessage
}

// MicrosoftGraphWorkbookNamedItemWorksheet1 defines model for .
type MicrosoftGraphWorkbookNamedItemWorksheet1 = map[string]interface{}

// MicrosoftGraphWorkbookNamedItem_Worksheet Returns the worksheet on which the named item is scoped to. Available only if the item is scoped to the worksheet. Read-only.
type MicrosoftGraphWorkbookNamedItem_Worksheet struct {
	union json.RawMessage
}

// MicrosoftGraphWorkbookOperation defines model for microsoft.graph.workbookOperation.
type MicrosoftGraphWorkbookOperation struct {
	// Error The error returned by the operation.
	Error *MicrosoftGraphWorkbookOperation_Error `json:"error,omitempty"`

	// Id The unique idenfier for an entity. Read-only.
	Id *string `json:"id,omitempty"`

	// ResourceLocation The resource URI for the result.
	ResourceLocation *string                                `json:"resourceLocation"`
	Status           *MicrosoftGraphWorkbookOperationStatus `json:"status,omitempty"`
}

// MicrosoftGraphWorkbookOperationError1 defines model for .
type MicrosoftGraphWorkbookOperationError1 = map[string]interface{}

// MicrosoftGraphWorkbookOperation_Error The error returned by the operation.
type MicrosoftGraphWorkbookOperation_Error struct {
	union json.RawMessage
}

// MicrosoftGraphWorkbookOperationError defines model for microsoft.graph.workbookOperationError.
type MicrosoftGraphWorkbookOperationError struct {
	// Code The error code.
	Code       *string                                          `json:"code"`
	InnerError *MicrosoftGraphWorkbookOperationError_InnerError `json:"innerError,omitempty"`

	// Message The error message.
	Message *string `json:"message"`
}

// MicrosoftGraphWorkbookOperationErrorInnerError1 defines model for .
type MicrosoftGraphWorkbookOperationErrorInnerError1 = map[string]interface{}

// MicrosoftGraphWorkbookOperationError_InnerError defines model for MicrosoftGraphWorkbookOperationError.InnerError.
type MicrosoftGraphWorkbookOperationError_InnerError struct {
	union json.RawMessage
}

// MicrosoftGraphWorkbookOperationStatus defines model for microsoft.graph.workbookOperationStatus.
type MicrosoftGraphWorkbookOperationStatus string

// MicrosoftGraphWorkbookPivotTable defines model for microsoft.graph.workbookPivotTable.
type MicrosoftGraphWorkbookPivotTable struct {
	// Id The unique idenfier for an entity. Read-only.
	Id *string `json:"id,omitempty"`

	// Name Name of the PivotTable.
	Name *string `json:"name"`

	// Worksheet The worksheet containing the current PivotTable. Read-only.
	Worksheet *MicrosoftGraphWorkbookPivotTable_Worksheet `json:"worksheet,omitempty"`
}

// MicrosoftGraphWorkbookPivotTableWorksheet1 defines model for .
type MicrosoftGraphWorkbookPivotTableWorksheet1 = map[string]interface{}

// MicrosoftGraphWorkbookPivotTable_Worksheet The worksheet containing the current PivotTable. Read-only.
type MicrosoftGraphWorkbookPivotTable_Worksheet struct {
	union json.RawMessage
}

// MicrosoftGraphWorkbookSortField defines model for microsoft.graph.workbookSortField.
type MicrosoftGraphWorkbookSortField struct {
	// Ascending Represents whether the sorting is done in an ascending fashion.
	Ascending *bool `json:"ascending,omitempty"`

	// Color Represents the color that is the target of the condition if the sorting is on font or cell color.
	Color *string `json:"color"`

	// DataOption Represents additional sorting options for this field. The possible values are: Normal, TextAsNumber.
	DataOption *string `json:"dataOption,omitempty"`

	// Icon Represents the icon that is the target of the condition if the sorting is on the cell's icon.
	Icon *MicrosoftGraphWorkbookSortField_Icon `json:"icon,omitempty"`

	// Key Represents the column (or row, depending on the sort orientation) that the condition is on. Represented as an offset from the first column (or row).
	Key *int32 `json:"key,omitempty"`

	// SortOn Represents the type of sorting of this condition. The possible values are: Value, CellColor, FontColor, Icon.
	SortOn *string `json:"sortOn,omitempty"`
}

// MicrosoftGraphWorkbookSortFieldIcon1 defines model for .
type MicrosoftGraphWorkbookSortFieldIcon1 = map[string]interface{}

// MicrosoftGraphWorkbookSortField_Icon Represents the icon that is the target of the condition if the sorting is on the cell's icon.
type MicrosoftGraphWorkbookSortField_Icon struct {
	union json.RawMessage
}

// MicrosoftGraphWorkbookTable defines model for microsoft.graph.workbookTable.
type MicrosoftGraphWorkbookTable struct {
	// Columns Represents a collection of all the columns in the table. Read-only.
	Columns *[]MicrosoftGraphWorkbookTableColumn `json:"columns,omitempty"`

	// HighlightFirstColumn Indicates whether the first column contains special formatting.
	HighlightFirstColumn *bool `json:"highlightFirstColumn,omitempty"`

	// HighlightLastColumn Indicates whether the last column contains special formatting.
	HighlightLastColumn *bool `json:"highlightLastColumn,omitempty"`

	// Id The unique idenfier for an entity. Read-only.
	Id *string `json:"id,omitempty"`

	// LegacyId Legacy Id used in older Excle clients. The value of the identifier remains the same even when the table is renamed. This property should be interpreted as an opaque string value and should not be parsed to any other type. Read-only.
	LegacyId *string `json:"legacyId"`

	// Name Name of the table.
	Name *string `json:"name"`

	// Rows Represents a collection of all the rows in the table. Read-only.
	Rows *[]MicrosoftGraphWorkbookTableRow `json:"rows,omitempty"`

	// ShowBandedColumns Indicates whether the columns show banded formatting in which odd columns are highlighted differently from even ones to make reading the table easier.
	ShowBandedColumns *bool `json:"showBandedColumns,omitempty"`

	// ShowBandedRows Indicates whether the rows show banded formatting in which odd rows are highlighted differently from even ones to make reading the table easier.
	ShowBandedRows *bool `json:"showBandedRows,omitempty"`

	// ShowFilterButton Indicates whether the filter buttons are visible at the top of each column header. Setting this is only allowed if the table contains a header row.
	ShowFilterButton *bool `json:"showFilterButton,omitempty"`

	// ShowHeaders Indicates whether the header row is visible or not. This value can be set to show or remove the header row.
	ShowHeaders *bool `json:"showHeaders,omitempty"`

	// ShowTotals Indicates whether the total row is visible or not. This value can be set to show or remove the total row.
	ShowTotals *bool `json:"showTotals,omitempty"`

	// Sort Represents the sorting for the table. Read-only.
	Sort *MicrosoftGraphWorkbookTable_Sort `json:"sort,omitempty"`

	// Style Constant value that represents the Table style. The possible values are: TableStyleLight1 thru TableStyleLight21, TableStyleMedium1 thru TableStyleMedium28, TableStyleStyleDark1 thru TableStyleStyleDark11. A custom user-defined style present in the workbook can also be specified.
	Style *string `json:"style"`

	// Worksheet The worksheet containing the current table. Read-only.
	Worksheet *MicrosoftGraphWorkbookTable_Worksheet `json:"worksheet,omitempty"`
}

// MicrosoftGraphWorkbookTableSort1 defines model for .
type MicrosoftGraphWorkbookTableSort1 = map[string]interface{}

// MicrosoftGraphWorkbookTable_Sort Represents the sorting for the table. Read-only.
type MicrosoftGraphWorkbookTable_Sort struct {
	union json.RawMessage
}

// MicrosoftGraphWorkbookTableWorksheet1 defines model for .
type MicrosoftGraphWorkbookTableWorksheet1 = map[string]interface{}

// MicrosoftGraphWorkbookTable_Worksheet The worksheet containing the current table. Read-only.
type MicrosoftGraphWorkbookTable_Worksheet struct {
	union json.RawMessage
}

// MicrosoftGraphWorkbookTableColumn defines model for microsoft.graph.workbookTableColumn.
type MicrosoftGraphWorkbookTableColumn struct {
	// Filter Retrieve the filter applied to the column. Read-only.
	Filter *MicrosoftGraphWorkbookTableColumn_Filter `json:"filter,omitempty"`

	// Id The unique idenfier for an entity. Read-only.
	Id *string `json:"id,omitempty"`

	// Index Returns the index number of the column within the columns collection of the table. Zero-indexed. Read-only.
	Index *int32 `json:"index,omitempty"`

	// Name Returns the name of the table column.
	Name *string `json:"name"`

	// Values Represents the raw values of the specified range. The data returned could be of type string, number, or a boolean. Cell that contain an error will return the error string.
	Values *MicrosoftGraphWorkbookTableColumn_Values `json:"values,omitempty"`
}

// MicrosoftGraphWorkbookTableColumnFilter1 defines model for .
type MicrosoftGraphWorkbookTableColumnFilter1 = map[string]interface{}

// MicrosoftGraphWorkbookTableColumn_Filter Retrieve the filter applied to the column. Read-only.
type MicrosoftGraphWorkbookTableColumn_Filter struct {
	union json.RawMessage
}

// MicrosoftGraphWorkbookTableColumnValues1 defines model for .
type MicrosoftGraphWorkbookTableColumnValues1 = map[string]interface{}

// MicrosoftGraphWorkbookTableColumn_Values Represents the raw values of the specified range. The data returned could be of type string, number, or a boolean. Cell that contain an error will return the error string.
type MicrosoftGraphWorkbookTableColumn_Values struct {
	union json.RawMessage
}

// MicrosoftGraphWorkbookTableRow defines model for microsoft.graph.workbookTableRow.
type MicrosoftGraphWorkbookTableRow struct {
	// Id The unique idenfier for an entity. Read-only.
	Id *string `json:"id,omitempty"`

	// Index Returns the index number of the row within the rows collection of the table. Zero-indexed. Read-only.
	Index *int32 `json:"index,omitempty"`

	// Values Represents the raw values of the specified range. The data returned could be of type string, number, or a boolean. Cell that contain an error will return the error string.
	Values *MicrosoftGraphWorkbookTableRow_Values `json:"values,omitempty"`
}

// MicrosoftGraphWorkbookTableRowValues1 defines model for .
type MicrosoftGraphWorkbookTableRowValues1 = map[string]interface{}

// MicrosoftGraphWorkbookTableRow_Values Represents the raw values of the specified range. The data returned could be of type string, number, or a boolean. Cell that contain an error will return the error string.
type MicrosoftGraphWorkbookTableRow_Values struct {
	union json.RawMessage
}

// MicrosoftGraphWorkbookTableSort defines model for microsoft.graph.workbookTableSort.
type MicrosoftGraphWorkbookTableSort struct {
	// Fields Represents the current conditions used to last sort the table. Read-only.
	Fields *[]MicrosoftGraphWorkbookTableSort_Fields_Item `json:"fields,omitempty"`

	// Id The unique idenfier for an entity. Read-only.
	Id *string `json:"id,omitempty"`

	// MatchCase Represents whether the casing impacted the last sort of the table. Read-only.
	MatchCase *bool `json:"matchCase,omitempty"`

	// Method Represents Chinese character ordering method last used to sort the table. The possible values are: PinYin, StrokeCount. Read-only.
	Method *string `json:"method,omitempty"`
}

// MicrosoftGraphWorkbookTableSortFields1 defines model for .
type MicrosoftGraphWorkbookTableSortFields1 = map[string]interface{}

// MicrosoftGraphWorkbookTableSort_Fields_Item defines model for microsoft.graph.workbookTableSort.fields.Item.
type MicrosoftGraphWorkbookTableSort_Fields_Item struct {
	union json.RawMessage
}

// MicrosoftGraphWorkbookWorksheet defines model for microsoft.graph.workbookWorksheet.
type MicrosoftGraphWorkbookWorksheet struct {
	// Charts Returns collection of charts that are part of the worksheet. Read-only.
	Charts *[]MicrosoftGraphWorkbookChart `json:"charts,omitempty"`

	// Id The unique idenfier for an entity. Read-only.
	Id *string `json:"id,omitempty"`

	// Name The display name of the worksheet.
	Name *string `json:"name"`

	// Names Returns collection of names that are associated with the worksheet. Read-only.
	Names *[]MicrosoftGraphWorkbookNamedItem `json:"names,omitempty"`

	// PivotTables Collection of PivotTables that are part of the worksheet.
	PivotTables *[]MicrosoftGraphWorkbookPivotTable `json:"pivotTables,omitempty"`

	// Position The zero-based position of the worksheet within the workbook.
	Position *int32 `json:"position,omitempty"`

	// Protection Returns sheet protection object for a worksheet. Read-only.
	Protection *MicrosoftGraphWorkbookWorksheet_Protection `json:"protection,omitempty"`

	// Tables Collection of tables that are part of the worksheet. Read-only.
	Tables *[]MicrosoftGraphWorkbookTable `json:"tables,omitempty"`

	// Visibility The Visibility of the worksheet. The possible values are: Visible, Hidden, VeryHidden.
	Visibility *string `json:"visibility,omitempty"`
}

// MicrosoftGraphWorkbookWorksheetProtection1 defines model for .
type MicrosoftGraphWorkbookWorksheetProtection1 = map[string]interface{}

// MicrosoftGraphWorkbookWorksheet_Protection Returns sheet protection object for a worksheet. Read-only.
type MicrosoftGraphWorkbookWorksheet_Protection struct {
	union json.RawMessage
}

// MicrosoftGraphWorkbookWorksheetProtection defines model for microsoft.graph.workbookWorksheetProtection.
type MicrosoftGraphWorkbookWorksheetProtection struct {
	// Id The unique idenfier for an entity. Read-only.
	Id *string `json:"id,omitempty"`

	// Options Sheet protection options. Read-only.
	Options *MicrosoftGraphWorkbookWorksheetProtection_Options `json:"options,omitempty"`

	// Protected Indicates if the worksheet is protected.  Read-only.
	Protected *bool `json:"protected,omitempty"`
}

// MicrosoftGraphWorkbookWorksheetProtectionOptions1 defines model for .
type MicrosoftGraphWorkbookWorksheetProtectionOptions1 = map[string]interface{}

// MicrosoftGraphWorkbookWorksheetProtection_Options Sheet protection options. Read-only.
type MicrosoftGraphWorkbookWorksheetProtection_Options struct {
	union json.RawMessage
}

// MicrosoftGraphWorkbookWorksheetProtectionOptions defines model for microsoft.graph.workbookWorksheetProtectionOptions.
type MicrosoftGraphWorkbookWorksheetProtectionOptions struct {
	// AllowAutoFilter Represents the worksheet protection option of allowing using auto filter feature.
	AllowAutoFilter *bool `json:"allowAutoFilter,omitempty"`

	// AllowDeleteColumns Represents the worksheet protection option of allowing deleting columns.
	AllowDeleteColumns *bool `json:"allowDeleteColumns,omitempty"`

	// AllowDeleteRows Represents the worksheet protection option of allowing deleting rows.
	AllowDeleteRows *bool `json:"allowDeleteRows,omitempty"`

	// AllowFormatCells Represents the worksheet protection option of allowing formatting cells.
	AllowFormatCells *bool `json:"allowFormatCells,omitempty"`

	// AllowFormatColumns Represents the worksheet protection option of allowing formatting columns.
	AllowFormatColumns *bool `json:"allowFormatColumns,omitempty"`

	// AllowFormatRows Represents the worksheet protection option of allowing formatting rows.
	AllowFormatRows *bool `json:"allowFormatRows,omitempty"`

	// AllowInsertColumns Represents the worksheet protection option of allowing inserting columns.
	AllowInsertColumns *bool `json:"allowInsertColumns,omitempty"`

	// AllowInsertHyperlinks Represents the worksheet protection option of allowing inserting hyperlinks.
	AllowInsertHyperlinks *bool `json:"allowInsertHyperlinks,omitempty"`

	// AllowInsertRows Represents the worksheet protection option of allowing inserting rows.
	AllowInsertRows *bool `json:"allowInsertRows,omitempty"`

	// AllowPivotTables Represents the worksheet protection option of allowing using pivot table feature.
	AllowPivotTables *bool `json:"allowPivotTables,omitempty"`

	// AllowSort Represents the worksheet protection option of allowing using sort feature.
	AllowSort *bool `json:"allowSort,omitempty"`
}

// MicrosoftGraphWorkingHours defines model for microsoft.graph.workingHours.
type MicrosoftGraphWorkingHours struct {
	// DaysOfWeek The days of the week on which the user works.
	DaysOfWeek *[]MicrosoftGraphWorkingHours_DaysOfWeek_Item `json:"daysOfWeek,omitempty"`

	// EndTime The time of the day that the user stops working.
	EndTime *string `json:"endTime"`

	// StartTime The time of the day that the user starts working.
	StartTime *string `json:"startTime"`

	// TimeZone The time zone to which the working hours apply.
	TimeZone *MicrosoftGraphWorkingHours_TimeZone `json:"timeZone,omitempty"`
}

// MicrosoftGraphWorkingHoursDaysOfWeek1 defines model for .
type MicrosoftGraphWorkingHoursDaysOfWeek1 = map[string]interface{}

// MicrosoftGraphWorkingHours_DaysOfWeek_Item defines model for microsoft.graph.workingHours.daysOfWeek.Item.
type MicrosoftGraphWorkingHours_DaysOfWeek_Item struct {
	union json.RawMessage
}

// MicrosoftGraphWorkingHoursTimeZone1 defines model for .
type MicrosoftGraphWorkingHoursTimeZone1 = map[string]interface{}

// MicrosoftGraphWorkingHours_TimeZone The time zone to which the working hours apply.
type MicrosoftGraphWorkingHours_TimeZone struct {
	union json.RawMessage
}

// Count defines model for count.
type Count = bool

// Filter defines model for filter.
type Filter = string

// Search defines model for search.
type Search = string

// Skip defines model for skip.
type Skip = int

// Top defines model for top.
type Top = int

// Error defines model for error.
type Error = MicrosoftGraphODataErrorsODataError

// UsersUserListUserParams defines parameters for UsersUserListUser.
type UsersUserListUserParams struct {
	// Top Show only the first n items
	Top *Top `form:"$top,omitempty" json:"$top,omitempty"`

	// Search Search items by search phrases
	Search *Search `form:"$search,omitempty" json:"$search,omitempty"`

	// Filter Filter items by property values
	Filter *Filter `form:"$filter,omitempty" json:"$filter,omitempty"`

	// Count Include count of items
	Count *Count `form:"$count,omitempty" json:"$count,omitempty"`

	// Orderby Order items by property values
	Orderby *[]UsersUserListUserParamsOrderby `form:"$orderby,omitempty" json:"$orderby,omitempty"`

	// Select Select properties to be returned
	Select *[]UsersUserListUserParamsSelect `form:"$select,omitempty" json:"$select,omitempty"`

	// Expand Expand related entities
	Expand *[]UsersUserListUserParamsExpand `form:"$expand,omitempty" json:"$expand,omitempty"`

	// ConsistencyLevel Indicates the requested consistency level. Documentation URL: https://docs.microsoft.com/graph/aad-advanced-queries
	ConsistencyLevel *string `json:"ConsistencyLevel,omitempty"`
}

// UsersUserListUserParamsOrderby defines parameters for UsersUserListUser.
type UsersUserListUserParamsOrderby string

// UsersUserListUserParamsSelect defines parameters for UsersUserListUser.
type UsersUserListUserParamsSelect string

// UsersUserListUserParamsExpand defines parameters for UsersUserListUser.
type UsersUserListUserParamsExpand string

// UsersUserDeleteUserParams defines parameters for UsersUserDeleteUser.
type UsersUserDeleteUserParams struct {
	// IfMatch ETag
	IfMatch *string `json:"If-Match,omitempty"`
}

// UsersUserGetUserParams defines parameters for UsersUserGetUser.
type UsersUserGetUserParams struct {
	// Select Select properties to be returned
	Select *[]UsersUserGetUserParamsSelect `form:"$select,omitempty" json:"$select,omitempty"`

	// Expand Expand related entities
	Expand *[]UsersUserGetUserParamsExpand `form:"$expand,omitempty" json:"$expand,omitempty"`
}

// UsersUserGetUserParamsSelect defines parameters for UsersUserGetUser.
type UsersUserGetUserParamsSelect string

// UsersUserGetUserParamsExpand defines parameters for UsersUserGetUser.
type UsersUserGetUserParamsExpand string

// UsersListEventsParams defines parameters for UsersListEvents.
type UsersListEventsParams struct {
	// Top Show only the first n items
	Top *Top `form:"$top,omitempty" json:"$top,omitempty"`

	// Skip Skip the first n items
	Skip *Skip `form:"$skip,omitempty" json:"$skip,omitempty"`

	// Filter Filter items by property values
	Filter *Filter `form:"$filter,omitempty" json:"$filter,omitempty"`

	// Count Include count of items
	Count *Count `form:"$count,omitempty" json:"$count,omitempty"`

	// Orderby Order items by property values
	Orderby *[]UsersListEventsParamsOrderby `form:"$orderby,omitempty" json:"$orderby,omitempty"`

	// Select Select properties to be returned
	Select *[]UsersListEventsParamsSelect `form:"$select,omitempty" json:"$select,omitempty"`

	// Expand Expand related entities
	Expand *[]UsersListEventsParamsExpand `form:"$expand,omitempty" json:"$expand,omitempty"`
}

// UsersListEventsParamsOrderby defines parameters for UsersListEvents.
type UsersListEventsParamsOrderby string

// UsersListEventsParamsSelect defines parameters for UsersListEvents.
type UsersListEventsParamsSelect string

// UsersListEventsParamsExpand defines parameters for UsersListEvents.
type UsersListEventsParamsExpand string

// UsersEventsGetCountD443Params defines parameters for UsersEventsGetCountD443.
type UsersEventsGetCountD443Params struct {
	// Filter Filter items by property values
	Filter *Filter `form:"$filter,omitempty" json:"$filter,omitempty"`
}

// UsersUserEventsDeltaParams defines parameters for UsersUserEventsDelta.
type UsersUserEventsDeltaParams struct {
	// StartDateTime The start date and time of the time range in the function, represented in ISO 8601 format. For example, 2019-11-08T20:00:00-08:00
	StartDateTime string `form:"startDateTime" json:"startDateTime"`

	// EndDateTime The end date and time of the time range in the function, represented in ISO 8601 format. For example, 2019-11-08T20:00:00-08:00
	EndDateTime string `form:"endDateTime" json:"endDateTime"`

	// Top Show only the first n items
	Top *Top `form:"$top,omitempty" json:"$top,omitempty"`

	// Skip Skip the first n items
	Skip *Skip `form:"$skip,omitempty" json:"$skip,omitempty"`

	// Search Search items by search phrases
	Search *Search `form:"$search,omitempty" json:"$search,omitempty"`

	// Filter Filter items by property values
	Filter *Filter `form:"$filter,omitempty" json:"$filter,omitempty"`

	// Count Include count of items
	Count *Count `form:"$count,omitempty" json:"$count,omitempty"`

	// Select Select properties to be returned
	Select *[]UsersUserEventsDeltaParamsSelect `form:"$select,omitempty" json:"$select,omitempty"`

	// Orderby Order items by property values
	Orderby *[]UsersUserEventsDeltaParamsOrderby `form:"$orderby,omitempty" json:"$orderby,omitempty"`
}

// UsersUserEventsDeltaParamsSelect defines parameters for UsersUserEventsDelta.
type UsersUserEventsDeltaParamsSelect string

// UsersUserEventsDeltaParamsOrderby defines parameters for UsersUserEventsDelta.
type UsersUserEventsDeltaParamsOrderby string

// UsersDeleteEventsParams defines parameters for UsersDeleteEvents.
type UsersDeleteEventsParams struct {
	// IfMatch ETag
	IfMatch *string `json:"If-Match,omitempty"`
}

// UsersGetEventsParams defines parameters for UsersGetEvents.
type UsersGetEventsParams struct {
	// Select Select properties to be returned
	Select *[]UsersGetEventsParamsSelect `form:"$select,omitempty" json:"$select,omitempty"`

	// Expand Expand related entities
	Expand *[]UsersGetEventsParamsExpand `form:"$expand,omitempty" json:"$expand,omitempty"`
}

// UsersGetEventsParamsSelect defines parameters for UsersGetEvents.
type UsersGetEventsParamsSelect string

// UsersGetEventsParamsExpand defines parameters for UsersGetEvents.
type UsersGetEventsParamsExpand string

// UsersEventsListAttachmentsParams defines parameters for UsersEventsListAttachments.
type UsersEventsListAttachmentsParams struct {
	// Top Show only the first n items
	Top *Top `form:"$top,omitempty" json:"$top,omitempty"`

	// Skip Skip the first n items
	Skip *Skip `form:"$skip,omitempty" json:"$skip,omitempty"`

	// Filter Filter items by property values
	Filter *Filter `form:"$filter,omitempty" json:"$filter,omitempty"`

	// Count Include count of items
	Count *Count `form:"$count,omitempty" json:"$count,omitempty"`

	// Orderby Order items by property values
	Orderby *[]UsersEventsListAttachmentsParamsOrderby `form:"$orderby,omitempty" json:"$orderby,omitempty"`

	// Select Select properties to be returned
	Select *[]UsersEventsListAttachmentsParamsSelect `form:"$select,omitempty" json:"$select,omitempty"`

	// Expand Expand related entities
	Expand *[]UsersEventsListAttachmentsParamsExpand `form:"$expand,omitempty" json:"$expand,omitempty"`
}

// UsersEventsListAttachmentsParamsOrderby defines parameters for UsersEventsListAttachments.
type UsersEventsListAttachmentsParamsOrderby string

// UsersEventsListAttachmentsParamsSelect defines parameters for UsersEventsListAttachments.
type UsersEventsListAttachmentsParamsSelect string

// UsersEventsListAttachmentsParamsExpand defines parameters for UsersEventsListAttachments.
type UsersEventsListAttachmentsParamsExpand string

// UsersEventsAttachmentsGetCount711fParams defines parameters for UsersEventsAttachmentsGetCount711f.
type UsersEventsAttachmentsGetCount711fParams struct {
	// Filter Filter items by property values
	Filter *Filter `form:"$filter,omitempty" json:"$filter,omitempty"`
}

// UsersUserEventsEventAttachmentsCreateUploadSessionJSONBody defines parameters for UsersUserEventsEventAttachmentsCreateUploadSession.
type UsersUserEventsEventAttachmentsCreateUploadSessionJSONBody struct {
	AttachmentItem *MicrosoftGraphAttachmentItem `json:"AttachmentItem,omitempty"`
}

// UsersEventsDeleteAttachmentsParams defines parameters for UsersEventsDeleteAttachments.
type UsersEventsDeleteAttachmentsParams struct {
	// IfMatch ETag
	IfMatch *string `json:"If-Match,omitempty"`
}

// UsersEventsGetAttachmentsParams defines parameters for UsersEventsGetAttachments.
type UsersEventsGetAttachmentsParams struct {
	// Select Select properties to be returned
	Select *[]UsersEventsGetAttachmentsParamsSelect `form:"$select,omitempty" json:"$select,omitempty"`

	// Expand Expand related entities
	Expand *[]UsersEventsGetAttachmentsParamsExpand `form:"$expand,omitempty" json:"$expand,omitempty"`
}

// UsersEventsGetAttachmentsParamsSelect defines parameters for UsersEventsGetAttachments.
type UsersEventsGetAttachmentsParamsSelect string

// UsersEventsGetAttachmentsParamsExpand defines parameters for UsersEventsGetAttachments.
type UsersEventsGetAttachmentsParamsExpand string

// UsersEventsGetCalendarParams defines parameters for UsersEventsGetCalendar.
type UsersEventsGetCalendarParams struct {
	// Select Select properties to be returned
	Select *[]UsersEventsGetCalendarParamsSelect `form:"$select,omitempty" json:"$select,omitempty"`
}

// UsersEventsGetCalendarParamsSelect defines parameters for UsersEventsGetCalendar.
type UsersEventsGetCalendarParamsSelect string

// UsersEventsListExtensionsParams defines parameters for UsersEventsListExtensions.
type UsersEventsListExtensionsParams struct {
	// Top Show only the first n items
	Top *Top `form:"$top,omitempty" json:"$top,omitempty"`

	// Skip Skip the first n items
	Skip *Skip `form:"$skip,omitempty" json:"$skip,omitempty"`

	// Filter Filter items by property values
	Filter *Filter `form:"$filter,omitempty" json:"$filter,omitempty"`

	// Count Include count of items
	Count *Count `form:"$count,omitempty" json:"$count,omitempty"`

	// Orderby Order items by property values
	Orderby *[]UsersEventsListExtensionsParamsOrderby `form:"$orderby,omitempty" json:"$orderby,omitempty"`

	// Select Select properties to be returned
	Select *[]UsersEventsListExtensionsParamsSelect `form:"$select,omitempty" json:"$select,omitempty"`

	// Expand Expand related entities
	Expand *[]UsersEventsListExtensionsParamsExpand `form:"$expand,omitempty" json:"$expand,omitempty"`
}

// UsersEventsListExtensionsParamsOrderby defines parameters for UsersEventsListExtensions.
type UsersEventsListExtensionsParamsOrderby string

// UsersEventsListExtensionsParamsSelect defines parameters for UsersEventsListExtensions.
type UsersEventsListExtensionsParamsSelect string

// UsersEventsListExtensionsParamsExpand defines parameters for UsersEventsListExtensions.
type UsersEventsListExtensionsParamsExpand string

// UsersEventsExtensionsGetCount0041Params defines parameters for UsersEventsExtensionsGetCount0041.
type UsersEventsExtensionsGetCount0041Params struct {
	// Filter Filter items by property values
	Filter *Filter `form:"$filter,omitempty" json:"$filter,omitempty"`
}

// UsersEventsDeleteExtensionsParams defines parameters for UsersEventsDeleteExtensions.
type UsersEventsDeleteExtensionsParams struct {
	// IfMatch ETag
	IfMatch *string `json:"If-Match,omitempty"`
}

// UsersEventsGetExtensionsParams defines parameters for UsersEventsGetExtensions.
type UsersEventsGetExtensionsParams struct {
	// Select Select properties to be returned
	Select *[]UsersEventsGetExtensionsParamsSelect `form:"$select,omitempty" json:"$select,omitempty"`

	// Expand Expand related entities
	Expand *[]UsersEventsGetExtensionsParamsExpand `form:"$expand,omitempty" json:"$expand,omitempty"`
}

// UsersEventsGetExtensionsParamsSelect defines parameters for UsersEventsGetExtensions.
type UsersEventsGetExtensionsParamsSelect string

// UsersEventsGetExtensionsParamsExpand defines parameters for UsersEventsGetExtensions.
type UsersEventsGetExtensionsParamsExpand string

// UsersEventsListInstancesParams defines parameters for UsersEventsListInstances.
type UsersEventsListInstancesParams struct {
	// StartDateTime The start date and time of the time range, represented in ISO 8601 format. For example, 2019-11-08T19:00:00-08:00
	StartDateTime string `form:"startDateTime" json:"startDateTime"`

	// EndDateTime The end date and time of the time range, represented in ISO 8601 format. For example, 2019-11-08T20:00:00-08:00
	EndDateTime string `form:"endDateTime" json:"endDateTime"`

	// Top Show only the first n items
	Top *Top `form:"$top,omitempty" json:"$top,omitempty"`

	// Skip Skip the first n items
	Skip *Skip `form:"$skip,omitempty" json:"$skip,omitempty"`

	// Filter Filter items by property values
	Filter *Filter `form:"$filter,omitempty" json:"$filter,omitempty"`

	// Count Include count of items
	Count *Count `form:"$count,omitempty" json:"$count,omitempty"`

	// Orderby Order items by property values
	Orderby *[]UsersEventsListInstancesParamsOrderby `form:"$orderby,omitempty" json:"$orderby,omitempty"`

	// Select Select properties to be returned
	Select *[]UsersEventsListInstancesParamsSelect `form:"$select,omitempty" json:"$select,omitempty"`
}

// UsersEventsListInstancesParamsOrderby defines parameters for UsersEventsListInstances.
type UsersEventsListInstancesParamsOrderby string

// UsersEventsListInstancesParamsSelect defines parameters for UsersEventsListInstances.
type UsersEventsListInstancesParamsSelect string

// UsersEventsInstancesGetCountF922Params defines parameters for UsersEventsInstancesGetCountF922.
type UsersEventsInstancesGetCountF922Params struct {
	// Filter Filter items by property values
	Filter *Filter `form:"$filter,omitempty" json:"$filter,omitempty"`
}

// UsersUserEventsEventInstancesDeltaParams defines parameters for UsersUserEventsEventInstancesDelta.
type UsersUserEventsEventInstancesDeltaParams struct {
	// StartDateTime The start date and time of the time range in the function, represented in ISO 8601 format. For example, 2019-11-08T20:00:00-08:00
	StartDateTime string `form:"startDateTime" json:"startDateTime"`

	// EndDateTime The end date and time of the time range in the function, represented in ISO 8601 format. For example, 2019-11-08T20:00:00-08:00
	EndDateTime string `form:"endDateTime" json:"endDateTime"`

	// Top Show only the first n items
	Top *Top `form:"$top,omitempty" json:"$top,omitempty"`

	// Skip Skip the first n items
	Skip *Skip `form:"$skip,omitempty" json:"$skip,omitempty"`

	// Search Search items by search phrases
	Search *Search `form:"$search,omitempty" json:"$search,omitempty"`

	// Filter Filter items by property values
	Filter *Filter `form:"$filter,omitempty" json:"$filter,omitempty"`

	// Count Include count of items
	Count *Count `form:"$count,omitempty" json:"$count,omitempty"`

	// Select Select properties to be returned
	Select *[]UsersUserEventsEventInstancesDeltaParamsSelect `form:"$select,omitempty" json:"$select,omitempty"`

	// Orderby Order items by property values
	Orderby *[]UsersUserEventsEventInstancesDeltaParamsOrderby `form:"$orderby,omitempty" json:"$orderby,omitempty"`
}

// UsersUserEventsEventInstancesDeltaParamsSelect defines parameters for UsersUserEventsEventInstancesDelta.
type UsersUserEventsEventInstancesDeltaParamsSelect string

// UsersUserEventsEventInstancesDeltaParamsOrderby defines parameters for UsersUserEventsEventInstancesDelta.
type UsersUserEventsEventInstancesDeltaParamsOrderby string

// UsersEventsGetInstancesParams defines parameters for UsersEventsGetInstances.
type UsersEventsGetInstancesParams struct {
	// StartDateTime The start date and time of the time range, represented in ISO 8601 format. For example, 2019-11-08T19:00:00-08:00
	StartDateTime string `form:"startDateTime" json:"startDateTime"`

	// EndDateTime The end date and time of the time range, represented in ISO 8601 format. For example, 2019-11-08T20:00:00-08:00
	EndDateTime string `form:"endDateTime" json:"endDateTime"`

	// Select Select properties to be returned
	Select *[]UsersEventsGetInstancesParamsSelect `form:"$select,omitempty" json:"$select,omitempty"`
}

// UsersEventsGetInstancesParamsSelect defines parameters for UsersEventsGetInstances.
type UsersEventsGetInstancesParamsSelect string

// UsersEventsInstancesListAttachmentsParams defines parameters for UsersEventsInstancesListAttachments.
type UsersEventsInstancesListAttachmentsParams struct {
	// Top Show only the first n items
	Top *Top `form:"$top,omitempty" json:"$top,omitempty"`

	// Skip Skip the first n items
	Skip *Skip `form:"$skip,omitempty" json:"$skip,omitempty"`

	// Filter Filter items by property values
	Filter *Filter `form:"$filter,omitempty" json:"$filter,omitempty"`

	// Count Include count of items
	Count *Count `form:"$count,omitempty" json:"$count,omitempty"`

	// Orderby Order items by property values
	Orderby *[]UsersEventsInstancesListAttachmentsParamsOrderby `form:"$orderby,omitempty" json:"$orderby,omitempty"`

	// Select Select properties to be returned
	Select *[]UsersEventsInstancesListAttachmentsParamsSelect `form:"$select,omitempty" json:"$select,omitempty"`

	// Expand Expand related entities
	Expand *[]UsersEventsInstancesListAttachmentsParamsExpand `form:"$expand,omitempty" json:"$expand,omitempty"`
}

// UsersEventsInstancesListAttachmentsParamsOrderby defines parameters for UsersEventsInstancesListAttachments.
type UsersEventsInstancesListAttachmentsParamsOrderby string

// UsersEventsInstancesListAttachmentsParamsSelect defines parameters for UsersEventsInstancesListAttachments.
type UsersEventsInstancesListAttachmentsParamsSelect string

// UsersEventsInstancesListAttachmentsParamsExpand defines parameters for UsersEventsInstancesListAttachments.
type UsersEventsInstancesListAttachmentsParamsExpand string

// UsersEventsInstancesAttachmentsGetCount3c02Params defines parameters for UsersEventsInstancesAttachmentsGetCount3c02.
type UsersEventsInstancesAttachmentsGetCount3c02Params struct {
	// Filter Filter items by property values
	Filter *Filter `form:"$filter,omitempty" json:"$filter,omitempty"`
}

// UsersUserEventsEventInstancesEventAttachmentsCreateUploadSessionJSONBody defines parameters for UsersUserEventsEventInstancesEventAttachmentsCreateUploadSession.
type UsersUserEventsEventInstancesEventAttachmentsCreateUploadSessionJSONBody struct {
	AttachmentItem *MicrosoftGraphAttachmentItem `json:"AttachmentItem,omitempty"`
}

// UsersEventsInstancesDeleteAttachmentsParams defines parameters for UsersEventsInstancesDeleteAttachments.
type UsersEventsInstancesDeleteAttachmentsParams struct {
	// IfMatch ETag
	IfMatch *string `json:"If-Match,omitempty"`
}

// UsersEventsInstancesGetAttachmentsParams defines parameters for UsersEventsInstancesGetAttachments.
type UsersEventsInstancesGetAttachmentsParams struct {
	// Select Select properties to be returned
	Select *[]UsersEventsInstancesGetAttachmentsParamsSelect `form:"$select,omitempty" json:"$select,omitempty"`

	// Expand Expand related entities
	Expand *[]UsersEventsInstancesGetAttachmentsParamsExpand `form:"$expand,omitempty" json:"$expand,omitempty"`
}

// UsersEventsInstancesGetAttachmentsParamsSelect defines parameters for UsersEventsInstancesGetAttachments.
type UsersEventsInstancesGetAttachmentsParamsSelect string

// UsersEventsInstancesGetAttachmentsParamsExpand defines parameters for UsersEventsInstancesGetAttachments.
type UsersEventsInstancesGetAttachmentsParamsExpand string

// UsersEventsInstancesGetCalendarParams defines parameters for UsersEventsInstancesGetCalendar.
type UsersEventsInstancesGetCalendarParams struct {
	// Select Select properties to be returned
	Select *[]UsersEventsInstancesGetCalendarParamsSelect `form:"$select,omitempty" json:"$select,omitempty"`
}

// UsersEventsInstancesGetCalendarParamsSelect defines parameters for UsersEventsInstancesGetCalendar.
type UsersEventsInstancesGetCalendarParamsSelect string

// UsersEventsInstancesListExtensionsParams defines parameters for UsersEventsInstancesListExtensions.
type UsersEventsInstancesListExtensionsParams struct {
	// Top Show only the first n items
	Top *Top `form:"$top,omitempty" json:"$top,omitempty"`

	// Skip Skip the first n items
	Skip *Skip `form:"$skip,omitempty" json:"$skip,omitempty"`

	// Filter Filter items by property values
	Filter *Filter `form:"$filter,omitempty" json:"$filter,omitempty"`

	// Count Include count of items
	Count *Count `form:"$count,omitempty" json:"$count,omitempty"`

	// Orderby Order items by property values
	Orderby *[]UsersEventsInstancesListExtensionsParamsOrderby `form:"$orderby,omitempty" json:"$orderby,omitempty"`

	// Select Select properties to be returned
	Select *[]UsersEventsInstancesListExtensionsParamsSelect `form:"$select,omitempty" json:"$select,omitempty"`

	// Expand Expand related entities
	Expand *[]UsersEventsInstancesListExtensionsParamsExpand `form:"$expand,omitempty" json:"$expand,omitempty"`
}

// UsersEventsInstancesListExtensionsParamsOrderby defines parameters for UsersEventsInstancesListExtensions.
type UsersEventsInstancesListExtensionsParamsOrderby string

// UsersEventsInstancesListExtensionsParamsSelect defines parameters for UsersEventsInstancesListExtensions.
type UsersEventsInstancesListExtensionsParamsSelect string

// UsersEventsInstancesListExtensionsParamsExpand defines parameters for UsersEventsInstancesListExtensions.
type UsersEventsInstancesListExtensionsParamsExpand string

// UsersEventsInstancesExtensionsGetCount8eedParams defines parameters for UsersEventsInstancesExtensionsGetCount8eed.
type UsersEventsInstancesExtensionsGetCount8eedParams struct {
	// Filter Filter items by property values
	Filter *Filter `form:"$filter,omitempty" json:"$filter,omitempty"`
}

// UsersEventsInstancesDeleteExtensionsParams defines parameters for UsersEventsInstancesDeleteExtensions.
type UsersEventsInstancesDeleteExtensionsParams struct {
	// IfMatch ETag
	IfMatch *string `json:"If-Match,omitempty"`
}

// UsersEventsInstancesGetExtensionsParams defines parameters for UsersEventsInstancesGetExtensions.
type UsersEventsInstancesGetExtensionsParams struct {
	// Select Select properties to be returned
	Select *[]UsersEventsInstancesGetExtensionsParamsSelect `form:"$select,omitempty" json:"$select,omitempty"`

	// Expand Expand related entities
	Expand *[]UsersEventsInstancesGetExtensionsParamsExpand `form:"$expand,omitempty" json:"$expand,omitempty"`
}

// UsersEventsInstancesGetExtensionsParamsSelect defines parameters for UsersEventsInstancesGetExtensions.
type UsersEventsInstancesGetExtensionsParamsSelect string

// UsersEventsInstancesGetExtensionsParamsExpand defines parameters for UsersEventsInstancesGetExtensions.
type UsersEventsInstancesGetExtensionsParamsExpand string

// UsersUserEventsEventInstancesEventAcceptJSONBody defines parameters for UsersUserEventsEventInstancesEventAccept.
type UsersUserEventsEventInstancesEventAcceptJSONBody struct {
	Comment      *string `json:"Comment"`
	SendResponse *bool   `json:"SendResponse"`
}

// UsersUserEventsEventInstancesEventCancelJSONBody defines parameters for UsersUserEventsEventInstancesEventCancel.
type UsersUserEventsEventInstancesEventCancelJSONBody struct {
	Comment *string `json:"Comment"`
}

// UsersUserEventsEventInstancesEventDeclineJSONBody defines parameters for UsersUserEventsEventInstancesEventDecline.
type UsersUserEventsEventInstancesEventDeclineJSONBody struct {
	Comment         *string                                                            `json:"Comment"`
	ProposedNewTime *UsersUserEventsEventInstancesEventDeclineJSONBody_ProposedNewTime `json:"ProposedNewTime,omitempty"`
	SendResponse    *bool                                                              `json:"SendResponse"`
}

// UsersUserEventsEventInstancesEventDeclineJSONBodyProposedNewTime1 defines parameters for UsersUserEventsEventInstancesEventDecline.
type UsersUserEventsEventInstancesEventDeclineJSONBodyProposedNewTime1 = map[string]interface{}

// UsersUserEventsEventInstancesEventDeclineJSONBody_ProposedNewTime defines parameters for UsersUserEventsEventInstancesEventDecline.
type UsersUserEventsEventInstancesEventDeclineJSONBody_ProposedNewTime struct {
	union json.RawMessage
}

// UsersUserEventsEventInstancesEventForwardJSONBody defines parameters for UsersUserEventsEventInstancesEventForward.
type UsersUserEventsEventInstancesEventForwardJSONBody struct {
	Comment      *string                                                                `json:"Comment"`
	ToRecipients *[]UsersUserEventsEventInstancesEventForwardJSONBody_ToRecipients_Item `json:"ToRecipients,omitempty"`
}

// UsersUserEventsEventInstancesEventForwardJSONBodyToRecipients1 defines parameters for UsersUserEventsEventInstancesEventForward.
type UsersUserEventsEventInstancesEventForwardJSONBodyToRecipients1 = map[string]interface{}

// UsersUserEventsEventInstancesEventForwardJSONBody_ToRecipients_Item defines parameters for UsersUserEventsEventInstancesEventForward.
type UsersUserEventsEventInstancesEventForwardJSONBody_ToRecipients_Item struct {
	union json.RawMessage
}

// UsersUserEventsEventInstancesEventSnoozeReminderJSONBody defines parameters for UsersUserEventsEventInstancesEventSnoozeReminder.
type UsersUserEventsEventInstancesEventSnoozeReminderJSONBody struct {
	NewReminderTime *MicrosoftGraphDateTimeTimeZone `json:"NewReminderTime,omitempty"`
}

// UsersUserEventsEventInstancesEventTentativelyAcceptJSONBody defines parameters for UsersUserEventsEventInstancesEventTentativelyAccept.
type UsersUserEventsEventInstancesEventTentativelyAcceptJSONBody struct {
	Comment         *string                                                                      `json:"Comment"`
	ProposedNewTime *UsersUserEventsEventInstancesEventTentativelyAcceptJSONBody_ProposedNewTime `json:"ProposedNewTime,omitempty"`
	SendResponse    *bool                                                                        `json:"SendResponse"`
}

// UsersUserEventsEventInstancesEventTentativelyAcceptJSONBodyProposedNewTime1 defines parameters for UsersUserEventsEventInstancesEventTentativelyAccept.
type UsersUserEventsEventInstancesEventTentativelyAcceptJSONBodyProposedNewTime1 = map[string]interface{}

// UsersUserEventsEventInstancesEventTentativelyAcceptJSONBody_ProposedNewTime defines parameters for UsersUserEventsEventInstancesEventTentativelyAccept.
type UsersUserEventsEventInstancesEventTentativelyAcceptJSONBody_ProposedNewTime struct {
	union json.RawMessage
}

// UsersUserEventsEventAcceptJSONBody defines parameters for UsersUserEventsEventAccept.
type UsersUserEventsEventAcceptJSONBody struct {
	Comment      *string `json:"Comment"`
	SendResponse *bool   `json:"SendResponse"`
}

// UsersUserEventsEventCancelJSONBody defines parameters for UsersUserEventsEventCancel.
type UsersUserEventsEventCancelJSONBody struct {
	Comment *string `json:"Comment"`
}

// UsersUserEventsEventDeclineJSONBody defines parameters for UsersUserEventsEventDecline.
type UsersUserEventsEventDeclineJSONBody struct {
	Comment         *string                                              `json:"Comment"`
	ProposedNewTime *UsersUserEventsEventDeclineJSONBody_ProposedNewTime `json:"ProposedNewTime,omitempty"`
	SendResponse    *bool                                                `json:"SendResponse"`
}

// UsersUserEventsEventDeclineJSONBodyProposedNewTime1 defines parameters for UsersUserEventsEventDecline.
type UsersUserEventsEventDeclineJSONBodyProposedNewTime1 = map[string]interface{}

// UsersUserEventsEventDeclineJSONBody_ProposedNewTime defines parameters for UsersUserEventsEventDecline.
type UsersUserEventsEventDeclineJSONBody_ProposedNewTime struct {
	union json.RawMessage
}

// UsersUserEventsEventForwardJSONBody defines parameters for UsersUserEventsEventForward.
type UsersUserEventsEventForwardJSONBody struct {
	Comment      *string                                                  `json:"Comment"`
	ToRecipients *[]UsersUserEventsEventForwardJSONBody_ToRecipients_Item `json:"ToRecipients,omitempty"`
}

// UsersUserEventsEventForwardJSONBodyToRecipients1 defines parameters for UsersUserEventsEventForward.
type UsersUserEventsEventForwardJSONBodyToRecipients1 = map[string]interface{}

// UsersUserEventsEventForwardJSONBody_ToRecipients_Item defines parameters for UsersUserEventsEventForward.
type UsersUserEventsEventForwardJSONBody_ToRecipients_Item struct {
	union json.RawMessage
}

// UsersUserEventsEventSnoozeReminderJSONBody defines parameters for UsersUserEventsEventSnoozeReminder.
type UsersUserEventsEventSnoozeReminderJSONBody struct {
	NewReminderTime *MicrosoftGraphDateTimeTimeZone `json:"NewReminderTime,omitempty"`
}

// UsersUserEventsEventTentativelyAcceptJSONBody defines parameters for UsersUserEventsEventTentativelyAccept.
type UsersUserEventsEventTentativelyAcceptJSONBody struct {
	Comment         *string                                                        `json:"Comment"`
	ProposedNewTime *UsersUserEventsEventTentativelyAcceptJSONBody_ProposedNewTime `json:"ProposedNewTime,omitempty"`
	SendResponse    *bool                                                          `json:"SendResponse"`
}

// UsersUserEventsEventTentativelyAcceptJSONBodyProposedNewTime1 defines parameters for UsersUserEventsEventTentativelyAccept.
type UsersUserEventsEventTentativelyAcceptJSONBodyProposedNewTime1 = map[string]interface{}

// UsersUserEventsEventTentativelyAcceptJSONBody_ProposedNewTime defines parameters for UsersUserEventsEventTentativelyAccept.
type UsersUserEventsEventTentativelyAcceptJSONBody_ProposedNewTime struct {
	union json.RawMessage
}

// UsersListExtensionsParams defines parameters for UsersListExtensions.
type UsersListExtensionsParams struct {
	// Top Show only the first n items
	Top *Top `form:"$top,omitempty" json:"$top,omitempty"`

	// Skip Skip the first n items
	Skip *Skip `form:"$skip,omitempty" json:"$skip,omitempty"`

	// Search Search items by search phrases
	Search *Search `form:"$search,omitempty" json:"$search,omitempty"`

	// Filter Filter items by property values
	Filter *Filter `form:"$filter,omitempty" json:"$filter,omitempty"`

	// Count Include count of items
	Count *Count `form:"$count,omitempty" json:"$count,omitempty"`

	// Orderby Order items by property values
	Orderby *[]UsersListExtensionsParamsOrderby `form:"$orderby,omitempty" json:"$orderby,omitempty"`

	// Select Select properties to be returned
	Select *[]UsersListExtensionsParamsSelect `form:"$select,omitempty" json:"$select,omitempty"`

	// Expand Expand related entities
	Expand *[]UsersListExtensionsParamsExpand `form:"$expand,omitempty" json:"$expand,omitempty"`
}

// UsersListExtensionsParamsOrderby defines parameters for UsersListExtensions.
type UsersListExtensionsParamsOrderby string

// UsersListExtensionsParamsSelect defines parameters for UsersListExtensions.
type UsersListExtensionsParamsSelect string

// UsersListExtensionsParamsExpand defines parameters for UsersListExtensions.
type UsersListExtensionsParamsExpand string

// UsersExtensionsGetCount4b1cParams defines parameters for UsersExtensionsGetCount4b1c.
type UsersExtensionsGetCount4b1cParams struct {
	// Search Search items by search phrases
	Search *Search `form:"$search,omitempty" json:"$search,omitempty"`

	// Filter Filter items by property values
	Filter *Filter `form:"$filter,omitempty" json:"$filter,omitempty"`
}

// UsersDeleteExtensionsParams defines parameters for UsersDeleteExtensions.
type UsersDeleteExtensionsParams struct {
	// IfMatch ETag
	IfMatch *string `json:"If-Match,omitempty"`
}

// UsersGetExtensionsParams defines parameters for UsersGetExtensions.
type UsersGetExtensionsParams struct {
	// Select Select properties to be returned
	Select *[]UsersGetExtensionsParamsSelect `form:"$select,omitempty" json:"$select,omitempty"`

	// Expand Expand related entities
	Expand *[]UsersGetExtensionsParamsExpand `form:"$expand,omitempty" json:"$expand,omitempty"`
}

// UsersGetExtensionsParamsSelect defines parameters for UsersGetExtensions.
type UsersGetExtensionsParamsSelect string

// UsersGetExtensionsParamsExpand defines parameters for UsersGetExtensions.
type UsersGetExtensionsParamsExpand string

// UsersUserCreateUserJSONRequestBody defines body for UsersUserCreateUser for application/json ContentType.
type UsersUserCreateUserJSONRequestBody = MicrosoftGraphUser

// UsersUserUpdateUserJSONRequestBody defines body for UsersUserUpdateUser for application/json ContentType.
type UsersUserUpdateUserJSONRequestBody = MicrosoftGraphUser

// UsersCreateEventsJSONRequestBody defines body for UsersCreateEvents for application/json ContentType.
type UsersCreateEventsJSONRequestBody = MicrosoftGraphEvent

// UsersUpdateEventsJSONRequestBody defines body for UsersUpdateEvents for application/json ContentType.
type UsersUpdateEventsJSONRequestBody = MicrosoftGraphEvent

// UsersEventsCreateAttachmentsJSONRequestBody defines body for UsersEventsCreateAttachments for application/json ContentType.
type UsersEventsCreateAttachmentsJSONRequestBody = MicrosoftGraphAttachment

// UsersUserEventsEventAttachmentsCreateUploadSessionJSONRequestBody defines body for UsersUserEventsEventAttachmentsCreateUploadSession for application/json ContentType.
type UsersUserEventsEventAttachmentsCreateUploadSessionJSONRequestBody UsersUserEventsEventAttachmentsCreateUploadSessionJSONBody

// UsersEventsCreateExtensionsJSONRequestBody defines body for UsersEventsCreateExtensions for application/json ContentType.
type UsersEventsCreateExtensionsJSONRequestBody = MicrosoftGraphExtension

// UsersEventsUpdateExtensionsJSONRequestBody defines body for UsersEventsUpdateExtensions for application/json ContentType.
type UsersEventsUpdateExtensionsJSONRequestBody = MicrosoftGraphExtension

// UsersEventsInstancesCreateAttachmentsJSONRequestBody defines body for UsersEventsInstancesCreateAttachments for application/json ContentType.
type UsersEventsInstancesCreateAttachmentsJSONRequestBody = MicrosoftGraphAttachment

// UsersUserEventsEventInstancesEventAttachmentsCreateUploadSessionJSONRequestBody defines body for UsersUserEventsEventInstancesEventAttachmentsCreateUploadSession for application/json ContentType.
type UsersUserEventsEventInstancesEventAttachmentsCreateUploadSessionJSONRequestBody UsersUserEventsEventInstancesEventAttachmentsCreateUploadSessionJSONBody

// UsersEventsInstancesCreateExtensionsJSONRequestBody defines body for UsersEventsInstancesCreateExtensions for application/json ContentType.
type UsersEventsInstancesCreateExtensionsJSONRequestBody = MicrosoftGraphExtension

// UsersEventsInstancesUpdateExtensionsJSONRequestBody defines body for UsersEventsInstancesUpdateExtensions for application/json ContentType.
type UsersEventsInstancesUpdateExtensionsJSONRequestBody = MicrosoftGraphExtension

// UsersUserEventsEventInstancesEventAcceptJSONRequestBody defines body for UsersUserEventsEventInstancesEventAccept for application/json ContentType.
type UsersUserEventsEventInstancesEventAcceptJSONRequestBody UsersUserEventsEventInstancesEventAcceptJSONBody

// UsersUserEventsEventInstancesEventCancelJSONRequestBody defines body for UsersUserEventsEventInstancesEventCancel for application/json ContentType.
type UsersUserEventsEventInstancesEventCancelJSONRequestBody UsersUserEventsEventInstancesEventCancelJSONBody

// UsersUserEventsEventInstancesEventDeclineJSONRequestBody defines body for UsersUserEventsEventInstancesEventDecline for application/json ContentType.
type UsersUserEventsEventInstancesEventDeclineJSONRequestBody UsersUserEventsEventInstancesEventDeclineJSONBody

// UsersUserEventsEventInstancesEventForwardJSONRequestBody defines body for UsersUserEventsEventInstancesEventForward for application/json ContentType.
type UsersUserEventsEventInstancesEventForwardJSONRequestBody UsersUserEventsEventInstancesEventForwardJSONBody

// UsersUserEventsEventInstancesEventSnoozeReminderJSONRequestBody defines body for UsersUserEventsEventInstancesEventSnoozeReminder for application/json ContentType.
type UsersUserEventsEventInstancesEventSnoozeReminderJSONRequestBody UsersUserEventsEventInstancesEventSnoozeReminderJSONBody

// UsersUserEventsEventInstancesEventTentativelyAcceptJSONRequestBody defines body for UsersUserEventsEventInstancesEventTentativelyAccept for application/json ContentType.
type UsersUserEventsEventInstancesEventTentativelyAcceptJSONRequestBody UsersUserEventsEventInstancesEventTentativelyAcceptJSONBody

// UsersUserEventsEventAcceptJSONRequestBody defines body for UsersUserEventsEventAccept for application/json ContentType.
type UsersUserEventsEventAcceptJSONRequestBody UsersUserEventsEventAcceptJSONBody

// UsersUserEventsEventCancelJSONRequestBody defines body for UsersUserEventsEventCancel for application/json ContentType.
type UsersUserEventsEventCancelJSONRequestBody UsersUserEventsEventCancelJSONBody

// UsersUserEventsEventDeclineJSONRequestBody defines body for UsersUserEventsEventDecline for application/json ContentType.
type UsersUserEventsEventDeclineJSONRequestBody UsersUserEventsEventDeclineJSONBody

// UsersUserEventsEventForwardJSONRequestBody defines body for UsersUserEventsEventForward for application/json ContentType.
type UsersUserEventsEventForwardJSONRequestBody UsersUserEventsEventForwardJSONBody

// UsersUserEventsEventSnoozeReminderJSONRequestBody defines body for UsersUserEventsEventSnoozeReminder for application/json ContentType.
type UsersUserEventsEventSnoozeReminderJSONRequestBody UsersUserEventsEventSnoozeReminderJSONBody

// UsersUserEventsEventTentativelyAcceptJSONRequestBody defines body for UsersUserEventsEventTentativelyAccept for application/json ContentType.
type UsersUserEventsEventTentativelyAcceptJSONRequestBody UsersUserEventsEventTentativelyAcceptJSONBody

// UsersCreateExtensionsJSONRequestBody defines body for UsersCreateExtensions for application/json ContentType.
type UsersCreateExtensionsJSONRequestBody = MicrosoftGraphExtension

// UsersUpdateExtensionsJSONRequestBody defines body for UsersUpdateExtensions for application/json ContentType.
type UsersUpdateExtensionsJSONRequestBody = MicrosoftGraphExtension

// AsMicrosoftGraphStatus returns the union data inside the MicrosoftGraphActivityHistoryItem_Status as a MicrosoftGraphStatus
func (t MicrosoftGraphActivityHistoryItem_Status) AsMicrosoftGraphStatus() (MicrosoftGraphStatus, error) {
	var body MicrosoftGraphStatus
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphStatus overwrites any union data inside the MicrosoftGraphActivityHistoryItem_Status as the provided MicrosoftGraphStatus
func (t *MicrosoftGraphActivityHistoryItem_Status) FromMicrosoftGraphStatus(v MicrosoftGraphStatus) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphStatus performs a merge with any union data inside the MicrosoftGraphActivityHistoryItem_Status, using the provided MicrosoftGraphStatus
func (t *MicrosoftGraphActivityHistoryItem_Status) MergeMicrosoftGraphStatus(v MicrosoftGraphStatus) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsMicrosoftGraphActivityHistoryItemStatus1 returns the union data inside the MicrosoftGraphActivityHistoryItem_Status as a MicrosoftGraphActivityHistoryItemStatus1
func (t MicrosoftGraphActivityHistoryItem_Status) AsMicrosoftGraphActivityHistoryItemStatus1() (MicrosoftGraphActivityHistoryItemStatus1, error) {
	var body MicrosoftGraphActivityHistoryItemStatus1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphActivityHistoryItemStatus1 overwrites any union data inside the MicrosoftGraphActivityHistoryItem_Status as the provided MicrosoftGraphActivityHistoryItemStatus1
func (t *MicrosoftGraphActivityHistoryItem_Status) FromMicrosoftGraphActivityHistoryItemStatus1(v MicrosoftGraphActivityHistoryItemStatus1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphActivityHistoryItemStatus1 performs a merge with any union data inside the MicrosoftGraphActivityHistoryItem_Status, using the provided MicrosoftGraphActivityHistoryItemStatus1
func (t *MicrosoftGraphActivityHistoryItem_Status) MergeMicrosoftGraphActivityHistoryItemStatus1(v MicrosoftGraphActivityHistoryItemStatus1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

func (t MicrosoftGraphActivityHistoryItem_Status) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *MicrosoftGraphActivityHistoryItem_Status) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsMicrosoftGraphAgreementAcceptanceState returns the union data inside the MicrosoftGraphAgreementAcceptance_State as a MicrosoftGraphAgreementAcceptanceState
func (t MicrosoftGraphAgreementAcceptance_State) AsMicrosoftGraphAgreementAcceptanceState() (MicrosoftGraphAgreementAcceptanceState, error) {
	var body MicrosoftGraphAgreementAcceptanceState
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphAgreementAcceptanceState overwrites any union data inside the MicrosoftGraphAgreementAcceptance_State as the provided MicrosoftGraphAgreementAcceptanceState
func (t *MicrosoftGraphAgreementAcceptance_State) FromMicrosoftGraphAgreementAcceptanceState(v MicrosoftGraphAgreementAcceptanceState) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphAgreementAcceptanceState performs a merge with any union data inside the MicrosoftGraphAgreementAcceptance_State, using the provided MicrosoftGraphAgreementAcceptanceState
func (t *MicrosoftGraphAgreementAcceptance_State) MergeMicrosoftGraphAgreementAcceptanceState(v MicrosoftGraphAgreementAcceptanceState) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsMicrosoftGraphAgreementAcceptanceState1 returns the union data inside the MicrosoftGraphAgreementAcceptance_State as a MicrosoftGraphAgreementAcceptanceState1
func (t MicrosoftGraphAgreementAcceptance_State) AsMicrosoftGraphAgreementAcceptanceState1() (MicrosoftGraphAgreementAcceptanceState1, error) {
	var body MicrosoftGraphAgreementAcceptanceState1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphAgreementAcceptanceState1 overwrites any union data inside the MicrosoftGraphAgreementAcceptance_State as the provided MicrosoftGraphAgreementAcceptanceState1
func (t *MicrosoftGraphAgreementAcceptance_State) FromMicrosoftGraphAgreementAcceptanceState1(v MicrosoftGraphAgreementAcceptanceState1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphAgreementAcceptanceState1 performs a merge with any union data inside the MicrosoftGraphAgreementAcceptance_State, using the provided MicrosoftGraphAgreementAcceptanceState1
func (t *MicrosoftGraphAgreementAcceptance_State) MergeMicrosoftGraphAgreementAcceptanceState1(v MicrosoftGraphAgreementAcceptanceState1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

func (t MicrosoftGraphAgreementAcceptance_State) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *MicrosoftGraphAgreementAcceptance_State) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsMicrosoftGraphTeam returns the union data inside the MicrosoftGraphAssociatedTeamInfo_Team as a MicrosoftGraphTeam
func (t MicrosoftGraphAssociatedTeamInfo_Team) AsMicrosoftGraphTeam() (MicrosoftGraphTeam, error) {
	var body MicrosoftGraphTeam
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphTeam overwrites any union data inside the MicrosoftGraphAssociatedTeamInfo_Team as the provided MicrosoftGraphTeam
func (t *MicrosoftGraphAssociatedTeamInfo_Team) FromMicrosoftGraphTeam(v MicrosoftGraphTeam) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphTeam performs a merge with any union data inside the MicrosoftGraphAssociatedTeamInfo_Team, using the provided MicrosoftGraphTeam
func (t *MicrosoftGraphAssociatedTeamInfo_Team) MergeMicrosoftGraphTeam(v MicrosoftGraphTeam) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsMicrosoftGraphAssociatedTeamInfoTeam1 returns the union data inside the MicrosoftGraphAssociatedTeamInfo_Team as a MicrosoftGraphAssociatedTeamInfoTeam1
func (t MicrosoftGraphAssociatedTeamInfo_Team) AsMicrosoftGraphAssociatedTeamInfoTeam1() (MicrosoftGraphAssociatedTeamInfoTeam1, error) {
	var body MicrosoftGraphAssociatedTeamInfoTeam1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphAssociatedTeamInfoTeam1 overwrites any union data inside the MicrosoftGraphAssociatedTeamInfo_Team as the provided MicrosoftGraphAssociatedTeamInfoTeam1
func (t *MicrosoftGraphAssociatedTeamInfo_Team) FromMicrosoftGraphAssociatedTeamInfoTeam1(v MicrosoftGraphAssociatedTeamInfoTeam1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphAssociatedTeamInfoTeam1 performs a merge with any union data inside the MicrosoftGraphAssociatedTeamInfo_Team, using the provided MicrosoftGraphAssociatedTeamInfoTeam1
func (t *MicrosoftGraphAssociatedTeamInfo_Team) MergeMicrosoftGraphAssociatedTeamInfoTeam1(v MicrosoftGraphAssociatedTeamInfoTeam1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

func (t MicrosoftGraphAssociatedTeamInfo_Team) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *MicrosoftGraphAssociatedTeamInfo_Team) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsMicrosoftGraphAttachmentType returns the union data inside the MicrosoftGraphAttachmentItem_AttachmentType as a MicrosoftGraphAttachmentType
func (t MicrosoftGraphAttachmentItem_AttachmentType) AsMicrosoftGraphAttachmentType() (MicrosoftGraphAttachmentType, error) {
	var body MicrosoftGraphAttachmentType
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphAttachmentType overwrites any union data inside the MicrosoftGraphAttachmentItem_AttachmentType as the provided MicrosoftGraphAttachmentType
func (t *MicrosoftGraphAttachmentItem_AttachmentType) FromMicrosoftGraphAttachmentType(v MicrosoftGraphAttachmentType) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphAttachmentType performs a merge with any union data inside the MicrosoftGraphAttachmentItem_AttachmentType, using the provided MicrosoftGraphAttachmentType
func (t *MicrosoftGraphAttachmentItem_AttachmentType) MergeMicrosoftGraphAttachmentType(v MicrosoftGraphAttachmentType) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsMicrosoftGraphAttachmentItemAttachmentType1 returns the union data inside the MicrosoftGraphAttachmentItem_AttachmentType as a MicrosoftGraphAttachmentItemAttachmentType1
func (t MicrosoftGraphAttachmentItem_AttachmentType) AsMicrosoftGraphAttachmentItemAttachmentType1() (MicrosoftGraphAttachmentItemAttachmentType1, error) {
	var body MicrosoftGraphAttachmentItemAttachmentType1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphAttachmentItemAttachmentType1 overwrites any union data inside the MicrosoftGraphAttachmentItem_AttachmentType as the provided MicrosoftGraphAttachmentItemAttachmentType1
func (t *MicrosoftGraphAttachmentItem_AttachmentType) FromMicrosoftGraphAttachmentItemAttachmentType1(v MicrosoftGraphAttachmentItemAttachmentType1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphAttachmentItemAttachmentType1 performs a merge with any union data inside the MicrosoftGraphAttachmentItem_AttachmentType, using the provided MicrosoftGraphAttachmentItemAttachmentType1
func (t *MicrosoftGraphAttachmentItem_AttachmentType) MergeMicrosoftGraphAttachmentItemAttachmentType1(v MicrosoftGraphAttachmentItemAttachmentType1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

func (t MicrosoftGraphAttachmentItem_AttachmentType) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *MicrosoftGraphAttachmentItem_AttachmentType) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsMicrosoftGraphAttendanceInterval returns the union data inside the MicrosoftGraphAttendanceRecord_AttendanceIntervals_Item as a MicrosoftGraphAttendanceInterval
func (t MicrosoftGraphAttendanceRecord_AttendanceIntervals_Item) AsMicrosoftGraphAttendanceInterval() (MicrosoftGraphAttendanceInterval, error) {
	var body MicrosoftGraphAttendanceInterval
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphAttendanceInterval overwrites any union data inside the MicrosoftGraphAttendanceRecord_AttendanceIntervals_Item as the provided MicrosoftGraphAttendanceInterval
func (t *MicrosoftGraphAttendanceRecord_AttendanceIntervals_Item) FromMicrosoftGraphAttendanceInterval(v MicrosoftGraphAttendanceInterval) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphAttendanceInterval performs a merge with any union data inside the MicrosoftGraphAttendanceRecord_AttendanceIntervals_Item, using the provided MicrosoftGraphAttendanceInterval
func (t *MicrosoftGraphAttendanceRecord_AttendanceIntervals_Item) MergeMicrosoftGraphAttendanceInterval(v MicrosoftGraphAttendanceInterval) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsMicrosoftGraphAttendanceRecordAttendanceIntervals1 returns the union data inside the MicrosoftGraphAttendanceRecord_AttendanceIntervals_Item as a MicrosoftGraphAttendanceRecordAttendanceIntervals1
func (t MicrosoftGraphAttendanceRecord_AttendanceIntervals_Item) AsMicrosoftGraphAttendanceRecordAttendanceIntervals1() (MicrosoftGraphAttendanceRecordAttendanceIntervals1, error) {
	var body MicrosoftGraphAttendanceRecordAttendanceIntervals1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphAttendanceRecordAttendanceIntervals1 overwrites any union data inside the MicrosoftGraphAttendanceRecord_AttendanceIntervals_Item as the provided MicrosoftGraphAttendanceRecordAttendanceIntervals1
func (t *MicrosoftGraphAttendanceRecord_AttendanceIntervals_Item) FromMicrosoftGraphAttendanceRecordAttendanceIntervals1(v MicrosoftGraphAttendanceRecordAttendanceIntervals1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphAttendanceRecordAttendanceIntervals1 performs a merge with any union data inside the MicrosoftGraphAttendanceRecord_AttendanceIntervals_Item, using the provided MicrosoftGraphAttendanceRecordAttendanceIntervals1
func (t *MicrosoftGraphAttendanceRecord_AttendanceIntervals_Item) MergeMicrosoftGraphAttendanceRecordAttendanceIntervals1(v MicrosoftGraphAttendanceRecordAttendanceIntervals1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

func (t MicrosoftGraphAttendanceRecord_AttendanceIntervals_Item) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *MicrosoftGraphAttendanceRecord_AttendanceIntervals_Item) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsMicrosoftGraphIdentity returns the union data inside the MicrosoftGraphAttendanceRecord_Identity as a MicrosoftGraphIdentity
func (t MicrosoftGraphAttendanceRecord_Identity) AsMicrosoftGraphIdentity() (MicrosoftGraphIdentity, error) {
	var body MicrosoftGraphIdentity
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphIdentity overwrites any union data inside the MicrosoftGraphAttendanceRecord_Identity as the provided MicrosoftGraphIdentity
func (t *MicrosoftGraphAttendanceRecord_Identity) FromMicrosoftGraphIdentity(v MicrosoftGraphIdentity) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphIdentity performs a merge with any union data inside the MicrosoftGraphAttendanceRecord_Identity, using the provided MicrosoftGraphIdentity
func (t *MicrosoftGraphAttendanceRecord_Identity) MergeMicrosoftGraphIdentity(v MicrosoftGraphIdentity) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsMicrosoftGraphAttendanceRecordIdentity1 returns the union data inside the MicrosoftGraphAttendanceRecord_Identity as a MicrosoftGraphAttendanceRecordIdentity1
func (t MicrosoftGraphAttendanceRecord_Identity) AsMicrosoftGraphAttendanceRecordIdentity1() (MicrosoftGraphAttendanceRecordIdentity1, error) {
	var body MicrosoftGraphAttendanceRecordIdentity1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphAttendanceRecordIdentity1 overwrites any union data inside the MicrosoftGraphAttendanceRecord_Identity as the provided MicrosoftGraphAttendanceRecordIdentity1
func (t *MicrosoftGraphAttendanceRecord_Identity) FromMicrosoftGraphAttendanceRecordIdentity1(v MicrosoftGraphAttendanceRecordIdentity1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphAttendanceRecordIdentity1 performs a merge with any union data inside the MicrosoftGraphAttendanceRecord_Identity, using the provided MicrosoftGraphAttendanceRecordIdentity1
func (t *MicrosoftGraphAttendanceRecord_Identity) MergeMicrosoftGraphAttendanceRecordIdentity1(v MicrosoftGraphAttendanceRecordIdentity1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

func (t MicrosoftGraphAttendanceRecord_Identity) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *MicrosoftGraphAttendanceRecord_Identity) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsMicrosoftGraphEmailAddress returns the union data inside the MicrosoftGraphAttendee_EmailAddress as a MicrosoftGraphEmailAddress
func (t MicrosoftGraphAttendee_EmailAddress) AsMicrosoftGraphEmailAddress() (MicrosoftGraphEmailAddress, error) {
	var body MicrosoftGraphEmailAddress
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphEmailAddress overwrites any union data inside the MicrosoftGraphAttendee_EmailAddress as the provided MicrosoftGraphEmailAddress
func (t *MicrosoftGraphAttendee_EmailAddress) FromMicrosoftGraphEmailAddress(v MicrosoftGraphEmailAddress) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphEmailAddress performs a merge with any union data inside the MicrosoftGraphAttendee_EmailAddress, using the provided MicrosoftGraphEmailAddress
func (t *MicrosoftGraphAttendee_EmailAddress) MergeMicrosoftGraphEmailAddress(v MicrosoftGraphEmailAddress) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsMicrosoftGraphAttendeeEmailAddress1 returns the union data inside the MicrosoftGraphAttendee_EmailAddress as a MicrosoftGraphAttendeeEmailAddress1
func (t MicrosoftGraphAttendee_EmailAddress) AsMicrosoftGraphAttendeeEmailAddress1() (MicrosoftGraphAttendeeEmailAddress1, error) {
	var body MicrosoftGraphAttendeeEmailAddress1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphAttendeeEmailAddress1 overwrites any union data inside the MicrosoftGraphAttendee_EmailAddress as the provided MicrosoftGraphAttendeeEmailAddress1
func (t *MicrosoftGraphAttendee_EmailAddress) FromMicrosoftGraphAttendeeEmailAddress1(v MicrosoftGraphAttendeeEmailAddress1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphAttendeeEmailAddress1 performs a merge with any union data inside the MicrosoftGraphAttendee_EmailAddress, using the provided MicrosoftGraphAttendeeEmailAddress1
func (t *MicrosoftGraphAttendee_EmailAddress) MergeMicrosoftGraphAttendeeEmailAddress1(v MicrosoftGraphAttendeeEmailAddress1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

func (t MicrosoftGraphAttendee_EmailAddress) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *MicrosoftGraphAttendee_EmailAddress) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsMicrosoftGraphTimeSlot returns the union data inside the MicrosoftGraphAttendee_ProposedNewTime as a MicrosoftGraphTimeSlot
func (t MicrosoftGraphAttendee_ProposedNewTime) AsMicrosoftGraphTimeSlot() (MicrosoftGraphTimeSlot, error) {
	var body MicrosoftGraphTimeSlot
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphTimeSlot overwrites any union data inside the MicrosoftGraphAttendee_ProposedNewTime as the provided MicrosoftGraphTimeSlot
func (t *MicrosoftGraphAttendee_ProposedNewTime) FromMicrosoftGraphTimeSlot(v MicrosoftGraphTimeSlot) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphTimeSlot performs a merge with any union data inside the MicrosoftGraphAttendee_ProposedNewTime, using the provided MicrosoftGraphTimeSlot
func (t *MicrosoftGraphAttendee_ProposedNewTime) MergeMicrosoftGraphTimeSlot(v MicrosoftGraphTimeSlot) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsMicrosoftGraphAttendeeProposedNewTime1 returns the union data inside the MicrosoftGraphAttendee_ProposedNewTime as a MicrosoftGraphAttendeeProposedNewTime1
func (t MicrosoftGraphAttendee_ProposedNewTime) AsMicrosoftGraphAttendeeProposedNewTime1() (MicrosoftGraphAttendeeProposedNewTime1, error) {
	var body MicrosoftGraphAttendeeProposedNewTime1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphAttendeeProposedNewTime1 overwrites any union data inside the MicrosoftGraphAttendee_ProposedNewTime as the provided MicrosoftGraphAttendeeProposedNewTime1
func (t *MicrosoftGraphAttendee_ProposedNewTime) FromMicrosoftGraphAttendeeProposedNewTime1(v MicrosoftGraphAttendeeProposedNewTime1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphAttendeeProposedNewTime1 performs a merge with any union data inside the MicrosoftGraphAttendee_ProposedNewTime, using the provided MicrosoftGraphAttendeeProposedNewTime1
func (t *MicrosoftGraphAttendee_ProposedNewTime) MergeMicrosoftGraphAttendeeProposedNewTime1(v MicrosoftGraphAttendeeProposedNewTime1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

func (t MicrosoftGraphAttendee_ProposedNewTime) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *MicrosoftGraphAttendee_ProposedNewTime) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsMicrosoftGraphResponseStatus returns the union data inside the MicrosoftGraphAttendee_Status as a MicrosoftGraphResponseStatus
func (t MicrosoftGraphAttendee_Status) AsMicrosoftGraphResponseStatus() (MicrosoftGraphResponseStatus, error) {
	var body MicrosoftGraphResponseStatus
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphResponseStatus overwrites any union data inside the MicrosoftGraphAttendee_Status as the provided MicrosoftGraphResponseStatus
func (t *MicrosoftGraphAttendee_Status) FromMicrosoftGraphResponseStatus(v MicrosoftGraphResponseStatus) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphResponseStatus performs a merge with any union data inside the MicrosoftGraphAttendee_Status, using the provided MicrosoftGraphResponseStatus
func (t *MicrosoftGraphAttendee_Status) MergeMicrosoftGraphResponseStatus(v MicrosoftGraphResponseStatus) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsMicrosoftGraphAttendeeStatus1 returns the union data inside the MicrosoftGraphAttendee_Status as a MicrosoftGraphAttendeeStatus1
func (t MicrosoftGraphAttendee_Status) AsMicrosoftGraphAttendeeStatus1() (MicrosoftGraphAttendeeStatus1, error) {
	var body MicrosoftGraphAttendeeStatus1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphAttendeeStatus1 overwrites any union data inside the MicrosoftGraphAttendee_Status as the provided MicrosoftGraphAttendeeStatus1
func (t *MicrosoftGraphAttendee_Status) FromMicrosoftGraphAttendeeStatus1(v MicrosoftGraphAttendeeStatus1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphAttendeeStatus1 performs a merge with any union data inside the MicrosoftGraphAttendee_Status, using the provided MicrosoftGraphAttendeeStatus1
func (t *MicrosoftGraphAttendee_Status) MergeMicrosoftGraphAttendeeStatus1(v MicrosoftGraphAttendeeStatus1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

func (t MicrosoftGraphAttendee_Status) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *MicrosoftGraphAttendee_Status) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsMicrosoftGraphAttendeeType returns the union data inside the MicrosoftGraphAttendee_Type as a MicrosoftGraphAttendeeType
func (t MicrosoftGraphAttendee_Type) AsMicrosoftGraphAttendeeType() (MicrosoftGraphAttendeeType, error) {
	var body MicrosoftGraphAttendeeType
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphAttendeeType overwrites any union data inside the MicrosoftGraphAttendee_Type as the provided MicrosoftGraphAttendeeType
func (t *MicrosoftGraphAttendee_Type) FromMicrosoftGraphAttendeeType(v MicrosoftGraphAttendeeType) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphAttendeeType performs a merge with any union data inside the MicrosoftGraphAttendee_Type, using the provided MicrosoftGraphAttendeeType
func (t *MicrosoftGraphAttendee_Type) MergeMicrosoftGraphAttendeeType(v MicrosoftGraphAttendeeType) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsMicrosoftGraphAttendeeType1 returns the union data inside the MicrosoftGraphAttendee_Type as a MicrosoftGraphAttendeeType1
func (t MicrosoftGraphAttendee_Type) AsMicrosoftGraphAttendeeType1() (MicrosoftGraphAttendeeType1, error) {
	var body MicrosoftGraphAttendeeType1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphAttendeeType1 overwrites any union data inside the MicrosoftGraphAttendee_Type as the provided MicrosoftGraphAttendeeType1
func (t *MicrosoftGraphAttendee_Type) FromMicrosoftGraphAttendeeType1(v MicrosoftGraphAttendeeType1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphAttendeeType1 performs a merge with any union data inside the MicrosoftGraphAttendee_Type, using the provided MicrosoftGraphAttendeeType1
func (t *MicrosoftGraphAttendee_Type) MergeMicrosoftGraphAttendeeType1(v MicrosoftGraphAttendeeType1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

func (t MicrosoftGraphAttendee_Type) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *MicrosoftGraphAttendee_Type) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsMicrosoftGraphEmailAddress returns the union data inside the MicrosoftGraphAttendeeBase_EmailAddress as a MicrosoftGraphEmailAddress
func (t MicrosoftGraphAttendeeBase_EmailAddress) AsMicrosoftGraphEmailAddress() (MicrosoftGraphEmailAddress, error) {
	var body MicrosoftGraphEmailAddress
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphEmailAddress overwrites any union data inside the MicrosoftGraphAttendeeBase_EmailAddress as the provided MicrosoftGraphEmailAddress
func (t *MicrosoftGraphAttendeeBase_EmailAddress) FromMicrosoftGraphEmailAddress(v MicrosoftGraphEmailAddress) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphEmailAddress performs a merge with any union data inside the MicrosoftGraphAttendeeBase_EmailAddress, using the provided MicrosoftGraphEmailAddress
func (t *MicrosoftGraphAttendeeBase_EmailAddress) MergeMicrosoftGraphEmailAddress(v MicrosoftGraphEmailAddress) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsMicrosoftGraphAttendeeBaseEmailAddress1 returns the union data inside the MicrosoftGraphAttendeeBase_EmailAddress as a MicrosoftGraphAttendeeBaseEmailAddress1
func (t MicrosoftGraphAttendeeBase_EmailAddress) AsMicrosoftGraphAttendeeBaseEmailAddress1() (MicrosoftGraphAttendeeBaseEmailAddress1, error) {
	var body MicrosoftGraphAttendeeBaseEmailAddress1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphAttendeeBaseEmailAddress1 overwrites any union data inside the MicrosoftGraphAttendeeBase_EmailAddress as the provided MicrosoftGraphAttendeeBaseEmailAddress1
func (t *MicrosoftGraphAttendeeBase_EmailAddress) FromMicrosoftGraphAttendeeBaseEmailAddress1(v MicrosoftGraphAttendeeBaseEmailAddress1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphAttendeeBaseEmailAddress1 performs a merge with any union data inside the MicrosoftGraphAttendeeBase_EmailAddress, using the provided MicrosoftGraphAttendeeBaseEmailAddress1
func (t *MicrosoftGraphAttendeeBase_EmailAddress) MergeMicrosoftGraphAttendeeBaseEmailAddress1(v MicrosoftGraphAttendeeBaseEmailAddress1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

func (t MicrosoftGraphAttendeeBase_EmailAddress) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *MicrosoftGraphAttendeeBase_EmailAddress) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsMicrosoftGraphAttendeeType returns the union data inside the MicrosoftGraphAttendeeBase_Type as a MicrosoftGraphAttendeeType
func (t MicrosoftGraphAttendeeBase_Type) AsMicrosoftGraphAttendeeType() (MicrosoftGraphAttendeeType, error) {
	var body MicrosoftGraphAttendeeType
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphAttendeeType overwrites any union data inside the MicrosoftGraphAttendeeBase_Type as the provided MicrosoftGraphAttendeeType
func (t *MicrosoftGraphAttendeeBase_Type) FromMicrosoftGraphAttendeeType(v MicrosoftGraphAttendeeType) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphAttendeeType performs a merge with any union data inside the MicrosoftGraphAttendeeBase_Type, using the provided MicrosoftGraphAttendeeType
func (t *MicrosoftGraphAttendeeBase_Type) MergeMicrosoftGraphAttendeeType(v MicrosoftGraphAttendeeType) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsMicrosoftGraphAttendeeBaseType1 returns the union data inside the MicrosoftGraphAttendeeBase_Type as a MicrosoftGraphAttendeeBaseType1
func (t MicrosoftGraphAttendeeBase_Type) AsMicrosoftGraphAttendeeBaseType1() (MicrosoftGraphAttendeeBaseType1, error) {
	var body MicrosoftGraphAttendeeBaseType1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphAttendeeBaseType1 overwrites any union data inside the MicrosoftGraphAttendeeBase_Type as the provided MicrosoftGraphAttendeeBaseType1
func (t *MicrosoftGraphAttendeeBase_Type) FromMicrosoftGraphAttendeeBaseType1(v MicrosoftGraphAttendeeBaseType1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphAttendeeBaseType1 performs a merge with any union data inside the MicrosoftGraphAttendeeBase_Type, using the provided MicrosoftGraphAttendeeBaseType1
func (t *MicrosoftGraphAttendeeBase_Type) MergeMicrosoftGraphAttendeeBaseType1(v MicrosoftGraphAttendeeBaseType1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

func (t MicrosoftGraphAttendeeBase_Type) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *MicrosoftGraphAttendeeBase_Type) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsMicrosoftGraphExternalAudienceScope returns the union data inside the MicrosoftGraphAutomaticRepliesSetting_ExternalAudience as a MicrosoftGraphExternalAudienceScope
func (t MicrosoftGraphAutomaticRepliesSetting_ExternalAudience) AsMicrosoftGraphExternalAudienceScope() (MicrosoftGraphExternalAudienceScope, error) {
	var body MicrosoftGraphExternalAudienceScope
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphExternalAudienceScope overwrites any union data inside the MicrosoftGraphAutomaticRepliesSetting_ExternalAudience as the provided MicrosoftGraphExternalAudienceScope
func (t *MicrosoftGraphAutomaticRepliesSetting_ExternalAudience) FromMicrosoftGraphExternalAudienceScope(v MicrosoftGraphExternalAudienceScope) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphExternalAudienceScope performs a merge with any union data inside the MicrosoftGraphAutomaticRepliesSetting_ExternalAudience, using the provided MicrosoftGraphExternalAudienceScope
func (t *MicrosoftGraphAutomaticRepliesSetting_ExternalAudience) MergeMicrosoftGraphExternalAudienceScope(v MicrosoftGraphExternalAudienceScope) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsMicrosoftGraphAutomaticRepliesSettingExternalAudience1 returns the union data inside the MicrosoftGraphAutomaticRepliesSetting_ExternalAudience as a MicrosoftGraphAutomaticRepliesSettingExternalAudience1
func (t MicrosoftGraphAutomaticRepliesSetting_ExternalAudience) AsMicrosoftGraphAutomaticRepliesSettingExternalAudience1() (MicrosoftGraphAutomaticRepliesSettingExternalAudience1, error) {
	var body MicrosoftGraphAutomaticRepliesSettingExternalAudience1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphAutomaticRepliesSettingExternalAudience1 overwrites any union data inside the MicrosoftGraphAutomaticRepliesSetting_ExternalAudience as the provided MicrosoftGraphAutomaticRepliesSettingExternalAudience1
func (t *MicrosoftGraphAutomaticRepliesSetting_ExternalAudience) FromMicrosoftGraphAutomaticRepliesSettingExternalAudience1(v MicrosoftGraphAutomaticRepliesSettingExternalAudience1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphAutomaticRepliesSettingExternalAudience1 performs a merge with any union data inside the MicrosoftGraphAutomaticRepliesSetting_ExternalAudience, using the provided MicrosoftGraphAutomaticRepliesSettingExternalAudience1
func (t *MicrosoftGraphAutomaticRepliesSetting_ExternalAudience) MergeMicrosoftGraphAutomaticRepliesSettingExternalAudience1(v MicrosoftGraphAutomaticRepliesSettingExternalAudience1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

func (t MicrosoftGraphAutomaticRepliesSetting_ExternalAudience) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *MicrosoftGraphAutomaticRepliesSetting_ExternalAudience) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsMicrosoftGraphDateTimeTimeZone returns the union data inside the MicrosoftGraphAutomaticRepliesSetting_ScheduledEndDateTime as a MicrosoftGraphDateTimeTimeZone
func (t MicrosoftGraphAutomaticRepliesSetting_ScheduledEndDateTime) AsMicrosoftGraphDateTimeTimeZone() (MicrosoftGraphDateTimeTimeZone, error) {
	var body MicrosoftGraphDateTimeTimeZone
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphDateTimeTimeZone overwrites any union data inside the MicrosoftGraphAutomaticRepliesSetting_ScheduledEndDateTime as the provided MicrosoftGraphDateTimeTimeZone
func (t *MicrosoftGraphAutomaticRepliesSetting_ScheduledEndDateTime) FromMicrosoftGraphDateTimeTimeZone(v MicrosoftGraphDateTimeTimeZone) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphDateTimeTimeZone performs a merge with any union data inside the MicrosoftGraphAutomaticRepliesSetting_ScheduledEndDateTime, using the provided MicrosoftGraphDateTimeTimeZone
func (t *MicrosoftGraphAutomaticRepliesSetting_ScheduledEndDateTime) MergeMicrosoftGraphDateTimeTimeZone(v MicrosoftGraphDateTimeTimeZone) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsMicrosoftGraphAutomaticRepliesSettingScheduledEndDateTime1 returns the union data inside the MicrosoftGraphAutomaticRepliesSetting_ScheduledEndDateTime as a MicrosoftGraphAutomaticRepliesSettingScheduledEndDateTime1
func (t MicrosoftGraphAutomaticRepliesSetting_ScheduledEndDateTime) AsMicrosoftGraphAutomaticRepliesSettingScheduledEndDateTime1() (MicrosoftGraphAutomaticRepliesSettingScheduledEndDateTime1, error) {
	var body MicrosoftGraphAutomaticRepliesSettingScheduledEndDateTime1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphAutomaticRepliesSettingScheduledEndDateTime1 overwrites any union data inside the MicrosoftGraphAutomaticRepliesSetting_ScheduledEndDateTime as the provided MicrosoftGraphAutomaticRepliesSettingScheduledEndDateTime1
func (t *MicrosoftGraphAutomaticRepliesSetting_ScheduledEndDateTime) FromMicrosoftGraphAutomaticRepliesSettingScheduledEndDateTime1(v MicrosoftGraphAutomaticRepliesSettingScheduledEndDateTime1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphAutomaticRepliesSettingScheduledEndDateTime1 performs a merge with any union data inside the MicrosoftGraphAutomaticRepliesSetting_ScheduledEndDateTime, using the provided MicrosoftGraphAutomaticRepliesSettingScheduledEndDateTime1
func (t *MicrosoftGraphAutomaticRepliesSetting_ScheduledEndDateTime) MergeMicrosoftGraphAutomaticRepliesSettingScheduledEndDateTime1(v MicrosoftGraphAutomaticRepliesSettingScheduledEndDateTime1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

func (t MicrosoftGraphAutomaticRepliesSetting_ScheduledEndDateTime) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *MicrosoftGraphAutomaticRepliesSetting_ScheduledEndDateTime) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsMicrosoftGraphDateTimeTimeZone returns the union data inside the MicrosoftGraphAutomaticRepliesSetting_ScheduledStartDateTime as a MicrosoftGraphDateTimeTimeZone
func (t MicrosoftGraphAutomaticRepliesSetting_ScheduledStartDateTime) AsMicrosoftGraphDateTimeTimeZone() (MicrosoftGraphDateTimeTimeZone, error) {
	var body MicrosoftGraphDateTimeTimeZone
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphDateTimeTimeZone overwrites any union data inside the MicrosoftGraphAutomaticRepliesSetting_ScheduledStartDateTime as the provided MicrosoftGraphDateTimeTimeZone
func (t *MicrosoftGraphAutomaticRepliesSetting_ScheduledStartDateTime) FromMicrosoftGraphDateTimeTimeZone(v MicrosoftGraphDateTimeTimeZone) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphDateTimeTimeZone performs a merge with any union data inside the MicrosoftGraphAutomaticRepliesSetting_ScheduledStartDateTime, using the provided MicrosoftGraphDateTimeTimeZone
func (t *MicrosoftGraphAutomaticRepliesSetting_ScheduledStartDateTime) MergeMicrosoftGraphDateTimeTimeZone(v MicrosoftGraphDateTimeTimeZone) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsMicrosoftGraphAutomaticRepliesSettingScheduledStartDateTime1 returns the union data inside the MicrosoftGraphAutomaticRepliesSetting_ScheduledStartDateTime as a MicrosoftGraphAutomaticRepliesSettingScheduledStartDateTime1
func (t MicrosoftGraphAutomaticRepliesSetting_ScheduledStartDateTime) AsMicrosoftGraphAutomaticRepliesSettingScheduledStartDateTime1() (MicrosoftGraphAutomaticRepliesSettingScheduledStartDateTime1, error) {
	var body MicrosoftGraphAutomaticRepliesSettingScheduledStartDateTime1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphAutomaticRepliesSettingScheduledStartDateTime1 overwrites any union data inside the MicrosoftGraphAutomaticRepliesSetting_ScheduledStartDateTime as the provided MicrosoftGraphAutomaticRepliesSettingScheduledStartDateTime1
func (t *MicrosoftGraphAutomaticRepliesSetting_ScheduledStartDateTime) FromMicrosoftGraphAutomaticRepliesSettingScheduledStartDateTime1(v MicrosoftGraphAutomaticRepliesSettingScheduledStartDateTime1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphAutomaticRepliesSettingScheduledStartDateTime1 performs a merge with any union data inside the MicrosoftGraphAutomaticRepliesSetting_ScheduledStartDateTime, using the provided MicrosoftGraphAutomaticRepliesSettingScheduledStartDateTime1
func (t *MicrosoftGraphAutomaticRepliesSetting_ScheduledStartDateTime) MergeMicrosoftGraphAutomaticRepliesSettingScheduledStartDateTime1(v MicrosoftGraphAutomaticRepliesSettingScheduledStartDateTime1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

func (t MicrosoftGraphAutomaticRepliesSetting_ScheduledStartDateTime) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *MicrosoftGraphAutomaticRepliesSetting_ScheduledStartDateTime) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsMicrosoftGraphAutomaticRepliesStatus returns the union data inside the MicrosoftGraphAutomaticRepliesSetting_Status as a MicrosoftGraphAutomaticRepliesStatus
func (t MicrosoftGraphAutomaticRepliesSetting_Status) AsMicrosoftGraphAutomaticRepliesStatus() (MicrosoftGraphAutomaticRepliesStatus, error) {
	var body MicrosoftGraphAutomaticRepliesStatus
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphAutomaticRepliesStatus overwrites any union data inside the MicrosoftGraphAutomaticRepliesSetting_Status as the provided MicrosoftGraphAutomaticRepliesStatus
func (t *MicrosoftGraphAutomaticRepliesSetting_Status) FromMicrosoftGraphAutomaticRepliesStatus(v MicrosoftGraphAutomaticRepliesStatus) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphAutomaticRepliesStatus performs a merge with any union data inside the MicrosoftGraphAutomaticRepliesSetting_Status, using the provided MicrosoftGraphAutomaticRepliesStatus
func (t *MicrosoftGraphAutomaticRepliesSetting_Status) MergeMicrosoftGraphAutomaticRepliesStatus(v MicrosoftGraphAutomaticRepliesStatus) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsMicrosoftGraphAutomaticRepliesSettingStatus1 returns the union data inside the MicrosoftGraphAutomaticRepliesSetting_Status as a MicrosoftGraphAutomaticRepliesSettingStatus1
func (t MicrosoftGraphAutomaticRepliesSetting_Status) AsMicrosoftGraphAutomaticRepliesSettingStatus1() (MicrosoftGraphAutomaticRepliesSettingStatus1, error) {
	var body MicrosoftGraphAutomaticRepliesSettingStatus1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphAutomaticRepliesSettingStatus1 overwrites any union data inside the MicrosoftGraphAutomaticRepliesSetting_Status as the provided MicrosoftGraphAutomaticRepliesSettingStatus1
func (t *MicrosoftGraphAutomaticRepliesSetting_Status) FromMicrosoftGraphAutomaticRepliesSettingStatus1(v MicrosoftGraphAutomaticRepliesSettingStatus1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphAutomaticRepliesSettingStatus1 performs a merge with any union data inside the MicrosoftGraphAutomaticRepliesSetting_Status, using the provided MicrosoftGraphAutomaticRepliesSettingStatus1
func (t *MicrosoftGraphAutomaticRepliesSetting_Status) MergeMicrosoftGraphAutomaticRepliesSettingStatus1(v MicrosoftGraphAutomaticRepliesSettingStatus1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

func (t MicrosoftGraphAutomaticRepliesSetting_Status) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *MicrosoftGraphAutomaticRepliesSetting_Status) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsMicrosoftGraphIdentitySet returns the union data inside the MicrosoftGraphBaseItem_CreatedBy as a MicrosoftGraphIdentitySet
func (t MicrosoftGraphBaseItem_CreatedBy) AsMicrosoftGraphIdentitySet() (MicrosoftGraphIdentitySet, error) {
	var body MicrosoftGraphIdentitySet
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphIdentitySet overwrites any union data inside the MicrosoftGraphBaseItem_CreatedBy as the provided MicrosoftGraphIdentitySet
func (t *MicrosoftGraphBaseItem_CreatedBy) FromMicrosoftGraphIdentitySet(v MicrosoftGraphIdentitySet) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphIdentitySet performs a merge with any union data inside the MicrosoftGraphBaseItem_CreatedBy, using the provided MicrosoftGraphIdentitySet
func (t *MicrosoftGraphBaseItem_CreatedBy) MergeMicrosoftGraphIdentitySet(v MicrosoftGraphIdentitySet) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsMicrosoftGraphBaseItemCreatedBy1 returns the union data inside the MicrosoftGraphBaseItem_CreatedBy as a MicrosoftGraphBaseItemCreatedBy1
func (t MicrosoftGraphBaseItem_CreatedBy) AsMicrosoftGraphBaseItemCreatedBy1() (MicrosoftGraphBaseItemCreatedBy1, error) {
	var body MicrosoftGraphBaseItemCreatedBy1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphBaseItemCreatedBy1 overwrites any union data inside the MicrosoftGraphBaseItem_CreatedBy as the provided MicrosoftGraphBaseItemCreatedBy1
func (t *MicrosoftGraphBaseItem_CreatedBy) FromMicrosoftGraphBaseItemCreatedBy1(v MicrosoftGraphBaseItemCreatedBy1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphBaseItemCreatedBy1 performs a merge with any union data inside the MicrosoftGraphBaseItem_CreatedBy, using the provided MicrosoftGraphBaseItemCreatedBy1
func (t *MicrosoftGraphBaseItem_CreatedBy) MergeMicrosoftGraphBaseItemCreatedBy1(v MicrosoftGraphBaseItemCreatedBy1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

func (t MicrosoftGraphBaseItem_CreatedBy) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *MicrosoftGraphBaseItem_CreatedBy) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsMicrosoftGraphUser returns the union data inside the MicrosoftGraphBaseItem_CreatedByUser as a MicrosoftGraphUser
func (t MicrosoftGraphBaseItem_CreatedByUser) AsMicrosoftGraphUser() (MicrosoftGraphUser, error) {
	var body MicrosoftGraphUser
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphUser overwrites any union data inside the MicrosoftGraphBaseItem_CreatedByUser as the provided MicrosoftGraphUser
func (t *MicrosoftGraphBaseItem_CreatedByUser) FromMicrosoftGraphUser(v MicrosoftGraphUser) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphUser performs a merge with any union data inside the MicrosoftGraphBaseItem_CreatedByUser, using the provided MicrosoftGraphUser
func (t *MicrosoftGraphBaseItem_CreatedByUser) MergeMicrosoftGraphUser(v MicrosoftGraphUser) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsMicrosoftGraphBaseItemCreatedByUser1 returns the union data inside the MicrosoftGraphBaseItem_CreatedByUser as a MicrosoftGraphBaseItemCreatedByUser1
func (t MicrosoftGraphBaseItem_CreatedByUser) AsMicrosoftGraphBaseItemCreatedByUser1() (MicrosoftGraphBaseItemCreatedByUser1, error) {
	var body MicrosoftGraphBaseItemCreatedByUser1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphBaseItemCreatedByUser1 overwrites any union data inside the MicrosoftGraphBaseItem_CreatedByUser as the provided MicrosoftGraphBaseItemCreatedByUser1
func (t *MicrosoftGraphBaseItem_CreatedByUser) FromMicrosoftGraphBaseItemCreatedByUser1(v MicrosoftGraphBaseItemCreatedByUser1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphBaseItemCreatedByUser1 performs a merge with any union data inside the MicrosoftGraphBaseItem_CreatedByUser, using the provided MicrosoftGraphBaseItemCreatedByUser1
func (t *MicrosoftGraphBaseItem_CreatedByUser) MergeMicrosoftGraphBaseItemCreatedByUser1(v MicrosoftGraphBaseItemCreatedByUser1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

func (t MicrosoftGraphBaseItem_CreatedByUser) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *MicrosoftGraphBaseItem_CreatedByUser) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsMicrosoftGraphIdentitySet returns the union data inside the MicrosoftGraphBaseItem_LastModifiedBy as a MicrosoftGraphIdentitySet
func (t MicrosoftGraphBaseItem_LastModifiedBy) AsMicrosoftGraphIdentitySet() (MicrosoftGraphIdentitySet, error) {
	var body MicrosoftGraphIdentitySet
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphIdentitySet overwrites any union data inside the MicrosoftGraphBaseItem_LastModifiedBy as the provided MicrosoftGraphIdentitySet
func (t *MicrosoftGraphBaseItem_LastModifiedBy) FromMicrosoftGraphIdentitySet(v MicrosoftGraphIdentitySet) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphIdentitySet performs a merge with any union data inside the MicrosoftGraphBaseItem_LastModifiedBy, using the provided MicrosoftGraphIdentitySet
func (t *MicrosoftGraphBaseItem_LastModifiedBy) MergeMicrosoftGraphIdentitySet(v MicrosoftGraphIdentitySet) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsMicrosoftGraphBaseItemLastModifiedBy1 returns the union data inside the MicrosoftGraphBaseItem_LastModifiedBy as a MicrosoftGraphBaseItemLastModifiedBy1
func (t MicrosoftGraphBaseItem_LastModifiedBy) AsMicrosoftGraphBaseItemLastModifiedBy1() (MicrosoftGraphBaseItemLastModifiedBy1, error) {
	var body MicrosoftGraphBaseItemLastModifiedBy1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphBaseItemLastModifiedBy1 overwrites any union data inside the MicrosoftGraphBaseItem_LastModifiedBy as the provided MicrosoftGraphBaseItemLastModifiedBy1
func (t *MicrosoftGraphBaseItem_LastModifiedBy) FromMicrosoftGraphBaseItemLastModifiedBy1(v MicrosoftGraphBaseItemLastModifiedBy1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphBaseItemLastModifiedBy1 performs a merge with any union data inside the MicrosoftGraphBaseItem_LastModifiedBy, using the provided MicrosoftGraphBaseItemLastModifiedBy1
func (t *MicrosoftGraphBaseItem_LastModifiedBy) MergeMicrosoftGraphBaseItemLastModifiedBy1(v MicrosoftGraphBaseItemLastModifiedBy1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

func (t MicrosoftGraphBaseItem_LastModifiedBy) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *MicrosoftGraphBaseItem_LastModifiedBy) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsMicrosoftGraphUser returns the union data inside the MicrosoftGraphBaseItem_LastModifiedByUser as a MicrosoftGraphUser
func (t MicrosoftGraphBaseItem_LastModifiedByUser) AsMicrosoftGraphUser() (MicrosoftGraphUser, error) {
	var body MicrosoftGraphUser
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphUser overwrites any union data inside the MicrosoftGraphBaseItem_LastModifiedByUser as the provided MicrosoftGraphUser
func (t *MicrosoftGraphBaseItem_LastModifiedByUser) FromMicrosoftGraphUser(v MicrosoftGraphUser) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphUser performs a merge with any union data inside the MicrosoftGraphBaseItem_LastModifiedByUser, using the provided MicrosoftGraphUser
func (t *MicrosoftGraphBaseItem_LastModifiedByUser) MergeMicrosoftGraphUser(v MicrosoftGraphUser) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsMicrosoftGraphBaseItemLastModifiedByUser1 returns the union data inside the MicrosoftGraphBaseItem_LastModifiedByUser as a MicrosoftGraphBaseItemLastModifiedByUser1
func (t MicrosoftGraphBaseItem_LastModifiedByUser) AsMicrosoftGraphBaseItemLastModifiedByUser1() (MicrosoftGraphBaseItemLastModifiedByUser1, error) {
	var body MicrosoftGraphBaseItemLastModifiedByUser1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphBaseItemLastModifiedByUser1 overwrites any union data inside the MicrosoftGraphBaseItem_LastModifiedByUser as the provided MicrosoftGraphBaseItemLastModifiedByUser1
func (t *MicrosoftGraphBaseItem_LastModifiedByUser) FromMicrosoftGraphBaseItemLastModifiedByUser1(v MicrosoftGraphBaseItemLastModifiedByUser1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphBaseItemLastModifiedByUser1 performs a merge with any union data inside the MicrosoftGraphBaseItem_LastModifiedByUser, using the provided MicrosoftGraphBaseItemLastModifiedByUser1
func (t *MicrosoftGraphBaseItem_LastModifiedByUser) MergeMicrosoftGraphBaseItemLastModifiedByUser1(v MicrosoftGraphBaseItemLastModifiedByUser1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

func (t MicrosoftGraphBaseItem_LastModifiedByUser) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *MicrosoftGraphBaseItem_LastModifiedByUser) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsMicrosoftGraphItemReference returns the union data inside the MicrosoftGraphBaseItem_ParentReference as a MicrosoftGraphItemReference
func (t MicrosoftGraphBaseItem_ParentReference) AsMicrosoftGraphItemReference() (MicrosoftGraphItemReference, error) {
	var body MicrosoftGraphItemReference
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphItemReference overwrites any union data inside the MicrosoftGraphBaseItem_ParentReference as the provided MicrosoftGraphItemReference
func (t *MicrosoftGraphBaseItem_ParentReference) FromMicrosoftGraphItemReference(v MicrosoftGraphItemReference) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphItemReference performs a merge with any union data inside the MicrosoftGraphBaseItem_ParentReference, using the provided MicrosoftGraphItemReference
func (t *MicrosoftGraphBaseItem_ParentReference) MergeMicrosoftGraphItemReference(v MicrosoftGraphItemReference) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsMicrosoftGraphBaseItemParentReference1 returns the union data inside the MicrosoftGraphBaseItem_ParentReference as a MicrosoftGraphBaseItemParentReference1
func (t MicrosoftGraphBaseItem_ParentReference) AsMicrosoftGraphBaseItemParentReference1() (MicrosoftGraphBaseItemParentReference1, error) {
	var body MicrosoftGraphBaseItemParentReference1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphBaseItemParentReference1 overwrites any union data inside the MicrosoftGraphBaseItem_ParentReference as the provided MicrosoftGraphBaseItemParentReference1
func (t *MicrosoftGraphBaseItem_ParentReference) FromMicrosoftGraphBaseItemParentReference1(v MicrosoftGraphBaseItemParentReference1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphBaseItemParentReference1 performs a merge with any union data inside the MicrosoftGraphBaseItem_ParentReference, using the provided MicrosoftGraphBaseItemParentReference1
func (t *MicrosoftGraphBaseItem_ParentReference) MergeMicrosoftGraphBaseItemParentReference1(v MicrosoftGraphBaseItemParentReference1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

func (t MicrosoftGraphBaseItem_ParentReference) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *MicrosoftGraphBaseItem_ParentReference) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsMicrosoftGraphIdentitySet returns the union data inside the MicrosoftGraphBaseItemVersion_LastModifiedBy as a MicrosoftGraphIdentitySet
func (t MicrosoftGraphBaseItemVersion_LastModifiedBy) AsMicrosoftGraphIdentitySet() (MicrosoftGraphIdentitySet, error) {
	var body MicrosoftGraphIdentitySet
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphIdentitySet overwrites any union data inside the MicrosoftGraphBaseItemVersion_LastModifiedBy as the provided MicrosoftGraphIdentitySet
func (t *MicrosoftGraphBaseItemVersion_LastModifiedBy) FromMicrosoftGraphIdentitySet(v MicrosoftGraphIdentitySet) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphIdentitySet performs a merge with any union data inside the MicrosoftGraphBaseItemVersion_LastModifiedBy, using the provided MicrosoftGraphIdentitySet
func (t *MicrosoftGraphBaseItemVersion_LastModifiedBy) MergeMicrosoftGraphIdentitySet(v MicrosoftGraphIdentitySet) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsMicrosoftGraphBaseItemVersionLastModifiedBy1 returns the union data inside the MicrosoftGraphBaseItemVersion_LastModifiedBy as a MicrosoftGraphBaseItemVersionLastModifiedBy1
func (t MicrosoftGraphBaseItemVersion_LastModifiedBy) AsMicrosoftGraphBaseItemVersionLastModifiedBy1() (MicrosoftGraphBaseItemVersionLastModifiedBy1, error) {
	var body MicrosoftGraphBaseItemVersionLastModifiedBy1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphBaseItemVersionLastModifiedBy1 overwrites any union data inside the MicrosoftGraphBaseItemVersion_LastModifiedBy as the provided MicrosoftGraphBaseItemVersionLastModifiedBy1
func (t *MicrosoftGraphBaseItemVersion_LastModifiedBy) FromMicrosoftGraphBaseItemVersionLastModifiedBy1(v MicrosoftGraphBaseItemVersionLastModifiedBy1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphBaseItemVersionLastModifiedBy1 performs a merge with any union data inside the MicrosoftGraphBaseItemVersion_LastModifiedBy, using the provided MicrosoftGraphBaseItemVersionLastModifiedBy1
func (t *MicrosoftGraphBaseItemVersion_LastModifiedBy) MergeMicrosoftGraphBaseItemVersionLastModifiedBy1(v MicrosoftGraphBaseItemVersionLastModifiedBy1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

func (t MicrosoftGraphBaseItemVersion_LastModifiedBy) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *MicrosoftGraphBaseItemVersion_LastModifiedBy) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsMicrosoftGraphPublicationFacet returns the union data inside the MicrosoftGraphBaseItemVersion_Publication as a MicrosoftGraphPublicationFacet
func (t MicrosoftGraphBaseItemVersion_Publication) AsMicrosoftGraphPublicationFacet() (MicrosoftGraphPublicationFacet, error) {
	var body MicrosoftGraphPublicationFacet
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphPublicationFacet overwrites any union data inside the MicrosoftGraphBaseItemVersion_Publication as the provided MicrosoftGraphPublicationFacet
func (t *MicrosoftGraphBaseItemVersion_Publication) FromMicrosoftGraphPublicationFacet(v MicrosoftGraphPublicationFacet) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphPublicationFacet performs a merge with any union data inside the MicrosoftGraphBaseItemVersion_Publication, using the provided MicrosoftGraphPublicationFacet
func (t *MicrosoftGraphBaseItemVersion_Publication) MergeMicrosoftGraphPublicationFacet(v MicrosoftGraphPublicationFacet) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsMicrosoftGraphBaseItemVersionPublication1 returns the union data inside the MicrosoftGraphBaseItemVersion_Publication as a MicrosoftGraphBaseItemVersionPublication1
func (t MicrosoftGraphBaseItemVersion_Publication) AsMicrosoftGraphBaseItemVersionPublication1() (MicrosoftGraphBaseItemVersionPublication1, error) {
	var body MicrosoftGraphBaseItemVersionPublication1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphBaseItemVersionPublication1 overwrites any union data inside the MicrosoftGraphBaseItemVersion_Publication as the provided MicrosoftGraphBaseItemVersionPublication1
func (t *MicrosoftGraphBaseItemVersion_Publication) FromMicrosoftGraphBaseItemVersionPublication1(v MicrosoftGraphBaseItemVersionPublication1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphBaseItemVersionPublication1 performs a merge with any union data inside the MicrosoftGraphBaseItemVersion_Publication, using the provided MicrosoftGraphBaseItemVersionPublication1
func (t *MicrosoftGraphBaseItemVersion_Publication) MergeMicrosoftGraphBaseItemVersionPublication1(v MicrosoftGraphBaseItemVersionPublication1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

func (t MicrosoftGraphBaseItemVersion_Publication) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *MicrosoftGraphBaseItemVersion_Publication) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsMicrosoftGraphBroadcastMeetingAudience returns the union data inside the MicrosoftGraphBroadcastMeetingSettings_AllowedAudience as a MicrosoftGraphBroadcastMeetingAudience
func (t MicrosoftGraphBroadcastMeetingSettings_AllowedAudience) AsMicrosoftGraphBroadcastMeetingAudience() (MicrosoftGraphBroadcastMeetingAudience, error) {
	var body MicrosoftGraphBroadcastMeetingAudience
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphBroadcastMeetingAudience overwrites any union data inside the MicrosoftGraphBroadcastMeetingSettings_AllowedAudience as the provided MicrosoftGraphBroadcastMeetingAudience
func (t *MicrosoftGraphBroadcastMeetingSettings_AllowedAudience) FromMicrosoftGraphBroadcastMeetingAudience(v MicrosoftGraphBroadcastMeetingAudience) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphBroadcastMeetingAudience performs a merge with any union data inside the MicrosoftGraphBroadcastMeetingSettings_AllowedAudience, using the provided MicrosoftGraphBroadcastMeetingAudience
func (t *MicrosoftGraphBroadcastMeetingSettings_AllowedAudience) MergeMicrosoftGraphBroadcastMeetingAudience(v MicrosoftGraphBroadcastMeetingAudience) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsMicrosoftGraphBroadcastMeetingSettingsAllowedAudience1 returns the union data inside the MicrosoftGraphBroadcastMeetingSettings_AllowedAudience as a MicrosoftGraphBroadcastMeetingSettingsAllowedAudience1
func (t MicrosoftGraphBroadcastMeetingSettings_AllowedAudience) AsMicrosoftGraphBroadcastMeetingSettingsAllowedAudience1() (MicrosoftGraphBroadcastMeetingSettingsAllowedAudience1, error) {
	var body MicrosoftGraphBroadcastMeetingSettingsAllowedAudience1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphBroadcastMeetingSettingsAllowedAudience1 overwrites any union data inside the MicrosoftGraphBroadcastMeetingSettings_AllowedAudience as the provided MicrosoftGraphBroadcastMeetingSettingsAllowedAudience1
func (t *MicrosoftGraphBroadcastMeetingSettings_AllowedAudience) FromMicrosoftGraphBroadcastMeetingSettingsAllowedAudience1(v MicrosoftGraphBroadcastMeetingSettingsAllowedAudience1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphBroadcastMeetingSettingsAllowedAudience1 performs a merge with any union data inside the MicrosoftGraphBroadcastMeetingSettings_AllowedAudience, using the provided MicrosoftGraphBroadcastMeetingSettingsAllowedAudience1
func (t *MicrosoftGraphBroadcastMeetingSettings_AllowedAudience) MergeMicrosoftGraphBroadcastMeetingSettingsAllowedAudience1(v MicrosoftGraphBroadcastMeetingSettingsAllowedAudience1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

func (t MicrosoftGraphBroadcastMeetingSettings_AllowedAudience) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *MicrosoftGraphBroadcastMeetingSettings_AllowedAudience) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsMicrosoftGraphBroadcastMeetingCaptionSettings returns the union data inside the MicrosoftGraphBroadcastMeetingSettings_Captions as a MicrosoftGraphBroadcastMeetingCaptionSettings
func (t MicrosoftGraphBroadcastMeetingSettings_Captions) AsMicrosoftGraphBroadcastMeetingCaptionSettings() (MicrosoftGraphBroadcastMeetingCaptionSettings, error) {
	var body MicrosoftGraphBroadcastMeetingCaptionSettings
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphBroadcastMeetingCaptionSettings overwrites any union data inside the MicrosoftGraphBroadcastMeetingSettings_Captions as the provided MicrosoftGraphBroadcastMeetingCaptionSettings
func (t *MicrosoftGraphBroadcastMeetingSettings_Captions) FromMicrosoftGraphBroadcastMeetingCaptionSettings(v MicrosoftGraphBroadcastMeetingCaptionSettings) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphBroadcastMeetingCaptionSettings performs a merge with any union data inside the MicrosoftGraphBroadcastMeetingSettings_Captions, using the provided MicrosoftGraphBroadcastMeetingCaptionSettings
func (t *MicrosoftGraphBroadcastMeetingSettings_Captions) MergeMicrosoftGraphBroadcastMeetingCaptionSettings(v MicrosoftGraphBroadcastMeetingCaptionSettings) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsMicrosoftGraphBroadcastMeetingSettingsCaptions1 returns the union data inside the MicrosoftGraphBroadcastMeetingSettings_Captions as a MicrosoftGraphBroadcastMeetingSettingsCaptions1
func (t MicrosoftGraphBroadcastMeetingSettings_Captions) AsMicrosoftGraphBroadcastMeetingSettingsCaptions1() (MicrosoftGraphBroadcastMeetingSettingsCaptions1, error) {
	var body MicrosoftGraphBroadcastMeetingSettingsCaptions1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphBroadcastMeetingSettingsCaptions1 overwrites any union data inside the MicrosoftGraphBroadcastMeetingSettings_Captions as the provided MicrosoftGraphBroadcastMeetingSettingsCaptions1
func (t *MicrosoftGraphBroadcastMeetingSettings_Captions) FromMicrosoftGraphBroadcastMeetingSettingsCaptions1(v MicrosoftGraphBroadcastMeetingSettingsCaptions1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphBroadcastMeetingSettingsCaptions1 performs a merge with any union data inside the MicrosoftGraphBroadcastMeetingSettings_Captions, using the provided MicrosoftGraphBroadcastMeetingSettingsCaptions1
func (t *MicrosoftGraphBroadcastMeetingSettings_Captions) MergeMicrosoftGraphBroadcastMeetingSettingsCaptions1(v MicrosoftGraphBroadcastMeetingSettingsCaptions1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

func (t MicrosoftGraphBroadcastMeetingSettings_Captions) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *MicrosoftGraphBroadcastMeetingSettings_Captions) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsMicrosoftGraphAlbum returns the union data inside the MicrosoftGraphBundle_Album as a MicrosoftGraphAlbum
func (t MicrosoftGraphBundle_Album) AsMicrosoftGraphAlbum() (MicrosoftGraphAlbum, error) {
	var body MicrosoftGraphAlbum
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphAlbum overwrites any union data inside the MicrosoftGraphBundle_Album as the provided MicrosoftGraphAlbum
func (t *MicrosoftGraphBundle_Album) FromMicrosoftGraphAlbum(v MicrosoftGraphAlbum) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphAlbum performs a merge with any union data inside the MicrosoftGraphBundle_Album, using the provided MicrosoftGraphAlbum
func (t *MicrosoftGraphBundle_Album) MergeMicrosoftGraphAlbum(v MicrosoftGraphAlbum) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsMicrosoftGraphBundleAlbum1 returns the union data inside the MicrosoftGraphBundle_Album as a MicrosoftGraphBundleAlbum1
func (t MicrosoftGraphBundle_Album) AsMicrosoftGraphBundleAlbum1() (MicrosoftGraphBundleAlbum1, error) {
	var body MicrosoftGraphBundleAlbum1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphBundleAlbum1 overwrites any union data inside the MicrosoftGraphBundle_Album as the provided MicrosoftGraphBundleAlbum1
func (t *MicrosoftGraphBundle_Album) FromMicrosoftGraphBundleAlbum1(v MicrosoftGraphBundleAlbum1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphBundleAlbum1 performs a merge with any union data inside the MicrosoftGraphBundle_Album, using the provided MicrosoftGraphBundleAlbum1
func (t *MicrosoftGraphBundle_Album) MergeMicrosoftGraphBundleAlbum1(v MicrosoftGraphBundleAlbum1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

func (t MicrosoftGraphBundle_Album) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *MicrosoftGraphBundle_Album) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsMicrosoftGraphOnlineMeetingProviderType returns the union data inside the MicrosoftGraphCalendar_AllowedOnlineMeetingProviders_Item as a MicrosoftGraphOnlineMeetingProviderType
func (t MicrosoftGraphCalendar_AllowedOnlineMeetingProviders_Item) AsMicrosoftGraphOnlineMeetingProviderType() (MicrosoftGraphOnlineMeetingProviderType, error) {
	var body MicrosoftGraphOnlineMeetingProviderType
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphOnlineMeetingProviderType overwrites any union data inside the MicrosoftGraphCalendar_AllowedOnlineMeetingProviders_Item as the provided MicrosoftGraphOnlineMeetingProviderType
func (t *MicrosoftGraphCalendar_AllowedOnlineMeetingProviders_Item) FromMicrosoftGraphOnlineMeetingProviderType(v MicrosoftGraphOnlineMeetingProviderType) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphOnlineMeetingProviderType performs a merge with any union data inside the MicrosoftGraphCalendar_AllowedOnlineMeetingProviders_Item, using the provided MicrosoftGraphOnlineMeetingProviderType
func (t *MicrosoftGraphCalendar_AllowedOnlineMeetingProviders_Item) MergeMicrosoftGraphOnlineMeetingProviderType(v MicrosoftGraphOnlineMeetingProviderType) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsMicrosoftGraphCalendarAllowedOnlineMeetingProviders1 returns the union data inside the MicrosoftGraphCalendar_AllowedOnlineMeetingProviders_Item as a MicrosoftGraphCalendarAllowedOnlineMeetingProviders1
func (t MicrosoftGraphCalendar_AllowedOnlineMeetingProviders_Item) AsMicrosoftGraphCalendarAllowedOnlineMeetingProviders1() (MicrosoftGraphCalendarAllowedOnlineMeetingProviders1, error) {
	var body MicrosoftGraphCalendarAllowedOnlineMeetingProviders1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphCalendarAllowedOnlineMeetingProviders1 overwrites any union data inside the MicrosoftGraphCalendar_AllowedOnlineMeetingProviders_Item as the provided MicrosoftGraphCalendarAllowedOnlineMeetingProviders1
func (t *MicrosoftGraphCalendar_AllowedOnlineMeetingProviders_Item) FromMicrosoftGraphCalendarAllowedOnlineMeetingProviders1(v MicrosoftGraphCalendarAllowedOnlineMeetingProviders1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphCalendarAllowedOnlineMeetingProviders1 performs a merge with any union data inside the MicrosoftGraphCalendar_AllowedOnlineMeetingProviders_Item, using the provided MicrosoftGraphCalendarAllowedOnlineMeetingProviders1
func (t *MicrosoftGraphCalendar_AllowedOnlineMeetingProviders_Item) MergeMicrosoftGraphCalendarAllowedOnlineMeetingProviders1(v MicrosoftGraphCalendarAllowedOnlineMeetingProviders1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

func (t MicrosoftGraphCalendar_AllowedOnlineMeetingProviders_Item) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *MicrosoftGraphCalendar_AllowedOnlineMeetingProviders_Item) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsMicrosoftGraphCalendarColor returns the union data inside the MicrosoftGraphCalendar_Color as a MicrosoftGraphCalendarColor
func (t MicrosoftGraphCalendar_Color) AsMicrosoftGraphCalendarColor() (MicrosoftGraphCalendarColor, error) {
	var body MicrosoftGraphCalendarColor
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphCalendarColor overwrites any union data inside the MicrosoftGraphCalendar_Color as the provided MicrosoftGraphCalendarColor
func (t *MicrosoftGraphCalendar_Color) FromMicrosoftGraphCalendarColor(v MicrosoftGraphCalendarColor) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphCalendarColor performs a merge with any union data inside the MicrosoftGraphCalendar_Color, using the provided MicrosoftGraphCalendarColor
func (t *MicrosoftGraphCalendar_Color) MergeMicrosoftGraphCalendarColor(v MicrosoftGraphCalendarColor) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsMicrosoftGraphCalendarColor1 returns the union data inside the MicrosoftGraphCalendar_Color as a MicrosoftGraphCalendarColor1
func (t MicrosoftGraphCalendar_Color) AsMicrosoftGraphCalendarColor1() (MicrosoftGraphCalendarColor1, error) {
	var body MicrosoftGraphCalendarColor1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphCalendarColor1 overwrites any union data inside the MicrosoftGraphCalendar_Color as the provided MicrosoftGraphCalendarColor1
func (t *MicrosoftGraphCalendar_Color) FromMicrosoftGraphCalendarColor1(v MicrosoftGraphCalendarColor1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphCalendarColor1 performs a merge with any union data inside the MicrosoftGraphCalendar_Color, using the provided MicrosoftGraphCalendarColor1
func (t *MicrosoftGraphCalendar_Color) MergeMicrosoftGraphCalendarColor1(v MicrosoftGraphCalendarColor1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

func (t MicrosoftGraphCalendar_Color) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *MicrosoftGraphCalendar_Color) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsMicrosoftGraphOnlineMeetingProviderType returns the union data inside the MicrosoftGraphCalendar_DefaultOnlineMeetingProvider as a MicrosoftGraphOnlineMeetingProviderType
func (t MicrosoftGraphCalendar_DefaultOnlineMeetingProvider) AsMicrosoftGraphOnlineMeetingProviderType() (MicrosoftGraphOnlineMeetingProviderType, error) {
	var body MicrosoftGraphOnlineMeetingProviderType
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphOnlineMeetingProviderType overwrites any union data inside the MicrosoftGraphCalendar_DefaultOnlineMeetingProvider as the provided MicrosoftGraphOnlineMeetingProviderType
func (t *MicrosoftGraphCalendar_DefaultOnlineMeetingProvider) FromMicrosoftGraphOnlineMeetingProviderType(v MicrosoftGraphOnlineMeetingProviderType) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphOnlineMeetingProviderType performs a merge with any union data inside the MicrosoftGraphCalendar_DefaultOnlineMeetingProvider, using the provided MicrosoftGraphOnlineMeetingProviderType
func (t *MicrosoftGraphCalendar_DefaultOnlineMeetingProvider) MergeMicrosoftGraphOnlineMeetingProviderType(v MicrosoftGraphOnlineMeetingProviderType) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsMicrosoftGraphCalendarDefaultOnlineMeetingProvider1 returns the union data inside the MicrosoftGraphCalendar_DefaultOnlineMeetingProvider as a MicrosoftGraphCalendarDefaultOnlineMeetingProvider1
func (t MicrosoftGraphCalendar_DefaultOnlineMeetingProvider) AsMicrosoftGraphCalendarDefaultOnlineMeetingProvider1() (MicrosoftGraphCalendarDefaultOnlineMeetingProvider1, error) {
	var body MicrosoftGraphCalendarDefaultOnlineMeetingProvider1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphCalendarDefaultOnlineMeetingProvider1 overwrites any union data inside the MicrosoftGraphCalendar_DefaultOnlineMeetingProvider as the provided MicrosoftGraphCalendarDefaultOnlineMeetingProvider1
func (t *MicrosoftGraphCalendar_DefaultOnlineMeetingProvider) FromMicrosoftGraphCalendarDefaultOnlineMeetingProvider1(v MicrosoftGraphCalendarDefaultOnlineMeetingProvider1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphCalendarDefaultOnlineMeetingProvider1 performs a merge with any union data inside the MicrosoftGraphCalendar_DefaultOnlineMeetingProvider, using the provided MicrosoftGraphCalendarDefaultOnlineMeetingProvider1
func (t *MicrosoftGraphCalendar_DefaultOnlineMeetingProvider) MergeMicrosoftGraphCalendarDefaultOnlineMeetingProvider1(v MicrosoftGraphCalendarDefaultOnlineMeetingProvider1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

func (t MicrosoftGraphCalendar_DefaultOnlineMeetingProvider) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *MicrosoftGraphCalendar_DefaultOnlineMeetingProvider) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsMicrosoftGraphEmailAddress returns the union data inside the MicrosoftGraphCalendar_Owner as a MicrosoftGraphEmailAddress
func (t MicrosoftGraphCalendar_Owner) AsMicrosoftGraphEmailAddress() (MicrosoftGraphEmailAddress, error) {
	var body MicrosoftGraphEmailAddress
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphEmailAddress overwrites any union data inside the MicrosoftGraphCalendar_Owner as the provided MicrosoftGraphEmailAddress
func (t *MicrosoftGraphCalendar_Owner) FromMicrosoftGraphEmailAddress(v MicrosoftGraphEmailAddress) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphEmailAddress performs a merge with any union data inside the MicrosoftGraphCalendar_Owner, using the provided MicrosoftGraphEmailAddress
func (t *MicrosoftGraphCalendar_Owner) MergeMicrosoftGraphEmailAddress(v MicrosoftGraphEmailAddress) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsMicrosoftGraphCalendarOwner1 returns the union data inside the MicrosoftGraphCalendar_Owner as a MicrosoftGraphCalendarOwner1
func (t MicrosoftGraphCalendar_Owner) AsMicrosoftGraphCalendarOwner1() (MicrosoftGraphCalendarOwner1, error) {
	var body MicrosoftGraphCalendarOwner1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphCalendarOwner1 overwrites any union data inside the MicrosoftGraphCalendar_Owner as the provided MicrosoftGraphCalendarOwner1
func (t *MicrosoftGraphCalendar_Owner) FromMicrosoftGraphCalendarOwner1(v MicrosoftGraphCalendarOwner1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphCalendarOwner1 performs a merge with any union data inside the MicrosoftGraphCalendar_Owner, using the provided MicrosoftGraphCalendarOwner1
func (t *MicrosoftGraphCalendar_Owner) MergeMicrosoftGraphCalendarOwner1(v MicrosoftGraphCalendarOwner1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

func (t MicrosoftGraphCalendar_Owner) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *MicrosoftGraphCalendar_Owner) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsMicrosoftGraphCalendarRoleType returns the union data inside the MicrosoftGraphCalendarPermission_AllowedRoles_Item as a MicrosoftGraphCalendarRoleType
func (t MicrosoftGraphCalendarPermission_AllowedRoles_Item) AsMicrosoftGraphCalendarRoleType() (MicrosoftGraphCalendarRoleType, error) {
	var body MicrosoftGraphCalendarRoleType
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphCalendarRoleType overwrites any union data inside the MicrosoftGraphCalendarPermission_AllowedRoles_Item as the provided MicrosoftGraphCalendarRoleType
func (t *MicrosoftGraphCalendarPermission_AllowedRoles_Item) FromMicrosoftGraphCalendarRoleType(v MicrosoftGraphCalendarRoleType) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphCalendarRoleType performs a merge with any union data inside the MicrosoftGraphCalendarPermission_AllowedRoles_Item, using the provided MicrosoftGraphCalendarRoleType
func (t *MicrosoftGraphCalendarPermission_AllowedRoles_Item) MergeMicrosoftGraphCalendarRoleType(v MicrosoftGraphCalendarRoleType) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsMicrosoftGraphCalendarPermissionAllowedRoles1 returns the union data inside the MicrosoftGraphCalendarPermission_AllowedRoles_Item as a MicrosoftGraphCalendarPermissionAllowedRoles1
func (t MicrosoftGraphCalendarPermission_AllowedRoles_Item) AsMicrosoftGraphCalendarPermissionAllowedRoles1() (MicrosoftGraphCalendarPermissionAllowedRoles1, error) {
	var body MicrosoftGraphCalendarPermissionAllowedRoles1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphCalendarPermissionAllowedRoles1 overwrites any union data inside the MicrosoftGraphCalendarPermission_AllowedRoles_Item as the provided MicrosoftGraphCalendarPermissionAllowedRoles1
func (t *MicrosoftGraphCalendarPermission_AllowedRoles_Item) FromMicrosoftGraphCalendarPermissionAllowedRoles1(v MicrosoftGraphCalendarPermissionAllowedRoles1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphCalendarPermissionAllowedRoles1 performs a merge with any union data inside the MicrosoftGraphCalendarPermission_AllowedRoles_Item, using the provided MicrosoftGraphCalendarPermissionAllowedRoles1
func (t *MicrosoftGraphCalendarPermission_AllowedRoles_Item) MergeMicrosoftGraphCalendarPermissionAllowedRoles1(v MicrosoftGraphCalendarPermissionAllowedRoles1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

func (t MicrosoftGraphCalendarPermission_AllowedRoles_Item) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *MicrosoftGraphCalendarPermission_AllowedRoles_Item) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsMicrosoftGraphEmailAddress returns the union data inside the MicrosoftGraphCalendarPermission_EmailAddress as a MicrosoftGraphEmailAddress
func (t MicrosoftGraphCalendarPermission_EmailAddress) AsMicrosoftGraphEmailAddress() (MicrosoftGraphEmailAddress, error) {
	var body MicrosoftGraphEmailAddress
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphEmailAddress overwrites any union data inside the MicrosoftGraphCalendarPermission_EmailAddress as the provided MicrosoftGraphEmailAddress
func (t *MicrosoftGraphCalendarPermission_EmailAddress) FromMicrosoftGraphEmailAddress(v MicrosoftGraphEmailAddress) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphEmailAddress performs a merge with any union data inside the MicrosoftGraphCalendarPermission_EmailAddress, using the provided MicrosoftGraphEmailAddress
func (t *MicrosoftGraphCalendarPermission_EmailAddress) MergeMicrosoftGraphEmailAddress(v MicrosoftGraphEmailAddress) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsMicrosoftGraphCalendarPermissionEmailAddress1 returns the union data inside the MicrosoftGraphCalendarPermission_EmailAddress as a MicrosoftGraphCalendarPermissionEmailAddress1
func (t MicrosoftGraphCalendarPermission_EmailAddress) AsMicrosoftGraphCalendarPermissionEmailAddress1() (MicrosoftGraphCalendarPermissionEmailAddress1, error) {
	var body MicrosoftGraphCalendarPermissionEmailAddress1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphCalendarPermissionEmailAddress1 overwrites any union data inside the MicrosoftGraphCalendarPermission_EmailAddress as the provided MicrosoftGraphCalendarPermissionEmailAddress1
func (t *MicrosoftGraphCalendarPermission_EmailAddress) FromMicrosoftGraphCalendarPermissionEmailAddress1(v MicrosoftGraphCalendarPermissionEmailAddress1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphCalendarPermissionEmailAddress1 performs a merge with any union data inside the MicrosoftGraphCalendarPermission_EmailAddress, using the provided MicrosoftGraphCalendarPermissionEmailAddress1
func (t *MicrosoftGraphCalendarPermission_EmailAddress) MergeMicrosoftGraphCalendarPermissionEmailAddress1(v MicrosoftGraphCalendarPermissionEmailAddress1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

func (t MicrosoftGraphCalendarPermission_EmailAddress) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *MicrosoftGraphCalendarPermission_EmailAddress) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsMicrosoftGraphCalendarRoleType returns the union data inside the MicrosoftGraphCalendarPermission_Role as a MicrosoftGraphCalendarRoleType
func (t MicrosoftGraphCalendarPermission_Role) AsMicrosoftGraphCalendarRoleType() (MicrosoftGraphCalendarRoleType, error) {
	var body MicrosoftGraphCalendarRoleType
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphCalendarRoleType overwrites any union data inside the MicrosoftGraphCalendarPermission_Role as the provided MicrosoftGraphCalendarRoleType
func (t *MicrosoftGraphCalendarPermission_Role) FromMicrosoftGraphCalendarRoleType(v MicrosoftGraphCalendarRoleType) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphCalendarRoleType performs a merge with any union data inside the MicrosoftGraphCalendarPermission_Role, using the provided MicrosoftGraphCalendarRoleType
func (t *MicrosoftGraphCalendarPermission_Role) MergeMicrosoftGraphCalendarRoleType(v MicrosoftGraphCalendarRoleType) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsMicrosoftGraphCalendarPermissionRole1 returns the union data inside the MicrosoftGraphCalendarPermission_Role as a MicrosoftGraphCalendarPermissionRole1
func (t MicrosoftGraphCalendarPermission_Role) AsMicrosoftGraphCalendarPermissionRole1() (MicrosoftGraphCalendarPermissionRole1, error) {
	var body MicrosoftGraphCalendarPermissionRole1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphCalendarPermissionRole1 overwrites any union data inside the MicrosoftGraphCalendarPermission_Role as the provided MicrosoftGraphCalendarPermissionRole1
func (t *MicrosoftGraphCalendarPermission_Role) FromMicrosoftGraphCalendarPermissionRole1(v MicrosoftGraphCalendarPermissionRole1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphCalendarPermissionRole1 performs a merge with any union data inside the MicrosoftGraphCalendarPermission_Role, using the provided MicrosoftGraphCalendarPermissionRole1
func (t *MicrosoftGraphCalendarPermission_Role) MergeMicrosoftGraphCalendarPermissionRole1(v MicrosoftGraphCalendarPermissionRole1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

func (t MicrosoftGraphCalendarPermission_Role) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *MicrosoftGraphCalendarPermission_Role) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsMicrosoftGraphIdentitySet returns the union data inside the MicrosoftGraphChangeTrackedEntity_LastModifiedBy as a MicrosoftGraphIdentitySet
func (t MicrosoftGraphChangeTrackedEntity_LastModifiedBy) AsMicrosoftGraphIdentitySet() (MicrosoftGraphIdentitySet, error) {
	var body MicrosoftGraphIdentitySet
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphIdentitySet overwrites any union data inside the MicrosoftGraphChangeTrackedEntity_LastModifiedBy as the provided MicrosoftGraphIdentitySet
func (t *MicrosoftGraphChangeTrackedEntity_LastModifiedBy) FromMicrosoftGraphIdentitySet(v MicrosoftGraphIdentitySet) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphIdentitySet performs a merge with any union data inside the MicrosoftGraphChangeTrackedEntity_LastModifiedBy, using the provided MicrosoftGraphIdentitySet
func (t *MicrosoftGraphChangeTrackedEntity_LastModifiedBy) MergeMicrosoftGraphIdentitySet(v MicrosoftGraphIdentitySet) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsMicrosoftGraphChangeTrackedEntityLastModifiedBy1 returns the union data inside the MicrosoftGraphChangeTrackedEntity_LastModifiedBy as a MicrosoftGraphChangeTrackedEntityLastModifiedBy1
func (t MicrosoftGraphChangeTrackedEntity_LastModifiedBy) AsMicrosoftGraphChangeTrackedEntityLastModifiedBy1() (MicrosoftGraphChangeTrackedEntityLastModifiedBy1, error) {
	var body MicrosoftGraphChangeTrackedEntityLastModifiedBy1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphChangeTrackedEntityLastModifiedBy1 overwrites any union data inside the MicrosoftGraphChangeTrackedEntity_LastModifiedBy as the provided MicrosoftGraphChangeTrackedEntityLastModifiedBy1
func (t *MicrosoftGraphChangeTrackedEntity_LastModifiedBy) FromMicrosoftGraphChangeTrackedEntityLastModifiedBy1(v MicrosoftGraphChangeTrackedEntityLastModifiedBy1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphChangeTrackedEntityLastModifiedBy1 performs a merge with any union data inside the MicrosoftGraphChangeTrackedEntity_LastModifiedBy, using the provided MicrosoftGraphChangeTrackedEntityLastModifiedBy1
func (t *MicrosoftGraphChangeTrackedEntity_LastModifiedBy) MergeMicrosoftGraphChangeTrackedEntityLastModifiedBy1(v MicrosoftGraphChangeTrackedEntityLastModifiedBy1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

func (t MicrosoftGraphChangeTrackedEntity_LastModifiedBy) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *MicrosoftGraphChangeTrackedEntity_LastModifiedBy) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsMicrosoftGraphDriveItem returns the union data inside the MicrosoftGraphChannel_FilesFolder as a MicrosoftGraphDriveItem
func (t MicrosoftGraphChannel_FilesFolder) AsMicrosoftGraphDriveItem() (MicrosoftGraphDriveItem, error) {
	var body MicrosoftGraphDriveItem
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphDriveItem overwrites any union data inside the MicrosoftGraphChannel_FilesFolder as the provided MicrosoftGraphDriveItem
func (t *MicrosoftGraphChannel_FilesFolder) FromMicrosoftGraphDriveItem(v MicrosoftGraphDriveItem) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphDriveItem performs a merge with any union data inside the MicrosoftGraphChannel_FilesFolder, using the provided MicrosoftGraphDriveItem
func (t *MicrosoftGraphChannel_FilesFolder) MergeMicrosoftGraphDriveItem(v MicrosoftGraphDriveItem) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsMicrosoftGraphChannelFilesFolder1 returns the union data inside the MicrosoftGraphChannel_FilesFolder as a MicrosoftGraphChannelFilesFolder1
func (t MicrosoftGraphChannel_FilesFolder) AsMicrosoftGraphChannelFilesFolder1() (MicrosoftGraphChannelFilesFolder1, error) {
	var body MicrosoftGraphChannelFilesFolder1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphChannelFilesFolder1 overwrites any union data inside the MicrosoftGraphChannel_FilesFolder as the provided MicrosoftGraphChannelFilesFolder1
func (t *MicrosoftGraphChannel_FilesFolder) FromMicrosoftGraphChannelFilesFolder1(v MicrosoftGraphChannelFilesFolder1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphChannelFilesFolder1 performs a merge with any union data inside the MicrosoftGraphChannel_FilesFolder, using the provided MicrosoftGraphChannelFilesFolder1
func (t *MicrosoftGraphChannel_FilesFolder) MergeMicrosoftGraphChannelFilesFolder1(v MicrosoftGraphChannelFilesFolder1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

func (t MicrosoftGraphChannel_FilesFolder) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *MicrosoftGraphChannel_FilesFolder) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsMicrosoftGraphChannelMembershipType returns the union data inside the MicrosoftGraphChannel_MembershipType as a MicrosoftGraphChannelMembershipType
func (t MicrosoftGraphChannel_MembershipType) AsMicrosoftGraphChannelMembershipType() (MicrosoftGraphChannelMembershipType, error) {
	var body MicrosoftGraphChannelMembershipType
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphChannelMembershipType overwrites any union data inside the MicrosoftGraphChannel_MembershipType as the provided MicrosoftGraphChannelMembershipType
func (t *MicrosoftGraphChannel_MembershipType) FromMicrosoftGraphChannelMembershipType(v MicrosoftGraphChannelMembershipType) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphChannelMembershipType performs a merge with any union data inside the MicrosoftGraphChannel_MembershipType, using the provided MicrosoftGraphChannelMembershipType
func (t *MicrosoftGraphChannel_MembershipType) MergeMicrosoftGraphChannelMembershipType(v MicrosoftGraphChannelMembershipType) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsMicrosoftGraphChannelMembershipType1 returns the union data inside the MicrosoftGraphChannel_MembershipType as a MicrosoftGraphChannelMembershipType1
func (t MicrosoftGraphChannel_MembershipType) AsMicrosoftGraphChannelMembershipType1() (MicrosoftGraphChannelMembershipType1, error) {
	var body MicrosoftGraphChannelMembershipType1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphChannelMembershipType1 overwrites any union data inside the MicrosoftGraphChannel_MembershipType as the provided MicrosoftGraphChannelMembershipType1
func (t *MicrosoftGraphChannel_MembershipType) FromMicrosoftGraphChannelMembershipType1(v MicrosoftGraphChannelMembershipType1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphChannelMembershipType1 performs a merge with any union data inside the MicrosoftGraphChannel_MembershipType, using the provided MicrosoftGraphChannelMembershipType1
func (t *MicrosoftGraphChannel_MembershipType) MergeMicrosoftGraphChannelMembershipType1(v MicrosoftGraphChannelMembershipType1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

func (t MicrosoftGraphChannel_MembershipType) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *MicrosoftGraphChannel_MembershipType) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsMicrosoftGraphChatMessageInfo returns the union data inside the MicrosoftGraphChat_LastMessagePreview as a MicrosoftGraphChatMessageInfo
func (t MicrosoftGraphChat_LastMessagePreview) AsMicrosoftGraphChatMessageInfo() (MicrosoftGraphChatMessageInfo, error) {
	var body MicrosoftGraphChatMessageInfo
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphChatMessageInfo overwrites any union data inside the MicrosoftGraphChat_LastMessagePreview as the provided MicrosoftGraphChatMessageInfo
func (t *MicrosoftGraphChat_LastMessagePreview) FromMicrosoftGraphChatMessageInfo(v MicrosoftGraphChatMessageInfo) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphChatMessageInfo performs a merge with any union data inside the MicrosoftGraphChat_LastMessagePreview, using the provided MicrosoftGraphChatMessageInfo
func (t *MicrosoftGraphChat_LastMessagePreview) MergeMicrosoftGraphChatMessageInfo(v MicrosoftGraphChatMessageInfo) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsMicrosoftGraphChatLastMessagePreview1 returns the union data inside the MicrosoftGraphChat_LastMessagePreview as a MicrosoftGraphChatLastMessagePreview1
func (t MicrosoftGraphChat_LastMessagePreview) AsMicrosoftGraphChatLastMessagePreview1() (MicrosoftGraphChatLastMessagePreview1, error) {
	var body MicrosoftGraphChatLastMessagePreview1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphChatLastMessagePreview1 overwrites any union data inside the MicrosoftGraphChat_LastMessagePreview as the provided MicrosoftGraphChatLastMessagePreview1
func (t *MicrosoftGraphChat_LastMessagePreview) FromMicrosoftGraphChatLastMessagePreview1(v MicrosoftGraphChatLastMessagePreview1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphChatLastMessagePreview1 performs a merge with any union data inside the MicrosoftGraphChat_LastMessagePreview, using the provided MicrosoftGraphChatLastMessagePreview1
func (t *MicrosoftGraphChat_LastMessagePreview) MergeMicrosoftGraphChatLastMessagePreview1(v MicrosoftGraphChatLastMessagePreview1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

func (t MicrosoftGraphChat_LastMessagePreview) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *MicrosoftGraphChat_LastMessagePreview) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsMicrosoftGraphTeamworkOnlineMeetingInfo returns the union data inside the MicrosoftGraphChat_OnlineMeetingInfo as a MicrosoftGraphTeamworkOnlineMeetingInfo
func (t MicrosoftGraphChat_OnlineMeetingInfo) AsMicrosoftGraphTeamworkOnlineMeetingInfo() (MicrosoftGraphTeamworkOnlineMeetingInfo, error) {
	var body MicrosoftGraphTeamworkOnlineMeetingInfo
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphTeamworkOnlineMeetingInfo overwrites any union data inside the MicrosoftGraphChat_OnlineMeetingInfo as the provided MicrosoftGraphTeamworkOnlineMeetingInfo
func (t *MicrosoftGraphChat_OnlineMeetingInfo) FromMicrosoftGraphTeamworkOnlineMeetingInfo(v MicrosoftGraphTeamworkOnlineMeetingInfo) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphTeamworkOnlineMeetingInfo performs a merge with any union data inside the MicrosoftGraphChat_OnlineMeetingInfo, using the provided MicrosoftGraphTeamworkOnlineMeetingInfo
func (t *MicrosoftGraphChat_OnlineMeetingInfo) MergeMicrosoftGraphTeamworkOnlineMeetingInfo(v MicrosoftGraphTeamworkOnlineMeetingInfo) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsMicrosoftGraphChatOnlineMeetingInfo1 returns the union data inside the MicrosoftGraphChat_OnlineMeetingInfo as a MicrosoftGraphChatOnlineMeetingInfo1
func (t MicrosoftGraphChat_OnlineMeetingInfo) AsMicrosoftGraphChatOnlineMeetingInfo1() (MicrosoftGraphChatOnlineMeetingInfo1, error) {
	var body MicrosoftGraphChatOnlineMeetingInfo1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphChatOnlineMeetingInfo1 overwrites any union data inside the MicrosoftGraphChat_OnlineMeetingInfo as the provided MicrosoftGraphChatOnlineMeetingInfo1
func (t *MicrosoftGraphChat_OnlineMeetingInfo) FromMicrosoftGraphChatOnlineMeetingInfo1(v MicrosoftGraphChatOnlineMeetingInfo1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphChatOnlineMeetingInfo1 performs a merge with any union data inside the MicrosoftGraphChat_OnlineMeetingInfo, using the provided MicrosoftGraphChatOnlineMeetingInfo1
func (t *MicrosoftGraphChat_OnlineMeetingInfo) MergeMicrosoftGraphChatOnlineMeetingInfo1(v MicrosoftGraphChatOnlineMeetingInfo1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

func (t MicrosoftGraphChat_OnlineMeetingInfo) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *MicrosoftGraphChat_OnlineMeetingInfo) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsMicrosoftGraphChatViewpoint returns the union data inside the MicrosoftGraphChat_Viewpoint as a MicrosoftGraphChatViewpoint
func (t MicrosoftGraphChat_Viewpoint) AsMicrosoftGraphChatViewpoint() (MicrosoftGraphChatViewpoint, error) {
	var body MicrosoftGraphChatViewpoint
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphChatViewpoint overwrites any union data inside the MicrosoftGraphChat_Viewpoint as the provided MicrosoftGraphChatViewpoint
func (t *MicrosoftGraphChat_Viewpoint) FromMicrosoftGraphChatViewpoint(v MicrosoftGraphChatViewpoint) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphChatViewpoint performs a merge with any union data inside the MicrosoftGraphChat_Viewpoint, using the provided MicrosoftGraphChatViewpoint
func (t *MicrosoftGraphChat_Viewpoint) MergeMicrosoftGraphChatViewpoint(v MicrosoftGraphChatViewpoint) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsMicrosoftGraphChatViewpoint1 returns the union data inside the MicrosoftGraphChat_Viewpoint as a MicrosoftGraphChatViewpoint1
func (t MicrosoftGraphChat_Viewpoint) AsMicrosoftGraphChatViewpoint1() (MicrosoftGraphChatViewpoint1, error) {
	var body MicrosoftGraphChatViewpoint1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphChatViewpoint1 overwrites any union data inside the MicrosoftGraphChat_Viewpoint as the provided MicrosoftGraphChatViewpoint1
func (t *MicrosoftGraphChat_Viewpoint) FromMicrosoftGraphChatViewpoint1(v MicrosoftGraphChatViewpoint1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphChatViewpoint1 performs a merge with any union data inside the MicrosoftGraphChat_Viewpoint, using the provided MicrosoftGraphChatViewpoint1
func (t *MicrosoftGraphChat_Viewpoint) MergeMicrosoftGraphChatViewpoint1(v MicrosoftGraphChatViewpoint1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

func (t MicrosoftGraphChat_Viewpoint) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *MicrosoftGraphChat_Viewpoint) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsMicrosoftGraphChatMessageAttachment returns the union data inside the MicrosoftGraphChatMessage_Attachments_Item as a MicrosoftGraphChatMessageAttachment
func (t MicrosoftGraphChatMessage_Attachments_Item) AsMicrosoftGraphChatMessageAttachment() (MicrosoftGraphChatMessageAttachment, error) {
	var body MicrosoftGraphChatMessageAttachment
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphChatMessageAttachment overwrites any union data inside the MicrosoftGraphChatMessage_Attachments_Item as the provided MicrosoftGraphChatMessageAttachment
func (t *MicrosoftGraphChatMessage_Attachments_Item) FromMicrosoftGraphChatMessageAttachment(v MicrosoftGraphChatMessageAttachment) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphChatMessageAttachment performs a merge with any union data inside the MicrosoftGraphChatMessage_Attachments_Item, using the provided MicrosoftGraphChatMessageAttachment
func (t *MicrosoftGraphChatMessage_Attachments_Item) MergeMicrosoftGraphChatMessageAttachment(v MicrosoftGraphChatMessageAttachment) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsMicrosoftGraphChatMessageAttachments1 returns the union data inside the MicrosoftGraphChatMessage_Attachments_Item as a MicrosoftGraphChatMessageAttachments1
func (t MicrosoftGraphChatMessage_Attachments_Item) AsMicrosoftGraphChatMessageAttachments1() (MicrosoftGraphChatMessageAttachments1, error) {
	var body MicrosoftGraphChatMessageAttachments1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphChatMessageAttachments1 overwrites any union data inside the MicrosoftGraphChatMessage_Attachments_Item as the provided MicrosoftGraphChatMessageAttachments1
func (t *MicrosoftGraphChatMessage_Attachments_Item) FromMicrosoftGraphChatMessageAttachments1(v MicrosoftGraphChatMessageAttachments1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphChatMessageAttachments1 performs a merge with any union data inside the MicrosoftGraphChatMessage_Attachments_Item, using the provided MicrosoftGraphChatMessageAttachments1
func (t *MicrosoftGraphChatMessage_Attachments_Item) MergeMicrosoftGraphChatMessageAttachments1(v MicrosoftGraphChatMessageAttachments1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

func (t MicrosoftGraphChatMessage_Attachments_Item) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *MicrosoftGraphChatMessage_Attachments_Item) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsMicrosoftGraphChannelIdentity returns the union data inside the MicrosoftGraphChatMessage_ChannelIdentity as a MicrosoftGraphChannelIdentity
func (t MicrosoftGraphChatMessage_ChannelIdentity) AsMicrosoftGraphChannelIdentity() (MicrosoftGraphChannelIdentity, error) {
	var body MicrosoftGraphChannelIdentity
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphChannelIdentity overwrites any union data inside the MicrosoftGraphChatMessage_ChannelIdentity as the provided MicrosoftGraphChannelIdentity
func (t *MicrosoftGraphChatMessage_ChannelIdentity) FromMicrosoftGraphChannelIdentity(v MicrosoftGraphChannelIdentity) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphChannelIdentity performs a merge with any union data inside the MicrosoftGraphChatMessage_ChannelIdentity, using the provided MicrosoftGraphChannelIdentity
func (t *MicrosoftGraphChatMessage_ChannelIdentity) MergeMicrosoftGraphChannelIdentity(v MicrosoftGraphChannelIdentity) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsMicrosoftGraphChatMessageChannelIdentity1 returns the union data inside the MicrosoftGraphChatMessage_ChannelIdentity as a MicrosoftGraphChatMessageChannelIdentity1
func (t MicrosoftGraphChatMessage_ChannelIdentity) AsMicrosoftGraphChatMessageChannelIdentity1() (MicrosoftGraphChatMessageChannelIdentity1, error) {
	var body MicrosoftGraphChatMessageChannelIdentity1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphChatMessageChannelIdentity1 overwrites any union data inside the MicrosoftGraphChatMessage_ChannelIdentity as the provided MicrosoftGraphChatMessageChannelIdentity1
func (t *MicrosoftGraphChatMessage_ChannelIdentity) FromMicrosoftGraphChatMessageChannelIdentity1(v MicrosoftGraphChatMessageChannelIdentity1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphChatMessageChannelIdentity1 performs a merge with any union data inside the MicrosoftGraphChatMessage_ChannelIdentity, using the provided MicrosoftGraphChatMessageChannelIdentity1
func (t *MicrosoftGraphChatMessage_ChannelIdentity) MergeMicrosoftGraphChatMessageChannelIdentity1(v MicrosoftGraphChatMessageChannelIdentity1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

func (t MicrosoftGraphChatMessage_ChannelIdentity) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *MicrosoftGraphChatMessage_ChannelIdentity) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsMicrosoftGraphEventMessageDetail returns the union data inside the MicrosoftGraphChatMessage_EventDetail as a MicrosoftGraphEventMessageDetail
func (t MicrosoftGraphChatMessage_EventDetail) AsMicrosoftGraphEventMessageDetail() (MicrosoftGraphEventMessageDetail, error) {
	var body MicrosoftGraphEventMessageDetail
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphEventMessageDetail overwrites any union data inside the MicrosoftGraphChatMessage_EventDetail as the provided MicrosoftGraphEventMessageDetail
func (t *MicrosoftGraphChatMessage_EventDetail) FromMicrosoftGraphEventMessageDetail(v MicrosoftGraphEventMessageDetail) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphEventMessageDetail performs a merge with any union data inside the MicrosoftGraphChatMessage_EventDetail, using the provided MicrosoftGraphEventMessageDetail
func (t *MicrosoftGraphChatMessage_EventDetail) MergeMicrosoftGraphEventMessageDetail(v MicrosoftGraphEventMessageDetail) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsMicrosoftGraphChatMessageEventDetail1 returns the union data inside the MicrosoftGraphChatMessage_EventDetail as a MicrosoftGraphChatMessageEventDetail1
func (t MicrosoftGraphChatMessage_EventDetail) AsMicrosoftGraphChatMessageEventDetail1() (MicrosoftGraphChatMessageEventDetail1, error) {
	var body MicrosoftGraphChatMessageEventDetail1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphChatMessageEventDetail1 overwrites any union data inside the MicrosoftGraphChatMessage_EventDetail as the provided MicrosoftGraphChatMessageEventDetail1
func (t *MicrosoftGraphChatMessage_EventDetail) FromMicrosoftGraphChatMessageEventDetail1(v MicrosoftGraphChatMessageEventDetail1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphChatMessageEventDetail1 performs a merge with any union data inside the MicrosoftGraphChatMessage_EventDetail, using the provided MicrosoftGraphChatMessageEventDetail1
func (t *MicrosoftGraphChatMessage_EventDetail) MergeMicrosoftGraphChatMessageEventDetail1(v MicrosoftGraphChatMessageEventDetail1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

func (t MicrosoftGraphChatMessage_EventDetail) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *MicrosoftGraphChatMessage_EventDetail) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsMicrosoftGraphChatMessageFromIdentitySet returns the union data inside the MicrosoftGraphChatMessage_From as a MicrosoftGraphChatMessageFromIdentitySet
func (t MicrosoftGraphChatMessage_From) AsMicrosoftGraphChatMessageFromIdentitySet() (MicrosoftGraphChatMessageFromIdentitySet, error) {
	var body MicrosoftGraphChatMessageFromIdentitySet
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphChatMessageFromIdentitySet overwrites any union data inside the MicrosoftGraphChatMessage_From as the provided MicrosoftGraphChatMessageFromIdentitySet
func (t *MicrosoftGraphChatMessage_From) FromMicrosoftGraphChatMessageFromIdentitySet(v MicrosoftGraphChatMessageFromIdentitySet) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphChatMessageFromIdentitySet performs a merge with any union data inside the MicrosoftGraphChatMessage_From, using the provided MicrosoftGraphChatMessageFromIdentitySet
func (t *MicrosoftGraphChatMessage_From) MergeMicrosoftGraphChatMessageFromIdentitySet(v MicrosoftGraphChatMessageFromIdentitySet) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsMicrosoftGraphChatMessageFrom1 returns the union data inside the MicrosoftGraphChatMessage_From as a MicrosoftGraphChatMessageFrom1
func (t MicrosoftGraphChatMessage_From) AsMicrosoftGraphChatMessageFrom1() (MicrosoftGraphChatMessageFrom1, error) {
	var body MicrosoftGraphChatMessageFrom1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphChatMessageFrom1 overwrites any union data inside the MicrosoftGraphChatMessage_From as the provided MicrosoftGraphChatMessageFrom1
func (t *MicrosoftGraphChatMessage_From) FromMicrosoftGraphChatMessageFrom1(v MicrosoftGraphChatMessageFrom1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphChatMessageFrom1 performs a merge with any union data inside the MicrosoftGraphChatMessage_From, using the provided MicrosoftGraphChatMessageFrom1
func (t *MicrosoftGraphChatMessage_From) MergeMicrosoftGraphChatMessageFrom1(v MicrosoftGraphChatMessageFrom1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

func (t MicrosoftGraphChatMessage_From) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *MicrosoftGraphChatMessage_From) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsMicrosoftGraphChatMessageMention returns the union data inside the MicrosoftGraphChatMessage_Mentions_Item as a MicrosoftGraphChatMessageMention
func (t MicrosoftGraphChatMessage_Mentions_Item) AsMicrosoftGraphChatMessageMention() (MicrosoftGraphChatMessageMention, error) {
	var body MicrosoftGraphChatMessageMention
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphChatMessageMention overwrites any union data inside the MicrosoftGraphChatMessage_Mentions_Item as the provided MicrosoftGraphChatMessageMention
func (t *MicrosoftGraphChatMessage_Mentions_Item) FromMicrosoftGraphChatMessageMention(v MicrosoftGraphChatMessageMention) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphChatMessageMention performs a merge with any union data inside the MicrosoftGraphChatMessage_Mentions_Item, using the provided MicrosoftGraphChatMessageMention
func (t *MicrosoftGraphChatMessage_Mentions_Item) MergeMicrosoftGraphChatMessageMention(v MicrosoftGraphChatMessageMention) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsMicrosoftGraphChatMessageMentions1 returns the union data inside the MicrosoftGraphChatMessage_Mentions_Item as a MicrosoftGraphChatMessageMentions1
func (t MicrosoftGraphChatMessage_Mentions_Item) AsMicrosoftGraphChatMessageMentions1() (MicrosoftGraphChatMessageMentions1, error) {
	var body MicrosoftGraphChatMessageMentions1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphChatMessageMentions1 overwrites any union data inside the MicrosoftGraphChatMessage_Mentions_Item as the provided MicrosoftGraphChatMessageMentions1
func (t *MicrosoftGraphChatMessage_Mentions_Item) FromMicrosoftGraphChatMessageMentions1(v MicrosoftGraphChatMessageMentions1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphChatMessageMentions1 performs a merge with any union data inside the MicrosoftGraphChatMessage_Mentions_Item, using the provided MicrosoftGraphChatMessageMentions1
func (t *MicrosoftGraphChatMessage_Mentions_Item) MergeMicrosoftGraphChatMessageMentions1(v MicrosoftGraphChatMessageMentions1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

func (t MicrosoftGraphChatMessage_Mentions_Item) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *MicrosoftGraphChatMessage_Mentions_Item) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsMicrosoftGraphChatMessageHistoryItem returns the union data inside the MicrosoftGraphChatMessage_MessageHistory_Item as a MicrosoftGraphChatMessageHistoryItem
func (t MicrosoftGraphChatMessage_MessageHistory_Item) AsMicrosoftGraphChatMessageHistoryItem() (MicrosoftGraphChatMessageHistoryItem, error) {
	var body MicrosoftGraphChatMessageHistoryItem
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphChatMessageHistoryItem overwrites any union data inside the MicrosoftGraphChatMessage_MessageHistory_Item as the provided MicrosoftGraphChatMessageHistoryItem
func (t *MicrosoftGraphChatMessage_MessageHistory_Item) FromMicrosoftGraphChatMessageHistoryItem(v MicrosoftGraphChatMessageHistoryItem) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphChatMessageHistoryItem performs a merge with any union data inside the MicrosoftGraphChatMessage_MessageHistory_Item, using the provided MicrosoftGraphChatMessageHistoryItem
func (t *MicrosoftGraphChatMessage_MessageHistory_Item) MergeMicrosoftGraphChatMessageHistoryItem(v MicrosoftGraphChatMessageHistoryItem) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsMicrosoftGraphChatMessageMessageHistory1 returns the union data inside the MicrosoftGraphChatMessage_MessageHistory_Item as a MicrosoftGraphChatMessageMessageHistory1
func (t MicrosoftGraphChatMessage_MessageHistory_Item) AsMicrosoftGraphChatMessageMessageHistory1() (MicrosoftGraphChatMessageMessageHistory1, error) {
	var body MicrosoftGraphChatMessageMessageHistory1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphChatMessageMessageHistory1 overwrites any union data inside the MicrosoftGraphChatMessage_MessageHistory_Item as the provided MicrosoftGraphChatMessageMessageHistory1
func (t *MicrosoftGraphChatMessage_MessageHistory_Item) FromMicrosoftGraphChatMessageMessageHistory1(v MicrosoftGraphChatMessageMessageHistory1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphChatMessageMessageHistory1 performs a merge with any union data inside the MicrosoftGraphChatMessage_MessageHistory_Item, using the provided MicrosoftGraphChatMessageMessageHistory1
func (t *MicrosoftGraphChatMessage_MessageHistory_Item) MergeMicrosoftGraphChatMessageMessageHistory1(v MicrosoftGraphChatMessageMessageHistory1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

func (t MicrosoftGraphChatMessage_MessageHistory_Item) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *MicrosoftGraphChatMessage_MessageHistory_Item) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsMicrosoftGraphChatMessagePolicyViolation returns the union data inside the MicrosoftGraphChatMessage_PolicyViolation as a MicrosoftGraphChatMessagePolicyViolation
func (t MicrosoftGraphChatMessage_PolicyViolation) AsMicrosoftGraphChatMessagePolicyViolation() (MicrosoftGraphChatMessagePolicyViolation, error) {
	var body MicrosoftGraphChatMessagePolicyViolation
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphChatMessagePolicyViolation overwrites any union data inside the MicrosoftGraphChatMessage_PolicyViolation as the provided MicrosoftGraphChatMessagePolicyViolation
func (t *MicrosoftGraphChatMessage_PolicyViolation) FromMicrosoftGraphChatMessagePolicyViolation(v MicrosoftGraphChatMessagePolicyViolation) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphChatMessagePolicyViolation performs a merge with any union data inside the MicrosoftGraphChatMessage_PolicyViolation, using the provided MicrosoftGraphChatMessagePolicyViolation
func (t *MicrosoftGraphChatMessage_PolicyViolation) MergeMicrosoftGraphChatMessagePolicyViolation(v MicrosoftGraphChatMessagePolicyViolation) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsMicrosoftGraphChatMessagePolicyViolation1 returns the union data inside the MicrosoftGraphChatMessage_PolicyViolation as a MicrosoftGraphChatMessagePolicyViolation1
func (t MicrosoftGraphChatMessage_PolicyViolation) AsMicrosoftGraphChatMessagePolicyViolation1() (MicrosoftGraphChatMessagePolicyViolation1, error) {
	var body MicrosoftGraphChatMessagePolicyViolation1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphChatMessagePolicyViolation1 overwrites any union data inside the MicrosoftGraphChatMessage_PolicyViolation as the provided MicrosoftGraphChatMessagePolicyViolation1
func (t *MicrosoftGraphChatMessage_PolicyViolation) FromMicrosoftGraphChatMessagePolicyViolation1(v MicrosoftGraphChatMessagePolicyViolation1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphChatMessagePolicyViolation1 performs a merge with any union data inside the MicrosoftGraphChatMessage_PolicyViolation, using the provided MicrosoftGraphChatMessagePolicyViolation1
func (t *MicrosoftGraphChatMessage_PolicyViolation) MergeMicrosoftGraphChatMessagePolicyViolation1(v MicrosoftGraphChatMessagePolicyViolation1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

func (t MicrosoftGraphChatMessage_PolicyViolation) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *MicrosoftGraphChatMessage_PolicyViolation) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsMicrosoftGraphChatMessageReaction returns the union data inside the MicrosoftGraphChatMessage_Reactions_Item as a MicrosoftGraphChatMessageReaction
func (t MicrosoftGraphChatMessage_Reactions_Item) AsMicrosoftGraphChatMessageReaction() (MicrosoftGraphChatMessageReaction, error) {
	var body MicrosoftGraphChatMessageReaction
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphChatMessageReaction overwrites any union data inside the MicrosoftGraphChatMessage_Reactions_Item as the provided MicrosoftGraphChatMessageReaction
func (t *MicrosoftGraphChatMessage_Reactions_Item) FromMicrosoftGraphChatMessageReaction(v MicrosoftGraphChatMessageReaction) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphChatMessageReaction performs a merge with any union data inside the MicrosoftGraphChatMessage_Reactions_Item, using the provided MicrosoftGraphChatMessageReaction
func (t *MicrosoftGraphChatMessage_Reactions_Item) MergeMicrosoftGraphChatMessageReaction(v MicrosoftGraphChatMessageReaction) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsMicrosoftGraphChatMessageReactions1 returns the union data inside the MicrosoftGraphChatMessage_Reactions_Item as a MicrosoftGraphChatMessageReactions1
func (t MicrosoftGraphChatMessage_Reactions_Item) AsMicrosoftGraphChatMessageReactions1() (MicrosoftGraphChatMessageReactions1, error) {
	var body MicrosoftGraphChatMessageReactions1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphChatMessageReactions1 overwrites any union data inside the MicrosoftGraphChatMessage_Reactions_Item as the provided MicrosoftGraphChatMessageReactions1
func (t *MicrosoftGraphChatMessage_Reactions_Item) FromMicrosoftGraphChatMessageReactions1(v MicrosoftGraphChatMessageReactions1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphChatMessageReactions1 performs a merge with any union data inside the MicrosoftGraphChatMessage_Reactions_Item, using the provided MicrosoftGraphChatMessageReactions1
func (t *MicrosoftGraphChatMessage_Reactions_Item) MergeMicrosoftGraphChatMessageReactions1(v MicrosoftGraphChatMessageReactions1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

func (t MicrosoftGraphChatMessage_Reactions_Item) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *MicrosoftGraphChatMessage_Reactions_Item) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsMicrosoftGraphIdentity returns the union data inside the MicrosoftGraphChatMessageFromIdentitySet_Application as a MicrosoftGraphIdentity
func (t MicrosoftGraphChatMessageFromIdentitySet_Application) AsMicrosoftGraphIdentity() (MicrosoftGraphIdentity, error) {
	var body MicrosoftGraphIdentity
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphIdentity overwrites any union data inside the MicrosoftGraphChatMessageFromIdentitySet_Application as the provided MicrosoftGraphIdentity
func (t *MicrosoftGraphChatMessageFromIdentitySet_Application) FromMicrosoftGraphIdentity(v MicrosoftGraphIdentity) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphIdentity performs a merge with any union data inside the MicrosoftGraphChatMessageFromIdentitySet_Application, using the provided MicrosoftGraphIdentity
func (t *MicrosoftGraphChatMessageFromIdentitySet_Application) MergeMicrosoftGraphIdentity(v MicrosoftGraphIdentity) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsMicrosoftGraphChatMessageFromIdentitySetApplication1 returns the union data inside the MicrosoftGraphChatMessageFromIdentitySet_Application as a MicrosoftGraphChatMessageFromIdentitySetApplication1
func (t MicrosoftGraphChatMessageFromIdentitySet_Application) AsMicrosoftGraphChatMessageFromIdentitySetApplication1() (MicrosoftGraphChatMessageFromIdentitySetApplication1, error) {
	var body MicrosoftGraphChatMessageFromIdentitySetApplication1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphChatMessageFromIdentitySetApplication1 overwrites any union data inside the MicrosoftGraphChatMessageFromIdentitySet_Application as the provided MicrosoftGraphChatMessageFromIdentitySetApplication1
func (t *MicrosoftGraphChatMessageFromIdentitySet_Application) FromMicrosoftGraphChatMessageFromIdentitySetApplication1(v MicrosoftGraphChatMessageFromIdentitySetApplication1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphChatMessageFromIdentitySetApplication1 performs a merge with any union data inside the MicrosoftGraphChatMessageFromIdentitySet_Application, using the provided MicrosoftGraphChatMessageFromIdentitySetApplication1
func (t *MicrosoftGraphChatMessageFromIdentitySet_Application) MergeMicrosoftGraphChatMessageFromIdentitySetApplication1(v MicrosoftGraphChatMessageFromIdentitySetApplication1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

func (t MicrosoftGraphChatMessageFromIdentitySet_Application) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *MicrosoftGraphChatMessageFromIdentitySet_Application) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsMicrosoftGraphIdentity returns the union data inside the MicrosoftGraphChatMessageFromIdentitySet_Device as a MicrosoftGraphIdentity
func (t MicrosoftGraphChatMessageFromIdentitySet_Device) AsMicrosoftGraphIdentity() (MicrosoftGraphIdentity, error) {
	var body MicrosoftGraphIdentity
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphIdentity overwrites any union data inside the MicrosoftGraphChatMessageFromIdentitySet_Device as the provided MicrosoftGraphIdentity
func (t *MicrosoftGraphChatMessageFromIdentitySet_Device) FromMicrosoftGraphIdentity(v MicrosoftGraphIdentity) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphIdentity performs a merge with any union data inside the MicrosoftGraphChatMessageFromIdentitySet_Device, using the provided MicrosoftGraphIdentity
func (t *MicrosoftGraphChatMessageFromIdentitySet_Device) MergeMicrosoftGraphIdentity(v MicrosoftGraphIdentity) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsMicrosoftGraphChatMessageFromIdentitySetDevice1 returns the union data inside the MicrosoftGraphChatMessageFromIdentitySet_Device as a MicrosoftGraphChatMessageFromIdentitySetDevice1
func (t MicrosoftGraphChatMessageFromIdentitySet_Device) AsMicrosoftGraphChatMessageFromIdentitySetDevice1() (MicrosoftGraphChatMessageFromIdentitySetDevice1, error) {
	var body MicrosoftGraphChatMessageFromIdentitySetDevice1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphChatMessageFromIdentitySetDevice1 overwrites any union data inside the MicrosoftGraphChatMessageFromIdentitySet_Device as the provided MicrosoftGraphChatMessageFromIdentitySetDevice1
func (t *MicrosoftGraphChatMessageFromIdentitySet_Device) FromMicrosoftGraphChatMessageFromIdentitySetDevice1(v MicrosoftGraphChatMessageFromIdentitySetDevice1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphChatMessageFromIdentitySetDevice1 performs a merge with any union data inside the MicrosoftGraphChatMessageFromIdentitySet_Device, using the provided MicrosoftGraphChatMessageFromIdentitySetDevice1
func (t *MicrosoftGraphChatMessageFromIdentitySet_Device) MergeMicrosoftGraphChatMessageFromIdentitySetDevice1(v MicrosoftGraphChatMessageFromIdentitySetDevice1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

func (t MicrosoftGraphChatMessageFromIdentitySet_Device) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *MicrosoftGraphChatMessageFromIdentitySet_Device) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsMicrosoftGraphIdentity returns the union data inside the MicrosoftGraphChatMessageFromIdentitySet_User as a MicrosoftGraphIdentity
func (t MicrosoftGraphChatMessageFromIdentitySet_User) AsMicrosoftGraphIdentity() (MicrosoftGraphIdentity, error) {
	var body MicrosoftGraphIdentity
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphIdentity overwrites any union data inside the MicrosoftGraphChatMessageFromIdentitySet_User as the provided MicrosoftGraphIdentity
func (t *MicrosoftGraphChatMessageFromIdentitySet_User) FromMicrosoftGraphIdentity(v MicrosoftGraphIdentity) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphIdentity performs a merge with any union data inside the MicrosoftGraphChatMessageFromIdentitySet_User, using the provided MicrosoftGraphIdentity
func (t *MicrosoftGraphChatMessageFromIdentitySet_User) MergeMicrosoftGraphIdentity(v MicrosoftGraphIdentity) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsMicrosoftGraphChatMessageFromIdentitySetUser1 returns the union data inside the MicrosoftGraphChatMessageFromIdentitySet_User as a MicrosoftGraphChatMessageFromIdentitySetUser1
func (t MicrosoftGraphChatMessageFromIdentitySet_User) AsMicrosoftGraphChatMessageFromIdentitySetUser1() (MicrosoftGraphChatMessageFromIdentitySetUser1, error) {
	var body MicrosoftGraphChatMessageFromIdentitySetUser1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphChatMessageFromIdentitySetUser1 overwrites any union data inside the MicrosoftGraphChatMessageFromIdentitySet_User as the provided MicrosoftGraphChatMessageFromIdentitySetUser1
func (t *MicrosoftGraphChatMessageFromIdentitySet_User) FromMicrosoftGraphChatMessageFromIdentitySetUser1(v MicrosoftGraphChatMessageFromIdentitySetUser1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphChatMessageFromIdentitySetUser1 performs a merge with any union data inside the MicrosoftGraphChatMessageFromIdentitySet_User, using the provided MicrosoftGraphChatMessageFromIdentitySetUser1
func (t *MicrosoftGraphChatMessageFromIdentitySet_User) MergeMicrosoftGraphChatMessageFromIdentitySetUser1(v MicrosoftGraphChatMessageFromIdentitySetUser1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

func (t MicrosoftGraphChatMessageFromIdentitySet_User) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *MicrosoftGraphChatMessageFromIdentitySet_User) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsMicrosoftGraphChatMessageReaction returns the union data inside the MicrosoftGraphChatMessageHistoryItem_Reaction as a MicrosoftGraphChatMessageReaction
func (t MicrosoftGraphChatMessageHistoryItem_Reaction) AsMicrosoftGraphChatMessageReaction() (MicrosoftGraphChatMessageReaction, error) {
	var body MicrosoftGraphChatMessageReaction
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphChatMessageReaction overwrites any union data inside the MicrosoftGraphChatMessageHistoryItem_Reaction as the provided MicrosoftGraphChatMessageReaction
func (t *MicrosoftGraphChatMessageHistoryItem_Reaction) FromMicrosoftGraphChatMessageReaction(v MicrosoftGraphChatMessageReaction) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphChatMessageReaction performs a merge with any union data inside the MicrosoftGraphChatMessageHistoryItem_Reaction, using the provided MicrosoftGraphChatMessageReaction
func (t *MicrosoftGraphChatMessageHistoryItem_Reaction) MergeMicrosoftGraphChatMessageReaction(v MicrosoftGraphChatMessageReaction) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsMicrosoftGraphChatMessageHistoryItemReaction1 returns the union data inside the MicrosoftGraphChatMessageHistoryItem_Reaction as a MicrosoftGraphChatMessageHistoryItemReaction1
func (t MicrosoftGraphChatMessageHistoryItem_Reaction) AsMicrosoftGraphChatMessageHistoryItemReaction1() (MicrosoftGraphChatMessageHistoryItemReaction1, error) {
	var body MicrosoftGraphChatMessageHistoryItemReaction1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphChatMessageHistoryItemReaction1 overwrites any union data inside the MicrosoftGraphChatMessageHistoryItem_Reaction as the provided MicrosoftGraphChatMessageHistoryItemReaction1
func (t *MicrosoftGraphChatMessageHistoryItem_Reaction) FromMicrosoftGraphChatMessageHistoryItemReaction1(v MicrosoftGraphChatMessageHistoryItemReaction1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphChatMessageHistoryItemReaction1 performs a merge with any union data inside the MicrosoftGraphChatMessageHistoryItem_Reaction, using the provided MicrosoftGraphChatMessageHistoryItemReaction1
func (t *MicrosoftGraphChatMessageHistoryItem_Reaction) MergeMicrosoftGraphChatMessageHistoryItemReaction1(v MicrosoftGraphChatMessageHistoryItemReaction1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

func (t MicrosoftGraphChatMessageHistoryItem_Reaction) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *MicrosoftGraphChatMessageHistoryItem_Reaction) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsMicrosoftGraphItemBody returns the union data inside the MicrosoftGraphChatMessageInfo_Body as a MicrosoftGraphItemBody
func (t MicrosoftGraphChatMessageInfo_Body) AsMicrosoftGraphItemBody() (MicrosoftGraphItemBody, error) {
	var body MicrosoftGraphItemBody
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphItemBody overwrites any union data inside the MicrosoftGraphChatMessageInfo_Body as the provided MicrosoftGraphItemBody
func (t *MicrosoftGraphChatMessageInfo_Body) FromMicrosoftGraphItemBody(v MicrosoftGraphItemBody) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphItemBody performs a merge with any union data inside the MicrosoftGraphChatMessageInfo_Body, using the provided MicrosoftGraphItemBody
func (t *MicrosoftGraphChatMessageInfo_Body) MergeMicrosoftGraphItemBody(v MicrosoftGraphItemBody) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsMicrosoftGraphChatMessageInfoBody1 returns the union data inside the MicrosoftGraphChatMessageInfo_Body as a MicrosoftGraphChatMessageInfoBody1
func (t MicrosoftGraphChatMessageInfo_Body) AsMicrosoftGraphChatMessageInfoBody1() (MicrosoftGraphChatMessageInfoBody1, error) {
	var body MicrosoftGraphChatMessageInfoBody1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphChatMessageInfoBody1 overwrites any union data inside the MicrosoftGraphChatMessageInfo_Body as the provided MicrosoftGraphChatMessageInfoBody1
func (t *MicrosoftGraphChatMessageInfo_Body) FromMicrosoftGraphChatMessageInfoBody1(v MicrosoftGraphChatMessageInfoBody1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphChatMessageInfoBody1 performs a merge with any union data inside the MicrosoftGraphChatMessageInfo_Body, using the provided MicrosoftGraphChatMessageInfoBody1
func (t *MicrosoftGraphChatMessageInfo_Body) MergeMicrosoftGraphChatMessageInfoBody1(v MicrosoftGraphChatMessageInfoBody1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

func (t MicrosoftGraphChatMessageInfo_Body) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *MicrosoftGraphChatMessageInfo_Body) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsMicrosoftGraphEventMessageDetail returns the union data inside the MicrosoftGraphChatMessageInfo_EventDetail as a MicrosoftGraphEventMessageDetail
func (t MicrosoftGraphChatMessageInfo_EventDetail) AsMicrosoftGraphEventMessageDetail() (MicrosoftGraphEventMessageDetail, error) {
	var body MicrosoftGraphEventMessageDetail
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphEventMessageDetail overwrites any union data inside the MicrosoftGraphChatMessageInfo_EventDetail as the provided MicrosoftGraphEventMessageDetail
func (t *MicrosoftGraphChatMessageInfo_EventDetail) FromMicrosoftGraphEventMessageDetail(v MicrosoftGraphEventMessageDetail) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphEventMessageDetail performs a merge with any union data inside the MicrosoftGraphChatMessageInfo_EventDetail, using the provided MicrosoftGraphEventMessageDetail
func (t *MicrosoftGraphChatMessageInfo_EventDetail) MergeMicrosoftGraphEventMessageDetail(v MicrosoftGraphEventMessageDetail) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsMicrosoftGraphChatMessageInfoEventDetail1 returns the union data inside the MicrosoftGraphChatMessageInfo_EventDetail as a MicrosoftGraphChatMessageInfoEventDetail1
func (t MicrosoftGraphChatMessageInfo_EventDetail) AsMicrosoftGraphChatMessageInfoEventDetail1() (MicrosoftGraphChatMessageInfoEventDetail1, error) {
	var body MicrosoftGraphChatMessageInfoEventDetail1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphChatMessageInfoEventDetail1 overwrites any union data inside the MicrosoftGraphChatMessageInfo_EventDetail as the provided MicrosoftGraphChatMessageInfoEventDetail1
func (t *MicrosoftGraphChatMessageInfo_EventDetail) FromMicrosoftGraphChatMessageInfoEventDetail1(v MicrosoftGraphChatMessageInfoEventDetail1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphChatMessageInfoEventDetail1 performs a merge with any union data inside the MicrosoftGraphChatMessageInfo_EventDetail, using the provided MicrosoftGraphChatMessageInfoEventDetail1
func (t *MicrosoftGraphChatMessageInfo_EventDetail) MergeMicrosoftGraphChatMessageInfoEventDetail1(v MicrosoftGraphChatMessageInfoEventDetail1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

func (t MicrosoftGraphChatMessageInfo_EventDetail) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *MicrosoftGraphChatMessageInfo_EventDetail) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsMicrosoftGraphChatMessageFromIdentitySet returns the union data inside the MicrosoftGraphChatMessageInfo_From as a MicrosoftGraphChatMessageFromIdentitySet
func (t MicrosoftGraphChatMessageInfo_From) AsMicrosoftGraphChatMessageFromIdentitySet() (MicrosoftGraphChatMessageFromIdentitySet, error) {
	var body MicrosoftGraphChatMessageFromIdentitySet
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphChatMessageFromIdentitySet overwrites any union data inside the MicrosoftGraphChatMessageInfo_From as the provided MicrosoftGraphChatMessageFromIdentitySet
func (t *MicrosoftGraphChatMessageInfo_From) FromMicrosoftGraphChatMessageFromIdentitySet(v MicrosoftGraphChatMessageFromIdentitySet) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphChatMessageFromIdentitySet performs a merge with any union data inside the MicrosoftGraphChatMessageInfo_From, using the provided MicrosoftGraphChatMessageFromIdentitySet
func (t *MicrosoftGraphChatMessageInfo_From) MergeMicrosoftGraphChatMessageFromIdentitySet(v MicrosoftGraphChatMessageFromIdentitySet) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsMicrosoftGraphChatMessageInfoFrom1 returns the union data inside the MicrosoftGraphChatMessageInfo_From as a MicrosoftGraphChatMessageInfoFrom1
func (t MicrosoftGraphChatMessageInfo_From) AsMicrosoftGraphChatMessageInfoFrom1() (MicrosoftGraphChatMessageInfoFrom1, error) {
	var body MicrosoftGraphChatMessageInfoFrom1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphChatMessageInfoFrom1 overwrites any union data inside the MicrosoftGraphChatMessageInfo_From as the provided MicrosoftGraphChatMessageInfoFrom1
func (t *MicrosoftGraphChatMessageInfo_From) FromMicrosoftGraphChatMessageInfoFrom1(v MicrosoftGraphChatMessageInfoFrom1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphChatMessageInfoFrom1 performs a merge with any union data inside the MicrosoftGraphChatMessageInfo_From, using the provided MicrosoftGraphChatMessageInfoFrom1
func (t *MicrosoftGraphChatMessageInfo_From) MergeMicrosoftGraphChatMessageInfoFrom1(v MicrosoftGraphChatMessageInfoFrom1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

func (t MicrosoftGraphChatMessageInfo_From) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *MicrosoftGraphChatMessageInfo_From) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsMicrosoftGraphChatMessageMentionedIdentitySet returns the union data inside the MicrosoftGraphChatMessageMention_Mentioned as a MicrosoftGraphChatMessageMentionedIdentitySet
func (t MicrosoftGraphChatMessageMention_Mentioned) AsMicrosoftGraphChatMessageMentionedIdentitySet() (MicrosoftGraphChatMessageMentionedIdentitySet, error) {
	var body MicrosoftGraphChatMessageMentionedIdentitySet
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphChatMessageMentionedIdentitySet overwrites any union data inside the MicrosoftGraphChatMessageMention_Mentioned as the provided MicrosoftGraphChatMessageMentionedIdentitySet
func (t *MicrosoftGraphChatMessageMention_Mentioned) FromMicrosoftGraphChatMessageMentionedIdentitySet(v MicrosoftGraphChatMessageMentionedIdentitySet) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphChatMessageMentionedIdentitySet performs a merge with any union data inside the MicrosoftGraphChatMessageMention_Mentioned, using the provided MicrosoftGraphChatMessageMentionedIdentitySet
func (t *MicrosoftGraphChatMessageMention_Mentioned) MergeMicrosoftGraphChatMessageMentionedIdentitySet(v MicrosoftGraphChatMessageMentionedIdentitySet) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsMicrosoftGraphChatMessageMentionMentioned1 returns the union data inside the MicrosoftGraphChatMessageMention_Mentioned as a MicrosoftGraphChatMessageMentionMentioned1
func (t MicrosoftGraphChatMessageMention_Mentioned) AsMicrosoftGraphChatMessageMentionMentioned1() (MicrosoftGraphChatMessageMentionMentioned1, error) {
	var body MicrosoftGraphChatMessageMentionMentioned1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphChatMessageMentionMentioned1 overwrites any union data inside the MicrosoftGraphChatMessageMention_Mentioned as the provided MicrosoftGraphChatMessageMentionMentioned1
func (t *MicrosoftGraphChatMessageMention_Mentioned) FromMicrosoftGraphChatMessageMentionMentioned1(v MicrosoftGraphChatMessageMentionMentioned1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphChatMessageMentionMentioned1 performs a merge with any union data inside the MicrosoftGraphChatMessageMention_Mentioned, using the provided MicrosoftGraphChatMessageMentionMentioned1
func (t *MicrosoftGraphChatMessageMention_Mentioned) MergeMicrosoftGraphChatMessageMentionMentioned1(v MicrosoftGraphChatMessageMentionMentioned1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

func (t MicrosoftGraphChatMessageMention_Mentioned) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *MicrosoftGraphChatMessageMention_Mentioned) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsMicrosoftGraphIdentity returns the union data inside the MicrosoftGraphChatMessageMentionedIdentitySet_Application as a MicrosoftGraphIdentity
func (t MicrosoftGraphChatMessageMentionedIdentitySet_Application) AsMicrosoftGraphIdentity() (MicrosoftGraphIdentity, error) {
	var body MicrosoftGraphIdentity
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphIdentity overwrites any union data inside the MicrosoftGraphChatMessageMentionedIdentitySet_Application as the provided MicrosoftGraphIdentity
func (t *MicrosoftGraphChatMessageMentionedIdentitySet_Application) FromMicrosoftGraphIdentity(v MicrosoftGraphIdentity) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphIdentity performs a merge with any union data inside the MicrosoftGraphChatMessageMentionedIdentitySet_Application, using the provided MicrosoftGraphIdentity
func (t *MicrosoftGraphChatMessageMentionedIdentitySet_Application) MergeMicrosoftGraphIdentity(v MicrosoftGraphIdentity) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsMicrosoftGraphChatMessageMentionedIdentitySetApplication1 returns the union data inside the MicrosoftGraphChatMessageMentionedIdentitySet_Application as a MicrosoftGraphChatMessageMentionedIdentitySetApplication1
func (t MicrosoftGraphChatMessageMentionedIdentitySet_Application) AsMicrosoftGraphChatMessageMentionedIdentitySetApplication1() (MicrosoftGraphChatMessageMentionedIdentitySetApplication1, error) {
	var body MicrosoftGraphChatMessageMentionedIdentitySetApplication1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphChatMessageMentionedIdentitySetApplication1 overwrites any union data inside the MicrosoftGraphChatMessageMentionedIdentitySet_Application as the provided MicrosoftGraphChatMessageMentionedIdentitySetApplication1
func (t *MicrosoftGraphChatMessageMentionedIdentitySet_Application) FromMicrosoftGraphChatMessageMentionedIdentitySetApplication1(v MicrosoftGraphChatMessageMentionedIdentitySetApplication1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphChatMessageMentionedIdentitySetApplication1 performs a merge with any union data inside the MicrosoftGraphChatMessageMentionedIdentitySet_Application, using the provided MicrosoftGraphChatMessageMentionedIdentitySetApplication1
func (t *MicrosoftGraphChatMessageMentionedIdentitySet_Application) MergeMicrosoftGraphChatMessageMentionedIdentitySetApplication1(v MicrosoftGraphChatMessageMentionedIdentitySetApplication1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

func (t MicrosoftGraphChatMessageMentionedIdentitySet_Application) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *MicrosoftGraphChatMessageMentionedIdentitySet_Application) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsMicrosoftGraphTeamworkConversationIdentity returns the union data inside the MicrosoftGraphChatMessageMentionedIdentitySet_Conversation as a MicrosoftGraphTeamworkConversationIdentity
func (t MicrosoftGraphChatMessageMentionedIdentitySet_Conversation) AsMicrosoftGraphTeamworkConversationIdentity() (MicrosoftGraphTeamworkConversationIdentity, error) {
	var body MicrosoftGraphTeamworkConversationIdentity
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphTeamworkConversationIdentity overwrites any union data inside the MicrosoftGraphChatMessageMentionedIdentitySet_Conversation as the provided MicrosoftGraphTeamworkConversationIdentity
func (t *MicrosoftGraphChatMessageMentionedIdentitySet_Conversation) FromMicrosoftGraphTeamworkConversationIdentity(v MicrosoftGraphTeamworkConversationIdentity) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphTeamworkConversationIdentity performs a merge with any union data inside the MicrosoftGraphChatMessageMentionedIdentitySet_Conversation, using the provided MicrosoftGraphTeamworkConversationIdentity
func (t *MicrosoftGraphChatMessageMentionedIdentitySet_Conversation) MergeMicrosoftGraphTeamworkConversationIdentity(v MicrosoftGraphTeamworkConversationIdentity) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsMicrosoftGraphChatMessageMentionedIdentitySetConversation1 returns the union data inside the MicrosoftGraphChatMessageMentionedIdentitySet_Conversation as a MicrosoftGraphChatMessageMentionedIdentitySetConversation1
func (t MicrosoftGraphChatMessageMentionedIdentitySet_Conversation) AsMicrosoftGraphChatMessageMentionedIdentitySetConversation1() (MicrosoftGraphChatMessageMentionedIdentitySetConversation1, error) {
	var body MicrosoftGraphChatMessageMentionedIdentitySetConversation1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphChatMessageMentionedIdentitySetConversation1 overwrites any union data inside the MicrosoftGraphChatMessageMentionedIdentitySet_Conversation as the provided MicrosoftGraphChatMessageMentionedIdentitySetConversation1
func (t *MicrosoftGraphChatMessageMentionedIdentitySet_Conversation) FromMicrosoftGraphChatMessageMentionedIdentitySetConversation1(v MicrosoftGraphChatMessageMentionedIdentitySetConversation1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphChatMessageMentionedIdentitySetConversation1 performs a merge with any union data inside the MicrosoftGraphChatMessageMentionedIdentitySet_Conversation, using the provided MicrosoftGraphChatMessageMentionedIdentitySetConversation1
func (t *MicrosoftGraphChatMessageMentionedIdentitySet_Conversation) MergeMicrosoftGraphChatMessageMentionedIdentitySetConversation1(v MicrosoftGraphChatMessageMentionedIdentitySetConversation1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

func (t MicrosoftGraphChatMessageMentionedIdentitySet_Conversation) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *MicrosoftGraphChatMessageMentionedIdentitySet_Conversation) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsMicrosoftGraphIdentity returns the union data inside the MicrosoftGraphChatMessageMentionedIdentitySet_Device as a MicrosoftGraphIdentity
func (t MicrosoftGraphChatMessageMentionedIdentitySet_Device) AsMicrosoftGraphIdentity() (MicrosoftGraphIdentity, error) {
	var body MicrosoftGraphIdentity
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphIdentity overwrites any union data inside the MicrosoftGraphChatMessageMentionedIdentitySet_Device as the provided MicrosoftGraphIdentity
func (t *MicrosoftGraphChatMessageMentionedIdentitySet_Device) FromMicrosoftGraphIdentity(v MicrosoftGraphIdentity) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphIdentity performs a merge with any union data inside the MicrosoftGraphChatMessageMentionedIdentitySet_Device, using the provided MicrosoftGraphIdentity
func (t *MicrosoftGraphChatMessageMentionedIdentitySet_Device) MergeMicrosoftGraphIdentity(v MicrosoftGraphIdentity) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsMicrosoftGraphChatMessageMentionedIdentitySetDevice1 returns the union data inside the MicrosoftGraphChatMessageMentionedIdentitySet_Device as a MicrosoftGraphChatMessageMentionedIdentitySetDevice1
func (t MicrosoftGraphChatMessageMentionedIdentitySet_Device) AsMicrosoftGraphChatMessageMentionedIdentitySetDevice1() (MicrosoftGraphChatMessageMentionedIdentitySetDevice1, error) {
	var body MicrosoftGraphChatMessageMentionedIdentitySetDevice1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphChatMessageMentionedIdentitySetDevice1 overwrites any union data inside the MicrosoftGraphChatMessageMentionedIdentitySet_Device as the provided MicrosoftGraphChatMessageMentionedIdentitySetDevice1
func (t *MicrosoftGraphChatMessageMentionedIdentitySet_Device) FromMicrosoftGraphChatMessageMentionedIdentitySetDevice1(v MicrosoftGraphChatMessageMentionedIdentitySetDevice1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphChatMessageMentionedIdentitySetDevice1 performs a merge with any union data inside the MicrosoftGraphChatMessageMentionedIdentitySet_Device, using the provided MicrosoftGraphChatMessageMentionedIdentitySetDevice1
func (t *MicrosoftGraphChatMessageMentionedIdentitySet_Device) MergeMicrosoftGraphChatMessageMentionedIdentitySetDevice1(v MicrosoftGraphChatMessageMentionedIdentitySetDevice1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

func (t MicrosoftGraphChatMessageMentionedIdentitySet_Device) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *MicrosoftGraphChatMessageMentionedIdentitySet_Device) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsMicrosoftGraphIdentity returns the union data inside the MicrosoftGraphChatMessageMentionedIdentitySet_User as a MicrosoftGraphIdentity
func (t MicrosoftGraphChatMessageMentionedIdentitySet_User) AsMicrosoftGraphIdentity() (MicrosoftGraphIdentity, error) {
	var body MicrosoftGraphIdentity
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphIdentity overwrites any union data inside the MicrosoftGraphChatMessageMentionedIdentitySet_User as the provided MicrosoftGraphIdentity
func (t *MicrosoftGraphChatMessageMentionedIdentitySet_User) FromMicrosoftGraphIdentity(v MicrosoftGraphIdentity) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphIdentity performs a merge with any union data inside the MicrosoftGraphChatMessageMentionedIdentitySet_User, using the provided MicrosoftGraphIdentity
func (t *MicrosoftGraphChatMessageMentionedIdentitySet_User) MergeMicrosoftGraphIdentity(v MicrosoftGraphIdentity) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsMicrosoftGraphChatMessageMentionedIdentitySetUser1 returns the union data inside the MicrosoftGraphChatMessageMentionedIdentitySet_User as a MicrosoftGraphChatMessageMentionedIdentitySetUser1
func (t MicrosoftGraphChatMessageMentionedIdentitySet_User) AsMicrosoftGraphChatMessageMentionedIdentitySetUser1() (MicrosoftGraphChatMessageMentionedIdentitySetUser1, error) {
	var body MicrosoftGraphChatMessageMentionedIdentitySetUser1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphChatMessageMentionedIdentitySetUser1 overwrites any union data inside the MicrosoftGraphChatMessageMentionedIdentitySet_User as the provided MicrosoftGraphChatMessageMentionedIdentitySetUser1
func (t *MicrosoftGraphChatMessageMentionedIdentitySet_User) FromMicrosoftGraphChatMessageMentionedIdentitySetUser1(v MicrosoftGraphChatMessageMentionedIdentitySetUser1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphChatMessageMentionedIdentitySetUser1 performs a merge with any union data inside the MicrosoftGraphChatMessageMentionedIdentitySet_User, using the provided MicrosoftGraphChatMessageMentionedIdentitySetUser1
func (t *MicrosoftGraphChatMessageMentionedIdentitySet_User) MergeMicrosoftGraphChatMessageMentionedIdentitySetUser1(v MicrosoftGraphChatMessageMentionedIdentitySetUser1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

func (t MicrosoftGraphChatMessageMentionedIdentitySet_User) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *MicrosoftGraphChatMessageMentionedIdentitySet_User) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsMicrosoftGraphChatMessagePolicyViolationDlpActionTypes returns the union data inside the MicrosoftGraphChatMessagePolicyViolation_DlpAction as a MicrosoftGraphChatMessagePolicyViolationDlpActionTypes
func (t MicrosoftGraphChatMessagePolicyViolation_DlpAction) AsMicrosoftGraphChatMessagePolicyViolationDlpActionTypes() (MicrosoftGraphChatMessagePolicyViolationDlpActionTypes, error) {
	var body MicrosoftGraphChatMessagePolicyViolationDlpActionTypes
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphChatMessagePolicyViolationDlpActionTypes overwrites any union data inside the MicrosoftGraphChatMessagePolicyViolation_DlpAction as the provided MicrosoftGraphChatMessagePolicyViolationDlpActionTypes
func (t *MicrosoftGraphChatMessagePolicyViolation_DlpAction) FromMicrosoftGraphChatMessagePolicyViolationDlpActionTypes(v MicrosoftGraphChatMessagePolicyViolationDlpActionTypes) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphChatMessagePolicyViolationDlpActionTypes performs a merge with any union data inside the MicrosoftGraphChatMessagePolicyViolation_DlpAction, using the provided MicrosoftGraphChatMessagePolicyViolationDlpActionTypes
func (t *MicrosoftGraphChatMessagePolicyViolation_DlpAction) MergeMicrosoftGraphChatMessagePolicyViolationDlpActionTypes(v MicrosoftGraphChatMessagePolicyViolationDlpActionTypes) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsMicrosoftGraphChatMessagePolicyViolationDlpAction1 returns the union data inside the MicrosoftGraphChatMessagePolicyViolation_DlpAction as a MicrosoftGraphChatMessagePolicyViolationDlpAction1
func (t MicrosoftGraphChatMessagePolicyViolation_DlpAction) AsMicrosoftGraphChatMessagePolicyViolationDlpAction1() (MicrosoftGraphChatMessagePolicyViolationDlpAction1, error) {
	var body MicrosoftGraphChatMessagePolicyViolationDlpAction1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphChatMessagePolicyViolationDlpAction1 overwrites any union data inside the MicrosoftGraphChatMessagePolicyViolation_DlpAction as the provided MicrosoftGraphChatMessagePolicyViolationDlpAction1
func (t *MicrosoftGraphChatMessagePolicyViolation_DlpAction) FromMicrosoftGraphChatMessagePolicyViolationDlpAction1(v MicrosoftGraphChatMessagePolicyViolationDlpAction1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphChatMessagePolicyViolationDlpAction1 performs a merge with any union data inside the MicrosoftGraphChatMessagePolicyViolation_DlpAction, using the provided MicrosoftGraphChatMessagePolicyViolationDlpAction1
func (t *MicrosoftGraphChatMessagePolicyViolation_DlpAction) MergeMicrosoftGraphChatMessagePolicyViolationDlpAction1(v MicrosoftGraphChatMessagePolicyViolationDlpAction1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

func (t MicrosoftGraphChatMessagePolicyViolation_DlpAction) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *MicrosoftGraphChatMessagePolicyViolation_DlpAction) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsMicrosoftGraphChatMessagePolicyViolationPolicyTip returns the union data inside the MicrosoftGraphChatMessagePolicyViolation_PolicyTip as a MicrosoftGraphChatMessagePolicyViolationPolicyTip
func (t MicrosoftGraphChatMessagePolicyViolation_PolicyTip) AsMicrosoftGraphChatMessagePolicyViolationPolicyTip() (MicrosoftGraphChatMessagePolicyViolationPolicyTip, error) {
	var body MicrosoftGraphChatMessagePolicyViolationPolicyTip
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphChatMessagePolicyViolationPolicyTip overwrites any union data inside the MicrosoftGraphChatMessagePolicyViolation_PolicyTip as the provided MicrosoftGraphChatMessagePolicyViolationPolicyTip
func (t *MicrosoftGraphChatMessagePolicyViolation_PolicyTip) FromMicrosoftGraphChatMessagePolicyViolationPolicyTip(v MicrosoftGraphChatMessagePolicyViolationPolicyTip) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphChatMessagePolicyViolationPolicyTip performs a merge with any union data inside the MicrosoftGraphChatMessagePolicyViolation_PolicyTip, using the provided MicrosoftGraphChatMessagePolicyViolationPolicyTip
func (t *MicrosoftGraphChatMessagePolicyViolation_PolicyTip) MergeMicrosoftGraphChatMessagePolicyViolationPolicyTip(v MicrosoftGraphChatMessagePolicyViolationPolicyTip) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsMicrosoftGraphChatMessagePolicyViolationPolicyTip1 returns the union data inside the MicrosoftGraphChatMessagePolicyViolation_PolicyTip as a MicrosoftGraphChatMessagePolicyViolationPolicyTip1
func (t MicrosoftGraphChatMessagePolicyViolation_PolicyTip) AsMicrosoftGraphChatMessagePolicyViolationPolicyTip1() (MicrosoftGraphChatMessagePolicyViolationPolicyTip1, error) {
	var body MicrosoftGraphChatMessagePolicyViolationPolicyTip1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphChatMessagePolicyViolationPolicyTip1 overwrites any union data inside the MicrosoftGraphChatMessagePolicyViolation_PolicyTip as the provided MicrosoftGraphChatMessagePolicyViolationPolicyTip1
func (t *MicrosoftGraphChatMessagePolicyViolation_PolicyTip) FromMicrosoftGraphChatMessagePolicyViolationPolicyTip1(v MicrosoftGraphChatMessagePolicyViolationPolicyTip1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphChatMessagePolicyViolationPolicyTip1 performs a merge with any union data inside the MicrosoftGraphChatMessagePolicyViolation_PolicyTip, using the provided MicrosoftGraphChatMessagePolicyViolationPolicyTip1
func (t *MicrosoftGraphChatMessagePolicyViolation_PolicyTip) MergeMicrosoftGraphChatMessagePolicyViolationPolicyTip1(v MicrosoftGraphChatMessagePolicyViolationPolicyTip1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

func (t MicrosoftGraphChatMessagePolicyViolation_PolicyTip) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *MicrosoftGraphChatMessagePolicyViolation_PolicyTip) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsMicrosoftGraphChatMessagePolicyViolationUserActionTypes returns the union data inside the MicrosoftGraphChatMessagePolicyViolation_UserAction as a MicrosoftGraphChatMessagePolicyViolationUserActionTypes
func (t MicrosoftGraphChatMessagePolicyViolation_UserAction) AsMicrosoftGraphChatMessagePolicyViolationUserActionTypes() (MicrosoftGraphChatMessagePolicyViolationUserActionTypes, error) {
	var body MicrosoftGraphChatMessagePolicyViolationUserActionTypes
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphChatMessagePolicyViolationUserActionTypes overwrites any union data inside the MicrosoftGraphChatMessagePolicyViolation_UserAction as the provided MicrosoftGraphChatMessagePolicyViolationUserActionTypes
func (t *MicrosoftGraphChatMessagePolicyViolation_UserAction) FromMicrosoftGraphChatMessagePolicyViolationUserActionTypes(v MicrosoftGraphChatMessagePolicyViolationUserActionTypes) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphChatMessagePolicyViolationUserActionTypes performs a merge with any union data inside the MicrosoftGraphChatMessagePolicyViolation_UserAction, using the provided MicrosoftGraphChatMessagePolicyViolationUserActionTypes
func (t *MicrosoftGraphChatMessagePolicyViolation_UserAction) MergeMicrosoftGraphChatMessagePolicyViolationUserActionTypes(v MicrosoftGraphChatMessagePolicyViolationUserActionTypes) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsMicrosoftGraphChatMessagePolicyViolationUserAction1 returns the union data inside the MicrosoftGraphChatMessagePolicyViolation_UserAction as a MicrosoftGraphChatMessagePolicyViolationUserAction1
func (t MicrosoftGraphChatMessagePolicyViolation_UserAction) AsMicrosoftGraphChatMessagePolicyViolationUserAction1() (MicrosoftGraphChatMessagePolicyViolationUserAction1, error) {
	var body MicrosoftGraphChatMessagePolicyViolationUserAction1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphChatMessagePolicyViolationUserAction1 overwrites any union data inside the MicrosoftGraphChatMessagePolicyViolation_UserAction as the provided MicrosoftGraphChatMessagePolicyViolationUserAction1
func (t *MicrosoftGraphChatMessagePolicyViolation_UserAction) FromMicrosoftGraphChatMessagePolicyViolationUserAction1(v MicrosoftGraphChatMessagePolicyViolationUserAction1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphChatMessagePolicyViolationUserAction1 performs a merge with any union data inside the MicrosoftGraphChatMessagePolicyViolation_UserAction, using the provided MicrosoftGraphChatMessagePolicyViolationUserAction1
func (t *MicrosoftGraphChatMessagePolicyViolation_UserAction) MergeMicrosoftGraphChatMessagePolicyViolationUserAction1(v MicrosoftGraphChatMessagePolicyViolationUserAction1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

func (t MicrosoftGraphChatMessagePolicyViolation_UserAction) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *MicrosoftGraphChatMessagePolicyViolation_UserAction) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsMicrosoftGraphChatMessagePolicyViolationVerdictDetailsTypes returns the union data inside the MicrosoftGraphChatMessagePolicyViolation_VerdictDetails as a MicrosoftGraphChatMessagePolicyViolationVerdictDetailsTypes
func (t MicrosoftGraphChatMessagePolicyViolation_VerdictDetails) AsMicrosoftGraphChatMessagePolicyViolationVerdictDetailsTypes() (MicrosoftGraphChatMessagePolicyViolationVerdictDetailsTypes, error) {
	var body MicrosoftGraphChatMessagePolicyViolationVerdictDetailsTypes
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphChatMessagePolicyViolationVerdictDetailsTypes overwrites any union data inside the MicrosoftGraphChatMessagePolicyViolation_VerdictDetails as the provided MicrosoftGraphChatMessagePolicyViolationVerdictDetailsTypes
func (t *MicrosoftGraphChatMessagePolicyViolation_VerdictDetails) FromMicrosoftGraphChatMessagePolicyViolationVerdictDetailsTypes(v MicrosoftGraphChatMessagePolicyViolationVerdictDetailsTypes) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphChatMessagePolicyViolationVerdictDetailsTypes performs a merge with any union data inside the MicrosoftGraphChatMessagePolicyViolation_VerdictDetails, using the provided MicrosoftGraphChatMessagePolicyViolationVerdictDetailsTypes
func (t *MicrosoftGraphChatMessagePolicyViolation_VerdictDetails) MergeMicrosoftGraphChatMessagePolicyViolationVerdictDetailsTypes(v MicrosoftGraphChatMessagePolicyViolationVerdictDetailsTypes) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsMicrosoftGraphChatMessagePolicyViolationVerdictDetails1 returns the union data inside the MicrosoftGraphChatMessagePolicyViolation_VerdictDetails as a MicrosoftGraphChatMessagePolicyViolationVerdictDetails1
func (t MicrosoftGraphChatMessagePolicyViolation_VerdictDetails) AsMicrosoftGraphChatMessagePolicyViolationVerdictDetails1() (MicrosoftGraphChatMessagePolicyViolationVerdictDetails1, error) {
	var body MicrosoftGraphChatMessagePolicyViolationVerdictDetails1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphChatMessagePolicyViolationVerdictDetails1 overwrites any union data inside the MicrosoftGraphChatMessagePolicyViolation_VerdictDetails as the provided MicrosoftGraphChatMessagePolicyViolationVerdictDetails1
func (t *MicrosoftGraphChatMessagePolicyViolation_VerdictDetails) FromMicrosoftGraphChatMessagePolicyViolationVerdictDetails1(v MicrosoftGraphChatMessagePolicyViolationVerdictDetails1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphChatMessagePolicyViolationVerdictDetails1 performs a merge with any union data inside the MicrosoftGraphChatMessagePolicyViolation_VerdictDetails, using the provided MicrosoftGraphChatMessagePolicyViolationVerdictDetails1
func (t *MicrosoftGraphChatMessagePolicyViolation_VerdictDetails) MergeMicrosoftGraphChatMessagePolicyViolationVerdictDetails1(v MicrosoftGraphChatMessagePolicyViolationVerdictDetails1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

func (t MicrosoftGraphChatMessagePolicyViolation_VerdictDetails) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *MicrosoftGraphChatMessagePolicyViolation_VerdictDetails) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsMicrosoftGraphIdentity returns the union data inside the MicrosoftGraphChatMessageReactionIdentitySet_Application as a MicrosoftGraphIdentity
func (t MicrosoftGraphChatMessageReactionIdentitySet_Application) AsMicrosoftGraphIdentity() (MicrosoftGraphIdentity, error) {
	var body MicrosoftGraphIdentity
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphIdentity overwrites any union data inside the MicrosoftGraphChatMessageReactionIdentitySet_Application as the provided MicrosoftGraphIdentity
func (t *MicrosoftGraphChatMessageReactionIdentitySet_Application) FromMicrosoftGraphIdentity(v MicrosoftGraphIdentity) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphIdentity performs a merge with any union data inside the MicrosoftGraphChatMessageReactionIdentitySet_Application, using the provided MicrosoftGraphIdentity
func (t *MicrosoftGraphChatMessageReactionIdentitySet_Application) MergeMicrosoftGraphIdentity(v MicrosoftGraphIdentity) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsMicrosoftGraphChatMessageReactionIdentitySetApplication1 returns the union data inside the MicrosoftGraphChatMessageReactionIdentitySet_Application as a MicrosoftGraphChatMessageReactionIdentitySetApplication1
func (t MicrosoftGraphChatMessageReactionIdentitySet_Application) AsMicrosoftGraphChatMessageReactionIdentitySetApplication1() (MicrosoftGraphChatMessageReactionIdentitySetApplication1, error) {
	var body MicrosoftGraphChatMessageReactionIdentitySetApplication1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphChatMessageReactionIdentitySetApplication1 overwrites any union data inside the MicrosoftGraphChatMessageReactionIdentitySet_Application as the provided MicrosoftGraphChatMessageReactionIdentitySetApplication1
func (t *MicrosoftGraphChatMessageReactionIdentitySet_Application) FromMicrosoftGraphChatMessageReactionIdentitySetApplication1(v MicrosoftGraphChatMessageReactionIdentitySetApplication1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphChatMessageReactionIdentitySetApplication1 performs a merge with any union data inside the MicrosoftGraphChatMessageReactionIdentitySet_Application, using the provided MicrosoftGraphChatMessageReactionIdentitySetApplication1
func (t *MicrosoftGraphChatMessageReactionIdentitySet_Application) MergeMicrosoftGraphChatMessageReactionIdentitySetApplication1(v MicrosoftGraphChatMessageReactionIdentitySetApplication1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

func (t MicrosoftGraphChatMessageReactionIdentitySet_Application) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *MicrosoftGraphChatMessageReactionIdentitySet_Application) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsMicrosoftGraphIdentity returns the union data inside the MicrosoftGraphChatMessageReactionIdentitySet_Device as a MicrosoftGraphIdentity
func (t MicrosoftGraphChatMessageReactionIdentitySet_Device) AsMicrosoftGraphIdentity() (MicrosoftGraphIdentity, error) {
	var body MicrosoftGraphIdentity
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphIdentity overwrites any union data inside the MicrosoftGraphChatMessageReactionIdentitySet_Device as the provided MicrosoftGraphIdentity
func (t *MicrosoftGraphChatMessageReactionIdentitySet_Device) FromMicrosoftGraphIdentity(v MicrosoftGraphIdentity) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphIdentity performs a merge with any union data inside the MicrosoftGraphChatMessageReactionIdentitySet_Device, using the provided MicrosoftGraphIdentity
func (t *MicrosoftGraphChatMessageReactionIdentitySet_Device) MergeMicrosoftGraphIdentity(v MicrosoftGraphIdentity) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsMicrosoftGraphChatMessageReactionIdentitySetDevice1 returns the union data inside the MicrosoftGraphChatMessageReactionIdentitySet_Device as a MicrosoftGraphChatMessageReactionIdentitySetDevice1
func (t MicrosoftGraphChatMessageReactionIdentitySet_Device) AsMicrosoftGraphChatMessageReactionIdentitySetDevice1() (MicrosoftGraphChatMessageReactionIdentitySetDevice1, error) {
	var body MicrosoftGraphChatMessageReactionIdentitySetDevice1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphChatMessageReactionIdentitySetDevice1 overwrites any union data inside the MicrosoftGraphChatMessageReactionIdentitySet_Device as the provided MicrosoftGraphChatMessageReactionIdentitySetDevice1
func (t *MicrosoftGraphChatMessageReactionIdentitySet_Device) FromMicrosoftGraphChatMessageReactionIdentitySetDevice1(v MicrosoftGraphChatMessageReactionIdentitySetDevice1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphChatMessageReactionIdentitySetDevice1 performs a merge with any union data inside the MicrosoftGraphChatMessageReactionIdentitySet_Device, using the provided MicrosoftGraphChatMessageReactionIdentitySetDevice1
func (t *MicrosoftGraphChatMessageReactionIdentitySet_Device) MergeMicrosoftGraphChatMessageReactionIdentitySetDevice1(v MicrosoftGraphChatMessageReactionIdentitySetDevice1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

func (t MicrosoftGraphChatMessageReactionIdentitySet_Device) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *MicrosoftGraphChatMessageReactionIdentitySet_Device) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsMicrosoftGraphIdentity returns the union data inside the MicrosoftGraphChatMessageReactionIdentitySet_User as a MicrosoftGraphIdentity
func (t MicrosoftGraphChatMessageReactionIdentitySet_User) AsMicrosoftGraphIdentity() (MicrosoftGraphIdentity, error) {
	var body MicrosoftGraphIdentity
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphIdentity overwrites any union data inside the MicrosoftGraphChatMessageReactionIdentitySet_User as the provided MicrosoftGraphIdentity
func (t *MicrosoftGraphChatMessageReactionIdentitySet_User) FromMicrosoftGraphIdentity(v MicrosoftGraphIdentity) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphIdentity performs a merge with any union data inside the MicrosoftGraphChatMessageReactionIdentitySet_User, using the provided MicrosoftGraphIdentity
func (t *MicrosoftGraphChatMessageReactionIdentitySet_User) MergeMicrosoftGraphIdentity(v MicrosoftGraphIdentity) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsMicrosoftGraphChatMessageReactionIdentitySetUser1 returns the union data inside the MicrosoftGraphChatMessageReactionIdentitySet_User as a MicrosoftGraphChatMessageReactionIdentitySetUser1
func (t MicrosoftGraphChatMessageReactionIdentitySet_User) AsMicrosoftGraphChatMessageReactionIdentitySetUser1() (MicrosoftGraphChatMessageReactionIdentitySetUser1, error) {
	var body MicrosoftGraphChatMessageReactionIdentitySetUser1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphChatMessageReactionIdentitySetUser1 overwrites any union data inside the MicrosoftGraphChatMessageReactionIdentitySet_User as the provided MicrosoftGraphChatMessageReactionIdentitySetUser1
func (t *MicrosoftGraphChatMessageReactionIdentitySet_User) FromMicrosoftGraphChatMessageReactionIdentitySetUser1(v MicrosoftGraphChatMessageReactionIdentitySetUser1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphChatMessageReactionIdentitySetUser1 performs a merge with any union data inside the MicrosoftGraphChatMessageReactionIdentitySet_User, using the provided MicrosoftGraphChatMessageReactionIdentitySetUser1
func (t *MicrosoftGraphChatMessageReactionIdentitySet_User) MergeMicrosoftGraphChatMessageReactionIdentitySetUser1(v MicrosoftGraphChatMessageReactionIdentitySetUser1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

func (t MicrosoftGraphChatMessageReactionIdentitySet_User) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *MicrosoftGraphChatMessageReactionIdentitySet_User) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsMicrosoftGraphBooleanColumn returns the union data inside the MicrosoftGraphColumnDefinition_Boolean as a MicrosoftGraphBooleanColumn
func (t MicrosoftGraphColumnDefinition_Boolean) AsMicrosoftGraphBooleanColumn() (MicrosoftGraphBooleanColumn, error) {
	var body MicrosoftGraphBooleanColumn
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphBooleanColumn overwrites any union data inside the MicrosoftGraphColumnDefinition_Boolean as the provided MicrosoftGraphBooleanColumn
func (t *MicrosoftGraphColumnDefinition_Boolean) FromMicrosoftGraphBooleanColumn(v MicrosoftGraphBooleanColumn) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphBooleanColumn performs a merge with any union data inside the MicrosoftGraphColumnDefinition_Boolean, using the provided MicrosoftGraphBooleanColumn
func (t *MicrosoftGraphColumnDefinition_Boolean) MergeMicrosoftGraphBooleanColumn(v MicrosoftGraphBooleanColumn) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsMicrosoftGraphColumnDefinitionBoolean1 returns the union data inside the MicrosoftGraphColumnDefinition_Boolean as a MicrosoftGraphColumnDefinitionBoolean1
func (t MicrosoftGraphColumnDefinition_Boolean) AsMicrosoftGraphColumnDefinitionBoolean1() (MicrosoftGraphColumnDefinitionBoolean1, error) {
	var body MicrosoftGraphColumnDefinitionBoolean1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphColumnDefinitionBoolean1 overwrites any union data inside the MicrosoftGraphColumnDefinition_Boolean as the provided MicrosoftGraphColumnDefinitionBoolean1
func (t *MicrosoftGraphColumnDefinition_Boolean) FromMicrosoftGraphColumnDefinitionBoolean1(v MicrosoftGraphColumnDefinitionBoolean1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphColumnDefinitionBoolean1 performs a merge with any union data inside the MicrosoftGraphColumnDefinition_Boolean, using the provided MicrosoftGraphColumnDefinitionBoolean1
func (t *MicrosoftGraphColumnDefinition_Boolean) MergeMicrosoftGraphColumnDefinitionBoolean1(v MicrosoftGraphColumnDefinitionBoolean1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

func (t MicrosoftGraphColumnDefinition_Boolean) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *MicrosoftGraphColumnDefinition_Boolean) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsMicrosoftGraphCalculatedColumn returns the union data inside the MicrosoftGraphColumnDefinition_Calculated as a MicrosoftGraphCalculatedColumn
func (t MicrosoftGraphColumnDefinition_Calculated) AsMicrosoftGraphCalculatedColumn() (MicrosoftGraphCalculatedColumn, error) {
	var body MicrosoftGraphCalculatedColumn
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphCalculatedColumn overwrites any union data inside the MicrosoftGraphColumnDefinition_Calculated as the provided MicrosoftGraphCalculatedColumn
func (t *MicrosoftGraphColumnDefinition_Calculated) FromMicrosoftGraphCalculatedColumn(v MicrosoftGraphCalculatedColumn) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphCalculatedColumn performs a merge with any union data inside the MicrosoftGraphColumnDefinition_Calculated, using the provided MicrosoftGraphCalculatedColumn
func (t *MicrosoftGraphColumnDefinition_Calculated) MergeMicrosoftGraphCalculatedColumn(v MicrosoftGraphCalculatedColumn) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsMicrosoftGraphColumnDefinitionCalculated1 returns the union data inside the MicrosoftGraphColumnDefinition_Calculated as a MicrosoftGraphColumnDefinitionCalculated1
func (t MicrosoftGraphColumnDefinition_Calculated) AsMicrosoftGraphColumnDefinitionCalculated1() (MicrosoftGraphColumnDefinitionCalculated1, error) {
	var body MicrosoftGraphColumnDefinitionCalculated1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphColumnDefinitionCalculated1 overwrites any union data inside the MicrosoftGraphColumnDefinition_Calculated as the provided MicrosoftGraphColumnDefinitionCalculated1
func (t *MicrosoftGraphColumnDefinition_Calculated) FromMicrosoftGraphColumnDefinitionCalculated1(v MicrosoftGraphColumnDefinitionCalculated1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphColumnDefinitionCalculated1 performs a merge with any union data inside the MicrosoftGraphColumnDefinition_Calculated, using the provided MicrosoftGraphColumnDefinitionCalculated1
func (t *MicrosoftGraphColumnDefinition_Calculated) MergeMicrosoftGraphColumnDefinitionCalculated1(v MicrosoftGraphColumnDefinitionCalculated1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

func (t MicrosoftGraphColumnDefinition_Calculated) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *MicrosoftGraphColumnDefinition_Calculated) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsMicrosoftGraphChoiceColumn returns the union data inside the MicrosoftGraphColumnDefinition_Choice as a MicrosoftGraphChoiceColumn
func (t MicrosoftGraphColumnDefinition_Choice) AsMicrosoftGraphChoiceColumn() (MicrosoftGraphChoiceColumn, error) {
	var body MicrosoftGraphChoiceColumn
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphChoiceColumn overwrites any union data inside the MicrosoftGraphColumnDefinition_Choice as the provided MicrosoftGraphChoiceColumn
func (t *MicrosoftGraphColumnDefinition_Choice) FromMicrosoftGraphChoiceColumn(v MicrosoftGraphChoiceColumn) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphChoiceColumn performs a merge with any union data inside the MicrosoftGraphColumnDefinition_Choice, using the provided MicrosoftGraphChoiceColumn
func (t *MicrosoftGraphColumnDefinition_Choice) MergeMicrosoftGraphChoiceColumn(v MicrosoftGraphChoiceColumn) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsMicrosoftGraphColumnDefinitionChoice1 returns the union data inside the MicrosoftGraphColumnDefinition_Choice as a MicrosoftGraphColumnDefinitionChoice1
func (t MicrosoftGraphColumnDefinition_Choice) AsMicrosoftGraphColumnDefinitionChoice1() (MicrosoftGraphColumnDefinitionChoice1, error) {
	var body MicrosoftGraphColumnDefinitionChoice1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphColumnDefinitionChoice1 overwrites any union data inside the MicrosoftGraphColumnDefinition_Choice as the provided MicrosoftGraphColumnDefinitionChoice1
func (t *MicrosoftGraphColumnDefinition_Choice) FromMicrosoftGraphColumnDefinitionChoice1(v MicrosoftGraphColumnDefinitionChoice1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphColumnDefinitionChoice1 performs a merge with any union data inside the MicrosoftGraphColumnDefinition_Choice, using the provided MicrosoftGraphColumnDefinitionChoice1
func (t *MicrosoftGraphColumnDefinition_Choice) MergeMicrosoftGraphColumnDefinitionChoice1(v MicrosoftGraphColumnDefinitionChoice1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

func (t MicrosoftGraphColumnDefinition_Choice) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *MicrosoftGraphColumnDefinition_Choice) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsMicrosoftGraphContentApprovalStatusColumn returns the union data inside the MicrosoftGraphColumnDefinition_ContentApprovalStatus as a MicrosoftGraphContentApprovalStatusColumn
func (t MicrosoftGraphColumnDefinition_ContentApprovalStatus) AsMicrosoftGraphContentApprovalStatusColumn() (MicrosoftGraphContentApprovalStatusColumn, error) {
	var body MicrosoftGraphContentApprovalStatusColumn
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphContentApprovalStatusColumn overwrites any union data inside the MicrosoftGraphColumnDefinition_ContentApprovalStatus as the provided MicrosoftGraphContentApprovalStatusColumn
func (t *MicrosoftGraphColumnDefinition_ContentApprovalStatus) FromMicrosoftGraphContentApprovalStatusColumn(v MicrosoftGraphContentApprovalStatusColumn) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphContentApprovalStatusColumn performs a merge with any union data inside the MicrosoftGraphColumnDefinition_ContentApprovalStatus, using the provided MicrosoftGraphContentApprovalStatusColumn
func (t *MicrosoftGraphColumnDefinition_ContentApprovalStatus) MergeMicrosoftGraphContentApprovalStatusColumn(v MicrosoftGraphContentApprovalStatusColumn) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsMicrosoftGraphColumnDefinitionContentApprovalStatus1 returns the union data inside the MicrosoftGraphColumnDefinition_ContentApprovalStatus as a MicrosoftGraphColumnDefinitionContentApprovalStatus1
func (t MicrosoftGraphColumnDefinition_ContentApprovalStatus) AsMicrosoftGraphColumnDefinitionContentApprovalStatus1() (MicrosoftGraphColumnDefinitionContentApprovalStatus1, error) {
	var body MicrosoftGraphColumnDefinitionContentApprovalStatus1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphColumnDefinitionContentApprovalStatus1 overwrites any union data inside the MicrosoftGraphColumnDefinition_ContentApprovalStatus as the provided MicrosoftGraphColumnDefinitionContentApprovalStatus1
func (t *MicrosoftGraphColumnDefinition_ContentApprovalStatus) FromMicrosoftGraphColumnDefinitionContentApprovalStatus1(v MicrosoftGraphColumnDefinitionContentApprovalStatus1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphColumnDefinitionContentApprovalStatus1 performs a merge with any union data inside the MicrosoftGraphColumnDefinition_ContentApprovalStatus, using the provided MicrosoftGraphColumnDefinitionContentApprovalStatus1
func (t *MicrosoftGraphColumnDefinition_ContentApprovalStatus) MergeMicrosoftGraphColumnDefinitionContentApprovalStatus1(v MicrosoftGraphColumnDefinitionContentApprovalStatus1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

func (t MicrosoftGraphColumnDefinition_ContentApprovalStatus) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *MicrosoftGraphColumnDefinition_ContentApprovalStatus) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsMicrosoftGraphCurrencyColumn returns the union data inside the MicrosoftGraphColumnDefinition_Currency as a MicrosoftGraphCurrencyColumn
func (t MicrosoftGraphColumnDefinition_Currency) AsMicrosoftGraphCurrencyColumn() (MicrosoftGraphCurrencyColumn, error) {
	var body MicrosoftGraphCurrencyColumn
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphCurrencyColumn overwrites any union data inside the MicrosoftGraphColumnDefinition_Currency as the provided MicrosoftGraphCurrencyColumn
func (t *MicrosoftGraphColumnDefinition_Currency) FromMicrosoftGraphCurrencyColumn(v MicrosoftGraphCurrencyColumn) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphCurrencyColumn performs a merge with any union data inside the MicrosoftGraphColumnDefinition_Currency, using the provided MicrosoftGraphCurrencyColumn
func (t *MicrosoftGraphColumnDefinition_Currency) MergeMicrosoftGraphCurrencyColumn(v MicrosoftGraphCurrencyColumn) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsMicrosoftGraphColumnDefinitionCurrency1 returns the union data inside the MicrosoftGraphColumnDefinition_Currency as a MicrosoftGraphColumnDefinitionCurrency1
func (t MicrosoftGraphColumnDefinition_Currency) AsMicrosoftGraphColumnDefinitionCurrency1() (MicrosoftGraphColumnDefinitionCurrency1, error) {
	var body MicrosoftGraphColumnDefinitionCurrency1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphColumnDefinitionCurrency1 overwrites any union data inside the MicrosoftGraphColumnDefinition_Currency as the provided MicrosoftGraphColumnDefinitionCurrency1
func (t *MicrosoftGraphColumnDefinition_Currency) FromMicrosoftGraphColumnDefinitionCurrency1(v MicrosoftGraphColumnDefinitionCurrency1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphColumnDefinitionCurrency1 performs a merge with any union data inside the MicrosoftGraphColumnDefinition_Currency, using the provided MicrosoftGraphColumnDefinitionCurrency1
func (t *MicrosoftGraphColumnDefinition_Currency) MergeMicrosoftGraphColumnDefinitionCurrency1(v MicrosoftGraphColumnDefinitionCurrency1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

func (t MicrosoftGraphColumnDefinition_Currency) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *MicrosoftGraphColumnDefinition_Currency) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsMicrosoftGraphDateTimeColumn returns the union data inside the MicrosoftGraphColumnDefinition_DateTime as a MicrosoftGraphDateTimeColumn
func (t MicrosoftGraphColumnDefinition_DateTime) AsMicrosoftGraphDateTimeColumn() (MicrosoftGraphDateTimeColumn, error) {
	var body MicrosoftGraphDateTimeColumn
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphDateTimeColumn overwrites any union data inside the MicrosoftGraphColumnDefinition_DateTime as the provided MicrosoftGraphDateTimeColumn
func (t *MicrosoftGraphColumnDefinition_DateTime) FromMicrosoftGraphDateTimeColumn(v MicrosoftGraphDateTimeColumn) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphDateTimeColumn performs a merge with any union data inside the MicrosoftGraphColumnDefinition_DateTime, using the provided MicrosoftGraphDateTimeColumn
func (t *MicrosoftGraphColumnDefinition_DateTime) MergeMicrosoftGraphDateTimeColumn(v MicrosoftGraphDateTimeColumn) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsMicrosoftGraphColumnDefinitionDateTime1 returns the union data inside the MicrosoftGraphColumnDefinition_DateTime as a MicrosoftGraphColumnDefinitionDateTime1
func (t MicrosoftGraphColumnDefinition_DateTime) AsMicrosoftGraphColumnDefinitionDateTime1() (MicrosoftGraphColumnDefinitionDateTime1, error) {
	var body MicrosoftGraphColumnDefinitionDateTime1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphColumnDefinitionDateTime1 overwrites any union data inside the MicrosoftGraphColumnDefinition_DateTime as the provided MicrosoftGraphColumnDefinitionDateTime1
func (t *MicrosoftGraphColumnDefinition_DateTime) FromMicrosoftGraphColumnDefinitionDateTime1(v MicrosoftGraphColumnDefinitionDateTime1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphColumnDefinitionDateTime1 performs a merge with any union data inside the MicrosoftGraphColumnDefinition_DateTime, using the provided MicrosoftGraphColumnDefinitionDateTime1
func (t *MicrosoftGraphColumnDefinition_DateTime) MergeMicrosoftGraphColumnDefinitionDateTime1(v MicrosoftGraphColumnDefinitionDateTime1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

func (t MicrosoftGraphColumnDefinition_DateTime) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *MicrosoftGraphColumnDefinition_DateTime) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsMicrosoftGraphDefaultColumnValue returns the union data inside the MicrosoftGraphColumnDefinition_DefaultValue as a MicrosoftGraphDefaultColumnValue
func (t MicrosoftGraphColumnDefinition_DefaultValue) AsMicrosoftGraphDefaultColumnValue() (MicrosoftGraphDefaultColumnValue, error) {
	var body MicrosoftGraphDefaultColumnValue
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphDefaultColumnValue overwrites any union data inside the MicrosoftGraphColumnDefinition_DefaultValue as the provided MicrosoftGraphDefaultColumnValue
func (t *MicrosoftGraphColumnDefinition_DefaultValue) FromMicrosoftGraphDefaultColumnValue(v MicrosoftGraphDefaultColumnValue) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphDefaultColumnValue performs a merge with any union data inside the MicrosoftGraphColumnDefinition_DefaultValue, using the provided MicrosoftGraphDefaultColumnValue
func (t *MicrosoftGraphColumnDefinition_DefaultValue) MergeMicrosoftGraphDefaultColumnValue(v MicrosoftGraphDefaultColumnValue) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsMicrosoftGraphColumnDefinitionDefaultValue1 returns the union data inside the MicrosoftGraphColumnDefinition_DefaultValue as a MicrosoftGraphColumnDefinitionDefaultValue1
func (t MicrosoftGraphColumnDefinition_DefaultValue) AsMicrosoftGraphColumnDefinitionDefaultValue1() (MicrosoftGraphColumnDefinitionDefaultValue1, error) {
	var body MicrosoftGraphColumnDefinitionDefaultValue1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphColumnDefinitionDefaultValue1 overwrites any union data inside the MicrosoftGraphColumnDefinition_DefaultValue as the provided MicrosoftGraphColumnDefinitionDefaultValue1
func (t *MicrosoftGraphColumnDefinition_DefaultValue) FromMicrosoftGraphColumnDefinitionDefaultValue1(v MicrosoftGraphColumnDefinitionDefaultValue1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphColumnDefinitionDefaultValue1 performs a merge with any union data inside the MicrosoftGraphColumnDefinition_DefaultValue, using the provided MicrosoftGraphColumnDefinitionDefaultValue1
func (t *MicrosoftGraphColumnDefinition_DefaultValue) MergeMicrosoftGraphColumnDefinitionDefaultValue1(v MicrosoftGraphColumnDefinitionDefaultValue1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

func (t MicrosoftGraphColumnDefinition_DefaultValue) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *MicrosoftGraphColumnDefinition_DefaultValue) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsMicrosoftGraphGeolocationColumn returns the union data inside the MicrosoftGraphColumnDefinition_Geolocation as a MicrosoftGraphGeolocationColumn
func (t MicrosoftGraphColumnDefinition_Geolocation) AsMicrosoftGraphGeolocationColumn() (MicrosoftGraphGeolocationColumn, error) {
	var body MicrosoftGraphGeolocationColumn
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphGeolocationColumn overwrites any union data inside the MicrosoftGraphColumnDefinition_Geolocation as the provided MicrosoftGraphGeolocationColumn
func (t *MicrosoftGraphColumnDefinition_Geolocation) FromMicrosoftGraphGeolocationColumn(v MicrosoftGraphGeolocationColumn) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphGeolocationColumn performs a merge with any union data inside the MicrosoftGraphColumnDefinition_Geolocation, using the provided MicrosoftGraphGeolocationColumn
func (t *MicrosoftGraphColumnDefinition_Geolocation) MergeMicrosoftGraphGeolocationColumn(v MicrosoftGraphGeolocationColumn) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsMicrosoftGraphColumnDefinitionGeolocation1 returns the union data inside the MicrosoftGraphColumnDefinition_Geolocation as a MicrosoftGraphColumnDefinitionGeolocation1
func (t MicrosoftGraphColumnDefinition_Geolocation) AsMicrosoftGraphColumnDefinitionGeolocation1() (MicrosoftGraphColumnDefinitionGeolocation1, error) {
	var body MicrosoftGraphColumnDefinitionGeolocation1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphColumnDefinitionGeolocation1 overwrites any union data inside the MicrosoftGraphColumnDefinition_Geolocation as the provided MicrosoftGraphColumnDefinitionGeolocation1
func (t *MicrosoftGraphColumnDefinition_Geolocation) FromMicrosoftGraphColumnDefinitionGeolocation1(v MicrosoftGraphColumnDefinitionGeolocation1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphColumnDefinitionGeolocation1 performs a merge with any union data inside the MicrosoftGraphColumnDefinition_Geolocation, using the provided MicrosoftGraphColumnDefinitionGeolocation1
func (t *MicrosoftGraphColumnDefinition_Geolocation) MergeMicrosoftGraphColumnDefinitionGeolocation1(v MicrosoftGraphColumnDefinitionGeolocation1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

func (t MicrosoftGraphColumnDefinition_Geolocation) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *MicrosoftGraphColumnDefinition_Geolocation) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsMicrosoftGraphHyperlinkOrPictureColumn returns the union data inside the MicrosoftGraphColumnDefinition_HyperlinkOrPicture as a MicrosoftGraphHyperlinkOrPictureColumn
func (t MicrosoftGraphColumnDefinition_HyperlinkOrPicture) AsMicrosoftGraphHyperlinkOrPictureColumn() (MicrosoftGraphHyperlinkOrPictureColumn, error) {
	var body MicrosoftGraphHyperlinkOrPictureColumn
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphHyperlinkOrPictureColumn overwrites any union data inside the MicrosoftGraphColumnDefinition_HyperlinkOrPicture as the provided MicrosoftGraphHyperlinkOrPictureColumn
func (t *MicrosoftGraphColumnDefinition_HyperlinkOrPicture) FromMicrosoftGraphHyperlinkOrPictureColumn(v MicrosoftGraphHyperlinkOrPictureColumn) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphHyperlinkOrPictureColumn performs a merge with any union data inside the MicrosoftGraphColumnDefinition_HyperlinkOrPicture, using the provided MicrosoftGraphHyperlinkOrPictureColumn
func (t *MicrosoftGraphColumnDefinition_HyperlinkOrPicture) MergeMicrosoftGraphHyperlinkOrPictureColumn(v MicrosoftGraphHyperlinkOrPictureColumn) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsMicrosoftGraphColumnDefinitionHyperlinkOrPicture1 returns the union data inside the MicrosoftGraphColumnDefinition_HyperlinkOrPicture as a MicrosoftGraphColumnDefinitionHyperlinkOrPicture1
func (t MicrosoftGraphColumnDefinition_HyperlinkOrPicture) AsMicrosoftGraphColumnDefinitionHyperlinkOrPicture1() (MicrosoftGraphColumnDefinitionHyperlinkOrPicture1, error) {
	var body MicrosoftGraphColumnDefinitionHyperlinkOrPicture1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphColumnDefinitionHyperlinkOrPicture1 overwrites any union data inside the MicrosoftGraphColumnDefinition_HyperlinkOrPicture as the provided MicrosoftGraphColumnDefinitionHyperlinkOrPicture1
func (t *MicrosoftGraphColumnDefinition_HyperlinkOrPicture) FromMicrosoftGraphColumnDefinitionHyperlinkOrPicture1(v MicrosoftGraphColumnDefinitionHyperlinkOrPicture1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphColumnDefinitionHyperlinkOrPicture1 performs a merge with any union data inside the MicrosoftGraphColumnDefinition_HyperlinkOrPicture, using the provided MicrosoftGraphColumnDefinitionHyperlinkOrPicture1
func (t *MicrosoftGraphColumnDefinition_HyperlinkOrPicture) MergeMicrosoftGraphColumnDefinitionHyperlinkOrPicture1(v MicrosoftGraphColumnDefinitionHyperlinkOrPicture1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

func (t MicrosoftGraphColumnDefinition_HyperlinkOrPicture) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *MicrosoftGraphColumnDefinition_HyperlinkOrPicture) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsMicrosoftGraphLookupColumn returns the union data inside the MicrosoftGraphColumnDefinition_Lookup as a MicrosoftGraphLookupColumn
func (t MicrosoftGraphColumnDefinition_Lookup) AsMicrosoftGraphLookupColumn() (MicrosoftGraphLookupColumn, error) {
	var body MicrosoftGraphLookupColumn
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphLookupColumn overwrites any union data inside the MicrosoftGraphColumnDefinition_Lookup as the provided MicrosoftGraphLookupColumn
func (t *MicrosoftGraphColumnDefinition_Lookup) FromMicrosoftGraphLookupColumn(v MicrosoftGraphLookupColumn) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphLookupColumn performs a merge with any union data inside the MicrosoftGraphColumnDefinition_Lookup, using the provided MicrosoftGraphLookupColumn
func (t *MicrosoftGraphColumnDefinition_Lookup) MergeMicrosoftGraphLookupColumn(v MicrosoftGraphLookupColumn) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsMicrosoftGraphColumnDefinitionLookup1 returns the union data inside the MicrosoftGraphColumnDefinition_Lookup as a MicrosoftGraphColumnDefinitionLookup1
func (t MicrosoftGraphColumnDefinition_Lookup) AsMicrosoftGraphColumnDefinitionLookup1() (MicrosoftGraphColumnDefinitionLookup1, error) {
	var body MicrosoftGraphColumnDefinitionLookup1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphColumnDefinitionLookup1 overwrites any union data inside the MicrosoftGraphColumnDefinition_Lookup as the provided MicrosoftGraphColumnDefinitionLookup1
func (t *MicrosoftGraphColumnDefinition_Lookup) FromMicrosoftGraphColumnDefinitionLookup1(v MicrosoftGraphColumnDefinitionLookup1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphColumnDefinitionLookup1 performs a merge with any union data inside the MicrosoftGraphColumnDefinition_Lookup, using the provided MicrosoftGraphColumnDefinitionLookup1
func (t *MicrosoftGraphColumnDefinition_Lookup) MergeMicrosoftGraphColumnDefinitionLookup1(v MicrosoftGraphColumnDefinitionLookup1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

func (t MicrosoftGraphColumnDefinition_Lookup) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *MicrosoftGraphColumnDefinition_Lookup) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsMicrosoftGraphNumberColumn returns the union data inside the MicrosoftGraphColumnDefinition_Number as a MicrosoftGraphNumberColumn
func (t MicrosoftGraphColumnDefinition_Number) AsMicrosoftGraphNumberColumn() (MicrosoftGraphNumberColumn, error) {
	var body MicrosoftGraphNumberColumn
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphNumberColumn overwrites any union data inside the MicrosoftGraphColumnDefinition_Number as the provided MicrosoftGraphNumberColumn
func (t *MicrosoftGraphColumnDefinition_Number) FromMicrosoftGraphNumberColumn(v MicrosoftGraphNumberColumn) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphNumberColumn performs a merge with any union data inside the MicrosoftGraphColumnDefinition_Number, using the provided MicrosoftGraphNumberColumn
func (t *MicrosoftGraphColumnDefinition_Number) MergeMicrosoftGraphNumberColumn(v MicrosoftGraphNumberColumn) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsMicrosoftGraphColumnDefinitionNumber1 returns the union data inside the MicrosoftGraphColumnDefinition_Number as a MicrosoftGraphColumnDefinitionNumber1
func (t MicrosoftGraphColumnDefinition_Number) AsMicrosoftGraphColumnDefinitionNumber1() (MicrosoftGraphColumnDefinitionNumber1, error) {
	var body MicrosoftGraphColumnDefinitionNumber1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphColumnDefinitionNumber1 overwrites any union data inside the MicrosoftGraphColumnDefinition_Number as the provided MicrosoftGraphColumnDefinitionNumber1
func (t *MicrosoftGraphColumnDefinition_Number) FromMicrosoftGraphColumnDefinitionNumber1(v MicrosoftGraphColumnDefinitionNumber1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphColumnDefinitionNumber1 performs a merge with any union data inside the MicrosoftGraphColumnDefinition_Number, using the provided MicrosoftGraphColumnDefinitionNumber1
func (t *MicrosoftGraphColumnDefinition_Number) MergeMicrosoftGraphColumnDefinitionNumber1(v MicrosoftGraphColumnDefinitionNumber1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

func (t MicrosoftGraphColumnDefinition_Number) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *MicrosoftGraphColumnDefinition_Number) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsMicrosoftGraphPersonOrGroupColumn returns the union data inside the MicrosoftGraphColumnDefinition_PersonOrGroup as a MicrosoftGraphPersonOrGroupColumn
func (t MicrosoftGraphColumnDefinition_PersonOrGroup) AsMicrosoftGraphPersonOrGroupColumn() (MicrosoftGraphPersonOrGroupColumn, error) {
	var body MicrosoftGraphPersonOrGroupColumn
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphPersonOrGroupColumn overwrites any union data inside the MicrosoftGraphColumnDefinition_PersonOrGroup as the provided MicrosoftGraphPersonOrGroupColumn
func (t *MicrosoftGraphColumnDefinition_PersonOrGroup) FromMicrosoftGraphPersonOrGroupColumn(v MicrosoftGraphPersonOrGroupColumn) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphPersonOrGroupColumn performs a merge with any union data inside the MicrosoftGraphColumnDefinition_PersonOrGroup, using the provided MicrosoftGraphPersonOrGroupColumn
func (t *MicrosoftGraphColumnDefinition_PersonOrGroup) MergeMicrosoftGraphPersonOrGroupColumn(v MicrosoftGraphPersonOrGroupColumn) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsMicrosoftGraphColumnDefinitionPersonOrGroup1 returns the union data inside the MicrosoftGraphColumnDefinition_PersonOrGroup as a MicrosoftGraphColumnDefinitionPersonOrGroup1
func (t MicrosoftGraphColumnDefinition_PersonOrGroup) AsMicrosoftGraphColumnDefinitionPersonOrGroup1() (MicrosoftGraphColumnDefinitionPersonOrGroup1, error) {
	var body MicrosoftGraphColumnDefinitionPersonOrGroup1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphColumnDefinitionPersonOrGroup1 overwrites any union data inside the MicrosoftGraphColumnDefinition_PersonOrGroup as the provided MicrosoftGraphColumnDefinitionPersonOrGroup1
func (t *MicrosoftGraphColumnDefinition_PersonOrGroup) FromMicrosoftGraphColumnDefinitionPersonOrGroup1(v MicrosoftGraphColumnDefinitionPersonOrGroup1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphColumnDefinitionPersonOrGroup1 performs a merge with any union data inside the MicrosoftGraphColumnDefinition_PersonOrGroup, using the provided MicrosoftGraphColumnDefinitionPersonOrGroup1
func (t *MicrosoftGraphColumnDefinition_PersonOrGroup) MergeMicrosoftGraphColumnDefinitionPersonOrGroup1(v MicrosoftGraphColumnDefinitionPersonOrGroup1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

func (t MicrosoftGraphColumnDefinition_PersonOrGroup) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *MicrosoftGraphColumnDefinition_PersonOrGroup) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsMicrosoftGraphColumnDefinition returns the union data inside the MicrosoftGraphColumnDefinition_SourceColumn as a MicrosoftGraphColumnDefinition
func (t MicrosoftGraphColumnDefinition_SourceColumn) AsMicrosoftGraphColumnDefinition() (MicrosoftGraphColumnDefinition, error) {
	var body MicrosoftGraphColumnDefinition
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphColumnDefinition overwrites any union data inside the MicrosoftGraphColumnDefinition_SourceColumn as the provided MicrosoftGraphColumnDefinition
func (t *MicrosoftGraphColumnDefinition_SourceColumn) FromMicrosoftGraphColumnDefinition(v MicrosoftGraphColumnDefinition) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphColumnDefinition performs a merge with any union data inside the MicrosoftGraphColumnDefinition_SourceColumn, using the provided MicrosoftGraphColumnDefinition
func (t *MicrosoftGraphColumnDefinition_SourceColumn) MergeMicrosoftGraphColumnDefinition(v MicrosoftGraphColumnDefinition) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsMicrosoftGraphColumnDefinitionSourceColumn1 returns the union data inside the MicrosoftGraphColumnDefinition_SourceColumn as a MicrosoftGraphColumnDefinitionSourceColumn1
func (t MicrosoftGraphColumnDefinition_SourceColumn) AsMicrosoftGraphColumnDefinitionSourceColumn1() (MicrosoftGraphColumnDefinitionSourceColumn1, error) {
	var body MicrosoftGraphColumnDefinitionSourceColumn1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphColumnDefinitionSourceColumn1 overwrites any union data inside the MicrosoftGraphColumnDefinition_SourceColumn as the provided MicrosoftGraphColumnDefinitionSourceColumn1
func (t *MicrosoftGraphColumnDefinition_SourceColumn) FromMicrosoftGraphColumnDefinitionSourceColumn1(v MicrosoftGraphColumnDefinitionSourceColumn1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphColumnDefinitionSourceColumn1 performs a merge with any union data inside the MicrosoftGraphColumnDefinition_SourceColumn, using the provided MicrosoftGraphColumnDefinitionSourceColumn1
func (t *MicrosoftGraphColumnDefinition_SourceColumn) MergeMicrosoftGraphColumnDefinitionSourceColumn1(v MicrosoftGraphColumnDefinitionSourceColumn1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

func (t MicrosoftGraphColumnDefinition_SourceColumn) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *MicrosoftGraphColumnDefinition_SourceColumn) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsMicrosoftGraphContentTypeInfo returns the union data inside the MicrosoftGraphColumnDefinition_SourceContentType as a MicrosoftGraphContentTypeInfo
func (t MicrosoftGraphColumnDefinition_SourceContentType) AsMicrosoftGraphContentTypeInfo() (MicrosoftGraphContentTypeInfo, error) {
	var body MicrosoftGraphContentTypeInfo
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphContentTypeInfo overwrites any union data inside the MicrosoftGraphColumnDefinition_SourceContentType as the provided MicrosoftGraphContentTypeInfo
func (t *MicrosoftGraphColumnDefinition_SourceContentType) FromMicrosoftGraphContentTypeInfo(v MicrosoftGraphContentTypeInfo) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphContentTypeInfo performs a merge with any union data inside the MicrosoftGraphColumnDefinition_SourceContentType, using the provided MicrosoftGraphContentTypeInfo
func (t *MicrosoftGraphColumnDefinition_SourceContentType) MergeMicrosoftGraphContentTypeInfo(v MicrosoftGraphContentTypeInfo) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsMicrosoftGraphColumnDefinitionSourceContentType1 returns the union data inside the MicrosoftGraphColumnDefinition_SourceContentType as a MicrosoftGraphColumnDefinitionSourceContentType1
func (t MicrosoftGraphColumnDefinition_SourceContentType) AsMicrosoftGraphColumnDefinitionSourceContentType1() (MicrosoftGraphColumnDefinitionSourceContentType1, error) {
	var body MicrosoftGraphColumnDefinitionSourceContentType1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphColumnDefinitionSourceContentType1 overwrites any union data inside the MicrosoftGraphColumnDefinition_SourceContentType as the provided MicrosoftGraphColumnDefinitionSourceContentType1
func (t *MicrosoftGraphColumnDefinition_SourceContentType) FromMicrosoftGraphColumnDefinitionSourceContentType1(v MicrosoftGraphColumnDefinitionSourceContentType1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphColumnDefinitionSourceContentType1 performs a merge with any union data inside the MicrosoftGraphColumnDefinition_SourceContentType, using the provided MicrosoftGraphColumnDefinitionSourceContentType1
func (t *MicrosoftGraphColumnDefinition_SourceContentType) MergeMicrosoftGraphColumnDefinitionSourceContentType1(v MicrosoftGraphColumnDefinitionSourceContentType1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

func (t MicrosoftGraphColumnDefinition_SourceContentType) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *MicrosoftGraphColumnDefinition_SourceContentType) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsMicrosoftGraphTermColumn returns the union data inside the MicrosoftGraphColumnDefinition_Term as a MicrosoftGraphTermColumn
func (t MicrosoftGraphColumnDefinition_Term) AsMicrosoftGraphTermColumn() (MicrosoftGraphTermColumn, error) {
	var body MicrosoftGraphTermColumn
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphTermColumn overwrites any union data inside the MicrosoftGraphColumnDefinition_Term as the provided MicrosoftGraphTermColumn
func (t *MicrosoftGraphColumnDefinition_Term) FromMicrosoftGraphTermColumn(v MicrosoftGraphTermColumn) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphTermColumn performs a merge with any union data inside the MicrosoftGraphColumnDefinition_Term, using the provided MicrosoftGraphTermColumn
func (t *MicrosoftGraphColumnDefinition_Term) MergeMicrosoftGraphTermColumn(v MicrosoftGraphTermColumn) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsMicrosoftGraphColumnDefinitionTerm1 returns the union data inside the MicrosoftGraphColumnDefinition_Term as a MicrosoftGraphColumnDefinitionTerm1
func (t MicrosoftGraphColumnDefinition_Term) AsMicrosoftGraphColumnDefinitionTerm1() (MicrosoftGraphColumnDefinitionTerm1, error) {
	var body MicrosoftGraphColumnDefinitionTerm1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphColumnDefinitionTerm1 overwrites any union data inside the MicrosoftGraphColumnDefinition_Term as the provided MicrosoftGraphColumnDefinitionTerm1
func (t *MicrosoftGraphColumnDefinition_Term) FromMicrosoftGraphColumnDefinitionTerm1(v MicrosoftGraphColumnDefinitionTerm1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphColumnDefinitionTerm1 performs a merge with any union data inside the MicrosoftGraphColumnDefinition_Term, using the provided MicrosoftGraphColumnDefinitionTerm1
func (t *MicrosoftGraphColumnDefinition_Term) MergeMicrosoftGraphColumnDefinitionTerm1(v MicrosoftGraphColumnDefinitionTerm1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

func (t MicrosoftGraphColumnDefinition_Term) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *MicrosoftGraphColumnDefinition_Term) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsMicrosoftGraphTextColumn returns the union data inside the MicrosoftGraphColumnDefinition_Text as a MicrosoftGraphTextColumn
func (t MicrosoftGraphColumnDefinition_Text) AsMicrosoftGraphTextColumn() (MicrosoftGraphTextColumn, error) {
	var body MicrosoftGraphTextColumn
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphTextColumn overwrites any union data inside the MicrosoftGraphColumnDefinition_Text as the provided MicrosoftGraphTextColumn
func (t *MicrosoftGraphColumnDefinition_Text) FromMicrosoftGraphTextColumn(v MicrosoftGraphTextColumn) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphTextColumn performs a merge with any union data inside the MicrosoftGraphColumnDefinition_Text, using the provided MicrosoftGraphTextColumn
func (t *MicrosoftGraphColumnDefinition_Text) MergeMicrosoftGraphTextColumn(v MicrosoftGraphTextColumn) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsMicrosoftGraphColumnDefinitionText1 returns the union data inside the MicrosoftGraphColumnDefinition_Text as a MicrosoftGraphColumnDefinitionText1
func (t MicrosoftGraphColumnDefinition_Text) AsMicrosoftGraphColumnDefinitionText1() (MicrosoftGraphColumnDefinitionText1, error) {
	var body MicrosoftGraphColumnDefinitionText1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphColumnDefinitionText1 overwrites any union data inside the MicrosoftGraphColumnDefinition_Text as the provided MicrosoftGraphColumnDefinitionText1
func (t *MicrosoftGraphColumnDefinition_Text) FromMicrosoftGraphColumnDefinitionText1(v MicrosoftGraphColumnDefinitionText1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphColumnDefinitionText1 performs a merge with any union data inside the MicrosoftGraphColumnDefinition_Text, using the provided MicrosoftGraphColumnDefinitionText1
func (t *MicrosoftGraphColumnDefinition_Text) MergeMicrosoftGraphColumnDefinitionText1(v MicrosoftGraphColumnDefinitionText1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

func (t MicrosoftGraphColumnDefinition_Text) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *MicrosoftGraphColumnDefinition_Text) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsMicrosoftGraphThumbnailColumn returns the union data inside the MicrosoftGraphColumnDefinition_Thumbnail as a MicrosoftGraphThumbnailColumn
func (t MicrosoftGraphColumnDefinition_Thumbnail) AsMicrosoftGraphThumbnailColumn() (MicrosoftGraphThumbnailColumn, error) {
	var body MicrosoftGraphThumbnailColumn
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphThumbnailColumn overwrites any union data inside the MicrosoftGraphColumnDefinition_Thumbnail as the provided MicrosoftGraphThumbnailColumn
func (t *MicrosoftGraphColumnDefinition_Thumbnail) FromMicrosoftGraphThumbnailColumn(v MicrosoftGraphThumbnailColumn) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphThumbnailColumn performs a merge with any union data inside the MicrosoftGraphColumnDefinition_Thumbnail, using the provided MicrosoftGraphThumbnailColumn
func (t *MicrosoftGraphColumnDefinition_Thumbnail) MergeMicrosoftGraphThumbnailColumn(v MicrosoftGraphThumbnailColumn) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsMicrosoftGraphColumnDefinitionThumbnail1 returns the union data inside the MicrosoftGraphColumnDefinition_Thumbnail as a MicrosoftGraphColumnDefinitionThumbnail1
func (t MicrosoftGraphColumnDefinition_Thumbnail) AsMicrosoftGraphColumnDefinitionThumbnail1() (MicrosoftGraphColumnDefinitionThumbnail1, error) {
	var body MicrosoftGraphColumnDefinitionThumbnail1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphColumnDefinitionThumbnail1 overwrites any union data inside the MicrosoftGraphColumnDefinition_Thumbnail as the provided MicrosoftGraphColumnDefinitionThumbnail1
func (t *MicrosoftGraphColumnDefinition_Thumbnail) FromMicrosoftGraphColumnDefinitionThumbnail1(v MicrosoftGraphColumnDefinitionThumbnail1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphColumnDefinitionThumbnail1 performs a merge with any union data inside the MicrosoftGraphColumnDefinition_Thumbnail, using the provided MicrosoftGraphColumnDefinitionThumbnail1
func (t *MicrosoftGraphColumnDefinition_Thumbnail) MergeMicrosoftGraphColumnDefinitionThumbnail1(v MicrosoftGraphColumnDefinitionThumbnail1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

func (t MicrosoftGraphColumnDefinition_Thumbnail) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *MicrosoftGraphColumnDefinition_Thumbnail) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsMicrosoftGraphColumnTypes returns the union data inside the MicrosoftGraphColumnDefinition_Type as a MicrosoftGraphColumnTypes
func (t MicrosoftGraphColumnDefinition_Type) AsMicrosoftGraphColumnTypes() (MicrosoftGraphColumnTypes, error) {
	var body MicrosoftGraphColumnTypes
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphColumnTypes overwrites any union data inside the MicrosoftGraphColumnDefinition_Type as the provided MicrosoftGraphColumnTypes
func (t *MicrosoftGraphColumnDefinition_Type) FromMicrosoftGraphColumnTypes(v MicrosoftGraphColumnTypes) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphColumnTypes performs a merge with any union data inside the MicrosoftGraphColumnDefinition_Type, using the provided MicrosoftGraphColumnTypes
func (t *MicrosoftGraphColumnDefinition_Type) MergeMicrosoftGraphColumnTypes(v MicrosoftGraphColumnTypes) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsMicrosoftGraphColumnDefinitionType1 returns the union data inside the MicrosoftGraphColumnDefinition_Type as a MicrosoftGraphColumnDefinitionType1
func (t MicrosoftGraphColumnDefinition_Type) AsMicrosoftGraphColumnDefinitionType1() (MicrosoftGraphColumnDefinitionType1, error) {
	var body MicrosoftGraphColumnDefinitionType1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphColumnDefinitionType1 overwrites any union data inside the MicrosoftGraphColumnDefinition_Type as the provided MicrosoftGraphColumnDefinitionType1
func (t *MicrosoftGraphColumnDefinition_Type) FromMicrosoftGraphColumnDefinitionType1(v MicrosoftGraphColumnDefinitionType1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphColumnDefinitionType1 performs a merge with any union data inside the MicrosoftGraphColumnDefinition_Type, using the provided MicrosoftGraphColumnDefinitionType1
func (t *MicrosoftGraphColumnDefinition_Type) MergeMicrosoftGraphColumnDefinitionType1(v MicrosoftGraphColumnDefinitionType1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

func (t MicrosoftGraphColumnDefinition_Type) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *MicrosoftGraphColumnDefinition_Type) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsMicrosoftGraphColumnValidation returns the union data inside the MicrosoftGraphColumnDefinition_Validation as a MicrosoftGraphColumnValidation
func (t MicrosoftGraphColumnDefinition_Validation) AsMicrosoftGraphColumnValidation() (MicrosoftGraphColumnValidation, error) {
	var body MicrosoftGraphColumnValidation
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphColumnValidation overwrites any union data inside the MicrosoftGraphColumnDefinition_Validation as the provided MicrosoftGraphColumnValidation
func (t *MicrosoftGraphColumnDefinition_Validation) FromMicrosoftGraphColumnValidation(v MicrosoftGraphColumnValidation) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphColumnValidation performs a merge with any union data inside the MicrosoftGraphColumnDefinition_Validation, using the provided MicrosoftGraphColumnValidation
func (t *MicrosoftGraphColumnDefinition_Validation) MergeMicrosoftGraphColumnValidation(v MicrosoftGraphColumnValidation) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsMicrosoftGraphColumnDefinitionValidation1 returns the union data inside the MicrosoftGraphColumnDefinition_Validation as a MicrosoftGraphColumnDefinitionValidation1
func (t MicrosoftGraphColumnDefinition_Validation) AsMicrosoftGraphColumnDefinitionValidation1() (MicrosoftGraphColumnDefinitionValidation1, error) {
	var body MicrosoftGraphColumnDefinitionValidation1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphColumnDefinitionValidation1 overwrites any union data inside the MicrosoftGraphColumnDefinition_Validation as the provided MicrosoftGraphColumnDefinitionValidation1
func (t *MicrosoftGraphColumnDefinition_Validation) FromMicrosoftGraphColumnDefinitionValidation1(v MicrosoftGraphColumnDefinitionValidation1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphColumnDefinitionValidation1 performs a merge with any union data inside the MicrosoftGraphColumnDefinition_Validation, using the provided MicrosoftGraphColumnDefinitionValidation1
func (t *MicrosoftGraphColumnDefinition_Validation) MergeMicrosoftGraphColumnDefinitionValidation1(v MicrosoftGraphColumnDefinitionValidation1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

func (t MicrosoftGraphColumnDefinition_Validation) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *MicrosoftGraphColumnDefinition_Validation) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsMicrosoftGraphDisplayNameLocalization returns the union data inside the MicrosoftGraphColumnValidation_Descriptions_Item as a MicrosoftGraphDisplayNameLocalization
func (t MicrosoftGraphColumnValidation_Descriptions_Item) AsMicrosoftGraphDisplayNameLocalization() (MicrosoftGraphDisplayNameLocalization, error) {
	var body MicrosoftGraphDisplayNameLocalization
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphDisplayNameLocalization overwrites any union data inside the MicrosoftGraphColumnValidation_Descriptions_Item as the provided MicrosoftGraphDisplayNameLocalization
func (t *MicrosoftGraphColumnValidation_Descriptions_Item) FromMicrosoftGraphDisplayNameLocalization(v MicrosoftGraphDisplayNameLocalization) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphDisplayNameLocalization performs a merge with any union data inside the MicrosoftGraphColumnValidation_Descriptions_Item, using the provided MicrosoftGraphDisplayNameLocalization
func (t *MicrosoftGraphColumnValidation_Descriptions_Item) MergeMicrosoftGraphDisplayNameLocalization(v MicrosoftGraphDisplayNameLocalization) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsMicrosoftGraphColumnValidationDescriptions1 returns the union data inside the MicrosoftGraphColumnValidation_Descriptions_Item as a MicrosoftGraphColumnValidationDescriptions1
func (t MicrosoftGraphColumnValidation_Descriptions_Item) AsMicrosoftGraphColumnValidationDescriptions1() (MicrosoftGraphColumnValidationDescriptions1, error) {
	var body MicrosoftGraphColumnValidationDescriptions1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphColumnValidationDescriptions1 overwrites any union data inside the MicrosoftGraphColumnValidation_Descriptions_Item as the provided MicrosoftGraphColumnValidationDescriptions1
func (t *MicrosoftGraphColumnValidation_Descriptions_Item) FromMicrosoftGraphColumnValidationDescriptions1(v MicrosoftGraphColumnValidationDescriptions1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphColumnValidationDescriptions1 performs a merge with any union data inside the MicrosoftGraphColumnValidation_Descriptions_Item, using the provided MicrosoftGraphColumnValidationDescriptions1
func (t *MicrosoftGraphColumnValidation_Descriptions_Item) MergeMicrosoftGraphColumnValidationDescriptions1(v MicrosoftGraphColumnValidationDescriptions1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

func (t MicrosoftGraphColumnValidation_Descriptions_Item) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *MicrosoftGraphColumnValidation_Descriptions_Item) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsMicrosoftGraphPhysicalAddress returns the union data inside the MicrosoftGraphContact_BusinessAddress as a MicrosoftGraphPhysicalAddress
func (t MicrosoftGraphContact_BusinessAddress) AsMicrosoftGraphPhysicalAddress() (MicrosoftGraphPhysicalAddress, error) {
	var body MicrosoftGraphPhysicalAddress
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphPhysicalAddress overwrites any union data inside the MicrosoftGraphContact_BusinessAddress as the provided MicrosoftGraphPhysicalAddress
func (t *MicrosoftGraphContact_BusinessAddress) FromMicrosoftGraphPhysicalAddress(v MicrosoftGraphPhysicalAddress) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphPhysicalAddress performs a merge with any union data inside the MicrosoftGraphContact_BusinessAddress, using the provided MicrosoftGraphPhysicalAddress
func (t *MicrosoftGraphContact_BusinessAddress) MergeMicrosoftGraphPhysicalAddress(v MicrosoftGraphPhysicalAddress) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsMicrosoftGraphContactBusinessAddress1 returns the union data inside the MicrosoftGraphContact_BusinessAddress as a MicrosoftGraphContactBusinessAddress1
func (t MicrosoftGraphContact_BusinessAddress) AsMicrosoftGraphContactBusinessAddress1() (MicrosoftGraphContactBusinessAddress1, error) {
	var body MicrosoftGraphContactBusinessAddress1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphContactBusinessAddress1 overwrites any union data inside the MicrosoftGraphContact_BusinessAddress as the provided MicrosoftGraphContactBusinessAddress1
func (t *MicrosoftGraphContact_BusinessAddress) FromMicrosoftGraphContactBusinessAddress1(v MicrosoftGraphContactBusinessAddress1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphContactBusinessAddress1 performs a merge with any union data inside the MicrosoftGraphContact_BusinessAddress, using the provided MicrosoftGraphContactBusinessAddress1
func (t *MicrosoftGraphContact_BusinessAddress) MergeMicrosoftGraphContactBusinessAddress1(v MicrosoftGraphContactBusinessAddress1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

func (t MicrosoftGraphContact_BusinessAddress) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *MicrosoftGraphContact_BusinessAddress) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsMicrosoftGraphEmailAddress returns the union data inside the MicrosoftGraphContact_EmailAddresses_Item as a MicrosoftGraphEmailAddress
func (t MicrosoftGraphContact_EmailAddresses_Item) AsMicrosoftGraphEmailAddress() (MicrosoftGraphEmailAddress, error) {
	var body MicrosoftGraphEmailAddress
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphEmailAddress overwrites any union data inside the MicrosoftGraphContact_EmailAddresses_Item as the provided MicrosoftGraphEmailAddress
func (t *MicrosoftGraphContact_EmailAddresses_Item) FromMicrosoftGraphEmailAddress(v MicrosoftGraphEmailAddress) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphEmailAddress performs a merge with any union data inside the MicrosoftGraphContact_EmailAddresses_Item, using the provided MicrosoftGraphEmailAddress
func (t *MicrosoftGraphContact_EmailAddresses_Item) MergeMicrosoftGraphEmailAddress(v MicrosoftGraphEmailAddress) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsMicrosoftGraphContactEmailAddresses1 returns the union data inside the MicrosoftGraphContact_EmailAddresses_Item as a MicrosoftGraphContactEmailAddresses1
func (t MicrosoftGraphContact_EmailAddresses_Item) AsMicrosoftGraphContactEmailAddresses1() (MicrosoftGraphContactEmailAddresses1, error) {
	var body MicrosoftGraphContactEmailAddresses1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphContactEmailAddresses1 overwrites any union data inside the MicrosoftGraphContact_EmailAddresses_Item as the provided MicrosoftGraphContactEmailAddresses1
func (t *MicrosoftGraphContact_EmailAddresses_Item) FromMicrosoftGraphContactEmailAddresses1(v MicrosoftGraphContactEmailAddresses1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphContactEmailAddresses1 performs a merge with any union data inside the MicrosoftGraphContact_EmailAddresses_Item, using the provided MicrosoftGraphContactEmailAddresses1
func (t *MicrosoftGraphContact_EmailAddresses_Item) MergeMicrosoftGraphContactEmailAddresses1(v MicrosoftGraphContactEmailAddresses1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

func (t MicrosoftGraphContact_EmailAddresses_Item) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *MicrosoftGraphContact_EmailAddresses_Item) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsMicrosoftGraphPhysicalAddress returns the union data inside the MicrosoftGraphContact_HomeAddress as a MicrosoftGraphPhysicalAddress
func (t MicrosoftGraphContact_HomeAddress) AsMicrosoftGraphPhysicalAddress() (MicrosoftGraphPhysicalAddress, error) {
	var body MicrosoftGraphPhysicalAddress
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphPhysicalAddress overwrites any union data inside the MicrosoftGraphContact_HomeAddress as the provided MicrosoftGraphPhysicalAddress
func (t *MicrosoftGraphContact_HomeAddress) FromMicrosoftGraphPhysicalAddress(v MicrosoftGraphPhysicalAddress) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphPhysicalAddress performs a merge with any union data inside the MicrosoftGraphContact_HomeAddress, using the provided MicrosoftGraphPhysicalAddress
func (t *MicrosoftGraphContact_HomeAddress) MergeMicrosoftGraphPhysicalAddress(v MicrosoftGraphPhysicalAddress) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsMicrosoftGraphContactHomeAddress1 returns the union data inside the MicrosoftGraphContact_HomeAddress as a MicrosoftGraphContactHomeAddress1
func (t MicrosoftGraphContact_HomeAddress) AsMicrosoftGraphContactHomeAddress1() (MicrosoftGraphContactHomeAddress1, error) {
	var body MicrosoftGraphContactHomeAddress1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphContactHomeAddress1 overwrites any union data inside the MicrosoftGraphContact_HomeAddress as the provided MicrosoftGraphContactHomeAddress1
func (t *MicrosoftGraphContact_HomeAddress) FromMicrosoftGraphContactHomeAddress1(v MicrosoftGraphContactHomeAddress1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphContactHomeAddress1 performs a merge with any union data inside the MicrosoftGraphContact_HomeAddress, using the provided MicrosoftGraphContactHomeAddress1
func (t *MicrosoftGraphContact_HomeAddress) MergeMicrosoftGraphContactHomeAddress1(v MicrosoftGraphContactHomeAddress1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

func (t MicrosoftGraphContact_HomeAddress) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *MicrosoftGraphContact_HomeAddress) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsMicrosoftGraphPhysicalAddress returns the union data inside the MicrosoftGraphContact_OtherAddress as a MicrosoftGraphPhysicalAddress
func (t MicrosoftGraphContact_OtherAddress) AsMicrosoftGraphPhysicalAddress() (MicrosoftGraphPhysicalAddress, error) {
	var body MicrosoftGraphPhysicalAddress
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphPhysicalAddress overwrites any union data inside the MicrosoftGraphContact_OtherAddress as the provided MicrosoftGraphPhysicalAddress
func (t *MicrosoftGraphContact_OtherAddress) FromMicrosoftGraphPhysicalAddress(v MicrosoftGraphPhysicalAddress) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphPhysicalAddress performs a merge with any union data inside the MicrosoftGraphContact_OtherAddress, using the provided MicrosoftGraphPhysicalAddress
func (t *MicrosoftGraphContact_OtherAddress) MergeMicrosoftGraphPhysicalAddress(v MicrosoftGraphPhysicalAddress) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsMicrosoftGraphContactOtherAddress1 returns the union data inside the MicrosoftGraphContact_OtherAddress as a MicrosoftGraphContactOtherAddress1
func (t MicrosoftGraphContact_OtherAddress) AsMicrosoftGraphContactOtherAddress1() (MicrosoftGraphContactOtherAddress1, error) {
	var body MicrosoftGraphContactOtherAddress1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphContactOtherAddress1 overwrites any union data inside the MicrosoftGraphContact_OtherAddress as the provided MicrosoftGraphContactOtherAddress1
func (t *MicrosoftGraphContact_OtherAddress) FromMicrosoftGraphContactOtherAddress1(v MicrosoftGraphContactOtherAddress1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphContactOtherAddress1 performs a merge with any union data inside the MicrosoftGraphContact_OtherAddress, using the provided MicrosoftGraphContactOtherAddress1
func (t *MicrosoftGraphContact_OtherAddress) MergeMicrosoftGraphContactOtherAddress1(v MicrosoftGraphContactOtherAddress1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

func (t MicrosoftGraphContact_OtherAddress) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *MicrosoftGraphContact_OtherAddress) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsMicrosoftGraphProfilePhoto returns the union data inside the MicrosoftGraphContact_Photo as a MicrosoftGraphProfilePhoto
func (t MicrosoftGraphContact_Photo) AsMicrosoftGraphProfilePhoto() (MicrosoftGraphProfilePhoto, error) {
	var body MicrosoftGraphProfilePhoto
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphProfilePhoto overwrites any union data inside the MicrosoftGraphContact_Photo as the provided MicrosoftGraphProfilePhoto
func (t *MicrosoftGraphContact_Photo) FromMicrosoftGraphProfilePhoto(v MicrosoftGraphProfilePhoto) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphProfilePhoto performs a merge with any union data inside the MicrosoftGraphContact_Photo, using the provided MicrosoftGraphProfilePhoto
func (t *MicrosoftGraphContact_Photo) MergeMicrosoftGraphProfilePhoto(v MicrosoftGraphProfilePhoto) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsMicrosoftGraphContactPhoto1 returns the union data inside the MicrosoftGraphContact_Photo as a MicrosoftGraphContactPhoto1
func (t MicrosoftGraphContact_Photo) AsMicrosoftGraphContactPhoto1() (MicrosoftGraphContactPhoto1, error) {
	var body MicrosoftGraphContactPhoto1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphContactPhoto1 overwrites any union data inside the MicrosoftGraphContact_Photo as the provided MicrosoftGraphContactPhoto1
func (t *MicrosoftGraphContact_Photo) FromMicrosoftGraphContactPhoto1(v MicrosoftGraphContactPhoto1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphContactPhoto1 performs a merge with any union data inside the MicrosoftGraphContact_Photo, using the provided MicrosoftGraphContactPhoto1
func (t *MicrosoftGraphContact_Photo) MergeMicrosoftGraphContactPhoto1(v MicrosoftGraphContactPhoto1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

func (t MicrosoftGraphContact_Photo) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *MicrosoftGraphContact_Photo) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsMicrosoftGraphContentType returns the union data inside the MicrosoftGraphContentType_Base as a MicrosoftGraphContentType
func (t MicrosoftGraphContentType_Base) AsMicrosoftGraphContentType() (MicrosoftGraphContentType, error) {
	var body MicrosoftGraphContentType
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphContentType overwrites any union data inside the MicrosoftGraphContentType_Base as the provided MicrosoftGraphContentType
func (t *MicrosoftGraphContentType_Base) FromMicrosoftGraphContentType(v MicrosoftGraphContentType) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphContentType performs a merge with any union data inside the MicrosoftGraphContentType_Base, using the provided MicrosoftGraphContentType
func (t *MicrosoftGraphContentType_Base) MergeMicrosoftGraphContentType(v MicrosoftGraphContentType) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsMicrosoftGraphContentTypeBase1 returns the union data inside the MicrosoftGraphContentType_Base as a MicrosoftGraphContentTypeBase1
func (t MicrosoftGraphContentType_Base) AsMicrosoftGraphContentTypeBase1() (MicrosoftGraphContentTypeBase1, error) {
	var body MicrosoftGraphContentTypeBase1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphContentTypeBase1 overwrites any union data inside the MicrosoftGraphContentType_Base as the provided MicrosoftGraphContentTypeBase1
func (t *MicrosoftGraphContentType_Base) FromMicrosoftGraphContentTypeBase1(v MicrosoftGraphContentTypeBase1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphContentTypeBase1 performs a merge with any union data inside the MicrosoftGraphContentType_Base, using the provided MicrosoftGraphContentTypeBase1
func (t *MicrosoftGraphContentType_Base) MergeMicrosoftGraphContentTypeBase1(v MicrosoftGraphContentTypeBase1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

func (t MicrosoftGraphContentType_Base) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *MicrosoftGraphContentType_Base) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsMicrosoftGraphDocumentSet returns the union data inside the MicrosoftGraphContentType_DocumentSet as a MicrosoftGraphDocumentSet
func (t MicrosoftGraphContentType_DocumentSet) AsMicrosoftGraphDocumentSet() (MicrosoftGraphDocumentSet, error) {
	var body MicrosoftGraphDocumentSet
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphDocumentSet overwrites any union data inside the MicrosoftGraphContentType_DocumentSet as the provided MicrosoftGraphDocumentSet
func (t *MicrosoftGraphContentType_DocumentSet) FromMicrosoftGraphDocumentSet(v MicrosoftGraphDocumentSet) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphDocumentSet performs a merge with any union data inside the MicrosoftGraphContentType_DocumentSet, using the provided MicrosoftGraphDocumentSet
func (t *MicrosoftGraphContentType_DocumentSet) MergeMicrosoftGraphDocumentSet(v MicrosoftGraphDocumentSet) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsMicrosoftGraphContentTypeDocumentSet1 returns the union data inside the MicrosoftGraphContentType_DocumentSet as a MicrosoftGraphContentTypeDocumentSet1
func (t MicrosoftGraphContentType_DocumentSet) AsMicrosoftGraphContentTypeDocumentSet1() (MicrosoftGraphContentTypeDocumentSet1, error) {
	var body MicrosoftGraphContentTypeDocumentSet1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphContentTypeDocumentSet1 overwrites any union data inside the MicrosoftGraphContentType_DocumentSet as the provided MicrosoftGraphContentTypeDocumentSet1
func (t *MicrosoftGraphContentType_DocumentSet) FromMicrosoftGraphContentTypeDocumentSet1(v MicrosoftGraphContentTypeDocumentSet1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphContentTypeDocumentSet1 performs a merge with any union data inside the MicrosoftGraphContentType_DocumentSet, using the provided MicrosoftGraphContentTypeDocumentSet1
func (t *MicrosoftGraphContentType_DocumentSet) MergeMicrosoftGraphContentTypeDocumentSet1(v MicrosoftGraphContentTypeDocumentSet1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

func (t MicrosoftGraphContentType_DocumentSet) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *MicrosoftGraphContentType_DocumentSet) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsMicrosoftGraphDocumentSetContent returns the union data inside the MicrosoftGraphContentType_DocumentTemplate as a MicrosoftGraphDocumentSetContent
func (t MicrosoftGraphContentType_DocumentTemplate) AsMicrosoftGraphDocumentSetContent() (MicrosoftGraphDocumentSetContent, error) {
	var body MicrosoftGraphDocumentSetContent
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphDocumentSetContent overwrites any union data inside the MicrosoftGraphContentType_DocumentTemplate as the provided MicrosoftGraphDocumentSetContent
func (t *MicrosoftGraphContentType_DocumentTemplate) FromMicrosoftGraphDocumentSetContent(v MicrosoftGraphDocumentSetContent) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphDocumentSetContent performs a merge with any union data inside the MicrosoftGraphContentType_DocumentTemplate, using the provided MicrosoftGraphDocumentSetContent
func (t *MicrosoftGraphContentType_DocumentTemplate) MergeMicrosoftGraphDocumentSetContent(v MicrosoftGraphDocumentSetContent) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsMicrosoftGraphContentTypeDocumentTemplate1 returns the union data inside the MicrosoftGraphContentType_DocumentTemplate as a MicrosoftGraphContentTypeDocumentTemplate1
func (t MicrosoftGraphContentType_DocumentTemplate) AsMicrosoftGraphContentTypeDocumentTemplate1() (MicrosoftGraphContentTypeDocumentTemplate1, error) {
	var body MicrosoftGraphContentTypeDocumentTemplate1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphContentTypeDocumentTemplate1 overwrites any union data inside the MicrosoftGraphContentType_DocumentTemplate as the provided MicrosoftGraphContentTypeDocumentTemplate1
func (t *MicrosoftGraphContentType_DocumentTemplate) FromMicrosoftGraphContentTypeDocumentTemplate1(v MicrosoftGraphContentTypeDocumentTemplate1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphContentTypeDocumentTemplate1 performs a merge with any union data inside the MicrosoftGraphContentType_DocumentTemplate, using the provided MicrosoftGraphContentTypeDocumentTemplate1
func (t *MicrosoftGraphContentType_DocumentTemplate) MergeMicrosoftGraphContentTypeDocumentTemplate1(v MicrosoftGraphContentTypeDocumentTemplate1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

func (t MicrosoftGraphContentType_DocumentTemplate) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *MicrosoftGraphContentType_DocumentTemplate) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsMicrosoftGraphItemReference returns the union data inside the MicrosoftGraphContentType_InheritedFrom as a MicrosoftGraphItemReference
func (t MicrosoftGraphContentType_InheritedFrom) AsMicrosoftGraphItemReference() (MicrosoftGraphItemReference, error) {
	var body MicrosoftGraphItemReference
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphItemReference overwrites any union data inside the MicrosoftGraphContentType_InheritedFrom as the provided MicrosoftGraphItemReference
func (t *MicrosoftGraphContentType_InheritedFrom) FromMicrosoftGraphItemReference(v MicrosoftGraphItemReference) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphItemReference performs a merge with any union data inside the MicrosoftGraphContentType_InheritedFrom, using the provided MicrosoftGraphItemReference
func (t *MicrosoftGraphContentType_InheritedFrom) MergeMicrosoftGraphItemReference(v MicrosoftGraphItemReference) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsMicrosoftGraphContentTypeInheritedFrom1 returns the union data inside the MicrosoftGraphContentType_InheritedFrom as a MicrosoftGraphContentTypeInheritedFrom1
func (t MicrosoftGraphContentType_InheritedFrom) AsMicrosoftGraphContentTypeInheritedFrom1() (MicrosoftGraphContentTypeInheritedFrom1, error) {
	var body MicrosoftGraphContentTypeInheritedFrom1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphContentTypeInheritedFrom1 overwrites any union data inside the MicrosoftGraphContentType_InheritedFrom as the provided MicrosoftGraphContentTypeInheritedFrom1
func (t *MicrosoftGraphContentType_InheritedFrom) FromMicrosoftGraphContentTypeInheritedFrom1(v MicrosoftGraphContentTypeInheritedFrom1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphContentTypeInheritedFrom1 performs a merge with any union data inside the MicrosoftGraphContentType_InheritedFrom, using the provided MicrosoftGraphContentTypeInheritedFrom1
func (t *MicrosoftGraphContentType_InheritedFrom) MergeMicrosoftGraphContentTypeInheritedFrom1(v MicrosoftGraphContentTypeInheritedFrom1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

func (t MicrosoftGraphContentType_InheritedFrom) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *MicrosoftGraphContentType_InheritedFrom) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsMicrosoftGraphContentTypeOrder returns the union data inside the MicrosoftGraphContentType_Order as a MicrosoftGraphContentTypeOrder
func (t MicrosoftGraphContentType_Order) AsMicrosoftGraphContentTypeOrder() (MicrosoftGraphContentTypeOrder, error) {
	var body MicrosoftGraphContentTypeOrder
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphContentTypeOrder overwrites any union data inside the MicrosoftGraphContentType_Order as the provided MicrosoftGraphContentTypeOrder
func (t *MicrosoftGraphContentType_Order) FromMicrosoftGraphContentTypeOrder(v MicrosoftGraphContentTypeOrder) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphContentTypeOrder performs a merge with any union data inside the MicrosoftGraphContentType_Order, using the provided MicrosoftGraphContentTypeOrder
func (t *MicrosoftGraphContentType_Order) MergeMicrosoftGraphContentTypeOrder(v MicrosoftGraphContentTypeOrder) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsMicrosoftGraphContentTypeOrder1 returns the union data inside the MicrosoftGraphContentType_Order as a MicrosoftGraphContentTypeOrder1
func (t MicrosoftGraphContentType_Order) AsMicrosoftGraphContentTypeOrder1() (MicrosoftGraphContentTypeOrder1, error) {
	var body MicrosoftGraphContentTypeOrder1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphContentTypeOrder1 overwrites any union data inside the MicrosoftGraphContentType_Order as the provided MicrosoftGraphContentTypeOrder1
func (t *MicrosoftGraphContentType_Order) FromMicrosoftGraphContentTypeOrder1(v MicrosoftGraphContentTypeOrder1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphContentTypeOrder1 performs a merge with any union data inside the MicrosoftGraphContentType_Order, using the provided MicrosoftGraphContentTypeOrder1
func (t *MicrosoftGraphContentType_Order) MergeMicrosoftGraphContentTypeOrder1(v MicrosoftGraphContentTypeOrder1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

func (t MicrosoftGraphContentType_Order) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *MicrosoftGraphContentType_Order) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsMicrosoftGraphSettingSource returns the union data inside the MicrosoftGraphDeviceCompliancePolicySettingState_Sources_Item as a MicrosoftGraphSettingSource
func (t MicrosoftGraphDeviceCompliancePolicySettingState_Sources_Item) AsMicrosoftGraphSettingSource() (MicrosoftGraphSettingSource, error) {
	var body MicrosoftGraphSettingSource
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphSettingSource overwrites any union data inside the MicrosoftGraphDeviceCompliancePolicySettingState_Sources_Item as the provided MicrosoftGraphSettingSource
func (t *MicrosoftGraphDeviceCompliancePolicySettingState_Sources_Item) FromMicrosoftGraphSettingSource(v MicrosoftGraphSettingSource) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphSettingSource performs a merge with any union data inside the MicrosoftGraphDeviceCompliancePolicySettingState_Sources_Item, using the provided MicrosoftGraphSettingSource
func (t *MicrosoftGraphDeviceCompliancePolicySettingState_Sources_Item) MergeMicrosoftGraphSettingSource(v MicrosoftGraphSettingSource) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsMicrosoftGraphDeviceCompliancePolicySettingStateSources1 returns the union data inside the MicrosoftGraphDeviceCompliancePolicySettingState_Sources_Item as a MicrosoftGraphDeviceCompliancePolicySettingStateSources1
func (t MicrosoftGraphDeviceCompliancePolicySettingState_Sources_Item) AsMicrosoftGraphDeviceCompliancePolicySettingStateSources1() (MicrosoftGraphDeviceCompliancePolicySettingStateSources1, error) {
	var body MicrosoftGraphDeviceCompliancePolicySettingStateSources1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphDeviceCompliancePolicySettingStateSources1 overwrites any union data inside the MicrosoftGraphDeviceCompliancePolicySettingState_Sources_Item as the provided MicrosoftGraphDeviceCompliancePolicySettingStateSources1
func (t *MicrosoftGraphDeviceCompliancePolicySettingState_Sources_Item) FromMicrosoftGraphDeviceCompliancePolicySettingStateSources1(v MicrosoftGraphDeviceCompliancePolicySettingStateSources1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphDeviceCompliancePolicySettingStateSources1 performs a merge with any union data inside the MicrosoftGraphDeviceCompliancePolicySettingState_Sources_Item, using the provided MicrosoftGraphDeviceCompliancePolicySettingStateSources1
func (t *MicrosoftGraphDeviceCompliancePolicySettingState_Sources_Item) MergeMicrosoftGraphDeviceCompliancePolicySettingStateSources1(v MicrosoftGraphDeviceCompliancePolicySettingStateSources1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

func (t MicrosoftGraphDeviceCompliancePolicySettingState_Sources_Item) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *MicrosoftGraphDeviceCompliancePolicySettingState_Sources_Item) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsMicrosoftGraphDeviceCompliancePolicySettingState returns the union data inside the MicrosoftGraphDeviceCompliancePolicyState_SettingStates_Item as a MicrosoftGraphDeviceCompliancePolicySettingState
func (t MicrosoftGraphDeviceCompliancePolicyState_SettingStates_Item) AsMicrosoftGraphDeviceCompliancePolicySettingState() (MicrosoftGraphDeviceCompliancePolicySettingState, error) {
	var body MicrosoftGraphDeviceCompliancePolicySettingState
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphDeviceCompliancePolicySettingState overwrites any union data inside the MicrosoftGraphDeviceCompliancePolicyState_SettingStates_Item as the provided MicrosoftGraphDeviceCompliancePolicySettingState
func (t *MicrosoftGraphDeviceCompliancePolicyState_SettingStates_Item) FromMicrosoftGraphDeviceCompliancePolicySettingState(v MicrosoftGraphDeviceCompliancePolicySettingState) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphDeviceCompliancePolicySettingState performs a merge with any union data inside the MicrosoftGraphDeviceCompliancePolicyState_SettingStates_Item, using the provided MicrosoftGraphDeviceCompliancePolicySettingState
func (t *MicrosoftGraphDeviceCompliancePolicyState_SettingStates_Item) MergeMicrosoftGraphDeviceCompliancePolicySettingState(v MicrosoftGraphDeviceCompliancePolicySettingState) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsMicrosoftGraphDeviceCompliancePolicyStateSettingStates1 returns the union data inside the MicrosoftGraphDeviceCompliancePolicyState_SettingStates_Item as a MicrosoftGraphDeviceCompliancePolicyStateSettingStates1
func (t MicrosoftGraphDeviceCompliancePolicyState_SettingStates_Item) AsMicrosoftGraphDeviceCompliancePolicyStateSettingStates1() (MicrosoftGraphDeviceCompliancePolicyStateSettingStates1, error) {
	var body MicrosoftGraphDeviceCompliancePolicyStateSettingStates1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphDeviceCompliancePolicyStateSettingStates1 overwrites any union data inside the MicrosoftGraphDeviceCompliancePolicyState_SettingStates_Item as the provided MicrosoftGraphDeviceCompliancePolicyStateSettingStates1
func (t *MicrosoftGraphDeviceCompliancePolicyState_SettingStates_Item) FromMicrosoftGraphDeviceCompliancePolicyStateSettingStates1(v MicrosoftGraphDeviceCompliancePolicyStateSettingStates1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphDeviceCompliancePolicyStateSettingStates1 performs a merge with any union data inside the MicrosoftGraphDeviceCompliancePolicyState_SettingStates_Item, using the provided MicrosoftGraphDeviceCompliancePolicyStateSettingStates1
func (t *MicrosoftGraphDeviceCompliancePolicyState_SettingStates_Item) MergeMicrosoftGraphDeviceCompliancePolicyStateSettingStates1(v MicrosoftGraphDeviceCompliancePolicyStateSettingStates1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

func (t MicrosoftGraphDeviceCompliancePolicyState_SettingStates_Item) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *MicrosoftGraphDeviceCompliancePolicyState_SettingStates_Item) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsMicrosoftGraphSettingSource returns the union data inside the MicrosoftGraphDeviceConfigurationSettingState_Sources_Item as a MicrosoftGraphSettingSource
func (t MicrosoftGraphDeviceConfigurationSettingState_Sources_Item) AsMicrosoftGraphSettingSource() (MicrosoftGraphSettingSource, error) {
	var body MicrosoftGraphSettingSource
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphSettingSource overwrites any union data inside the MicrosoftGraphDeviceConfigurationSettingState_Sources_Item as the provided MicrosoftGraphSettingSource
func (t *MicrosoftGraphDeviceConfigurationSettingState_Sources_Item) FromMicrosoftGraphSettingSource(v MicrosoftGraphSettingSource) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphSettingSource performs a merge with any union data inside the MicrosoftGraphDeviceConfigurationSettingState_Sources_Item, using the provided MicrosoftGraphSettingSource
func (t *MicrosoftGraphDeviceConfigurationSettingState_Sources_Item) MergeMicrosoftGraphSettingSource(v MicrosoftGraphSettingSource) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsMicrosoftGraphDeviceConfigurationSettingStateSources1 returns the union data inside the MicrosoftGraphDeviceConfigurationSettingState_Sources_Item as a MicrosoftGraphDeviceConfigurationSettingStateSources1
func (t MicrosoftGraphDeviceConfigurationSettingState_Sources_Item) AsMicrosoftGraphDeviceConfigurationSettingStateSources1() (MicrosoftGraphDeviceConfigurationSettingStateSources1, error) {
	var body MicrosoftGraphDeviceConfigurationSettingStateSources1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphDeviceConfigurationSettingStateSources1 overwrites any union data inside the MicrosoftGraphDeviceConfigurationSettingState_Sources_Item as the provided MicrosoftGraphDeviceConfigurationSettingStateSources1
func (t *MicrosoftGraphDeviceConfigurationSettingState_Sources_Item) FromMicrosoftGraphDeviceConfigurationSettingStateSources1(v MicrosoftGraphDeviceConfigurationSettingStateSources1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphDeviceConfigurationSettingStateSources1 performs a merge with any union data inside the MicrosoftGraphDeviceConfigurationSettingState_Sources_Item, using the provided MicrosoftGraphDeviceConfigurationSettingStateSources1
func (t *MicrosoftGraphDeviceConfigurationSettingState_Sources_Item) MergeMicrosoftGraphDeviceConfigurationSettingStateSources1(v MicrosoftGraphDeviceConfigurationSettingStateSources1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

func (t MicrosoftGraphDeviceConfigurationSettingState_Sources_Item) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *MicrosoftGraphDeviceConfigurationSettingState_Sources_Item) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsMicrosoftGraphDeviceConfigurationSettingState returns the union data inside the MicrosoftGraphDeviceConfigurationState_SettingStates_Item as a MicrosoftGraphDeviceConfigurationSettingState
func (t MicrosoftGraphDeviceConfigurationState_SettingStates_Item) AsMicrosoftGraphDeviceConfigurationSettingState() (MicrosoftGraphDeviceConfigurationSettingState, error) {
	var body MicrosoftGraphDeviceConfigurationSettingState
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphDeviceConfigurationSettingState overwrites any union data inside the MicrosoftGraphDeviceConfigurationState_SettingStates_Item as the provided MicrosoftGraphDeviceConfigurationSettingState
func (t *MicrosoftGraphDeviceConfigurationState_SettingStates_Item) FromMicrosoftGraphDeviceConfigurationSettingState(v MicrosoftGraphDeviceConfigurationSettingState) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphDeviceConfigurationSettingState performs a merge with any union data inside the MicrosoftGraphDeviceConfigurationState_SettingStates_Item, using the provided MicrosoftGraphDeviceConfigurationSettingState
func (t *MicrosoftGraphDeviceConfigurationState_SettingStates_Item) MergeMicrosoftGraphDeviceConfigurationSettingState(v MicrosoftGraphDeviceConfigurationSettingState) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsMicrosoftGraphDeviceConfigurationStateSettingStates1 returns the union data inside the MicrosoftGraphDeviceConfigurationState_SettingStates_Item as a MicrosoftGraphDeviceConfigurationStateSettingStates1
func (t MicrosoftGraphDeviceConfigurationState_SettingStates_Item) AsMicrosoftGraphDeviceConfigurationStateSettingStates1() (MicrosoftGraphDeviceConfigurationStateSettingStates1, error) {
	var body MicrosoftGraphDeviceConfigurationStateSettingStates1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphDeviceConfigurationStateSettingStates1 overwrites any union data inside the MicrosoftGraphDeviceConfigurationState_SettingStates_Item as the provided MicrosoftGraphDeviceConfigurationStateSettingStates1
func (t *MicrosoftGraphDeviceConfigurationState_SettingStates_Item) FromMicrosoftGraphDeviceConfigurationStateSettingStates1(v MicrosoftGraphDeviceConfigurationStateSettingStates1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphDeviceConfigurationStateSettingStates1 performs a merge with any union data inside the MicrosoftGraphDeviceConfigurationState_SettingStates_Item, using the provided MicrosoftGraphDeviceConfigurationStateSettingStates1
func (t *MicrosoftGraphDeviceConfigurationState_SettingStates_Item) MergeMicrosoftGraphDeviceConfigurationStateSettingStates1(v MicrosoftGraphDeviceConfigurationStateSettingStates1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

func (t MicrosoftGraphDeviceConfigurationState_SettingStates_Item) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *MicrosoftGraphDeviceConfigurationState_SettingStates_Item) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsMicrosoftGraphDeviceLogCollectionResponseSizeInKB0 returns the union data inside the MicrosoftGraphDeviceLogCollectionResponse_SizeInKB as a MicrosoftGraphDeviceLogCollectionResponseSizeInKB0
func (t MicrosoftGraphDeviceLogCollectionResponse_SizeInKB) AsMicrosoftGraphDeviceLogCollectionResponseSizeInKB0() (MicrosoftGraphDeviceLogCollectionResponseSizeInKB0, error) {
	var body MicrosoftGraphDeviceLogCollectionResponseSizeInKB0
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphDeviceLogCollectionResponseSizeInKB0 overwrites any union data inside the MicrosoftGraphDeviceLogCollectionResponse_SizeInKB as the provided MicrosoftGraphDeviceLogCollectionResponseSizeInKB0
func (t *MicrosoftGraphDeviceLogCollectionResponse_SizeInKB) FromMicrosoftGraphDeviceLogCollectionResponseSizeInKB0(v MicrosoftGraphDeviceLogCollectionResponseSizeInKB0) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphDeviceLogCollectionResponseSizeInKB0 performs a merge with any union data inside the MicrosoftGraphDeviceLogCollectionResponse_SizeInKB, using the provided MicrosoftGraphDeviceLogCollectionResponseSizeInKB0
func (t *MicrosoftGraphDeviceLogCollectionResponse_SizeInKB) MergeMicrosoftGraphDeviceLogCollectionResponseSizeInKB0(v MicrosoftGraphDeviceLogCollectionResponseSizeInKB0) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsMicrosoftGraphDeviceLogCollectionResponseSizeInKB1 returns the union data inside the MicrosoftGraphDeviceLogCollectionResponse_SizeInKB as a MicrosoftGraphDeviceLogCollectionResponseSizeInKB1
func (t MicrosoftGraphDeviceLogCollectionResponse_SizeInKB) AsMicrosoftGraphDeviceLogCollectionResponseSizeInKB1() (MicrosoftGraphDeviceLogCollectionResponseSizeInKB1, error) {
	var body MicrosoftGraphDeviceLogCollectionResponseSizeInKB1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphDeviceLogCollectionResponseSizeInKB1 overwrites any union data inside the MicrosoftGraphDeviceLogCollectionResponse_SizeInKB as the provided MicrosoftGraphDeviceLogCollectionResponseSizeInKB1
func (t *MicrosoftGraphDeviceLogCollectionResponse_SizeInKB) FromMicrosoftGraphDeviceLogCollectionResponseSizeInKB1(v MicrosoftGraphDeviceLogCollectionResponseSizeInKB1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphDeviceLogCollectionResponseSizeInKB1 performs a merge with any union data inside the MicrosoftGraphDeviceLogCollectionResponse_SizeInKB, using the provided MicrosoftGraphDeviceLogCollectionResponseSizeInKB1
func (t *MicrosoftGraphDeviceLogCollectionResponse_SizeInKB) MergeMicrosoftGraphDeviceLogCollectionResponseSizeInKB1(v MicrosoftGraphDeviceLogCollectionResponseSizeInKB1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsReferenceNumeric returns the union data inside the MicrosoftGraphDeviceLogCollectionResponse_SizeInKB as a ReferenceNumeric
func (t MicrosoftGraphDeviceLogCollectionResponse_SizeInKB) AsReferenceNumeric() (ReferenceNumeric, error) {
	var body ReferenceNumeric
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromReferenceNumeric overwrites any union data inside the MicrosoftGraphDeviceLogCollectionResponse_SizeInKB as the provided ReferenceNumeric
func (t *MicrosoftGraphDeviceLogCollectionResponse_SizeInKB) FromReferenceNumeric(v ReferenceNumeric) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeReferenceNumeric performs a merge with any union data inside the MicrosoftGraphDeviceLogCollectionResponse_SizeInKB, using the provided ReferenceNumeric
func (t *MicrosoftGraphDeviceLogCollectionResponse_SizeInKB) MergeReferenceNumeric(v ReferenceNumeric) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

func (t MicrosoftGraphDeviceLogCollectionResponse_SizeInKB) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *MicrosoftGraphDeviceLogCollectionResponse_SizeInKB) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsMicrosoftGraphContentTypeInfo returns the union data inside the MicrosoftGraphDocumentSet_AllowedContentTypes_Item as a MicrosoftGraphContentTypeInfo
func (t MicrosoftGraphDocumentSet_AllowedContentTypes_Item) AsMicrosoftGraphContentTypeInfo() (MicrosoftGraphContentTypeInfo, error) {
	var body MicrosoftGraphContentTypeInfo
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphContentTypeInfo overwrites any union data inside the MicrosoftGraphDocumentSet_AllowedContentTypes_Item as the provided MicrosoftGraphContentTypeInfo
func (t *MicrosoftGraphDocumentSet_AllowedContentTypes_Item) FromMicrosoftGraphContentTypeInfo(v MicrosoftGraphContentTypeInfo) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphContentTypeInfo performs a merge with any union data inside the MicrosoftGraphDocumentSet_AllowedContentTypes_Item, using the provided MicrosoftGraphContentTypeInfo
func (t *MicrosoftGraphDocumentSet_AllowedContentTypes_Item) MergeMicrosoftGraphContentTypeInfo(v MicrosoftGraphContentTypeInfo) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsMicrosoftGraphDocumentSetAllowedContentTypes1 returns the union data inside the MicrosoftGraphDocumentSet_AllowedContentTypes_Item as a MicrosoftGraphDocumentSetAllowedContentTypes1
func (t MicrosoftGraphDocumentSet_AllowedContentTypes_Item) AsMicrosoftGraphDocumentSetAllowedContentTypes1() (MicrosoftGraphDocumentSetAllowedContentTypes1, error) {
	var body MicrosoftGraphDocumentSetAllowedContentTypes1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphDocumentSetAllowedContentTypes1 overwrites any union data inside the MicrosoftGraphDocumentSet_AllowedContentTypes_Item as the provided MicrosoftGraphDocumentSetAllowedContentTypes1
func (t *MicrosoftGraphDocumentSet_AllowedContentTypes_Item) FromMicrosoftGraphDocumentSetAllowedContentTypes1(v MicrosoftGraphDocumentSetAllowedContentTypes1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphDocumentSetAllowedContentTypes1 performs a merge with any union data inside the MicrosoftGraphDocumentSet_AllowedContentTypes_Item, using the provided MicrosoftGraphDocumentSetAllowedContentTypes1
func (t *MicrosoftGraphDocumentSet_AllowedContentTypes_Item) MergeMicrosoftGraphDocumentSetAllowedContentTypes1(v MicrosoftGraphDocumentSetAllowedContentTypes1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

func (t MicrosoftGraphDocumentSet_AllowedContentTypes_Item) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *MicrosoftGraphDocumentSet_AllowedContentTypes_Item) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsMicrosoftGraphDocumentSetContent returns the union data inside the MicrosoftGraphDocumentSet_DefaultContents_Item as a MicrosoftGraphDocumentSetContent
func (t MicrosoftGraphDocumentSet_DefaultContents_Item) AsMicrosoftGraphDocumentSetContent() (MicrosoftGraphDocumentSetContent, error) {
	var body MicrosoftGraphDocumentSetContent
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphDocumentSetContent overwrites any union data inside the MicrosoftGraphDocumentSet_DefaultContents_Item as the provided MicrosoftGraphDocumentSetContent
func (t *MicrosoftGraphDocumentSet_DefaultContents_Item) FromMicrosoftGraphDocumentSetContent(v MicrosoftGraphDocumentSetContent) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphDocumentSetContent performs a merge with any union data inside the MicrosoftGraphDocumentSet_DefaultContents_Item, using the provided MicrosoftGraphDocumentSetContent
func (t *MicrosoftGraphDocumentSet_DefaultContents_Item) MergeMicrosoftGraphDocumentSetContent(v MicrosoftGraphDocumentSetContent) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsMicrosoftGraphDocumentSetDefaultContents1 returns the union data inside the MicrosoftGraphDocumentSet_DefaultContents_Item as a MicrosoftGraphDocumentSetDefaultContents1
func (t MicrosoftGraphDocumentSet_DefaultContents_Item) AsMicrosoftGraphDocumentSetDefaultContents1() (MicrosoftGraphDocumentSetDefaultContents1, error) {
	var body MicrosoftGraphDocumentSetDefaultContents1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphDocumentSetDefaultContents1 overwrites any union data inside the MicrosoftGraphDocumentSet_DefaultContents_Item as the provided MicrosoftGraphDocumentSetDefaultContents1
func (t *MicrosoftGraphDocumentSet_DefaultContents_Item) FromMicrosoftGraphDocumentSetDefaultContents1(v MicrosoftGraphDocumentSetDefaultContents1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphDocumentSetDefaultContents1 performs a merge with any union data inside the MicrosoftGraphDocumentSet_DefaultContents_Item, using the provided MicrosoftGraphDocumentSetDefaultContents1
func (t *MicrosoftGraphDocumentSet_DefaultContents_Item) MergeMicrosoftGraphDocumentSetDefaultContents1(v MicrosoftGraphDocumentSetDefaultContents1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

func (t MicrosoftGraphDocumentSet_DefaultContents_Item) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *MicrosoftGraphDocumentSet_DefaultContents_Item) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsMicrosoftGraphContentTypeInfo returns the union data inside the MicrosoftGraphDocumentSetContent_ContentType as a MicrosoftGraphContentTypeInfo
func (t MicrosoftGraphDocumentSetContent_ContentType) AsMicrosoftGraphContentTypeInfo() (MicrosoftGraphContentTypeInfo, error) {
	var body MicrosoftGraphContentTypeInfo
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphContentTypeInfo overwrites any union data inside the MicrosoftGraphDocumentSetContent_ContentType as the provided MicrosoftGraphContentTypeInfo
func (t *MicrosoftGraphDocumentSetContent_ContentType) FromMicrosoftGraphContentTypeInfo(v MicrosoftGraphContentTypeInfo) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphContentTypeInfo performs a merge with any union data inside the MicrosoftGraphDocumentSetContent_ContentType, using the provided MicrosoftGraphContentTypeInfo
func (t *MicrosoftGraphDocumentSetContent_ContentType) MergeMicrosoftGraphContentTypeInfo(v MicrosoftGraphContentTypeInfo) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsMicrosoftGraphDocumentSetContentContentType1 returns the union data inside the MicrosoftGraphDocumentSetContent_ContentType as a MicrosoftGraphDocumentSetContentContentType1
func (t MicrosoftGraphDocumentSetContent_ContentType) AsMicrosoftGraphDocumentSetContentContentType1() (MicrosoftGraphDocumentSetContentContentType1, error) {
	var body MicrosoftGraphDocumentSetContentContentType1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphDocumentSetContentContentType1 overwrites any union data inside the MicrosoftGraphDocumentSetContent_ContentType as the provided MicrosoftGraphDocumentSetContentContentType1
func (t *MicrosoftGraphDocumentSetContent_ContentType) FromMicrosoftGraphDocumentSetContentContentType1(v MicrosoftGraphDocumentSetContentContentType1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphDocumentSetContentContentType1 performs a merge with any union data inside the MicrosoftGraphDocumentSetContent_ContentType, using the provided MicrosoftGraphDocumentSetContentContentType1
func (t *MicrosoftGraphDocumentSetContent_ContentType) MergeMicrosoftGraphDocumentSetContentContentType1(v MicrosoftGraphDocumentSetContentContentType1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

func (t MicrosoftGraphDocumentSetContent_ContentType) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *MicrosoftGraphDocumentSetContent_ContentType) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsMicrosoftGraphIdentitySet returns the union data inside the MicrosoftGraphDocumentSetVersion_CreatedBy as a MicrosoftGraphIdentitySet
func (t MicrosoftGraphDocumentSetVersion_CreatedBy) AsMicrosoftGraphIdentitySet() (MicrosoftGraphIdentitySet, error) {
	var body MicrosoftGraphIdentitySet
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphIdentitySet overwrites any union data inside the MicrosoftGraphDocumentSetVersion_CreatedBy as the provided MicrosoftGraphIdentitySet
func (t *MicrosoftGraphDocumentSetVersion_CreatedBy) FromMicrosoftGraphIdentitySet(v MicrosoftGraphIdentitySet) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphIdentitySet performs a merge with any union data inside the MicrosoftGraphDocumentSetVersion_CreatedBy, using the provided MicrosoftGraphIdentitySet
func (t *MicrosoftGraphDocumentSetVersion_CreatedBy) MergeMicrosoftGraphIdentitySet(v MicrosoftGraphIdentitySet) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsMicrosoftGraphDocumentSetVersionCreatedBy1 returns the union data inside the MicrosoftGraphDocumentSetVersion_CreatedBy as a MicrosoftGraphDocumentSetVersionCreatedBy1
func (t MicrosoftGraphDocumentSetVersion_CreatedBy) AsMicrosoftGraphDocumentSetVersionCreatedBy1() (MicrosoftGraphDocumentSetVersionCreatedBy1, error) {
	var body MicrosoftGraphDocumentSetVersionCreatedBy1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphDocumentSetVersionCreatedBy1 overwrites any union data inside the MicrosoftGraphDocumentSetVersion_CreatedBy as the provided MicrosoftGraphDocumentSetVersionCreatedBy1
func (t *MicrosoftGraphDocumentSetVersion_CreatedBy) FromMicrosoftGraphDocumentSetVersionCreatedBy1(v MicrosoftGraphDocumentSetVersionCreatedBy1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphDocumentSetVersionCreatedBy1 performs a merge with any union data inside the MicrosoftGraphDocumentSetVersion_CreatedBy, using the provided MicrosoftGraphDocumentSetVersionCreatedBy1
func (t *MicrosoftGraphDocumentSetVersion_CreatedBy) MergeMicrosoftGraphDocumentSetVersionCreatedBy1(v MicrosoftGraphDocumentSetVersionCreatedBy1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

func (t MicrosoftGraphDocumentSetVersion_CreatedBy) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *MicrosoftGraphDocumentSetVersion_CreatedBy) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsMicrosoftGraphFieldValueSet returns the union data inside the MicrosoftGraphDocumentSetVersion_Fields as a MicrosoftGraphFieldValueSet
func (t MicrosoftGraphDocumentSetVersion_Fields) AsMicrosoftGraphFieldValueSet() (MicrosoftGraphFieldValueSet, error) {
	var body MicrosoftGraphFieldValueSet
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphFieldValueSet overwrites any union data inside the MicrosoftGraphDocumentSetVersion_Fields as the provided MicrosoftGraphFieldValueSet
func (t *MicrosoftGraphDocumentSetVersion_Fields) FromMicrosoftGraphFieldValueSet(v MicrosoftGraphFieldValueSet) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphFieldValueSet performs a merge with any union data inside the MicrosoftGraphDocumentSetVersion_Fields, using the provided MicrosoftGraphFieldValueSet
func (t *MicrosoftGraphDocumentSetVersion_Fields) MergeMicrosoftGraphFieldValueSet(v MicrosoftGraphFieldValueSet) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsMicrosoftGraphDocumentSetVersionFields1 returns the union data inside the MicrosoftGraphDocumentSetVersion_Fields as a MicrosoftGraphDocumentSetVersionFields1
func (t MicrosoftGraphDocumentSetVersion_Fields) AsMicrosoftGraphDocumentSetVersionFields1() (MicrosoftGraphDocumentSetVersionFields1, error) {
	var body MicrosoftGraphDocumentSetVersionFields1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphDocumentSetVersionFields1 overwrites any union data inside the MicrosoftGraphDocumentSetVersion_Fields as the provided MicrosoftGraphDocumentSetVersionFields1
func (t *MicrosoftGraphDocumentSetVersion_Fields) FromMicrosoftGraphDocumentSetVersionFields1(v MicrosoftGraphDocumentSetVersionFields1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphDocumentSetVersionFields1 performs a merge with any union data inside the MicrosoftGraphDocumentSetVersion_Fields, using the provided MicrosoftGraphDocumentSetVersionFields1
func (t *MicrosoftGraphDocumentSetVersion_Fields) MergeMicrosoftGraphDocumentSetVersionFields1(v MicrosoftGraphDocumentSetVersionFields1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

func (t MicrosoftGraphDocumentSetVersion_Fields) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *MicrosoftGraphDocumentSetVersion_Fields) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsMicrosoftGraphDocumentSetVersionItem returns the union data inside the MicrosoftGraphDocumentSetVersion_Items_Item as a MicrosoftGraphDocumentSetVersionItem
func (t MicrosoftGraphDocumentSetVersion_Items_Item) AsMicrosoftGraphDocumentSetVersionItem() (MicrosoftGraphDocumentSetVersionItem, error) {
	var body MicrosoftGraphDocumentSetVersionItem
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphDocumentSetVersionItem overwrites any union data inside the MicrosoftGraphDocumentSetVersion_Items_Item as the provided MicrosoftGraphDocumentSetVersionItem
func (t *MicrosoftGraphDocumentSetVersion_Items_Item) FromMicrosoftGraphDocumentSetVersionItem(v MicrosoftGraphDocumentSetVersionItem) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphDocumentSetVersionItem performs a merge with any union data inside the MicrosoftGraphDocumentSetVersion_Items_Item, using the provided MicrosoftGraphDocumentSetVersionItem
func (t *MicrosoftGraphDocumentSetVersion_Items_Item) MergeMicrosoftGraphDocumentSetVersionItem(v MicrosoftGraphDocumentSetVersionItem) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsMicrosoftGraphDocumentSetVersionItems1 returns the union data inside the MicrosoftGraphDocumentSetVersion_Items_Item as a MicrosoftGraphDocumentSetVersionItems1
func (t MicrosoftGraphDocumentSetVersion_Items_Item) AsMicrosoftGraphDocumentSetVersionItems1() (MicrosoftGraphDocumentSetVersionItems1, error) {
	var body MicrosoftGraphDocumentSetVersionItems1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphDocumentSetVersionItems1 overwrites any union data inside the MicrosoftGraphDocumentSetVersion_Items_Item as the provided MicrosoftGraphDocumentSetVersionItems1
func (t *MicrosoftGraphDocumentSetVersion_Items_Item) FromMicrosoftGraphDocumentSetVersionItems1(v MicrosoftGraphDocumentSetVersionItems1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphDocumentSetVersionItems1 performs a merge with any union data inside the MicrosoftGraphDocumentSetVersion_Items_Item, using the provided MicrosoftGraphDocumentSetVersionItems1
func (t *MicrosoftGraphDocumentSetVersion_Items_Item) MergeMicrosoftGraphDocumentSetVersionItems1(v MicrosoftGraphDocumentSetVersionItems1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

func (t MicrosoftGraphDocumentSetVersion_Items_Item) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *MicrosoftGraphDocumentSetVersion_Items_Item) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsMicrosoftGraphIdentitySet returns the union data inside the MicrosoftGraphDocumentSetVersion_LastModifiedBy as a MicrosoftGraphIdentitySet
func (t MicrosoftGraphDocumentSetVersion_LastModifiedBy) AsMicrosoftGraphIdentitySet() (MicrosoftGraphIdentitySet, error) {
	var body MicrosoftGraphIdentitySet
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphIdentitySet overwrites any union data inside the MicrosoftGraphDocumentSetVersion_LastModifiedBy as the provided MicrosoftGraphIdentitySet
func (t *MicrosoftGraphDocumentSetVersion_LastModifiedBy) FromMicrosoftGraphIdentitySet(v MicrosoftGraphIdentitySet) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphIdentitySet performs a merge with any union data inside the MicrosoftGraphDocumentSetVersion_LastModifiedBy, using the provided MicrosoftGraphIdentitySet
func (t *MicrosoftGraphDocumentSetVersion_LastModifiedBy) MergeMicrosoftGraphIdentitySet(v MicrosoftGraphIdentitySet) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsMicrosoftGraphDocumentSetVersionLastModifiedBy1 returns the union data inside the MicrosoftGraphDocumentSetVersion_LastModifiedBy as a MicrosoftGraphDocumentSetVersionLastModifiedBy1
func (t MicrosoftGraphDocumentSetVersion_LastModifiedBy) AsMicrosoftGraphDocumentSetVersionLastModifiedBy1() (MicrosoftGraphDocumentSetVersionLastModifiedBy1, error) {
	var body MicrosoftGraphDocumentSetVersionLastModifiedBy1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphDocumentSetVersionLastModifiedBy1 overwrites any union data inside the MicrosoftGraphDocumentSetVersion_LastModifiedBy as the provided MicrosoftGraphDocumentSetVersionLastModifiedBy1
func (t *MicrosoftGraphDocumentSetVersion_LastModifiedBy) FromMicrosoftGraphDocumentSetVersionLastModifiedBy1(v MicrosoftGraphDocumentSetVersionLastModifiedBy1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphDocumentSetVersionLastModifiedBy1 performs a merge with any union data inside the MicrosoftGraphDocumentSetVersion_LastModifiedBy, using the provided MicrosoftGraphDocumentSetVersionLastModifiedBy1
func (t *MicrosoftGraphDocumentSetVersion_LastModifiedBy) MergeMicrosoftGraphDocumentSetVersionLastModifiedBy1(v MicrosoftGraphDocumentSetVersionLastModifiedBy1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

func (t MicrosoftGraphDocumentSetVersion_LastModifiedBy) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *MicrosoftGraphDocumentSetVersion_LastModifiedBy) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsMicrosoftGraphPublicationFacet returns the union data inside the MicrosoftGraphDocumentSetVersion_Publication as a MicrosoftGraphPublicationFacet
func (t MicrosoftGraphDocumentSetVersion_Publication) AsMicrosoftGraphPublicationFacet() (MicrosoftGraphPublicationFacet, error) {
	var body MicrosoftGraphPublicationFacet
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphPublicationFacet overwrites any union data inside the MicrosoftGraphDocumentSetVersion_Publication as the provided MicrosoftGraphPublicationFacet
func (t *MicrosoftGraphDocumentSetVersion_Publication) FromMicrosoftGraphPublicationFacet(v MicrosoftGraphPublicationFacet) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphPublicationFacet performs a merge with any union data inside the MicrosoftGraphDocumentSetVersion_Publication, using the provided MicrosoftGraphPublicationFacet
func (t *MicrosoftGraphDocumentSetVersion_Publication) MergeMicrosoftGraphPublicationFacet(v MicrosoftGraphPublicationFacet) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsMicrosoftGraphDocumentSetVersionPublication1 returns the union data inside the MicrosoftGraphDocumentSetVersion_Publication as a MicrosoftGraphDocumentSetVersionPublication1
func (t MicrosoftGraphDocumentSetVersion_Publication) AsMicrosoftGraphDocumentSetVersionPublication1() (MicrosoftGraphDocumentSetVersionPublication1, error) {
	var body MicrosoftGraphDocumentSetVersionPublication1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphDocumentSetVersionPublication1 overwrites any union data inside the MicrosoftGraphDocumentSetVersion_Publication as the provided MicrosoftGraphDocumentSetVersionPublication1
func (t *MicrosoftGraphDocumentSetVersion_Publication) FromMicrosoftGraphDocumentSetVersionPublication1(v MicrosoftGraphDocumentSetVersionPublication1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphDocumentSetVersionPublication1 performs a merge with any union data inside the MicrosoftGraphDocumentSetVersion_Publication, using the provided MicrosoftGraphDocumentSetVersionPublication1
func (t *MicrosoftGraphDocumentSetVersion_Publication) MergeMicrosoftGraphDocumentSetVersionPublication1(v MicrosoftGraphDocumentSetVersionPublication1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

func (t MicrosoftGraphDocumentSetVersion_Publication) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *MicrosoftGraphDocumentSetVersion_Publication) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsMicrosoftGraphIdentitySet returns the union data inside the MicrosoftGraphDrive_CreatedBy as a MicrosoftGraphIdentitySet
func (t MicrosoftGraphDrive_CreatedBy) AsMicrosoftGraphIdentitySet() (MicrosoftGraphIdentitySet, error) {
	var body MicrosoftGraphIdentitySet
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphIdentitySet overwrites any union data inside the MicrosoftGraphDrive_CreatedBy as the provided MicrosoftGraphIdentitySet
func (t *MicrosoftGraphDrive_CreatedBy) FromMicrosoftGraphIdentitySet(v MicrosoftGraphIdentitySet) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphIdentitySet performs a merge with any union data inside the MicrosoftGraphDrive_CreatedBy, using the provided MicrosoftGraphIdentitySet
func (t *MicrosoftGraphDrive_CreatedBy) MergeMicrosoftGraphIdentitySet(v MicrosoftGraphIdentitySet) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsMicrosoftGraphDriveCreatedBy1 returns the union data inside the MicrosoftGraphDrive_CreatedBy as a MicrosoftGraphDriveCreatedBy1
func (t MicrosoftGraphDrive_CreatedBy) AsMicrosoftGraphDriveCreatedBy1() (MicrosoftGraphDriveCreatedBy1, error) {
	var body MicrosoftGraphDriveCreatedBy1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphDriveCreatedBy1 overwrites any union data inside the MicrosoftGraphDrive_CreatedBy as the provided MicrosoftGraphDriveCreatedBy1
func (t *MicrosoftGraphDrive_CreatedBy) FromMicrosoftGraphDriveCreatedBy1(v MicrosoftGraphDriveCreatedBy1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphDriveCreatedBy1 performs a merge with any union data inside the MicrosoftGraphDrive_CreatedBy, using the provided MicrosoftGraphDriveCreatedBy1
func (t *MicrosoftGraphDrive_CreatedBy) MergeMicrosoftGraphDriveCreatedBy1(v MicrosoftGraphDriveCreatedBy1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

func (t MicrosoftGraphDrive_CreatedBy) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *MicrosoftGraphDrive_CreatedBy) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsMicrosoftGraphUser returns the union data inside the MicrosoftGraphDrive_CreatedByUser as a MicrosoftGraphUser
func (t MicrosoftGraphDrive_CreatedByUser) AsMicrosoftGraphUser() (MicrosoftGraphUser, error) {
	var body MicrosoftGraphUser
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphUser overwrites any union data inside the MicrosoftGraphDrive_CreatedByUser as the provided MicrosoftGraphUser
func (t *MicrosoftGraphDrive_CreatedByUser) FromMicrosoftGraphUser(v MicrosoftGraphUser) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphUser performs a merge with any union data inside the MicrosoftGraphDrive_CreatedByUser, using the provided MicrosoftGraphUser
func (t *MicrosoftGraphDrive_CreatedByUser) MergeMicrosoftGraphUser(v MicrosoftGraphUser) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsMicrosoftGraphDriveCreatedByUser1 returns the union data inside the MicrosoftGraphDrive_CreatedByUser as a MicrosoftGraphDriveCreatedByUser1
func (t MicrosoftGraphDrive_CreatedByUser) AsMicrosoftGraphDriveCreatedByUser1() (MicrosoftGraphDriveCreatedByUser1, error) {
	var body MicrosoftGraphDriveCreatedByUser1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphDriveCreatedByUser1 overwrites any union data inside the MicrosoftGraphDrive_CreatedByUser as the provided MicrosoftGraphDriveCreatedByUser1
func (t *MicrosoftGraphDrive_CreatedByUser) FromMicrosoftGraphDriveCreatedByUser1(v MicrosoftGraphDriveCreatedByUser1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphDriveCreatedByUser1 performs a merge with any union data inside the MicrosoftGraphDrive_CreatedByUser, using the provided MicrosoftGraphDriveCreatedByUser1
func (t *MicrosoftGraphDrive_CreatedByUser) MergeMicrosoftGraphDriveCreatedByUser1(v MicrosoftGraphDriveCreatedByUser1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

func (t MicrosoftGraphDrive_CreatedByUser) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *MicrosoftGraphDrive_CreatedByUser) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsMicrosoftGraphIdentitySet returns the union data inside the MicrosoftGraphDrive_LastModifiedBy as a MicrosoftGraphIdentitySet
func (t MicrosoftGraphDrive_LastModifiedBy) AsMicrosoftGraphIdentitySet() (MicrosoftGraphIdentitySet, error) {
	var body MicrosoftGraphIdentitySet
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphIdentitySet overwrites any union data inside the MicrosoftGraphDrive_LastModifiedBy as the provided MicrosoftGraphIdentitySet
func (t *MicrosoftGraphDrive_LastModifiedBy) FromMicrosoftGraphIdentitySet(v MicrosoftGraphIdentitySet) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphIdentitySet performs a merge with any union data inside the MicrosoftGraphDrive_LastModifiedBy, using the provided MicrosoftGraphIdentitySet
func (t *MicrosoftGraphDrive_LastModifiedBy) MergeMicrosoftGraphIdentitySet(v MicrosoftGraphIdentitySet) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsMicrosoftGraphDriveLastModifiedBy1 returns the union data inside the MicrosoftGraphDrive_LastModifiedBy as a MicrosoftGraphDriveLastModifiedBy1
func (t MicrosoftGraphDrive_LastModifiedBy) AsMicrosoftGraphDriveLastModifiedBy1() (MicrosoftGraphDriveLastModifiedBy1, error) {
	var body MicrosoftGraphDriveLastModifiedBy1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphDriveLastModifiedBy1 overwrites any union data inside the MicrosoftGraphDrive_LastModifiedBy as the provided MicrosoftGraphDriveLastModifiedBy1
func (t *MicrosoftGraphDrive_LastModifiedBy) FromMicrosoftGraphDriveLastModifiedBy1(v MicrosoftGraphDriveLastModifiedBy1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphDriveLastModifiedBy1 performs a merge with any union data inside the MicrosoftGraphDrive_LastModifiedBy, using the provided MicrosoftGraphDriveLastModifiedBy1
func (t *MicrosoftGraphDrive_LastModifiedBy) MergeMicrosoftGraphDriveLastModifiedBy1(v MicrosoftGraphDriveLastModifiedBy1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

func (t MicrosoftGraphDrive_LastModifiedBy) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *MicrosoftGraphDrive_LastModifiedBy) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsMicrosoftGraphUser returns the union data inside the MicrosoftGraphDrive_LastModifiedByUser as a MicrosoftGraphUser
func (t MicrosoftGraphDrive_LastModifiedByUser) AsMicrosoftGraphUser() (MicrosoftGraphUser, error) {
	var body MicrosoftGraphUser
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphUser overwrites any union data inside the MicrosoftGraphDrive_LastModifiedByUser as the provided MicrosoftGraphUser
func (t *MicrosoftGraphDrive_LastModifiedByUser) FromMicrosoftGraphUser(v MicrosoftGraphUser) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphUser performs a merge with any union data inside the MicrosoftGraphDrive_LastModifiedByUser, using the provided MicrosoftGraphUser
func (t *MicrosoftGraphDrive_LastModifiedByUser) MergeMicrosoftGraphUser(v MicrosoftGraphUser) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsMicrosoftGraphDriveLastModifiedByUser1 returns the union data inside the MicrosoftGraphDrive_LastModifiedByUser as a MicrosoftGraphDriveLastModifiedByUser1
func (t MicrosoftGraphDrive_LastModifiedByUser) AsMicrosoftGraphDriveLastModifiedByUser1() (MicrosoftGraphDriveLastModifiedByUser1, error) {
	var body MicrosoftGraphDriveLastModifiedByUser1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphDriveLastModifiedByUser1 overwrites any union data inside the MicrosoftGraphDrive_LastModifiedByUser as the provided MicrosoftGraphDriveLastModifiedByUser1
func (t *MicrosoftGraphDrive_LastModifiedByUser) FromMicrosoftGraphDriveLastModifiedByUser1(v MicrosoftGraphDriveLastModifiedByUser1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphDriveLastModifiedByUser1 performs a merge with any union data inside the MicrosoftGraphDrive_LastModifiedByUser, using the provided MicrosoftGraphDriveLastModifiedByUser1
func (t *MicrosoftGraphDrive_LastModifiedByUser) MergeMicrosoftGraphDriveLastModifiedByUser1(v MicrosoftGraphDriveLastModifiedByUser1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

func (t MicrosoftGraphDrive_LastModifiedByUser) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *MicrosoftGraphDrive_LastModifiedByUser) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsMicrosoftGraphList returns the union data inside the MicrosoftGraphDrive_List as a MicrosoftGraphList
func (t MicrosoftGraphDrive_List) AsMicrosoftGraphList() (MicrosoftGraphList, error) {
	var body MicrosoftGraphList
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphList overwrites any union data inside the MicrosoftGraphDrive_List as the provided MicrosoftGraphList
func (t *MicrosoftGraphDrive_List) FromMicrosoftGraphList(v MicrosoftGraphList) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphList performs a merge with any union data inside the MicrosoftGraphDrive_List, using the provided MicrosoftGraphList
func (t *MicrosoftGraphDrive_List) MergeMicrosoftGraphList(v MicrosoftGraphList) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsMicrosoftGraphDriveList1 returns the union data inside the MicrosoftGraphDrive_List as a MicrosoftGraphDriveList1
func (t MicrosoftGraphDrive_List) AsMicrosoftGraphDriveList1() (MicrosoftGraphDriveList1, error) {
	var body MicrosoftGraphDriveList1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphDriveList1 overwrites any union data inside the MicrosoftGraphDrive_List as the provided MicrosoftGraphDriveList1
func (t *MicrosoftGraphDrive_List) FromMicrosoftGraphDriveList1(v MicrosoftGraphDriveList1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphDriveList1 performs a merge with any union data inside the MicrosoftGraphDrive_List, using the provided MicrosoftGraphDriveList1
func (t *MicrosoftGraphDrive_List) MergeMicrosoftGraphDriveList1(v MicrosoftGraphDriveList1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

func (t MicrosoftGraphDrive_List) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *MicrosoftGraphDrive_List) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsMicrosoftGraphIdentitySet returns the union data inside the MicrosoftGraphDrive_Owner as a MicrosoftGraphIdentitySet
func (t MicrosoftGraphDrive_Owner) AsMicrosoftGraphIdentitySet() (MicrosoftGraphIdentitySet, error) {
	var body MicrosoftGraphIdentitySet
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphIdentitySet overwrites any union data inside the MicrosoftGraphDrive_Owner as the provided MicrosoftGraphIdentitySet
func (t *MicrosoftGraphDrive_Owner) FromMicrosoftGraphIdentitySet(v MicrosoftGraphIdentitySet) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphIdentitySet performs a merge with any union data inside the MicrosoftGraphDrive_Owner, using the provided MicrosoftGraphIdentitySet
func (t *MicrosoftGraphDrive_Owner) MergeMicrosoftGraphIdentitySet(v MicrosoftGraphIdentitySet) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsMicrosoftGraphDriveOwner1 returns the union data inside the MicrosoftGraphDrive_Owner as a MicrosoftGraphDriveOwner1
func (t MicrosoftGraphDrive_Owner) AsMicrosoftGraphDriveOwner1() (MicrosoftGraphDriveOwner1, error) {
	var body MicrosoftGraphDriveOwner1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphDriveOwner1 overwrites any union data inside the MicrosoftGraphDrive_Owner as the provided MicrosoftGraphDriveOwner1
func (t *MicrosoftGraphDrive_Owner) FromMicrosoftGraphDriveOwner1(v MicrosoftGraphDriveOwner1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphDriveOwner1 performs a merge with any union data inside the MicrosoftGraphDrive_Owner, using the provided MicrosoftGraphDriveOwner1
func (t *MicrosoftGraphDrive_Owner) MergeMicrosoftGraphDriveOwner1(v MicrosoftGraphDriveOwner1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

func (t MicrosoftGraphDrive_Owner) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *MicrosoftGraphDrive_Owner) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsMicrosoftGraphItemReference returns the union data inside the MicrosoftGraphDrive_ParentReference as a MicrosoftGraphItemReference
func (t MicrosoftGraphDrive_ParentReference) AsMicrosoftGraphItemReference() (MicrosoftGraphItemReference, error) {
	var body MicrosoftGraphItemReference
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphItemReference overwrites any union data inside the MicrosoftGraphDrive_ParentReference as the provided MicrosoftGraphItemReference
func (t *MicrosoftGraphDrive_ParentReference) FromMicrosoftGraphItemReference(v MicrosoftGraphItemReference) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphItemReference performs a merge with any union data inside the MicrosoftGraphDrive_ParentReference, using the provided MicrosoftGraphItemReference
func (t *MicrosoftGraphDrive_ParentReference) MergeMicrosoftGraphItemReference(v MicrosoftGraphItemReference) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsMicrosoftGraphDriveParentReference1 returns the union data inside the MicrosoftGraphDrive_ParentReference as a MicrosoftGraphDriveParentReference1
func (t MicrosoftGraphDrive_ParentReference) AsMicrosoftGraphDriveParentReference1() (MicrosoftGraphDriveParentReference1, error) {
	var body MicrosoftGraphDriveParentReference1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphDriveParentReference1 overwrites any union data inside the MicrosoftGraphDrive_ParentReference as the provided MicrosoftGraphDriveParentReference1
func (t *MicrosoftGraphDrive_ParentReference) FromMicrosoftGraphDriveParentReference1(v MicrosoftGraphDriveParentReference1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphDriveParentReference1 performs a merge with any union data inside the MicrosoftGraphDrive_ParentReference, using the provided MicrosoftGraphDriveParentReference1
func (t *MicrosoftGraphDrive_ParentReference) MergeMicrosoftGraphDriveParentReference1(v MicrosoftGraphDriveParentReference1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

func (t MicrosoftGraphDrive_ParentReference) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *MicrosoftGraphDrive_ParentReference) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsMicrosoftGraphQuota returns the union data inside the MicrosoftGraphDrive_Quota as a MicrosoftGraphQuota
func (t MicrosoftGraphDrive_Quota) AsMicrosoftGraphQuota() (MicrosoftGraphQuota, error) {
	var body MicrosoftGraphQuota
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphQuota overwrites any union data inside the MicrosoftGraphDrive_Quota as the provided MicrosoftGraphQuota
func (t *MicrosoftGraphDrive_Quota) FromMicrosoftGraphQuota(v MicrosoftGraphQuota) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphQuota performs a merge with any union data inside the MicrosoftGraphDrive_Quota, using the provided MicrosoftGraphQuota
func (t *MicrosoftGraphDrive_Quota) MergeMicrosoftGraphQuota(v MicrosoftGraphQuota) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsMicrosoftGraphDriveQuota1 returns the union data inside the MicrosoftGraphDrive_Quota as a MicrosoftGraphDriveQuota1
func (t MicrosoftGraphDrive_Quota) AsMicrosoftGraphDriveQuota1() (MicrosoftGraphDriveQuota1, error) {
	var body MicrosoftGraphDriveQuota1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphDriveQuota1 overwrites any union data inside the MicrosoftGraphDrive_Quota as the provided MicrosoftGraphDriveQuota1
func (t *MicrosoftGraphDrive_Quota) FromMicrosoftGraphDriveQuota1(v MicrosoftGraphDriveQuota1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphDriveQuota1 performs a merge with any union data inside the MicrosoftGraphDrive_Quota, using the provided MicrosoftGraphDriveQuota1
func (t *MicrosoftGraphDrive_Quota) MergeMicrosoftGraphDriveQuota1(v MicrosoftGraphDriveQuota1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

func (t MicrosoftGraphDrive_Quota) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *MicrosoftGraphDrive_Quota) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsMicrosoftGraphDriveItem returns the union data inside the MicrosoftGraphDrive_Root as a MicrosoftGraphDriveItem
func (t MicrosoftGraphDrive_Root) AsMicrosoftGraphDriveItem() (MicrosoftGraphDriveItem, error) {
	var body MicrosoftGraphDriveItem
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphDriveItem overwrites any union data inside the MicrosoftGraphDrive_Root as the provided MicrosoftGraphDriveItem
func (t *MicrosoftGraphDrive_Root) FromMicrosoftGraphDriveItem(v MicrosoftGraphDriveItem) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphDriveItem performs a merge with any union data inside the MicrosoftGraphDrive_Root, using the provided MicrosoftGraphDriveItem
func (t *MicrosoftGraphDrive_Root) MergeMicrosoftGraphDriveItem(v MicrosoftGraphDriveItem) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsMicrosoftGraphDriveRoot1 returns the union data inside the MicrosoftGraphDrive_Root as a MicrosoftGraphDriveRoot1
func (t MicrosoftGraphDrive_Root) AsMicrosoftGraphDriveRoot1() (MicrosoftGraphDriveRoot1, error) {
	var body MicrosoftGraphDriveRoot1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphDriveRoot1 overwrites any union data inside the MicrosoftGraphDrive_Root as the provided MicrosoftGraphDriveRoot1
func (t *MicrosoftGraphDrive_Root) FromMicrosoftGraphDriveRoot1(v MicrosoftGraphDriveRoot1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphDriveRoot1 performs a merge with any union data inside the MicrosoftGraphDrive_Root, using the provided MicrosoftGraphDriveRoot1
func (t *MicrosoftGraphDrive_Root) MergeMicrosoftGraphDriveRoot1(v MicrosoftGraphDriveRoot1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

func (t MicrosoftGraphDrive_Root) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *MicrosoftGraphDrive_Root) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsMicrosoftGraphSharepointIds returns the union data inside the MicrosoftGraphDrive_SharePointIds as a MicrosoftGraphSharepointIds
func (t MicrosoftGraphDrive_SharePointIds) AsMicrosoftGraphSharepointIds() (MicrosoftGraphSharepointIds, error) {
	var body MicrosoftGraphSharepointIds
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphSharepointIds overwrites any union data inside the MicrosoftGraphDrive_SharePointIds as the provided MicrosoftGraphSharepointIds
func (t *MicrosoftGraphDrive_SharePointIds) FromMicrosoftGraphSharepointIds(v MicrosoftGraphSharepointIds) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphSharepointIds performs a merge with any union data inside the MicrosoftGraphDrive_SharePointIds, using the provided MicrosoftGraphSharepointIds
func (t *MicrosoftGraphDrive_SharePointIds) MergeMicrosoftGraphSharepointIds(v MicrosoftGraphSharepointIds) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsMicrosoftGraphDriveSharePointIds1 returns the union data inside the MicrosoftGraphDrive_SharePointIds as a MicrosoftGraphDriveSharePointIds1
func (t MicrosoftGraphDrive_SharePointIds) AsMicrosoftGraphDriveSharePointIds1() (MicrosoftGraphDriveSharePointIds1, error) {
	var body MicrosoftGraphDriveSharePointIds1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphDriveSharePointIds1 overwrites any union data inside the MicrosoftGraphDrive_SharePointIds as the provided MicrosoftGraphDriveSharePointIds1
func (t *MicrosoftGraphDrive_SharePointIds) FromMicrosoftGraphDriveSharePointIds1(v MicrosoftGraphDriveSharePointIds1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphDriveSharePointIds1 performs a merge with any union data inside the MicrosoftGraphDrive_SharePointIds, using the provided MicrosoftGraphDriveSharePointIds1
func (t *MicrosoftGraphDrive_SharePointIds) MergeMicrosoftGraphDriveSharePointIds1(v MicrosoftGraphDriveSharePointIds1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

func (t MicrosoftGraphDrive_SharePointIds) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *MicrosoftGraphDrive_SharePointIds) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsMicrosoftGraphSystemFacet returns the union data inside the MicrosoftGraphDrive_System as a MicrosoftGraphSystemFacet
func (t MicrosoftGraphDrive_System) AsMicrosoftGraphSystemFacet() (MicrosoftGraphSystemFacet, error) {
	var body MicrosoftGraphSystemFacet
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphSystemFacet overwrites any union data inside the MicrosoftGraphDrive_System as the provided MicrosoftGraphSystemFacet
func (t *MicrosoftGraphDrive_System) FromMicrosoftGraphSystemFacet(v MicrosoftGraphSystemFacet) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphSystemFacet performs a merge with any union data inside the MicrosoftGraphDrive_System, using the provided MicrosoftGraphSystemFacet
func (t *MicrosoftGraphDrive_System) MergeMicrosoftGraphSystemFacet(v MicrosoftGraphSystemFacet) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsMicrosoftGraphDriveSystem1 returns the union data inside the MicrosoftGraphDrive_System as a MicrosoftGraphDriveSystem1
func (t MicrosoftGraphDrive_System) AsMicrosoftGraphDriveSystem1() (MicrosoftGraphDriveSystem1, error) {
	var body MicrosoftGraphDriveSystem1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphDriveSystem1 overwrites any union data inside the MicrosoftGraphDrive_System as the provided MicrosoftGraphDriveSystem1
func (t *MicrosoftGraphDrive_System) FromMicrosoftGraphDriveSystem1(v MicrosoftGraphDriveSystem1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphDriveSystem1 performs a merge with any union data inside the MicrosoftGraphDrive_System, using the provided MicrosoftGraphDriveSystem1
func (t *MicrosoftGraphDrive_System) MergeMicrosoftGraphDriveSystem1(v MicrosoftGraphDriveSystem1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

func (t MicrosoftGraphDrive_System) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *MicrosoftGraphDrive_System) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsMicrosoftGraphItemAnalytics returns the union data inside the MicrosoftGraphDriveItem_Analytics as a MicrosoftGraphItemAnalytics
func (t MicrosoftGraphDriveItem_Analytics) AsMicrosoftGraphItemAnalytics() (MicrosoftGraphItemAnalytics, error) {
	var body MicrosoftGraphItemAnalytics
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphItemAnalytics overwrites any union data inside the MicrosoftGraphDriveItem_Analytics as the provided MicrosoftGraphItemAnalytics
func (t *MicrosoftGraphDriveItem_Analytics) FromMicrosoftGraphItemAnalytics(v MicrosoftGraphItemAnalytics) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphItemAnalytics performs a merge with any union data inside the MicrosoftGraphDriveItem_Analytics, using the provided MicrosoftGraphItemAnalytics
func (t *MicrosoftGraphDriveItem_Analytics) MergeMicrosoftGraphItemAnalytics(v MicrosoftGraphItemAnalytics) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsMicrosoftGraphDriveItemAnalytics1 returns the union data inside the MicrosoftGraphDriveItem_Analytics as a MicrosoftGraphDriveItemAnalytics1
func (t MicrosoftGraphDriveItem_Analytics) AsMicrosoftGraphDriveItemAnalytics1() (MicrosoftGraphDriveItemAnalytics1, error) {
	var body MicrosoftGraphDriveItemAnalytics1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphDriveItemAnalytics1 overwrites any union data inside the MicrosoftGraphDriveItem_Analytics as the provided MicrosoftGraphDriveItemAnalytics1
func (t *MicrosoftGraphDriveItem_Analytics) FromMicrosoftGraphDriveItemAnalytics1(v MicrosoftGraphDriveItemAnalytics1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphDriveItemAnalytics1 performs a merge with any union data inside the MicrosoftGraphDriveItem_Analytics, using the provided MicrosoftGraphDriveItemAnalytics1
func (t *MicrosoftGraphDriveItem_Analytics) MergeMicrosoftGraphDriveItemAnalytics1(v MicrosoftGraphDriveItemAnalytics1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

func (t MicrosoftGraphDriveItem_Analytics) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *MicrosoftGraphDriveItem_Analytics) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsMicrosoftGraphAudio returns the union data inside the MicrosoftGraphDriveItem_Audio as a MicrosoftGraphAudio
func (t MicrosoftGraphDriveItem_Audio) AsMicrosoftGraphAudio() (MicrosoftGraphAudio, error) {
	var body MicrosoftGraphAudio
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphAudio overwrites any union data inside the MicrosoftGraphDriveItem_Audio as the provided MicrosoftGraphAudio
func (t *MicrosoftGraphDriveItem_Audio) FromMicrosoftGraphAudio(v MicrosoftGraphAudio) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphAudio performs a merge with any union data inside the MicrosoftGraphDriveItem_Audio, using the provided MicrosoftGraphAudio
func (t *MicrosoftGraphDriveItem_Audio) MergeMicrosoftGraphAudio(v MicrosoftGraphAudio) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsMicrosoftGraphDriveItemAudio1 returns the union data inside the MicrosoftGraphDriveItem_Audio as a MicrosoftGraphDriveItemAudio1
func (t MicrosoftGraphDriveItem_Audio) AsMicrosoftGraphDriveItemAudio1() (MicrosoftGraphDriveItemAudio1, error) {
	var body MicrosoftGraphDriveItemAudio1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphDriveItemAudio1 overwrites any union data inside the MicrosoftGraphDriveItem_Audio as the provided MicrosoftGraphDriveItemAudio1
func (t *MicrosoftGraphDriveItem_Audio) FromMicrosoftGraphDriveItemAudio1(v MicrosoftGraphDriveItemAudio1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphDriveItemAudio1 performs a merge with any union data inside the MicrosoftGraphDriveItem_Audio, using the provided MicrosoftGraphDriveItemAudio1
func (t *MicrosoftGraphDriveItem_Audio) MergeMicrosoftGraphDriveItemAudio1(v MicrosoftGraphDriveItemAudio1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

func (t MicrosoftGraphDriveItem_Audio) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *MicrosoftGraphDriveItem_Audio) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsMicrosoftGraphBundle returns the union data inside the MicrosoftGraphDriveItem_Bundle as a MicrosoftGraphBundle
func (t MicrosoftGraphDriveItem_Bundle) AsMicrosoftGraphBundle() (MicrosoftGraphBundle, error) {
	var body MicrosoftGraphBundle
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphBundle overwrites any union data inside the MicrosoftGraphDriveItem_Bundle as the provided MicrosoftGraphBundle
func (t *MicrosoftGraphDriveItem_Bundle) FromMicrosoftGraphBundle(v MicrosoftGraphBundle) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphBundle performs a merge with any union data inside the MicrosoftGraphDriveItem_Bundle, using the provided MicrosoftGraphBundle
func (t *MicrosoftGraphDriveItem_Bundle) MergeMicrosoftGraphBundle(v MicrosoftGraphBundle) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsMicrosoftGraphDriveItemBundle1 returns the union data inside the MicrosoftGraphDriveItem_Bundle as a MicrosoftGraphDriveItemBundle1
func (t MicrosoftGraphDriveItem_Bundle) AsMicrosoftGraphDriveItemBundle1() (MicrosoftGraphDriveItemBundle1, error) {
	var body MicrosoftGraphDriveItemBundle1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphDriveItemBundle1 overwrites any union data inside the MicrosoftGraphDriveItem_Bundle as the provided MicrosoftGraphDriveItemBundle1
func (t *MicrosoftGraphDriveItem_Bundle) FromMicrosoftGraphDriveItemBundle1(v MicrosoftGraphDriveItemBundle1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphDriveItemBundle1 performs a merge with any union data inside the MicrosoftGraphDriveItem_Bundle, using the provided MicrosoftGraphDriveItemBundle1
func (t *MicrosoftGraphDriveItem_Bundle) MergeMicrosoftGraphDriveItemBundle1(v MicrosoftGraphDriveItemBundle1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

func (t MicrosoftGraphDriveItem_Bundle) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *MicrosoftGraphDriveItem_Bundle) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsMicrosoftGraphIdentitySet returns the union data inside the MicrosoftGraphDriveItem_CreatedBy as a MicrosoftGraphIdentitySet
func (t MicrosoftGraphDriveItem_CreatedBy) AsMicrosoftGraphIdentitySet() (MicrosoftGraphIdentitySet, error) {
	var body MicrosoftGraphIdentitySet
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphIdentitySet overwrites any union data inside the MicrosoftGraphDriveItem_CreatedBy as the provided MicrosoftGraphIdentitySet
func (t *MicrosoftGraphDriveItem_CreatedBy) FromMicrosoftGraphIdentitySet(v MicrosoftGraphIdentitySet) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphIdentitySet performs a merge with any union data inside the MicrosoftGraphDriveItem_CreatedBy, using the provided MicrosoftGraphIdentitySet
func (t *MicrosoftGraphDriveItem_CreatedBy) MergeMicrosoftGraphIdentitySet(v MicrosoftGraphIdentitySet) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsMicrosoftGraphDriveItemCreatedBy1 returns the union data inside the MicrosoftGraphDriveItem_CreatedBy as a MicrosoftGraphDriveItemCreatedBy1
func (t MicrosoftGraphDriveItem_CreatedBy) AsMicrosoftGraphDriveItemCreatedBy1() (MicrosoftGraphDriveItemCreatedBy1, error) {
	var body MicrosoftGraphDriveItemCreatedBy1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphDriveItemCreatedBy1 overwrites any union data inside the MicrosoftGraphDriveItem_CreatedBy as the provided MicrosoftGraphDriveItemCreatedBy1
func (t *MicrosoftGraphDriveItem_CreatedBy) FromMicrosoftGraphDriveItemCreatedBy1(v MicrosoftGraphDriveItemCreatedBy1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphDriveItemCreatedBy1 performs a merge with any union data inside the MicrosoftGraphDriveItem_CreatedBy, using the provided MicrosoftGraphDriveItemCreatedBy1
func (t *MicrosoftGraphDriveItem_CreatedBy) MergeMicrosoftGraphDriveItemCreatedBy1(v MicrosoftGraphDriveItemCreatedBy1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

func (t MicrosoftGraphDriveItem_CreatedBy) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *MicrosoftGraphDriveItem_CreatedBy) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsMicrosoftGraphUser returns the union data inside the MicrosoftGraphDriveItem_CreatedByUser as a MicrosoftGraphUser
func (t MicrosoftGraphDriveItem_CreatedByUser) AsMicrosoftGraphUser() (MicrosoftGraphUser, error) {
	var body MicrosoftGraphUser
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphUser overwrites any union data inside the MicrosoftGraphDriveItem_CreatedByUser as the provided MicrosoftGraphUser
func (t *MicrosoftGraphDriveItem_CreatedByUser) FromMicrosoftGraphUser(v MicrosoftGraphUser) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphUser performs a merge with any union data inside the MicrosoftGraphDriveItem_CreatedByUser, using the provided MicrosoftGraphUser
func (t *MicrosoftGraphDriveItem_CreatedByUser) MergeMicrosoftGraphUser(v MicrosoftGraphUser) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsMicrosoftGraphDriveItemCreatedByUser1 returns the union data inside the MicrosoftGraphDriveItem_CreatedByUser as a MicrosoftGraphDriveItemCreatedByUser1
func (t MicrosoftGraphDriveItem_CreatedByUser) AsMicrosoftGraphDriveItemCreatedByUser1() (MicrosoftGraphDriveItemCreatedByUser1, error) {
	var body MicrosoftGraphDriveItemCreatedByUser1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphDriveItemCreatedByUser1 overwrites any union data inside the MicrosoftGraphDriveItem_CreatedByUser as the provided MicrosoftGraphDriveItemCreatedByUser1
func (t *MicrosoftGraphDriveItem_CreatedByUser) FromMicrosoftGraphDriveItemCreatedByUser1(v MicrosoftGraphDriveItemCreatedByUser1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphDriveItemCreatedByUser1 performs a merge with any union data inside the MicrosoftGraphDriveItem_CreatedByUser, using the provided MicrosoftGraphDriveItemCreatedByUser1
func (t *MicrosoftGraphDriveItem_CreatedByUser) MergeMicrosoftGraphDriveItemCreatedByUser1(v MicrosoftGraphDriveItemCreatedByUser1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

func (t MicrosoftGraphDriveItem_CreatedByUser) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *MicrosoftGraphDriveItem_CreatedByUser) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsMicrosoftGraphDeleted returns the union data inside the MicrosoftGraphDriveItem_Deleted as a MicrosoftGraphDeleted
func (t MicrosoftGraphDriveItem_Deleted) AsMicrosoftGraphDeleted() (MicrosoftGraphDeleted, error) {
	var body MicrosoftGraphDeleted
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphDeleted overwrites any union data inside the MicrosoftGraphDriveItem_Deleted as the provided MicrosoftGraphDeleted
func (t *MicrosoftGraphDriveItem_Deleted) FromMicrosoftGraphDeleted(v MicrosoftGraphDeleted) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphDeleted performs a merge with any union data inside the MicrosoftGraphDriveItem_Deleted, using the provided MicrosoftGraphDeleted
func (t *MicrosoftGraphDriveItem_Deleted) MergeMicrosoftGraphDeleted(v MicrosoftGraphDeleted) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsMicrosoftGraphDriveItemDeleted1 returns the union data inside the MicrosoftGraphDriveItem_Deleted as a MicrosoftGraphDriveItemDeleted1
func (t MicrosoftGraphDriveItem_Deleted) AsMicrosoftGraphDriveItemDeleted1() (MicrosoftGraphDriveItemDeleted1, error) {
	var body MicrosoftGraphDriveItemDeleted1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphDriveItemDeleted1 overwrites any union data inside the MicrosoftGraphDriveItem_Deleted as the provided MicrosoftGraphDriveItemDeleted1
func (t *MicrosoftGraphDriveItem_Deleted) FromMicrosoftGraphDriveItemDeleted1(v MicrosoftGraphDriveItemDeleted1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphDriveItemDeleted1 performs a merge with any union data inside the MicrosoftGraphDriveItem_Deleted, using the provided MicrosoftGraphDriveItemDeleted1
func (t *MicrosoftGraphDriveItem_Deleted) MergeMicrosoftGraphDriveItemDeleted1(v MicrosoftGraphDriveItemDeleted1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

func (t MicrosoftGraphDriveItem_Deleted) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *MicrosoftGraphDriveItem_Deleted) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsMicrosoftGraphFile returns the union data inside the MicrosoftGraphDriveItem_File as a MicrosoftGraphFile
func (t MicrosoftGraphDriveItem_File) AsMicrosoftGraphFile() (MicrosoftGraphFile, error) {
	var body MicrosoftGraphFile
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphFile overwrites any union data inside the MicrosoftGraphDriveItem_File as the provided MicrosoftGraphFile
func (t *MicrosoftGraphDriveItem_File) FromMicrosoftGraphFile(v MicrosoftGraphFile) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphFile performs a merge with any union data inside the MicrosoftGraphDriveItem_File, using the provided MicrosoftGraphFile
func (t *MicrosoftGraphDriveItem_File) MergeMicrosoftGraphFile(v MicrosoftGraphFile) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsMicrosoftGraphDriveItemFile1 returns the union data inside the MicrosoftGraphDriveItem_File as a MicrosoftGraphDriveItemFile1
func (t MicrosoftGraphDriveItem_File) AsMicrosoftGraphDriveItemFile1() (MicrosoftGraphDriveItemFile1, error) {
	var body MicrosoftGraphDriveItemFile1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphDriveItemFile1 overwrites any union data inside the MicrosoftGraphDriveItem_File as the provided MicrosoftGraphDriveItemFile1
func (t *MicrosoftGraphDriveItem_File) FromMicrosoftGraphDriveItemFile1(v MicrosoftGraphDriveItemFile1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphDriveItemFile1 performs a merge with any union data inside the MicrosoftGraphDriveItem_File, using the provided MicrosoftGraphDriveItemFile1
func (t *MicrosoftGraphDriveItem_File) MergeMicrosoftGraphDriveItemFile1(v MicrosoftGraphDriveItemFile1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

func (t MicrosoftGraphDriveItem_File) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *MicrosoftGraphDriveItem_File) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsMicrosoftGraphFileSystemInfo returns the union data inside the MicrosoftGraphDriveItem_FileSystemInfo as a MicrosoftGraphFileSystemInfo
func (t MicrosoftGraphDriveItem_FileSystemInfo) AsMicrosoftGraphFileSystemInfo() (MicrosoftGraphFileSystemInfo, error) {
	var body MicrosoftGraphFileSystemInfo
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphFileSystemInfo overwrites any union data inside the MicrosoftGraphDriveItem_FileSystemInfo as the provided MicrosoftGraphFileSystemInfo
func (t *MicrosoftGraphDriveItem_FileSystemInfo) FromMicrosoftGraphFileSystemInfo(v MicrosoftGraphFileSystemInfo) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphFileSystemInfo performs a merge with any union data inside the MicrosoftGraphDriveItem_FileSystemInfo, using the provided MicrosoftGraphFileSystemInfo
func (t *MicrosoftGraphDriveItem_FileSystemInfo) MergeMicrosoftGraphFileSystemInfo(v MicrosoftGraphFileSystemInfo) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsMicrosoftGraphDriveItemFileSystemInfo1 returns the union data inside the MicrosoftGraphDriveItem_FileSystemInfo as a MicrosoftGraphDriveItemFileSystemInfo1
func (t MicrosoftGraphDriveItem_FileSystemInfo) AsMicrosoftGraphDriveItemFileSystemInfo1() (MicrosoftGraphDriveItemFileSystemInfo1, error) {
	var body MicrosoftGraphDriveItemFileSystemInfo1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphDriveItemFileSystemInfo1 overwrites any union data inside the MicrosoftGraphDriveItem_FileSystemInfo as the provided MicrosoftGraphDriveItemFileSystemInfo1
func (t *MicrosoftGraphDriveItem_FileSystemInfo) FromMicrosoftGraphDriveItemFileSystemInfo1(v MicrosoftGraphDriveItemFileSystemInfo1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphDriveItemFileSystemInfo1 performs a merge with any union data inside the MicrosoftGraphDriveItem_FileSystemInfo, using the provided MicrosoftGraphDriveItemFileSystemInfo1
func (t *MicrosoftGraphDriveItem_FileSystemInfo) MergeMicrosoftGraphDriveItemFileSystemInfo1(v MicrosoftGraphDriveItemFileSystemInfo1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

func (t MicrosoftGraphDriveItem_FileSystemInfo) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *MicrosoftGraphDriveItem_FileSystemInfo) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsMicrosoftGraphFolder returns the union data inside the MicrosoftGraphDriveItem_Folder as a MicrosoftGraphFolder
func (t MicrosoftGraphDriveItem_Folder) AsMicrosoftGraphFolder() (MicrosoftGraphFolder, error) {
	var body MicrosoftGraphFolder
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphFolder overwrites any union data inside the MicrosoftGraphDriveItem_Folder as the provided MicrosoftGraphFolder
func (t *MicrosoftGraphDriveItem_Folder) FromMicrosoftGraphFolder(v MicrosoftGraphFolder) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphFolder performs a merge with any union data inside the MicrosoftGraphDriveItem_Folder, using the provided MicrosoftGraphFolder
func (t *MicrosoftGraphDriveItem_Folder) MergeMicrosoftGraphFolder(v MicrosoftGraphFolder) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsMicrosoftGraphDriveItemFolder1 returns the union data inside the MicrosoftGraphDriveItem_Folder as a MicrosoftGraphDriveItemFolder1
func (t MicrosoftGraphDriveItem_Folder) AsMicrosoftGraphDriveItemFolder1() (MicrosoftGraphDriveItemFolder1, error) {
	var body MicrosoftGraphDriveItemFolder1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphDriveItemFolder1 overwrites any union data inside the MicrosoftGraphDriveItem_Folder as the provided MicrosoftGraphDriveItemFolder1
func (t *MicrosoftGraphDriveItem_Folder) FromMicrosoftGraphDriveItemFolder1(v MicrosoftGraphDriveItemFolder1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphDriveItemFolder1 performs a merge with any union data inside the MicrosoftGraphDriveItem_Folder, using the provided MicrosoftGraphDriveItemFolder1
func (t *MicrosoftGraphDriveItem_Folder) MergeMicrosoftGraphDriveItemFolder1(v MicrosoftGraphDriveItemFolder1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

func (t MicrosoftGraphDriveItem_Folder) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *MicrosoftGraphDriveItem_Folder) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsMicrosoftGraphImage returns the union data inside the MicrosoftGraphDriveItem_Image as a MicrosoftGraphImage
func (t MicrosoftGraphDriveItem_Image) AsMicrosoftGraphImage() (MicrosoftGraphImage, error) {
	var body MicrosoftGraphImage
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphImage overwrites any union data inside the MicrosoftGraphDriveItem_Image as the provided MicrosoftGraphImage
func (t *MicrosoftGraphDriveItem_Image) FromMicrosoftGraphImage(v MicrosoftGraphImage) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphImage performs a merge with any union data inside the MicrosoftGraphDriveItem_Image, using the provided MicrosoftGraphImage
func (t *MicrosoftGraphDriveItem_Image) MergeMicrosoftGraphImage(v MicrosoftGraphImage) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsMicrosoftGraphDriveItemImage1 returns the union data inside the MicrosoftGraphDriveItem_Image as a MicrosoftGraphDriveItemImage1
func (t MicrosoftGraphDriveItem_Image) AsMicrosoftGraphDriveItemImage1() (MicrosoftGraphDriveItemImage1, error) {
	var body MicrosoftGraphDriveItemImage1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphDriveItemImage1 overwrites any union data inside the MicrosoftGraphDriveItem_Image as the provided MicrosoftGraphDriveItemImage1
func (t *MicrosoftGraphDriveItem_Image) FromMicrosoftGraphDriveItemImage1(v MicrosoftGraphDriveItemImage1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphDriveItemImage1 performs a merge with any union data inside the MicrosoftGraphDriveItem_Image, using the provided MicrosoftGraphDriveItemImage1
func (t *MicrosoftGraphDriveItem_Image) MergeMicrosoftGraphDriveItemImage1(v MicrosoftGraphDriveItemImage1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

func (t MicrosoftGraphDriveItem_Image) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *MicrosoftGraphDriveItem_Image) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsMicrosoftGraphIdentitySet returns the union data inside the MicrosoftGraphDriveItem_LastModifiedBy as a MicrosoftGraphIdentitySet
func (t MicrosoftGraphDriveItem_LastModifiedBy) AsMicrosoftGraphIdentitySet() (MicrosoftGraphIdentitySet, error) {
	var body MicrosoftGraphIdentitySet
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphIdentitySet overwrites any union data inside the MicrosoftGraphDriveItem_LastModifiedBy as the provided MicrosoftGraphIdentitySet
func (t *MicrosoftGraphDriveItem_LastModifiedBy) FromMicrosoftGraphIdentitySet(v MicrosoftGraphIdentitySet) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphIdentitySet performs a merge with any union data inside the MicrosoftGraphDriveItem_LastModifiedBy, using the provided MicrosoftGraphIdentitySet
func (t *MicrosoftGraphDriveItem_LastModifiedBy) MergeMicrosoftGraphIdentitySet(v MicrosoftGraphIdentitySet) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsMicrosoftGraphDriveItemLastModifiedBy1 returns the union data inside the MicrosoftGraphDriveItem_LastModifiedBy as a MicrosoftGraphDriveItemLastModifiedBy1
func (t MicrosoftGraphDriveItem_LastModifiedBy) AsMicrosoftGraphDriveItemLastModifiedBy1() (MicrosoftGraphDriveItemLastModifiedBy1, error) {
	var body MicrosoftGraphDriveItemLastModifiedBy1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphDriveItemLastModifiedBy1 overwrites any union data inside the MicrosoftGraphDriveItem_LastModifiedBy as the provided MicrosoftGraphDriveItemLastModifiedBy1
func (t *MicrosoftGraphDriveItem_LastModifiedBy) FromMicrosoftGraphDriveItemLastModifiedBy1(v MicrosoftGraphDriveItemLastModifiedBy1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphDriveItemLastModifiedBy1 performs a merge with any union data inside the MicrosoftGraphDriveItem_LastModifiedBy, using the provided MicrosoftGraphDriveItemLastModifiedBy1
func (t *MicrosoftGraphDriveItem_LastModifiedBy) MergeMicrosoftGraphDriveItemLastModifiedBy1(v MicrosoftGraphDriveItemLastModifiedBy1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

func (t MicrosoftGraphDriveItem_LastModifiedBy) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *MicrosoftGraphDriveItem_LastModifiedBy) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsMicrosoftGraphUser returns the union data inside the MicrosoftGraphDriveItem_LastModifiedByUser as a MicrosoftGraphUser
func (t MicrosoftGraphDriveItem_LastModifiedByUser) AsMicrosoftGraphUser() (MicrosoftGraphUser, error) {
	var body MicrosoftGraphUser
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphUser overwrites any union data inside the MicrosoftGraphDriveItem_LastModifiedByUser as the provided MicrosoftGraphUser
func (t *MicrosoftGraphDriveItem_LastModifiedByUser) FromMicrosoftGraphUser(v MicrosoftGraphUser) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphUser performs a merge with any union data inside the MicrosoftGraphDriveItem_LastModifiedByUser, using the provided MicrosoftGraphUser
func (t *MicrosoftGraphDriveItem_LastModifiedByUser) MergeMicrosoftGraphUser(v MicrosoftGraphUser) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsMicrosoftGraphDriveItemLastModifiedByUser1 returns the union data inside the MicrosoftGraphDriveItem_LastModifiedByUser as a MicrosoftGraphDriveItemLastModifiedByUser1
func (t MicrosoftGraphDriveItem_LastModifiedByUser) AsMicrosoftGraphDriveItemLastModifiedByUser1() (MicrosoftGraphDriveItemLastModifiedByUser1, error) {
	var body MicrosoftGraphDriveItemLastModifiedByUser1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphDriveItemLastModifiedByUser1 overwrites any union data inside the MicrosoftGraphDriveItem_LastModifiedByUser as the provided MicrosoftGraphDriveItemLastModifiedByUser1
func (t *MicrosoftGraphDriveItem_LastModifiedByUser) FromMicrosoftGraphDriveItemLastModifiedByUser1(v MicrosoftGraphDriveItemLastModifiedByUser1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphDriveItemLastModifiedByUser1 performs a merge with any union data inside the MicrosoftGraphDriveItem_LastModifiedByUser, using the provided MicrosoftGraphDriveItemLastModifiedByUser1
func (t *MicrosoftGraphDriveItem_LastModifiedByUser) MergeMicrosoftGraphDriveItemLastModifiedByUser1(v MicrosoftGraphDriveItemLastModifiedByUser1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

func (t MicrosoftGraphDriveItem_LastModifiedByUser) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *MicrosoftGraphDriveItem_LastModifiedByUser) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsMicrosoftGraphListItem returns the union data inside the MicrosoftGraphDriveItem_ListItem as a MicrosoftGraphListItem
func (t MicrosoftGraphDriveItem_ListItem) AsMicrosoftGraphListItem() (MicrosoftGraphListItem, error) {
	var body MicrosoftGraphListItem
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphListItem overwrites any union data inside the MicrosoftGraphDriveItem_ListItem as the provided MicrosoftGraphListItem
func (t *MicrosoftGraphDriveItem_ListItem) FromMicrosoftGraphListItem(v MicrosoftGraphListItem) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphListItem performs a merge with any union data inside the MicrosoftGraphDriveItem_ListItem, using the provided MicrosoftGraphListItem
func (t *MicrosoftGraphDriveItem_ListItem) MergeMicrosoftGraphListItem(v MicrosoftGraphListItem) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsMicrosoftGraphDriveItemListItem1 returns the union data inside the MicrosoftGraphDriveItem_ListItem as a MicrosoftGraphDriveItemListItem1
func (t MicrosoftGraphDriveItem_ListItem) AsMicrosoftGraphDriveItemListItem1() (MicrosoftGraphDriveItemListItem1, error) {
	var body MicrosoftGraphDriveItemListItem1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphDriveItemListItem1 overwrites any union data inside the MicrosoftGraphDriveItem_ListItem as the provided MicrosoftGraphDriveItemListItem1
func (t *MicrosoftGraphDriveItem_ListItem) FromMicrosoftGraphDriveItemListItem1(v MicrosoftGraphDriveItemListItem1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphDriveItemListItem1 performs a merge with any union data inside the MicrosoftGraphDriveItem_ListItem, using the provided MicrosoftGraphDriveItemListItem1
func (t *MicrosoftGraphDriveItem_ListItem) MergeMicrosoftGraphDriveItemListItem1(v MicrosoftGraphDriveItemListItem1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

func (t MicrosoftGraphDriveItem_ListItem) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *MicrosoftGraphDriveItem_ListItem) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsMicrosoftGraphGeoCoordinates returns the union data inside the MicrosoftGraphDriveItem_Location as a MicrosoftGraphGeoCoordinates
func (t MicrosoftGraphDriveItem_Location) AsMicrosoftGraphGeoCoordinates() (MicrosoftGraphGeoCoordinates, error) {
	var body MicrosoftGraphGeoCoordinates
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphGeoCoordinates overwrites any union data inside the MicrosoftGraphDriveItem_Location as the provided MicrosoftGraphGeoCoordinates
func (t *MicrosoftGraphDriveItem_Location) FromMicrosoftGraphGeoCoordinates(v MicrosoftGraphGeoCoordinates) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphGeoCoordinates performs a merge with any union data inside the MicrosoftGraphDriveItem_Location, using the provided MicrosoftGraphGeoCoordinates
func (t *MicrosoftGraphDriveItem_Location) MergeMicrosoftGraphGeoCoordinates(v MicrosoftGraphGeoCoordinates) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsMicrosoftGraphDriveItemLocation1 returns the union data inside the MicrosoftGraphDriveItem_Location as a MicrosoftGraphDriveItemLocation1
func (t MicrosoftGraphDriveItem_Location) AsMicrosoftGraphDriveItemLocation1() (MicrosoftGraphDriveItemLocation1, error) {
	var body MicrosoftGraphDriveItemLocation1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphDriveItemLocation1 overwrites any union data inside the MicrosoftGraphDriveItem_Location as the provided MicrosoftGraphDriveItemLocation1
func (t *MicrosoftGraphDriveItem_Location) FromMicrosoftGraphDriveItemLocation1(v MicrosoftGraphDriveItemLocation1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphDriveItemLocation1 performs a merge with any union data inside the MicrosoftGraphDriveItem_Location, using the provided MicrosoftGraphDriveItemLocation1
func (t *MicrosoftGraphDriveItem_Location) MergeMicrosoftGraphDriveItemLocation1(v MicrosoftGraphDriveItemLocation1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

func (t MicrosoftGraphDriveItem_Location) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *MicrosoftGraphDriveItem_Location) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsMicrosoftGraphMalware returns the union data inside the MicrosoftGraphDriveItem_Malware as a MicrosoftGraphMalware
func (t MicrosoftGraphDriveItem_Malware) AsMicrosoftGraphMalware() (MicrosoftGraphMalware, error) {
	var body MicrosoftGraphMalware
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphMalware overwrites any union data inside the MicrosoftGraphDriveItem_Malware as the provided MicrosoftGraphMalware
func (t *MicrosoftGraphDriveItem_Malware) FromMicrosoftGraphMalware(v MicrosoftGraphMalware) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphMalware performs a merge with any union data inside the MicrosoftGraphDriveItem_Malware, using the provided MicrosoftGraphMalware
func (t *MicrosoftGraphDriveItem_Malware) MergeMicrosoftGraphMalware(v MicrosoftGraphMalware) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsMicrosoftGraphDriveItemMalware1 returns the union data inside the MicrosoftGraphDriveItem_Malware as a MicrosoftGraphDriveItemMalware1
func (t MicrosoftGraphDriveItem_Malware) AsMicrosoftGraphDriveItemMalware1() (MicrosoftGraphDriveItemMalware1, error) {
	var body MicrosoftGraphDriveItemMalware1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphDriveItemMalware1 overwrites any union data inside the MicrosoftGraphDriveItem_Malware as the provided MicrosoftGraphDriveItemMalware1
func (t *MicrosoftGraphDriveItem_Malware) FromMicrosoftGraphDriveItemMalware1(v MicrosoftGraphDriveItemMalware1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphDriveItemMalware1 performs a merge with any union data inside the MicrosoftGraphDriveItem_Malware, using the provided MicrosoftGraphDriveItemMalware1
func (t *MicrosoftGraphDriveItem_Malware) MergeMicrosoftGraphDriveItemMalware1(v MicrosoftGraphDriveItemMalware1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

func (t MicrosoftGraphDriveItem_Malware) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *MicrosoftGraphDriveItem_Malware) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsMicrosoftGraphPackage returns the union data inside the MicrosoftGraphDriveItem_Package as a MicrosoftGraphPackage
func (t MicrosoftGraphDriveItem_Package) AsMicrosoftGraphPackage() (MicrosoftGraphPackage, error) {
	var body MicrosoftGraphPackage
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphPackage overwrites any union data inside the MicrosoftGraphDriveItem_Package as the provided MicrosoftGraphPackage
func (t *MicrosoftGraphDriveItem_Package) FromMicrosoftGraphPackage(v MicrosoftGraphPackage) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphPackage performs a merge with any union data inside the MicrosoftGraphDriveItem_Package, using the provided MicrosoftGraphPackage
func (t *MicrosoftGraphDriveItem_Package) MergeMicrosoftGraphPackage(v MicrosoftGraphPackage) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsMicrosoftGraphDriveItemPackage1 returns the union data inside the MicrosoftGraphDriveItem_Package as a MicrosoftGraphDriveItemPackage1
func (t MicrosoftGraphDriveItem_Package) AsMicrosoftGraphDriveItemPackage1() (MicrosoftGraphDriveItemPackage1, error) {
	var body MicrosoftGraphDriveItemPackage1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphDriveItemPackage1 overwrites any union data inside the MicrosoftGraphDriveItem_Package as the provided MicrosoftGraphDriveItemPackage1
func (t *MicrosoftGraphDriveItem_Package) FromMicrosoftGraphDriveItemPackage1(v MicrosoftGraphDriveItemPackage1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphDriveItemPackage1 performs a merge with any union data inside the MicrosoftGraphDriveItem_Package, using the provided MicrosoftGraphDriveItemPackage1
func (t *MicrosoftGraphDriveItem_Package) MergeMicrosoftGraphDriveItemPackage1(v MicrosoftGraphDriveItemPackage1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

func (t MicrosoftGraphDriveItem_Package) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *MicrosoftGraphDriveItem_Package) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsMicrosoftGraphItemReference returns the union data inside the MicrosoftGraphDriveItem_ParentReference as a MicrosoftGraphItemReference
func (t MicrosoftGraphDriveItem_ParentReference) AsMicrosoftGraphItemReference() (MicrosoftGraphItemReference, error) {
	var body MicrosoftGraphItemReference
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphItemReference overwrites any union data inside the MicrosoftGraphDriveItem_ParentReference as the provided MicrosoftGraphItemReference
func (t *MicrosoftGraphDriveItem_ParentReference) FromMicrosoftGraphItemReference(v MicrosoftGraphItemReference) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphItemReference performs a merge with any union data inside the MicrosoftGraphDriveItem_ParentReference, using the provided MicrosoftGraphItemReference
func (t *MicrosoftGraphDriveItem_ParentReference) MergeMicrosoftGraphItemReference(v MicrosoftGraphItemReference) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsMicrosoftGraphDriveItemParentReference1 returns the union data inside the MicrosoftGraphDriveItem_ParentReference as a MicrosoftGraphDriveItemParentReference1
func (t MicrosoftGraphDriveItem_ParentReference) AsMicrosoftGraphDriveItemParentReference1() (MicrosoftGraphDriveItemParentReference1, error) {
	var body MicrosoftGraphDriveItemParentReference1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphDriveItemParentReference1 overwrites any union data inside the MicrosoftGraphDriveItem_ParentReference as the provided MicrosoftGraphDriveItemParentReference1
func (t *MicrosoftGraphDriveItem_ParentReference) FromMicrosoftGraphDriveItemParentReference1(v MicrosoftGraphDriveItemParentReference1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphDriveItemParentReference1 performs a merge with any union data inside the MicrosoftGraphDriveItem_ParentReference, using the provided MicrosoftGraphDriveItemParentReference1
func (t *MicrosoftGraphDriveItem_ParentReference) MergeMicrosoftGraphDriveItemParentReference1(v MicrosoftGraphDriveItemParentReference1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

func (t MicrosoftGraphDriveItem_ParentReference) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *MicrosoftGraphDriveItem_ParentReference) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsMicrosoftGraphPendingOperations returns the union data inside the MicrosoftGraphDriveItem_PendingOperations as a MicrosoftGraphPendingOperations
func (t MicrosoftGraphDriveItem_PendingOperations) AsMicrosoftGraphPendingOperations() (MicrosoftGraphPendingOperations, error) {
	var body MicrosoftGraphPendingOperations
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphPendingOperations overwrites any union data inside the MicrosoftGraphDriveItem_PendingOperations as the provided MicrosoftGraphPendingOperations
func (t *MicrosoftGraphDriveItem_PendingOperations) FromMicrosoftGraphPendingOperations(v MicrosoftGraphPendingOperations) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphPendingOperations performs a merge with any union data inside the MicrosoftGraphDriveItem_PendingOperations, using the provided MicrosoftGraphPendingOperations
func (t *MicrosoftGraphDriveItem_PendingOperations) MergeMicrosoftGraphPendingOperations(v MicrosoftGraphPendingOperations) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsMicrosoftGraphDriveItemPendingOperations1 returns the union data inside the MicrosoftGraphDriveItem_PendingOperations as a MicrosoftGraphDriveItemPendingOperations1
func (t MicrosoftGraphDriveItem_PendingOperations) AsMicrosoftGraphDriveItemPendingOperations1() (MicrosoftGraphDriveItemPendingOperations1, error) {
	var body MicrosoftGraphDriveItemPendingOperations1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphDriveItemPendingOperations1 overwrites any union data inside the MicrosoftGraphDriveItem_PendingOperations as the provided MicrosoftGraphDriveItemPendingOperations1
func (t *MicrosoftGraphDriveItem_PendingOperations) FromMicrosoftGraphDriveItemPendingOperations1(v MicrosoftGraphDriveItemPendingOperations1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphDriveItemPendingOperations1 performs a merge with any union data inside the MicrosoftGraphDriveItem_PendingOperations, using the provided MicrosoftGraphDriveItemPendingOperations1
func (t *MicrosoftGraphDriveItem_PendingOperations) MergeMicrosoftGraphDriveItemPendingOperations1(v MicrosoftGraphDriveItemPendingOperations1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

func (t MicrosoftGraphDriveItem_PendingOperations) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *MicrosoftGraphDriveItem_PendingOperations) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsMicrosoftGraphPhoto returns the union data inside the MicrosoftGraphDriveItem_Photo as a MicrosoftGraphPhoto
func (t MicrosoftGraphDriveItem_Photo) AsMicrosoftGraphPhoto() (MicrosoftGraphPhoto, error) {
	var body MicrosoftGraphPhoto
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphPhoto overwrites any union data inside the MicrosoftGraphDriveItem_Photo as the provided MicrosoftGraphPhoto
func (t *MicrosoftGraphDriveItem_Photo) FromMicrosoftGraphPhoto(v MicrosoftGraphPhoto) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphPhoto performs a merge with any union data inside the MicrosoftGraphDriveItem_Photo, using the provided MicrosoftGraphPhoto
func (t *MicrosoftGraphDriveItem_Photo) MergeMicrosoftGraphPhoto(v MicrosoftGraphPhoto) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsMicrosoftGraphDriveItemPhoto1 returns the union data inside the MicrosoftGraphDriveItem_Photo as a MicrosoftGraphDriveItemPhoto1
func (t MicrosoftGraphDriveItem_Photo) AsMicrosoftGraphDriveItemPhoto1() (MicrosoftGraphDriveItemPhoto1, error) {
	var body MicrosoftGraphDriveItemPhoto1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphDriveItemPhoto1 overwrites any union data inside the MicrosoftGraphDriveItem_Photo as the provided MicrosoftGraphDriveItemPhoto1
func (t *MicrosoftGraphDriveItem_Photo) FromMicrosoftGraphDriveItemPhoto1(v MicrosoftGraphDriveItemPhoto1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphDriveItemPhoto1 performs a merge with any union data inside the MicrosoftGraphDriveItem_Photo, using the provided MicrosoftGraphDriveItemPhoto1
func (t *MicrosoftGraphDriveItem_Photo) MergeMicrosoftGraphDriveItemPhoto1(v MicrosoftGraphDriveItemPhoto1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

func (t MicrosoftGraphDriveItem_Photo) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *MicrosoftGraphDriveItem_Photo) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsMicrosoftGraphPublicationFacet returns the union data inside the MicrosoftGraphDriveItem_Publication as a MicrosoftGraphPublicationFacet
func (t MicrosoftGraphDriveItem_Publication) AsMicrosoftGraphPublicationFacet() (MicrosoftGraphPublicationFacet, error) {
	var body MicrosoftGraphPublicationFacet
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphPublicationFacet overwrites any union data inside the MicrosoftGraphDriveItem_Publication as the provided MicrosoftGraphPublicationFacet
func (t *MicrosoftGraphDriveItem_Publication) FromMicrosoftGraphPublicationFacet(v MicrosoftGraphPublicationFacet) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphPublicationFacet performs a merge with any union data inside the MicrosoftGraphDriveItem_Publication, using the provided MicrosoftGraphPublicationFacet
func (t *MicrosoftGraphDriveItem_Publication) MergeMicrosoftGraphPublicationFacet(v MicrosoftGraphPublicationFacet) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsMicrosoftGraphDriveItemPublication1 returns the union data inside the MicrosoftGraphDriveItem_Publication as a MicrosoftGraphDriveItemPublication1
func (t MicrosoftGraphDriveItem_Publication) AsMicrosoftGraphDriveItemPublication1() (MicrosoftGraphDriveItemPublication1, error) {
	var body MicrosoftGraphDriveItemPublication1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphDriveItemPublication1 overwrites any union data inside the MicrosoftGraphDriveItem_Publication as the provided MicrosoftGraphDriveItemPublication1
func (t *MicrosoftGraphDriveItem_Publication) FromMicrosoftGraphDriveItemPublication1(v MicrosoftGraphDriveItemPublication1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphDriveItemPublication1 performs a merge with any union data inside the MicrosoftGraphDriveItem_Publication, using the provided MicrosoftGraphDriveItemPublication1
func (t *MicrosoftGraphDriveItem_Publication) MergeMicrosoftGraphDriveItemPublication1(v MicrosoftGraphDriveItemPublication1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

func (t MicrosoftGraphDriveItem_Publication) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *MicrosoftGraphDriveItem_Publication) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsMicrosoftGraphRemoteItem returns the union data inside the MicrosoftGraphDriveItem_RemoteItem as a MicrosoftGraphRemoteItem
func (t MicrosoftGraphDriveItem_RemoteItem) AsMicrosoftGraphRemoteItem() (MicrosoftGraphRemoteItem, error) {
	var body MicrosoftGraphRemoteItem
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphRemoteItem overwrites any union data inside the MicrosoftGraphDriveItem_RemoteItem as the provided MicrosoftGraphRemoteItem
func (t *MicrosoftGraphDriveItem_RemoteItem) FromMicrosoftGraphRemoteItem(v MicrosoftGraphRemoteItem) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphRemoteItem performs a merge with any union data inside the MicrosoftGraphDriveItem_RemoteItem, using the provided MicrosoftGraphRemoteItem
func (t *MicrosoftGraphDriveItem_RemoteItem) MergeMicrosoftGraphRemoteItem(v MicrosoftGraphRemoteItem) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsMicrosoftGraphDriveItemRemoteItem1 returns the union data inside the MicrosoftGraphDriveItem_RemoteItem as a MicrosoftGraphDriveItemRemoteItem1
func (t MicrosoftGraphDriveItem_RemoteItem) AsMicrosoftGraphDriveItemRemoteItem1() (MicrosoftGraphDriveItemRemoteItem1, error) {
	var body MicrosoftGraphDriveItemRemoteItem1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphDriveItemRemoteItem1 overwrites any union data inside the MicrosoftGraphDriveItem_RemoteItem as the provided MicrosoftGraphDriveItemRemoteItem1
func (t *MicrosoftGraphDriveItem_RemoteItem) FromMicrosoftGraphDriveItemRemoteItem1(v MicrosoftGraphDriveItemRemoteItem1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphDriveItemRemoteItem1 performs a merge with any union data inside the MicrosoftGraphDriveItem_RemoteItem, using the provided MicrosoftGraphDriveItemRemoteItem1
func (t *MicrosoftGraphDriveItem_RemoteItem) MergeMicrosoftGraphDriveItemRemoteItem1(v MicrosoftGraphDriveItemRemoteItem1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

func (t MicrosoftGraphDriveItem_RemoteItem) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *MicrosoftGraphDriveItem_RemoteItem) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsMicrosoftGraphRoot returns the union data inside the MicrosoftGraphDriveItem_Root as a MicrosoftGraphRoot
func (t MicrosoftGraphDriveItem_Root) AsMicrosoftGraphRoot() (MicrosoftGraphRoot, error) {
	var body MicrosoftGraphRoot
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphRoot overwrites any union data inside the MicrosoftGraphDriveItem_Root as the provided MicrosoftGraphRoot
func (t *MicrosoftGraphDriveItem_Root) FromMicrosoftGraphRoot(v MicrosoftGraphRoot) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphRoot performs a merge with any union data inside the MicrosoftGraphDriveItem_Root, using the provided MicrosoftGraphRoot
func (t *MicrosoftGraphDriveItem_Root) MergeMicrosoftGraphRoot(v MicrosoftGraphRoot) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsMicrosoftGraphDriveItemRoot1 returns the union data inside the MicrosoftGraphDriveItem_Root as a MicrosoftGraphDriveItemRoot1
func (t MicrosoftGraphDriveItem_Root) AsMicrosoftGraphDriveItemRoot1() (MicrosoftGraphDriveItemRoot1, error) {
	var body MicrosoftGraphDriveItemRoot1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphDriveItemRoot1 overwrites any union data inside the MicrosoftGraphDriveItem_Root as the provided MicrosoftGraphDriveItemRoot1
func (t *MicrosoftGraphDriveItem_Root) FromMicrosoftGraphDriveItemRoot1(v MicrosoftGraphDriveItemRoot1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphDriveItemRoot1 performs a merge with any union data inside the MicrosoftGraphDriveItem_Root, using the provided MicrosoftGraphDriveItemRoot1
func (t *MicrosoftGraphDriveItem_Root) MergeMicrosoftGraphDriveItemRoot1(v MicrosoftGraphDriveItemRoot1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

func (t MicrosoftGraphDriveItem_Root) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *MicrosoftGraphDriveItem_Root) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsMicrosoftGraphSearchResult returns the union data inside the MicrosoftGraphDriveItem_SearchResult as a MicrosoftGraphSearchResult
func (t MicrosoftGraphDriveItem_SearchResult) AsMicrosoftGraphSearchResult() (MicrosoftGraphSearchResult, error) {
	var body MicrosoftGraphSearchResult
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphSearchResult overwrites any union data inside the MicrosoftGraphDriveItem_SearchResult as the provided MicrosoftGraphSearchResult
func (t *MicrosoftGraphDriveItem_SearchResult) FromMicrosoftGraphSearchResult(v MicrosoftGraphSearchResult) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphSearchResult performs a merge with any union data inside the MicrosoftGraphDriveItem_SearchResult, using the provided MicrosoftGraphSearchResult
func (t *MicrosoftGraphDriveItem_SearchResult) MergeMicrosoftGraphSearchResult(v MicrosoftGraphSearchResult) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsMicrosoftGraphDriveItemSearchResult1 returns the union data inside the MicrosoftGraphDriveItem_SearchResult as a MicrosoftGraphDriveItemSearchResult1
func (t MicrosoftGraphDriveItem_SearchResult) AsMicrosoftGraphDriveItemSearchResult1() (MicrosoftGraphDriveItemSearchResult1, error) {
	var body MicrosoftGraphDriveItemSearchResult1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphDriveItemSearchResult1 overwrites any union data inside the MicrosoftGraphDriveItem_SearchResult as the provided MicrosoftGraphDriveItemSearchResult1
func (t *MicrosoftGraphDriveItem_SearchResult) FromMicrosoftGraphDriveItemSearchResult1(v MicrosoftGraphDriveItemSearchResult1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphDriveItemSearchResult1 performs a merge with any union data inside the MicrosoftGraphDriveItem_SearchResult, using the provided MicrosoftGraphDriveItemSearchResult1
func (t *MicrosoftGraphDriveItem_SearchResult) MergeMicrosoftGraphDriveItemSearchResult1(v MicrosoftGraphDriveItemSearchResult1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

func (t MicrosoftGraphDriveItem_SearchResult) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *MicrosoftGraphDriveItem_SearchResult) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsMicrosoftGraphShared returns the union data inside the MicrosoftGraphDriveItem_Shared as a MicrosoftGraphShared
func (t MicrosoftGraphDriveItem_Shared) AsMicrosoftGraphShared() (MicrosoftGraphShared, error) {
	var body MicrosoftGraphShared
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphShared overwrites any union data inside the MicrosoftGraphDriveItem_Shared as the provided MicrosoftGraphShared
func (t *MicrosoftGraphDriveItem_Shared) FromMicrosoftGraphShared(v MicrosoftGraphShared) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphShared performs a merge with any union data inside the MicrosoftGraphDriveItem_Shared, using the provided MicrosoftGraphShared
func (t *MicrosoftGraphDriveItem_Shared) MergeMicrosoftGraphShared(v MicrosoftGraphShared) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsMicrosoftGraphDriveItemShared1 returns the union data inside the MicrosoftGraphDriveItem_Shared as a MicrosoftGraphDriveItemShared1
func (t MicrosoftGraphDriveItem_Shared) AsMicrosoftGraphDriveItemShared1() (MicrosoftGraphDriveItemShared1, error) {
	var body MicrosoftGraphDriveItemShared1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphDriveItemShared1 overwrites any union data inside the MicrosoftGraphDriveItem_Shared as the provided MicrosoftGraphDriveItemShared1
func (t *MicrosoftGraphDriveItem_Shared) FromMicrosoftGraphDriveItemShared1(v MicrosoftGraphDriveItemShared1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphDriveItemShared1 performs a merge with any union data inside the MicrosoftGraphDriveItem_Shared, using the provided MicrosoftGraphDriveItemShared1
func (t *MicrosoftGraphDriveItem_Shared) MergeMicrosoftGraphDriveItemShared1(v MicrosoftGraphDriveItemShared1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

func (t MicrosoftGraphDriveItem_Shared) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *MicrosoftGraphDriveItem_Shared) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsMicrosoftGraphSharepointIds returns the union data inside the MicrosoftGraphDriveItem_SharepointIds as a MicrosoftGraphSharepointIds
func (t MicrosoftGraphDriveItem_SharepointIds) AsMicrosoftGraphSharepointIds() (MicrosoftGraphSharepointIds, error) {
	var body MicrosoftGraphSharepointIds
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphSharepointIds overwrites any union data inside the MicrosoftGraphDriveItem_SharepointIds as the provided MicrosoftGraphSharepointIds
func (t *MicrosoftGraphDriveItem_SharepointIds) FromMicrosoftGraphSharepointIds(v MicrosoftGraphSharepointIds) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphSharepointIds performs a merge with any union data inside the MicrosoftGraphDriveItem_SharepointIds, using the provided MicrosoftGraphSharepointIds
func (t *MicrosoftGraphDriveItem_SharepointIds) MergeMicrosoftGraphSharepointIds(v MicrosoftGraphSharepointIds) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsMicrosoftGraphDriveItemSharepointIds1 returns the union data inside the MicrosoftGraphDriveItem_SharepointIds as a MicrosoftGraphDriveItemSharepointIds1
func (t MicrosoftGraphDriveItem_SharepointIds) AsMicrosoftGraphDriveItemSharepointIds1() (MicrosoftGraphDriveItemSharepointIds1, error) {
	var body MicrosoftGraphDriveItemSharepointIds1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphDriveItemSharepointIds1 overwrites any union data inside the MicrosoftGraphDriveItem_SharepointIds as the provided MicrosoftGraphDriveItemSharepointIds1
func (t *MicrosoftGraphDriveItem_SharepointIds) FromMicrosoftGraphDriveItemSharepointIds1(v MicrosoftGraphDriveItemSharepointIds1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphDriveItemSharepointIds1 performs a merge with any union data inside the MicrosoftGraphDriveItem_SharepointIds, using the provided MicrosoftGraphDriveItemSharepointIds1
func (t *MicrosoftGraphDriveItem_SharepointIds) MergeMicrosoftGraphDriveItemSharepointIds1(v MicrosoftGraphDriveItemSharepointIds1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

func (t MicrosoftGraphDriveItem_SharepointIds) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *MicrosoftGraphDriveItem_SharepointIds) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsMicrosoftGraphSpecialFolder returns the union data inside the MicrosoftGraphDriveItem_SpecialFolder as a MicrosoftGraphSpecialFolder
func (t MicrosoftGraphDriveItem_SpecialFolder) AsMicrosoftGraphSpecialFolder() (MicrosoftGraphSpecialFolder, error) {
	var body MicrosoftGraphSpecialFolder
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphSpecialFolder overwrites any union data inside the MicrosoftGraphDriveItem_SpecialFolder as the provided MicrosoftGraphSpecialFolder
func (t *MicrosoftGraphDriveItem_SpecialFolder) FromMicrosoftGraphSpecialFolder(v MicrosoftGraphSpecialFolder) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphSpecialFolder performs a merge with any union data inside the MicrosoftGraphDriveItem_SpecialFolder, using the provided MicrosoftGraphSpecialFolder
func (t *MicrosoftGraphDriveItem_SpecialFolder) MergeMicrosoftGraphSpecialFolder(v MicrosoftGraphSpecialFolder) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsMicrosoftGraphDriveItemSpecialFolder1 returns the union data inside the MicrosoftGraphDriveItem_SpecialFolder as a MicrosoftGraphDriveItemSpecialFolder1
func (t MicrosoftGraphDriveItem_SpecialFolder) AsMicrosoftGraphDriveItemSpecialFolder1() (MicrosoftGraphDriveItemSpecialFolder1, error) {
	var body MicrosoftGraphDriveItemSpecialFolder1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphDriveItemSpecialFolder1 overwrites any union data inside the MicrosoftGraphDriveItem_SpecialFolder as the provided MicrosoftGraphDriveItemSpecialFolder1
func (t *MicrosoftGraphDriveItem_SpecialFolder) FromMicrosoftGraphDriveItemSpecialFolder1(v MicrosoftGraphDriveItemSpecialFolder1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphDriveItemSpecialFolder1 performs a merge with any union data inside the MicrosoftGraphDriveItem_SpecialFolder, using the provided MicrosoftGraphDriveItemSpecialFolder1
func (t *MicrosoftGraphDriveItem_SpecialFolder) MergeMicrosoftGraphDriveItemSpecialFolder1(v MicrosoftGraphDriveItemSpecialFolder1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

func (t MicrosoftGraphDriveItem_SpecialFolder) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *MicrosoftGraphDriveItem_SpecialFolder) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsMicrosoftGraphVideo returns the union data inside the MicrosoftGraphDriveItem_Video as a MicrosoftGraphVideo
func (t MicrosoftGraphDriveItem_Video) AsMicrosoftGraphVideo() (MicrosoftGraphVideo, error) {
	var body MicrosoftGraphVideo
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphVideo overwrites any union data inside the MicrosoftGraphDriveItem_Video as the provided MicrosoftGraphVideo
func (t *MicrosoftGraphDriveItem_Video) FromMicrosoftGraphVideo(v MicrosoftGraphVideo) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphVideo performs a merge with any union data inside the MicrosoftGraphDriveItem_Video, using the provided MicrosoftGraphVideo
func (t *MicrosoftGraphDriveItem_Video) MergeMicrosoftGraphVideo(v MicrosoftGraphVideo) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsMicrosoftGraphDriveItemVideo1 returns the union data inside the MicrosoftGraphDriveItem_Video as a MicrosoftGraphDriveItemVideo1
func (t MicrosoftGraphDriveItem_Video) AsMicrosoftGraphDriveItemVideo1() (MicrosoftGraphDriveItemVideo1, error) {
	var body MicrosoftGraphDriveItemVideo1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphDriveItemVideo1 overwrites any union data inside the MicrosoftGraphDriveItem_Video as the provided MicrosoftGraphDriveItemVideo1
func (t *MicrosoftGraphDriveItem_Video) FromMicrosoftGraphDriveItemVideo1(v MicrosoftGraphDriveItemVideo1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphDriveItemVideo1 performs a merge with any union data inside the MicrosoftGraphDriveItem_Video, using the provided MicrosoftGraphDriveItemVideo1
func (t *MicrosoftGraphDriveItem_Video) MergeMicrosoftGraphDriveItemVideo1(v MicrosoftGraphDriveItemVideo1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

func (t MicrosoftGraphDriveItem_Video) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *MicrosoftGraphDriveItem_Video) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsMicrosoftGraphWorkbook returns the union data inside the MicrosoftGraphDriveItem_Workbook as a MicrosoftGraphWorkbook
func (t MicrosoftGraphDriveItem_Workbook) AsMicrosoftGraphWorkbook() (MicrosoftGraphWorkbook, error) {
	var body MicrosoftGraphWorkbook
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphWorkbook overwrites any union data inside the MicrosoftGraphDriveItem_Workbook as the provided MicrosoftGraphWorkbook
func (t *MicrosoftGraphDriveItem_Workbook) FromMicrosoftGraphWorkbook(v MicrosoftGraphWorkbook) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphWorkbook performs a merge with any union data inside the MicrosoftGraphDriveItem_Workbook, using the provided MicrosoftGraphWorkbook
func (t *MicrosoftGraphDriveItem_Workbook) MergeMicrosoftGraphWorkbook(v MicrosoftGraphWorkbook) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsMicrosoftGraphDriveItemWorkbook1 returns the union data inside the MicrosoftGraphDriveItem_Workbook as a MicrosoftGraphDriveItemWorkbook1
func (t MicrosoftGraphDriveItem_Workbook) AsMicrosoftGraphDriveItemWorkbook1() (MicrosoftGraphDriveItemWorkbook1, error) {
	var body MicrosoftGraphDriveItemWorkbook1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphDriveItemWorkbook1 overwrites any union data inside the MicrosoftGraphDriveItem_Workbook as the provided MicrosoftGraphDriveItemWorkbook1
func (t *MicrosoftGraphDriveItem_Workbook) FromMicrosoftGraphDriveItemWorkbook1(v MicrosoftGraphDriveItemWorkbook1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphDriveItemWorkbook1 performs a merge with any union data inside the MicrosoftGraphDriveItem_Workbook, using the provided MicrosoftGraphDriveItemWorkbook1
func (t *MicrosoftGraphDriveItem_Workbook) MergeMicrosoftGraphDriveItemWorkbook1(v MicrosoftGraphDriveItemWorkbook1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

func (t MicrosoftGraphDriveItem_Workbook) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *MicrosoftGraphDriveItem_Workbook) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsMicrosoftGraphIdentitySet returns the union data inside the MicrosoftGraphDriveItemVersion_LastModifiedBy as a MicrosoftGraphIdentitySet
func (t MicrosoftGraphDriveItemVersion_LastModifiedBy) AsMicrosoftGraphIdentitySet() (MicrosoftGraphIdentitySet, error) {
	var body MicrosoftGraphIdentitySet
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphIdentitySet overwrites any union data inside the MicrosoftGraphDriveItemVersion_LastModifiedBy as the provided MicrosoftGraphIdentitySet
func (t *MicrosoftGraphDriveItemVersion_LastModifiedBy) FromMicrosoftGraphIdentitySet(v MicrosoftGraphIdentitySet) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphIdentitySet performs a merge with any union data inside the MicrosoftGraphDriveItemVersion_LastModifiedBy, using the provided MicrosoftGraphIdentitySet
func (t *MicrosoftGraphDriveItemVersion_LastModifiedBy) MergeMicrosoftGraphIdentitySet(v MicrosoftGraphIdentitySet) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsMicrosoftGraphDriveItemVersionLastModifiedBy1 returns the union data inside the MicrosoftGraphDriveItemVersion_LastModifiedBy as a MicrosoftGraphDriveItemVersionLastModifiedBy1
func (t MicrosoftGraphDriveItemVersion_LastModifiedBy) AsMicrosoftGraphDriveItemVersionLastModifiedBy1() (MicrosoftGraphDriveItemVersionLastModifiedBy1, error) {
	var body MicrosoftGraphDriveItemVersionLastModifiedBy1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphDriveItemVersionLastModifiedBy1 overwrites any union data inside the MicrosoftGraphDriveItemVersion_LastModifiedBy as the provided MicrosoftGraphDriveItemVersionLastModifiedBy1
func (t *MicrosoftGraphDriveItemVersion_LastModifiedBy) FromMicrosoftGraphDriveItemVersionLastModifiedBy1(v MicrosoftGraphDriveItemVersionLastModifiedBy1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphDriveItemVersionLastModifiedBy1 performs a merge with any union data inside the MicrosoftGraphDriveItemVersion_LastModifiedBy, using the provided MicrosoftGraphDriveItemVersionLastModifiedBy1
func (t *MicrosoftGraphDriveItemVersion_LastModifiedBy) MergeMicrosoftGraphDriveItemVersionLastModifiedBy1(v MicrosoftGraphDriveItemVersionLastModifiedBy1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

func (t MicrosoftGraphDriveItemVersion_LastModifiedBy) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *MicrosoftGraphDriveItemVersion_LastModifiedBy) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsMicrosoftGraphPublicationFacet returns the union data inside the MicrosoftGraphDriveItemVersion_Publication as a MicrosoftGraphPublicationFacet
func (t MicrosoftGraphDriveItemVersion_Publication) AsMicrosoftGraphPublicationFacet() (MicrosoftGraphPublicationFacet, error) {
	var body MicrosoftGraphPublicationFacet
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphPublicationFacet overwrites any union data inside the MicrosoftGraphDriveItemVersion_Publication as the provided MicrosoftGraphPublicationFacet
func (t *MicrosoftGraphDriveItemVersion_Publication) FromMicrosoftGraphPublicationFacet(v MicrosoftGraphPublicationFacet) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphPublicationFacet performs a merge with any union data inside the MicrosoftGraphDriveItemVersion_Publication, using the provided MicrosoftGraphPublicationFacet
func (t *MicrosoftGraphDriveItemVersion_Publication) MergeMicrosoftGraphPublicationFacet(v MicrosoftGraphPublicationFacet) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsMicrosoftGraphDriveItemVersionPublication1 returns the union data inside the MicrosoftGraphDriveItemVersion_Publication as a MicrosoftGraphDriveItemVersionPublication1
func (t MicrosoftGraphDriveItemVersion_Publication) AsMicrosoftGraphDriveItemVersionPublication1() (MicrosoftGraphDriveItemVersionPublication1, error) {
	var body MicrosoftGraphDriveItemVersionPublication1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphDriveItemVersionPublication1 overwrites any union data inside the MicrosoftGraphDriveItemVersion_Publication as the provided MicrosoftGraphDriveItemVersionPublication1
func (t *MicrosoftGraphDriveItemVersion_Publication) FromMicrosoftGraphDriveItemVersionPublication1(v MicrosoftGraphDriveItemVersionPublication1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphDriveItemVersionPublication1 performs a merge with any union data inside the MicrosoftGraphDriveItemVersion_Publication, using the provided MicrosoftGraphDriveItemVersionPublication1
func (t *MicrosoftGraphDriveItemVersion_Publication) MergeMicrosoftGraphDriveItemVersionPublication1(v MicrosoftGraphDriveItemVersionPublication1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

func (t MicrosoftGraphDriveItemVersion_Publication) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *MicrosoftGraphDriveItemVersion_Publication) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsMicrosoftGraphAttendee returns the union data inside the MicrosoftGraphEvent_Attendees_Item as a MicrosoftGraphAttendee
func (t MicrosoftGraphEvent_Attendees_Item) AsMicrosoftGraphAttendee() (MicrosoftGraphAttendee, error) {
	var body MicrosoftGraphAttendee
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphAttendee overwrites any union data inside the MicrosoftGraphEvent_Attendees_Item as the provided MicrosoftGraphAttendee
func (t *MicrosoftGraphEvent_Attendees_Item) FromMicrosoftGraphAttendee(v MicrosoftGraphAttendee) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphAttendee performs a merge with any union data inside the MicrosoftGraphEvent_Attendees_Item, using the provided MicrosoftGraphAttendee
func (t *MicrosoftGraphEvent_Attendees_Item) MergeMicrosoftGraphAttendee(v MicrosoftGraphAttendee) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsMicrosoftGraphEventAttendees1 returns the union data inside the MicrosoftGraphEvent_Attendees_Item as a MicrosoftGraphEventAttendees1
func (t MicrosoftGraphEvent_Attendees_Item) AsMicrosoftGraphEventAttendees1() (MicrosoftGraphEventAttendees1, error) {
	var body MicrosoftGraphEventAttendees1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphEventAttendees1 overwrites any union data inside the MicrosoftGraphEvent_Attendees_Item as the provided MicrosoftGraphEventAttendees1
func (t *MicrosoftGraphEvent_Attendees_Item) FromMicrosoftGraphEventAttendees1(v MicrosoftGraphEventAttendees1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphEventAttendees1 performs a merge with any union data inside the MicrosoftGraphEvent_Attendees_Item, using the provided MicrosoftGraphEventAttendees1
func (t *MicrosoftGraphEvent_Attendees_Item) MergeMicrosoftGraphEventAttendees1(v MicrosoftGraphEventAttendees1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

func (t MicrosoftGraphEvent_Attendees_Item) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *MicrosoftGraphEvent_Attendees_Item) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsMicrosoftGraphItemBody returns the union data inside the MicrosoftGraphEvent_Body as a MicrosoftGraphItemBody
func (t MicrosoftGraphEvent_Body) AsMicrosoftGraphItemBody() (MicrosoftGraphItemBody, error) {
	var body MicrosoftGraphItemBody
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphItemBody overwrites any union data inside the MicrosoftGraphEvent_Body as the provided MicrosoftGraphItemBody
func (t *MicrosoftGraphEvent_Body) FromMicrosoftGraphItemBody(v MicrosoftGraphItemBody) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphItemBody performs a merge with any union data inside the MicrosoftGraphEvent_Body, using the provided MicrosoftGraphItemBody
func (t *MicrosoftGraphEvent_Body) MergeMicrosoftGraphItemBody(v MicrosoftGraphItemBody) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsMicrosoftGraphEventBody1 returns the union data inside the MicrosoftGraphEvent_Body as a MicrosoftGraphEventBody1
func (t MicrosoftGraphEvent_Body) AsMicrosoftGraphEventBody1() (MicrosoftGraphEventBody1, error) {
	var body MicrosoftGraphEventBody1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphEventBody1 overwrites any union data inside the MicrosoftGraphEvent_Body as the provided MicrosoftGraphEventBody1
func (t *MicrosoftGraphEvent_Body) FromMicrosoftGraphEventBody1(v MicrosoftGraphEventBody1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphEventBody1 performs a merge with any union data inside the MicrosoftGraphEvent_Body, using the provided MicrosoftGraphEventBody1
func (t *MicrosoftGraphEvent_Body) MergeMicrosoftGraphEventBody1(v MicrosoftGraphEventBody1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

func (t MicrosoftGraphEvent_Body) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *MicrosoftGraphEvent_Body) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsMicrosoftGraphCalendar returns the union data inside the MicrosoftGraphEvent_Calendar as a MicrosoftGraphCalendar
func (t MicrosoftGraphEvent_Calendar) AsMicrosoftGraphCalendar() (MicrosoftGraphCalendar, error) {
	var body MicrosoftGraphCalendar
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphCalendar overwrites any union data inside the MicrosoftGraphEvent_Calendar as the provided MicrosoftGraphCalendar
func (t *MicrosoftGraphEvent_Calendar) FromMicrosoftGraphCalendar(v MicrosoftGraphCalendar) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphCalendar performs a merge with any union data inside the MicrosoftGraphEvent_Calendar, using the provided MicrosoftGraphCalendar
func (t *MicrosoftGraphEvent_Calendar) MergeMicrosoftGraphCalendar(v MicrosoftGraphCalendar) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsMicrosoftGraphEventCalendar1 returns the union data inside the MicrosoftGraphEvent_Calendar as a MicrosoftGraphEventCalendar1
func (t MicrosoftGraphEvent_Calendar) AsMicrosoftGraphEventCalendar1() (MicrosoftGraphEventCalendar1, error) {
	var body MicrosoftGraphEventCalendar1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphEventCalendar1 overwrites any union data inside the MicrosoftGraphEvent_Calendar as the provided MicrosoftGraphEventCalendar1
func (t *MicrosoftGraphEvent_Calendar) FromMicrosoftGraphEventCalendar1(v MicrosoftGraphEventCalendar1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphEventCalendar1 performs a merge with any union data inside the MicrosoftGraphEvent_Calendar, using the provided MicrosoftGraphEventCalendar1
func (t *MicrosoftGraphEvent_Calendar) MergeMicrosoftGraphEventCalendar1(v MicrosoftGraphEventCalendar1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

func (t MicrosoftGraphEvent_Calendar) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *MicrosoftGraphEvent_Calendar) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsMicrosoftGraphDateTimeTimeZone returns the union data inside the MicrosoftGraphEvent_End as a MicrosoftGraphDateTimeTimeZone
func (t MicrosoftGraphEvent_End) AsMicrosoftGraphDateTimeTimeZone() (MicrosoftGraphDateTimeTimeZone, error) {
	var body MicrosoftGraphDateTimeTimeZone
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphDateTimeTimeZone overwrites any union data inside the MicrosoftGraphEvent_End as the provided MicrosoftGraphDateTimeTimeZone
func (t *MicrosoftGraphEvent_End) FromMicrosoftGraphDateTimeTimeZone(v MicrosoftGraphDateTimeTimeZone) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphDateTimeTimeZone performs a merge with any union data inside the MicrosoftGraphEvent_End, using the provided MicrosoftGraphDateTimeTimeZone
func (t *MicrosoftGraphEvent_End) MergeMicrosoftGraphDateTimeTimeZone(v MicrosoftGraphDateTimeTimeZone) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsMicrosoftGraphEventEnd1 returns the union data inside the MicrosoftGraphEvent_End as a MicrosoftGraphEventEnd1
func (t MicrosoftGraphEvent_End) AsMicrosoftGraphEventEnd1() (MicrosoftGraphEventEnd1, error) {
	var body MicrosoftGraphEventEnd1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphEventEnd1 overwrites any union data inside the MicrosoftGraphEvent_End as the provided MicrosoftGraphEventEnd1
func (t *MicrosoftGraphEvent_End) FromMicrosoftGraphEventEnd1(v MicrosoftGraphEventEnd1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphEventEnd1 performs a merge with any union data inside the MicrosoftGraphEvent_End, using the provided MicrosoftGraphEventEnd1
func (t *MicrosoftGraphEvent_End) MergeMicrosoftGraphEventEnd1(v MicrosoftGraphEventEnd1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

func (t MicrosoftGraphEvent_End) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *MicrosoftGraphEvent_End) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsMicrosoftGraphImportance returns the union data inside the MicrosoftGraphEvent_Importance as a MicrosoftGraphImportance
func (t MicrosoftGraphEvent_Importance) AsMicrosoftGraphImportance() (MicrosoftGraphImportance, error) {
	var body MicrosoftGraphImportance
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphImportance overwrites any union data inside the MicrosoftGraphEvent_Importance as the provided MicrosoftGraphImportance
func (t *MicrosoftGraphEvent_Importance) FromMicrosoftGraphImportance(v MicrosoftGraphImportance) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphImportance performs a merge with any union data inside the MicrosoftGraphEvent_Importance, using the provided MicrosoftGraphImportance
func (t *MicrosoftGraphEvent_Importance) MergeMicrosoftGraphImportance(v MicrosoftGraphImportance) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsMicrosoftGraphEventImportance1 returns the union data inside the MicrosoftGraphEvent_Importance as a MicrosoftGraphEventImportance1
func (t MicrosoftGraphEvent_Importance) AsMicrosoftGraphEventImportance1() (MicrosoftGraphEventImportance1, error) {
	var body MicrosoftGraphEventImportance1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphEventImportance1 overwrites any union data inside the MicrosoftGraphEvent_Importance as the provided MicrosoftGraphEventImportance1
func (t *MicrosoftGraphEvent_Importance) FromMicrosoftGraphEventImportance1(v MicrosoftGraphEventImportance1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphEventImportance1 performs a merge with any union data inside the MicrosoftGraphEvent_Importance, using the provided MicrosoftGraphEventImportance1
func (t *MicrosoftGraphEvent_Importance) MergeMicrosoftGraphEventImportance1(v MicrosoftGraphEventImportance1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

func (t MicrosoftGraphEvent_Importance) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *MicrosoftGraphEvent_Importance) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsMicrosoftGraphLocation returns the union data inside the MicrosoftGraphEvent_Location as a MicrosoftGraphLocation
func (t MicrosoftGraphEvent_Location) AsMicrosoftGraphLocation() (MicrosoftGraphLocation, error) {
	var body MicrosoftGraphLocation
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphLocation overwrites any union data inside the MicrosoftGraphEvent_Location as the provided MicrosoftGraphLocation
func (t *MicrosoftGraphEvent_Location) FromMicrosoftGraphLocation(v MicrosoftGraphLocation) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphLocation performs a merge with any union data inside the MicrosoftGraphEvent_Location, using the provided MicrosoftGraphLocation
func (t *MicrosoftGraphEvent_Location) MergeMicrosoftGraphLocation(v MicrosoftGraphLocation) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsMicrosoftGraphEventLocation1 returns the union data inside the MicrosoftGraphEvent_Location as a MicrosoftGraphEventLocation1
func (t MicrosoftGraphEvent_Location) AsMicrosoftGraphEventLocation1() (MicrosoftGraphEventLocation1, error) {
	var body MicrosoftGraphEventLocation1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphEventLocation1 overwrites any union data inside the MicrosoftGraphEvent_Location as the provided MicrosoftGraphEventLocation1
func (t *MicrosoftGraphEvent_Location) FromMicrosoftGraphEventLocation1(v MicrosoftGraphEventLocation1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphEventLocation1 performs a merge with any union data inside the MicrosoftGraphEvent_Location, using the provided MicrosoftGraphEventLocation1
func (t *MicrosoftGraphEvent_Location) MergeMicrosoftGraphEventLocation1(v MicrosoftGraphEventLocation1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

func (t MicrosoftGraphEvent_Location) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *MicrosoftGraphEvent_Location) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsMicrosoftGraphLocation returns the union data inside the MicrosoftGraphEvent_Locations_Item as a MicrosoftGraphLocation
func (t MicrosoftGraphEvent_Locations_Item) AsMicrosoftGraphLocation() (MicrosoftGraphLocation, error) {
	var body MicrosoftGraphLocation
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphLocation overwrites any union data inside the MicrosoftGraphEvent_Locations_Item as the provided MicrosoftGraphLocation
func (t *MicrosoftGraphEvent_Locations_Item) FromMicrosoftGraphLocation(v MicrosoftGraphLocation) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphLocation performs a merge with any union data inside the MicrosoftGraphEvent_Locations_Item, using the provided MicrosoftGraphLocation
func (t *MicrosoftGraphEvent_Locations_Item) MergeMicrosoftGraphLocation(v MicrosoftGraphLocation) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsMicrosoftGraphEventLocations1 returns the union data inside the MicrosoftGraphEvent_Locations_Item as a MicrosoftGraphEventLocations1
func (t MicrosoftGraphEvent_Locations_Item) AsMicrosoftGraphEventLocations1() (MicrosoftGraphEventLocations1, error) {
	var body MicrosoftGraphEventLocations1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphEventLocations1 overwrites any union data inside the MicrosoftGraphEvent_Locations_Item as the provided MicrosoftGraphEventLocations1
func (t *MicrosoftGraphEvent_Locations_Item) FromMicrosoftGraphEventLocations1(v MicrosoftGraphEventLocations1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphEventLocations1 performs a merge with any union data inside the MicrosoftGraphEvent_Locations_Item, using the provided MicrosoftGraphEventLocations1
func (t *MicrosoftGraphEvent_Locations_Item) MergeMicrosoftGraphEventLocations1(v MicrosoftGraphEventLocations1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

func (t MicrosoftGraphEvent_Locations_Item) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *MicrosoftGraphEvent_Locations_Item) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsMicrosoftGraphOnlineMeetingInfo returns the union data inside the MicrosoftGraphEvent_OnlineMeeting as a MicrosoftGraphOnlineMeetingInfo
func (t MicrosoftGraphEvent_OnlineMeeting) AsMicrosoftGraphOnlineMeetingInfo() (MicrosoftGraphOnlineMeetingInfo, error) {
	var body MicrosoftGraphOnlineMeetingInfo
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphOnlineMeetingInfo overwrites any union data inside the MicrosoftGraphEvent_OnlineMeeting as the provided MicrosoftGraphOnlineMeetingInfo
func (t *MicrosoftGraphEvent_OnlineMeeting) FromMicrosoftGraphOnlineMeetingInfo(v MicrosoftGraphOnlineMeetingInfo) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphOnlineMeetingInfo performs a merge with any union data inside the MicrosoftGraphEvent_OnlineMeeting, using the provided MicrosoftGraphOnlineMeetingInfo
func (t *MicrosoftGraphEvent_OnlineMeeting) MergeMicrosoftGraphOnlineMeetingInfo(v MicrosoftGraphOnlineMeetingInfo) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsMicrosoftGraphEventOnlineMeeting1 returns the union data inside the MicrosoftGraphEvent_OnlineMeeting as a MicrosoftGraphEventOnlineMeeting1
func (t MicrosoftGraphEvent_OnlineMeeting) AsMicrosoftGraphEventOnlineMeeting1() (MicrosoftGraphEventOnlineMeeting1, error) {
	var body MicrosoftGraphEventOnlineMeeting1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphEventOnlineMeeting1 overwrites any union data inside the MicrosoftGraphEvent_OnlineMeeting as the provided MicrosoftGraphEventOnlineMeeting1
func (t *MicrosoftGraphEvent_OnlineMeeting) FromMicrosoftGraphEventOnlineMeeting1(v MicrosoftGraphEventOnlineMeeting1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphEventOnlineMeeting1 performs a merge with any union data inside the MicrosoftGraphEvent_OnlineMeeting, using the provided MicrosoftGraphEventOnlineMeeting1
func (t *MicrosoftGraphEvent_OnlineMeeting) MergeMicrosoftGraphEventOnlineMeeting1(v MicrosoftGraphEventOnlineMeeting1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

func (t MicrosoftGraphEvent_OnlineMeeting) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *MicrosoftGraphEvent_OnlineMeeting) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsMicrosoftGraphOnlineMeetingProviderType returns the union data inside the MicrosoftGraphEvent_OnlineMeetingProvider as a MicrosoftGraphOnlineMeetingProviderType
func (t MicrosoftGraphEvent_OnlineMeetingProvider) AsMicrosoftGraphOnlineMeetingProviderType() (MicrosoftGraphOnlineMeetingProviderType, error) {
	var body MicrosoftGraphOnlineMeetingProviderType
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphOnlineMeetingProviderType overwrites any union data inside the MicrosoftGraphEvent_OnlineMeetingProvider as the provided MicrosoftGraphOnlineMeetingProviderType
func (t *MicrosoftGraphEvent_OnlineMeetingProvider) FromMicrosoftGraphOnlineMeetingProviderType(v MicrosoftGraphOnlineMeetingProviderType) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphOnlineMeetingProviderType performs a merge with any union data inside the MicrosoftGraphEvent_OnlineMeetingProvider, using the provided MicrosoftGraphOnlineMeetingProviderType
func (t *MicrosoftGraphEvent_OnlineMeetingProvider) MergeMicrosoftGraphOnlineMeetingProviderType(v MicrosoftGraphOnlineMeetingProviderType) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsMicrosoftGraphEventOnlineMeetingProvider1 returns the union data inside the MicrosoftGraphEvent_OnlineMeetingProvider as a MicrosoftGraphEventOnlineMeetingProvider1
func (t MicrosoftGraphEvent_OnlineMeetingProvider) AsMicrosoftGraphEventOnlineMeetingProvider1() (MicrosoftGraphEventOnlineMeetingProvider1, error) {
	var body MicrosoftGraphEventOnlineMeetingProvider1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphEventOnlineMeetingProvider1 overwrites any union data inside the MicrosoftGraphEvent_OnlineMeetingProvider as the provided MicrosoftGraphEventOnlineMeetingProvider1
func (t *MicrosoftGraphEvent_OnlineMeetingProvider) FromMicrosoftGraphEventOnlineMeetingProvider1(v MicrosoftGraphEventOnlineMeetingProvider1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphEventOnlineMeetingProvider1 performs a merge with any union data inside the MicrosoftGraphEvent_OnlineMeetingProvider, using the provided MicrosoftGraphEventOnlineMeetingProvider1
func (t *MicrosoftGraphEvent_OnlineMeetingProvider) MergeMicrosoftGraphEventOnlineMeetingProvider1(v MicrosoftGraphEventOnlineMeetingProvider1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

func (t MicrosoftGraphEvent_OnlineMeetingProvider) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *MicrosoftGraphEvent_OnlineMeetingProvider) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsMicrosoftGraphRecipient returns the union data inside the MicrosoftGraphEvent_Organizer as a MicrosoftGraphRecipient
func (t MicrosoftGraphEvent_Organizer) AsMicrosoftGraphRecipient() (MicrosoftGraphRecipient, error) {
	var body MicrosoftGraphRecipient
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphRecipient overwrites any union data inside the MicrosoftGraphEvent_Organizer as the provided MicrosoftGraphRecipient
func (t *MicrosoftGraphEvent_Organizer) FromMicrosoftGraphRecipient(v MicrosoftGraphRecipient) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphRecipient performs a merge with any union data inside the MicrosoftGraphEvent_Organizer, using the provided MicrosoftGraphRecipient
func (t *MicrosoftGraphEvent_Organizer) MergeMicrosoftGraphRecipient(v MicrosoftGraphRecipient) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsMicrosoftGraphEventOrganizer1 returns the union data inside the MicrosoftGraphEvent_Organizer as a MicrosoftGraphEventOrganizer1
func (t MicrosoftGraphEvent_Organizer) AsMicrosoftGraphEventOrganizer1() (MicrosoftGraphEventOrganizer1, error) {
	var body MicrosoftGraphEventOrganizer1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphEventOrganizer1 overwrites any union data inside the MicrosoftGraphEvent_Organizer as the provided MicrosoftGraphEventOrganizer1
func (t *MicrosoftGraphEvent_Organizer) FromMicrosoftGraphEventOrganizer1(v MicrosoftGraphEventOrganizer1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphEventOrganizer1 performs a merge with any union data inside the MicrosoftGraphEvent_Organizer, using the provided MicrosoftGraphEventOrganizer1
func (t *MicrosoftGraphEvent_Organizer) MergeMicrosoftGraphEventOrganizer1(v MicrosoftGraphEventOrganizer1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

func (t MicrosoftGraphEvent_Organizer) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *MicrosoftGraphEvent_Organizer) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsMicrosoftGraphPatternedRecurrence returns the union data inside the MicrosoftGraphEvent_Recurrence as a MicrosoftGraphPatternedRecurrence
func (t MicrosoftGraphEvent_Recurrence) AsMicrosoftGraphPatternedRecurrence() (MicrosoftGraphPatternedRecurrence, error) {
	var body MicrosoftGraphPatternedRecurrence
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphPatternedRecurrence overwrites any union data inside the MicrosoftGraphEvent_Recurrence as the provided MicrosoftGraphPatternedRecurrence
func (t *MicrosoftGraphEvent_Recurrence) FromMicrosoftGraphPatternedRecurrence(v MicrosoftGraphPatternedRecurrence) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphPatternedRecurrence performs a merge with any union data inside the MicrosoftGraphEvent_Recurrence, using the provided MicrosoftGraphPatternedRecurrence
func (t *MicrosoftGraphEvent_Recurrence) MergeMicrosoftGraphPatternedRecurrence(v MicrosoftGraphPatternedRecurrence) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsMicrosoftGraphEventRecurrence1 returns the union data inside the MicrosoftGraphEvent_Recurrence as a MicrosoftGraphEventRecurrence1
func (t MicrosoftGraphEvent_Recurrence) AsMicrosoftGraphEventRecurrence1() (MicrosoftGraphEventRecurrence1, error) {
	var body MicrosoftGraphEventRecurrence1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphEventRecurrence1 overwrites any union data inside the MicrosoftGraphEvent_Recurrence as the provided MicrosoftGraphEventRecurrence1
func (t *MicrosoftGraphEvent_Recurrence) FromMicrosoftGraphEventRecurrence1(v MicrosoftGraphEventRecurrence1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphEventRecurrence1 performs a merge with any union data inside the MicrosoftGraphEvent_Recurrence, using the provided MicrosoftGraphEventRecurrence1
func (t *MicrosoftGraphEvent_Recurrence) MergeMicrosoftGraphEventRecurrence1(v MicrosoftGraphEventRecurrence1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

func (t MicrosoftGraphEvent_Recurrence) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *MicrosoftGraphEvent_Recurrence) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsMicrosoftGraphResponseStatus returns the union data inside the MicrosoftGraphEvent_ResponseStatus as a MicrosoftGraphResponseStatus
func (t MicrosoftGraphEvent_ResponseStatus) AsMicrosoftGraphResponseStatus() (MicrosoftGraphResponseStatus, error) {
	var body MicrosoftGraphResponseStatus
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphResponseStatus overwrites any union data inside the MicrosoftGraphEvent_ResponseStatus as the provided MicrosoftGraphResponseStatus
func (t *MicrosoftGraphEvent_ResponseStatus) FromMicrosoftGraphResponseStatus(v MicrosoftGraphResponseStatus) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphResponseStatus performs a merge with any union data inside the MicrosoftGraphEvent_ResponseStatus, using the provided MicrosoftGraphResponseStatus
func (t *MicrosoftGraphEvent_ResponseStatus) MergeMicrosoftGraphResponseStatus(v MicrosoftGraphResponseStatus) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsMicrosoftGraphEventResponseStatus1 returns the union data inside the MicrosoftGraphEvent_ResponseStatus as a MicrosoftGraphEventResponseStatus1
func (t MicrosoftGraphEvent_ResponseStatus) AsMicrosoftGraphEventResponseStatus1() (MicrosoftGraphEventResponseStatus1, error) {
	var body MicrosoftGraphEventResponseStatus1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphEventResponseStatus1 overwrites any union data inside the MicrosoftGraphEvent_ResponseStatus as the provided MicrosoftGraphEventResponseStatus1
func (t *MicrosoftGraphEvent_ResponseStatus) FromMicrosoftGraphEventResponseStatus1(v MicrosoftGraphEventResponseStatus1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphEventResponseStatus1 performs a merge with any union data inside the MicrosoftGraphEvent_ResponseStatus, using the provided MicrosoftGraphEventResponseStatus1
func (t *MicrosoftGraphEvent_ResponseStatus) MergeMicrosoftGraphEventResponseStatus1(v MicrosoftGraphEventResponseStatus1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

func (t MicrosoftGraphEvent_ResponseStatus) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *MicrosoftGraphEvent_ResponseStatus) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsMicrosoftGraphSensitivity returns the union data inside the MicrosoftGraphEvent_Sensitivity as a MicrosoftGraphSensitivity
func (t MicrosoftGraphEvent_Sensitivity) AsMicrosoftGraphSensitivity() (MicrosoftGraphSensitivity, error) {
	var body MicrosoftGraphSensitivity
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphSensitivity overwrites any union data inside the MicrosoftGraphEvent_Sensitivity as the provided MicrosoftGraphSensitivity
func (t *MicrosoftGraphEvent_Sensitivity) FromMicrosoftGraphSensitivity(v MicrosoftGraphSensitivity) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphSensitivity performs a merge with any union data inside the MicrosoftGraphEvent_Sensitivity, using the provided MicrosoftGraphSensitivity
func (t *MicrosoftGraphEvent_Sensitivity) MergeMicrosoftGraphSensitivity(v MicrosoftGraphSensitivity) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsMicrosoftGraphEventSensitivity1 returns the union data inside the MicrosoftGraphEvent_Sensitivity as a MicrosoftGraphEventSensitivity1
func (t MicrosoftGraphEvent_Sensitivity) AsMicrosoftGraphEventSensitivity1() (MicrosoftGraphEventSensitivity1, error) {
	var body MicrosoftGraphEventSensitivity1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphEventSensitivity1 overwrites any union data inside the MicrosoftGraphEvent_Sensitivity as the provided MicrosoftGraphEventSensitivity1
func (t *MicrosoftGraphEvent_Sensitivity) FromMicrosoftGraphEventSensitivity1(v MicrosoftGraphEventSensitivity1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphEventSensitivity1 performs a merge with any union data inside the MicrosoftGraphEvent_Sensitivity, using the provided MicrosoftGraphEventSensitivity1
func (t *MicrosoftGraphEvent_Sensitivity) MergeMicrosoftGraphEventSensitivity1(v MicrosoftGraphEventSensitivity1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

func (t MicrosoftGraphEvent_Sensitivity) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *MicrosoftGraphEvent_Sensitivity) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsMicrosoftGraphFreeBusyStatus returns the union data inside the MicrosoftGraphEvent_ShowAs as a MicrosoftGraphFreeBusyStatus
func (t MicrosoftGraphEvent_ShowAs) AsMicrosoftGraphFreeBusyStatus() (MicrosoftGraphFreeBusyStatus, error) {
	var body MicrosoftGraphFreeBusyStatus
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphFreeBusyStatus overwrites any union data inside the MicrosoftGraphEvent_ShowAs as the provided MicrosoftGraphFreeBusyStatus
func (t *MicrosoftGraphEvent_ShowAs) FromMicrosoftGraphFreeBusyStatus(v MicrosoftGraphFreeBusyStatus) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphFreeBusyStatus performs a merge with any union data inside the MicrosoftGraphEvent_ShowAs, using the provided MicrosoftGraphFreeBusyStatus
func (t *MicrosoftGraphEvent_ShowAs) MergeMicrosoftGraphFreeBusyStatus(v MicrosoftGraphFreeBusyStatus) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsMicrosoftGraphEventShowAs1 returns the union data inside the MicrosoftGraphEvent_ShowAs as a MicrosoftGraphEventShowAs1
func (t MicrosoftGraphEvent_ShowAs) AsMicrosoftGraphEventShowAs1() (MicrosoftGraphEventShowAs1, error) {
	var body MicrosoftGraphEventShowAs1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphEventShowAs1 overwrites any union data inside the MicrosoftGraphEvent_ShowAs as the provided MicrosoftGraphEventShowAs1
func (t *MicrosoftGraphEvent_ShowAs) FromMicrosoftGraphEventShowAs1(v MicrosoftGraphEventShowAs1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphEventShowAs1 performs a merge with any union data inside the MicrosoftGraphEvent_ShowAs, using the provided MicrosoftGraphEventShowAs1
func (t *MicrosoftGraphEvent_ShowAs) MergeMicrosoftGraphEventShowAs1(v MicrosoftGraphEventShowAs1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

func (t MicrosoftGraphEvent_ShowAs) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *MicrosoftGraphEvent_ShowAs) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsMicrosoftGraphDateTimeTimeZone returns the union data inside the MicrosoftGraphEvent_Start as a MicrosoftGraphDateTimeTimeZone
func (t MicrosoftGraphEvent_Start) AsMicrosoftGraphDateTimeTimeZone() (MicrosoftGraphDateTimeTimeZone, error) {
	var body MicrosoftGraphDateTimeTimeZone
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphDateTimeTimeZone overwrites any union data inside the MicrosoftGraphEvent_Start as the provided MicrosoftGraphDateTimeTimeZone
func (t *MicrosoftGraphEvent_Start) FromMicrosoftGraphDateTimeTimeZone(v MicrosoftGraphDateTimeTimeZone) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphDateTimeTimeZone performs a merge with any union data inside the MicrosoftGraphEvent_Start, using the provided MicrosoftGraphDateTimeTimeZone
func (t *MicrosoftGraphEvent_Start) MergeMicrosoftGraphDateTimeTimeZone(v MicrosoftGraphDateTimeTimeZone) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsMicrosoftGraphEventStart1 returns the union data inside the MicrosoftGraphEvent_Start as a MicrosoftGraphEventStart1
func (t MicrosoftGraphEvent_Start) AsMicrosoftGraphEventStart1() (MicrosoftGraphEventStart1, error) {
	var body MicrosoftGraphEventStart1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphEventStart1 overwrites any union data inside the MicrosoftGraphEvent_Start as the provided MicrosoftGraphEventStart1
func (t *MicrosoftGraphEvent_Start) FromMicrosoftGraphEventStart1(v MicrosoftGraphEventStart1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphEventStart1 performs a merge with any union data inside the MicrosoftGraphEvent_Start, using the provided MicrosoftGraphEventStart1
func (t *MicrosoftGraphEvent_Start) MergeMicrosoftGraphEventStart1(v MicrosoftGraphEventStart1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

func (t MicrosoftGraphEvent_Start) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *MicrosoftGraphEvent_Start) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsMicrosoftGraphEventType returns the union data inside the MicrosoftGraphEvent_Type as a MicrosoftGraphEventType
func (t MicrosoftGraphEvent_Type) AsMicrosoftGraphEventType() (MicrosoftGraphEventType, error) {
	var body MicrosoftGraphEventType
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphEventType overwrites any union data inside the MicrosoftGraphEvent_Type as the provided MicrosoftGraphEventType
func (t *MicrosoftGraphEvent_Type) FromMicrosoftGraphEventType(v MicrosoftGraphEventType) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphEventType performs a merge with any union data inside the MicrosoftGraphEvent_Type, using the provided MicrosoftGraphEventType
func (t *MicrosoftGraphEvent_Type) MergeMicrosoftGraphEventType(v MicrosoftGraphEventType) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsMicrosoftGraphEventType1 returns the union data inside the MicrosoftGraphEvent_Type as a MicrosoftGraphEventType1
func (t MicrosoftGraphEvent_Type) AsMicrosoftGraphEventType1() (MicrosoftGraphEventType1, error) {
	var body MicrosoftGraphEventType1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphEventType1 overwrites any union data inside the MicrosoftGraphEvent_Type as the provided MicrosoftGraphEventType1
func (t *MicrosoftGraphEvent_Type) FromMicrosoftGraphEventType1(v MicrosoftGraphEventType1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphEventType1 performs a merge with any union data inside the MicrosoftGraphEvent_Type, using the provided MicrosoftGraphEventType1
func (t *MicrosoftGraphEvent_Type) MergeMicrosoftGraphEventType1(v MicrosoftGraphEventType1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

func (t MicrosoftGraphEvent_Type) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *MicrosoftGraphEvent_Type) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsMicrosoftGraphAttestationLevel returns the union data inside the MicrosoftGraphFido2AuthenticationMethod_AttestationLevel as a MicrosoftGraphAttestationLevel
func (t MicrosoftGraphFido2AuthenticationMethod_AttestationLevel) AsMicrosoftGraphAttestationLevel() (MicrosoftGraphAttestationLevel, error) {
	var body MicrosoftGraphAttestationLevel
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphAttestationLevel overwrites any union data inside the MicrosoftGraphFido2AuthenticationMethod_AttestationLevel as the provided MicrosoftGraphAttestationLevel
func (t *MicrosoftGraphFido2AuthenticationMethod_AttestationLevel) FromMicrosoftGraphAttestationLevel(v MicrosoftGraphAttestationLevel) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphAttestationLevel performs a merge with any union data inside the MicrosoftGraphFido2AuthenticationMethod_AttestationLevel, using the provided MicrosoftGraphAttestationLevel
func (t *MicrosoftGraphFido2AuthenticationMethod_AttestationLevel) MergeMicrosoftGraphAttestationLevel(v MicrosoftGraphAttestationLevel) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsMicrosoftGraphFido2AuthenticationMethodAttestationLevel1 returns the union data inside the MicrosoftGraphFido2AuthenticationMethod_AttestationLevel as a MicrosoftGraphFido2AuthenticationMethodAttestationLevel1
func (t MicrosoftGraphFido2AuthenticationMethod_AttestationLevel) AsMicrosoftGraphFido2AuthenticationMethodAttestationLevel1() (MicrosoftGraphFido2AuthenticationMethodAttestationLevel1, error) {
	var body MicrosoftGraphFido2AuthenticationMethodAttestationLevel1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphFido2AuthenticationMethodAttestationLevel1 overwrites any union data inside the MicrosoftGraphFido2AuthenticationMethod_AttestationLevel as the provided MicrosoftGraphFido2AuthenticationMethodAttestationLevel1
func (t *MicrosoftGraphFido2AuthenticationMethod_AttestationLevel) FromMicrosoftGraphFido2AuthenticationMethodAttestationLevel1(v MicrosoftGraphFido2AuthenticationMethodAttestationLevel1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphFido2AuthenticationMethodAttestationLevel1 performs a merge with any union data inside the MicrosoftGraphFido2AuthenticationMethod_AttestationLevel, using the provided MicrosoftGraphFido2AuthenticationMethodAttestationLevel1
func (t *MicrosoftGraphFido2AuthenticationMethod_AttestationLevel) MergeMicrosoftGraphFido2AuthenticationMethodAttestationLevel1(v MicrosoftGraphFido2AuthenticationMethodAttestationLevel1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

func (t MicrosoftGraphFido2AuthenticationMethod_AttestationLevel) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *MicrosoftGraphFido2AuthenticationMethod_AttestationLevel) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsMicrosoftGraphHashes returns the union data inside the MicrosoftGraphFile_Hashes as a MicrosoftGraphHashes
func (t MicrosoftGraphFile_Hashes) AsMicrosoftGraphHashes() (MicrosoftGraphHashes, error) {
	var body MicrosoftGraphHashes
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphHashes overwrites any union data inside the MicrosoftGraphFile_Hashes as the provided MicrosoftGraphHashes
func (t *MicrosoftGraphFile_Hashes) FromMicrosoftGraphHashes(v MicrosoftGraphHashes) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphHashes performs a merge with any union data inside the MicrosoftGraphFile_Hashes, using the provided MicrosoftGraphHashes
func (t *MicrosoftGraphFile_Hashes) MergeMicrosoftGraphHashes(v MicrosoftGraphHashes) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsMicrosoftGraphFileHashes1 returns the union data inside the MicrosoftGraphFile_Hashes as a MicrosoftGraphFileHashes1
func (t MicrosoftGraphFile_Hashes) AsMicrosoftGraphFileHashes1() (MicrosoftGraphFileHashes1, error) {
	var body MicrosoftGraphFileHashes1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphFileHashes1 overwrites any union data inside the MicrosoftGraphFile_Hashes as the provided MicrosoftGraphFileHashes1
func (t *MicrosoftGraphFile_Hashes) FromMicrosoftGraphFileHashes1(v MicrosoftGraphFileHashes1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphFileHashes1 performs a merge with any union data inside the MicrosoftGraphFile_Hashes, using the provided MicrosoftGraphFileHashes1
func (t *MicrosoftGraphFile_Hashes) MergeMicrosoftGraphFileHashes1(v MicrosoftGraphFileHashes1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

func (t MicrosoftGraphFile_Hashes) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *MicrosoftGraphFile_Hashes) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsMicrosoftGraphFolderView returns the union data inside the MicrosoftGraphFolder_View as a MicrosoftGraphFolderView
func (t MicrosoftGraphFolder_View) AsMicrosoftGraphFolderView() (MicrosoftGraphFolderView, error) {
	var body MicrosoftGraphFolderView
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphFolderView overwrites any union data inside the MicrosoftGraphFolder_View as the provided MicrosoftGraphFolderView
func (t *MicrosoftGraphFolder_View) FromMicrosoftGraphFolderView(v MicrosoftGraphFolderView) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphFolderView performs a merge with any union data inside the MicrosoftGraphFolder_View, using the provided MicrosoftGraphFolderView
func (t *MicrosoftGraphFolder_View) MergeMicrosoftGraphFolderView(v MicrosoftGraphFolderView) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsMicrosoftGraphFolderView1 returns the union data inside the MicrosoftGraphFolder_View as a MicrosoftGraphFolderView1
func (t MicrosoftGraphFolder_View) AsMicrosoftGraphFolderView1() (MicrosoftGraphFolderView1, error) {
	var body MicrosoftGraphFolderView1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphFolderView1 overwrites any union data inside the MicrosoftGraphFolder_View as the provided MicrosoftGraphFolderView1
func (t *MicrosoftGraphFolder_View) FromMicrosoftGraphFolderView1(v MicrosoftGraphFolderView1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphFolderView1 performs a merge with any union data inside the MicrosoftGraphFolder_View, using the provided MicrosoftGraphFolderView1
func (t *MicrosoftGraphFolder_View) MergeMicrosoftGraphFolderView1(v MicrosoftGraphFolderView1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

func (t MicrosoftGraphFolder_View) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *MicrosoftGraphFolder_View) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsMicrosoftGraphDateTimeTimeZone returns the union data inside the MicrosoftGraphFollowupFlag_CompletedDateTime as a MicrosoftGraphDateTimeTimeZone
func (t MicrosoftGraphFollowupFlag_CompletedDateTime) AsMicrosoftGraphDateTimeTimeZone() (MicrosoftGraphDateTimeTimeZone, error) {
	var body MicrosoftGraphDateTimeTimeZone
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphDateTimeTimeZone overwrites any union data inside the MicrosoftGraphFollowupFlag_CompletedDateTime as the provided MicrosoftGraphDateTimeTimeZone
func (t *MicrosoftGraphFollowupFlag_CompletedDateTime) FromMicrosoftGraphDateTimeTimeZone(v MicrosoftGraphDateTimeTimeZone) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphDateTimeTimeZone performs a merge with any union data inside the MicrosoftGraphFollowupFlag_CompletedDateTime, using the provided MicrosoftGraphDateTimeTimeZone
func (t *MicrosoftGraphFollowupFlag_CompletedDateTime) MergeMicrosoftGraphDateTimeTimeZone(v MicrosoftGraphDateTimeTimeZone) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsMicrosoftGraphFollowupFlagCompletedDateTime1 returns the union data inside the MicrosoftGraphFollowupFlag_CompletedDateTime as a MicrosoftGraphFollowupFlagCompletedDateTime1
func (t MicrosoftGraphFollowupFlag_CompletedDateTime) AsMicrosoftGraphFollowupFlagCompletedDateTime1() (MicrosoftGraphFollowupFlagCompletedDateTime1, error) {
	var body MicrosoftGraphFollowupFlagCompletedDateTime1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphFollowupFlagCompletedDateTime1 overwrites any union data inside the MicrosoftGraphFollowupFlag_CompletedDateTime as the provided MicrosoftGraphFollowupFlagCompletedDateTime1
func (t *MicrosoftGraphFollowupFlag_CompletedDateTime) FromMicrosoftGraphFollowupFlagCompletedDateTime1(v MicrosoftGraphFollowupFlagCompletedDateTime1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphFollowupFlagCompletedDateTime1 performs a merge with any union data inside the MicrosoftGraphFollowupFlag_CompletedDateTime, using the provided MicrosoftGraphFollowupFlagCompletedDateTime1
func (t *MicrosoftGraphFollowupFlag_CompletedDateTime) MergeMicrosoftGraphFollowupFlagCompletedDateTime1(v MicrosoftGraphFollowupFlagCompletedDateTime1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

func (t MicrosoftGraphFollowupFlag_CompletedDateTime) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *MicrosoftGraphFollowupFlag_CompletedDateTime) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsMicrosoftGraphDateTimeTimeZone returns the union data inside the MicrosoftGraphFollowupFlag_DueDateTime as a MicrosoftGraphDateTimeTimeZone
func (t MicrosoftGraphFollowupFlag_DueDateTime) AsMicrosoftGraphDateTimeTimeZone() (MicrosoftGraphDateTimeTimeZone, error) {
	var body MicrosoftGraphDateTimeTimeZone
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphDateTimeTimeZone overwrites any union data inside the MicrosoftGraphFollowupFlag_DueDateTime as the provided MicrosoftGraphDateTimeTimeZone
func (t *MicrosoftGraphFollowupFlag_DueDateTime) FromMicrosoftGraphDateTimeTimeZone(v MicrosoftGraphDateTimeTimeZone) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphDateTimeTimeZone performs a merge with any union data inside the MicrosoftGraphFollowupFlag_DueDateTime, using the provided MicrosoftGraphDateTimeTimeZone
func (t *MicrosoftGraphFollowupFlag_DueDateTime) MergeMicrosoftGraphDateTimeTimeZone(v MicrosoftGraphDateTimeTimeZone) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsMicrosoftGraphFollowupFlagDueDateTime1 returns the union data inside the MicrosoftGraphFollowupFlag_DueDateTime as a MicrosoftGraphFollowupFlagDueDateTime1
func (t MicrosoftGraphFollowupFlag_DueDateTime) AsMicrosoftGraphFollowupFlagDueDateTime1() (MicrosoftGraphFollowupFlagDueDateTime1, error) {
	var body MicrosoftGraphFollowupFlagDueDateTime1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphFollowupFlagDueDateTime1 overwrites any union data inside the MicrosoftGraphFollowupFlag_DueDateTime as the provided MicrosoftGraphFollowupFlagDueDateTime1
func (t *MicrosoftGraphFollowupFlag_DueDateTime) FromMicrosoftGraphFollowupFlagDueDateTime1(v MicrosoftGraphFollowupFlagDueDateTime1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphFollowupFlagDueDateTime1 performs a merge with any union data inside the MicrosoftGraphFollowupFlag_DueDateTime, using the provided MicrosoftGraphFollowupFlagDueDateTime1
func (t *MicrosoftGraphFollowupFlag_DueDateTime) MergeMicrosoftGraphFollowupFlagDueDateTime1(v MicrosoftGraphFollowupFlagDueDateTime1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

func (t MicrosoftGraphFollowupFlag_DueDateTime) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *MicrosoftGraphFollowupFlag_DueDateTime) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsMicrosoftGraphFollowupFlagStatus returns the union data inside the MicrosoftGraphFollowupFlag_FlagStatus as a MicrosoftGraphFollowupFlagStatus
func (t MicrosoftGraphFollowupFlag_FlagStatus) AsMicrosoftGraphFollowupFlagStatus() (MicrosoftGraphFollowupFlagStatus, error) {
	var body MicrosoftGraphFollowupFlagStatus
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphFollowupFlagStatus overwrites any union data inside the MicrosoftGraphFollowupFlag_FlagStatus as the provided MicrosoftGraphFollowupFlagStatus
func (t *MicrosoftGraphFollowupFlag_FlagStatus) FromMicrosoftGraphFollowupFlagStatus(v MicrosoftGraphFollowupFlagStatus) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphFollowupFlagStatus performs a merge with any union data inside the MicrosoftGraphFollowupFlag_FlagStatus, using the provided MicrosoftGraphFollowupFlagStatus
func (t *MicrosoftGraphFollowupFlag_FlagStatus) MergeMicrosoftGraphFollowupFlagStatus(v MicrosoftGraphFollowupFlagStatus) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsMicrosoftGraphFollowupFlagFlagStatus1 returns the union data inside the MicrosoftGraphFollowupFlag_FlagStatus as a MicrosoftGraphFollowupFlagFlagStatus1
func (t MicrosoftGraphFollowupFlag_FlagStatus) AsMicrosoftGraphFollowupFlagFlagStatus1() (MicrosoftGraphFollowupFlagFlagStatus1, error) {
	var body MicrosoftGraphFollowupFlagFlagStatus1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphFollowupFlagFlagStatus1 overwrites any union data inside the MicrosoftGraphFollowupFlag_FlagStatus as the provided MicrosoftGraphFollowupFlagFlagStatus1
func (t *MicrosoftGraphFollowupFlag_FlagStatus) FromMicrosoftGraphFollowupFlagFlagStatus1(v MicrosoftGraphFollowupFlagFlagStatus1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphFollowupFlagFlagStatus1 performs a merge with any union data inside the MicrosoftGraphFollowupFlag_FlagStatus, using the provided MicrosoftGraphFollowupFlagFlagStatus1
func (t *MicrosoftGraphFollowupFlag_FlagStatus) MergeMicrosoftGraphFollowupFlagFlagStatus1(v MicrosoftGraphFollowupFlagFlagStatus1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

func (t MicrosoftGraphFollowupFlag_FlagStatus) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *MicrosoftGraphFollowupFlag_FlagStatus) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsMicrosoftGraphDateTimeTimeZone returns the union data inside the MicrosoftGraphFollowupFlag_StartDateTime as a MicrosoftGraphDateTimeTimeZone
func (t MicrosoftGraphFollowupFlag_StartDateTime) AsMicrosoftGraphDateTimeTimeZone() (MicrosoftGraphDateTimeTimeZone, error) {
	var body MicrosoftGraphDateTimeTimeZone
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphDateTimeTimeZone overwrites any union data inside the MicrosoftGraphFollowupFlag_StartDateTime as the provided MicrosoftGraphDateTimeTimeZone
func (t *MicrosoftGraphFollowupFlag_StartDateTime) FromMicrosoftGraphDateTimeTimeZone(v MicrosoftGraphDateTimeTimeZone) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphDateTimeTimeZone performs a merge with any union data inside the MicrosoftGraphFollowupFlag_StartDateTime, using the provided MicrosoftGraphDateTimeTimeZone
func (t *MicrosoftGraphFollowupFlag_StartDateTime) MergeMicrosoftGraphDateTimeTimeZone(v MicrosoftGraphDateTimeTimeZone) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsMicrosoftGraphFollowupFlagStartDateTime1 returns the union data inside the MicrosoftGraphFollowupFlag_StartDateTime as a MicrosoftGraphFollowupFlagStartDateTime1
func (t MicrosoftGraphFollowupFlag_StartDateTime) AsMicrosoftGraphFollowupFlagStartDateTime1() (MicrosoftGraphFollowupFlagStartDateTime1, error) {
	var body MicrosoftGraphFollowupFlagStartDateTime1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphFollowupFlagStartDateTime1 overwrites any union data inside the MicrosoftGraphFollowupFlag_StartDateTime as the provided MicrosoftGraphFollowupFlagStartDateTime1
func (t *MicrosoftGraphFollowupFlag_StartDateTime) FromMicrosoftGraphFollowupFlagStartDateTime1(v MicrosoftGraphFollowupFlagStartDateTime1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphFollowupFlagStartDateTime1 performs a merge with any union data inside the MicrosoftGraphFollowupFlag_StartDateTime, using the provided MicrosoftGraphFollowupFlagStartDateTime1
func (t *MicrosoftGraphFollowupFlag_StartDateTime) MergeMicrosoftGraphFollowupFlagStartDateTime1(v MicrosoftGraphFollowupFlagStartDateTime1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

func (t MicrosoftGraphFollowupFlag_StartDateTime) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *MicrosoftGraphFollowupFlag_StartDateTime) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsMicrosoftGraphGeoCoordinatesAltitude0 returns the union data inside the MicrosoftGraphGeoCoordinates_Altitude as a MicrosoftGraphGeoCoordinatesAltitude0
func (t MicrosoftGraphGeoCoordinates_Altitude) AsMicrosoftGraphGeoCoordinatesAltitude0() (MicrosoftGraphGeoCoordinatesAltitude0, error) {
	var body MicrosoftGraphGeoCoordinatesAltitude0
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphGeoCoordinatesAltitude0 overwrites any union data inside the MicrosoftGraphGeoCoordinates_Altitude as the provided MicrosoftGraphGeoCoordinatesAltitude0
func (t *MicrosoftGraphGeoCoordinates_Altitude) FromMicrosoftGraphGeoCoordinatesAltitude0(v MicrosoftGraphGeoCoordinatesAltitude0) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphGeoCoordinatesAltitude0 performs a merge with any union data inside the MicrosoftGraphGeoCoordinates_Altitude, using the provided MicrosoftGraphGeoCoordinatesAltitude0
func (t *MicrosoftGraphGeoCoordinates_Altitude) MergeMicrosoftGraphGeoCoordinatesAltitude0(v MicrosoftGraphGeoCoordinatesAltitude0) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsMicrosoftGraphGeoCoordinatesAltitude1 returns the union data inside the MicrosoftGraphGeoCoordinates_Altitude as a MicrosoftGraphGeoCoordinatesAltitude1
func (t MicrosoftGraphGeoCoordinates_Altitude) AsMicrosoftGraphGeoCoordinatesAltitude1() (MicrosoftGraphGeoCoordinatesAltitude1, error) {
	var body MicrosoftGraphGeoCoordinatesAltitude1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphGeoCoordinatesAltitude1 overwrites any union data inside the MicrosoftGraphGeoCoordinates_Altitude as the provided MicrosoftGraphGeoCoordinatesAltitude1
func (t *MicrosoftGraphGeoCoordinates_Altitude) FromMicrosoftGraphGeoCoordinatesAltitude1(v MicrosoftGraphGeoCoordinatesAltitude1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphGeoCoordinatesAltitude1 performs a merge with any union data inside the MicrosoftGraphGeoCoordinates_Altitude, using the provided MicrosoftGraphGeoCoordinatesAltitude1
func (t *MicrosoftGraphGeoCoordinates_Altitude) MergeMicrosoftGraphGeoCoordinatesAltitude1(v MicrosoftGraphGeoCoordinatesAltitude1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsReferenceNumeric returns the union data inside the MicrosoftGraphGeoCoordinates_Altitude as a ReferenceNumeric
func (t MicrosoftGraphGeoCoordinates_Altitude) AsReferenceNumeric() (ReferenceNumeric, error) {
	var body ReferenceNumeric
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromReferenceNumeric overwrites any union data inside the MicrosoftGraphGeoCoordinates_Altitude as the provided ReferenceNumeric
func (t *MicrosoftGraphGeoCoordinates_Altitude) FromReferenceNumeric(v ReferenceNumeric) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeReferenceNumeric performs a merge with any union data inside the MicrosoftGraphGeoCoordinates_Altitude, using the provided ReferenceNumeric
func (t *MicrosoftGraphGeoCoordinates_Altitude) MergeReferenceNumeric(v ReferenceNumeric) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

func (t MicrosoftGraphGeoCoordinates_Altitude) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *MicrosoftGraphGeoCoordinates_Altitude) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsMicrosoftGraphGeoCoordinatesLatitude0 returns the union data inside the MicrosoftGraphGeoCoordinates_Latitude as a MicrosoftGraphGeoCoordinatesLatitude0
func (t MicrosoftGraphGeoCoordinates_Latitude) AsMicrosoftGraphGeoCoordinatesLatitude0() (MicrosoftGraphGeoCoordinatesLatitude0, error) {
	var body MicrosoftGraphGeoCoordinatesLatitude0
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphGeoCoordinatesLatitude0 overwrites any union data inside the MicrosoftGraphGeoCoordinates_Latitude as the provided MicrosoftGraphGeoCoordinatesLatitude0
func (t *MicrosoftGraphGeoCoordinates_Latitude) FromMicrosoftGraphGeoCoordinatesLatitude0(v MicrosoftGraphGeoCoordinatesLatitude0) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphGeoCoordinatesLatitude0 performs a merge with any union data inside the MicrosoftGraphGeoCoordinates_Latitude, using the provided MicrosoftGraphGeoCoordinatesLatitude0
func (t *MicrosoftGraphGeoCoordinates_Latitude) MergeMicrosoftGraphGeoCoordinatesLatitude0(v MicrosoftGraphGeoCoordinatesLatitude0) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsMicrosoftGraphGeoCoordinatesLatitude1 returns the union data inside the MicrosoftGraphGeoCoordinates_Latitude as a MicrosoftGraphGeoCoordinatesLatitude1
func (t MicrosoftGraphGeoCoordinates_Latitude) AsMicrosoftGraphGeoCoordinatesLatitude1() (MicrosoftGraphGeoCoordinatesLatitude1, error) {
	var body MicrosoftGraphGeoCoordinatesLatitude1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphGeoCoordinatesLatitude1 overwrites any union data inside the MicrosoftGraphGeoCoordinates_Latitude as the provided MicrosoftGraphGeoCoordinatesLatitude1
func (t *MicrosoftGraphGeoCoordinates_Latitude) FromMicrosoftGraphGeoCoordinatesLatitude1(v MicrosoftGraphGeoCoordinatesLatitude1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphGeoCoordinatesLatitude1 performs a merge with any union data inside the MicrosoftGraphGeoCoordinates_Latitude, using the provided MicrosoftGraphGeoCoordinatesLatitude1
func (t *MicrosoftGraphGeoCoordinates_Latitude) MergeMicrosoftGraphGeoCoordinatesLatitude1(v MicrosoftGraphGeoCoordinatesLatitude1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsReferenceNumeric returns the union data inside the MicrosoftGraphGeoCoordinates_Latitude as a ReferenceNumeric
func (t MicrosoftGraphGeoCoordinates_Latitude) AsReferenceNumeric() (ReferenceNumeric, error) {
	var body ReferenceNumeric
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromReferenceNumeric overwrites any union data inside the MicrosoftGraphGeoCoordinates_Latitude as the provided ReferenceNumeric
func (t *MicrosoftGraphGeoCoordinates_Latitude) FromReferenceNumeric(v ReferenceNumeric) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeReferenceNumeric performs a merge with any union data inside the MicrosoftGraphGeoCoordinates_Latitude, using the provided ReferenceNumeric
func (t *MicrosoftGraphGeoCoordinates_Latitude) MergeReferenceNumeric(v ReferenceNumeric) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

func (t MicrosoftGraphGeoCoordinates_Latitude) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *MicrosoftGraphGeoCoordinates_Latitude) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsMicrosoftGraphGeoCoordinatesLongitude0 returns the union data inside the MicrosoftGraphGeoCoordinates_Longitude as a MicrosoftGraphGeoCoordinatesLongitude0
func (t MicrosoftGraphGeoCoordinates_Longitude) AsMicrosoftGraphGeoCoordinatesLongitude0() (MicrosoftGraphGeoCoordinatesLongitude0, error) {
	var body MicrosoftGraphGeoCoordinatesLongitude0
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphGeoCoordinatesLongitude0 overwrites any union data inside the MicrosoftGraphGeoCoordinates_Longitude as the provided MicrosoftGraphGeoCoordinatesLongitude0
func (t *MicrosoftGraphGeoCoordinates_Longitude) FromMicrosoftGraphGeoCoordinatesLongitude0(v MicrosoftGraphGeoCoordinatesLongitude0) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphGeoCoordinatesLongitude0 performs a merge with any union data inside the MicrosoftGraphGeoCoordinates_Longitude, using the provided MicrosoftGraphGeoCoordinatesLongitude0
func (t *MicrosoftGraphGeoCoordinates_Longitude) MergeMicrosoftGraphGeoCoordinatesLongitude0(v MicrosoftGraphGeoCoordinatesLongitude0) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsMicrosoftGraphGeoCoordinatesLongitude1 returns the union data inside the MicrosoftGraphGeoCoordinates_Longitude as a MicrosoftGraphGeoCoordinatesLongitude1
func (t MicrosoftGraphGeoCoordinates_Longitude) AsMicrosoftGraphGeoCoordinatesLongitude1() (MicrosoftGraphGeoCoordinatesLongitude1, error) {
	var body MicrosoftGraphGeoCoordinatesLongitude1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphGeoCoordinatesLongitude1 overwrites any union data inside the MicrosoftGraphGeoCoordinates_Longitude as the provided MicrosoftGraphGeoCoordinatesLongitude1
func (t *MicrosoftGraphGeoCoordinates_Longitude) FromMicrosoftGraphGeoCoordinatesLongitude1(v MicrosoftGraphGeoCoordinatesLongitude1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphGeoCoordinatesLongitude1 performs a merge with any union data inside the MicrosoftGraphGeoCoordinates_Longitude, using the provided MicrosoftGraphGeoCoordinatesLongitude1
func (t *MicrosoftGraphGeoCoordinates_Longitude) MergeMicrosoftGraphGeoCoordinatesLongitude1(v MicrosoftGraphGeoCoordinatesLongitude1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsReferenceNumeric returns the union data inside the MicrosoftGraphGeoCoordinates_Longitude as a ReferenceNumeric
func (t MicrosoftGraphGeoCoordinates_Longitude) AsReferenceNumeric() (ReferenceNumeric, error) {
	var body ReferenceNumeric
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromReferenceNumeric overwrites any union data inside the MicrosoftGraphGeoCoordinates_Longitude as the provided ReferenceNumeric
func (t *MicrosoftGraphGeoCoordinates_Longitude) FromReferenceNumeric(v ReferenceNumeric) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeReferenceNumeric performs a merge with any union data inside the MicrosoftGraphGeoCoordinates_Longitude, using the provided ReferenceNumeric
func (t *MicrosoftGraphGeoCoordinates_Longitude) MergeReferenceNumeric(v ReferenceNumeric) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

func (t MicrosoftGraphGeoCoordinates_Longitude) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *MicrosoftGraphGeoCoordinates_Longitude) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsMicrosoftGraphAssignedLabel returns the union data inside the MicrosoftGraphGroup_AssignedLabels_Item as a MicrosoftGraphAssignedLabel
func (t MicrosoftGraphGroup_AssignedLabels_Item) AsMicrosoftGraphAssignedLabel() (MicrosoftGraphAssignedLabel, error) {
	var body MicrosoftGraphAssignedLabel
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphAssignedLabel overwrites any union data inside the MicrosoftGraphGroup_AssignedLabels_Item as the provided MicrosoftGraphAssignedLabel
func (t *MicrosoftGraphGroup_AssignedLabels_Item) FromMicrosoftGraphAssignedLabel(v MicrosoftGraphAssignedLabel) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphAssignedLabel performs a merge with any union data inside the MicrosoftGraphGroup_AssignedLabels_Item, using the provided MicrosoftGraphAssignedLabel
func (t *MicrosoftGraphGroup_AssignedLabels_Item) MergeMicrosoftGraphAssignedLabel(v MicrosoftGraphAssignedLabel) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsMicrosoftGraphGroupAssignedLabels1 returns the union data inside the MicrosoftGraphGroup_AssignedLabels_Item as a MicrosoftGraphGroupAssignedLabels1
func (t MicrosoftGraphGroup_AssignedLabels_Item) AsMicrosoftGraphGroupAssignedLabels1() (MicrosoftGraphGroupAssignedLabels1, error) {
	var body MicrosoftGraphGroupAssignedLabels1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphGroupAssignedLabels1 overwrites any union data inside the MicrosoftGraphGroup_AssignedLabels_Item as the provided MicrosoftGraphGroupAssignedLabels1
func (t *MicrosoftGraphGroup_AssignedLabels_Item) FromMicrosoftGraphGroupAssignedLabels1(v MicrosoftGraphGroupAssignedLabels1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphGroupAssignedLabels1 performs a merge with any union data inside the MicrosoftGraphGroup_AssignedLabels_Item, using the provided MicrosoftGraphGroupAssignedLabels1
func (t *MicrosoftGraphGroup_AssignedLabels_Item) MergeMicrosoftGraphGroupAssignedLabels1(v MicrosoftGraphGroupAssignedLabels1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

func (t MicrosoftGraphGroup_AssignedLabels_Item) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *MicrosoftGraphGroup_AssignedLabels_Item) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsMicrosoftGraphAssignedLicense returns the union data inside the MicrosoftGraphGroup_AssignedLicenses_Item as a MicrosoftGraphAssignedLicense
func (t MicrosoftGraphGroup_AssignedLicenses_Item) AsMicrosoftGraphAssignedLicense() (MicrosoftGraphAssignedLicense, error) {
	var body MicrosoftGraphAssignedLicense
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphAssignedLicense overwrites any union data inside the MicrosoftGraphGroup_AssignedLicenses_Item as the provided MicrosoftGraphAssignedLicense
func (t *MicrosoftGraphGroup_AssignedLicenses_Item) FromMicrosoftGraphAssignedLicense(v MicrosoftGraphAssignedLicense) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphAssignedLicense performs a merge with any union data inside the MicrosoftGraphGroup_AssignedLicenses_Item, using the provided MicrosoftGraphAssignedLicense
func (t *MicrosoftGraphGroup_AssignedLicenses_Item) MergeMicrosoftGraphAssignedLicense(v MicrosoftGraphAssignedLicense) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsMicrosoftGraphGroupAssignedLicenses1 returns the union data inside the MicrosoftGraphGroup_AssignedLicenses_Item as a MicrosoftGraphGroupAssignedLicenses1
func (t MicrosoftGraphGroup_AssignedLicenses_Item) AsMicrosoftGraphGroupAssignedLicenses1() (MicrosoftGraphGroupAssignedLicenses1, error) {
	var body MicrosoftGraphGroupAssignedLicenses1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphGroupAssignedLicenses1 overwrites any union data inside the MicrosoftGraphGroup_AssignedLicenses_Item as the provided MicrosoftGraphGroupAssignedLicenses1
func (t *MicrosoftGraphGroup_AssignedLicenses_Item) FromMicrosoftGraphGroupAssignedLicenses1(v MicrosoftGraphGroupAssignedLicenses1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphGroupAssignedLicenses1 performs a merge with any union data inside the MicrosoftGraphGroup_AssignedLicenses_Item, using the provided MicrosoftGraphGroupAssignedLicenses1
func (t *MicrosoftGraphGroup_AssignedLicenses_Item) MergeMicrosoftGraphGroupAssignedLicenses1(v MicrosoftGraphGroupAssignedLicenses1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

func (t MicrosoftGraphGroup_AssignedLicenses_Item) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *MicrosoftGraphGroup_AssignedLicenses_Item) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsMicrosoftGraphCalendar returns the union data inside the MicrosoftGraphGroup_Calendar as a MicrosoftGraphCalendar
func (t MicrosoftGraphGroup_Calendar) AsMicrosoftGraphCalendar() (MicrosoftGraphCalendar, error) {
	var body MicrosoftGraphCalendar
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphCalendar overwrites any union data inside the MicrosoftGraphGroup_Calendar as the provided MicrosoftGraphCalendar
func (t *MicrosoftGraphGroup_Calendar) FromMicrosoftGraphCalendar(v MicrosoftGraphCalendar) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphCalendar performs a merge with any union data inside the MicrosoftGraphGroup_Calendar, using the provided MicrosoftGraphCalendar
func (t *MicrosoftGraphGroup_Calendar) MergeMicrosoftGraphCalendar(v MicrosoftGraphCalendar) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsMicrosoftGraphGroupCalendar1 returns the union data inside the MicrosoftGraphGroup_Calendar as a MicrosoftGraphGroupCalendar1
func (t MicrosoftGraphGroup_Calendar) AsMicrosoftGraphGroupCalendar1() (MicrosoftGraphGroupCalendar1, error) {
	var body MicrosoftGraphGroupCalendar1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphGroupCalendar1 overwrites any union data inside the MicrosoftGraphGroup_Calendar as the provided MicrosoftGraphGroupCalendar1
func (t *MicrosoftGraphGroup_Calendar) FromMicrosoftGraphGroupCalendar1(v MicrosoftGraphGroupCalendar1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphGroupCalendar1 performs a merge with any union data inside the MicrosoftGraphGroup_Calendar, using the provided MicrosoftGraphGroupCalendar1
func (t *MicrosoftGraphGroup_Calendar) MergeMicrosoftGraphGroupCalendar1(v MicrosoftGraphGroupCalendar1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

func (t MicrosoftGraphGroup_Calendar) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *MicrosoftGraphGroup_Calendar) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsMicrosoftGraphDirectoryObject returns the union data inside the MicrosoftGraphGroup_CreatedOnBehalfOf as a MicrosoftGraphDirectoryObject
func (t MicrosoftGraphGroup_CreatedOnBehalfOf) AsMicrosoftGraphDirectoryObject() (MicrosoftGraphDirectoryObject, error) {
	var body MicrosoftGraphDirectoryObject
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphDirectoryObject overwrites any union data inside the MicrosoftGraphGroup_CreatedOnBehalfOf as the provided MicrosoftGraphDirectoryObject
func (t *MicrosoftGraphGroup_CreatedOnBehalfOf) FromMicrosoftGraphDirectoryObject(v MicrosoftGraphDirectoryObject) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphDirectoryObject performs a merge with any union data inside the MicrosoftGraphGroup_CreatedOnBehalfOf, using the provided MicrosoftGraphDirectoryObject
func (t *MicrosoftGraphGroup_CreatedOnBehalfOf) MergeMicrosoftGraphDirectoryObject(v MicrosoftGraphDirectoryObject) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsMicrosoftGraphGroupCreatedOnBehalfOf1 returns the union data inside the MicrosoftGraphGroup_CreatedOnBehalfOf as a MicrosoftGraphGroupCreatedOnBehalfOf1
func (t MicrosoftGraphGroup_CreatedOnBehalfOf) AsMicrosoftGraphGroupCreatedOnBehalfOf1() (MicrosoftGraphGroupCreatedOnBehalfOf1, error) {
	var body MicrosoftGraphGroupCreatedOnBehalfOf1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphGroupCreatedOnBehalfOf1 overwrites any union data inside the MicrosoftGraphGroup_CreatedOnBehalfOf as the provided MicrosoftGraphGroupCreatedOnBehalfOf1
func (t *MicrosoftGraphGroup_CreatedOnBehalfOf) FromMicrosoftGraphGroupCreatedOnBehalfOf1(v MicrosoftGraphGroupCreatedOnBehalfOf1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphGroupCreatedOnBehalfOf1 performs a merge with any union data inside the MicrosoftGraphGroup_CreatedOnBehalfOf, using the provided MicrosoftGraphGroupCreatedOnBehalfOf1
func (t *MicrosoftGraphGroup_CreatedOnBehalfOf) MergeMicrosoftGraphGroupCreatedOnBehalfOf1(v MicrosoftGraphGroupCreatedOnBehalfOf1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

func (t MicrosoftGraphGroup_CreatedOnBehalfOf) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *MicrosoftGraphGroup_CreatedOnBehalfOf) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsMicrosoftGraphDrive returns the union data inside the MicrosoftGraphGroup_Drive as a MicrosoftGraphDrive
func (t MicrosoftGraphGroup_Drive) AsMicrosoftGraphDrive() (MicrosoftGraphDrive, error) {
	var body MicrosoftGraphDrive
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphDrive overwrites any union data inside the MicrosoftGraphGroup_Drive as the provided MicrosoftGraphDrive
func (t *MicrosoftGraphGroup_Drive) FromMicrosoftGraphDrive(v MicrosoftGraphDrive) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphDrive performs a merge with any union data inside the MicrosoftGraphGroup_Drive, using the provided MicrosoftGraphDrive
func (t *MicrosoftGraphGroup_Drive) MergeMicrosoftGraphDrive(v MicrosoftGraphDrive) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsMicrosoftGraphGroupDrive1 returns the union data inside the MicrosoftGraphGroup_Drive as a MicrosoftGraphGroupDrive1
func (t MicrosoftGraphGroup_Drive) AsMicrosoftGraphGroupDrive1() (MicrosoftGraphGroupDrive1, error) {
	var body MicrosoftGraphGroupDrive1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphGroupDrive1 overwrites any union data inside the MicrosoftGraphGroup_Drive as the provided MicrosoftGraphGroupDrive1
func (t *MicrosoftGraphGroup_Drive) FromMicrosoftGraphGroupDrive1(v MicrosoftGraphGroupDrive1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphGroupDrive1 performs a merge with any union data inside the MicrosoftGraphGroup_Drive, using the provided MicrosoftGraphGroupDrive1
func (t *MicrosoftGraphGroup_Drive) MergeMicrosoftGraphGroupDrive1(v MicrosoftGraphGroupDrive1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

func (t MicrosoftGraphGroup_Drive) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *MicrosoftGraphGroup_Drive) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsMicrosoftGraphLicenseProcessingState returns the union data inside the MicrosoftGraphGroup_LicenseProcessingState as a MicrosoftGraphLicenseProcessingState
func (t MicrosoftGraphGroup_LicenseProcessingState) AsMicrosoftGraphLicenseProcessingState() (MicrosoftGraphLicenseProcessingState, error) {
	var body MicrosoftGraphLicenseProcessingState
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphLicenseProcessingState overwrites any union data inside the MicrosoftGraphGroup_LicenseProcessingState as the provided MicrosoftGraphLicenseProcessingState
func (t *MicrosoftGraphGroup_LicenseProcessingState) FromMicrosoftGraphLicenseProcessingState(v MicrosoftGraphLicenseProcessingState) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphLicenseProcessingState performs a merge with any union data inside the MicrosoftGraphGroup_LicenseProcessingState, using the provided MicrosoftGraphLicenseProcessingState
func (t *MicrosoftGraphGroup_LicenseProcessingState) MergeMicrosoftGraphLicenseProcessingState(v MicrosoftGraphLicenseProcessingState) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsMicrosoftGraphGroupLicenseProcessingState1 returns the union data inside the MicrosoftGraphGroup_LicenseProcessingState as a MicrosoftGraphGroupLicenseProcessingState1
func (t MicrosoftGraphGroup_LicenseProcessingState) AsMicrosoftGraphGroupLicenseProcessingState1() (MicrosoftGraphGroupLicenseProcessingState1, error) {
	var body MicrosoftGraphGroupLicenseProcessingState1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphGroupLicenseProcessingState1 overwrites any union data inside the MicrosoftGraphGroup_LicenseProcessingState as the provided MicrosoftGraphGroupLicenseProcessingState1
func (t *MicrosoftGraphGroup_LicenseProcessingState) FromMicrosoftGraphGroupLicenseProcessingState1(v MicrosoftGraphGroupLicenseProcessingState1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphGroupLicenseProcessingState1 performs a merge with any union data inside the MicrosoftGraphGroup_LicenseProcessingState, using the provided MicrosoftGraphGroupLicenseProcessingState1
func (t *MicrosoftGraphGroup_LicenseProcessingState) MergeMicrosoftGraphGroupLicenseProcessingState1(v MicrosoftGraphGroupLicenseProcessingState1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

func (t MicrosoftGraphGroup_LicenseProcessingState) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *MicrosoftGraphGroup_LicenseProcessingState) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsMicrosoftGraphOnPremisesProvisioningError returns the union data inside the MicrosoftGraphGroup_OnPremisesProvisioningErrors_Item as a MicrosoftGraphOnPremisesProvisioningError
func (t MicrosoftGraphGroup_OnPremisesProvisioningErrors_Item) AsMicrosoftGraphOnPremisesProvisioningError() (MicrosoftGraphOnPremisesProvisioningError, error) {
	var body MicrosoftGraphOnPremisesProvisioningError
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphOnPremisesProvisioningError overwrites any union data inside the MicrosoftGraphGroup_OnPremisesProvisioningErrors_Item as the provided MicrosoftGraphOnPremisesProvisioningError
func (t *MicrosoftGraphGroup_OnPremisesProvisioningErrors_Item) FromMicrosoftGraphOnPremisesProvisioningError(v MicrosoftGraphOnPremisesProvisioningError) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphOnPremisesProvisioningError performs a merge with any union data inside the MicrosoftGraphGroup_OnPremisesProvisioningErrors_Item, using the provided MicrosoftGraphOnPremisesProvisioningError
func (t *MicrosoftGraphGroup_OnPremisesProvisioningErrors_Item) MergeMicrosoftGraphOnPremisesProvisioningError(v MicrosoftGraphOnPremisesProvisioningError) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsMicrosoftGraphGroupOnPremisesProvisioningErrors1 returns the union data inside the MicrosoftGraphGroup_OnPremisesProvisioningErrors_Item as a MicrosoftGraphGroupOnPremisesProvisioningErrors1
func (t MicrosoftGraphGroup_OnPremisesProvisioningErrors_Item) AsMicrosoftGraphGroupOnPremisesProvisioningErrors1() (MicrosoftGraphGroupOnPremisesProvisioningErrors1, error) {
	var body MicrosoftGraphGroupOnPremisesProvisioningErrors1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphGroupOnPremisesProvisioningErrors1 overwrites any union data inside the MicrosoftGraphGroup_OnPremisesProvisioningErrors_Item as the provided MicrosoftGraphGroupOnPremisesProvisioningErrors1
func (t *MicrosoftGraphGroup_OnPremisesProvisioningErrors_Item) FromMicrosoftGraphGroupOnPremisesProvisioningErrors1(v MicrosoftGraphGroupOnPremisesProvisioningErrors1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphGroupOnPremisesProvisioningErrors1 performs a merge with any union data inside the MicrosoftGraphGroup_OnPremisesProvisioningErrors_Item, using the provided MicrosoftGraphGroupOnPremisesProvisioningErrors1
func (t *MicrosoftGraphGroup_OnPremisesProvisioningErrors_Item) MergeMicrosoftGraphGroupOnPremisesProvisioningErrors1(v MicrosoftGraphGroupOnPremisesProvisioningErrors1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

func (t MicrosoftGraphGroup_OnPremisesProvisioningErrors_Item) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *MicrosoftGraphGroup_OnPremisesProvisioningErrors_Item) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsMicrosoftGraphOnenote returns the union data inside the MicrosoftGraphGroup_Onenote as a MicrosoftGraphOnenote
func (t MicrosoftGraphGroup_Onenote) AsMicrosoftGraphOnenote() (MicrosoftGraphOnenote, error) {
	var body MicrosoftGraphOnenote
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphOnenote overwrites any union data inside the MicrosoftGraphGroup_Onenote as the provided MicrosoftGraphOnenote
func (t *MicrosoftGraphGroup_Onenote) FromMicrosoftGraphOnenote(v MicrosoftGraphOnenote) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphOnenote performs a merge with any union data inside the MicrosoftGraphGroup_Onenote, using the provided MicrosoftGraphOnenote
func (t *MicrosoftGraphGroup_Onenote) MergeMicrosoftGraphOnenote(v MicrosoftGraphOnenote) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsMicrosoftGraphGroupOnenote1 returns the union data inside the MicrosoftGraphGroup_Onenote as a MicrosoftGraphGroupOnenote1
func (t MicrosoftGraphGroup_Onenote) AsMicrosoftGraphGroupOnenote1() (MicrosoftGraphGroupOnenote1, error) {
	var body MicrosoftGraphGroupOnenote1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphGroupOnenote1 overwrites any union data inside the MicrosoftGraphGroup_Onenote as the provided MicrosoftGraphGroupOnenote1
func (t *MicrosoftGraphGroup_Onenote) FromMicrosoftGraphGroupOnenote1(v MicrosoftGraphGroupOnenote1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphGroupOnenote1 performs a merge with any union data inside the MicrosoftGraphGroup_Onenote, using the provided MicrosoftGraphGroupOnenote1
func (t *MicrosoftGraphGroup_Onenote) MergeMicrosoftGraphGroupOnenote1(v MicrosoftGraphGroupOnenote1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

func (t MicrosoftGraphGroup_Onenote) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *MicrosoftGraphGroup_Onenote) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsMicrosoftGraphProfilePhoto returns the union data inside the MicrosoftGraphGroup_Photo as a MicrosoftGraphProfilePhoto
func (t MicrosoftGraphGroup_Photo) AsMicrosoftGraphProfilePhoto() (MicrosoftGraphProfilePhoto, error) {
	var body MicrosoftGraphProfilePhoto
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphProfilePhoto overwrites any union data inside the MicrosoftGraphGroup_Photo as the provided MicrosoftGraphProfilePhoto
func (t *MicrosoftGraphGroup_Photo) FromMicrosoftGraphProfilePhoto(v MicrosoftGraphProfilePhoto) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphProfilePhoto performs a merge with any union data inside the MicrosoftGraphGroup_Photo, using the provided MicrosoftGraphProfilePhoto
func (t *MicrosoftGraphGroup_Photo) MergeMicrosoftGraphProfilePhoto(v MicrosoftGraphProfilePhoto) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsMicrosoftGraphGroupPhoto1 returns the union data inside the MicrosoftGraphGroup_Photo as a MicrosoftGraphGroupPhoto1
func (t MicrosoftGraphGroup_Photo) AsMicrosoftGraphGroupPhoto1() (MicrosoftGraphGroupPhoto1, error) {
	var body MicrosoftGraphGroupPhoto1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphGroupPhoto1 overwrites any union data inside the MicrosoftGraphGroup_Photo as the provided MicrosoftGraphGroupPhoto1
func (t *MicrosoftGraphGroup_Photo) FromMicrosoftGraphGroupPhoto1(v MicrosoftGraphGroupPhoto1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphGroupPhoto1 performs a merge with any union data inside the MicrosoftGraphGroup_Photo, using the provided MicrosoftGraphGroupPhoto1
func (t *MicrosoftGraphGroup_Photo) MergeMicrosoftGraphGroupPhoto1(v MicrosoftGraphGroupPhoto1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

func (t MicrosoftGraphGroup_Photo) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *MicrosoftGraphGroup_Photo) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsMicrosoftGraphPlannerGroup returns the union data inside the MicrosoftGraphGroup_Planner as a MicrosoftGraphPlannerGroup
func (t MicrosoftGraphGroup_Planner) AsMicrosoftGraphPlannerGroup() (MicrosoftGraphPlannerGroup, error) {
	var body MicrosoftGraphPlannerGroup
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphPlannerGroup overwrites any union data inside the MicrosoftGraphGroup_Planner as the provided MicrosoftGraphPlannerGroup
func (t *MicrosoftGraphGroup_Planner) FromMicrosoftGraphPlannerGroup(v MicrosoftGraphPlannerGroup) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphPlannerGroup performs a merge with any union data inside the MicrosoftGraphGroup_Planner, using the provided MicrosoftGraphPlannerGroup
func (t *MicrosoftGraphGroup_Planner) MergeMicrosoftGraphPlannerGroup(v MicrosoftGraphPlannerGroup) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsMicrosoftGraphGroupPlanner1 returns the union data inside the MicrosoftGraphGroup_Planner as a MicrosoftGraphGroupPlanner1
func (t MicrosoftGraphGroup_Planner) AsMicrosoftGraphGroupPlanner1() (MicrosoftGraphGroupPlanner1, error) {
	var body MicrosoftGraphGroupPlanner1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphGroupPlanner1 overwrites any union data inside the MicrosoftGraphGroup_Planner as the provided MicrosoftGraphGroupPlanner1
func (t *MicrosoftGraphGroup_Planner) FromMicrosoftGraphGroupPlanner1(v MicrosoftGraphGroupPlanner1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphGroupPlanner1 performs a merge with any union data inside the MicrosoftGraphGroup_Planner, using the provided MicrosoftGraphGroupPlanner1
func (t *MicrosoftGraphGroup_Planner) MergeMicrosoftGraphGroupPlanner1(v MicrosoftGraphGroupPlanner1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

func (t MicrosoftGraphGroup_Planner) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *MicrosoftGraphGroup_Planner) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsMicrosoftGraphTeam returns the union data inside the MicrosoftGraphGroup_Team as a MicrosoftGraphTeam
func (t MicrosoftGraphGroup_Team) AsMicrosoftGraphTeam() (MicrosoftGraphTeam, error) {
	var body MicrosoftGraphTeam
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphTeam overwrites any union data inside the MicrosoftGraphGroup_Team as the provided MicrosoftGraphTeam
func (t *MicrosoftGraphGroup_Team) FromMicrosoftGraphTeam(v MicrosoftGraphTeam) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphTeam performs a merge with any union data inside the MicrosoftGraphGroup_Team, using the provided MicrosoftGraphTeam
func (t *MicrosoftGraphGroup_Team) MergeMicrosoftGraphTeam(v MicrosoftGraphTeam) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsMicrosoftGraphGroupTeam1 returns the union data inside the MicrosoftGraphGroup_Team as a MicrosoftGraphGroupTeam1
func (t MicrosoftGraphGroup_Team) AsMicrosoftGraphGroupTeam1() (MicrosoftGraphGroupTeam1, error) {
	var body MicrosoftGraphGroupTeam1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphGroupTeam1 overwrites any union data inside the MicrosoftGraphGroup_Team as the provided MicrosoftGraphGroupTeam1
func (t *MicrosoftGraphGroup_Team) FromMicrosoftGraphGroupTeam1(v MicrosoftGraphGroupTeam1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphGroupTeam1 performs a merge with any union data inside the MicrosoftGraphGroup_Team, using the provided MicrosoftGraphGroupTeam1
func (t *MicrosoftGraphGroup_Team) MergeMicrosoftGraphGroupTeam1(v MicrosoftGraphGroupTeam1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

func (t MicrosoftGraphGroup_Team) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *MicrosoftGraphGroup_Team) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsMicrosoftGraphIdentity returns the union data inside the MicrosoftGraphIdentitySet_Application as a MicrosoftGraphIdentity
func (t MicrosoftGraphIdentitySet_Application) AsMicrosoftGraphIdentity() (MicrosoftGraphIdentity, error) {
	var body MicrosoftGraphIdentity
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphIdentity overwrites any union data inside the MicrosoftGraphIdentitySet_Application as the provided MicrosoftGraphIdentity
func (t *MicrosoftGraphIdentitySet_Application) FromMicrosoftGraphIdentity(v MicrosoftGraphIdentity) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphIdentity performs a merge with any union data inside the MicrosoftGraphIdentitySet_Application, using the provided MicrosoftGraphIdentity
func (t *MicrosoftGraphIdentitySet_Application) MergeMicrosoftGraphIdentity(v MicrosoftGraphIdentity) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsMicrosoftGraphIdentitySetApplication1 returns the union data inside the MicrosoftGraphIdentitySet_Application as a MicrosoftGraphIdentitySetApplication1
func (t MicrosoftGraphIdentitySet_Application) AsMicrosoftGraphIdentitySetApplication1() (MicrosoftGraphIdentitySetApplication1, error) {
	var body MicrosoftGraphIdentitySetApplication1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphIdentitySetApplication1 overwrites any union data inside the MicrosoftGraphIdentitySet_Application as the provided MicrosoftGraphIdentitySetApplication1
func (t *MicrosoftGraphIdentitySet_Application) FromMicrosoftGraphIdentitySetApplication1(v MicrosoftGraphIdentitySetApplication1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphIdentitySetApplication1 performs a merge with any union data inside the MicrosoftGraphIdentitySet_Application, using the provided MicrosoftGraphIdentitySetApplication1
func (t *MicrosoftGraphIdentitySet_Application) MergeMicrosoftGraphIdentitySetApplication1(v MicrosoftGraphIdentitySetApplication1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

func (t MicrosoftGraphIdentitySet_Application) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *MicrosoftGraphIdentitySet_Application) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsMicrosoftGraphIdentity returns the union data inside the MicrosoftGraphIdentitySet_Device as a MicrosoftGraphIdentity
func (t MicrosoftGraphIdentitySet_Device) AsMicrosoftGraphIdentity() (MicrosoftGraphIdentity, error) {
	var body MicrosoftGraphIdentity
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphIdentity overwrites any union data inside the MicrosoftGraphIdentitySet_Device as the provided MicrosoftGraphIdentity
func (t *MicrosoftGraphIdentitySet_Device) FromMicrosoftGraphIdentity(v MicrosoftGraphIdentity) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphIdentity performs a merge with any union data inside the MicrosoftGraphIdentitySet_Device, using the provided MicrosoftGraphIdentity
func (t *MicrosoftGraphIdentitySet_Device) MergeMicrosoftGraphIdentity(v MicrosoftGraphIdentity) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsMicrosoftGraphIdentitySetDevice1 returns the union data inside the MicrosoftGraphIdentitySet_Device as a MicrosoftGraphIdentitySetDevice1
func (t MicrosoftGraphIdentitySet_Device) AsMicrosoftGraphIdentitySetDevice1() (MicrosoftGraphIdentitySetDevice1, error) {
	var body MicrosoftGraphIdentitySetDevice1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphIdentitySetDevice1 overwrites any union data inside the MicrosoftGraphIdentitySet_Device as the provided MicrosoftGraphIdentitySetDevice1
func (t *MicrosoftGraphIdentitySet_Device) FromMicrosoftGraphIdentitySetDevice1(v MicrosoftGraphIdentitySetDevice1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphIdentitySetDevice1 performs a merge with any union data inside the MicrosoftGraphIdentitySet_Device, using the provided MicrosoftGraphIdentitySetDevice1
func (t *MicrosoftGraphIdentitySet_Device) MergeMicrosoftGraphIdentitySetDevice1(v MicrosoftGraphIdentitySetDevice1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

func (t MicrosoftGraphIdentitySet_Device) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *MicrosoftGraphIdentitySet_Device) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsMicrosoftGraphIdentity returns the union data inside the MicrosoftGraphIdentitySet_User as a MicrosoftGraphIdentity
func (t MicrosoftGraphIdentitySet_User) AsMicrosoftGraphIdentity() (MicrosoftGraphIdentity, error) {
	var body MicrosoftGraphIdentity
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphIdentity overwrites any union data inside the MicrosoftGraphIdentitySet_User as the provided MicrosoftGraphIdentity
func (t *MicrosoftGraphIdentitySet_User) FromMicrosoftGraphIdentity(v MicrosoftGraphIdentity) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphIdentity performs a merge with any union data inside the MicrosoftGraphIdentitySet_User, using the provided MicrosoftGraphIdentity
func (t *MicrosoftGraphIdentitySet_User) MergeMicrosoftGraphIdentity(v MicrosoftGraphIdentity) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsMicrosoftGraphIdentitySetUser1 returns the union data inside the MicrosoftGraphIdentitySet_User as a MicrosoftGraphIdentitySetUser1
func (t MicrosoftGraphIdentitySet_User) AsMicrosoftGraphIdentitySetUser1() (MicrosoftGraphIdentitySetUser1, error) {
	var body MicrosoftGraphIdentitySetUser1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphIdentitySetUser1 overwrites any union data inside the MicrosoftGraphIdentitySet_User as the provided MicrosoftGraphIdentitySetUser1
func (t *MicrosoftGraphIdentitySet_User) FromMicrosoftGraphIdentitySetUser1(v MicrosoftGraphIdentitySetUser1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphIdentitySetUser1 performs a merge with any union data inside the MicrosoftGraphIdentitySet_User, using the provided MicrosoftGraphIdentitySetUser1
func (t *MicrosoftGraphIdentitySet_User) MergeMicrosoftGraphIdentitySetUser1(v MicrosoftGraphIdentitySetUser1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

func (t MicrosoftGraphIdentitySet_User) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *MicrosoftGraphIdentitySet_User) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsMicrosoftGraphInferenceClassificationType returns the union data inside the MicrosoftGraphInferenceClassificationOverride_ClassifyAs as a MicrosoftGraphInferenceClassificationType
func (t MicrosoftGraphInferenceClassificationOverride_ClassifyAs) AsMicrosoftGraphInferenceClassificationType() (MicrosoftGraphInferenceClassificationType, error) {
	var body MicrosoftGraphInferenceClassificationType
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphInferenceClassificationType overwrites any union data inside the MicrosoftGraphInferenceClassificationOverride_ClassifyAs as the provided MicrosoftGraphInferenceClassificationType
func (t *MicrosoftGraphInferenceClassificationOverride_ClassifyAs) FromMicrosoftGraphInferenceClassificationType(v MicrosoftGraphInferenceClassificationType) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphInferenceClassificationType performs a merge with any union data inside the MicrosoftGraphInferenceClassificationOverride_ClassifyAs, using the provided MicrosoftGraphInferenceClassificationType
func (t *MicrosoftGraphInferenceClassificationOverride_ClassifyAs) MergeMicrosoftGraphInferenceClassificationType(v MicrosoftGraphInferenceClassificationType) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsMicrosoftGraphInferenceClassificationOverrideClassifyAs1 returns the union data inside the MicrosoftGraphInferenceClassificationOverride_ClassifyAs as a MicrosoftGraphInferenceClassificationOverrideClassifyAs1
func (t MicrosoftGraphInferenceClassificationOverride_ClassifyAs) AsMicrosoftGraphInferenceClassificationOverrideClassifyAs1() (MicrosoftGraphInferenceClassificationOverrideClassifyAs1, error) {
	var body MicrosoftGraphInferenceClassificationOverrideClassifyAs1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphInferenceClassificationOverrideClassifyAs1 overwrites any union data inside the MicrosoftGraphInferenceClassificationOverride_ClassifyAs as the provided MicrosoftGraphInferenceClassificationOverrideClassifyAs1
func (t *MicrosoftGraphInferenceClassificationOverride_ClassifyAs) FromMicrosoftGraphInferenceClassificationOverrideClassifyAs1(v MicrosoftGraphInferenceClassificationOverrideClassifyAs1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphInferenceClassificationOverrideClassifyAs1 performs a merge with any union data inside the MicrosoftGraphInferenceClassificationOverride_ClassifyAs, using the provided MicrosoftGraphInferenceClassificationOverrideClassifyAs1
func (t *MicrosoftGraphInferenceClassificationOverride_ClassifyAs) MergeMicrosoftGraphInferenceClassificationOverrideClassifyAs1(v MicrosoftGraphInferenceClassificationOverrideClassifyAs1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

func (t MicrosoftGraphInferenceClassificationOverride_ClassifyAs) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *MicrosoftGraphInferenceClassificationOverride_ClassifyAs) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsMicrosoftGraphEmailAddress returns the union data inside the MicrosoftGraphInferenceClassificationOverride_SenderEmailAddress as a MicrosoftGraphEmailAddress
func (t MicrosoftGraphInferenceClassificationOverride_SenderEmailAddress) AsMicrosoftGraphEmailAddress() (MicrosoftGraphEmailAddress, error) {
	var body MicrosoftGraphEmailAddress
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphEmailAddress overwrites any union data inside the MicrosoftGraphInferenceClassificationOverride_SenderEmailAddress as the provided MicrosoftGraphEmailAddress
func (t *MicrosoftGraphInferenceClassificationOverride_SenderEmailAddress) FromMicrosoftGraphEmailAddress(v MicrosoftGraphEmailAddress) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphEmailAddress performs a merge with any union data inside the MicrosoftGraphInferenceClassificationOverride_SenderEmailAddress, using the provided MicrosoftGraphEmailAddress
func (t *MicrosoftGraphInferenceClassificationOverride_SenderEmailAddress) MergeMicrosoftGraphEmailAddress(v MicrosoftGraphEmailAddress) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsMicrosoftGraphInferenceClassificationOverrideSenderEmailAddress1 returns the union data inside the MicrosoftGraphInferenceClassificationOverride_SenderEmailAddress as a MicrosoftGraphInferenceClassificationOverrideSenderEmailAddress1
func (t MicrosoftGraphInferenceClassificationOverride_SenderEmailAddress) AsMicrosoftGraphInferenceClassificationOverrideSenderEmailAddress1() (MicrosoftGraphInferenceClassificationOverrideSenderEmailAddress1, error) {
	var body MicrosoftGraphInferenceClassificationOverrideSenderEmailAddress1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphInferenceClassificationOverrideSenderEmailAddress1 overwrites any union data inside the MicrosoftGraphInferenceClassificationOverride_SenderEmailAddress as the provided MicrosoftGraphInferenceClassificationOverrideSenderEmailAddress1
func (t *MicrosoftGraphInferenceClassificationOverride_SenderEmailAddress) FromMicrosoftGraphInferenceClassificationOverrideSenderEmailAddress1(v MicrosoftGraphInferenceClassificationOverrideSenderEmailAddress1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphInferenceClassificationOverrideSenderEmailAddress1 performs a merge with any union data inside the MicrosoftGraphInferenceClassificationOverride_SenderEmailAddress, using the provided MicrosoftGraphInferenceClassificationOverrideSenderEmailAddress1
func (t *MicrosoftGraphInferenceClassificationOverride_SenderEmailAddress) MergeMicrosoftGraphInferenceClassificationOverrideSenderEmailAddress1(v MicrosoftGraphInferenceClassificationOverrideSenderEmailAddress1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

func (t MicrosoftGraphInferenceClassificationOverride_SenderEmailAddress) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *MicrosoftGraphInferenceClassificationOverride_SenderEmailAddress) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsMicrosoftGraphAccessAction returns the union data inside the MicrosoftGraphItemActivity_Access as a MicrosoftGraphAccessAction
func (t MicrosoftGraphItemActivity_Access) AsMicrosoftGraphAccessAction() (MicrosoftGraphAccessAction, error) {
	var body MicrosoftGraphAccessAction
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphAccessAction overwrites any union data inside the MicrosoftGraphItemActivity_Access as the provided MicrosoftGraphAccessAction
func (t *MicrosoftGraphItemActivity_Access) FromMicrosoftGraphAccessAction(v MicrosoftGraphAccessAction) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphAccessAction performs a merge with any union data inside the MicrosoftGraphItemActivity_Access, using the provided MicrosoftGraphAccessAction
func (t *MicrosoftGraphItemActivity_Access) MergeMicrosoftGraphAccessAction(v MicrosoftGraphAccessAction) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsMicrosoftGraphItemActivityAccess1 returns the union data inside the MicrosoftGraphItemActivity_Access as a MicrosoftGraphItemActivityAccess1
func (t MicrosoftGraphItemActivity_Access) AsMicrosoftGraphItemActivityAccess1() (MicrosoftGraphItemActivityAccess1, error) {
	var body MicrosoftGraphItemActivityAccess1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphItemActivityAccess1 overwrites any union data inside the MicrosoftGraphItemActivity_Access as the provided MicrosoftGraphItemActivityAccess1
func (t *MicrosoftGraphItemActivity_Access) FromMicrosoftGraphItemActivityAccess1(v MicrosoftGraphItemActivityAccess1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphItemActivityAccess1 performs a merge with any union data inside the MicrosoftGraphItemActivity_Access, using the provided MicrosoftGraphItemActivityAccess1
func (t *MicrosoftGraphItemActivity_Access) MergeMicrosoftGraphItemActivityAccess1(v MicrosoftGraphItemActivityAccess1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

func (t MicrosoftGraphItemActivity_Access) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *MicrosoftGraphItemActivity_Access) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsMicrosoftGraphIdentitySet returns the union data inside the MicrosoftGraphItemActivity_Actor as a MicrosoftGraphIdentitySet
func (t MicrosoftGraphItemActivity_Actor) AsMicrosoftGraphIdentitySet() (MicrosoftGraphIdentitySet, error) {
	var body MicrosoftGraphIdentitySet
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphIdentitySet overwrites any union data inside the MicrosoftGraphItemActivity_Actor as the provided MicrosoftGraphIdentitySet
func (t *MicrosoftGraphItemActivity_Actor) FromMicrosoftGraphIdentitySet(v MicrosoftGraphIdentitySet) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphIdentitySet performs a merge with any union data inside the MicrosoftGraphItemActivity_Actor, using the provided MicrosoftGraphIdentitySet
func (t *MicrosoftGraphItemActivity_Actor) MergeMicrosoftGraphIdentitySet(v MicrosoftGraphIdentitySet) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsMicrosoftGraphItemActivityActor1 returns the union data inside the MicrosoftGraphItemActivity_Actor as a MicrosoftGraphItemActivityActor1
func (t MicrosoftGraphItemActivity_Actor) AsMicrosoftGraphItemActivityActor1() (MicrosoftGraphItemActivityActor1, error) {
	var body MicrosoftGraphItemActivityActor1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphItemActivityActor1 overwrites any union data inside the MicrosoftGraphItemActivity_Actor as the provided MicrosoftGraphItemActivityActor1
func (t *MicrosoftGraphItemActivity_Actor) FromMicrosoftGraphItemActivityActor1(v MicrosoftGraphItemActivityActor1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphItemActivityActor1 performs a merge with any union data inside the MicrosoftGraphItemActivity_Actor, using the provided MicrosoftGraphItemActivityActor1
func (t *MicrosoftGraphItemActivity_Actor) MergeMicrosoftGraphItemActivityActor1(v MicrosoftGraphItemActivityActor1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

func (t MicrosoftGraphItemActivity_Actor) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *MicrosoftGraphItemActivity_Actor) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsMicrosoftGraphDriveItem returns the union data inside the MicrosoftGraphItemActivity_DriveItem as a MicrosoftGraphDriveItem
func (t MicrosoftGraphItemActivity_DriveItem) AsMicrosoftGraphDriveItem() (MicrosoftGraphDriveItem, error) {
	var body MicrosoftGraphDriveItem
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphDriveItem overwrites any union data inside the MicrosoftGraphItemActivity_DriveItem as the provided MicrosoftGraphDriveItem
func (t *MicrosoftGraphItemActivity_DriveItem) FromMicrosoftGraphDriveItem(v MicrosoftGraphDriveItem) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphDriveItem performs a merge with any union data inside the MicrosoftGraphItemActivity_DriveItem, using the provided MicrosoftGraphDriveItem
func (t *MicrosoftGraphItemActivity_DriveItem) MergeMicrosoftGraphDriveItem(v MicrosoftGraphDriveItem) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsMicrosoftGraphItemActivityDriveItem1 returns the union data inside the MicrosoftGraphItemActivity_DriveItem as a MicrosoftGraphItemActivityDriveItem1
func (t MicrosoftGraphItemActivity_DriveItem) AsMicrosoftGraphItemActivityDriveItem1() (MicrosoftGraphItemActivityDriveItem1, error) {
	var body MicrosoftGraphItemActivityDriveItem1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphItemActivityDriveItem1 overwrites any union data inside the MicrosoftGraphItemActivity_DriveItem as the provided MicrosoftGraphItemActivityDriveItem1
func (t *MicrosoftGraphItemActivity_DriveItem) FromMicrosoftGraphItemActivityDriveItem1(v MicrosoftGraphItemActivityDriveItem1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphItemActivityDriveItem1 performs a merge with any union data inside the MicrosoftGraphItemActivity_DriveItem, using the provided MicrosoftGraphItemActivityDriveItem1
func (t *MicrosoftGraphItemActivity_DriveItem) MergeMicrosoftGraphItemActivityDriveItem1(v MicrosoftGraphItemActivityDriveItem1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

func (t MicrosoftGraphItemActivity_DriveItem) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *MicrosoftGraphItemActivity_DriveItem) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsMicrosoftGraphItemActionStat returns the union data inside the MicrosoftGraphItemActivityStat_Access as a MicrosoftGraphItemActionStat
func (t MicrosoftGraphItemActivityStat_Access) AsMicrosoftGraphItemActionStat() (MicrosoftGraphItemActionStat, error) {
	var body MicrosoftGraphItemActionStat
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphItemActionStat overwrites any union data inside the MicrosoftGraphItemActivityStat_Access as the provided MicrosoftGraphItemActionStat
func (t *MicrosoftGraphItemActivityStat_Access) FromMicrosoftGraphItemActionStat(v MicrosoftGraphItemActionStat) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphItemActionStat performs a merge with any union data inside the MicrosoftGraphItemActivityStat_Access, using the provided MicrosoftGraphItemActionStat
func (t *MicrosoftGraphItemActivityStat_Access) MergeMicrosoftGraphItemActionStat(v MicrosoftGraphItemActionStat) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsMicrosoftGraphItemActivityStatAccess1 returns the union data inside the MicrosoftGraphItemActivityStat_Access as a MicrosoftGraphItemActivityStatAccess1
func (t MicrosoftGraphItemActivityStat_Access) AsMicrosoftGraphItemActivityStatAccess1() (MicrosoftGraphItemActivityStatAccess1, error) {
	var body MicrosoftGraphItemActivityStatAccess1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphItemActivityStatAccess1 overwrites any union data inside the MicrosoftGraphItemActivityStat_Access as the provided MicrosoftGraphItemActivityStatAccess1
func (t *MicrosoftGraphItemActivityStat_Access) FromMicrosoftGraphItemActivityStatAccess1(v MicrosoftGraphItemActivityStatAccess1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphItemActivityStatAccess1 performs a merge with any union data inside the MicrosoftGraphItemActivityStat_Access, using the provided MicrosoftGraphItemActivityStatAccess1
func (t *MicrosoftGraphItemActivityStat_Access) MergeMicrosoftGraphItemActivityStatAccess1(v MicrosoftGraphItemActivityStatAccess1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

func (t MicrosoftGraphItemActivityStat_Access) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *MicrosoftGraphItemActivityStat_Access) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsMicrosoftGraphItemActionStat returns the union data inside the MicrosoftGraphItemActivityStat_Create as a MicrosoftGraphItemActionStat
func (t MicrosoftGraphItemActivityStat_Create) AsMicrosoftGraphItemActionStat() (MicrosoftGraphItemActionStat, error) {
	var body MicrosoftGraphItemActionStat
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphItemActionStat overwrites any union data inside the MicrosoftGraphItemActivityStat_Create as the provided MicrosoftGraphItemActionStat
func (t *MicrosoftGraphItemActivityStat_Create) FromMicrosoftGraphItemActionStat(v MicrosoftGraphItemActionStat) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphItemActionStat performs a merge with any union data inside the MicrosoftGraphItemActivityStat_Create, using the provided MicrosoftGraphItemActionStat
func (t *MicrosoftGraphItemActivityStat_Create) MergeMicrosoftGraphItemActionStat(v MicrosoftGraphItemActionStat) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsMicrosoftGraphItemActivityStatCreate1 returns the union data inside the MicrosoftGraphItemActivityStat_Create as a MicrosoftGraphItemActivityStatCreate1
func (t MicrosoftGraphItemActivityStat_Create) AsMicrosoftGraphItemActivityStatCreate1() (MicrosoftGraphItemActivityStatCreate1, error) {
	var body MicrosoftGraphItemActivityStatCreate1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphItemActivityStatCreate1 overwrites any union data inside the MicrosoftGraphItemActivityStat_Create as the provided MicrosoftGraphItemActivityStatCreate1
func (t *MicrosoftGraphItemActivityStat_Create) FromMicrosoftGraphItemActivityStatCreate1(v MicrosoftGraphItemActivityStatCreate1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphItemActivityStatCreate1 performs a merge with any union data inside the MicrosoftGraphItemActivityStat_Create, using the provided MicrosoftGraphItemActivityStatCreate1
func (t *MicrosoftGraphItemActivityStat_Create) MergeMicrosoftGraphItemActivityStatCreate1(v MicrosoftGraphItemActivityStatCreate1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

func (t MicrosoftGraphItemActivityStat_Create) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *MicrosoftGraphItemActivityStat_Create) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsMicrosoftGraphItemActionStat returns the union data inside the MicrosoftGraphItemActivityStat_Delete as a MicrosoftGraphItemActionStat
func (t MicrosoftGraphItemActivityStat_Delete) AsMicrosoftGraphItemActionStat() (MicrosoftGraphItemActionStat, error) {
	var body MicrosoftGraphItemActionStat
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphItemActionStat overwrites any union data inside the MicrosoftGraphItemActivityStat_Delete as the provided MicrosoftGraphItemActionStat
func (t *MicrosoftGraphItemActivityStat_Delete) FromMicrosoftGraphItemActionStat(v MicrosoftGraphItemActionStat) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphItemActionStat performs a merge with any union data inside the MicrosoftGraphItemActivityStat_Delete, using the provided MicrosoftGraphItemActionStat
func (t *MicrosoftGraphItemActivityStat_Delete) MergeMicrosoftGraphItemActionStat(v MicrosoftGraphItemActionStat) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsMicrosoftGraphItemActivityStatDelete1 returns the union data inside the MicrosoftGraphItemActivityStat_Delete as a MicrosoftGraphItemActivityStatDelete1
func (t MicrosoftGraphItemActivityStat_Delete) AsMicrosoftGraphItemActivityStatDelete1() (MicrosoftGraphItemActivityStatDelete1, error) {
	var body MicrosoftGraphItemActivityStatDelete1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphItemActivityStatDelete1 overwrites any union data inside the MicrosoftGraphItemActivityStat_Delete as the provided MicrosoftGraphItemActivityStatDelete1
func (t *MicrosoftGraphItemActivityStat_Delete) FromMicrosoftGraphItemActivityStatDelete1(v MicrosoftGraphItemActivityStatDelete1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphItemActivityStatDelete1 performs a merge with any union data inside the MicrosoftGraphItemActivityStat_Delete, using the provided MicrosoftGraphItemActivityStatDelete1
func (t *MicrosoftGraphItemActivityStat_Delete) MergeMicrosoftGraphItemActivityStatDelete1(v MicrosoftGraphItemActivityStatDelete1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

func (t MicrosoftGraphItemActivityStat_Delete) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *MicrosoftGraphItemActivityStat_Delete) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsMicrosoftGraphItemActionStat returns the union data inside the MicrosoftGraphItemActivityStat_Edit as a MicrosoftGraphItemActionStat
func (t MicrosoftGraphItemActivityStat_Edit) AsMicrosoftGraphItemActionStat() (MicrosoftGraphItemActionStat, error) {
	var body MicrosoftGraphItemActionStat
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphItemActionStat overwrites any union data inside the MicrosoftGraphItemActivityStat_Edit as the provided MicrosoftGraphItemActionStat
func (t *MicrosoftGraphItemActivityStat_Edit) FromMicrosoftGraphItemActionStat(v MicrosoftGraphItemActionStat) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphItemActionStat performs a merge with any union data inside the MicrosoftGraphItemActivityStat_Edit, using the provided MicrosoftGraphItemActionStat
func (t *MicrosoftGraphItemActivityStat_Edit) MergeMicrosoftGraphItemActionStat(v MicrosoftGraphItemActionStat) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsMicrosoftGraphItemActivityStatEdit1 returns the union data inside the MicrosoftGraphItemActivityStat_Edit as a MicrosoftGraphItemActivityStatEdit1
func (t MicrosoftGraphItemActivityStat_Edit) AsMicrosoftGraphItemActivityStatEdit1() (MicrosoftGraphItemActivityStatEdit1, error) {
	var body MicrosoftGraphItemActivityStatEdit1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphItemActivityStatEdit1 overwrites any union data inside the MicrosoftGraphItemActivityStat_Edit as the provided MicrosoftGraphItemActivityStatEdit1
func (t *MicrosoftGraphItemActivityStat_Edit) FromMicrosoftGraphItemActivityStatEdit1(v MicrosoftGraphItemActivityStatEdit1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphItemActivityStatEdit1 performs a merge with any union data inside the MicrosoftGraphItemActivityStat_Edit, using the provided MicrosoftGraphItemActivityStatEdit1
func (t *MicrosoftGraphItemActivityStat_Edit) MergeMicrosoftGraphItemActivityStatEdit1(v MicrosoftGraphItemActivityStatEdit1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

func (t MicrosoftGraphItemActivityStat_Edit) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *MicrosoftGraphItemActivityStat_Edit) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsMicrosoftGraphIncompleteData returns the union data inside the MicrosoftGraphItemActivityStat_IncompleteData as a MicrosoftGraphIncompleteData
func (t MicrosoftGraphItemActivityStat_IncompleteData) AsMicrosoftGraphIncompleteData() (MicrosoftGraphIncompleteData, error) {
	var body MicrosoftGraphIncompleteData
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphIncompleteData overwrites any union data inside the MicrosoftGraphItemActivityStat_IncompleteData as the provided MicrosoftGraphIncompleteData
func (t *MicrosoftGraphItemActivityStat_IncompleteData) FromMicrosoftGraphIncompleteData(v MicrosoftGraphIncompleteData) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphIncompleteData performs a merge with any union data inside the MicrosoftGraphItemActivityStat_IncompleteData, using the provided MicrosoftGraphIncompleteData
func (t *MicrosoftGraphItemActivityStat_IncompleteData) MergeMicrosoftGraphIncompleteData(v MicrosoftGraphIncompleteData) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsMicrosoftGraphItemActivityStatIncompleteData1 returns the union data inside the MicrosoftGraphItemActivityStat_IncompleteData as a MicrosoftGraphItemActivityStatIncompleteData1
func (t MicrosoftGraphItemActivityStat_IncompleteData) AsMicrosoftGraphItemActivityStatIncompleteData1() (MicrosoftGraphItemActivityStatIncompleteData1, error) {
	var body MicrosoftGraphItemActivityStatIncompleteData1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphItemActivityStatIncompleteData1 overwrites any union data inside the MicrosoftGraphItemActivityStat_IncompleteData as the provided MicrosoftGraphItemActivityStatIncompleteData1
func (t *MicrosoftGraphItemActivityStat_IncompleteData) FromMicrosoftGraphItemActivityStatIncompleteData1(v MicrosoftGraphItemActivityStatIncompleteData1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphItemActivityStatIncompleteData1 performs a merge with any union data inside the MicrosoftGraphItemActivityStat_IncompleteData, using the provided MicrosoftGraphItemActivityStatIncompleteData1
func (t *MicrosoftGraphItemActivityStat_IncompleteData) MergeMicrosoftGraphItemActivityStatIncompleteData1(v MicrosoftGraphItemActivityStatIncompleteData1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

func (t MicrosoftGraphItemActivityStat_IncompleteData) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *MicrosoftGraphItemActivityStat_IncompleteData) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsMicrosoftGraphItemActionStat returns the union data inside the MicrosoftGraphItemActivityStat_Move as a MicrosoftGraphItemActionStat
func (t MicrosoftGraphItemActivityStat_Move) AsMicrosoftGraphItemActionStat() (MicrosoftGraphItemActionStat, error) {
	var body MicrosoftGraphItemActionStat
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphItemActionStat overwrites any union data inside the MicrosoftGraphItemActivityStat_Move as the provided MicrosoftGraphItemActionStat
func (t *MicrosoftGraphItemActivityStat_Move) FromMicrosoftGraphItemActionStat(v MicrosoftGraphItemActionStat) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphItemActionStat performs a merge with any union data inside the MicrosoftGraphItemActivityStat_Move, using the provided MicrosoftGraphItemActionStat
func (t *MicrosoftGraphItemActivityStat_Move) MergeMicrosoftGraphItemActionStat(v MicrosoftGraphItemActionStat) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsMicrosoftGraphItemActivityStatMove1 returns the union data inside the MicrosoftGraphItemActivityStat_Move as a MicrosoftGraphItemActivityStatMove1
func (t MicrosoftGraphItemActivityStat_Move) AsMicrosoftGraphItemActivityStatMove1() (MicrosoftGraphItemActivityStatMove1, error) {
	var body MicrosoftGraphItemActivityStatMove1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphItemActivityStatMove1 overwrites any union data inside the MicrosoftGraphItemActivityStat_Move as the provided MicrosoftGraphItemActivityStatMove1
func (t *MicrosoftGraphItemActivityStat_Move) FromMicrosoftGraphItemActivityStatMove1(v MicrosoftGraphItemActivityStatMove1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphItemActivityStatMove1 performs a merge with any union data inside the MicrosoftGraphItemActivityStat_Move, using the provided MicrosoftGraphItemActivityStatMove1
func (t *MicrosoftGraphItemActivityStat_Move) MergeMicrosoftGraphItemActivityStatMove1(v MicrosoftGraphItemActivityStatMove1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

func (t MicrosoftGraphItemActivityStat_Move) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *MicrosoftGraphItemActivityStat_Move) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsMicrosoftGraphItemActivityStat returns the union data inside the MicrosoftGraphItemAnalytics_AllTime as a MicrosoftGraphItemActivityStat
func (t MicrosoftGraphItemAnalytics_AllTime) AsMicrosoftGraphItemActivityStat() (MicrosoftGraphItemActivityStat, error) {
	var body MicrosoftGraphItemActivityStat
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphItemActivityStat overwrites any union data inside the MicrosoftGraphItemAnalytics_AllTime as the provided MicrosoftGraphItemActivityStat
func (t *MicrosoftGraphItemAnalytics_AllTime) FromMicrosoftGraphItemActivityStat(v MicrosoftGraphItemActivityStat) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphItemActivityStat performs a merge with any union data inside the MicrosoftGraphItemAnalytics_AllTime, using the provided MicrosoftGraphItemActivityStat
func (t *MicrosoftGraphItemAnalytics_AllTime) MergeMicrosoftGraphItemActivityStat(v MicrosoftGraphItemActivityStat) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsMicrosoftGraphItemAnalyticsAllTime1 returns the union data inside the MicrosoftGraphItemAnalytics_AllTime as a MicrosoftGraphItemAnalyticsAllTime1
func (t MicrosoftGraphItemAnalytics_AllTime) AsMicrosoftGraphItemAnalyticsAllTime1() (MicrosoftGraphItemAnalyticsAllTime1, error) {
	var body MicrosoftGraphItemAnalyticsAllTime1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphItemAnalyticsAllTime1 overwrites any union data inside the MicrosoftGraphItemAnalytics_AllTime as the provided MicrosoftGraphItemAnalyticsAllTime1
func (t *MicrosoftGraphItemAnalytics_AllTime) FromMicrosoftGraphItemAnalyticsAllTime1(v MicrosoftGraphItemAnalyticsAllTime1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphItemAnalyticsAllTime1 performs a merge with any union data inside the MicrosoftGraphItemAnalytics_AllTime, using the provided MicrosoftGraphItemAnalyticsAllTime1
func (t *MicrosoftGraphItemAnalytics_AllTime) MergeMicrosoftGraphItemAnalyticsAllTime1(v MicrosoftGraphItemAnalyticsAllTime1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

func (t MicrosoftGraphItemAnalytics_AllTime) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *MicrosoftGraphItemAnalytics_AllTime) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsMicrosoftGraphItemActivityStat returns the union data inside the MicrosoftGraphItemAnalytics_LastSevenDays as a MicrosoftGraphItemActivityStat
func (t MicrosoftGraphItemAnalytics_LastSevenDays) AsMicrosoftGraphItemActivityStat() (MicrosoftGraphItemActivityStat, error) {
	var body MicrosoftGraphItemActivityStat
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphItemActivityStat overwrites any union data inside the MicrosoftGraphItemAnalytics_LastSevenDays as the provided MicrosoftGraphItemActivityStat
func (t *MicrosoftGraphItemAnalytics_LastSevenDays) FromMicrosoftGraphItemActivityStat(v MicrosoftGraphItemActivityStat) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphItemActivityStat performs a merge with any union data inside the MicrosoftGraphItemAnalytics_LastSevenDays, using the provided MicrosoftGraphItemActivityStat
func (t *MicrosoftGraphItemAnalytics_LastSevenDays) MergeMicrosoftGraphItemActivityStat(v MicrosoftGraphItemActivityStat) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsMicrosoftGraphItemAnalyticsLastSevenDays1 returns the union data inside the MicrosoftGraphItemAnalytics_LastSevenDays as a MicrosoftGraphItemAnalyticsLastSevenDays1
func (t MicrosoftGraphItemAnalytics_LastSevenDays) AsMicrosoftGraphItemAnalyticsLastSevenDays1() (MicrosoftGraphItemAnalyticsLastSevenDays1, error) {
	var body MicrosoftGraphItemAnalyticsLastSevenDays1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphItemAnalyticsLastSevenDays1 overwrites any union data inside the MicrosoftGraphItemAnalytics_LastSevenDays as the provided MicrosoftGraphItemAnalyticsLastSevenDays1
func (t *MicrosoftGraphItemAnalytics_LastSevenDays) FromMicrosoftGraphItemAnalyticsLastSevenDays1(v MicrosoftGraphItemAnalyticsLastSevenDays1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphItemAnalyticsLastSevenDays1 performs a merge with any union data inside the MicrosoftGraphItemAnalytics_LastSevenDays, using the provided MicrosoftGraphItemAnalyticsLastSevenDays1
func (t *MicrosoftGraphItemAnalytics_LastSevenDays) MergeMicrosoftGraphItemAnalyticsLastSevenDays1(v MicrosoftGraphItemAnalyticsLastSevenDays1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

func (t MicrosoftGraphItemAnalytics_LastSevenDays) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *MicrosoftGraphItemAnalytics_LastSevenDays) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsMicrosoftGraphBodyType returns the union data inside the MicrosoftGraphItemBody_ContentType as a MicrosoftGraphBodyType
func (t MicrosoftGraphItemBody_ContentType) AsMicrosoftGraphBodyType() (MicrosoftGraphBodyType, error) {
	var body MicrosoftGraphBodyType
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphBodyType overwrites any union data inside the MicrosoftGraphItemBody_ContentType as the provided MicrosoftGraphBodyType
func (t *MicrosoftGraphItemBody_ContentType) FromMicrosoftGraphBodyType(v MicrosoftGraphBodyType) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphBodyType performs a merge with any union data inside the MicrosoftGraphItemBody_ContentType, using the provided MicrosoftGraphBodyType
func (t *MicrosoftGraphItemBody_ContentType) MergeMicrosoftGraphBodyType(v MicrosoftGraphBodyType) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsMicrosoftGraphItemBodyContentType1 returns the union data inside the MicrosoftGraphItemBody_ContentType as a MicrosoftGraphItemBodyContentType1
func (t MicrosoftGraphItemBody_ContentType) AsMicrosoftGraphItemBodyContentType1() (MicrosoftGraphItemBodyContentType1, error) {
	var body MicrosoftGraphItemBodyContentType1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphItemBodyContentType1 overwrites any union data inside the MicrosoftGraphItemBody_ContentType as the provided MicrosoftGraphItemBodyContentType1
func (t *MicrosoftGraphItemBody_ContentType) FromMicrosoftGraphItemBodyContentType1(v MicrosoftGraphItemBodyContentType1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphItemBodyContentType1 performs a merge with any union data inside the MicrosoftGraphItemBody_ContentType, using the provided MicrosoftGraphItemBodyContentType1
func (t *MicrosoftGraphItemBody_ContentType) MergeMicrosoftGraphItemBodyContentType1(v MicrosoftGraphItemBodyContentType1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

func (t MicrosoftGraphItemBody_ContentType) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *MicrosoftGraphItemBody_ContentType) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsMicrosoftGraphSharepointIds returns the union data inside the MicrosoftGraphItemReference_SharepointIds as a MicrosoftGraphSharepointIds
func (t MicrosoftGraphItemReference_SharepointIds) AsMicrosoftGraphSharepointIds() (MicrosoftGraphSharepointIds, error) {
	var body MicrosoftGraphSharepointIds
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphSharepointIds overwrites any union data inside the MicrosoftGraphItemReference_SharepointIds as the provided MicrosoftGraphSharepointIds
func (t *MicrosoftGraphItemReference_SharepointIds) FromMicrosoftGraphSharepointIds(v MicrosoftGraphSharepointIds) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphSharepointIds performs a merge with any union data inside the MicrosoftGraphItemReference_SharepointIds, using the provided MicrosoftGraphSharepointIds
func (t *MicrosoftGraphItemReference_SharepointIds) MergeMicrosoftGraphSharepointIds(v MicrosoftGraphSharepointIds) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsMicrosoftGraphItemReferenceSharepointIds1 returns the union data inside the MicrosoftGraphItemReference_SharepointIds as a MicrosoftGraphItemReferenceSharepointIds1
func (t MicrosoftGraphItemReference_SharepointIds) AsMicrosoftGraphItemReferenceSharepointIds1() (MicrosoftGraphItemReferenceSharepointIds1, error) {
	var body MicrosoftGraphItemReferenceSharepointIds1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphItemReferenceSharepointIds1 overwrites any union data inside the MicrosoftGraphItemReference_SharepointIds as the provided MicrosoftGraphItemReferenceSharepointIds1
func (t *MicrosoftGraphItemReference_SharepointIds) FromMicrosoftGraphItemReferenceSharepointIds1(v MicrosoftGraphItemReferenceSharepointIds1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphItemReferenceSharepointIds1 performs a merge with any union data inside the MicrosoftGraphItemReference_SharepointIds, using the provided MicrosoftGraphItemReferenceSharepointIds1
func (t *MicrosoftGraphItemReference_SharepointIds) MergeMicrosoftGraphItemReferenceSharepointIds1(v MicrosoftGraphItemReferenceSharepointIds1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

func (t MicrosoftGraphItemReference_SharepointIds) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *MicrosoftGraphItemReference_SharepointIds) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsMicrosoftGraphCourseStatus returns the union data inside the MicrosoftGraphLearningCourseActivity_Status as a MicrosoftGraphCourseStatus
func (t MicrosoftGraphLearningCourseActivity_Status) AsMicrosoftGraphCourseStatus() (MicrosoftGraphCourseStatus, error) {
	var body MicrosoftGraphCourseStatus
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphCourseStatus overwrites any union data inside the MicrosoftGraphLearningCourseActivity_Status as the provided MicrosoftGraphCourseStatus
func (t *MicrosoftGraphLearningCourseActivity_Status) FromMicrosoftGraphCourseStatus(v MicrosoftGraphCourseStatus) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphCourseStatus performs a merge with any union data inside the MicrosoftGraphLearningCourseActivity_Status, using the provided MicrosoftGraphCourseStatus
func (t *MicrosoftGraphLearningCourseActivity_Status) MergeMicrosoftGraphCourseStatus(v MicrosoftGraphCourseStatus) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsMicrosoftGraphLearningCourseActivityStatus1 returns the union data inside the MicrosoftGraphLearningCourseActivity_Status as a MicrosoftGraphLearningCourseActivityStatus1
func (t MicrosoftGraphLearningCourseActivity_Status) AsMicrosoftGraphLearningCourseActivityStatus1() (MicrosoftGraphLearningCourseActivityStatus1, error) {
	var body MicrosoftGraphLearningCourseActivityStatus1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphLearningCourseActivityStatus1 overwrites any union data inside the MicrosoftGraphLearningCourseActivity_Status as the provided MicrosoftGraphLearningCourseActivityStatus1
func (t *MicrosoftGraphLearningCourseActivity_Status) FromMicrosoftGraphLearningCourseActivityStatus1(v MicrosoftGraphLearningCourseActivityStatus1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphLearningCourseActivityStatus1 performs a merge with any union data inside the MicrosoftGraphLearningCourseActivity_Status, using the provided MicrosoftGraphLearningCourseActivityStatus1
func (t *MicrosoftGraphLearningCourseActivity_Status) MergeMicrosoftGraphLearningCourseActivityStatus1(v MicrosoftGraphLearningCourseActivityStatus1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

func (t MicrosoftGraphLearningCourseActivity_Status) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *MicrosoftGraphLearningCourseActivity_Status) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsMicrosoftGraphIdentitySet returns the union data inside the MicrosoftGraphList_CreatedBy as a MicrosoftGraphIdentitySet
func (t MicrosoftGraphList_CreatedBy) AsMicrosoftGraphIdentitySet() (MicrosoftGraphIdentitySet, error) {
	var body MicrosoftGraphIdentitySet
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphIdentitySet overwrites any union data inside the MicrosoftGraphList_CreatedBy as the provided MicrosoftGraphIdentitySet
func (t *MicrosoftGraphList_CreatedBy) FromMicrosoftGraphIdentitySet(v MicrosoftGraphIdentitySet) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphIdentitySet performs a merge with any union data inside the MicrosoftGraphList_CreatedBy, using the provided MicrosoftGraphIdentitySet
func (t *MicrosoftGraphList_CreatedBy) MergeMicrosoftGraphIdentitySet(v MicrosoftGraphIdentitySet) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsMicrosoftGraphListCreatedBy1 returns the union data inside the MicrosoftGraphList_CreatedBy as a MicrosoftGraphListCreatedBy1
func (t MicrosoftGraphList_CreatedBy) AsMicrosoftGraphListCreatedBy1() (MicrosoftGraphListCreatedBy1, error) {
	var body MicrosoftGraphListCreatedBy1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphListCreatedBy1 overwrites any union data inside the MicrosoftGraphList_CreatedBy as the provided MicrosoftGraphListCreatedBy1
func (t *MicrosoftGraphList_CreatedBy) FromMicrosoftGraphListCreatedBy1(v MicrosoftGraphListCreatedBy1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphListCreatedBy1 performs a merge with any union data inside the MicrosoftGraphList_CreatedBy, using the provided MicrosoftGraphListCreatedBy1
func (t *MicrosoftGraphList_CreatedBy) MergeMicrosoftGraphListCreatedBy1(v MicrosoftGraphListCreatedBy1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

func (t MicrosoftGraphList_CreatedBy) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *MicrosoftGraphList_CreatedBy) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsMicrosoftGraphUser returns the union data inside the MicrosoftGraphList_CreatedByUser as a MicrosoftGraphUser
func (t MicrosoftGraphList_CreatedByUser) AsMicrosoftGraphUser() (MicrosoftGraphUser, error) {
	var body MicrosoftGraphUser
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphUser overwrites any union data inside the MicrosoftGraphList_CreatedByUser as the provided MicrosoftGraphUser
func (t *MicrosoftGraphList_CreatedByUser) FromMicrosoftGraphUser(v MicrosoftGraphUser) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphUser performs a merge with any union data inside the MicrosoftGraphList_CreatedByUser, using the provided MicrosoftGraphUser
func (t *MicrosoftGraphList_CreatedByUser) MergeMicrosoftGraphUser(v MicrosoftGraphUser) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsMicrosoftGraphListCreatedByUser1 returns the union data inside the MicrosoftGraphList_CreatedByUser as a MicrosoftGraphListCreatedByUser1
func (t MicrosoftGraphList_CreatedByUser) AsMicrosoftGraphListCreatedByUser1() (MicrosoftGraphListCreatedByUser1, error) {
	var body MicrosoftGraphListCreatedByUser1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphListCreatedByUser1 overwrites any union data inside the MicrosoftGraphList_CreatedByUser as the provided MicrosoftGraphListCreatedByUser1
func (t *MicrosoftGraphList_CreatedByUser) FromMicrosoftGraphListCreatedByUser1(v MicrosoftGraphListCreatedByUser1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphListCreatedByUser1 performs a merge with any union data inside the MicrosoftGraphList_CreatedByUser, using the provided MicrosoftGraphListCreatedByUser1
func (t *MicrosoftGraphList_CreatedByUser) MergeMicrosoftGraphListCreatedByUser1(v MicrosoftGraphListCreatedByUser1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

func (t MicrosoftGraphList_CreatedByUser) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *MicrosoftGraphList_CreatedByUser) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsMicrosoftGraphDrive returns the union data inside the MicrosoftGraphList_Drive as a MicrosoftGraphDrive
func (t MicrosoftGraphList_Drive) AsMicrosoftGraphDrive() (MicrosoftGraphDrive, error) {
	var body MicrosoftGraphDrive
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphDrive overwrites any union data inside the MicrosoftGraphList_Drive as the provided MicrosoftGraphDrive
func (t *MicrosoftGraphList_Drive) FromMicrosoftGraphDrive(v MicrosoftGraphDrive) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphDrive performs a merge with any union data inside the MicrosoftGraphList_Drive, using the provided MicrosoftGraphDrive
func (t *MicrosoftGraphList_Drive) MergeMicrosoftGraphDrive(v MicrosoftGraphDrive) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsMicrosoftGraphListDrive1 returns the union data inside the MicrosoftGraphList_Drive as a MicrosoftGraphListDrive1
func (t MicrosoftGraphList_Drive) AsMicrosoftGraphListDrive1() (MicrosoftGraphListDrive1, error) {
	var body MicrosoftGraphListDrive1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphListDrive1 overwrites any union data inside the MicrosoftGraphList_Drive as the provided MicrosoftGraphListDrive1
func (t *MicrosoftGraphList_Drive) FromMicrosoftGraphListDrive1(v MicrosoftGraphListDrive1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphListDrive1 performs a merge with any union data inside the MicrosoftGraphList_Drive, using the provided MicrosoftGraphListDrive1
func (t *MicrosoftGraphList_Drive) MergeMicrosoftGraphListDrive1(v MicrosoftGraphListDrive1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

func (t MicrosoftGraphList_Drive) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *MicrosoftGraphList_Drive) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsMicrosoftGraphIdentitySet returns the union data inside the MicrosoftGraphList_LastModifiedBy as a MicrosoftGraphIdentitySet
func (t MicrosoftGraphList_LastModifiedBy) AsMicrosoftGraphIdentitySet() (MicrosoftGraphIdentitySet, error) {
	var body MicrosoftGraphIdentitySet
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphIdentitySet overwrites any union data inside the MicrosoftGraphList_LastModifiedBy as the provided MicrosoftGraphIdentitySet
func (t *MicrosoftGraphList_LastModifiedBy) FromMicrosoftGraphIdentitySet(v MicrosoftGraphIdentitySet) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphIdentitySet performs a merge with any union data inside the MicrosoftGraphList_LastModifiedBy, using the provided MicrosoftGraphIdentitySet
func (t *MicrosoftGraphList_LastModifiedBy) MergeMicrosoftGraphIdentitySet(v MicrosoftGraphIdentitySet) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsMicrosoftGraphListLastModifiedBy1 returns the union data inside the MicrosoftGraphList_LastModifiedBy as a MicrosoftGraphListLastModifiedBy1
func (t MicrosoftGraphList_LastModifiedBy) AsMicrosoftGraphListLastModifiedBy1() (MicrosoftGraphListLastModifiedBy1, error) {
	var body MicrosoftGraphListLastModifiedBy1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphListLastModifiedBy1 overwrites any union data inside the MicrosoftGraphList_LastModifiedBy as the provided MicrosoftGraphListLastModifiedBy1
func (t *MicrosoftGraphList_LastModifiedBy) FromMicrosoftGraphListLastModifiedBy1(v MicrosoftGraphListLastModifiedBy1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphListLastModifiedBy1 performs a merge with any union data inside the MicrosoftGraphList_LastModifiedBy, using the provided MicrosoftGraphListLastModifiedBy1
func (t *MicrosoftGraphList_LastModifiedBy) MergeMicrosoftGraphListLastModifiedBy1(v MicrosoftGraphListLastModifiedBy1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

func (t MicrosoftGraphList_LastModifiedBy) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *MicrosoftGraphList_LastModifiedBy) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsMicrosoftGraphUser returns the union data inside the MicrosoftGraphList_LastModifiedByUser as a MicrosoftGraphUser
func (t MicrosoftGraphList_LastModifiedByUser) AsMicrosoftGraphUser() (MicrosoftGraphUser, error) {
	var body MicrosoftGraphUser
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphUser overwrites any union data inside the MicrosoftGraphList_LastModifiedByUser as the provided MicrosoftGraphUser
func (t *MicrosoftGraphList_LastModifiedByUser) FromMicrosoftGraphUser(v MicrosoftGraphUser) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphUser performs a merge with any union data inside the MicrosoftGraphList_LastModifiedByUser, using the provided MicrosoftGraphUser
func (t *MicrosoftGraphList_LastModifiedByUser) MergeMicrosoftGraphUser(v MicrosoftGraphUser) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsMicrosoftGraphListLastModifiedByUser1 returns the union data inside the MicrosoftGraphList_LastModifiedByUser as a MicrosoftGraphListLastModifiedByUser1
func (t MicrosoftGraphList_LastModifiedByUser) AsMicrosoftGraphListLastModifiedByUser1() (MicrosoftGraphListLastModifiedByUser1, error) {
	var body MicrosoftGraphListLastModifiedByUser1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphListLastModifiedByUser1 overwrites any union data inside the MicrosoftGraphList_LastModifiedByUser as the provided MicrosoftGraphListLastModifiedByUser1
func (t *MicrosoftGraphList_LastModifiedByUser) FromMicrosoftGraphListLastModifiedByUser1(v MicrosoftGraphListLastModifiedByUser1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphListLastModifiedByUser1 performs a merge with any union data inside the MicrosoftGraphList_LastModifiedByUser, using the provided MicrosoftGraphListLastModifiedByUser1
func (t *MicrosoftGraphList_LastModifiedByUser) MergeMicrosoftGraphListLastModifiedByUser1(v MicrosoftGraphListLastModifiedByUser1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

func (t MicrosoftGraphList_LastModifiedByUser) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *MicrosoftGraphList_LastModifiedByUser) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsMicrosoftGraphListInfo returns the union data inside the MicrosoftGraphList_List as a MicrosoftGraphListInfo
func (t MicrosoftGraphList_List) AsMicrosoftGraphListInfo() (MicrosoftGraphListInfo, error) {
	var body MicrosoftGraphListInfo
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphListInfo overwrites any union data inside the MicrosoftGraphList_List as the provided MicrosoftGraphListInfo
func (t *MicrosoftGraphList_List) FromMicrosoftGraphListInfo(v MicrosoftGraphListInfo) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphListInfo performs a merge with any union data inside the MicrosoftGraphList_List, using the provided MicrosoftGraphListInfo
func (t *MicrosoftGraphList_List) MergeMicrosoftGraphListInfo(v MicrosoftGraphListInfo) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsMicrosoftGraphListList1 returns the union data inside the MicrosoftGraphList_List as a MicrosoftGraphListList1
func (t MicrosoftGraphList_List) AsMicrosoftGraphListList1() (MicrosoftGraphListList1, error) {
	var body MicrosoftGraphListList1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphListList1 overwrites any union data inside the MicrosoftGraphList_List as the provided MicrosoftGraphListList1
func (t *MicrosoftGraphList_List) FromMicrosoftGraphListList1(v MicrosoftGraphListList1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphListList1 performs a merge with any union data inside the MicrosoftGraphList_List, using the provided MicrosoftGraphListList1
func (t *MicrosoftGraphList_List) MergeMicrosoftGraphListList1(v MicrosoftGraphListList1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

func (t MicrosoftGraphList_List) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *MicrosoftGraphList_List) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsMicrosoftGraphItemReference returns the union data inside the MicrosoftGraphList_ParentReference as a MicrosoftGraphItemReference
func (t MicrosoftGraphList_ParentReference) AsMicrosoftGraphItemReference() (MicrosoftGraphItemReference, error) {
	var body MicrosoftGraphItemReference
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphItemReference overwrites any union data inside the MicrosoftGraphList_ParentReference as the provided MicrosoftGraphItemReference
func (t *MicrosoftGraphList_ParentReference) FromMicrosoftGraphItemReference(v MicrosoftGraphItemReference) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphItemReference performs a merge with any union data inside the MicrosoftGraphList_ParentReference, using the provided MicrosoftGraphItemReference
func (t *MicrosoftGraphList_ParentReference) MergeMicrosoftGraphItemReference(v MicrosoftGraphItemReference) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsMicrosoftGraphListParentReference1 returns the union data inside the MicrosoftGraphList_ParentReference as a MicrosoftGraphListParentReference1
func (t MicrosoftGraphList_ParentReference) AsMicrosoftGraphListParentReference1() (MicrosoftGraphListParentReference1, error) {
	var body MicrosoftGraphListParentReference1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphListParentReference1 overwrites any union data inside the MicrosoftGraphList_ParentReference as the provided MicrosoftGraphListParentReference1
func (t *MicrosoftGraphList_ParentReference) FromMicrosoftGraphListParentReference1(v MicrosoftGraphListParentReference1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphListParentReference1 performs a merge with any union data inside the MicrosoftGraphList_ParentReference, using the provided MicrosoftGraphListParentReference1
func (t *MicrosoftGraphList_ParentReference) MergeMicrosoftGraphListParentReference1(v MicrosoftGraphListParentReference1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

func (t MicrosoftGraphList_ParentReference) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *MicrosoftGraphList_ParentReference) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsMicrosoftGraphSharepointIds returns the union data inside the MicrosoftGraphList_SharepointIds as a MicrosoftGraphSharepointIds
func (t MicrosoftGraphList_SharepointIds) AsMicrosoftGraphSharepointIds() (MicrosoftGraphSharepointIds, error) {
	var body MicrosoftGraphSharepointIds
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphSharepointIds overwrites any union data inside the MicrosoftGraphList_SharepointIds as the provided MicrosoftGraphSharepointIds
func (t *MicrosoftGraphList_SharepointIds) FromMicrosoftGraphSharepointIds(v MicrosoftGraphSharepointIds) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphSharepointIds performs a merge with any union data inside the MicrosoftGraphList_SharepointIds, using the provided MicrosoftGraphSharepointIds
func (t *MicrosoftGraphList_SharepointIds) MergeMicrosoftGraphSharepointIds(v MicrosoftGraphSharepointIds) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsMicrosoftGraphListSharepointIds1 returns the union data inside the MicrosoftGraphList_SharepointIds as a MicrosoftGraphListSharepointIds1
func (t MicrosoftGraphList_SharepointIds) AsMicrosoftGraphListSharepointIds1() (MicrosoftGraphListSharepointIds1, error) {
	var body MicrosoftGraphListSharepointIds1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphListSharepointIds1 overwrites any union data inside the MicrosoftGraphList_SharepointIds as the provided MicrosoftGraphListSharepointIds1
func (t *MicrosoftGraphList_SharepointIds) FromMicrosoftGraphListSharepointIds1(v MicrosoftGraphListSharepointIds1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphListSharepointIds1 performs a merge with any union data inside the MicrosoftGraphList_SharepointIds, using the provided MicrosoftGraphListSharepointIds1
func (t *MicrosoftGraphList_SharepointIds) MergeMicrosoftGraphListSharepointIds1(v MicrosoftGraphListSharepointIds1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

func (t MicrosoftGraphList_SharepointIds) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *MicrosoftGraphList_SharepointIds) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsMicrosoftGraphSystemFacet returns the union data inside the MicrosoftGraphList_System as a MicrosoftGraphSystemFacet
func (t MicrosoftGraphList_System) AsMicrosoftGraphSystemFacet() (MicrosoftGraphSystemFacet, error) {
	var body MicrosoftGraphSystemFacet
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphSystemFacet overwrites any union data inside the MicrosoftGraphList_System as the provided MicrosoftGraphSystemFacet
func (t *MicrosoftGraphList_System) FromMicrosoftGraphSystemFacet(v MicrosoftGraphSystemFacet) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphSystemFacet performs a merge with any union data inside the MicrosoftGraphList_System, using the provided MicrosoftGraphSystemFacet
func (t *MicrosoftGraphList_System) MergeMicrosoftGraphSystemFacet(v MicrosoftGraphSystemFacet) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsMicrosoftGraphListSystem1 returns the union data inside the MicrosoftGraphList_System as a MicrosoftGraphListSystem1
func (t MicrosoftGraphList_System) AsMicrosoftGraphListSystem1() (MicrosoftGraphListSystem1, error) {
	var body MicrosoftGraphListSystem1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphListSystem1 overwrites any union data inside the MicrosoftGraphList_System as the provided MicrosoftGraphListSystem1
func (t *MicrosoftGraphList_System) FromMicrosoftGraphListSystem1(v MicrosoftGraphListSystem1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphListSystem1 performs a merge with any union data inside the MicrosoftGraphList_System, using the provided MicrosoftGraphListSystem1
func (t *MicrosoftGraphList_System) MergeMicrosoftGraphListSystem1(v MicrosoftGraphListSystem1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

func (t MicrosoftGraphList_System) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *MicrosoftGraphList_System) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsMicrosoftGraphItemAnalytics returns the union data inside the MicrosoftGraphListItem_Analytics as a MicrosoftGraphItemAnalytics
func (t MicrosoftGraphListItem_Analytics) AsMicrosoftGraphItemAnalytics() (MicrosoftGraphItemAnalytics, error) {
	var body MicrosoftGraphItemAnalytics
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphItemAnalytics overwrites any union data inside the MicrosoftGraphListItem_Analytics as the provided MicrosoftGraphItemAnalytics
func (t *MicrosoftGraphListItem_Analytics) FromMicrosoftGraphItemAnalytics(v MicrosoftGraphItemAnalytics) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphItemAnalytics performs a merge with any union data inside the MicrosoftGraphListItem_Analytics, using the provided MicrosoftGraphItemAnalytics
func (t *MicrosoftGraphListItem_Analytics) MergeMicrosoftGraphItemAnalytics(v MicrosoftGraphItemAnalytics) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsMicrosoftGraphListItemAnalytics1 returns the union data inside the MicrosoftGraphListItem_Analytics as a MicrosoftGraphListItemAnalytics1
func (t MicrosoftGraphListItem_Analytics) AsMicrosoftGraphListItemAnalytics1() (MicrosoftGraphListItemAnalytics1, error) {
	var body MicrosoftGraphListItemAnalytics1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphListItemAnalytics1 overwrites any union data inside the MicrosoftGraphListItem_Analytics as the provided MicrosoftGraphListItemAnalytics1
func (t *MicrosoftGraphListItem_Analytics) FromMicrosoftGraphListItemAnalytics1(v MicrosoftGraphListItemAnalytics1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphListItemAnalytics1 performs a merge with any union data inside the MicrosoftGraphListItem_Analytics, using the provided MicrosoftGraphListItemAnalytics1
func (t *MicrosoftGraphListItem_Analytics) MergeMicrosoftGraphListItemAnalytics1(v MicrosoftGraphListItemAnalytics1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

func (t MicrosoftGraphListItem_Analytics) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *MicrosoftGraphListItem_Analytics) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsMicrosoftGraphContentTypeInfo returns the union data inside the MicrosoftGraphListItem_ContentType as a MicrosoftGraphContentTypeInfo
func (t MicrosoftGraphListItem_ContentType) AsMicrosoftGraphContentTypeInfo() (MicrosoftGraphContentTypeInfo, error) {
	var body MicrosoftGraphContentTypeInfo
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphContentTypeInfo overwrites any union data inside the MicrosoftGraphListItem_ContentType as the provided MicrosoftGraphContentTypeInfo
func (t *MicrosoftGraphListItem_ContentType) FromMicrosoftGraphContentTypeInfo(v MicrosoftGraphContentTypeInfo) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphContentTypeInfo performs a merge with any union data inside the MicrosoftGraphListItem_ContentType, using the provided MicrosoftGraphContentTypeInfo
func (t *MicrosoftGraphListItem_ContentType) MergeMicrosoftGraphContentTypeInfo(v MicrosoftGraphContentTypeInfo) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsMicrosoftGraphListItemContentType1 returns the union data inside the MicrosoftGraphListItem_ContentType as a MicrosoftGraphListItemContentType1
func (t MicrosoftGraphListItem_ContentType) AsMicrosoftGraphListItemContentType1() (MicrosoftGraphListItemContentType1, error) {
	var body MicrosoftGraphListItemContentType1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphListItemContentType1 overwrites any union data inside the MicrosoftGraphListItem_ContentType as the provided MicrosoftGraphListItemContentType1
func (t *MicrosoftGraphListItem_ContentType) FromMicrosoftGraphListItemContentType1(v MicrosoftGraphListItemContentType1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphListItemContentType1 performs a merge with any union data inside the MicrosoftGraphListItem_ContentType, using the provided MicrosoftGraphListItemContentType1
func (t *MicrosoftGraphListItem_ContentType) MergeMicrosoftGraphListItemContentType1(v MicrosoftGraphListItemContentType1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

func (t MicrosoftGraphListItem_ContentType) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *MicrosoftGraphListItem_ContentType) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsMicrosoftGraphIdentitySet returns the union data inside the MicrosoftGraphListItem_CreatedBy as a MicrosoftGraphIdentitySet
func (t MicrosoftGraphListItem_CreatedBy) AsMicrosoftGraphIdentitySet() (MicrosoftGraphIdentitySet, error) {
	var body MicrosoftGraphIdentitySet
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphIdentitySet overwrites any union data inside the MicrosoftGraphListItem_CreatedBy as the provided MicrosoftGraphIdentitySet
func (t *MicrosoftGraphListItem_CreatedBy) FromMicrosoftGraphIdentitySet(v MicrosoftGraphIdentitySet) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphIdentitySet performs a merge with any union data inside the MicrosoftGraphListItem_CreatedBy, using the provided MicrosoftGraphIdentitySet
func (t *MicrosoftGraphListItem_CreatedBy) MergeMicrosoftGraphIdentitySet(v MicrosoftGraphIdentitySet) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsMicrosoftGraphListItemCreatedBy1 returns the union data inside the MicrosoftGraphListItem_CreatedBy as a MicrosoftGraphListItemCreatedBy1
func (t MicrosoftGraphListItem_CreatedBy) AsMicrosoftGraphListItemCreatedBy1() (MicrosoftGraphListItemCreatedBy1, error) {
	var body MicrosoftGraphListItemCreatedBy1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphListItemCreatedBy1 overwrites any union data inside the MicrosoftGraphListItem_CreatedBy as the provided MicrosoftGraphListItemCreatedBy1
func (t *MicrosoftGraphListItem_CreatedBy) FromMicrosoftGraphListItemCreatedBy1(v MicrosoftGraphListItemCreatedBy1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphListItemCreatedBy1 performs a merge with any union data inside the MicrosoftGraphListItem_CreatedBy, using the provided MicrosoftGraphListItemCreatedBy1
func (t *MicrosoftGraphListItem_CreatedBy) MergeMicrosoftGraphListItemCreatedBy1(v MicrosoftGraphListItemCreatedBy1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

func (t MicrosoftGraphListItem_CreatedBy) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *MicrosoftGraphListItem_CreatedBy) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsMicrosoftGraphUser returns the union data inside the MicrosoftGraphListItem_CreatedByUser as a MicrosoftGraphUser
func (t MicrosoftGraphListItem_CreatedByUser) AsMicrosoftGraphUser() (MicrosoftGraphUser, error) {
	var body MicrosoftGraphUser
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphUser overwrites any union data inside the MicrosoftGraphListItem_CreatedByUser as the provided MicrosoftGraphUser
func (t *MicrosoftGraphListItem_CreatedByUser) FromMicrosoftGraphUser(v MicrosoftGraphUser) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphUser performs a merge with any union data inside the MicrosoftGraphListItem_CreatedByUser, using the provided MicrosoftGraphUser
func (t *MicrosoftGraphListItem_CreatedByUser) MergeMicrosoftGraphUser(v MicrosoftGraphUser) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsMicrosoftGraphListItemCreatedByUser1 returns the union data inside the MicrosoftGraphListItem_CreatedByUser as a MicrosoftGraphListItemCreatedByUser1
func (t MicrosoftGraphListItem_CreatedByUser) AsMicrosoftGraphListItemCreatedByUser1() (MicrosoftGraphListItemCreatedByUser1, error) {
	var body MicrosoftGraphListItemCreatedByUser1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphListItemCreatedByUser1 overwrites any union data inside the MicrosoftGraphListItem_CreatedByUser as the provided MicrosoftGraphListItemCreatedByUser1
func (t *MicrosoftGraphListItem_CreatedByUser) FromMicrosoftGraphListItemCreatedByUser1(v MicrosoftGraphListItemCreatedByUser1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphListItemCreatedByUser1 performs a merge with any union data inside the MicrosoftGraphListItem_CreatedByUser, using the provided MicrosoftGraphListItemCreatedByUser1
func (t *MicrosoftGraphListItem_CreatedByUser) MergeMicrosoftGraphListItemCreatedByUser1(v MicrosoftGraphListItemCreatedByUser1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

func (t MicrosoftGraphListItem_CreatedByUser) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *MicrosoftGraphListItem_CreatedByUser) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsMicrosoftGraphDriveItem returns the union data inside the MicrosoftGraphListItem_DriveItem as a MicrosoftGraphDriveItem
func (t MicrosoftGraphListItem_DriveItem) AsMicrosoftGraphDriveItem() (MicrosoftGraphDriveItem, error) {
	var body MicrosoftGraphDriveItem
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphDriveItem overwrites any union data inside the MicrosoftGraphListItem_DriveItem as the provided MicrosoftGraphDriveItem
func (t *MicrosoftGraphListItem_DriveItem) FromMicrosoftGraphDriveItem(v MicrosoftGraphDriveItem) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphDriveItem performs a merge with any union data inside the MicrosoftGraphListItem_DriveItem, using the provided MicrosoftGraphDriveItem
func (t *MicrosoftGraphListItem_DriveItem) MergeMicrosoftGraphDriveItem(v MicrosoftGraphDriveItem) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsMicrosoftGraphListItemDriveItem1 returns the union data inside the MicrosoftGraphListItem_DriveItem as a MicrosoftGraphListItemDriveItem1
func (t MicrosoftGraphListItem_DriveItem) AsMicrosoftGraphListItemDriveItem1() (MicrosoftGraphListItemDriveItem1, error) {
	var body MicrosoftGraphListItemDriveItem1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphListItemDriveItem1 overwrites any union data inside the MicrosoftGraphListItem_DriveItem as the provided MicrosoftGraphListItemDriveItem1
func (t *MicrosoftGraphListItem_DriveItem) FromMicrosoftGraphListItemDriveItem1(v MicrosoftGraphListItemDriveItem1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphListItemDriveItem1 performs a merge with any union data inside the MicrosoftGraphListItem_DriveItem, using the provided MicrosoftGraphListItemDriveItem1
func (t *MicrosoftGraphListItem_DriveItem) MergeMicrosoftGraphListItemDriveItem1(v MicrosoftGraphListItemDriveItem1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

func (t MicrosoftGraphListItem_DriveItem) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *MicrosoftGraphListItem_DriveItem) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsMicrosoftGraphFieldValueSet returns the union data inside the MicrosoftGraphListItem_Fields as a MicrosoftGraphFieldValueSet
func (t MicrosoftGraphListItem_Fields) AsMicrosoftGraphFieldValueSet() (MicrosoftGraphFieldValueSet, error) {
	var body MicrosoftGraphFieldValueSet
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphFieldValueSet overwrites any union data inside the MicrosoftGraphListItem_Fields as the provided MicrosoftGraphFieldValueSet
func (t *MicrosoftGraphListItem_Fields) FromMicrosoftGraphFieldValueSet(v MicrosoftGraphFieldValueSet) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphFieldValueSet performs a merge with any union data inside the MicrosoftGraphListItem_Fields, using the provided MicrosoftGraphFieldValueSet
func (t *MicrosoftGraphListItem_Fields) MergeMicrosoftGraphFieldValueSet(v MicrosoftGraphFieldValueSet) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsMicrosoftGraphListItemFields1 returns the union data inside the MicrosoftGraphListItem_Fields as a MicrosoftGraphListItemFields1
func (t MicrosoftGraphListItem_Fields) AsMicrosoftGraphListItemFields1() (MicrosoftGraphListItemFields1, error) {
	var body MicrosoftGraphListItemFields1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphListItemFields1 overwrites any union data inside the MicrosoftGraphListItem_Fields as the provided MicrosoftGraphListItemFields1
func (t *MicrosoftGraphListItem_Fields) FromMicrosoftGraphListItemFields1(v MicrosoftGraphListItemFields1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphListItemFields1 performs a merge with any union data inside the MicrosoftGraphListItem_Fields, using the provided MicrosoftGraphListItemFields1
func (t *MicrosoftGraphListItem_Fields) MergeMicrosoftGraphListItemFields1(v MicrosoftGraphListItemFields1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

func (t MicrosoftGraphListItem_Fields) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *MicrosoftGraphListItem_Fields) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsMicrosoftGraphIdentitySet returns the union data inside the MicrosoftGraphListItem_LastModifiedBy as a MicrosoftGraphIdentitySet
func (t MicrosoftGraphListItem_LastModifiedBy) AsMicrosoftGraphIdentitySet() (MicrosoftGraphIdentitySet, error) {
	var body MicrosoftGraphIdentitySet
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphIdentitySet overwrites any union data inside the MicrosoftGraphListItem_LastModifiedBy as the provided MicrosoftGraphIdentitySet
func (t *MicrosoftGraphListItem_LastModifiedBy) FromMicrosoftGraphIdentitySet(v MicrosoftGraphIdentitySet) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphIdentitySet performs a merge with any union data inside the MicrosoftGraphListItem_LastModifiedBy, using the provided MicrosoftGraphIdentitySet
func (t *MicrosoftGraphListItem_LastModifiedBy) MergeMicrosoftGraphIdentitySet(v MicrosoftGraphIdentitySet) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsMicrosoftGraphListItemLastModifiedBy1 returns the union data inside the MicrosoftGraphListItem_LastModifiedBy as a MicrosoftGraphListItemLastModifiedBy1
func (t MicrosoftGraphListItem_LastModifiedBy) AsMicrosoftGraphListItemLastModifiedBy1() (MicrosoftGraphListItemLastModifiedBy1, error) {
	var body MicrosoftGraphListItemLastModifiedBy1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphListItemLastModifiedBy1 overwrites any union data inside the MicrosoftGraphListItem_LastModifiedBy as the provided MicrosoftGraphListItemLastModifiedBy1
func (t *MicrosoftGraphListItem_LastModifiedBy) FromMicrosoftGraphListItemLastModifiedBy1(v MicrosoftGraphListItemLastModifiedBy1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphListItemLastModifiedBy1 performs a merge with any union data inside the MicrosoftGraphListItem_LastModifiedBy, using the provided MicrosoftGraphListItemLastModifiedBy1
func (t *MicrosoftGraphListItem_LastModifiedBy) MergeMicrosoftGraphListItemLastModifiedBy1(v MicrosoftGraphListItemLastModifiedBy1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

func (t MicrosoftGraphListItem_LastModifiedBy) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *MicrosoftGraphListItem_LastModifiedBy) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsMicrosoftGraphUser returns the union data inside the MicrosoftGraphListItem_LastModifiedByUser as a MicrosoftGraphUser
func (t MicrosoftGraphListItem_LastModifiedByUser) AsMicrosoftGraphUser() (MicrosoftGraphUser, error) {
	var body MicrosoftGraphUser
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphUser overwrites any union data inside the MicrosoftGraphListItem_LastModifiedByUser as the provided MicrosoftGraphUser
func (t *MicrosoftGraphListItem_LastModifiedByUser) FromMicrosoftGraphUser(v MicrosoftGraphUser) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphUser performs a merge with any union data inside the MicrosoftGraphListItem_LastModifiedByUser, using the provided MicrosoftGraphUser
func (t *MicrosoftGraphListItem_LastModifiedByUser) MergeMicrosoftGraphUser(v MicrosoftGraphUser) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsMicrosoftGraphListItemLastModifiedByUser1 returns the union data inside the MicrosoftGraphListItem_LastModifiedByUser as a MicrosoftGraphListItemLastModifiedByUser1
func (t MicrosoftGraphListItem_LastModifiedByUser) AsMicrosoftGraphListItemLastModifiedByUser1() (MicrosoftGraphListItemLastModifiedByUser1, error) {
	var body MicrosoftGraphListItemLastModifiedByUser1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphListItemLastModifiedByUser1 overwrites any union data inside the MicrosoftGraphListItem_LastModifiedByUser as the provided MicrosoftGraphListItemLastModifiedByUser1
func (t *MicrosoftGraphListItem_LastModifiedByUser) FromMicrosoftGraphListItemLastModifiedByUser1(v MicrosoftGraphListItemLastModifiedByUser1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphListItemLastModifiedByUser1 performs a merge with any union data inside the MicrosoftGraphListItem_LastModifiedByUser, using the provided MicrosoftGraphListItemLastModifiedByUser1
func (t *MicrosoftGraphListItem_LastModifiedByUser) MergeMicrosoftGraphListItemLastModifiedByUser1(v MicrosoftGraphListItemLastModifiedByUser1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

func (t MicrosoftGraphListItem_LastModifiedByUser) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *MicrosoftGraphListItem_LastModifiedByUser) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsMicrosoftGraphItemReference returns the union data inside the MicrosoftGraphListItem_ParentReference as a MicrosoftGraphItemReference
func (t MicrosoftGraphListItem_ParentReference) AsMicrosoftGraphItemReference() (MicrosoftGraphItemReference, error) {
	var body MicrosoftGraphItemReference
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphItemReference overwrites any union data inside the MicrosoftGraphListItem_ParentReference as the provided MicrosoftGraphItemReference
func (t *MicrosoftGraphListItem_ParentReference) FromMicrosoftGraphItemReference(v MicrosoftGraphItemReference) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphItemReference performs a merge with any union data inside the MicrosoftGraphListItem_ParentReference, using the provided MicrosoftGraphItemReference
func (t *MicrosoftGraphListItem_ParentReference) MergeMicrosoftGraphItemReference(v MicrosoftGraphItemReference) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsMicrosoftGraphListItemParentReference1 returns the union data inside the MicrosoftGraphListItem_ParentReference as a MicrosoftGraphListItemParentReference1
func (t MicrosoftGraphListItem_ParentReference) AsMicrosoftGraphListItemParentReference1() (MicrosoftGraphListItemParentReference1, error) {
	var body MicrosoftGraphListItemParentReference1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphListItemParentReference1 overwrites any union data inside the MicrosoftGraphListItem_ParentReference as the provided MicrosoftGraphListItemParentReference1
func (t *MicrosoftGraphListItem_ParentReference) FromMicrosoftGraphListItemParentReference1(v MicrosoftGraphListItemParentReference1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphListItemParentReference1 performs a merge with any union data inside the MicrosoftGraphListItem_ParentReference, using the provided MicrosoftGraphListItemParentReference1
func (t *MicrosoftGraphListItem_ParentReference) MergeMicrosoftGraphListItemParentReference1(v MicrosoftGraphListItemParentReference1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

func (t MicrosoftGraphListItem_ParentReference) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *MicrosoftGraphListItem_ParentReference) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsMicrosoftGraphSharepointIds returns the union data inside the MicrosoftGraphListItem_SharepointIds as a MicrosoftGraphSharepointIds
func (t MicrosoftGraphListItem_SharepointIds) AsMicrosoftGraphSharepointIds() (MicrosoftGraphSharepointIds, error) {
	var body MicrosoftGraphSharepointIds
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphSharepointIds overwrites any union data inside the MicrosoftGraphListItem_SharepointIds as the provided MicrosoftGraphSharepointIds
func (t *MicrosoftGraphListItem_SharepointIds) FromMicrosoftGraphSharepointIds(v MicrosoftGraphSharepointIds) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphSharepointIds performs a merge with any union data inside the MicrosoftGraphListItem_SharepointIds, using the provided MicrosoftGraphSharepointIds
func (t *MicrosoftGraphListItem_SharepointIds) MergeMicrosoftGraphSharepointIds(v MicrosoftGraphSharepointIds) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsMicrosoftGraphListItemSharepointIds1 returns the union data inside the MicrosoftGraphListItem_SharepointIds as a MicrosoftGraphListItemSharepointIds1
func (t MicrosoftGraphListItem_SharepointIds) AsMicrosoftGraphListItemSharepointIds1() (MicrosoftGraphListItemSharepointIds1, error) {
	var body MicrosoftGraphListItemSharepointIds1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphListItemSharepointIds1 overwrites any union data inside the MicrosoftGraphListItem_SharepointIds as the provided MicrosoftGraphListItemSharepointIds1
func (t *MicrosoftGraphListItem_SharepointIds) FromMicrosoftGraphListItemSharepointIds1(v MicrosoftGraphListItemSharepointIds1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphListItemSharepointIds1 performs a merge with any union data inside the MicrosoftGraphListItem_SharepointIds, using the provided MicrosoftGraphListItemSharepointIds1
func (t *MicrosoftGraphListItem_SharepointIds) MergeMicrosoftGraphListItemSharepointIds1(v MicrosoftGraphListItemSharepointIds1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

func (t MicrosoftGraphListItem_SharepointIds) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *MicrosoftGraphListItem_SharepointIds) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsMicrosoftGraphFieldValueSet returns the union data inside the MicrosoftGraphListItemVersion_Fields as a MicrosoftGraphFieldValueSet
func (t MicrosoftGraphListItemVersion_Fields) AsMicrosoftGraphFieldValueSet() (MicrosoftGraphFieldValueSet, error) {
	var body MicrosoftGraphFieldValueSet
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphFieldValueSet overwrites any union data inside the MicrosoftGraphListItemVersion_Fields as the provided MicrosoftGraphFieldValueSet
func (t *MicrosoftGraphListItemVersion_Fields) FromMicrosoftGraphFieldValueSet(v MicrosoftGraphFieldValueSet) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphFieldValueSet performs a merge with any union data inside the MicrosoftGraphListItemVersion_Fields, using the provided MicrosoftGraphFieldValueSet
func (t *MicrosoftGraphListItemVersion_Fields) MergeMicrosoftGraphFieldValueSet(v MicrosoftGraphFieldValueSet) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsMicrosoftGraphListItemVersionFields1 returns the union data inside the MicrosoftGraphListItemVersion_Fields as a MicrosoftGraphListItemVersionFields1
func (t MicrosoftGraphListItemVersion_Fields) AsMicrosoftGraphListItemVersionFields1() (MicrosoftGraphListItemVersionFields1, error) {
	var body MicrosoftGraphListItemVersionFields1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphListItemVersionFields1 overwrites any union data inside the MicrosoftGraphListItemVersion_Fields as the provided MicrosoftGraphListItemVersionFields1
func (t *MicrosoftGraphListItemVersion_Fields) FromMicrosoftGraphListItemVersionFields1(v MicrosoftGraphListItemVersionFields1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphListItemVersionFields1 performs a merge with any union data inside the MicrosoftGraphListItemVersion_Fields, using the provided MicrosoftGraphListItemVersionFields1
func (t *MicrosoftGraphListItemVersion_Fields) MergeMicrosoftGraphListItemVersionFields1(v MicrosoftGraphListItemVersionFields1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

func (t MicrosoftGraphListItemVersion_Fields) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *MicrosoftGraphListItemVersion_Fields) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsMicrosoftGraphIdentitySet returns the union data inside the MicrosoftGraphListItemVersion_LastModifiedBy as a MicrosoftGraphIdentitySet
func (t MicrosoftGraphListItemVersion_LastModifiedBy) AsMicrosoftGraphIdentitySet() (MicrosoftGraphIdentitySet, error) {
	var body MicrosoftGraphIdentitySet
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphIdentitySet overwrites any union data inside the MicrosoftGraphListItemVersion_LastModifiedBy as the provided MicrosoftGraphIdentitySet
func (t *MicrosoftGraphListItemVersion_LastModifiedBy) FromMicrosoftGraphIdentitySet(v MicrosoftGraphIdentitySet) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphIdentitySet performs a merge with any union data inside the MicrosoftGraphListItemVersion_LastModifiedBy, using the provided MicrosoftGraphIdentitySet
func (t *MicrosoftGraphListItemVersion_LastModifiedBy) MergeMicrosoftGraphIdentitySet(v MicrosoftGraphIdentitySet) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsMicrosoftGraphListItemVersionLastModifiedBy1 returns the union data inside the MicrosoftGraphListItemVersion_LastModifiedBy as a MicrosoftGraphListItemVersionLastModifiedBy1
func (t MicrosoftGraphListItemVersion_LastModifiedBy) AsMicrosoftGraphListItemVersionLastModifiedBy1() (MicrosoftGraphListItemVersionLastModifiedBy1, error) {
	var body MicrosoftGraphListItemVersionLastModifiedBy1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphListItemVersionLastModifiedBy1 overwrites any union data inside the MicrosoftGraphListItemVersion_LastModifiedBy as the provided MicrosoftGraphListItemVersionLastModifiedBy1
func (t *MicrosoftGraphListItemVersion_LastModifiedBy) FromMicrosoftGraphListItemVersionLastModifiedBy1(v MicrosoftGraphListItemVersionLastModifiedBy1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphListItemVersionLastModifiedBy1 performs a merge with any union data inside the MicrosoftGraphListItemVersion_LastModifiedBy, using the provided MicrosoftGraphListItemVersionLastModifiedBy1
func (t *MicrosoftGraphListItemVersion_LastModifiedBy) MergeMicrosoftGraphListItemVersionLastModifiedBy1(v MicrosoftGraphListItemVersionLastModifiedBy1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

func (t MicrosoftGraphListItemVersion_LastModifiedBy) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *MicrosoftGraphListItemVersion_LastModifiedBy) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsMicrosoftGraphPublicationFacet returns the union data inside the MicrosoftGraphListItemVersion_Publication as a MicrosoftGraphPublicationFacet
func (t MicrosoftGraphListItemVersion_Publication) AsMicrosoftGraphPublicationFacet() (MicrosoftGraphPublicationFacet, error) {
	var body MicrosoftGraphPublicationFacet
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphPublicationFacet overwrites any union data inside the MicrosoftGraphListItemVersion_Publication as the provided MicrosoftGraphPublicationFacet
func (t *MicrosoftGraphListItemVersion_Publication) FromMicrosoftGraphPublicationFacet(v MicrosoftGraphPublicationFacet) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphPublicationFacet performs a merge with any union data inside the MicrosoftGraphListItemVersion_Publication, using the provided MicrosoftGraphPublicationFacet
func (t *MicrosoftGraphListItemVersion_Publication) MergeMicrosoftGraphPublicationFacet(v MicrosoftGraphPublicationFacet) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsMicrosoftGraphListItemVersionPublication1 returns the union data inside the MicrosoftGraphListItemVersion_Publication as a MicrosoftGraphListItemVersionPublication1
func (t MicrosoftGraphListItemVersion_Publication) AsMicrosoftGraphListItemVersionPublication1() (MicrosoftGraphListItemVersionPublication1, error) {
	var body MicrosoftGraphListItemVersionPublication1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphListItemVersionPublication1 overwrites any union data inside the MicrosoftGraphListItemVersion_Publication as the provided MicrosoftGraphListItemVersionPublication1
func (t *MicrosoftGraphListItemVersion_Publication) FromMicrosoftGraphListItemVersionPublication1(v MicrosoftGraphListItemVersionPublication1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphListItemVersionPublication1 performs a merge with any union data inside the MicrosoftGraphListItemVersion_Publication, using the provided MicrosoftGraphListItemVersionPublication1
func (t *MicrosoftGraphListItemVersion_Publication) MergeMicrosoftGraphListItemVersionPublication1(v MicrosoftGraphListItemVersionPublication1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

func (t MicrosoftGraphListItemVersion_Publication) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *MicrosoftGraphListItemVersion_Publication) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsMicrosoftGraphLobbyBypassScope returns the union data inside the MicrosoftGraphLobbyBypassSettings_Scope as a MicrosoftGraphLobbyBypassScope
func (t MicrosoftGraphLobbyBypassSettings_Scope) AsMicrosoftGraphLobbyBypassScope() (MicrosoftGraphLobbyBypassScope, error) {
	var body MicrosoftGraphLobbyBypassScope
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphLobbyBypassScope overwrites any union data inside the MicrosoftGraphLobbyBypassSettings_Scope as the provided MicrosoftGraphLobbyBypassScope
func (t *MicrosoftGraphLobbyBypassSettings_Scope) FromMicrosoftGraphLobbyBypassScope(v MicrosoftGraphLobbyBypassScope) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphLobbyBypassScope performs a merge with any union data inside the MicrosoftGraphLobbyBypassSettings_Scope, using the provided MicrosoftGraphLobbyBypassScope
func (t *MicrosoftGraphLobbyBypassSettings_Scope) MergeMicrosoftGraphLobbyBypassScope(v MicrosoftGraphLobbyBypassScope) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsMicrosoftGraphLobbyBypassSettingsScope1 returns the union data inside the MicrosoftGraphLobbyBypassSettings_Scope as a MicrosoftGraphLobbyBypassSettingsScope1
func (t MicrosoftGraphLobbyBypassSettings_Scope) AsMicrosoftGraphLobbyBypassSettingsScope1() (MicrosoftGraphLobbyBypassSettingsScope1, error) {
	var body MicrosoftGraphLobbyBypassSettingsScope1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphLobbyBypassSettingsScope1 overwrites any union data inside the MicrosoftGraphLobbyBypassSettings_Scope as the provided MicrosoftGraphLobbyBypassSettingsScope1
func (t *MicrosoftGraphLobbyBypassSettings_Scope) FromMicrosoftGraphLobbyBypassSettingsScope1(v MicrosoftGraphLobbyBypassSettingsScope1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphLobbyBypassSettingsScope1 performs a merge with any union data inside the MicrosoftGraphLobbyBypassSettings_Scope, using the provided MicrosoftGraphLobbyBypassSettingsScope1
func (t *MicrosoftGraphLobbyBypassSettings_Scope) MergeMicrosoftGraphLobbyBypassSettingsScope1(v MicrosoftGraphLobbyBypassSettingsScope1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

func (t MicrosoftGraphLobbyBypassSettings_Scope) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *MicrosoftGraphLobbyBypassSettings_Scope) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsMicrosoftGraphPhysicalAddress returns the union data inside the MicrosoftGraphLocation_Address as a MicrosoftGraphPhysicalAddress
func (t MicrosoftGraphLocation_Address) AsMicrosoftGraphPhysicalAddress() (MicrosoftGraphPhysicalAddress, error) {
	var body MicrosoftGraphPhysicalAddress
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphPhysicalAddress overwrites any union data inside the MicrosoftGraphLocation_Address as the provided MicrosoftGraphPhysicalAddress
func (t *MicrosoftGraphLocation_Address) FromMicrosoftGraphPhysicalAddress(v MicrosoftGraphPhysicalAddress) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphPhysicalAddress performs a merge with any union data inside the MicrosoftGraphLocation_Address, using the provided MicrosoftGraphPhysicalAddress
func (t *MicrosoftGraphLocation_Address) MergeMicrosoftGraphPhysicalAddress(v MicrosoftGraphPhysicalAddress) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsMicrosoftGraphLocationAddress1 returns the union data inside the MicrosoftGraphLocation_Address as a MicrosoftGraphLocationAddress1
func (t MicrosoftGraphLocation_Address) AsMicrosoftGraphLocationAddress1() (MicrosoftGraphLocationAddress1, error) {
	var body MicrosoftGraphLocationAddress1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphLocationAddress1 overwrites any union data inside the MicrosoftGraphLocation_Address as the provided MicrosoftGraphLocationAddress1
func (t *MicrosoftGraphLocation_Address) FromMicrosoftGraphLocationAddress1(v MicrosoftGraphLocationAddress1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphLocationAddress1 performs a merge with any union data inside the MicrosoftGraphLocation_Address, using the provided MicrosoftGraphLocationAddress1
func (t *MicrosoftGraphLocation_Address) MergeMicrosoftGraphLocationAddress1(v MicrosoftGraphLocationAddress1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

func (t MicrosoftGraphLocation_Address) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *MicrosoftGraphLocation_Address) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsMicrosoftGraphOutlookGeoCoordinates returns the union data inside the MicrosoftGraphLocation_Coordinates as a MicrosoftGraphOutlookGeoCoordinates
func (t MicrosoftGraphLocation_Coordinates) AsMicrosoftGraphOutlookGeoCoordinates() (MicrosoftGraphOutlookGeoCoordinates, error) {
	var body MicrosoftGraphOutlookGeoCoordinates
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphOutlookGeoCoordinates overwrites any union data inside the MicrosoftGraphLocation_Coordinates as the provided MicrosoftGraphOutlookGeoCoordinates
func (t *MicrosoftGraphLocation_Coordinates) FromMicrosoftGraphOutlookGeoCoordinates(v MicrosoftGraphOutlookGeoCoordinates) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphOutlookGeoCoordinates performs a merge with any union data inside the MicrosoftGraphLocation_Coordinates, using the provided MicrosoftGraphOutlookGeoCoordinates
func (t *MicrosoftGraphLocation_Coordinates) MergeMicrosoftGraphOutlookGeoCoordinates(v MicrosoftGraphOutlookGeoCoordinates) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsMicrosoftGraphLocationCoordinates1 returns the union data inside the MicrosoftGraphLocation_Coordinates as a MicrosoftGraphLocationCoordinates1
func (t MicrosoftGraphLocation_Coordinates) AsMicrosoftGraphLocationCoordinates1() (MicrosoftGraphLocationCoordinates1, error) {
	var body MicrosoftGraphLocationCoordinates1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphLocationCoordinates1 overwrites any union data inside the MicrosoftGraphLocation_Coordinates as the provided MicrosoftGraphLocationCoordinates1
func (t *MicrosoftGraphLocation_Coordinates) FromMicrosoftGraphLocationCoordinates1(v MicrosoftGraphLocationCoordinates1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphLocationCoordinates1 performs a merge with any union data inside the MicrosoftGraphLocation_Coordinates, using the provided MicrosoftGraphLocationCoordinates1
func (t *MicrosoftGraphLocation_Coordinates) MergeMicrosoftGraphLocationCoordinates1(v MicrosoftGraphLocationCoordinates1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

func (t MicrosoftGraphLocation_Coordinates) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *MicrosoftGraphLocation_Coordinates) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsMicrosoftGraphLocationType returns the union data inside the MicrosoftGraphLocation_LocationType as a MicrosoftGraphLocationType
func (t MicrosoftGraphLocation_LocationType) AsMicrosoftGraphLocationType() (MicrosoftGraphLocationType, error) {
	var body MicrosoftGraphLocationType
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphLocationType overwrites any union data inside the MicrosoftGraphLocation_LocationType as the provided MicrosoftGraphLocationType
func (t *MicrosoftGraphLocation_LocationType) FromMicrosoftGraphLocationType(v MicrosoftGraphLocationType) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphLocationType performs a merge with any union data inside the MicrosoftGraphLocation_LocationType, using the provided MicrosoftGraphLocationType
func (t *MicrosoftGraphLocation_LocationType) MergeMicrosoftGraphLocationType(v MicrosoftGraphLocationType) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsMicrosoftGraphLocationLocationType1 returns the union data inside the MicrosoftGraphLocation_LocationType as a MicrosoftGraphLocationLocationType1
func (t MicrosoftGraphLocation_LocationType) AsMicrosoftGraphLocationLocationType1() (MicrosoftGraphLocationLocationType1, error) {
	var body MicrosoftGraphLocationLocationType1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphLocationLocationType1 overwrites any union data inside the MicrosoftGraphLocation_LocationType as the provided MicrosoftGraphLocationLocationType1
func (t *MicrosoftGraphLocation_LocationType) FromMicrosoftGraphLocationLocationType1(v MicrosoftGraphLocationLocationType1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphLocationLocationType1 performs a merge with any union data inside the MicrosoftGraphLocation_LocationType, using the provided MicrosoftGraphLocationLocationType1
func (t *MicrosoftGraphLocation_LocationType) MergeMicrosoftGraphLocationLocationType1(v MicrosoftGraphLocationLocationType1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

func (t MicrosoftGraphLocation_LocationType) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *MicrosoftGraphLocation_LocationType) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsMicrosoftGraphLocationUniqueIdType returns the union data inside the MicrosoftGraphLocation_UniqueIdType as a MicrosoftGraphLocationUniqueIdType
func (t MicrosoftGraphLocation_UniqueIdType) AsMicrosoftGraphLocationUniqueIdType() (MicrosoftGraphLocationUniqueIdType, error) {
	var body MicrosoftGraphLocationUniqueIdType
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphLocationUniqueIdType overwrites any union data inside the MicrosoftGraphLocation_UniqueIdType as the provided MicrosoftGraphLocationUniqueIdType
func (t *MicrosoftGraphLocation_UniqueIdType) FromMicrosoftGraphLocationUniqueIdType(v MicrosoftGraphLocationUniqueIdType) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphLocationUniqueIdType performs a merge with any union data inside the MicrosoftGraphLocation_UniqueIdType, using the provided MicrosoftGraphLocationUniqueIdType
func (t *MicrosoftGraphLocation_UniqueIdType) MergeMicrosoftGraphLocationUniqueIdType(v MicrosoftGraphLocationUniqueIdType) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsMicrosoftGraphLocationUniqueIdType1 returns the union data inside the MicrosoftGraphLocation_UniqueIdType as a MicrosoftGraphLocationUniqueIdType1
func (t MicrosoftGraphLocation_UniqueIdType) AsMicrosoftGraphLocationUniqueIdType1() (MicrosoftGraphLocationUniqueIdType1, error) {
	var body MicrosoftGraphLocationUniqueIdType1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphLocationUniqueIdType1 overwrites any union data inside the MicrosoftGraphLocation_UniqueIdType as the provided MicrosoftGraphLocationUniqueIdType1
func (t *MicrosoftGraphLocation_UniqueIdType) FromMicrosoftGraphLocationUniqueIdType1(v MicrosoftGraphLocationUniqueIdType1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphLocationUniqueIdType1 performs a merge with any union data inside the MicrosoftGraphLocation_UniqueIdType, using the provided MicrosoftGraphLocationUniqueIdType1
func (t *MicrosoftGraphLocation_UniqueIdType) MergeMicrosoftGraphLocationUniqueIdType1(v MicrosoftGraphLocationUniqueIdType1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

func (t MicrosoftGraphLocation_UniqueIdType) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *MicrosoftGraphLocation_UniqueIdType) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsMicrosoftGraphLongRunningOperationStatus returns the union data inside the MicrosoftGraphLongRunningOperation_Status as a MicrosoftGraphLongRunningOperationStatus
func (t MicrosoftGraphLongRunningOperation_Status) AsMicrosoftGraphLongRunningOperationStatus() (MicrosoftGraphLongRunningOperationStatus, error) {
	var body MicrosoftGraphLongRunningOperationStatus
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphLongRunningOperationStatus overwrites any union data inside the MicrosoftGraphLongRunningOperation_Status as the provided MicrosoftGraphLongRunningOperationStatus
func (t *MicrosoftGraphLongRunningOperation_Status) FromMicrosoftGraphLongRunningOperationStatus(v MicrosoftGraphLongRunningOperationStatus) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphLongRunningOperationStatus performs a merge with any union data inside the MicrosoftGraphLongRunningOperation_Status, using the provided MicrosoftGraphLongRunningOperationStatus
func (t *MicrosoftGraphLongRunningOperation_Status) MergeMicrosoftGraphLongRunningOperationStatus(v MicrosoftGraphLongRunningOperationStatus) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsMicrosoftGraphLongRunningOperationStatus1 returns the union data inside the MicrosoftGraphLongRunningOperation_Status as a MicrosoftGraphLongRunningOperationStatus1
func (t MicrosoftGraphLongRunningOperation_Status) AsMicrosoftGraphLongRunningOperationStatus1() (MicrosoftGraphLongRunningOperationStatus1, error) {
	var body MicrosoftGraphLongRunningOperationStatus1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphLongRunningOperationStatus1 overwrites any union data inside the MicrosoftGraphLongRunningOperation_Status as the provided MicrosoftGraphLongRunningOperationStatus1
func (t *MicrosoftGraphLongRunningOperation_Status) FromMicrosoftGraphLongRunningOperationStatus1(v MicrosoftGraphLongRunningOperationStatus1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphLongRunningOperationStatus1 performs a merge with any union data inside the MicrosoftGraphLongRunningOperation_Status, using the provided MicrosoftGraphLongRunningOperationStatus1
func (t *MicrosoftGraphLongRunningOperation_Status) MergeMicrosoftGraphLongRunningOperationStatus1(v MicrosoftGraphLongRunningOperationStatus1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

func (t MicrosoftGraphLongRunningOperation_Status) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *MicrosoftGraphLongRunningOperation_Status) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsMicrosoftGraphAutomaticRepliesSetting returns the union data inside the MicrosoftGraphMailboxSettings_AutomaticRepliesSetting as a MicrosoftGraphAutomaticRepliesSetting
func (t MicrosoftGraphMailboxSettings_AutomaticRepliesSetting) AsMicrosoftGraphAutomaticRepliesSetting() (MicrosoftGraphAutomaticRepliesSetting, error) {
	var body MicrosoftGraphAutomaticRepliesSetting
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphAutomaticRepliesSetting overwrites any union data inside the MicrosoftGraphMailboxSettings_AutomaticRepliesSetting as the provided MicrosoftGraphAutomaticRepliesSetting
func (t *MicrosoftGraphMailboxSettings_AutomaticRepliesSetting) FromMicrosoftGraphAutomaticRepliesSetting(v MicrosoftGraphAutomaticRepliesSetting) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphAutomaticRepliesSetting performs a merge with any union data inside the MicrosoftGraphMailboxSettings_AutomaticRepliesSetting, using the provided MicrosoftGraphAutomaticRepliesSetting
func (t *MicrosoftGraphMailboxSettings_AutomaticRepliesSetting) MergeMicrosoftGraphAutomaticRepliesSetting(v MicrosoftGraphAutomaticRepliesSetting) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsMicrosoftGraphMailboxSettingsAutomaticRepliesSetting1 returns the union data inside the MicrosoftGraphMailboxSettings_AutomaticRepliesSetting as a MicrosoftGraphMailboxSettingsAutomaticRepliesSetting1
func (t MicrosoftGraphMailboxSettings_AutomaticRepliesSetting) AsMicrosoftGraphMailboxSettingsAutomaticRepliesSetting1() (MicrosoftGraphMailboxSettingsAutomaticRepliesSetting1, error) {
	var body MicrosoftGraphMailboxSettingsAutomaticRepliesSetting1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphMailboxSettingsAutomaticRepliesSetting1 overwrites any union data inside the MicrosoftGraphMailboxSettings_AutomaticRepliesSetting as the provided MicrosoftGraphMailboxSettingsAutomaticRepliesSetting1
func (t *MicrosoftGraphMailboxSettings_AutomaticRepliesSetting) FromMicrosoftGraphMailboxSettingsAutomaticRepliesSetting1(v MicrosoftGraphMailboxSettingsAutomaticRepliesSetting1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphMailboxSettingsAutomaticRepliesSetting1 performs a merge with any union data inside the MicrosoftGraphMailboxSettings_AutomaticRepliesSetting, using the provided MicrosoftGraphMailboxSettingsAutomaticRepliesSetting1
func (t *MicrosoftGraphMailboxSettings_AutomaticRepliesSetting) MergeMicrosoftGraphMailboxSettingsAutomaticRepliesSetting1(v MicrosoftGraphMailboxSettingsAutomaticRepliesSetting1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

func (t MicrosoftGraphMailboxSettings_AutomaticRepliesSetting) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *MicrosoftGraphMailboxSettings_AutomaticRepliesSetting) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsMicrosoftGraphDelegateMeetingMessageDeliveryOptions returns the union data inside the MicrosoftGraphMailboxSettings_DelegateMeetingMessageDeliveryOptions as a MicrosoftGraphDelegateMeetingMessageDeliveryOptions
func (t MicrosoftGraphMailboxSettings_DelegateMeetingMessageDeliveryOptions) AsMicrosoftGraphDelegateMeetingMessageDeliveryOptions() (MicrosoftGraphDelegateMeetingMessageDeliveryOptions, error) {
	var body MicrosoftGraphDelegateMeetingMessageDeliveryOptions
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphDelegateMeetingMessageDeliveryOptions overwrites any union data inside the MicrosoftGraphMailboxSettings_DelegateMeetingMessageDeliveryOptions as the provided MicrosoftGraphDelegateMeetingMessageDeliveryOptions
func (t *MicrosoftGraphMailboxSettings_DelegateMeetingMessageDeliveryOptions) FromMicrosoftGraphDelegateMeetingMessageDeliveryOptions(v MicrosoftGraphDelegateMeetingMessageDeliveryOptions) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphDelegateMeetingMessageDeliveryOptions performs a merge with any union data inside the MicrosoftGraphMailboxSettings_DelegateMeetingMessageDeliveryOptions, using the provided MicrosoftGraphDelegateMeetingMessageDeliveryOptions
func (t *MicrosoftGraphMailboxSettings_DelegateMeetingMessageDeliveryOptions) MergeMicrosoftGraphDelegateMeetingMessageDeliveryOptions(v MicrosoftGraphDelegateMeetingMessageDeliveryOptions) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsMicrosoftGraphMailboxSettingsDelegateMeetingMessageDeliveryOptions1 returns the union data inside the MicrosoftGraphMailboxSettings_DelegateMeetingMessageDeliveryOptions as a MicrosoftGraphMailboxSettingsDelegateMeetingMessageDeliveryOptions1
func (t MicrosoftGraphMailboxSettings_DelegateMeetingMessageDeliveryOptions) AsMicrosoftGraphMailboxSettingsDelegateMeetingMessageDeliveryOptions1() (MicrosoftGraphMailboxSettingsDelegateMeetingMessageDeliveryOptions1, error) {
	var body MicrosoftGraphMailboxSettingsDelegateMeetingMessageDeliveryOptions1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphMailboxSettingsDelegateMeetingMessageDeliveryOptions1 overwrites any union data inside the MicrosoftGraphMailboxSettings_DelegateMeetingMessageDeliveryOptions as the provided MicrosoftGraphMailboxSettingsDelegateMeetingMessageDeliveryOptions1
func (t *MicrosoftGraphMailboxSettings_DelegateMeetingMessageDeliveryOptions) FromMicrosoftGraphMailboxSettingsDelegateMeetingMessageDeliveryOptions1(v MicrosoftGraphMailboxSettingsDelegateMeetingMessageDeliveryOptions1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphMailboxSettingsDelegateMeetingMessageDeliveryOptions1 performs a merge with any union data inside the MicrosoftGraphMailboxSettings_DelegateMeetingMessageDeliveryOptions, using the provided MicrosoftGraphMailboxSettingsDelegateMeetingMessageDeliveryOptions1
func (t *MicrosoftGraphMailboxSettings_DelegateMeetingMessageDeliveryOptions) MergeMicrosoftGraphMailboxSettingsDelegateMeetingMessageDeliveryOptions1(v MicrosoftGraphMailboxSettingsDelegateMeetingMessageDeliveryOptions1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

func (t MicrosoftGraphMailboxSettings_DelegateMeetingMessageDeliveryOptions) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *MicrosoftGraphMailboxSettings_DelegateMeetingMessageDeliveryOptions) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsMicrosoftGraphLocaleInfo returns the union data inside the MicrosoftGraphMailboxSettings_Language as a MicrosoftGraphLocaleInfo
func (t MicrosoftGraphMailboxSettings_Language) AsMicrosoftGraphLocaleInfo() (MicrosoftGraphLocaleInfo, error) {
	var body MicrosoftGraphLocaleInfo
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphLocaleInfo overwrites any union data inside the MicrosoftGraphMailboxSettings_Language as the provided MicrosoftGraphLocaleInfo
func (t *MicrosoftGraphMailboxSettings_Language) FromMicrosoftGraphLocaleInfo(v MicrosoftGraphLocaleInfo) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphLocaleInfo performs a merge with any union data inside the MicrosoftGraphMailboxSettings_Language, using the provided MicrosoftGraphLocaleInfo
func (t *MicrosoftGraphMailboxSettings_Language) MergeMicrosoftGraphLocaleInfo(v MicrosoftGraphLocaleInfo) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsMicrosoftGraphMailboxSettingsLanguage1 returns the union data inside the MicrosoftGraphMailboxSettings_Language as a MicrosoftGraphMailboxSettingsLanguage1
func (t MicrosoftGraphMailboxSettings_Language) AsMicrosoftGraphMailboxSettingsLanguage1() (MicrosoftGraphMailboxSettingsLanguage1, error) {
	var body MicrosoftGraphMailboxSettingsLanguage1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphMailboxSettingsLanguage1 overwrites any union data inside the MicrosoftGraphMailboxSettings_Language as the provided MicrosoftGraphMailboxSettingsLanguage1
func (t *MicrosoftGraphMailboxSettings_Language) FromMicrosoftGraphMailboxSettingsLanguage1(v MicrosoftGraphMailboxSettingsLanguage1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphMailboxSettingsLanguage1 performs a merge with any union data inside the MicrosoftGraphMailboxSettings_Language, using the provided MicrosoftGraphMailboxSettingsLanguage1
func (t *MicrosoftGraphMailboxSettings_Language) MergeMicrosoftGraphMailboxSettingsLanguage1(v MicrosoftGraphMailboxSettingsLanguage1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

func (t MicrosoftGraphMailboxSettings_Language) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *MicrosoftGraphMailboxSettings_Language) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsMicrosoftGraphUserPurpose returns the union data inside the MicrosoftGraphMailboxSettings_UserPurpose as a MicrosoftGraphUserPurpose
func (t MicrosoftGraphMailboxSettings_UserPurpose) AsMicrosoftGraphUserPurpose() (MicrosoftGraphUserPurpose, error) {
	var body MicrosoftGraphUserPurpose
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphUserPurpose overwrites any union data inside the MicrosoftGraphMailboxSettings_UserPurpose as the provided MicrosoftGraphUserPurpose
func (t *MicrosoftGraphMailboxSettings_UserPurpose) FromMicrosoftGraphUserPurpose(v MicrosoftGraphUserPurpose) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphUserPurpose performs a merge with any union data inside the MicrosoftGraphMailboxSettings_UserPurpose, using the provided MicrosoftGraphUserPurpose
func (t *MicrosoftGraphMailboxSettings_UserPurpose) MergeMicrosoftGraphUserPurpose(v MicrosoftGraphUserPurpose) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsMicrosoftGraphMailboxSettingsUserPurpose1 returns the union data inside the MicrosoftGraphMailboxSettings_UserPurpose as a MicrosoftGraphMailboxSettingsUserPurpose1
func (t MicrosoftGraphMailboxSettings_UserPurpose) AsMicrosoftGraphMailboxSettingsUserPurpose1() (MicrosoftGraphMailboxSettingsUserPurpose1, error) {
	var body MicrosoftGraphMailboxSettingsUserPurpose1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphMailboxSettingsUserPurpose1 overwrites any union data inside the MicrosoftGraphMailboxSettings_UserPurpose as the provided MicrosoftGraphMailboxSettingsUserPurpose1
func (t *MicrosoftGraphMailboxSettings_UserPurpose) FromMicrosoftGraphMailboxSettingsUserPurpose1(v MicrosoftGraphMailboxSettingsUserPurpose1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphMailboxSettingsUserPurpose1 performs a merge with any union data inside the MicrosoftGraphMailboxSettings_UserPurpose, using the provided MicrosoftGraphMailboxSettingsUserPurpose1
func (t *MicrosoftGraphMailboxSettings_UserPurpose) MergeMicrosoftGraphMailboxSettingsUserPurpose1(v MicrosoftGraphMailboxSettingsUserPurpose1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

func (t MicrosoftGraphMailboxSettings_UserPurpose) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *MicrosoftGraphMailboxSettings_UserPurpose) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsMicrosoftGraphWorkingHours returns the union data inside the MicrosoftGraphMailboxSettings_WorkingHours as a MicrosoftGraphWorkingHours
func (t MicrosoftGraphMailboxSettings_WorkingHours) AsMicrosoftGraphWorkingHours() (MicrosoftGraphWorkingHours, error) {
	var body MicrosoftGraphWorkingHours
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphWorkingHours overwrites any union data inside the MicrosoftGraphMailboxSettings_WorkingHours as the provided MicrosoftGraphWorkingHours
func (t *MicrosoftGraphMailboxSettings_WorkingHours) FromMicrosoftGraphWorkingHours(v MicrosoftGraphWorkingHours) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphWorkingHours performs a merge with any union data inside the MicrosoftGraphMailboxSettings_WorkingHours, using the provided MicrosoftGraphWorkingHours
func (t *MicrosoftGraphMailboxSettings_WorkingHours) MergeMicrosoftGraphWorkingHours(v MicrosoftGraphWorkingHours) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsMicrosoftGraphMailboxSettingsWorkingHours1 returns the union data inside the MicrosoftGraphMailboxSettings_WorkingHours as a MicrosoftGraphMailboxSettingsWorkingHours1
func (t MicrosoftGraphMailboxSettings_WorkingHours) AsMicrosoftGraphMailboxSettingsWorkingHours1() (MicrosoftGraphMailboxSettingsWorkingHours1, error) {
	var body MicrosoftGraphMailboxSettingsWorkingHours1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphMailboxSettingsWorkingHours1 overwrites any union data inside the MicrosoftGraphMailboxSettings_WorkingHours as the provided MicrosoftGraphMailboxSettingsWorkingHours1
func (t *MicrosoftGraphMailboxSettings_WorkingHours) FromMicrosoftGraphMailboxSettingsWorkingHours1(v MicrosoftGraphMailboxSettingsWorkingHours1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphMailboxSettingsWorkingHours1 performs a merge with any union data inside the MicrosoftGraphMailboxSettings_WorkingHours, using the provided MicrosoftGraphMailboxSettingsWorkingHours1
func (t *MicrosoftGraphMailboxSettings_WorkingHours) MergeMicrosoftGraphMailboxSettingsWorkingHours1(v MicrosoftGraphMailboxSettingsWorkingHours1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

func (t MicrosoftGraphMailboxSettings_WorkingHours) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *MicrosoftGraphMailboxSettings_WorkingHours) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsMicrosoftGraphMobileAppIdentifier returns the union data inside the MicrosoftGraphManagedAppRegistration_AppIdentifier as a MicrosoftGraphMobileAppIdentifier
func (t MicrosoftGraphManagedAppRegistration_AppIdentifier) AsMicrosoftGraphMobileAppIdentifier() (MicrosoftGraphMobileAppIdentifier, error) {
	var body MicrosoftGraphMobileAppIdentifier
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphMobileAppIdentifier overwrites any union data inside the MicrosoftGraphManagedAppRegistration_AppIdentifier as the provided MicrosoftGraphMobileAppIdentifier
func (t *MicrosoftGraphManagedAppRegistration_AppIdentifier) FromMicrosoftGraphMobileAppIdentifier(v MicrosoftGraphMobileAppIdentifier) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphMobileAppIdentifier performs a merge with any union data inside the MicrosoftGraphManagedAppRegistration_AppIdentifier, using the provided MicrosoftGraphMobileAppIdentifier
func (t *MicrosoftGraphManagedAppRegistration_AppIdentifier) MergeMicrosoftGraphMobileAppIdentifier(v MicrosoftGraphMobileAppIdentifier) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsMicrosoftGraphManagedAppRegistrationAppIdentifier1 returns the union data inside the MicrosoftGraphManagedAppRegistration_AppIdentifier as a MicrosoftGraphManagedAppRegistrationAppIdentifier1
func (t MicrosoftGraphManagedAppRegistration_AppIdentifier) AsMicrosoftGraphManagedAppRegistrationAppIdentifier1() (MicrosoftGraphManagedAppRegistrationAppIdentifier1, error) {
	var body MicrosoftGraphManagedAppRegistrationAppIdentifier1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphManagedAppRegistrationAppIdentifier1 overwrites any union data inside the MicrosoftGraphManagedAppRegistration_AppIdentifier as the provided MicrosoftGraphManagedAppRegistrationAppIdentifier1
func (t *MicrosoftGraphManagedAppRegistration_AppIdentifier) FromMicrosoftGraphManagedAppRegistrationAppIdentifier1(v MicrosoftGraphManagedAppRegistrationAppIdentifier1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphManagedAppRegistrationAppIdentifier1 performs a merge with any union data inside the MicrosoftGraphManagedAppRegistration_AppIdentifier, using the provided MicrosoftGraphManagedAppRegistrationAppIdentifier1
func (t *MicrosoftGraphManagedAppRegistration_AppIdentifier) MergeMicrosoftGraphManagedAppRegistrationAppIdentifier1(v MicrosoftGraphManagedAppRegistrationAppIdentifier1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

func (t MicrosoftGraphManagedAppRegistration_AppIdentifier) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *MicrosoftGraphManagedAppRegistration_AppIdentifier) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsMicrosoftGraphConfigurationManagerClientEnabledFeatures returns the union data inside the MicrosoftGraphManagedDevice_ConfigurationManagerClientEnabledFeatures as a MicrosoftGraphConfigurationManagerClientEnabledFeatures
func (t MicrosoftGraphManagedDevice_ConfigurationManagerClientEnabledFeatures) AsMicrosoftGraphConfigurationManagerClientEnabledFeatures() (MicrosoftGraphConfigurationManagerClientEnabledFeatures, error) {
	var body MicrosoftGraphConfigurationManagerClientEnabledFeatures
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphConfigurationManagerClientEnabledFeatures overwrites any union data inside the MicrosoftGraphManagedDevice_ConfigurationManagerClientEnabledFeatures as the provided MicrosoftGraphConfigurationManagerClientEnabledFeatures
func (t *MicrosoftGraphManagedDevice_ConfigurationManagerClientEnabledFeatures) FromMicrosoftGraphConfigurationManagerClientEnabledFeatures(v MicrosoftGraphConfigurationManagerClientEnabledFeatures) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphConfigurationManagerClientEnabledFeatures performs a merge with any union data inside the MicrosoftGraphManagedDevice_ConfigurationManagerClientEnabledFeatures, using the provided MicrosoftGraphConfigurationManagerClientEnabledFeatures
func (t *MicrosoftGraphManagedDevice_ConfigurationManagerClientEnabledFeatures) MergeMicrosoftGraphConfigurationManagerClientEnabledFeatures(v MicrosoftGraphConfigurationManagerClientEnabledFeatures) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsMicrosoftGraphManagedDeviceConfigurationManagerClientEnabledFeatures1 returns the union data inside the MicrosoftGraphManagedDevice_ConfigurationManagerClientEnabledFeatures as a MicrosoftGraphManagedDeviceConfigurationManagerClientEnabledFeatures1
func (t MicrosoftGraphManagedDevice_ConfigurationManagerClientEnabledFeatures) AsMicrosoftGraphManagedDeviceConfigurationManagerClientEnabledFeatures1() (MicrosoftGraphManagedDeviceConfigurationManagerClientEnabledFeatures1, error) {
	var body MicrosoftGraphManagedDeviceConfigurationManagerClientEnabledFeatures1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphManagedDeviceConfigurationManagerClientEnabledFeatures1 overwrites any union data inside the MicrosoftGraphManagedDevice_ConfigurationManagerClientEnabledFeatures as the provided MicrosoftGraphManagedDeviceConfigurationManagerClientEnabledFeatures1
func (t *MicrosoftGraphManagedDevice_ConfigurationManagerClientEnabledFeatures) FromMicrosoftGraphManagedDeviceConfigurationManagerClientEnabledFeatures1(v MicrosoftGraphManagedDeviceConfigurationManagerClientEnabledFeatures1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphManagedDeviceConfigurationManagerClientEnabledFeatures1 performs a merge with any union data inside the MicrosoftGraphManagedDevice_ConfigurationManagerClientEnabledFeatures, using the provided MicrosoftGraphManagedDeviceConfigurationManagerClientEnabledFeatures1
func (t *MicrosoftGraphManagedDevice_ConfigurationManagerClientEnabledFeatures) MergeMicrosoftGraphManagedDeviceConfigurationManagerClientEnabledFeatures1(v MicrosoftGraphManagedDeviceConfigurationManagerClientEnabledFeatures1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

func (t MicrosoftGraphManagedDevice_ConfigurationManagerClientEnabledFeatures) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *MicrosoftGraphManagedDevice_ConfigurationManagerClientEnabledFeatures) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsMicrosoftGraphDeviceActionResult returns the union data inside the MicrosoftGraphManagedDevice_DeviceActionResults_Item as a MicrosoftGraphDeviceActionResult
func (t MicrosoftGraphManagedDevice_DeviceActionResults_Item) AsMicrosoftGraphDeviceActionResult() (MicrosoftGraphDeviceActionResult, error) {
	var body MicrosoftGraphDeviceActionResult
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphDeviceActionResult overwrites any union data inside the MicrosoftGraphManagedDevice_DeviceActionResults_Item as the provided MicrosoftGraphDeviceActionResult
func (t *MicrosoftGraphManagedDevice_DeviceActionResults_Item) FromMicrosoftGraphDeviceActionResult(v MicrosoftGraphDeviceActionResult) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphDeviceActionResult performs a merge with any union data inside the MicrosoftGraphManagedDevice_DeviceActionResults_Item, using the provided MicrosoftGraphDeviceActionResult
func (t *MicrosoftGraphManagedDevice_DeviceActionResults_Item) MergeMicrosoftGraphDeviceActionResult(v MicrosoftGraphDeviceActionResult) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsMicrosoftGraphManagedDeviceDeviceActionResults1 returns the union data inside the MicrosoftGraphManagedDevice_DeviceActionResults_Item as a MicrosoftGraphManagedDeviceDeviceActionResults1
func (t MicrosoftGraphManagedDevice_DeviceActionResults_Item) AsMicrosoftGraphManagedDeviceDeviceActionResults1() (MicrosoftGraphManagedDeviceDeviceActionResults1, error) {
	var body MicrosoftGraphManagedDeviceDeviceActionResults1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphManagedDeviceDeviceActionResults1 overwrites any union data inside the MicrosoftGraphManagedDevice_DeviceActionResults_Item as the provided MicrosoftGraphManagedDeviceDeviceActionResults1
func (t *MicrosoftGraphManagedDevice_DeviceActionResults_Item) FromMicrosoftGraphManagedDeviceDeviceActionResults1(v MicrosoftGraphManagedDeviceDeviceActionResults1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphManagedDeviceDeviceActionResults1 performs a merge with any union data inside the MicrosoftGraphManagedDevice_DeviceActionResults_Item, using the provided MicrosoftGraphManagedDeviceDeviceActionResults1
func (t *MicrosoftGraphManagedDevice_DeviceActionResults_Item) MergeMicrosoftGraphManagedDeviceDeviceActionResults1(v MicrosoftGraphManagedDeviceDeviceActionResults1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

func (t MicrosoftGraphManagedDevice_DeviceActionResults_Item) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *MicrosoftGraphManagedDevice_DeviceActionResults_Item) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsMicrosoftGraphDeviceCategory returns the union data inside the MicrosoftGraphManagedDevice_DeviceCategory as a MicrosoftGraphDeviceCategory
func (t MicrosoftGraphManagedDevice_DeviceCategory) AsMicrosoftGraphDeviceCategory() (MicrosoftGraphDeviceCategory, error) {
	var body MicrosoftGraphDeviceCategory
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphDeviceCategory overwrites any union data inside the MicrosoftGraphManagedDevice_DeviceCategory as the provided MicrosoftGraphDeviceCategory
func (t *MicrosoftGraphManagedDevice_DeviceCategory) FromMicrosoftGraphDeviceCategory(v MicrosoftGraphDeviceCategory) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphDeviceCategory performs a merge with any union data inside the MicrosoftGraphManagedDevice_DeviceCategory, using the provided MicrosoftGraphDeviceCategory
func (t *MicrosoftGraphManagedDevice_DeviceCategory) MergeMicrosoftGraphDeviceCategory(v MicrosoftGraphDeviceCategory) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsMicrosoftGraphManagedDeviceDeviceCategory1 returns the union data inside the MicrosoftGraphManagedDevice_DeviceCategory as a MicrosoftGraphManagedDeviceDeviceCategory1
func (t MicrosoftGraphManagedDevice_DeviceCategory) AsMicrosoftGraphManagedDeviceDeviceCategory1() (MicrosoftGraphManagedDeviceDeviceCategory1, error) {
	var body MicrosoftGraphManagedDeviceDeviceCategory1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphManagedDeviceDeviceCategory1 overwrites any union data inside the MicrosoftGraphManagedDevice_DeviceCategory as the provided MicrosoftGraphManagedDeviceDeviceCategory1
func (t *MicrosoftGraphManagedDevice_DeviceCategory) FromMicrosoftGraphManagedDeviceDeviceCategory1(v MicrosoftGraphManagedDeviceDeviceCategory1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphManagedDeviceDeviceCategory1 performs a merge with any union data inside the MicrosoftGraphManagedDevice_DeviceCategory, using the provided MicrosoftGraphManagedDeviceDeviceCategory1
func (t *MicrosoftGraphManagedDevice_DeviceCategory) MergeMicrosoftGraphManagedDeviceDeviceCategory1(v MicrosoftGraphManagedDeviceDeviceCategory1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

func (t MicrosoftGraphManagedDevice_DeviceCategory) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *MicrosoftGraphManagedDevice_DeviceCategory) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsMicrosoftGraphDeviceHealthAttestationState returns the union data inside the MicrosoftGraphManagedDevice_DeviceHealthAttestationState as a MicrosoftGraphDeviceHealthAttestationState
func (t MicrosoftGraphManagedDevice_DeviceHealthAttestationState) AsMicrosoftGraphDeviceHealthAttestationState() (MicrosoftGraphDeviceHealthAttestationState, error) {
	var body MicrosoftGraphDeviceHealthAttestationState
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphDeviceHealthAttestationState overwrites any union data inside the MicrosoftGraphManagedDevice_DeviceHealthAttestationState as the provided MicrosoftGraphDeviceHealthAttestationState
func (t *MicrosoftGraphManagedDevice_DeviceHealthAttestationState) FromMicrosoftGraphDeviceHealthAttestationState(v MicrosoftGraphDeviceHealthAttestationState) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphDeviceHealthAttestationState performs a merge with any union data inside the MicrosoftGraphManagedDevice_DeviceHealthAttestationState, using the provided MicrosoftGraphDeviceHealthAttestationState
func (t *MicrosoftGraphManagedDevice_DeviceHealthAttestationState) MergeMicrosoftGraphDeviceHealthAttestationState(v MicrosoftGraphDeviceHealthAttestationState) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsMicrosoftGraphManagedDeviceDeviceHealthAttestationState1 returns the union data inside the MicrosoftGraphManagedDevice_DeviceHealthAttestationState as a MicrosoftGraphManagedDeviceDeviceHealthAttestationState1
func (t MicrosoftGraphManagedDevice_DeviceHealthAttestationState) AsMicrosoftGraphManagedDeviceDeviceHealthAttestationState1() (MicrosoftGraphManagedDeviceDeviceHealthAttestationState1, error) {
	var body MicrosoftGraphManagedDeviceDeviceHealthAttestationState1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphManagedDeviceDeviceHealthAttestationState1 overwrites any union data inside the MicrosoftGraphManagedDevice_DeviceHealthAttestationState as the provided MicrosoftGraphManagedDeviceDeviceHealthAttestationState1
func (t *MicrosoftGraphManagedDevice_DeviceHealthAttestationState) FromMicrosoftGraphManagedDeviceDeviceHealthAttestationState1(v MicrosoftGraphManagedDeviceDeviceHealthAttestationState1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphManagedDeviceDeviceHealthAttestationState1 performs a merge with any union data inside the MicrosoftGraphManagedDevice_DeviceHealthAttestationState, using the provided MicrosoftGraphManagedDeviceDeviceHealthAttestationState1
func (t *MicrosoftGraphManagedDevice_DeviceHealthAttestationState) MergeMicrosoftGraphManagedDeviceDeviceHealthAttestationState1(v MicrosoftGraphManagedDeviceDeviceHealthAttestationState1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

func (t MicrosoftGraphManagedDevice_DeviceHealthAttestationState) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *MicrosoftGraphManagedDevice_DeviceHealthAttestationState) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsMicrosoftGraphWindowsProtectionState returns the union data inside the MicrosoftGraphManagedDevice_WindowsProtectionState as a MicrosoftGraphWindowsProtectionState
func (t MicrosoftGraphManagedDevice_WindowsProtectionState) AsMicrosoftGraphWindowsProtectionState() (MicrosoftGraphWindowsProtectionState, error) {
	var body MicrosoftGraphWindowsProtectionState
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphWindowsProtectionState overwrites any union data inside the MicrosoftGraphManagedDevice_WindowsProtectionState as the provided MicrosoftGraphWindowsProtectionState
func (t *MicrosoftGraphManagedDevice_WindowsProtectionState) FromMicrosoftGraphWindowsProtectionState(v MicrosoftGraphWindowsProtectionState) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphWindowsProtectionState performs a merge with any union data inside the MicrosoftGraphManagedDevice_WindowsProtectionState, using the provided MicrosoftGraphWindowsProtectionState
func (t *MicrosoftGraphManagedDevice_WindowsProtectionState) MergeMicrosoftGraphWindowsProtectionState(v MicrosoftGraphWindowsProtectionState) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsMicrosoftGraphManagedDeviceWindowsProtectionState1 returns the union data inside the MicrosoftGraphManagedDevice_WindowsProtectionState as a MicrosoftGraphManagedDeviceWindowsProtectionState1
func (t MicrosoftGraphManagedDevice_WindowsProtectionState) AsMicrosoftGraphManagedDeviceWindowsProtectionState1() (MicrosoftGraphManagedDeviceWindowsProtectionState1, error) {
	var body MicrosoftGraphManagedDeviceWindowsProtectionState1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphManagedDeviceWindowsProtectionState1 overwrites any union data inside the MicrosoftGraphManagedDevice_WindowsProtectionState as the provided MicrosoftGraphManagedDeviceWindowsProtectionState1
func (t *MicrosoftGraphManagedDevice_WindowsProtectionState) FromMicrosoftGraphManagedDeviceWindowsProtectionState1(v MicrosoftGraphManagedDeviceWindowsProtectionState1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphManagedDeviceWindowsProtectionState1 performs a merge with any union data inside the MicrosoftGraphManagedDevice_WindowsProtectionState, using the provided MicrosoftGraphManagedDeviceWindowsProtectionState1
func (t *MicrosoftGraphManagedDevice_WindowsProtectionState) MergeMicrosoftGraphManagedDeviceWindowsProtectionState1(v MicrosoftGraphManagedDeviceWindowsProtectionState1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

func (t MicrosoftGraphManagedDevice_WindowsProtectionState) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *MicrosoftGraphManagedDevice_WindowsProtectionState) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsMicrosoftGraphIdentitySet returns the union data inside the MicrosoftGraphMeetingParticipantInfo_Identity as a MicrosoftGraphIdentitySet
func (t MicrosoftGraphMeetingParticipantInfo_Identity) AsMicrosoftGraphIdentitySet() (MicrosoftGraphIdentitySet, error) {
	var body MicrosoftGraphIdentitySet
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphIdentitySet overwrites any union data inside the MicrosoftGraphMeetingParticipantInfo_Identity as the provided MicrosoftGraphIdentitySet
func (t *MicrosoftGraphMeetingParticipantInfo_Identity) FromMicrosoftGraphIdentitySet(v MicrosoftGraphIdentitySet) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphIdentitySet performs a merge with any union data inside the MicrosoftGraphMeetingParticipantInfo_Identity, using the provided MicrosoftGraphIdentitySet
func (t *MicrosoftGraphMeetingParticipantInfo_Identity) MergeMicrosoftGraphIdentitySet(v MicrosoftGraphIdentitySet) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsMicrosoftGraphMeetingParticipantInfoIdentity1 returns the union data inside the MicrosoftGraphMeetingParticipantInfo_Identity as a MicrosoftGraphMeetingParticipantInfoIdentity1
func (t MicrosoftGraphMeetingParticipantInfo_Identity) AsMicrosoftGraphMeetingParticipantInfoIdentity1() (MicrosoftGraphMeetingParticipantInfoIdentity1, error) {
	var body MicrosoftGraphMeetingParticipantInfoIdentity1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphMeetingParticipantInfoIdentity1 overwrites any union data inside the MicrosoftGraphMeetingParticipantInfo_Identity as the provided MicrosoftGraphMeetingParticipantInfoIdentity1
func (t *MicrosoftGraphMeetingParticipantInfo_Identity) FromMicrosoftGraphMeetingParticipantInfoIdentity1(v MicrosoftGraphMeetingParticipantInfoIdentity1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphMeetingParticipantInfoIdentity1 performs a merge with any union data inside the MicrosoftGraphMeetingParticipantInfo_Identity, using the provided MicrosoftGraphMeetingParticipantInfoIdentity1
func (t *MicrosoftGraphMeetingParticipantInfo_Identity) MergeMicrosoftGraphMeetingParticipantInfoIdentity1(v MicrosoftGraphMeetingParticipantInfoIdentity1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

func (t MicrosoftGraphMeetingParticipantInfo_Identity) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *MicrosoftGraphMeetingParticipantInfo_Identity) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsMicrosoftGraphOnlineMeetingRole returns the union data inside the MicrosoftGraphMeetingParticipantInfo_Role as a MicrosoftGraphOnlineMeetingRole
func (t MicrosoftGraphMeetingParticipantInfo_Role) AsMicrosoftGraphOnlineMeetingRole() (MicrosoftGraphOnlineMeetingRole, error) {
	var body MicrosoftGraphOnlineMeetingRole
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphOnlineMeetingRole overwrites any union data inside the MicrosoftGraphMeetingParticipantInfo_Role as the provided MicrosoftGraphOnlineMeetingRole
func (t *MicrosoftGraphMeetingParticipantInfo_Role) FromMicrosoftGraphOnlineMeetingRole(v MicrosoftGraphOnlineMeetingRole) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphOnlineMeetingRole performs a merge with any union data inside the MicrosoftGraphMeetingParticipantInfo_Role, using the provided MicrosoftGraphOnlineMeetingRole
func (t *MicrosoftGraphMeetingParticipantInfo_Role) MergeMicrosoftGraphOnlineMeetingRole(v MicrosoftGraphOnlineMeetingRole) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsMicrosoftGraphMeetingParticipantInfoRole1 returns the union data inside the MicrosoftGraphMeetingParticipantInfo_Role as a MicrosoftGraphMeetingParticipantInfoRole1
func (t MicrosoftGraphMeetingParticipantInfo_Role) AsMicrosoftGraphMeetingParticipantInfoRole1() (MicrosoftGraphMeetingParticipantInfoRole1, error) {
	var body MicrosoftGraphMeetingParticipantInfoRole1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphMeetingParticipantInfoRole1 overwrites any union data inside the MicrosoftGraphMeetingParticipantInfo_Role as the provided MicrosoftGraphMeetingParticipantInfoRole1
func (t *MicrosoftGraphMeetingParticipantInfo_Role) FromMicrosoftGraphMeetingParticipantInfoRole1(v MicrosoftGraphMeetingParticipantInfoRole1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphMeetingParticipantInfoRole1 performs a merge with any union data inside the MicrosoftGraphMeetingParticipantInfo_Role, using the provided MicrosoftGraphMeetingParticipantInfoRole1
func (t *MicrosoftGraphMeetingParticipantInfo_Role) MergeMicrosoftGraphMeetingParticipantInfoRole1(v MicrosoftGraphMeetingParticipantInfoRole1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

func (t MicrosoftGraphMeetingParticipantInfo_Role) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *MicrosoftGraphMeetingParticipantInfo_Role) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsMicrosoftGraphMeetingParticipantInfo returns the union data inside the MicrosoftGraphMeetingParticipants_Attendees_Item as a MicrosoftGraphMeetingParticipantInfo
func (t MicrosoftGraphMeetingParticipants_Attendees_Item) AsMicrosoftGraphMeetingParticipantInfo() (MicrosoftGraphMeetingParticipantInfo, error) {
	var body MicrosoftGraphMeetingParticipantInfo
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphMeetingParticipantInfo overwrites any union data inside the MicrosoftGraphMeetingParticipants_Attendees_Item as the provided MicrosoftGraphMeetingParticipantInfo
func (t *MicrosoftGraphMeetingParticipants_Attendees_Item) FromMicrosoftGraphMeetingParticipantInfo(v MicrosoftGraphMeetingParticipantInfo) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphMeetingParticipantInfo performs a merge with any union data inside the MicrosoftGraphMeetingParticipants_Attendees_Item, using the provided MicrosoftGraphMeetingParticipantInfo
func (t *MicrosoftGraphMeetingParticipants_Attendees_Item) MergeMicrosoftGraphMeetingParticipantInfo(v MicrosoftGraphMeetingParticipantInfo) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsMicrosoftGraphMeetingParticipantsAttendees1 returns the union data inside the MicrosoftGraphMeetingParticipants_Attendees_Item as a MicrosoftGraphMeetingParticipantsAttendees1
func (t MicrosoftGraphMeetingParticipants_Attendees_Item) AsMicrosoftGraphMeetingParticipantsAttendees1() (MicrosoftGraphMeetingParticipantsAttendees1, error) {
	var body MicrosoftGraphMeetingParticipantsAttendees1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphMeetingParticipantsAttendees1 overwrites any union data inside the MicrosoftGraphMeetingParticipants_Attendees_Item as the provided MicrosoftGraphMeetingParticipantsAttendees1
func (t *MicrosoftGraphMeetingParticipants_Attendees_Item) FromMicrosoftGraphMeetingParticipantsAttendees1(v MicrosoftGraphMeetingParticipantsAttendees1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphMeetingParticipantsAttendees1 performs a merge with any union data inside the MicrosoftGraphMeetingParticipants_Attendees_Item, using the provided MicrosoftGraphMeetingParticipantsAttendees1
func (t *MicrosoftGraphMeetingParticipants_Attendees_Item) MergeMicrosoftGraphMeetingParticipantsAttendees1(v MicrosoftGraphMeetingParticipantsAttendees1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

func (t MicrosoftGraphMeetingParticipants_Attendees_Item) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *MicrosoftGraphMeetingParticipants_Attendees_Item) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsMicrosoftGraphMeetingParticipantInfo returns the union data inside the MicrosoftGraphMeetingParticipants_Organizer as a MicrosoftGraphMeetingParticipantInfo
func (t MicrosoftGraphMeetingParticipants_Organizer) AsMicrosoftGraphMeetingParticipantInfo() (MicrosoftGraphMeetingParticipantInfo, error) {
	var body MicrosoftGraphMeetingParticipantInfo
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphMeetingParticipantInfo overwrites any union data inside the MicrosoftGraphMeetingParticipants_Organizer as the provided MicrosoftGraphMeetingParticipantInfo
func (t *MicrosoftGraphMeetingParticipants_Organizer) FromMicrosoftGraphMeetingParticipantInfo(v MicrosoftGraphMeetingParticipantInfo) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphMeetingParticipantInfo performs a merge with any union data inside the MicrosoftGraphMeetingParticipants_Organizer, using the provided MicrosoftGraphMeetingParticipantInfo
func (t *MicrosoftGraphMeetingParticipants_Organizer) MergeMicrosoftGraphMeetingParticipantInfo(v MicrosoftGraphMeetingParticipantInfo) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsMicrosoftGraphMeetingParticipantsOrganizer1 returns the union data inside the MicrosoftGraphMeetingParticipants_Organizer as a MicrosoftGraphMeetingParticipantsOrganizer1
func (t MicrosoftGraphMeetingParticipants_Organizer) AsMicrosoftGraphMeetingParticipantsOrganizer1() (MicrosoftGraphMeetingParticipantsOrganizer1, error) {
	var body MicrosoftGraphMeetingParticipantsOrganizer1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphMeetingParticipantsOrganizer1 overwrites any union data inside the MicrosoftGraphMeetingParticipants_Organizer as the provided MicrosoftGraphMeetingParticipantsOrganizer1
func (t *MicrosoftGraphMeetingParticipants_Organizer) FromMicrosoftGraphMeetingParticipantsOrganizer1(v MicrosoftGraphMeetingParticipantsOrganizer1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphMeetingParticipantsOrganizer1 performs a merge with any union data inside the MicrosoftGraphMeetingParticipants_Organizer, using the provided MicrosoftGraphMeetingParticipantsOrganizer1
func (t *MicrosoftGraphMeetingParticipants_Organizer) MergeMicrosoftGraphMeetingParticipantsOrganizer1(v MicrosoftGraphMeetingParticipantsOrganizer1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

func (t MicrosoftGraphMeetingParticipants_Organizer) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *MicrosoftGraphMeetingParticipants_Organizer) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsMicrosoftGraphRecipient returns the union data inside the MicrosoftGraphMessage_BccRecipients_Item as a MicrosoftGraphRecipient
func (t MicrosoftGraphMessage_BccRecipients_Item) AsMicrosoftGraphRecipient() (MicrosoftGraphRecipient, error) {
	var body MicrosoftGraphRecipient
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphRecipient overwrites any union data inside the MicrosoftGraphMessage_BccRecipients_Item as the provided MicrosoftGraphRecipient
func (t *MicrosoftGraphMessage_BccRecipients_Item) FromMicrosoftGraphRecipient(v MicrosoftGraphRecipient) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphRecipient performs a merge with any union data inside the MicrosoftGraphMessage_BccRecipients_Item, using the provided MicrosoftGraphRecipient
func (t *MicrosoftGraphMessage_BccRecipients_Item) MergeMicrosoftGraphRecipient(v MicrosoftGraphRecipient) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsMicrosoftGraphMessageBccRecipients1 returns the union data inside the MicrosoftGraphMessage_BccRecipients_Item as a MicrosoftGraphMessageBccRecipients1
func (t MicrosoftGraphMessage_BccRecipients_Item) AsMicrosoftGraphMessageBccRecipients1() (MicrosoftGraphMessageBccRecipients1, error) {
	var body MicrosoftGraphMessageBccRecipients1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphMessageBccRecipients1 overwrites any union data inside the MicrosoftGraphMessage_BccRecipients_Item as the provided MicrosoftGraphMessageBccRecipients1
func (t *MicrosoftGraphMessage_BccRecipients_Item) FromMicrosoftGraphMessageBccRecipients1(v MicrosoftGraphMessageBccRecipients1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphMessageBccRecipients1 performs a merge with any union data inside the MicrosoftGraphMessage_BccRecipients_Item, using the provided MicrosoftGraphMessageBccRecipients1
func (t *MicrosoftGraphMessage_BccRecipients_Item) MergeMicrosoftGraphMessageBccRecipients1(v MicrosoftGraphMessageBccRecipients1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

func (t MicrosoftGraphMessage_BccRecipients_Item) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *MicrosoftGraphMessage_BccRecipients_Item) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsMicrosoftGraphItemBody returns the union data inside the MicrosoftGraphMessage_Body as a MicrosoftGraphItemBody
func (t MicrosoftGraphMessage_Body) AsMicrosoftGraphItemBody() (MicrosoftGraphItemBody, error) {
	var body MicrosoftGraphItemBody
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphItemBody overwrites any union data inside the MicrosoftGraphMessage_Body as the provided MicrosoftGraphItemBody
func (t *MicrosoftGraphMessage_Body) FromMicrosoftGraphItemBody(v MicrosoftGraphItemBody) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphItemBody performs a merge with any union data inside the MicrosoftGraphMessage_Body, using the provided MicrosoftGraphItemBody
func (t *MicrosoftGraphMessage_Body) MergeMicrosoftGraphItemBody(v MicrosoftGraphItemBody) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsMicrosoftGraphMessageBody1 returns the union data inside the MicrosoftGraphMessage_Body as a MicrosoftGraphMessageBody1
func (t MicrosoftGraphMessage_Body) AsMicrosoftGraphMessageBody1() (MicrosoftGraphMessageBody1, error) {
	var body MicrosoftGraphMessageBody1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphMessageBody1 overwrites any union data inside the MicrosoftGraphMessage_Body as the provided MicrosoftGraphMessageBody1
func (t *MicrosoftGraphMessage_Body) FromMicrosoftGraphMessageBody1(v MicrosoftGraphMessageBody1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphMessageBody1 performs a merge with any union data inside the MicrosoftGraphMessage_Body, using the provided MicrosoftGraphMessageBody1
func (t *MicrosoftGraphMessage_Body) MergeMicrosoftGraphMessageBody1(v MicrosoftGraphMessageBody1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

func (t MicrosoftGraphMessage_Body) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *MicrosoftGraphMessage_Body) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsMicrosoftGraphRecipient returns the union data inside the MicrosoftGraphMessage_CcRecipients_Item as a MicrosoftGraphRecipient
func (t MicrosoftGraphMessage_CcRecipients_Item) AsMicrosoftGraphRecipient() (MicrosoftGraphRecipient, error) {
	var body MicrosoftGraphRecipient
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphRecipient overwrites any union data inside the MicrosoftGraphMessage_CcRecipients_Item as the provided MicrosoftGraphRecipient
func (t *MicrosoftGraphMessage_CcRecipients_Item) FromMicrosoftGraphRecipient(v MicrosoftGraphRecipient) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphRecipient performs a merge with any union data inside the MicrosoftGraphMessage_CcRecipients_Item, using the provided MicrosoftGraphRecipient
func (t *MicrosoftGraphMessage_CcRecipients_Item) MergeMicrosoftGraphRecipient(v MicrosoftGraphRecipient) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsMicrosoftGraphMessageCcRecipients1 returns the union data inside the MicrosoftGraphMessage_CcRecipients_Item as a MicrosoftGraphMessageCcRecipients1
func (t MicrosoftGraphMessage_CcRecipients_Item) AsMicrosoftGraphMessageCcRecipients1() (MicrosoftGraphMessageCcRecipients1, error) {
	var body MicrosoftGraphMessageCcRecipients1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphMessageCcRecipients1 overwrites any union data inside the MicrosoftGraphMessage_CcRecipients_Item as the provided MicrosoftGraphMessageCcRecipients1
func (t *MicrosoftGraphMessage_CcRecipients_Item) FromMicrosoftGraphMessageCcRecipients1(v MicrosoftGraphMessageCcRecipients1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphMessageCcRecipients1 performs a merge with any union data inside the MicrosoftGraphMessage_CcRecipients_Item, using the provided MicrosoftGraphMessageCcRecipients1
func (t *MicrosoftGraphMessage_CcRecipients_Item) MergeMicrosoftGraphMessageCcRecipients1(v MicrosoftGraphMessageCcRecipients1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

func (t MicrosoftGraphMessage_CcRecipients_Item) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *MicrosoftGraphMessage_CcRecipients_Item) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsMicrosoftGraphFollowupFlag returns the union data inside the MicrosoftGraphMessage_Flag as a MicrosoftGraphFollowupFlag
func (t MicrosoftGraphMessage_Flag) AsMicrosoftGraphFollowupFlag() (MicrosoftGraphFollowupFlag, error) {
	var body MicrosoftGraphFollowupFlag
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphFollowupFlag overwrites any union data inside the MicrosoftGraphMessage_Flag as the provided MicrosoftGraphFollowupFlag
func (t *MicrosoftGraphMessage_Flag) FromMicrosoftGraphFollowupFlag(v MicrosoftGraphFollowupFlag) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphFollowupFlag performs a merge with any union data inside the MicrosoftGraphMessage_Flag, using the provided MicrosoftGraphFollowupFlag
func (t *MicrosoftGraphMessage_Flag) MergeMicrosoftGraphFollowupFlag(v MicrosoftGraphFollowupFlag) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsMicrosoftGraphMessageFlag1 returns the union data inside the MicrosoftGraphMessage_Flag as a MicrosoftGraphMessageFlag1
func (t MicrosoftGraphMessage_Flag) AsMicrosoftGraphMessageFlag1() (MicrosoftGraphMessageFlag1, error) {
	var body MicrosoftGraphMessageFlag1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphMessageFlag1 overwrites any union data inside the MicrosoftGraphMessage_Flag as the provided MicrosoftGraphMessageFlag1
func (t *MicrosoftGraphMessage_Flag) FromMicrosoftGraphMessageFlag1(v MicrosoftGraphMessageFlag1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphMessageFlag1 performs a merge with any union data inside the MicrosoftGraphMessage_Flag, using the provided MicrosoftGraphMessageFlag1
func (t *MicrosoftGraphMessage_Flag) MergeMicrosoftGraphMessageFlag1(v MicrosoftGraphMessageFlag1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

func (t MicrosoftGraphMessage_Flag) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *MicrosoftGraphMessage_Flag) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsMicrosoftGraphRecipient returns the union data inside the MicrosoftGraphMessage_From as a MicrosoftGraphRecipient
func (t MicrosoftGraphMessage_From) AsMicrosoftGraphRecipient() (MicrosoftGraphRecipient, error) {
	var body MicrosoftGraphRecipient
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphRecipient overwrites any union data inside the MicrosoftGraphMessage_From as the provided MicrosoftGraphRecipient
func (t *MicrosoftGraphMessage_From) FromMicrosoftGraphRecipient(v MicrosoftGraphRecipient) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphRecipient performs a merge with any union data inside the MicrosoftGraphMessage_From, using the provided MicrosoftGraphRecipient
func (t *MicrosoftGraphMessage_From) MergeMicrosoftGraphRecipient(v MicrosoftGraphRecipient) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsMicrosoftGraphMessageFrom1 returns the union data inside the MicrosoftGraphMessage_From as a MicrosoftGraphMessageFrom1
func (t MicrosoftGraphMessage_From) AsMicrosoftGraphMessageFrom1() (MicrosoftGraphMessageFrom1, error) {
	var body MicrosoftGraphMessageFrom1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphMessageFrom1 overwrites any union data inside the MicrosoftGraphMessage_From as the provided MicrosoftGraphMessageFrom1
func (t *MicrosoftGraphMessage_From) FromMicrosoftGraphMessageFrom1(v MicrosoftGraphMessageFrom1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphMessageFrom1 performs a merge with any union data inside the MicrosoftGraphMessage_From, using the provided MicrosoftGraphMessageFrom1
func (t *MicrosoftGraphMessage_From) MergeMicrosoftGraphMessageFrom1(v MicrosoftGraphMessageFrom1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

func (t MicrosoftGraphMessage_From) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *MicrosoftGraphMessage_From) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsMicrosoftGraphImportance returns the union data inside the MicrosoftGraphMessage_Importance as a MicrosoftGraphImportance
func (t MicrosoftGraphMessage_Importance) AsMicrosoftGraphImportance() (MicrosoftGraphImportance, error) {
	var body MicrosoftGraphImportance
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphImportance overwrites any union data inside the MicrosoftGraphMessage_Importance as the provided MicrosoftGraphImportance
func (t *MicrosoftGraphMessage_Importance) FromMicrosoftGraphImportance(v MicrosoftGraphImportance) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphImportance performs a merge with any union data inside the MicrosoftGraphMessage_Importance, using the provided MicrosoftGraphImportance
func (t *MicrosoftGraphMessage_Importance) MergeMicrosoftGraphImportance(v MicrosoftGraphImportance) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsMicrosoftGraphMessageImportance1 returns the union data inside the MicrosoftGraphMessage_Importance as a MicrosoftGraphMessageImportance1
func (t MicrosoftGraphMessage_Importance) AsMicrosoftGraphMessageImportance1() (MicrosoftGraphMessageImportance1, error) {
	var body MicrosoftGraphMessageImportance1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphMessageImportance1 overwrites any union data inside the MicrosoftGraphMessage_Importance as the provided MicrosoftGraphMessageImportance1
func (t *MicrosoftGraphMessage_Importance) FromMicrosoftGraphMessageImportance1(v MicrosoftGraphMessageImportance1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphMessageImportance1 performs a merge with any union data inside the MicrosoftGraphMessage_Importance, using the provided MicrosoftGraphMessageImportance1
func (t *MicrosoftGraphMessage_Importance) MergeMicrosoftGraphMessageImportance1(v MicrosoftGraphMessageImportance1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

func (t MicrosoftGraphMessage_Importance) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *MicrosoftGraphMessage_Importance) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsMicrosoftGraphInferenceClassificationType returns the union data inside the MicrosoftGraphMessage_InferenceClassification as a MicrosoftGraphInferenceClassificationType
func (t MicrosoftGraphMessage_InferenceClassification) AsMicrosoftGraphInferenceClassificationType() (MicrosoftGraphInferenceClassificationType, error) {
	var body MicrosoftGraphInferenceClassificationType
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphInferenceClassificationType overwrites any union data inside the MicrosoftGraphMessage_InferenceClassification as the provided MicrosoftGraphInferenceClassificationType
func (t *MicrosoftGraphMessage_InferenceClassification) FromMicrosoftGraphInferenceClassificationType(v MicrosoftGraphInferenceClassificationType) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphInferenceClassificationType performs a merge with any union data inside the MicrosoftGraphMessage_InferenceClassification, using the provided MicrosoftGraphInferenceClassificationType
func (t *MicrosoftGraphMessage_InferenceClassification) MergeMicrosoftGraphInferenceClassificationType(v MicrosoftGraphInferenceClassificationType) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsMicrosoftGraphMessageInferenceClassification1 returns the union data inside the MicrosoftGraphMessage_InferenceClassification as a MicrosoftGraphMessageInferenceClassification1
func (t MicrosoftGraphMessage_InferenceClassification) AsMicrosoftGraphMessageInferenceClassification1() (MicrosoftGraphMessageInferenceClassification1, error) {
	var body MicrosoftGraphMessageInferenceClassification1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphMessageInferenceClassification1 overwrites any union data inside the MicrosoftGraphMessage_InferenceClassification as the provided MicrosoftGraphMessageInferenceClassification1
func (t *MicrosoftGraphMessage_InferenceClassification) FromMicrosoftGraphMessageInferenceClassification1(v MicrosoftGraphMessageInferenceClassification1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphMessageInferenceClassification1 performs a merge with any union data inside the MicrosoftGraphMessage_InferenceClassification, using the provided MicrosoftGraphMessageInferenceClassification1
func (t *MicrosoftGraphMessage_InferenceClassification) MergeMicrosoftGraphMessageInferenceClassification1(v MicrosoftGraphMessageInferenceClassification1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

func (t MicrosoftGraphMessage_InferenceClassification) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *MicrosoftGraphMessage_InferenceClassification) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsMicrosoftGraphInternetMessageHeader returns the union data inside the MicrosoftGraphMessage_InternetMessageHeaders_Item as a MicrosoftGraphInternetMessageHeader
func (t MicrosoftGraphMessage_InternetMessageHeaders_Item) AsMicrosoftGraphInternetMessageHeader() (MicrosoftGraphInternetMessageHeader, error) {
	var body MicrosoftGraphInternetMessageHeader
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphInternetMessageHeader overwrites any union data inside the MicrosoftGraphMessage_InternetMessageHeaders_Item as the provided MicrosoftGraphInternetMessageHeader
func (t *MicrosoftGraphMessage_InternetMessageHeaders_Item) FromMicrosoftGraphInternetMessageHeader(v MicrosoftGraphInternetMessageHeader) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphInternetMessageHeader performs a merge with any union data inside the MicrosoftGraphMessage_InternetMessageHeaders_Item, using the provided MicrosoftGraphInternetMessageHeader
func (t *MicrosoftGraphMessage_InternetMessageHeaders_Item) MergeMicrosoftGraphInternetMessageHeader(v MicrosoftGraphInternetMessageHeader) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsMicrosoftGraphMessageInternetMessageHeaders1 returns the union data inside the MicrosoftGraphMessage_InternetMessageHeaders_Item as a MicrosoftGraphMessageInternetMessageHeaders1
func (t MicrosoftGraphMessage_InternetMessageHeaders_Item) AsMicrosoftGraphMessageInternetMessageHeaders1() (MicrosoftGraphMessageInternetMessageHeaders1, error) {
	var body MicrosoftGraphMessageInternetMessageHeaders1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphMessageInternetMessageHeaders1 overwrites any union data inside the MicrosoftGraphMessage_InternetMessageHeaders_Item as the provided MicrosoftGraphMessageInternetMessageHeaders1
func (t *MicrosoftGraphMessage_InternetMessageHeaders_Item) FromMicrosoftGraphMessageInternetMessageHeaders1(v MicrosoftGraphMessageInternetMessageHeaders1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphMessageInternetMessageHeaders1 performs a merge with any union data inside the MicrosoftGraphMessage_InternetMessageHeaders_Item, using the provided MicrosoftGraphMessageInternetMessageHeaders1
func (t *MicrosoftGraphMessage_InternetMessageHeaders_Item) MergeMicrosoftGraphMessageInternetMessageHeaders1(v MicrosoftGraphMessageInternetMessageHeaders1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

func (t MicrosoftGraphMessage_InternetMessageHeaders_Item) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *MicrosoftGraphMessage_InternetMessageHeaders_Item) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsMicrosoftGraphRecipient returns the union data inside the MicrosoftGraphMessage_ReplyTo_Item as a MicrosoftGraphRecipient
func (t MicrosoftGraphMessage_ReplyTo_Item) AsMicrosoftGraphRecipient() (MicrosoftGraphRecipient, error) {
	var body MicrosoftGraphRecipient
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphRecipient overwrites any union data inside the MicrosoftGraphMessage_ReplyTo_Item as the provided MicrosoftGraphRecipient
func (t *MicrosoftGraphMessage_ReplyTo_Item) FromMicrosoftGraphRecipient(v MicrosoftGraphRecipient) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphRecipient performs a merge with any union data inside the MicrosoftGraphMessage_ReplyTo_Item, using the provided MicrosoftGraphRecipient
func (t *MicrosoftGraphMessage_ReplyTo_Item) MergeMicrosoftGraphRecipient(v MicrosoftGraphRecipient) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsMicrosoftGraphMessageReplyTo1 returns the union data inside the MicrosoftGraphMessage_ReplyTo_Item as a MicrosoftGraphMessageReplyTo1
func (t MicrosoftGraphMessage_ReplyTo_Item) AsMicrosoftGraphMessageReplyTo1() (MicrosoftGraphMessageReplyTo1, error) {
	var body MicrosoftGraphMessageReplyTo1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphMessageReplyTo1 overwrites any union data inside the MicrosoftGraphMessage_ReplyTo_Item as the provided MicrosoftGraphMessageReplyTo1
func (t *MicrosoftGraphMessage_ReplyTo_Item) FromMicrosoftGraphMessageReplyTo1(v MicrosoftGraphMessageReplyTo1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphMessageReplyTo1 performs a merge with any union data inside the MicrosoftGraphMessage_ReplyTo_Item, using the provided MicrosoftGraphMessageReplyTo1
func (t *MicrosoftGraphMessage_ReplyTo_Item) MergeMicrosoftGraphMessageReplyTo1(v MicrosoftGraphMessageReplyTo1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

func (t MicrosoftGraphMessage_ReplyTo_Item) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *MicrosoftGraphMessage_ReplyTo_Item) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsMicrosoftGraphRecipient returns the union data inside the MicrosoftGraphMessage_Sender as a MicrosoftGraphRecipient
func (t MicrosoftGraphMessage_Sender) AsMicrosoftGraphRecipient() (MicrosoftGraphRecipient, error) {
	var body MicrosoftGraphRecipient
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphRecipient overwrites any union data inside the MicrosoftGraphMessage_Sender as the provided MicrosoftGraphRecipient
func (t *MicrosoftGraphMessage_Sender) FromMicrosoftGraphRecipient(v MicrosoftGraphRecipient) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphRecipient performs a merge with any union data inside the MicrosoftGraphMessage_Sender, using the provided MicrosoftGraphRecipient
func (t *MicrosoftGraphMessage_Sender) MergeMicrosoftGraphRecipient(v MicrosoftGraphRecipient) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsMicrosoftGraphMessageSender1 returns the union data inside the MicrosoftGraphMessage_Sender as a MicrosoftGraphMessageSender1
func (t MicrosoftGraphMessage_Sender) AsMicrosoftGraphMessageSender1() (MicrosoftGraphMessageSender1, error) {
	var body MicrosoftGraphMessageSender1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphMessageSender1 overwrites any union data inside the MicrosoftGraphMessage_Sender as the provided MicrosoftGraphMessageSender1
func (t *MicrosoftGraphMessage_Sender) FromMicrosoftGraphMessageSender1(v MicrosoftGraphMessageSender1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphMessageSender1 performs a merge with any union data inside the MicrosoftGraphMessage_Sender, using the provided MicrosoftGraphMessageSender1
func (t *MicrosoftGraphMessage_Sender) MergeMicrosoftGraphMessageSender1(v MicrosoftGraphMessageSender1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

func (t MicrosoftGraphMessage_Sender) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *MicrosoftGraphMessage_Sender) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsMicrosoftGraphRecipient returns the union data inside the MicrosoftGraphMessage_ToRecipients_Item as a MicrosoftGraphRecipient
func (t MicrosoftGraphMessage_ToRecipients_Item) AsMicrosoftGraphRecipient() (MicrosoftGraphRecipient, error) {
	var body MicrosoftGraphRecipient
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphRecipient overwrites any union data inside the MicrosoftGraphMessage_ToRecipients_Item as the provided MicrosoftGraphRecipient
func (t *MicrosoftGraphMessage_ToRecipients_Item) FromMicrosoftGraphRecipient(v MicrosoftGraphRecipient) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphRecipient performs a merge with any union data inside the MicrosoftGraphMessage_ToRecipients_Item, using the provided MicrosoftGraphRecipient
func (t *MicrosoftGraphMessage_ToRecipients_Item) MergeMicrosoftGraphRecipient(v MicrosoftGraphRecipient) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsMicrosoftGraphMessageToRecipients1 returns the union data inside the MicrosoftGraphMessage_ToRecipients_Item as a MicrosoftGraphMessageToRecipients1
func (t MicrosoftGraphMessage_ToRecipients_Item) AsMicrosoftGraphMessageToRecipients1() (MicrosoftGraphMessageToRecipients1, error) {
	var body MicrosoftGraphMessageToRecipients1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphMessageToRecipients1 overwrites any union data inside the MicrosoftGraphMessage_ToRecipients_Item as the provided MicrosoftGraphMessageToRecipients1
func (t *MicrosoftGraphMessage_ToRecipients_Item) FromMicrosoftGraphMessageToRecipients1(v MicrosoftGraphMessageToRecipients1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphMessageToRecipients1 performs a merge with any union data inside the MicrosoftGraphMessage_ToRecipients_Item, using the provided MicrosoftGraphMessageToRecipients1
func (t *MicrosoftGraphMessage_ToRecipients_Item) MergeMicrosoftGraphMessageToRecipients1(v MicrosoftGraphMessageToRecipients1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

func (t MicrosoftGraphMessage_ToRecipients_Item) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *MicrosoftGraphMessage_ToRecipients_Item) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsMicrosoftGraphItemBody returns the union data inside the MicrosoftGraphMessage_UniqueBody as a MicrosoftGraphItemBody
func (t MicrosoftGraphMessage_UniqueBody) AsMicrosoftGraphItemBody() (MicrosoftGraphItemBody, error) {
	var body MicrosoftGraphItemBody
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphItemBody overwrites any union data inside the MicrosoftGraphMessage_UniqueBody as the provided MicrosoftGraphItemBody
func (t *MicrosoftGraphMessage_UniqueBody) FromMicrosoftGraphItemBody(v MicrosoftGraphItemBody) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphItemBody performs a merge with any union data inside the MicrosoftGraphMessage_UniqueBody, using the provided MicrosoftGraphItemBody
func (t *MicrosoftGraphMessage_UniqueBody) MergeMicrosoftGraphItemBody(v MicrosoftGraphItemBody) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsMicrosoftGraphMessageUniqueBody1 returns the union data inside the MicrosoftGraphMessage_UniqueBody as a MicrosoftGraphMessageUniqueBody1
func (t MicrosoftGraphMessage_UniqueBody) AsMicrosoftGraphMessageUniqueBody1() (MicrosoftGraphMessageUniqueBody1, error) {
	var body MicrosoftGraphMessageUniqueBody1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphMessageUniqueBody1 overwrites any union data inside the MicrosoftGraphMessage_UniqueBody as the provided MicrosoftGraphMessageUniqueBody1
func (t *MicrosoftGraphMessage_UniqueBody) FromMicrosoftGraphMessageUniqueBody1(v MicrosoftGraphMessageUniqueBody1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphMessageUniqueBody1 performs a merge with any union data inside the MicrosoftGraphMessage_UniqueBody, using the provided MicrosoftGraphMessageUniqueBody1
func (t *MicrosoftGraphMessage_UniqueBody) MergeMicrosoftGraphMessageUniqueBody1(v MicrosoftGraphMessageUniqueBody1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

func (t MicrosoftGraphMessage_UniqueBody) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *MicrosoftGraphMessage_UniqueBody) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsMicrosoftGraphMessageRuleActions returns the union data inside the MicrosoftGraphMessageRule_Actions as a MicrosoftGraphMessageRuleActions
func (t MicrosoftGraphMessageRule_Actions) AsMicrosoftGraphMessageRuleActions() (MicrosoftGraphMessageRuleActions, error) {
	var body MicrosoftGraphMessageRuleActions
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphMessageRuleActions overwrites any union data inside the MicrosoftGraphMessageRule_Actions as the provided MicrosoftGraphMessageRuleActions
func (t *MicrosoftGraphMessageRule_Actions) FromMicrosoftGraphMessageRuleActions(v MicrosoftGraphMessageRuleActions) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphMessageRuleActions performs a merge with any union data inside the MicrosoftGraphMessageRule_Actions, using the provided MicrosoftGraphMessageRuleActions
func (t *MicrosoftGraphMessageRule_Actions) MergeMicrosoftGraphMessageRuleActions(v MicrosoftGraphMessageRuleActions) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsMicrosoftGraphMessageRuleActions1 returns the union data inside the MicrosoftGraphMessageRule_Actions as a MicrosoftGraphMessageRuleActions1
func (t MicrosoftGraphMessageRule_Actions) AsMicrosoftGraphMessageRuleActions1() (MicrosoftGraphMessageRuleActions1, error) {
	var body MicrosoftGraphMessageRuleActions1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphMessageRuleActions1 overwrites any union data inside the MicrosoftGraphMessageRule_Actions as the provided MicrosoftGraphMessageRuleActions1
func (t *MicrosoftGraphMessageRule_Actions) FromMicrosoftGraphMessageRuleActions1(v MicrosoftGraphMessageRuleActions1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphMessageRuleActions1 performs a merge with any union data inside the MicrosoftGraphMessageRule_Actions, using the provided MicrosoftGraphMessageRuleActions1
func (t *MicrosoftGraphMessageRule_Actions) MergeMicrosoftGraphMessageRuleActions1(v MicrosoftGraphMessageRuleActions1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

func (t MicrosoftGraphMessageRule_Actions) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *MicrosoftGraphMessageRule_Actions) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsMicrosoftGraphMessageRulePredicates returns the union data inside the MicrosoftGraphMessageRule_Conditions as a MicrosoftGraphMessageRulePredicates
func (t MicrosoftGraphMessageRule_Conditions) AsMicrosoftGraphMessageRulePredicates() (MicrosoftGraphMessageRulePredicates, error) {
	var body MicrosoftGraphMessageRulePredicates
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphMessageRulePredicates overwrites any union data inside the MicrosoftGraphMessageRule_Conditions as the provided MicrosoftGraphMessageRulePredicates
func (t *MicrosoftGraphMessageRule_Conditions) FromMicrosoftGraphMessageRulePredicates(v MicrosoftGraphMessageRulePredicates) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphMessageRulePredicates performs a merge with any union data inside the MicrosoftGraphMessageRule_Conditions, using the provided MicrosoftGraphMessageRulePredicates
func (t *MicrosoftGraphMessageRule_Conditions) MergeMicrosoftGraphMessageRulePredicates(v MicrosoftGraphMessageRulePredicates) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsMicrosoftGraphMessageRuleConditions1 returns the union data inside the MicrosoftGraphMessageRule_Conditions as a MicrosoftGraphMessageRuleConditions1
func (t MicrosoftGraphMessageRule_Conditions) AsMicrosoftGraphMessageRuleConditions1() (MicrosoftGraphMessageRuleConditions1, error) {
	var body MicrosoftGraphMessageRuleConditions1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphMessageRuleConditions1 overwrites any union data inside the MicrosoftGraphMessageRule_Conditions as the provided MicrosoftGraphMessageRuleConditions1
func (t *MicrosoftGraphMessageRule_Conditions) FromMicrosoftGraphMessageRuleConditions1(v MicrosoftGraphMessageRuleConditions1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphMessageRuleConditions1 performs a merge with any union data inside the MicrosoftGraphMessageRule_Conditions, using the provided MicrosoftGraphMessageRuleConditions1
func (t *MicrosoftGraphMessageRule_Conditions) MergeMicrosoftGraphMessageRuleConditions1(v MicrosoftGraphMessageRuleConditions1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

func (t MicrosoftGraphMessageRule_Conditions) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *MicrosoftGraphMessageRule_Conditions) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsMicrosoftGraphMessageRulePredicates returns the union data inside the MicrosoftGraphMessageRule_Exceptions as a MicrosoftGraphMessageRulePredicates
func (t MicrosoftGraphMessageRule_Exceptions) AsMicrosoftGraphMessageRulePredicates() (MicrosoftGraphMessageRulePredicates, error) {
	var body MicrosoftGraphMessageRulePredicates
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphMessageRulePredicates overwrites any union data inside the MicrosoftGraphMessageRule_Exceptions as the provided MicrosoftGraphMessageRulePredicates
func (t *MicrosoftGraphMessageRule_Exceptions) FromMicrosoftGraphMessageRulePredicates(v MicrosoftGraphMessageRulePredicates) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphMessageRulePredicates performs a merge with any union data inside the MicrosoftGraphMessageRule_Exceptions, using the provided MicrosoftGraphMessageRulePredicates
func (t *MicrosoftGraphMessageRule_Exceptions) MergeMicrosoftGraphMessageRulePredicates(v MicrosoftGraphMessageRulePredicates) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsMicrosoftGraphMessageRuleExceptions1 returns the union data inside the MicrosoftGraphMessageRule_Exceptions as a MicrosoftGraphMessageRuleExceptions1
func (t MicrosoftGraphMessageRule_Exceptions) AsMicrosoftGraphMessageRuleExceptions1() (MicrosoftGraphMessageRuleExceptions1, error) {
	var body MicrosoftGraphMessageRuleExceptions1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphMessageRuleExceptions1 overwrites any union data inside the MicrosoftGraphMessageRule_Exceptions as the provided MicrosoftGraphMessageRuleExceptions1
func (t *MicrosoftGraphMessageRule_Exceptions) FromMicrosoftGraphMessageRuleExceptions1(v MicrosoftGraphMessageRuleExceptions1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphMessageRuleExceptions1 performs a merge with any union data inside the MicrosoftGraphMessageRule_Exceptions, using the provided MicrosoftGraphMessageRuleExceptions1
func (t *MicrosoftGraphMessageRule_Exceptions) MergeMicrosoftGraphMessageRuleExceptions1(v MicrosoftGraphMessageRuleExceptions1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

func (t MicrosoftGraphMessageRule_Exceptions) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *MicrosoftGraphMessageRule_Exceptions) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsMicrosoftGraphRecipient returns the union data inside the MicrosoftGraphMessageRuleActions_ForwardAsAttachmentTo_Item as a MicrosoftGraphRecipient
func (t MicrosoftGraphMessageRuleActions_ForwardAsAttachmentTo_Item) AsMicrosoftGraphRecipient() (MicrosoftGraphRecipient, error) {
	var body MicrosoftGraphRecipient
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphRecipient overwrites any union data inside the MicrosoftGraphMessageRuleActions_ForwardAsAttachmentTo_Item as the provided MicrosoftGraphRecipient
func (t *MicrosoftGraphMessageRuleActions_ForwardAsAttachmentTo_Item) FromMicrosoftGraphRecipient(v MicrosoftGraphRecipient) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphRecipient performs a merge with any union data inside the MicrosoftGraphMessageRuleActions_ForwardAsAttachmentTo_Item, using the provided MicrosoftGraphRecipient
func (t *MicrosoftGraphMessageRuleActions_ForwardAsAttachmentTo_Item) MergeMicrosoftGraphRecipient(v MicrosoftGraphRecipient) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsMicrosoftGraphMessageRuleActionsForwardAsAttachmentTo1 returns the union data inside the MicrosoftGraphMessageRuleActions_ForwardAsAttachmentTo_Item as a MicrosoftGraphMessageRuleActionsForwardAsAttachmentTo1
func (t MicrosoftGraphMessageRuleActions_ForwardAsAttachmentTo_Item) AsMicrosoftGraphMessageRuleActionsForwardAsAttachmentTo1() (MicrosoftGraphMessageRuleActionsForwardAsAttachmentTo1, error) {
	var body MicrosoftGraphMessageRuleActionsForwardAsAttachmentTo1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphMessageRuleActionsForwardAsAttachmentTo1 overwrites any union data inside the MicrosoftGraphMessageRuleActions_ForwardAsAttachmentTo_Item as the provided MicrosoftGraphMessageRuleActionsForwardAsAttachmentTo1
func (t *MicrosoftGraphMessageRuleActions_ForwardAsAttachmentTo_Item) FromMicrosoftGraphMessageRuleActionsForwardAsAttachmentTo1(v MicrosoftGraphMessageRuleActionsForwardAsAttachmentTo1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphMessageRuleActionsForwardAsAttachmentTo1 performs a merge with any union data inside the MicrosoftGraphMessageRuleActions_ForwardAsAttachmentTo_Item, using the provided MicrosoftGraphMessageRuleActionsForwardAsAttachmentTo1
func (t *MicrosoftGraphMessageRuleActions_ForwardAsAttachmentTo_Item) MergeMicrosoftGraphMessageRuleActionsForwardAsAttachmentTo1(v MicrosoftGraphMessageRuleActionsForwardAsAttachmentTo1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

func (t MicrosoftGraphMessageRuleActions_ForwardAsAttachmentTo_Item) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *MicrosoftGraphMessageRuleActions_ForwardAsAttachmentTo_Item) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsMicrosoftGraphRecipient returns the union data inside the MicrosoftGraphMessageRuleActions_ForwardTo_Item as a MicrosoftGraphRecipient
func (t MicrosoftGraphMessageRuleActions_ForwardTo_Item) AsMicrosoftGraphRecipient() (MicrosoftGraphRecipient, error) {
	var body MicrosoftGraphRecipient
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphRecipient overwrites any union data inside the MicrosoftGraphMessageRuleActions_ForwardTo_Item as the provided MicrosoftGraphRecipient
func (t *MicrosoftGraphMessageRuleActions_ForwardTo_Item) FromMicrosoftGraphRecipient(v MicrosoftGraphRecipient) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphRecipient performs a merge with any union data inside the MicrosoftGraphMessageRuleActions_ForwardTo_Item, using the provided MicrosoftGraphRecipient
func (t *MicrosoftGraphMessageRuleActions_ForwardTo_Item) MergeMicrosoftGraphRecipient(v MicrosoftGraphRecipient) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsMicrosoftGraphMessageRuleActionsForwardTo1 returns the union data inside the MicrosoftGraphMessageRuleActions_ForwardTo_Item as a MicrosoftGraphMessageRuleActionsForwardTo1
func (t MicrosoftGraphMessageRuleActions_ForwardTo_Item) AsMicrosoftGraphMessageRuleActionsForwardTo1() (MicrosoftGraphMessageRuleActionsForwardTo1, error) {
	var body MicrosoftGraphMessageRuleActionsForwardTo1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphMessageRuleActionsForwardTo1 overwrites any union data inside the MicrosoftGraphMessageRuleActions_ForwardTo_Item as the provided MicrosoftGraphMessageRuleActionsForwardTo1
func (t *MicrosoftGraphMessageRuleActions_ForwardTo_Item) FromMicrosoftGraphMessageRuleActionsForwardTo1(v MicrosoftGraphMessageRuleActionsForwardTo1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphMessageRuleActionsForwardTo1 performs a merge with any union data inside the MicrosoftGraphMessageRuleActions_ForwardTo_Item, using the provided MicrosoftGraphMessageRuleActionsForwardTo1
func (t *MicrosoftGraphMessageRuleActions_ForwardTo_Item) MergeMicrosoftGraphMessageRuleActionsForwardTo1(v MicrosoftGraphMessageRuleActionsForwardTo1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

func (t MicrosoftGraphMessageRuleActions_ForwardTo_Item) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *MicrosoftGraphMessageRuleActions_ForwardTo_Item) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsMicrosoftGraphImportance returns the union data inside the MicrosoftGraphMessageRuleActions_MarkImportance as a MicrosoftGraphImportance
func (t MicrosoftGraphMessageRuleActions_MarkImportance) AsMicrosoftGraphImportance() (MicrosoftGraphImportance, error) {
	var body MicrosoftGraphImportance
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphImportance overwrites any union data inside the MicrosoftGraphMessageRuleActions_MarkImportance as the provided MicrosoftGraphImportance
func (t *MicrosoftGraphMessageRuleActions_MarkImportance) FromMicrosoftGraphImportance(v MicrosoftGraphImportance) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphImportance performs a merge with any union data inside the MicrosoftGraphMessageRuleActions_MarkImportance, using the provided MicrosoftGraphImportance
func (t *MicrosoftGraphMessageRuleActions_MarkImportance) MergeMicrosoftGraphImportance(v MicrosoftGraphImportance) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsMicrosoftGraphMessageRuleActionsMarkImportance1 returns the union data inside the MicrosoftGraphMessageRuleActions_MarkImportance as a MicrosoftGraphMessageRuleActionsMarkImportance1
func (t MicrosoftGraphMessageRuleActions_MarkImportance) AsMicrosoftGraphMessageRuleActionsMarkImportance1() (MicrosoftGraphMessageRuleActionsMarkImportance1, error) {
	var body MicrosoftGraphMessageRuleActionsMarkImportance1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphMessageRuleActionsMarkImportance1 overwrites any union data inside the MicrosoftGraphMessageRuleActions_MarkImportance as the provided MicrosoftGraphMessageRuleActionsMarkImportance1
func (t *MicrosoftGraphMessageRuleActions_MarkImportance) FromMicrosoftGraphMessageRuleActionsMarkImportance1(v MicrosoftGraphMessageRuleActionsMarkImportance1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphMessageRuleActionsMarkImportance1 performs a merge with any union data inside the MicrosoftGraphMessageRuleActions_MarkImportance, using the provided MicrosoftGraphMessageRuleActionsMarkImportance1
func (t *MicrosoftGraphMessageRuleActions_MarkImportance) MergeMicrosoftGraphMessageRuleActionsMarkImportance1(v MicrosoftGraphMessageRuleActionsMarkImportance1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

func (t MicrosoftGraphMessageRuleActions_MarkImportance) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *MicrosoftGraphMessageRuleActions_MarkImportance) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsMicrosoftGraphRecipient returns the union data inside the MicrosoftGraphMessageRuleActions_RedirectTo_Item as a MicrosoftGraphRecipient
func (t MicrosoftGraphMessageRuleActions_RedirectTo_Item) AsMicrosoftGraphRecipient() (MicrosoftGraphRecipient, error) {
	var body MicrosoftGraphRecipient
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphRecipient overwrites any union data inside the MicrosoftGraphMessageRuleActions_RedirectTo_Item as the provided MicrosoftGraphRecipient
func (t *MicrosoftGraphMessageRuleActions_RedirectTo_Item) FromMicrosoftGraphRecipient(v MicrosoftGraphRecipient) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphRecipient performs a merge with any union data inside the MicrosoftGraphMessageRuleActions_RedirectTo_Item, using the provided MicrosoftGraphRecipient
func (t *MicrosoftGraphMessageRuleActions_RedirectTo_Item) MergeMicrosoftGraphRecipient(v MicrosoftGraphRecipient) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsMicrosoftGraphMessageRuleActionsRedirectTo1 returns the union data inside the MicrosoftGraphMessageRuleActions_RedirectTo_Item as a MicrosoftGraphMessageRuleActionsRedirectTo1
func (t MicrosoftGraphMessageRuleActions_RedirectTo_Item) AsMicrosoftGraphMessageRuleActionsRedirectTo1() (MicrosoftGraphMessageRuleActionsRedirectTo1, error) {
	var body MicrosoftGraphMessageRuleActionsRedirectTo1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphMessageRuleActionsRedirectTo1 overwrites any union data inside the MicrosoftGraphMessageRuleActions_RedirectTo_Item as the provided MicrosoftGraphMessageRuleActionsRedirectTo1
func (t *MicrosoftGraphMessageRuleActions_RedirectTo_Item) FromMicrosoftGraphMessageRuleActionsRedirectTo1(v MicrosoftGraphMessageRuleActionsRedirectTo1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphMessageRuleActionsRedirectTo1 performs a merge with any union data inside the MicrosoftGraphMessageRuleActions_RedirectTo_Item, using the provided MicrosoftGraphMessageRuleActionsRedirectTo1
func (t *MicrosoftGraphMessageRuleActions_RedirectTo_Item) MergeMicrosoftGraphMessageRuleActionsRedirectTo1(v MicrosoftGraphMessageRuleActionsRedirectTo1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

func (t MicrosoftGraphMessageRuleActions_RedirectTo_Item) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *MicrosoftGraphMessageRuleActions_RedirectTo_Item) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsMicrosoftGraphRecipient returns the union data inside the MicrosoftGraphMessageRulePredicates_FromAddresses_Item as a MicrosoftGraphRecipient
func (t MicrosoftGraphMessageRulePredicates_FromAddresses_Item) AsMicrosoftGraphRecipient() (MicrosoftGraphRecipient, error) {
	var body MicrosoftGraphRecipient
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphRecipient overwrites any union data inside the MicrosoftGraphMessageRulePredicates_FromAddresses_Item as the provided MicrosoftGraphRecipient
func (t *MicrosoftGraphMessageRulePredicates_FromAddresses_Item) FromMicrosoftGraphRecipient(v MicrosoftGraphRecipient) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphRecipient performs a merge with any union data inside the MicrosoftGraphMessageRulePredicates_FromAddresses_Item, using the provided MicrosoftGraphRecipient
func (t *MicrosoftGraphMessageRulePredicates_FromAddresses_Item) MergeMicrosoftGraphRecipient(v MicrosoftGraphRecipient) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsMicrosoftGraphMessageRulePredicatesFromAddresses1 returns the union data inside the MicrosoftGraphMessageRulePredicates_FromAddresses_Item as a MicrosoftGraphMessageRulePredicatesFromAddresses1
func (t MicrosoftGraphMessageRulePredicates_FromAddresses_Item) AsMicrosoftGraphMessageRulePredicatesFromAddresses1() (MicrosoftGraphMessageRulePredicatesFromAddresses1, error) {
	var body MicrosoftGraphMessageRulePredicatesFromAddresses1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphMessageRulePredicatesFromAddresses1 overwrites any union data inside the MicrosoftGraphMessageRulePredicates_FromAddresses_Item as the provided MicrosoftGraphMessageRulePredicatesFromAddresses1
func (t *MicrosoftGraphMessageRulePredicates_FromAddresses_Item) FromMicrosoftGraphMessageRulePredicatesFromAddresses1(v MicrosoftGraphMessageRulePredicatesFromAddresses1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphMessageRulePredicatesFromAddresses1 performs a merge with any union data inside the MicrosoftGraphMessageRulePredicates_FromAddresses_Item, using the provided MicrosoftGraphMessageRulePredicatesFromAddresses1
func (t *MicrosoftGraphMessageRulePredicates_FromAddresses_Item) MergeMicrosoftGraphMessageRulePredicatesFromAddresses1(v MicrosoftGraphMessageRulePredicatesFromAddresses1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

func (t MicrosoftGraphMessageRulePredicates_FromAddresses_Item) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *MicrosoftGraphMessageRulePredicates_FromAddresses_Item) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsMicrosoftGraphImportance returns the union data inside the MicrosoftGraphMessageRulePredicates_Importance as a MicrosoftGraphImportance
func (t MicrosoftGraphMessageRulePredicates_Importance) AsMicrosoftGraphImportance() (MicrosoftGraphImportance, error) {
	var body MicrosoftGraphImportance
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphImportance overwrites any union data inside the MicrosoftGraphMessageRulePredicates_Importance as the provided MicrosoftGraphImportance
func (t *MicrosoftGraphMessageRulePredicates_Importance) FromMicrosoftGraphImportance(v MicrosoftGraphImportance) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphImportance performs a merge with any union data inside the MicrosoftGraphMessageRulePredicates_Importance, using the provided MicrosoftGraphImportance
func (t *MicrosoftGraphMessageRulePredicates_Importance) MergeMicrosoftGraphImportance(v MicrosoftGraphImportance) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsMicrosoftGraphMessageRulePredicatesImportance1 returns the union data inside the MicrosoftGraphMessageRulePredicates_Importance as a MicrosoftGraphMessageRulePredicatesImportance1
func (t MicrosoftGraphMessageRulePredicates_Importance) AsMicrosoftGraphMessageRulePredicatesImportance1() (MicrosoftGraphMessageRulePredicatesImportance1, error) {
	var body MicrosoftGraphMessageRulePredicatesImportance1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphMessageRulePredicatesImportance1 overwrites any union data inside the MicrosoftGraphMessageRulePredicates_Importance as the provided MicrosoftGraphMessageRulePredicatesImportance1
func (t *MicrosoftGraphMessageRulePredicates_Importance) FromMicrosoftGraphMessageRulePredicatesImportance1(v MicrosoftGraphMessageRulePredicatesImportance1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphMessageRulePredicatesImportance1 performs a merge with any union data inside the MicrosoftGraphMessageRulePredicates_Importance, using the provided MicrosoftGraphMessageRulePredicatesImportance1
func (t *MicrosoftGraphMessageRulePredicates_Importance) MergeMicrosoftGraphMessageRulePredicatesImportance1(v MicrosoftGraphMessageRulePredicatesImportance1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

func (t MicrosoftGraphMessageRulePredicates_Importance) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *MicrosoftGraphMessageRulePredicates_Importance) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsMicrosoftGraphMessageActionFlag returns the union data inside the MicrosoftGraphMessageRulePredicates_MessageActionFlag as a MicrosoftGraphMessageActionFlag
func (t MicrosoftGraphMessageRulePredicates_MessageActionFlag) AsMicrosoftGraphMessageActionFlag() (MicrosoftGraphMessageActionFlag, error) {
	var body MicrosoftGraphMessageActionFlag
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphMessageActionFlag overwrites any union data inside the MicrosoftGraphMessageRulePredicates_MessageActionFlag as the provided MicrosoftGraphMessageActionFlag
func (t *MicrosoftGraphMessageRulePredicates_MessageActionFlag) FromMicrosoftGraphMessageActionFlag(v MicrosoftGraphMessageActionFlag) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphMessageActionFlag performs a merge with any union data inside the MicrosoftGraphMessageRulePredicates_MessageActionFlag, using the provided MicrosoftGraphMessageActionFlag
func (t *MicrosoftGraphMessageRulePredicates_MessageActionFlag) MergeMicrosoftGraphMessageActionFlag(v MicrosoftGraphMessageActionFlag) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsMicrosoftGraphMessageRulePredicatesMessageActionFlag1 returns the union data inside the MicrosoftGraphMessageRulePredicates_MessageActionFlag as a MicrosoftGraphMessageRulePredicatesMessageActionFlag1
func (t MicrosoftGraphMessageRulePredicates_MessageActionFlag) AsMicrosoftGraphMessageRulePredicatesMessageActionFlag1() (MicrosoftGraphMessageRulePredicatesMessageActionFlag1, error) {
	var body MicrosoftGraphMessageRulePredicatesMessageActionFlag1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphMessageRulePredicatesMessageActionFlag1 overwrites any union data inside the MicrosoftGraphMessageRulePredicates_MessageActionFlag as the provided MicrosoftGraphMessageRulePredicatesMessageActionFlag1
func (t *MicrosoftGraphMessageRulePredicates_MessageActionFlag) FromMicrosoftGraphMessageRulePredicatesMessageActionFlag1(v MicrosoftGraphMessageRulePredicatesMessageActionFlag1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphMessageRulePredicatesMessageActionFlag1 performs a merge with any union data inside the MicrosoftGraphMessageRulePredicates_MessageActionFlag, using the provided MicrosoftGraphMessageRulePredicatesMessageActionFlag1
func (t *MicrosoftGraphMessageRulePredicates_MessageActionFlag) MergeMicrosoftGraphMessageRulePredicatesMessageActionFlag1(v MicrosoftGraphMessageRulePredicatesMessageActionFlag1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

func (t MicrosoftGraphMessageRulePredicates_MessageActionFlag) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *MicrosoftGraphMessageRulePredicates_MessageActionFlag) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsMicrosoftGraphSensitivity returns the union data inside the MicrosoftGraphMessageRulePredicates_Sensitivity as a MicrosoftGraphSensitivity
func (t MicrosoftGraphMessageRulePredicates_Sensitivity) AsMicrosoftGraphSensitivity() (MicrosoftGraphSensitivity, error) {
	var body MicrosoftGraphSensitivity
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphSensitivity overwrites any union data inside the MicrosoftGraphMessageRulePredicates_Sensitivity as the provided MicrosoftGraphSensitivity
func (t *MicrosoftGraphMessageRulePredicates_Sensitivity) FromMicrosoftGraphSensitivity(v MicrosoftGraphSensitivity) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphSensitivity performs a merge with any union data inside the MicrosoftGraphMessageRulePredicates_Sensitivity, using the provided MicrosoftGraphSensitivity
func (t *MicrosoftGraphMessageRulePredicates_Sensitivity) MergeMicrosoftGraphSensitivity(v MicrosoftGraphSensitivity) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsMicrosoftGraphMessageRulePredicatesSensitivity1 returns the union data inside the MicrosoftGraphMessageRulePredicates_Sensitivity as a MicrosoftGraphMessageRulePredicatesSensitivity1
func (t MicrosoftGraphMessageRulePredicates_Sensitivity) AsMicrosoftGraphMessageRulePredicatesSensitivity1() (MicrosoftGraphMessageRulePredicatesSensitivity1, error) {
	var body MicrosoftGraphMessageRulePredicatesSensitivity1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphMessageRulePredicatesSensitivity1 overwrites any union data inside the MicrosoftGraphMessageRulePredicates_Sensitivity as the provided MicrosoftGraphMessageRulePredicatesSensitivity1
func (t *MicrosoftGraphMessageRulePredicates_Sensitivity) FromMicrosoftGraphMessageRulePredicatesSensitivity1(v MicrosoftGraphMessageRulePredicatesSensitivity1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphMessageRulePredicatesSensitivity1 performs a merge with any union data inside the MicrosoftGraphMessageRulePredicates_Sensitivity, using the provided MicrosoftGraphMessageRulePredicatesSensitivity1
func (t *MicrosoftGraphMessageRulePredicates_Sensitivity) MergeMicrosoftGraphMessageRulePredicatesSensitivity1(v MicrosoftGraphMessageRulePredicatesSensitivity1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

func (t MicrosoftGraphMessageRulePredicates_Sensitivity) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *MicrosoftGraphMessageRulePredicates_Sensitivity) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsMicrosoftGraphRecipient returns the union data inside the MicrosoftGraphMessageRulePredicates_SentToAddresses_Item as a MicrosoftGraphRecipient
func (t MicrosoftGraphMessageRulePredicates_SentToAddresses_Item) AsMicrosoftGraphRecipient() (MicrosoftGraphRecipient, error) {
	var body MicrosoftGraphRecipient
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphRecipient overwrites any union data inside the MicrosoftGraphMessageRulePredicates_SentToAddresses_Item as the provided MicrosoftGraphRecipient
func (t *MicrosoftGraphMessageRulePredicates_SentToAddresses_Item) FromMicrosoftGraphRecipient(v MicrosoftGraphRecipient) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphRecipient performs a merge with any union data inside the MicrosoftGraphMessageRulePredicates_SentToAddresses_Item, using the provided MicrosoftGraphRecipient
func (t *MicrosoftGraphMessageRulePredicates_SentToAddresses_Item) MergeMicrosoftGraphRecipient(v MicrosoftGraphRecipient) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsMicrosoftGraphMessageRulePredicatesSentToAddresses1 returns the union data inside the MicrosoftGraphMessageRulePredicates_SentToAddresses_Item as a MicrosoftGraphMessageRulePredicatesSentToAddresses1
func (t MicrosoftGraphMessageRulePredicates_SentToAddresses_Item) AsMicrosoftGraphMessageRulePredicatesSentToAddresses1() (MicrosoftGraphMessageRulePredicatesSentToAddresses1, error) {
	var body MicrosoftGraphMessageRulePredicatesSentToAddresses1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphMessageRulePredicatesSentToAddresses1 overwrites any union data inside the MicrosoftGraphMessageRulePredicates_SentToAddresses_Item as the provided MicrosoftGraphMessageRulePredicatesSentToAddresses1
func (t *MicrosoftGraphMessageRulePredicates_SentToAddresses_Item) FromMicrosoftGraphMessageRulePredicatesSentToAddresses1(v MicrosoftGraphMessageRulePredicatesSentToAddresses1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphMessageRulePredicatesSentToAddresses1 performs a merge with any union data inside the MicrosoftGraphMessageRulePredicates_SentToAddresses_Item, using the provided MicrosoftGraphMessageRulePredicatesSentToAddresses1
func (t *MicrosoftGraphMessageRulePredicates_SentToAddresses_Item) MergeMicrosoftGraphMessageRulePredicatesSentToAddresses1(v MicrosoftGraphMessageRulePredicatesSentToAddresses1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

func (t MicrosoftGraphMessageRulePredicates_SentToAddresses_Item) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *MicrosoftGraphMessageRulePredicates_SentToAddresses_Item) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsMicrosoftGraphSizeRange returns the union data inside the MicrosoftGraphMessageRulePredicates_WithinSizeRange as a MicrosoftGraphSizeRange
func (t MicrosoftGraphMessageRulePredicates_WithinSizeRange) AsMicrosoftGraphSizeRange() (MicrosoftGraphSizeRange, error) {
	var body MicrosoftGraphSizeRange
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphSizeRange overwrites any union data inside the MicrosoftGraphMessageRulePredicates_WithinSizeRange as the provided MicrosoftGraphSizeRange
func (t *MicrosoftGraphMessageRulePredicates_WithinSizeRange) FromMicrosoftGraphSizeRange(v MicrosoftGraphSizeRange) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphSizeRange performs a merge with any union data inside the MicrosoftGraphMessageRulePredicates_WithinSizeRange, using the provided MicrosoftGraphSizeRange
func (t *MicrosoftGraphMessageRulePredicates_WithinSizeRange) MergeMicrosoftGraphSizeRange(v MicrosoftGraphSizeRange) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsMicrosoftGraphMessageRulePredicatesWithinSizeRange1 returns the union data inside the MicrosoftGraphMessageRulePredicates_WithinSizeRange as a MicrosoftGraphMessageRulePredicatesWithinSizeRange1
func (t MicrosoftGraphMessageRulePredicates_WithinSizeRange) AsMicrosoftGraphMessageRulePredicatesWithinSizeRange1() (MicrosoftGraphMessageRulePredicatesWithinSizeRange1, error) {
	var body MicrosoftGraphMessageRulePredicatesWithinSizeRange1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphMessageRulePredicatesWithinSizeRange1 overwrites any union data inside the MicrosoftGraphMessageRulePredicates_WithinSizeRange as the provided MicrosoftGraphMessageRulePredicatesWithinSizeRange1
func (t *MicrosoftGraphMessageRulePredicates_WithinSizeRange) FromMicrosoftGraphMessageRulePredicatesWithinSizeRange1(v MicrosoftGraphMessageRulePredicatesWithinSizeRange1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphMessageRulePredicatesWithinSizeRange1 performs a merge with any union data inside the MicrosoftGraphMessageRulePredicates_WithinSizeRange, using the provided MicrosoftGraphMessageRulePredicatesWithinSizeRange1
func (t *MicrosoftGraphMessageRulePredicates_WithinSizeRange) MergeMicrosoftGraphMessageRulePredicatesWithinSizeRange1(v MicrosoftGraphMessageRulePredicatesWithinSizeRange1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

func (t MicrosoftGraphMessageRulePredicates_WithinSizeRange) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *MicrosoftGraphMessageRulePredicates_WithinSizeRange) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsMicrosoftGraphDevice returns the union data inside the MicrosoftGraphMicrosoftAuthenticatorAuthenticationMethod_Device as a MicrosoftGraphDevice
func (t MicrosoftGraphMicrosoftAuthenticatorAuthenticationMethod_Device) AsMicrosoftGraphDevice() (MicrosoftGraphDevice, error) {
	var body MicrosoftGraphDevice
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphDevice overwrites any union data inside the MicrosoftGraphMicrosoftAuthenticatorAuthenticationMethod_Device as the provided MicrosoftGraphDevice
func (t *MicrosoftGraphMicrosoftAuthenticatorAuthenticationMethod_Device) FromMicrosoftGraphDevice(v MicrosoftGraphDevice) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphDevice performs a merge with any union data inside the MicrosoftGraphMicrosoftAuthenticatorAuthenticationMethod_Device, using the provided MicrosoftGraphDevice
func (t *MicrosoftGraphMicrosoftAuthenticatorAuthenticationMethod_Device) MergeMicrosoftGraphDevice(v MicrosoftGraphDevice) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsMicrosoftGraphMicrosoftAuthenticatorAuthenticationMethodDevice1 returns the union data inside the MicrosoftGraphMicrosoftAuthenticatorAuthenticationMethod_Device as a MicrosoftGraphMicrosoftAuthenticatorAuthenticationMethodDevice1
func (t MicrosoftGraphMicrosoftAuthenticatorAuthenticationMethod_Device) AsMicrosoftGraphMicrosoftAuthenticatorAuthenticationMethodDevice1() (MicrosoftGraphMicrosoftAuthenticatorAuthenticationMethodDevice1, error) {
	var body MicrosoftGraphMicrosoftAuthenticatorAuthenticationMethodDevice1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphMicrosoftAuthenticatorAuthenticationMethodDevice1 overwrites any union data inside the MicrosoftGraphMicrosoftAuthenticatorAuthenticationMethod_Device as the provided MicrosoftGraphMicrosoftAuthenticatorAuthenticationMethodDevice1
func (t *MicrosoftGraphMicrosoftAuthenticatorAuthenticationMethod_Device) FromMicrosoftGraphMicrosoftAuthenticatorAuthenticationMethodDevice1(v MicrosoftGraphMicrosoftAuthenticatorAuthenticationMethodDevice1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphMicrosoftAuthenticatorAuthenticationMethodDevice1 performs a merge with any union data inside the MicrosoftGraphMicrosoftAuthenticatorAuthenticationMethod_Device, using the provided MicrosoftGraphMicrosoftAuthenticatorAuthenticationMethodDevice1
func (t *MicrosoftGraphMicrosoftAuthenticatorAuthenticationMethod_Device) MergeMicrosoftGraphMicrosoftAuthenticatorAuthenticationMethodDevice1(v MicrosoftGraphMicrosoftAuthenticatorAuthenticationMethodDevice1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

func (t MicrosoftGraphMicrosoftAuthenticatorAuthenticationMethod_Device) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *MicrosoftGraphMicrosoftAuthenticatorAuthenticationMethod_Device) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsMicrosoftGraphIdentitySet returns the union data inside the MicrosoftGraphNotebook_CreatedBy as a MicrosoftGraphIdentitySet
func (t MicrosoftGraphNotebook_CreatedBy) AsMicrosoftGraphIdentitySet() (MicrosoftGraphIdentitySet, error) {
	var body MicrosoftGraphIdentitySet
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphIdentitySet overwrites any union data inside the MicrosoftGraphNotebook_CreatedBy as the provided MicrosoftGraphIdentitySet
func (t *MicrosoftGraphNotebook_CreatedBy) FromMicrosoftGraphIdentitySet(v MicrosoftGraphIdentitySet) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphIdentitySet performs a merge with any union data inside the MicrosoftGraphNotebook_CreatedBy, using the provided MicrosoftGraphIdentitySet
func (t *MicrosoftGraphNotebook_CreatedBy) MergeMicrosoftGraphIdentitySet(v MicrosoftGraphIdentitySet) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsMicrosoftGraphNotebookCreatedBy1 returns the union data inside the MicrosoftGraphNotebook_CreatedBy as a MicrosoftGraphNotebookCreatedBy1
func (t MicrosoftGraphNotebook_CreatedBy) AsMicrosoftGraphNotebookCreatedBy1() (MicrosoftGraphNotebookCreatedBy1, error) {
	var body MicrosoftGraphNotebookCreatedBy1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphNotebookCreatedBy1 overwrites any union data inside the MicrosoftGraphNotebook_CreatedBy as the provided MicrosoftGraphNotebookCreatedBy1
func (t *MicrosoftGraphNotebook_CreatedBy) FromMicrosoftGraphNotebookCreatedBy1(v MicrosoftGraphNotebookCreatedBy1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphNotebookCreatedBy1 performs a merge with any union data inside the MicrosoftGraphNotebook_CreatedBy, using the provided MicrosoftGraphNotebookCreatedBy1
func (t *MicrosoftGraphNotebook_CreatedBy) MergeMicrosoftGraphNotebookCreatedBy1(v MicrosoftGraphNotebookCreatedBy1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

func (t MicrosoftGraphNotebook_CreatedBy) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *MicrosoftGraphNotebook_CreatedBy) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsMicrosoftGraphIdentitySet returns the union data inside the MicrosoftGraphNotebook_LastModifiedBy as a MicrosoftGraphIdentitySet
func (t MicrosoftGraphNotebook_LastModifiedBy) AsMicrosoftGraphIdentitySet() (MicrosoftGraphIdentitySet, error) {
	var body MicrosoftGraphIdentitySet
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphIdentitySet overwrites any union data inside the MicrosoftGraphNotebook_LastModifiedBy as the provided MicrosoftGraphIdentitySet
func (t *MicrosoftGraphNotebook_LastModifiedBy) FromMicrosoftGraphIdentitySet(v MicrosoftGraphIdentitySet) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphIdentitySet performs a merge with any union data inside the MicrosoftGraphNotebook_LastModifiedBy, using the provided MicrosoftGraphIdentitySet
func (t *MicrosoftGraphNotebook_LastModifiedBy) MergeMicrosoftGraphIdentitySet(v MicrosoftGraphIdentitySet) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsMicrosoftGraphNotebookLastModifiedBy1 returns the union data inside the MicrosoftGraphNotebook_LastModifiedBy as a MicrosoftGraphNotebookLastModifiedBy1
func (t MicrosoftGraphNotebook_LastModifiedBy) AsMicrosoftGraphNotebookLastModifiedBy1() (MicrosoftGraphNotebookLastModifiedBy1, error) {
	var body MicrosoftGraphNotebookLastModifiedBy1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphNotebookLastModifiedBy1 overwrites any union data inside the MicrosoftGraphNotebook_LastModifiedBy as the provided MicrosoftGraphNotebookLastModifiedBy1
func (t *MicrosoftGraphNotebook_LastModifiedBy) FromMicrosoftGraphNotebookLastModifiedBy1(v MicrosoftGraphNotebookLastModifiedBy1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphNotebookLastModifiedBy1 performs a merge with any union data inside the MicrosoftGraphNotebook_LastModifiedBy, using the provided MicrosoftGraphNotebookLastModifiedBy1
func (t *MicrosoftGraphNotebook_LastModifiedBy) MergeMicrosoftGraphNotebookLastModifiedBy1(v MicrosoftGraphNotebookLastModifiedBy1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

func (t MicrosoftGraphNotebook_LastModifiedBy) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *MicrosoftGraphNotebook_LastModifiedBy) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsMicrosoftGraphNotebookLinks returns the union data inside the MicrosoftGraphNotebook_Links as a MicrosoftGraphNotebookLinks
func (t MicrosoftGraphNotebook_Links) AsMicrosoftGraphNotebookLinks() (MicrosoftGraphNotebookLinks, error) {
	var body MicrosoftGraphNotebookLinks
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphNotebookLinks overwrites any union data inside the MicrosoftGraphNotebook_Links as the provided MicrosoftGraphNotebookLinks
func (t *MicrosoftGraphNotebook_Links) FromMicrosoftGraphNotebookLinks(v MicrosoftGraphNotebookLinks) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphNotebookLinks performs a merge with any union data inside the MicrosoftGraphNotebook_Links, using the provided MicrosoftGraphNotebookLinks
func (t *MicrosoftGraphNotebook_Links) MergeMicrosoftGraphNotebookLinks(v MicrosoftGraphNotebookLinks) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsMicrosoftGraphNotebookLinks1 returns the union data inside the MicrosoftGraphNotebook_Links as a MicrosoftGraphNotebookLinks1
func (t MicrosoftGraphNotebook_Links) AsMicrosoftGraphNotebookLinks1() (MicrosoftGraphNotebookLinks1, error) {
	var body MicrosoftGraphNotebookLinks1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphNotebookLinks1 overwrites any union data inside the MicrosoftGraphNotebook_Links as the provided MicrosoftGraphNotebookLinks1
func (t *MicrosoftGraphNotebook_Links) FromMicrosoftGraphNotebookLinks1(v MicrosoftGraphNotebookLinks1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphNotebookLinks1 performs a merge with any union data inside the MicrosoftGraphNotebook_Links, using the provided MicrosoftGraphNotebookLinks1
func (t *MicrosoftGraphNotebook_Links) MergeMicrosoftGraphNotebookLinks1(v MicrosoftGraphNotebookLinks1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

func (t MicrosoftGraphNotebook_Links) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *MicrosoftGraphNotebook_Links) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsMicrosoftGraphOnenoteUserRole returns the union data inside the MicrosoftGraphNotebook_UserRole as a MicrosoftGraphOnenoteUserRole
func (t MicrosoftGraphNotebook_UserRole) AsMicrosoftGraphOnenoteUserRole() (MicrosoftGraphOnenoteUserRole, error) {
	var body MicrosoftGraphOnenoteUserRole
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphOnenoteUserRole overwrites any union data inside the MicrosoftGraphNotebook_UserRole as the provided MicrosoftGraphOnenoteUserRole
func (t *MicrosoftGraphNotebook_UserRole) FromMicrosoftGraphOnenoteUserRole(v MicrosoftGraphOnenoteUserRole) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphOnenoteUserRole performs a merge with any union data inside the MicrosoftGraphNotebook_UserRole, using the provided MicrosoftGraphOnenoteUserRole
func (t *MicrosoftGraphNotebook_UserRole) MergeMicrosoftGraphOnenoteUserRole(v MicrosoftGraphOnenoteUserRole) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsMicrosoftGraphNotebookUserRole1 returns the union data inside the MicrosoftGraphNotebook_UserRole as a MicrosoftGraphNotebookUserRole1
func (t MicrosoftGraphNotebook_UserRole) AsMicrosoftGraphNotebookUserRole1() (MicrosoftGraphNotebookUserRole1, error) {
	var body MicrosoftGraphNotebookUserRole1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphNotebookUserRole1 overwrites any union data inside the MicrosoftGraphNotebook_UserRole as the provided MicrosoftGraphNotebookUserRole1
func (t *MicrosoftGraphNotebook_UserRole) FromMicrosoftGraphNotebookUserRole1(v MicrosoftGraphNotebookUserRole1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphNotebookUserRole1 performs a merge with any union data inside the MicrosoftGraphNotebook_UserRole, using the provided MicrosoftGraphNotebookUserRole1
func (t *MicrosoftGraphNotebook_UserRole) MergeMicrosoftGraphNotebookUserRole1(v MicrosoftGraphNotebookUserRole1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

func (t MicrosoftGraphNotebook_UserRole) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *MicrosoftGraphNotebook_UserRole) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsMicrosoftGraphExternalLink returns the union data inside the MicrosoftGraphNotebookLinks_OneNoteClientUrl as a MicrosoftGraphExternalLink
func (t MicrosoftGraphNotebookLinks_OneNoteClientUrl) AsMicrosoftGraphExternalLink() (MicrosoftGraphExternalLink, error) {
	var body MicrosoftGraphExternalLink
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphExternalLink overwrites any union data inside the MicrosoftGraphNotebookLinks_OneNoteClientUrl as the provided MicrosoftGraphExternalLink
func (t *MicrosoftGraphNotebookLinks_OneNoteClientUrl) FromMicrosoftGraphExternalLink(v MicrosoftGraphExternalLink) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphExternalLink performs a merge with any union data inside the MicrosoftGraphNotebookLinks_OneNoteClientUrl, using the provided MicrosoftGraphExternalLink
func (t *MicrosoftGraphNotebookLinks_OneNoteClientUrl) MergeMicrosoftGraphExternalLink(v MicrosoftGraphExternalLink) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsMicrosoftGraphNotebookLinksOneNoteClientUrl1 returns the union data inside the MicrosoftGraphNotebookLinks_OneNoteClientUrl as a MicrosoftGraphNotebookLinksOneNoteClientUrl1
func (t MicrosoftGraphNotebookLinks_OneNoteClientUrl) AsMicrosoftGraphNotebookLinksOneNoteClientUrl1() (MicrosoftGraphNotebookLinksOneNoteClientUrl1, error) {
	var body MicrosoftGraphNotebookLinksOneNoteClientUrl1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphNotebookLinksOneNoteClientUrl1 overwrites any union data inside the MicrosoftGraphNotebookLinks_OneNoteClientUrl as the provided MicrosoftGraphNotebookLinksOneNoteClientUrl1
func (t *MicrosoftGraphNotebookLinks_OneNoteClientUrl) FromMicrosoftGraphNotebookLinksOneNoteClientUrl1(v MicrosoftGraphNotebookLinksOneNoteClientUrl1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphNotebookLinksOneNoteClientUrl1 performs a merge with any union data inside the MicrosoftGraphNotebookLinks_OneNoteClientUrl, using the provided MicrosoftGraphNotebookLinksOneNoteClientUrl1
func (t *MicrosoftGraphNotebookLinks_OneNoteClientUrl) MergeMicrosoftGraphNotebookLinksOneNoteClientUrl1(v MicrosoftGraphNotebookLinksOneNoteClientUrl1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

func (t MicrosoftGraphNotebookLinks_OneNoteClientUrl) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *MicrosoftGraphNotebookLinks_OneNoteClientUrl) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsMicrosoftGraphExternalLink returns the union data inside the MicrosoftGraphNotebookLinks_OneNoteWebUrl as a MicrosoftGraphExternalLink
func (t MicrosoftGraphNotebookLinks_OneNoteWebUrl) AsMicrosoftGraphExternalLink() (MicrosoftGraphExternalLink, error) {
	var body MicrosoftGraphExternalLink
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphExternalLink overwrites any union data inside the MicrosoftGraphNotebookLinks_OneNoteWebUrl as the provided MicrosoftGraphExternalLink
func (t *MicrosoftGraphNotebookLinks_OneNoteWebUrl) FromMicrosoftGraphExternalLink(v MicrosoftGraphExternalLink) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphExternalLink performs a merge with any union data inside the MicrosoftGraphNotebookLinks_OneNoteWebUrl, using the provided MicrosoftGraphExternalLink
func (t *MicrosoftGraphNotebookLinks_OneNoteWebUrl) MergeMicrosoftGraphExternalLink(v MicrosoftGraphExternalLink) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsMicrosoftGraphNotebookLinksOneNoteWebUrl1 returns the union data inside the MicrosoftGraphNotebookLinks_OneNoteWebUrl as a MicrosoftGraphNotebookLinksOneNoteWebUrl1
func (t MicrosoftGraphNotebookLinks_OneNoteWebUrl) AsMicrosoftGraphNotebookLinksOneNoteWebUrl1() (MicrosoftGraphNotebookLinksOneNoteWebUrl1, error) {
	var body MicrosoftGraphNotebookLinksOneNoteWebUrl1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphNotebookLinksOneNoteWebUrl1 overwrites any union data inside the MicrosoftGraphNotebookLinks_OneNoteWebUrl as the provided MicrosoftGraphNotebookLinksOneNoteWebUrl1
func (t *MicrosoftGraphNotebookLinks_OneNoteWebUrl) FromMicrosoftGraphNotebookLinksOneNoteWebUrl1(v MicrosoftGraphNotebookLinksOneNoteWebUrl1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphNotebookLinksOneNoteWebUrl1 performs a merge with any union data inside the MicrosoftGraphNotebookLinks_OneNoteWebUrl, using the provided MicrosoftGraphNotebookLinksOneNoteWebUrl1
func (t *MicrosoftGraphNotebookLinks_OneNoteWebUrl) MergeMicrosoftGraphNotebookLinksOneNoteWebUrl1(v MicrosoftGraphNotebookLinksOneNoteWebUrl1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

func (t MicrosoftGraphNotebookLinks_OneNoteWebUrl) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *MicrosoftGraphNotebookLinks_OneNoteWebUrl) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsMicrosoftGraphNumberColumnMaximum0 returns the union data inside the MicrosoftGraphNumberColumn_Maximum as a MicrosoftGraphNumberColumnMaximum0
func (t MicrosoftGraphNumberColumn_Maximum) AsMicrosoftGraphNumberColumnMaximum0() (MicrosoftGraphNumberColumnMaximum0, error) {
	var body MicrosoftGraphNumberColumnMaximum0
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphNumberColumnMaximum0 overwrites any union data inside the MicrosoftGraphNumberColumn_Maximum as the provided MicrosoftGraphNumberColumnMaximum0
func (t *MicrosoftGraphNumberColumn_Maximum) FromMicrosoftGraphNumberColumnMaximum0(v MicrosoftGraphNumberColumnMaximum0) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphNumberColumnMaximum0 performs a merge with any union data inside the MicrosoftGraphNumberColumn_Maximum, using the provided MicrosoftGraphNumberColumnMaximum0
func (t *MicrosoftGraphNumberColumn_Maximum) MergeMicrosoftGraphNumberColumnMaximum0(v MicrosoftGraphNumberColumnMaximum0) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsMicrosoftGraphNumberColumnMaximum1 returns the union data inside the MicrosoftGraphNumberColumn_Maximum as a MicrosoftGraphNumberColumnMaximum1
func (t MicrosoftGraphNumberColumn_Maximum) AsMicrosoftGraphNumberColumnMaximum1() (MicrosoftGraphNumberColumnMaximum1, error) {
	var body MicrosoftGraphNumberColumnMaximum1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphNumberColumnMaximum1 overwrites any union data inside the MicrosoftGraphNumberColumn_Maximum as the provided MicrosoftGraphNumberColumnMaximum1
func (t *MicrosoftGraphNumberColumn_Maximum) FromMicrosoftGraphNumberColumnMaximum1(v MicrosoftGraphNumberColumnMaximum1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphNumberColumnMaximum1 performs a merge with any union data inside the MicrosoftGraphNumberColumn_Maximum, using the provided MicrosoftGraphNumberColumnMaximum1
func (t *MicrosoftGraphNumberColumn_Maximum) MergeMicrosoftGraphNumberColumnMaximum1(v MicrosoftGraphNumberColumnMaximum1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsReferenceNumeric returns the union data inside the MicrosoftGraphNumberColumn_Maximum as a ReferenceNumeric
func (t MicrosoftGraphNumberColumn_Maximum) AsReferenceNumeric() (ReferenceNumeric, error) {
	var body ReferenceNumeric
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromReferenceNumeric overwrites any union data inside the MicrosoftGraphNumberColumn_Maximum as the provided ReferenceNumeric
func (t *MicrosoftGraphNumberColumn_Maximum) FromReferenceNumeric(v ReferenceNumeric) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeReferenceNumeric performs a merge with any union data inside the MicrosoftGraphNumberColumn_Maximum, using the provided ReferenceNumeric
func (t *MicrosoftGraphNumberColumn_Maximum) MergeReferenceNumeric(v ReferenceNumeric) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

func (t MicrosoftGraphNumberColumn_Maximum) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *MicrosoftGraphNumberColumn_Maximum) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsMicrosoftGraphNumberColumnMinimum0 returns the union data inside the MicrosoftGraphNumberColumn_Minimum as a MicrosoftGraphNumberColumnMinimum0
func (t MicrosoftGraphNumberColumn_Minimum) AsMicrosoftGraphNumberColumnMinimum0() (MicrosoftGraphNumberColumnMinimum0, error) {
	var body MicrosoftGraphNumberColumnMinimum0
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphNumberColumnMinimum0 overwrites any union data inside the MicrosoftGraphNumberColumn_Minimum as the provided MicrosoftGraphNumberColumnMinimum0
func (t *MicrosoftGraphNumberColumn_Minimum) FromMicrosoftGraphNumberColumnMinimum0(v MicrosoftGraphNumberColumnMinimum0) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphNumberColumnMinimum0 performs a merge with any union data inside the MicrosoftGraphNumberColumn_Minimum, using the provided MicrosoftGraphNumberColumnMinimum0
func (t *MicrosoftGraphNumberColumn_Minimum) MergeMicrosoftGraphNumberColumnMinimum0(v MicrosoftGraphNumberColumnMinimum0) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsMicrosoftGraphNumberColumnMinimum1 returns the union data inside the MicrosoftGraphNumberColumn_Minimum as a MicrosoftGraphNumberColumnMinimum1
func (t MicrosoftGraphNumberColumn_Minimum) AsMicrosoftGraphNumberColumnMinimum1() (MicrosoftGraphNumberColumnMinimum1, error) {
	var body MicrosoftGraphNumberColumnMinimum1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphNumberColumnMinimum1 overwrites any union data inside the MicrosoftGraphNumberColumn_Minimum as the provided MicrosoftGraphNumberColumnMinimum1
func (t *MicrosoftGraphNumberColumn_Minimum) FromMicrosoftGraphNumberColumnMinimum1(v MicrosoftGraphNumberColumnMinimum1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphNumberColumnMinimum1 performs a merge with any union data inside the MicrosoftGraphNumberColumn_Minimum, using the provided MicrosoftGraphNumberColumnMinimum1
func (t *MicrosoftGraphNumberColumn_Minimum) MergeMicrosoftGraphNumberColumnMinimum1(v MicrosoftGraphNumberColumnMinimum1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsReferenceNumeric returns the union data inside the MicrosoftGraphNumberColumn_Minimum as a ReferenceNumeric
func (t MicrosoftGraphNumberColumn_Minimum) AsReferenceNumeric() (ReferenceNumeric, error) {
	var body ReferenceNumeric
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromReferenceNumeric overwrites any union data inside the MicrosoftGraphNumberColumn_Minimum as the provided ReferenceNumeric
func (t *MicrosoftGraphNumberColumn_Minimum) FromReferenceNumeric(v ReferenceNumeric) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeReferenceNumeric performs a merge with any union data inside the MicrosoftGraphNumberColumn_Minimum, using the provided ReferenceNumeric
func (t *MicrosoftGraphNumberColumn_Minimum) MergeReferenceNumeric(v ReferenceNumeric) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

func (t MicrosoftGraphNumberColumn_Minimum) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *MicrosoftGraphNumberColumn_Minimum) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsMicrosoftGraphScheduleChangeRequestActor returns the union data inside the MicrosoftGraphOfferShiftRequest_AssignedTo as a MicrosoftGraphScheduleChangeRequestActor
func (t MicrosoftGraphOfferShiftRequest_AssignedTo) AsMicrosoftGraphScheduleChangeRequestActor() (MicrosoftGraphScheduleChangeRequestActor, error) {
	var body MicrosoftGraphScheduleChangeRequestActor
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphScheduleChangeRequestActor overwrites any union data inside the MicrosoftGraphOfferShiftRequest_AssignedTo as the provided MicrosoftGraphScheduleChangeRequestActor
func (t *MicrosoftGraphOfferShiftRequest_AssignedTo) FromMicrosoftGraphScheduleChangeRequestActor(v MicrosoftGraphScheduleChangeRequestActor) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphScheduleChangeRequestActor performs a merge with any union data inside the MicrosoftGraphOfferShiftRequest_AssignedTo, using the provided MicrosoftGraphScheduleChangeRequestActor
func (t *MicrosoftGraphOfferShiftRequest_AssignedTo) MergeMicrosoftGraphScheduleChangeRequestActor(v MicrosoftGraphScheduleChangeRequestActor) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsMicrosoftGraphOfferShiftRequestAssignedTo1 returns the union data inside the MicrosoftGraphOfferShiftRequest_AssignedTo as a MicrosoftGraphOfferShiftRequestAssignedTo1
func (t MicrosoftGraphOfferShiftRequest_AssignedTo) AsMicrosoftGraphOfferShiftRequestAssignedTo1() (MicrosoftGraphOfferShiftRequestAssignedTo1, error) {
	var body MicrosoftGraphOfferShiftRequestAssignedTo1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphOfferShiftRequestAssignedTo1 overwrites any union data inside the MicrosoftGraphOfferShiftRequest_AssignedTo as the provided MicrosoftGraphOfferShiftRequestAssignedTo1
func (t *MicrosoftGraphOfferShiftRequest_AssignedTo) FromMicrosoftGraphOfferShiftRequestAssignedTo1(v MicrosoftGraphOfferShiftRequestAssignedTo1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphOfferShiftRequestAssignedTo1 performs a merge with any union data inside the MicrosoftGraphOfferShiftRequest_AssignedTo, using the provided MicrosoftGraphOfferShiftRequestAssignedTo1
func (t *MicrosoftGraphOfferShiftRequest_AssignedTo) MergeMicrosoftGraphOfferShiftRequestAssignedTo1(v MicrosoftGraphOfferShiftRequestAssignedTo1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

func (t MicrosoftGraphOfferShiftRequest_AssignedTo) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *MicrosoftGraphOfferShiftRequest_AssignedTo) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsMicrosoftGraphIdentitySet returns the union data inside the MicrosoftGraphOfferShiftRequest_LastModifiedBy as a MicrosoftGraphIdentitySet
func (t MicrosoftGraphOfferShiftRequest_LastModifiedBy) AsMicrosoftGraphIdentitySet() (MicrosoftGraphIdentitySet, error) {
	var body MicrosoftGraphIdentitySet
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphIdentitySet overwrites any union data inside the MicrosoftGraphOfferShiftRequest_LastModifiedBy as the provided MicrosoftGraphIdentitySet
func (t *MicrosoftGraphOfferShiftRequest_LastModifiedBy) FromMicrosoftGraphIdentitySet(v MicrosoftGraphIdentitySet) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphIdentitySet performs a merge with any union data inside the MicrosoftGraphOfferShiftRequest_LastModifiedBy, using the provided MicrosoftGraphIdentitySet
func (t *MicrosoftGraphOfferShiftRequest_LastModifiedBy) MergeMicrosoftGraphIdentitySet(v MicrosoftGraphIdentitySet) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsMicrosoftGraphOfferShiftRequestLastModifiedBy1 returns the union data inside the MicrosoftGraphOfferShiftRequest_LastModifiedBy as a MicrosoftGraphOfferShiftRequestLastModifiedBy1
func (t MicrosoftGraphOfferShiftRequest_LastModifiedBy) AsMicrosoftGraphOfferShiftRequestLastModifiedBy1() (MicrosoftGraphOfferShiftRequestLastModifiedBy1, error) {
	var body MicrosoftGraphOfferShiftRequestLastModifiedBy1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphOfferShiftRequestLastModifiedBy1 overwrites any union data inside the MicrosoftGraphOfferShiftRequest_LastModifiedBy as the provided MicrosoftGraphOfferShiftRequestLastModifiedBy1
func (t *MicrosoftGraphOfferShiftRequest_LastModifiedBy) FromMicrosoftGraphOfferShiftRequestLastModifiedBy1(v MicrosoftGraphOfferShiftRequestLastModifiedBy1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphOfferShiftRequestLastModifiedBy1 performs a merge with any union data inside the MicrosoftGraphOfferShiftRequest_LastModifiedBy, using the provided MicrosoftGraphOfferShiftRequestLastModifiedBy1
func (t *MicrosoftGraphOfferShiftRequest_LastModifiedBy) MergeMicrosoftGraphOfferShiftRequestLastModifiedBy1(v MicrosoftGraphOfferShiftRequestLastModifiedBy1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

func (t MicrosoftGraphOfferShiftRequest_LastModifiedBy) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *MicrosoftGraphOfferShiftRequest_LastModifiedBy) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsMicrosoftGraphScheduleChangeState returns the union data inside the MicrosoftGraphOfferShiftRequest_State as a MicrosoftGraphScheduleChangeState
func (t MicrosoftGraphOfferShiftRequest_State) AsMicrosoftGraphScheduleChangeState() (MicrosoftGraphScheduleChangeState, error) {
	var body MicrosoftGraphScheduleChangeState
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphScheduleChangeState overwrites any union data inside the MicrosoftGraphOfferShiftRequest_State as the provided MicrosoftGraphScheduleChangeState
func (t *MicrosoftGraphOfferShiftRequest_State) FromMicrosoftGraphScheduleChangeState(v MicrosoftGraphScheduleChangeState) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphScheduleChangeState performs a merge with any union data inside the MicrosoftGraphOfferShiftRequest_State, using the provided MicrosoftGraphScheduleChangeState
func (t *MicrosoftGraphOfferShiftRequest_State) MergeMicrosoftGraphScheduleChangeState(v MicrosoftGraphScheduleChangeState) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsMicrosoftGraphOfferShiftRequestState1 returns the union data inside the MicrosoftGraphOfferShiftRequest_State as a MicrosoftGraphOfferShiftRequestState1
func (t MicrosoftGraphOfferShiftRequest_State) AsMicrosoftGraphOfferShiftRequestState1() (MicrosoftGraphOfferShiftRequestState1, error) {
	var body MicrosoftGraphOfferShiftRequestState1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphOfferShiftRequestState1 overwrites any union data inside the MicrosoftGraphOfferShiftRequest_State as the provided MicrosoftGraphOfferShiftRequestState1
func (t *MicrosoftGraphOfferShiftRequest_State) FromMicrosoftGraphOfferShiftRequestState1(v MicrosoftGraphOfferShiftRequestState1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphOfferShiftRequestState1 performs a merge with any union data inside the MicrosoftGraphOfferShiftRequest_State, using the provided MicrosoftGraphOfferShiftRequestState1
func (t *MicrosoftGraphOfferShiftRequest_State) MergeMicrosoftGraphOfferShiftRequestState1(v MicrosoftGraphOfferShiftRequestState1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

func (t MicrosoftGraphOfferShiftRequest_State) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *MicrosoftGraphOfferShiftRequest_State) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsMicrosoftGraphIdentitySet returns the union data inside the MicrosoftGraphOnenoteEntityHierarchyModel_CreatedBy as a MicrosoftGraphIdentitySet
func (t MicrosoftGraphOnenoteEntityHierarchyModel_CreatedBy) AsMicrosoftGraphIdentitySet() (MicrosoftGraphIdentitySet, error) {
	var body MicrosoftGraphIdentitySet
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphIdentitySet overwrites any union data inside the MicrosoftGraphOnenoteEntityHierarchyModel_CreatedBy as the provided MicrosoftGraphIdentitySet
func (t *MicrosoftGraphOnenoteEntityHierarchyModel_CreatedBy) FromMicrosoftGraphIdentitySet(v MicrosoftGraphIdentitySet) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphIdentitySet performs a merge with any union data inside the MicrosoftGraphOnenoteEntityHierarchyModel_CreatedBy, using the provided MicrosoftGraphIdentitySet
func (t *MicrosoftGraphOnenoteEntityHierarchyModel_CreatedBy) MergeMicrosoftGraphIdentitySet(v MicrosoftGraphIdentitySet) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsMicrosoftGraphOnenoteEntityHierarchyModelCreatedBy1 returns the union data inside the MicrosoftGraphOnenoteEntityHierarchyModel_CreatedBy as a MicrosoftGraphOnenoteEntityHierarchyModelCreatedBy1
func (t MicrosoftGraphOnenoteEntityHierarchyModel_CreatedBy) AsMicrosoftGraphOnenoteEntityHierarchyModelCreatedBy1() (MicrosoftGraphOnenoteEntityHierarchyModelCreatedBy1, error) {
	var body MicrosoftGraphOnenoteEntityHierarchyModelCreatedBy1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphOnenoteEntityHierarchyModelCreatedBy1 overwrites any union data inside the MicrosoftGraphOnenoteEntityHierarchyModel_CreatedBy as the provided MicrosoftGraphOnenoteEntityHierarchyModelCreatedBy1
func (t *MicrosoftGraphOnenoteEntityHierarchyModel_CreatedBy) FromMicrosoftGraphOnenoteEntityHierarchyModelCreatedBy1(v MicrosoftGraphOnenoteEntityHierarchyModelCreatedBy1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphOnenoteEntityHierarchyModelCreatedBy1 performs a merge with any union data inside the MicrosoftGraphOnenoteEntityHierarchyModel_CreatedBy, using the provided MicrosoftGraphOnenoteEntityHierarchyModelCreatedBy1
func (t *MicrosoftGraphOnenoteEntityHierarchyModel_CreatedBy) MergeMicrosoftGraphOnenoteEntityHierarchyModelCreatedBy1(v MicrosoftGraphOnenoteEntityHierarchyModelCreatedBy1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

func (t MicrosoftGraphOnenoteEntityHierarchyModel_CreatedBy) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *MicrosoftGraphOnenoteEntityHierarchyModel_CreatedBy) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsMicrosoftGraphIdentitySet returns the union data inside the MicrosoftGraphOnenoteEntityHierarchyModel_LastModifiedBy as a MicrosoftGraphIdentitySet
func (t MicrosoftGraphOnenoteEntityHierarchyModel_LastModifiedBy) AsMicrosoftGraphIdentitySet() (MicrosoftGraphIdentitySet, error) {
	var body MicrosoftGraphIdentitySet
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphIdentitySet overwrites any union data inside the MicrosoftGraphOnenoteEntityHierarchyModel_LastModifiedBy as the provided MicrosoftGraphIdentitySet
func (t *MicrosoftGraphOnenoteEntityHierarchyModel_LastModifiedBy) FromMicrosoftGraphIdentitySet(v MicrosoftGraphIdentitySet) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphIdentitySet performs a merge with any union data inside the MicrosoftGraphOnenoteEntityHierarchyModel_LastModifiedBy, using the provided MicrosoftGraphIdentitySet
func (t *MicrosoftGraphOnenoteEntityHierarchyModel_LastModifiedBy) MergeMicrosoftGraphIdentitySet(v MicrosoftGraphIdentitySet) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsMicrosoftGraphOnenoteEntityHierarchyModelLastModifiedBy1 returns the union data inside the MicrosoftGraphOnenoteEntityHierarchyModel_LastModifiedBy as a MicrosoftGraphOnenoteEntityHierarchyModelLastModifiedBy1
func (t MicrosoftGraphOnenoteEntityHierarchyModel_LastModifiedBy) AsMicrosoftGraphOnenoteEntityHierarchyModelLastModifiedBy1() (MicrosoftGraphOnenoteEntityHierarchyModelLastModifiedBy1, error) {
	var body MicrosoftGraphOnenoteEntityHierarchyModelLastModifiedBy1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphOnenoteEntityHierarchyModelLastModifiedBy1 overwrites any union data inside the MicrosoftGraphOnenoteEntityHierarchyModel_LastModifiedBy as the provided MicrosoftGraphOnenoteEntityHierarchyModelLastModifiedBy1
func (t *MicrosoftGraphOnenoteEntityHierarchyModel_LastModifiedBy) FromMicrosoftGraphOnenoteEntityHierarchyModelLastModifiedBy1(v MicrosoftGraphOnenoteEntityHierarchyModelLastModifiedBy1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphOnenoteEntityHierarchyModelLastModifiedBy1 performs a merge with any union data inside the MicrosoftGraphOnenoteEntityHierarchyModel_LastModifiedBy, using the provided MicrosoftGraphOnenoteEntityHierarchyModelLastModifiedBy1
func (t *MicrosoftGraphOnenoteEntityHierarchyModel_LastModifiedBy) MergeMicrosoftGraphOnenoteEntityHierarchyModelLastModifiedBy1(v MicrosoftGraphOnenoteEntityHierarchyModelLastModifiedBy1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

func (t MicrosoftGraphOnenoteEntityHierarchyModel_LastModifiedBy) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *MicrosoftGraphOnenoteEntityHierarchyModel_LastModifiedBy) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsMicrosoftGraphOnenoteOperationError returns the union data inside the MicrosoftGraphOnenoteOperation_Error as a MicrosoftGraphOnenoteOperationError
func (t MicrosoftGraphOnenoteOperation_Error) AsMicrosoftGraphOnenoteOperationError() (MicrosoftGraphOnenoteOperationError, error) {
	var body MicrosoftGraphOnenoteOperationError
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphOnenoteOperationError overwrites any union data inside the MicrosoftGraphOnenoteOperation_Error as the provided MicrosoftGraphOnenoteOperationError
func (t *MicrosoftGraphOnenoteOperation_Error) FromMicrosoftGraphOnenoteOperationError(v MicrosoftGraphOnenoteOperationError) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphOnenoteOperationError performs a merge with any union data inside the MicrosoftGraphOnenoteOperation_Error, using the provided MicrosoftGraphOnenoteOperationError
func (t *MicrosoftGraphOnenoteOperation_Error) MergeMicrosoftGraphOnenoteOperationError(v MicrosoftGraphOnenoteOperationError) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsMicrosoftGraphOnenoteOperationError1 returns the union data inside the MicrosoftGraphOnenoteOperation_Error as a MicrosoftGraphOnenoteOperationError1
func (t MicrosoftGraphOnenoteOperation_Error) AsMicrosoftGraphOnenoteOperationError1() (MicrosoftGraphOnenoteOperationError1, error) {
	var body MicrosoftGraphOnenoteOperationError1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphOnenoteOperationError1 overwrites any union data inside the MicrosoftGraphOnenoteOperation_Error as the provided MicrosoftGraphOnenoteOperationError1
func (t *MicrosoftGraphOnenoteOperation_Error) FromMicrosoftGraphOnenoteOperationError1(v MicrosoftGraphOnenoteOperationError1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphOnenoteOperationError1 performs a merge with any union data inside the MicrosoftGraphOnenoteOperation_Error, using the provided MicrosoftGraphOnenoteOperationError1
func (t *MicrosoftGraphOnenoteOperation_Error) MergeMicrosoftGraphOnenoteOperationError1(v MicrosoftGraphOnenoteOperationError1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

func (t MicrosoftGraphOnenoteOperation_Error) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *MicrosoftGraphOnenoteOperation_Error) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsMicrosoftGraphOperationStatus returns the union data inside the MicrosoftGraphOnenoteOperation_Status as a MicrosoftGraphOperationStatus
func (t MicrosoftGraphOnenoteOperation_Status) AsMicrosoftGraphOperationStatus() (MicrosoftGraphOperationStatus, error) {
	var body MicrosoftGraphOperationStatus
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphOperationStatus overwrites any union data inside the MicrosoftGraphOnenoteOperation_Status as the provided MicrosoftGraphOperationStatus
func (t *MicrosoftGraphOnenoteOperation_Status) FromMicrosoftGraphOperationStatus(v MicrosoftGraphOperationStatus) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphOperationStatus performs a merge with any union data inside the MicrosoftGraphOnenoteOperation_Status, using the provided MicrosoftGraphOperationStatus
func (t *MicrosoftGraphOnenoteOperation_Status) MergeMicrosoftGraphOperationStatus(v MicrosoftGraphOperationStatus) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsMicrosoftGraphOnenoteOperationStatus1 returns the union data inside the MicrosoftGraphOnenoteOperation_Status as a MicrosoftGraphOnenoteOperationStatus1
func (t MicrosoftGraphOnenoteOperation_Status) AsMicrosoftGraphOnenoteOperationStatus1() (MicrosoftGraphOnenoteOperationStatus1, error) {
	var body MicrosoftGraphOnenoteOperationStatus1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphOnenoteOperationStatus1 overwrites any union data inside the MicrosoftGraphOnenoteOperation_Status as the provided MicrosoftGraphOnenoteOperationStatus1
func (t *MicrosoftGraphOnenoteOperation_Status) FromMicrosoftGraphOnenoteOperationStatus1(v MicrosoftGraphOnenoteOperationStatus1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphOnenoteOperationStatus1 performs a merge with any union data inside the MicrosoftGraphOnenoteOperation_Status, using the provided MicrosoftGraphOnenoteOperationStatus1
func (t *MicrosoftGraphOnenoteOperation_Status) MergeMicrosoftGraphOnenoteOperationStatus1(v MicrosoftGraphOnenoteOperationStatus1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

func (t MicrosoftGraphOnenoteOperation_Status) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *MicrosoftGraphOnenoteOperation_Status) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsMicrosoftGraphPageLinks returns the union data inside the MicrosoftGraphOnenotePage_Links as a MicrosoftGraphPageLinks
func (t MicrosoftGraphOnenotePage_Links) AsMicrosoftGraphPageLinks() (MicrosoftGraphPageLinks, error) {
	var body MicrosoftGraphPageLinks
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphPageLinks overwrites any union data inside the MicrosoftGraphOnenotePage_Links as the provided MicrosoftGraphPageLinks
func (t *MicrosoftGraphOnenotePage_Links) FromMicrosoftGraphPageLinks(v MicrosoftGraphPageLinks) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphPageLinks performs a merge with any union data inside the MicrosoftGraphOnenotePage_Links, using the provided MicrosoftGraphPageLinks
func (t *MicrosoftGraphOnenotePage_Links) MergeMicrosoftGraphPageLinks(v MicrosoftGraphPageLinks) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsMicrosoftGraphOnenotePageLinks1 returns the union data inside the MicrosoftGraphOnenotePage_Links as a MicrosoftGraphOnenotePageLinks1
func (t MicrosoftGraphOnenotePage_Links) AsMicrosoftGraphOnenotePageLinks1() (MicrosoftGraphOnenotePageLinks1, error) {
	var body MicrosoftGraphOnenotePageLinks1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphOnenotePageLinks1 overwrites any union data inside the MicrosoftGraphOnenotePage_Links as the provided MicrosoftGraphOnenotePageLinks1
func (t *MicrosoftGraphOnenotePage_Links) FromMicrosoftGraphOnenotePageLinks1(v MicrosoftGraphOnenotePageLinks1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphOnenotePageLinks1 performs a merge with any union data inside the MicrosoftGraphOnenotePage_Links, using the provided MicrosoftGraphOnenotePageLinks1
func (t *MicrosoftGraphOnenotePage_Links) MergeMicrosoftGraphOnenotePageLinks1(v MicrosoftGraphOnenotePageLinks1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

func (t MicrosoftGraphOnenotePage_Links) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *MicrosoftGraphOnenotePage_Links) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsMicrosoftGraphNotebook returns the union data inside the MicrosoftGraphOnenotePage_ParentNotebook as a MicrosoftGraphNotebook
func (t MicrosoftGraphOnenotePage_ParentNotebook) AsMicrosoftGraphNotebook() (MicrosoftGraphNotebook, error) {
	var body MicrosoftGraphNotebook
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphNotebook overwrites any union data inside the MicrosoftGraphOnenotePage_ParentNotebook as the provided MicrosoftGraphNotebook
func (t *MicrosoftGraphOnenotePage_ParentNotebook) FromMicrosoftGraphNotebook(v MicrosoftGraphNotebook) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphNotebook performs a merge with any union data inside the MicrosoftGraphOnenotePage_ParentNotebook, using the provided MicrosoftGraphNotebook
func (t *MicrosoftGraphOnenotePage_ParentNotebook) MergeMicrosoftGraphNotebook(v MicrosoftGraphNotebook) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsMicrosoftGraphOnenotePageParentNotebook1 returns the union data inside the MicrosoftGraphOnenotePage_ParentNotebook as a MicrosoftGraphOnenotePageParentNotebook1
func (t MicrosoftGraphOnenotePage_ParentNotebook) AsMicrosoftGraphOnenotePageParentNotebook1() (MicrosoftGraphOnenotePageParentNotebook1, error) {
	var body MicrosoftGraphOnenotePageParentNotebook1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphOnenotePageParentNotebook1 overwrites any union data inside the MicrosoftGraphOnenotePage_ParentNotebook as the provided MicrosoftGraphOnenotePageParentNotebook1
func (t *MicrosoftGraphOnenotePage_ParentNotebook) FromMicrosoftGraphOnenotePageParentNotebook1(v MicrosoftGraphOnenotePageParentNotebook1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphOnenotePageParentNotebook1 performs a merge with any union data inside the MicrosoftGraphOnenotePage_ParentNotebook, using the provided MicrosoftGraphOnenotePageParentNotebook1
func (t *MicrosoftGraphOnenotePage_ParentNotebook) MergeMicrosoftGraphOnenotePageParentNotebook1(v MicrosoftGraphOnenotePageParentNotebook1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

func (t MicrosoftGraphOnenotePage_ParentNotebook) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *MicrosoftGraphOnenotePage_ParentNotebook) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsMicrosoftGraphOnenoteSection returns the union data inside the MicrosoftGraphOnenotePage_ParentSection as a MicrosoftGraphOnenoteSection
func (t MicrosoftGraphOnenotePage_ParentSection) AsMicrosoftGraphOnenoteSection() (MicrosoftGraphOnenoteSection, error) {
	var body MicrosoftGraphOnenoteSection
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphOnenoteSection overwrites any union data inside the MicrosoftGraphOnenotePage_ParentSection as the provided MicrosoftGraphOnenoteSection
func (t *MicrosoftGraphOnenotePage_ParentSection) FromMicrosoftGraphOnenoteSection(v MicrosoftGraphOnenoteSection) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphOnenoteSection performs a merge with any union data inside the MicrosoftGraphOnenotePage_ParentSection, using the provided MicrosoftGraphOnenoteSection
func (t *MicrosoftGraphOnenotePage_ParentSection) MergeMicrosoftGraphOnenoteSection(v MicrosoftGraphOnenoteSection) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsMicrosoftGraphOnenotePageParentSection1 returns the union data inside the MicrosoftGraphOnenotePage_ParentSection as a MicrosoftGraphOnenotePageParentSection1
func (t MicrosoftGraphOnenotePage_ParentSection) AsMicrosoftGraphOnenotePageParentSection1() (MicrosoftGraphOnenotePageParentSection1, error) {
	var body MicrosoftGraphOnenotePageParentSection1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphOnenotePageParentSection1 overwrites any union data inside the MicrosoftGraphOnenotePage_ParentSection as the provided MicrosoftGraphOnenotePageParentSection1
func (t *MicrosoftGraphOnenotePage_ParentSection) FromMicrosoftGraphOnenotePageParentSection1(v MicrosoftGraphOnenotePageParentSection1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphOnenotePageParentSection1 performs a merge with any union data inside the MicrosoftGraphOnenotePage_ParentSection, using the provided MicrosoftGraphOnenotePageParentSection1
func (t *MicrosoftGraphOnenotePage_ParentSection) MergeMicrosoftGraphOnenotePageParentSection1(v MicrosoftGraphOnenotePageParentSection1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

func (t MicrosoftGraphOnenotePage_ParentSection) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *MicrosoftGraphOnenotePage_ParentSection) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsMicrosoftGraphIdentitySet returns the union data inside the MicrosoftGraphOnenoteSection_CreatedBy as a MicrosoftGraphIdentitySet
func (t MicrosoftGraphOnenoteSection_CreatedBy) AsMicrosoftGraphIdentitySet() (MicrosoftGraphIdentitySet, error) {
	var body MicrosoftGraphIdentitySet
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphIdentitySet overwrites any union data inside the MicrosoftGraphOnenoteSection_CreatedBy as the provided MicrosoftGraphIdentitySet
func (t *MicrosoftGraphOnenoteSection_CreatedBy) FromMicrosoftGraphIdentitySet(v MicrosoftGraphIdentitySet) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphIdentitySet performs a merge with any union data inside the MicrosoftGraphOnenoteSection_CreatedBy, using the provided MicrosoftGraphIdentitySet
func (t *MicrosoftGraphOnenoteSection_CreatedBy) MergeMicrosoftGraphIdentitySet(v MicrosoftGraphIdentitySet) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsMicrosoftGraphOnenoteSectionCreatedBy1 returns the union data inside the MicrosoftGraphOnenoteSection_CreatedBy as a MicrosoftGraphOnenoteSectionCreatedBy1
func (t MicrosoftGraphOnenoteSection_CreatedBy) AsMicrosoftGraphOnenoteSectionCreatedBy1() (MicrosoftGraphOnenoteSectionCreatedBy1, error) {
	var body MicrosoftGraphOnenoteSectionCreatedBy1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphOnenoteSectionCreatedBy1 overwrites any union data inside the MicrosoftGraphOnenoteSection_CreatedBy as the provided MicrosoftGraphOnenoteSectionCreatedBy1
func (t *MicrosoftGraphOnenoteSection_CreatedBy) FromMicrosoftGraphOnenoteSectionCreatedBy1(v MicrosoftGraphOnenoteSectionCreatedBy1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphOnenoteSectionCreatedBy1 performs a merge with any union data inside the MicrosoftGraphOnenoteSection_CreatedBy, using the provided MicrosoftGraphOnenoteSectionCreatedBy1
func (t *MicrosoftGraphOnenoteSection_CreatedBy) MergeMicrosoftGraphOnenoteSectionCreatedBy1(v MicrosoftGraphOnenoteSectionCreatedBy1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

func (t MicrosoftGraphOnenoteSection_CreatedBy) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *MicrosoftGraphOnenoteSection_CreatedBy) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsMicrosoftGraphIdentitySet returns the union data inside the MicrosoftGraphOnenoteSection_LastModifiedBy as a MicrosoftGraphIdentitySet
func (t MicrosoftGraphOnenoteSection_LastModifiedBy) AsMicrosoftGraphIdentitySet() (MicrosoftGraphIdentitySet, error) {
	var body MicrosoftGraphIdentitySet
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphIdentitySet overwrites any union data inside the MicrosoftGraphOnenoteSection_LastModifiedBy as the provided MicrosoftGraphIdentitySet
func (t *MicrosoftGraphOnenoteSection_LastModifiedBy) FromMicrosoftGraphIdentitySet(v MicrosoftGraphIdentitySet) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphIdentitySet performs a merge with any union data inside the MicrosoftGraphOnenoteSection_LastModifiedBy, using the provided MicrosoftGraphIdentitySet
func (t *MicrosoftGraphOnenoteSection_LastModifiedBy) MergeMicrosoftGraphIdentitySet(v MicrosoftGraphIdentitySet) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsMicrosoftGraphOnenoteSectionLastModifiedBy1 returns the union data inside the MicrosoftGraphOnenoteSection_LastModifiedBy as a MicrosoftGraphOnenoteSectionLastModifiedBy1
func (t MicrosoftGraphOnenoteSection_LastModifiedBy) AsMicrosoftGraphOnenoteSectionLastModifiedBy1() (MicrosoftGraphOnenoteSectionLastModifiedBy1, error) {
	var body MicrosoftGraphOnenoteSectionLastModifiedBy1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphOnenoteSectionLastModifiedBy1 overwrites any union data inside the MicrosoftGraphOnenoteSection_LastModifiedBy as the provided MicrosoftGraphOnenoteSectionLastModifiedBy1
func (t *MicrosoftGraphOnenoteSection_LastModifiedBy) FromMicrosoftGraphOnenoteSectionLastModifiedBy1(v MicrosoftGraphOnenoteSectionLastModifiedBy1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphOnenoteSectionLastModifiedBy1 performs a merge with any union data inside the MicrosoftGraphOnenoteSection_LastModifiedBy, using the provided MicrosoftGraphOnenoteSectionLastModifiedBy1
func (t *MicrosoftGraphOnenoteSection_LastModifiedBy) MergeMicrosoftGraphOnenoteSectionLastModifiedBy1(v MicrosoftGraphOnenoteSectionLastModifiedBy1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

func (t MicrosoftGraphOnenoteSection_LastModifiedBy) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *MicrosoftGraphOnenoteSection_LastModifiedBy) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsMicrosoftGraphSectionLinks returns the union data inside the MicrosoftGraphOnenoteSection_Links as a MicrosoftGraphSectionLinks
func (t MicrosoftGraphOnenoteSection_Links) AsMicrosoftGraphSectionLinks() (MicrosoftGraphSectionLinks, error) {
	var body MicrosoftGraphSectionLinks
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphSectionLinks overwrites any union data inside the MicrosoftGraphOnenoteSection_Links as the provided MicrosoftGraphSectionLinks
func (t *MicrosoftGraphOnenoteSection_Links) FromMicrosoftGraphSectionLinks(v MicrosoftGraphSectionLinks) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphSectionLinks performs a merge with any union data inside the MicrosoftGraphOnenoteSection_Links, using the provided MicrosoftGraphSectionLinks
func (t *MicrosoftGraphOnenoteSection_Links) MergeMicrosoftGraphSectionLinks(v MicrosoftGraphSectionLinks) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsMicrosoftGraphOnenoteSectionLinks1 returns the union data inside the MicrosoftGraphOnenoteSection_Links as a MicrosoftGraphOnenoteSectionLinks1
func (t MicrosoftGraphOnenoteSection_Links) AsMicrosoftGraphOnenoteSectionLinks1() (MicrosoftGraphOnenoteSectionLinks1, error) {
	var body MicrosoftGraphOnenoteSectionLinks1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphOnenoteSectionLinks1 overwrites any union data inside the MicrosoftGraphOnenoteSection_Links as the provided MicrosoftGraphOnenoteSectionLinks1
func (t *MicrosoftGraphOnenoteSection_Links) FromMicrosoftGraphOnenoteSectionLinks1(v MicrosoftGraphOnenoteSectionLinks1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphOnenoteSectionLinks1 performs a merge with any union data inside the MicrosoftGraphOnenoteSection_Links, using the provided MicrosoftGraphOnenoteSectionLinks1
func (t *MicrosoftGraphOnenoteSection_Links) MergeMicrosoftGraphOnenoteSectionLinks1(v MicrosoftGraphOnenoteSectionLinks1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

func (t MicrosoftGraphOnenoteSection_Links) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *MicrosoftGraphOnenoteSection_Links) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsMicrosoftGraphNotebook returns the union data inside the MicrosoftGraphOnenoteSection_ParentNotebook as a MicrosoftGraphNotebook
func (t MicrosoftGraphOnenoteSection_ParentNotebook) AsMicrosoftGraphNotebook() (MicrosoftGraphNotebook, error) {
	var body MicrosoftGraphNotebook
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphNotebook overwrites any union data inside the MicrosoftGraphOnenoteSection_ParentNotebook as the provided MicrosoftGraphNotebook
func (t *MicrosoftGraphOnenoteSection_ParentNotebook) FromMicrosoftGraphNotebook(v MicrosoftGraphNotebook) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphNotebook performs a merge with any union data inside the MicrosoftGraphOnenoteSection_ParentNotebook, using the provided MicrosoftGraphNotebook
func (t *MicrosoftGraphOnenoteSection_ParentNotebook) MergeMicrosoftGraphNotebook(v MicrosoftGraphNotebook) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsMicrosoftGraphOnenoteSectionParentNotebook1 returns the union data inside the MicrosoftGraphOnenoteSection_ParentNotebook as a MicrosoftGraphOnenoteSectionParentNotebook1
func (t MicrosoftGraphOnenoteSection_ParentNotebook) AsMicrosoftGraphOnenoteSectionParentNotebook1() (MicrosoftGraphOnenoteSectionParentNotebook1, error) {
	var body MicrosoftGraphOnenoteSectionParentNotebook1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphOnenoteSectionParentNotebook1 overwrites any union data inside the MicrosoftGraphOnenoteSection_ParentNotebook as the provided MicrosoftGraphOnenoteSectionParentNotebook1
func (t *MicrosoftGraphOnenoteSection_ParentNotebook) FromMicrosoftGraphOnenoteSectionParentNotebook1(v MicrosoftGraphOnenoteSectionParentNotebook1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphOnenoteSectionParentNotebook1 performs a merge with any union data inside the MicrosoftGraphOnenoteSection_ParentNotebook, using the provided MicrosoftGraphOnenoteSectionParentNotebook1
func (t *MicrosoftGraphOnenoteSection_ParentNotebook) MergeMicrosoftGraphOnenoteSectionParentNotebook1(v MicrosoftGraphOnenoteSectionParentNotebook1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

func (t MicrosoftGraphOnenoteSection_ParentNotebook) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *MicrosoftGraphOnenoteSection_ParentNotebook) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsMicrosoftGraphSectionGroup returns the union data inside the MicrosoftGraphOnenoteSection_ParentSectionGroup as a MicrosoftGraphSectionGroup
func (t MicrosoftGraphOnenoteSection_ParentSectionGroup) AsMicrosoftGraphSectionGroup() (MicrosoftGraphSectionGroup, error) {
	var body MicrosoftGraphSectionGroup
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphSectionGroup overwrites any union data inside the MicrosoftGraphOnenoteSection_ParentSectionGroup as the provided MicrosoftGraphSectionGroup
func (t *MicrosoftGraphOnenoteSection_ParentSectionGroup) FromMicrosoftGraphSectionGroup(v MicrosoftGraphSectionGroup) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphSectionGroup performs a merge with any union data inside the MicrosoftGraphOnenoteSection_ParentSectionGroup, using the provided MicrosoftGraphSectionGroup
func (t *MicrosoftGraphOnenoteSection_ParentSectionGroup) MergeMicrosoftGraphSectionGroup(v MicrosoftGraphSectionGroup) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsMicrosoftGraphOnenoteSectionParentSectionGroup1 returns the union data inside the MicrosoftGraphOnenoteSection_ParentSectionGroup as a MicrosoftGraphOnenoteSectionParentSectionGroup1
func (t MicrosoftGraphOnenoteSection_ParentSectionGroup) AsMicrosoftGraphOnenoteSectionParentSectionGroup1() (MicrosoftGraphOnenoteSectionParentSectionGroup1, error) {
	var body MicrosoftGraphOnenoteSectionParentSectionGroup1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphOnenoteSectionParentSectionGroup1 overwrites any union data inside the MicrosoftGraphOnenoteSection_ParentSectionGroup as the provided MicrosoftGraphOnenoteSectionParentSectionGroup1
func (t *MicrosoftGraphOnenoteSection_ParentSectionGroup) FromMicrosoftGraphOnenoteSectionParentSectionGroup1(v MicrosoftGraphOnenoteSectionParentSectionGroup1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphOnenoteSectionParentSectionGroup1 performs a merge with any union data inside the MicrosoftGraphOnenoteSection_ParentSectionGroup, using the provided MicrosoftGraphOnenoteSectionParentSectionGroup1
func (t *MicrosoftGraphOnenoteSection_ParentSectionGroup) MergeMicrosoftGraphOnenoteSectionParentSectionGroup1(v MicrosoftGraphOnenoteSectionParentSectionGroup1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

func (t MicrosoftGraphOnenoteSection_ParentSectionGroup) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *MicrosoftGraphOnenoteSection_ParentSectionGroup) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsMicrosoftGraphMeetingChatMode returns the union data inside the MicrosoftGraphOnlineMeeting_AllowMeetingChat as a MicrosoftGraphMeetingChatMode
func (t MicrosoftGraphOnlineMeeting_AllowMeetingChat) AsMicrosoftGraphMeetingChatMode() (MicrosoftGraphMeetingChatMode, error) {
	var body MicrosoftGraphMeetingChatMode
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphMeetingChatMode overwrites any union data inside the MicrosoftGraphOnlineMeeting_AllowMeetingChat as the provided MicrosoftGraphMeetingChatMode
func (t *MicrosoftGraphOnlineMeeting_AllowMeetingChat) FromMicrosoftGraphMeetingChatMode(v MicrosoftGraphMeetingChatMode) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphMeetingChatMode performs a merge with any union data inside the MicrosoftGraphOnlineMeeting_AllowMeetingChat, using the provided MicrosoftGraphMeetingChatMode
func (t *MicrosoftGraphOnlineMeeting_AllowMeetingChat) MergeMicrosoftGraphMeetingChatMode(v MicrosoftGraphMeetingChatMode) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsMicrosoftGraphOnlineMeetingAllowMeetingChat1 returns the union data inside the MicrosoftGraphOnlineMeeting_AllowMeetingChat as a MicrosoftGraphOnlineMeetingAllowMeetingChat1
func (t MicrosoftGraphOnlineMeeting_AllowMeetingChat) AsMicrosoftGraphOnlineMeetingAllowMeetingChat1() (MicrosoftGraphOnlineMeetingAllowMeetingChat1, error) {
	var body MicrosoftGraphOnlineMeetingAllowMeetingChat1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphOnlineMeetingAllowMeetingChat1 overwrites any union data inside the MicrosoftGraphOnlineMeeting_AllowMeetingChat as the provided MicrosoftGraphOnlineMeetingAllowMeetingChat1
func (t *MicrosoftGraphOnlineMeeting_AllowMeetingChat) FromMicrosoftGraphOnlineMeetingAllowMeetingChat1(v MicrosoftGraphOnlineMeetingAllowMeetingChat1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphOnlineMeetingAllowMeetingChat1 performs a merge with any union data inside the MicrosoftGraphOnlineMeeting_AllowMeetingChat, using the provided MicrosoftGraphOnlineMeetingAllowMeetingChat1
func (t *MicrosoftGraphOnlineMeeting_AllowMeetingChat) MergeMicrosoftGraphOnlineMeetingAllowMeetingChat1(v MicrosoftGraphOnlineMeetingAllowMeetingChat1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

func (t MicrosoftGraphOnlineMeeting_AllowMeetingChat) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *MicrosoftGraphOnlineMeeting_AllowMeetingChat) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsMicrosoftGraphOnlineMeetingPresenters returns the union data inside the MicrosoftGraphOnlineMeeting_AllowedPresenters as a MicrosoftGraphOnlineMeetingPresenters
func (t MicrosoftGraphOnlineMeeting_AllowedPresenters) AsMicrosoftGraphOnlineMeetingPresenters() (MicrosoftGraphOnlineMeetingPresenters, error) {
	var body MicrosoftGraphOnlineMeetingPresenters
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphOnlineMeetingPresenters overwrites any union data inside the MicrosoftGraphOnlineMeeting_AllowedPresenters as the provided MicrosoftGraphOnlineMeetingPresenters
func (t *MicrosoftGraphOnlineMeeting_AllowedPresenters) FromMicrosoftGraphOnlineMeetingPresenters(v MicrosoftGraphOnlineMeetingPresenters) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphOnlineMeetingPresenters performs a merge with any union data inside the MicrosoftGraphOnlineMeeting_AllowedPresenters, using the provided MicrosoftGraphOnlineMeetingPresenters
func (t *MicrosoftGraphOnlineMeeting_AllowedPresenters) MergeMicrosoftGraphOnlineMeetingPresenters(v MicrosoftGraphOnlineMeetingPresenters) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsMicrosoftGraphOnlineMeetingAllowedPresenters1 returns the union data inside the MicrosoftGraphOnlineMeeting_AllowedPresenters as a MicrosoftGraphOnlineMeetingAllowedPresenters1
func (t MicrosoftGraphOnlineMeeting_AllowedPresenters) AsMicrosoftGraphOnlineMeetingAllowedPresenters1() (MicrosoftGraphOnlineMeetingAllowedPresenters1, error) {
	var body MicrosoftGraphOnlineMeetingAllowedPresenters1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphOnlineMeetingAllowedPresenters1 overwrites any union data inside the MicrosoftGraphOnlineMeeting_AllowedPresenters as the provided MicrosoftGraphOnlineMeetingAllowedPresenters1
func (t *MicrosoftGraphOnlineMeeting_AllowedPresenters) FromMicrosoftGraphOnlineMeetingAllowedPresenters1(v MicrosoftGraphOnlineMeetingAllowedPresenters1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphOnlineMeetingAllowedPresenters1 performs a merge with any union data inside the MicrosoftGraphOnlineMeeting_AllowedPresenters, using the provided MicrosoftGraphOnlineMeetingAllowedPresenters1
func (t *MicrosoftGraphOnlineMeeting_AllowedPresenters) MergeMicrosoftGraphOnlineMeetingAllowedPresenters1(v MicrosoftGraphOnlineMeetingAllowedPresenters1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

func (t MicrosoftGraphOnlineMeeting_AllowedPresenters) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *MicrosoftGraphOnlineMeeting_AllowedPresenters) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsMicrosoftGraphAudioConferencing returns the union data inside the MicrosoftGraphOnlineMeeting_AudioConferencing as a MicrosoftGraphAudioConferencing
func (t MicrosoftGraphOnlineMeeting_AudioConferencing) AsMicrosoftGraphAudioConferencing() (MicrosoftGraphAudioConferencing, error) {
	var body MicrosoftGraphAudioConferencing
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphAudioConferencing overwrites any union data inside the MicrosoftGraphOnlineMeeting_AudioConferencing as the provided MicrosoftGraphAudioConferencing
func (t *MicrosoftGraphOnlineMeeting_AudioConferencing) FromMicrosoftGraphAudioConferencing(v MicrosoftGraphAudioConferencing) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphAudioConferencing performs a merge with any union data inside the MicrosoftGraphOnlineMeeting_AudioConferencing, using the provided MicrosoftGraphAudioConferencing
func (t *MicrosoftGraphOnlineMeeting_AudioConferencing) MergeMicrosoftGraphAudioConferencing(v MicrosoftGraphAudioConferencing) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsMicrosoftGraphOnlineMeetingAudioConferencing1 returns the union data inside the MicrosoftGraphOnlineMeeting_AudioConferencing as a MicrosoftGraphOnlineMeetingAudioConferencing1
func (t MicrosoftGraphOnlineMeeting_AudioConferencing) AsMicrosoftGraphOnlineMeetingAudioConferencing1() (MicrosoftGraphOnlineMeetingAudioConferencing1, error) {
	var body MicrosoftGraphOnlineMeetingAudioConferencing1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphOnlineMeetingAudioConferencing1 overwrites any union data inside the MicrosoftGraphOnlineMeeting_AudioConferencing as the provided MicrosoftGraphOnlineMeetingAudioConferencing1
func (t *MicrosoftGraphOnlineMeeting_AudioConferencing) FromMicrosoftGraphOnlineMeetingAudioConferencing1(v MicrosoftGraphOnlineMeetingAudioConferencing1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphOnlineMeetingAudioConferencing1 performs a merge with any union data inside the MicrosoftGraphOnlineMeeting_AudioConferencing, using the provided MicrosoftGraphOnlineMeetingAudioConferencing1
func (t *MicrosoftGraphOnlineMeeting_AudioConferencing) MergeMicrosoftGraphOnlineMeetingAudioConferencing1(v MicrosoftGraphOnlineMeetingAudioConferencing1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

func (t MicrosoftGraphOnlineMeeting_AudioConferencing) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *MicrosoftGraphOnlineMeeting_AudioConferencing) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsMicrosoftGraphBroadcastMeetingSettings returns the union data inside the MicrosoftGraphOnlineMeeting_BroadcastSettings as a MicrosoftGraphBroadcastMeetingSettings
func (t MicrosoftGraphOnlineMeeting_BroadcastSettings) AsMicrosoftGraphBroadcastMeetingSettings() (MicrosoftGraphBroadcastMeetingSettings, error) {
	var body MicrosoftGraphBroadcastMeetingSettings
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphBroadcastMeetingSettings overwrites any union data inside the MicrosoftGraphOnlineMeeting_BroadcastSettings as the provided MicrosoftGraphBroadcastMeetingSettings
func (t *MicrosoftGraphOnlineMeeting_BroadcastSettings) FromMicrosoftGraphBroadcastMeetingSettings(v MicrosoftGraphBroadcastMeetingSettings) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphBroadcastMeetingSettings performs a merge with any union data inside the MicrosoftGraphOnlineMeeting_BroadcastSettings, using the provided MicrosoftGraphBroadcastMeetingSettings
func (t *MicrosoftGraphOnlineMeeting_BroadcastSettings) MergeMicrosoftGraphBroadcastMeetingSettings(v MicrosoftGraphBroadcastMeetingSettings) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsMicrosoftGraphOnlineMeetingBroadcastSettings1 returns the union data inside the MicrosoftGraphOnlineMeeting_BroadcastSettings as a MicrosoftGraphOnlineMeetingBroadcastSettings1
func (t MicrosoftGraphOnlineMeeting_BroadcastSettings) AsMicrosoftGraphOnlineMeetingBroadcastSettings1() (MicrosoftGraphOnlineMeetingBroadcastSettings1, error) {
	var body MicrosoftGraphOnlineMeetingBroadcastSettings1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphOnlineMeetingBroadcastSettings1 overwrites any union data inside the MicrosoftGraphOnlineMeeting_BroadcastSettings as the provided MicrosoftGraphOnlineMeetingBroadcastSettings1
func (t *MicrosoftGraphOnlineMeeting_BroadcastSettings) FromMicrosoftGraphOnlineMeetingBroadcastSettings1(v MicrosoftGraphOnlineMeetingBroadcastSettings1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphOnlineMeetingBroadcastSettings1 performs a merge with any union data inside the MicrosoftGraphOnlineMeeting_BroadcastSettings, using the provided MicrosoftGraphOnlineMeetingBroadcastSettings1
func (t *MicrosoftGraphOnlineMeeting_BroadcastSettings) MergeMicrosoftGraphOnlineMeetingBroadcastSettings1(v MicrosoftGraphOnlineMeetingBroadcastSettings1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

func (t MicrosoftGraphOnlineMeeting_BroadcastSettings) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *MicrosoftGraphOnlineMeeting_BroadcastSettings) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsMicrosoftGraphChatInfo returns the union data inside the MicrosoftGraphOnlineMeeting_ChatInfo as a MicrosoftGraphChatInfo
func (t MicrosoftGraphOnlineMeeting_ChatInfo) AsMicrosoftGraphChatInfo() (MicrosoftGraphChatInfo, error) {
	var body MicrosoftGraphChatInfo
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphChatInfo overwrites any union data inside the MicrosoftGraphOnlineMeeting_ChatInfo as the provided MicrosoftGraphChatInfo
func (t *MicrosoftGraphOnlineMeeting_ChatInfo) FromMicrosoftGraphChatInfo(v MicrosoftGraphChatInfo) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphChatInfo performs a merge with any union data inside the MicrosoftGraphOnlineMeeting_ChatInfo, using the provided MicrosoftGraphChatInfo
func (t *MicrosoftGraphOnlineMeeting_ChatInfo) MergeMicrosoftGraphChatInfo(v MicrosoftGraphChatInfo) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsMicrosoftGraphOnlineMeetingChatInfo1 returns the union data inside the MicrosoftGraphOnlineMeeting_ChatInfo as a MicrosoftGraphOnlineMeetingChatInfo1
func (t MicrosoftGraphOnlineMeeting_ChatInfo) AsMicrosoftGraphOnlineMeetingChatInfo1() (MicrosoftGraphOnlineMeetingChatInfo1, error) {
	var body MicrosoftGraphOnlineMeetingChatInfo1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphOnlineMeetingChatInfo1 overwrites any union data inside the MicrosoftGraphOnlineMeeting_ChatInfo as the provided MicrosoftGraphOnlineMeetingChatInfo1
func (t *MicrosoftGraphOnlineMeeting_ChatInfo) FromMicrosoftGraphOnlineMeetingChatInfo1(v MicrosoftGraphOnlineMeetingChatInfo1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphOnlineMeetingChatInfo1 performs a merge with any union data inside the MicrosoftGraphOnlineMeeting_ChatInfo, using the provided MicrosoftGraphOnlineMeetingChatInfo1
func (t *MicrosoftGraphOnlineMeeting_ChatInfo) MergeMicrosoftGraphOnlineMeetingChatInfo1(v MicrosoftGraphOnlineMeetingChatInfo1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

func (t MicrosoftGraphOnlineMeeting_ChatInfo) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *MicrosoftGraphOnlineMeeting_ChatInfo) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsMicrosoftGraphItemBody returns the union data inside the MicrosoftGraphOnlineMeeting_JoinInformation as a MicrosoftGraphItemBody
func (t MicrosoftGraphOnlineMeeting_JoinInformation) AsMicrosoftGraphItemBody() (MicrosoftGraphItemBody, error) {
	var body MicrosoftGraphItemBody
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphItemBody overwrites any union data inside the MicrosoftGraphOnlineMeeting_JoinInformation as the provided MicrosoftGraphItemBody
func (t *MicrosoftGraphOnlineMeeting_JoinInformation) FromMicrosoftGraphItemBody(v MicrosoftGraphItemBody) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphItemBody performs a merge with any union data inside the MicrosoftGraphOnlineMeeting_JoinInformation, using the provided MicrosoftGraphItemBody
func (t *MicrosoftGraphOnlineMeeting_JoinInformation) MergeMicrosoftGraphItemBody(v MicrosoftGraphItemBody) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsMicrosoftGraphOnlineMeetingJoinInformation1 returns the union data inside the MicrosoftGraphOnlineMeeting_JoinInformation as a MicrosoftGraphOnlineMeetingJoinInformation1
func (t MicrosoftGraphOnlineMeeting_JoinInformation) AsMicrosoftGraphOnlineMeetingJoinInformation1() (MicrosoftGraphOnlineMeetingJoinInformation1, error) {
	var body MicrosoftGraphOnlineMeetingJoinInformation1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphOnlineMeetingJoinInformation1 overwrites any union data inside the MicrosoftGraphOnlineMeeting_JoinInformation as the provided MicrosoftGraphOnlineMeetingJoinInformation1
func (t *MicrosoftGraphOnlineMeeting_JoinInformation) FromMicrosoftGraphOnlineMeetingJoinInformation1(v MicrosoftGraphOnlineMeetingJoinInformation1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphOnlineMeetingJoinInformation1 performs a merge with any union data inside the MicrosoftGraphOnlineMeeting_JoinInformation, using the provided MicrosoftGraphOnlineMeetingJoinInformation1
func (t *MicrosoftGraphOnlineMeeting_JoinInformation) MergeMicrosoftGraphOnlineMeetingJoinInformation1(v MicrosoftGraphOnlineMeetingJoinInformation1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

func (t MicrosoftGraphOnlineMeeting_JoinInformation) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *MicrosoftGraphOnlineMeeting_JoinInformation) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsMicrosoftGraphJoinMeetingIdSettings returns the union data inside the MicrosoftGraphOnlineMeeting_JoinMeetingIdSettings as a MicrosoftGraphJoinMeetingIdSettings
func (t MicrosoftGraphOnlineMeeting_JoinMeetingIdSettings) AsMicrosoftGraphJoinMeetingIdSettings() (MicrosoftGraphJoinMeetingIdSettings, error) {
	var body MicrosoftGraphJoinMeetingIdSettings
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphJoinMeetingIdSettings overwrites any union data inside the MicrosoftGraphOnlineMeeting_JoinMeetingIdSettings as the provided MicrosoftGraphJoinMeetingIdSettings
func (t *MicrosoftGraphOnlineMeeting_JoinMeetingIdSettings) FromMicrosoftGraphJoinMeetingIdSettings(v MicrosoftGraphJoinMeetingIdSettings) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphJoinMeetingIdSettings performs a merge with any union data inside the MicrosoftGraphOnlineMeeting_JoinMeetingIdSettings, using the provided MicrosoftGraphJoinMeetingIdSettings
func (t *MicrosoftGraphOnlineMeeting_JoinMeetingIdSettings) MergeMicrosoftGraphJoinMeetingIdSettings(v MicrosoftGraphJoinMeetingIdSettings) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsMicrosoftGraphOnlineMeetingJoinMeetingIdSettings1 returns the union data inside the MicrosoftGraphOnlineMeeting_JoinMeetingIdSettings as a MicrosoftGraphOnlineMeetingJoinMeetingIdSettings1
func (t MicrosoftGraphOnlineMeeting_JoinMeetingIdSettings) AsMicrosoftGraphOnlineMeetingJoinMeetingIdSettings1() (MicrosoftGraphOnlineMeetingJoinMeetingIdSettings1, error) {
	var body MicrosoftGraphOnlineMeetingJoinMeetingIdSettings1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphOnlineMeetingJoinMeetingIdSettings1 overwrites any union data inside the MicrosoftGraphOnlineMeeting_JoinMeetingIdSettings as the provided MicrosoftGraphOnlineMeetingJoinMeetingIdSettings1
func (t *MicrosoftGraphOnlineMeeting_JoinMeetingIdSettings) FromMicrosoftGraphOnlineMeetingJoinMeetingIdSettings1(v MicrosoftGraphOnlineMeetingJoinMeetingIdSettings1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphOnlineMeetingJoinMeetingIdSettings1 performs a merge with any union data inside the MicrosoftGraphOnlineMeeting_JoinMeetingIdSettings, using the provided MicrosoftGraphOnlineMeetingJoinMeetingIdSettings1
func (t *MicrosoftGraphOnlineMeeting_JoinMeetingIdSettings) MergeMicrosoftGraphOnlineMeetingJoinMeetingIdSettings1(v MicrosoftGraphOnlineMeetingJoinMeetingIdSettings1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

func (t MicrosoftGraphOnlineMeeting_JoinMeetingIdSettings) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *MicrosoftGraphOnlineMeeting_JoinMeetingIdSettings) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsMicrosoftGraphLobbyBypassSettings returns the union data inside the MicrosoftGraphOnlineMeeting_LobbyBypassSettings as a MicrosoftGraphLobbyBypassSettings
func (t MicrosoftGraphOnlineMeeting_LobbyBypassSettings) AsMicrosoftGraphLobbyBypassSettings() (MicrosoftGraphLobbyBypassSettings, error) {
	var body MicrosoftGraphLobbyBypassSettings
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphLobbyBypassSettings overwrites any union data inside the MicrosoftGraphOnlineMeeting_LobbyBypassSettings as the provided MicrosoftGraphLobbyBypassSettings
func (t *MicrosoftGraphOnlineMeeting_LobbyBypassSettings) FromMicrosoftGraphLobbyBypassSettings(v MicrosoftGraphLobbyBypassSettings) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphLobbyBypassSettings performs a merge with any union data inside the MicrosoftGraphOnlineMeeting_LobbyBypassSettings, using the provided MicrosoftGraphLobbyBypassSettings
func (t *MicrosoftGraphOnlineMeeting_LobbyBypassSettings) MergeMicrosoftGraphLobbyBypassSettings(v MicrosoftGraphLobbyBypassSettings) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsMicrosoftGraphOnlineMeetingLobbyBypassSettings1 returns the union data inside the MicrosoftGraphOnlineMeeting_LobbyBypassSettings as a MicrosoftGraphOnlineMeetingLobbyBypassSettings1
func (t MicrosoftGraphOnlineMeeting_LobbyBypassSettings) AsMicrosoftGraphOnlineMeetingLobbyBypassSettings1() (MicrosoftGraphOnlineMeetingLobbyBypassSettings1, error) {
	var body MicrosoftGraphOnlineMeetingLobbyBypassSettings1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphOnlineMeetingLobbyBypassSettings1 overwrites any union data inside the MicrosoftGraphOnlineMeeting_LobbyBypassSettings as the provided MicrosoftGraphOnlineMeetingLobbyBypassSettings1
func (t *MicrosoftGraphOnlineMeeting_LobbyBypassSettings) FromMicrosoftGraphOnlineMeetingLobbyBypassSettings1(v MicrosoftGraphOnlineMeetingLobbyBypassSettings1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphOnlineMeetingLobbyBypassSettings1 performs a merge with any union data inside the MicrosoftGraphOnlineMeeting_LobbyBypassSettings, using the provided MicrosoftGraphOnlineMeetingLobbyBypassSettings1
func (t *MicrosoftGraphOnlineMeeting_LobbyBypassSettings) MergeMicrosoftGraphOnlineMeetingLobbyBypassSettings1(v MicrosoftGraphOnlineMeetingLobbyBypassSettings1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

func (t MicrosoftGraphOnlineMeeting_LobbyBypassSettings) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *MicrosoftGraphOnlineMeeting_LobbyBypassSettings) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsMicrosoftGraphMeetingParticipants returns the union data inside the MicrosoftGraphOnlineMeeting_Participants as a MicrosoftGraphMeetingParticipants
func (t MicrosoftGraphOnlineMeeting_Participants) AsMicrosoftGraphMeetingParticipants() (MicrosoftGraphMeetingParticipants, error) {
	var body MicrosoftGraphMeetingParticipants
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphMeetingParticipants overwrites any union data inside the MicrosoftGraphOnlineMeeting_Participants as the provided MicrosoftGraphMeetingParticipants
func (t *MicrosoftGraphOnlineMeeting_Participants) FromMicrosoftGraphMeetingParticipants(v MicrosoftGraphMeetingParticipants) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphMeetingParticipants performs a merge with any union data inside the MicrosoftGraphOnlineMeeting_Participants, using the provided MicrosoftGraphMeetingParticipants
func (t *MicrosoftGraphOnlineMeeting_Participants) MergeMicrosoftGraphMeetingParticipants(v MicrosoftGraphMeetingParticipants) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsMicrosoftGraphOnlineMeetingParticipants1 returns the union data inside the MicrosoftGraphOnlineMeeting_Participants as a MicrosoftGraphOnlineMeetingParticipants1
func (t MicrosoftGraphOnlineMeeting_Participants) AsMicrosoftGraphOnlineMeetingParticipants1() (MicrosoftGraphOnlineMeetingParticipants1, error) {
	var body MicrosoftGraphOnlineMeetingParticipants1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphOnlineMeetingParticipants1 overwrites any union data inside the MicrosoftGraphOnlineMeeting_Participants as the provided MicrosoftGraphOnlineMeetingParticipants1
func (t *MicrosoftGraphOnlineMeeting_Participants) FromMicrosoftGraphOnlineMeetingParticipants1(v MicrosoftGraphOnlineMeetingParticipants1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphOnlineMeetingParticipants1 performs a merge with any union data inside the MicrosoftGraphOnlineMeeting_Participants, using the provided MicrosoftGraphOnlineMeetingParticipants1
func (t *MicrosoftGraphOnlineMeeting_Participants) MergeMicrosoftGraphOnlineMeetingParticipants1(v MicrosoftGraphOnlineMeetingParticipants1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

func (t MicrosoftGraphOnlineMeeting_Participants) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *MicrosoftGraphOnlineMeeting_Participants) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsMicrosoftGraphMeetingChatHistoryDefaultMode returns the union data inside the MicrosoftGraphOnlineMeeting_ShareMeetingChatHistoryDefault as a MicrosoftGraphMeetingChatHistoryDefaultMode
func (t MicrosoftGraphOnlineMeeting_ShareMeetingChatHistoryDefault) AsMicrosoftGraphMeetingChatHistoryDefaultMode() (MicrosoftGraphMeetingChatHistoryDefaultMode, error) {
	var body MicrosoftGraphMeetingChatHistoryDefaultMode
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphMeetingChatHistoryDefaultMode overwrites any union data inside the MicrosoftGraphOnlineMeeting_ShareMeetingChatHistoryDefault as the provided MicrosoftGraphMeetingChatHistoryDefaultMode
func (t *MicrosoftGraphOnlineMeeting_ShareMeetingChatHistoryDefault) FromMicrosoftGraphMeetingChatHistoryDefaultMode(v MicrosoftGraphMeetingChatHistoryDefaultMode) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphMeetingChatHistoryDefaultMode performs a merge with any union data inside the MicrosoftGraphOnlineMeeting_ShareMeetingChatHistoryDefault, using the provided MicrosoftGraphMeetingChatHistoryDefaultMode
func (t *MicrosoftGraphOnlineMeeting_ShareMeetingChatHistoryDefault) MergeMicrosoftGraphMeetingChatHistoryDefaultMode(v MicrosoftGraphMeetingChatHistoryDefaultMode) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsMicrosoftGraphOnlineMeetingShareMeetingChatHistoryDefault1 returns the union data inside the MicrosoftGraphOnlineMeeting_ShareMeetingChatHistoryDefault as a MicrosoftGraphOnlineMeetingShareMeetingChatHistoryDefault1
func (t MicrosoftGraphOnlineMeeting_ShareMeetingChatHistoryDefault) AsMicrosoftGraphOnlineMeetingShareMeetingChatHistoryDefault1() (MicrosoftGraphOnlineMeetingShareMeetingChatHistoryDefault1, error) {
	var body MicrosoftGraphOnlineMeetingShareMeetingChatHistoryDefault1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphOnlineMeetingShareMeetingChatHistoryDefault1 overwrites any union data inside the MicrosoftGraphOnlineMeeting_ShareMeetingChatHistoryDefault as the provided MicrosoftGraphOnlineMeetingShareMeetingChatHistoryDefault1
func (t *MicrosoftGraphOnlineMeeting_ShareMeetingChatHistoryDefault) FromMicrosoftGraphOnlineMeetingShareMeetingChatHistoryDefault1(v MicrosoftGraphOnlineMeetingShareMeetingChatHistoryDefault1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphOnlineMeetingShareMeetingChatHistoryDefault1 performs a merge with any union data inside the MicrosoftGraphOnlineMeeting_ShareMeetingChatHistoryDefault, using the provided MicrosoftGraphOnlineMeetingShareMeetingChatHistoryDefault1
func (t *MicrosoftGraphOnlineMeeting_ShareMeetingChatHistoryDefault) MergeMicrosoftGraphOnlineMeetingShareMeetingChatHistoryDefault1(v MicrosoftGraphOnlineMeetingShareMeetingChatHistoryDefault1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

func (t MicrosoftGraphOnlineMeeting_ShareMeetingChatHistoryDefault) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *MicrosoftGraphOnlineMeeting_ShareMeetingChatHistoryDefault) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsMicrosoftGraphWatermarkProtectionValues returns the union data inside the MicrosoftGraphOnlineMeeting_WatermarkProtection as a MicrosoftGraphWatermarkProtectionValues
func (t MicrosoftGraphOnlineMeeting_WatermarkProtection) AsMicrosoftGraphWatermarkProtectionValues() (MicrosoftGraphWatermarkProtectionValues, error) {
	var body MicrosoftGraphWatermarkProtectionValues
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphWatermarkProtectionValues overwrites any union data inside the MicrosoftGraphOnlineMeeting_WatermarkProtection as the provided MicrosoftGraphWatermarkProtectionValues
func (t *MicrosoftGraphOnlineMeeting_WatermarkProtection) FromMicrosoftGraphWatermarkProtectionValues(v MicrosoftGraphWatermarkProtectionValues) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphWatermarkProtectionValues performs a merge with any union data inside the MicrosoftGraphOnlineMeeting_WatermarkProtection, using the provided MicrosoftGraphWatermarkProtectionValues
func (t *MicrosoftGraphOnlineMeeting_WatermarkProtection) MergeMicrosoftGraphWatermarkProtectionValues(v MicrosoftGraphWatermarkProtectionValues) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsMicrosoftGraphOnlineMeetingWatermarkProtection1 returns the union data inside the MicrosoftGraphOnlineMeeting_WatermarkProtection as a MicrosoftGraphOnlineMeetingWatermarkProtection1
func (t MicrosoftGraphOnlineMeeting_WatermarkProtection) AsMicrosoftGraphOnlineMeetingWatermarkProtection1() (MicrosoftGraphOnlineMeetingWatermarkProtection1, error) {
	var body MicrosoftGraphOnlineMeetingWatermarkProtection1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphOnlineMeetingWatermarkProtection1 overwrites any union data inside the MicrosoftGraphOnlineMeeting_WatermarkProtection as the provided MicrosoftGraphOnlineMeetingWatermarkProtection1
func (t *MicrosoftGraphOnlineMeeting_WatermarkProtection) FromMicrosoftGraphOnlineMeetingWatermarkProtection1(v MicrosoftGraphOnlineMeetingWatermarkProtection1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphOnlineMeetingWatermarkProtection1 performs a merge with any union data inside the MicrosoftGraphOnlineMeeting_WatermarkProtection, using the provided MicrosoftGraphOnlineMeetingWatermarkProtection1
func (t *MicrosoftGraphOnlineMeeting_WatermarkProtection) MergeMicrosoftGraphOnlineMeetingWatermarkProtection1(v MicrosoftGraphOnlineMeetingWatermarkProtection1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

func (t MicrosoftGraphOnlineMeeting_WatermarkProtection) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *MicrosoftGraphOnlineMeeting_WatermarkProtection) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsMicrosoftGraphPhone returns the union data inside the MicrosoftGraphOnlineMeetingInfo_Phones_Item as a MicrosoftGraphPhone
func (t MicrosoftGraphOnlineMeetingInfo_Phones_Item) AsMicrosoftGraphPhone() (MicrosoftGraphPhone, error) {
	var body MicrosoftGraphPhone
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphPhone overwrites any union data inside the MicrosoftGraphOnlineMeetingInfo_Phones_Item as the provided MicrosoftGraphPhone
func (t *MicrosoftGraphOnlineMeetingInfo_Phones_Item) FromMicrosoftGraphPhone(v MicrosoftGraphPhone) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphPhone performs a merge with any union data inside the MicrosoftGraphOnlineMeetingInfo_Phones_Item, using the provided MicrosoftGraphPhone
func (t *MicrosoftGraphOnlineMeetingInfo_Phones_Item) MergeMicrosoftGraphPhone(v MicrosoftGraphPhone) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsMicrosoftGraphOnlineMeetingInfoPhones1 returns the union data inside the MicrosoftGraphOnlineMeetingInfo_Phones_Item as a MicrosoftGraphOnlineMeetingInfoPhones1
func (t MicrosoftGraphOnlineMeetingInfo_Phones_Item) AsMicrosoftGraphOnlineMeetingInfoPhones1() (MicrosoftGraphOnlineMeetingInfoPhones1, error) {
	var body MicrosoftGraphOnlineMeetingInfoPhones1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphOnlineMeetingInfoPhones1 overwrites any union data inside the MicrosoftGraphOnlineMeetingInfo_Phones_Item as the provided MicrosoftGraphOnlineMeetingInfoPhones1
func (t *MicrosoftGraphOnlineMeetingInfo_Phones_Item) FromMicrosoftGraphOnlineMeetingInfoPhones1(v MicrosoftGraphOnlineMeetingInfoPhones1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphOnlineMeetingInfoPhones1 performs a merge with any union data inside the MicrosoftGraphOnlineMeetingInfo_Phones_Item, using the provided MicrosoftGraphOnlineMeetingInfoPhones1
func (t *MicrosoftGraphOnlineMeetingInfo_Phones_Item) MergeMicrosoftGraphOnlineMeetingInfoPhones1(v MicrosoftGraphOnlineMeetingInfoPhones1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

func (t MicrosoftGraphOnlineMeetingInfo_Phones_Item) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *MicrosoftGraphOnlineMeetingInfo_Phones_Item) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsMicrosoftGraphOpenShiftItem returns the union data inside the MicrosoftGraphOpenShift_DraftOpenShift as a MicrosoftGraphOpenShiftItem
func (t MicrosoftGraphOpenShift_DraftOpenShift) AsMicrosoftGraphOpenShiftItem() (MicrosoftGraphOpenShiftItem, error) {
	var body MicrosoftGraphOpenShiftItem
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphOpenShiftItem overwrites any union data inside the MicrosoftGraphOpenShift_DraftOpenShift as the provided MicrosoftGraphOpenShiftItem
func (t *MicrosoftGraphOpenShift_DraftOpenShift) FromMicrosoftGraphOpenShiftItem(v MicrosoftGraphOpenShiftItem) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphOpenShiftItem performs a merge with any union data inside the MicrosoftGraphOpenShift_DraftOpenShift, using the provided MicrosoftGraphOpenShiftItem
func (t *MicrosoftGraphOpenShift_DraftOpenShift) MergeMicrosoftGraphOpenShiftItem(v MicrosoftGraphOpenShiftItem) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsMicrosoftGraphOpenShiftDraftOpenShift1 returns the union data inside the MicrosoftGraphOpenShift_DraftOpenShift as a MicrosoftGraphOpenShiftDraftOpenShift1
func (t MicrosoftGraphOpenShift_DraftOpenShift) AsMicrosoftGraphOpenShiftDraftOpenShift1() (MicrosoftGraphOpenShiftDraftOpenShift1, error) {
	var body MicrosoftGraphOpenShiftDraftOpenShift1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphOpenShiftDraftOpenShift1 overwrites any union data inside the MicrosoftGraphOpenShift_DraftOpenShift as the provided MicrosoftGraphOpenShiftDraftOpenShift1
func (t *MicrosoftGraphOpenShift_DraftOpenShift) FromMicrosoftGraphOpenShiftDraftOpenShift1(v MicrosoftGraphOpenShiftDraftOpenShift1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphOpenShiftDraftOpenShift1 performs a merge with any union data inside the MicrosoftGraphOpenShift_DraftOpenShift, using the provided MicrosoftGraphOpenShiftDraftOpenShift1
func (t *MicrosoftGraphOpenShift_DraftOpenShift) MergeMicrosoftGraphOpenShiftDraftOpenShift1(v MicrosoftGraphOpenShiftDraftOpenShift1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

func (t MicrosoftGraphOpenShift_DraftOpenShift) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *MicrosoftGraphOpenShift_DraftOpenShift) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsMicrosoftGraphIdentitySet returns the union data inside the MicrosoftGraphOpenShift_LastModifiedBy as a MicrosoftGraphIdentitySet
func (t MicrosoftGraphOpenShift_LastModifiedBy) AsMicrosoftGraphIdentitySet() (MicrosoftGraphIdentitySet, error) {
	var body MicrosoftGraphIdentitySet
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphIdentitySet overwrites any union data inside the MicrosoftGraphOpenShift_LastModifiedBy as the provided MicrosoftGraphIdentitySet
func (t *MicrosoftGraphOpenShift_LastModifiedBy) FromMicrosoftGraphIdentitySet(v MicrosoftGraphIdentitySet) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphIdentitySet performs a merge with any union data inside the MicrosoftGraphOpenShift_LastModifiedBy, using the provided MicrosoftGraphIdentitySet
func (t *MicrosoftGraphOpenShift_LastModifiedBy) MergeMicrosoftGraphIdentitySet(v MicrosoftGraphIdentitySet) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsMicrosoftGraphOpenShiftLastModifiedBy1 returns the union data inside the MicrosoftGraphOpenShift_LastModifiedBy as a MicrosoftGraphOpenShiftLastModifiedBy1
func (t MicrosoftGraphOpenShift_LastModifiedBy) AsMicrosoftGraphOpenShiftLastModifiedBy1() (MicrosoftGraphOpenShiftLastModifiedBy1, error) {
	var body MicrosoftGraphOpenShiftLastModifiedBy1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphOpenShiftLastModifiedBy1 overwrites any union data inside the MicrosoftGraphOpenShift_LastModifiedBy as the provided MicrosoftGraphOpenShiftLastModifiedBy1
func (t *MicrosoftGraphOpenShift_LastModifiedBy) FromMicrosoftGraphOpenShiftLastModifiedBy1(v MicrosoftGraphOpenShiftLastModifiedBy1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphOpenShiftLastModifiedBy1 performs a merge with any union data inside the MicrosoftGraphOpenShift_LastModifiedBy, using the provided MicrosoftGraphOpenShiftLastModifiedBy1
func (t *MicrosoftGraphOpenShift_LastModifiedBy) MergeMicrosoftGraphOpenShiftLastModifiedBy1(v MicrosoftGraphOpenShiftLastModifiedBy1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

func (t MicrosoftGraphOpenShift_LastModifiedBy) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *MicrosoftGraphOpenShift_LastModifiedBy) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsMicrosoftGraphOpenShiftItem returns the union data inside the MicrosoftGraphOpenShift_SharedOpenShift as a MicrosoftGraphOpenShiftItem
func (t MicrosoftGraphOpenShift_SharedOpenShift) AsMicrosoftGraphOpenShiftItem() (MicrosoftGraphOpenShiftItem, error) {
	var body MicrosoftGraphOpenShiftItem
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphOpenShiftItem overwrites any union data inside the MicrosoftGraphOpenShift_SharedOpenShift as the provided MicrosoftGraphOpenShiftItem
func (t *MicrosoftGraphOpenShift_SharedOpenShift) FromMicrosoftGraphOpenShiftItem(v MicrosoftGraphOpenShiftItem) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphOpenShiftItem performs a merge with any union data inside the MicrosoftGraphOpenShift_SharedOpenShift, using the provided MicrosoftGraphOpenShiftItem
func (t *MicrosoftGraphOpenShift_SharedOpenShift) MergeMicrosoftGraphOpenShiftItem(v MicrosoftGraphOpenShiftItem) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsMicrosoftGraphOpenShiftSharedOpenShift1 returns the union data inside the MicrosoftGraphOpenShift_SharedOpenShift as a MicrosoftGraphOpenShiftSharedOpenShift1
func (t MicrosoftGraphOpenShift_SharedOpenShift) AsMicrosoftGraphOpenShiftSharedOpenShift1() (MicrosoftGraphOpenShiftSharedOpenShift1, error) {
	var body MicrosoftGraphOpenShiftSharedOpenShift1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphOpenShiftSharedOpenShift1 overwrites any union data inside the MicrosoftGraphOpenShift_SharedOpenShift as the provided MicrosoftGraphOpenShiftSharedOpenShift1
func (t *MicrosoftGraphOpenShift_SharedOpenShift) FromMicrosoftGraphOpenShiftSharedOpenShift1(v MicrosoftGraphOpenShiftSharedOpenShift1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphOpenShiftSharedOpenShift1 performs a merge with any union data inside the MicrosoftGraphOpenShift_SharedOpenShift, using the provided MicrosoftGraphOpenShiftSharedOpenShift1
func (t *MicrosoftGraphOpenShift_SharedOpenShift) MergeMicrosoftGraphOpenShiftSharedOpenShift1(v MicrosoftGraphOpenShiftSharedOpenShift1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

func (t MicrosoftGraphOpenShift_SharedOpenShift) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *MicrosoftGraphOpenShift_SharedOpenShift) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsMicrosoftGraphScheduleChangeRequestActor returns the union data inside the MicrosoftGraphOpenShiftChangeRequest_AssignedTo as a MicrosoftGraphScheduleChangeRequestActor
func (t MicrosoftGraphOpenShiftChangeRequest_AssignedTo) AsMicrosoftGraphScheduleChangeRequestActor() (MicrosoftGraphScheduleChangeRequestActor, error) {
	var body MicrosoftGraphScheduleChangeRequestActor
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphScheduleChangeRequestActor overwrites any union data inside the MicrosoftGraphOpenShiftChangeRequest_AssignedTo as the provided MicrosoftGraphScheduleChangeRequestActor
func (t *MicrosoftGraphOpenShiftChangeRequest_AssignedTo) FromMicrosoftGraphScheduleChangeRequestActor(v MicrosoftGraphScheduleChangeRequestActor) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphScheduleChangeRequestActor performs a merge with any union data inside the MicrosoftGraphOpenShiftChangeRequest_AssignedTo, using the provided MicrosoftGraphScheduleChangeRequestActor
func (t *MicrosoftGraphOpenShiftChangeRequest_AssignedTo) MergeMicrosoftGraphScheduleChangeRequestActor(v MicrosoftGraphScheduleChangeRequestActor) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsMicrosoftGraphOpenShiftChangeRequestAssignedTo1 returns the union data inside the MicrosoftGraphOpenShiftChangeRequest_AssignedTo as a MicrosoftGraphOpenShiftChangeRequestAssignedTo1
func (t MicrosoftGraphOpenShiftChangeRequest_AssignedTo) AsMicrosoftGraphOpenShiftChangeRequestAssignedTo1() (MicrosoftGraphOpenShiftChangeRequestAssignedTo1, error) {
	var body MicrosoftGraphOpenShiftChangeRequestAssignedTo1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphOpenShiftChangeRequestAssignedTo1 overwrites any union data inside the MicrosoftGraphOpenShiftChangeRequest_AssignedTo as the provided MicrosoftGraphOpenShiftChangeRequestAssignedTo1
func (t *MicrosoftGraphOpenShiftChangeRequest_AssignedTo) FromMicrosoftGraphOpenShiftChangeRequestAssignedTo1(v MicrosoftGraphOpenShiftChangeRequestAssignedTo1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphOpenShiftChangeRequestAssignedTo1 performs a merge with any union data inside the MicrosoftGraphOpenShiftChangeRequest_AssignedTo, using the provided MicrosoftGraphOpenShiftChangeRequestAssignedTo1
func (t *MicrosoftGraphOpenShiftChangeRequest_AssignedTo) MergeMicrosoftGraphOpenShiftChangeRequestAssignedTo1(v MicrosoftGraphOpenShiftChangeRequestAssignedTo1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

func (t MicrosoftGraphOpenShiftChangeRequest_AssignedTo) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *MicrosoftGraphOpenShiftChangeRequest_AssignedTo) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsMicrosoftGraphIdentitySet returns the union data inside the MicrosoftGraphOpenShiftChangeRequest_LastModifiedBy as a MicrosoftGraphIdentitySet
func (t MicrosoftGraphOpenShiftChangeRequest_LastModifiedBy) AsMicrosoftGraphIdentitySet() (MicrosoftGraphIdentitySet, error) {
	var body MicrosoftGraphIdentitySet
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphIdentitySet overwrites any union data inside the MicrosoftGraphOpenShiftChangeRequest_LastModifiedBy as the provided MicrosoftGraphIdentitySet
func (t *MicrosoftGraphOpenShiftChangeRequest_LastModifiedBy) FromMicrosoftGraphIdentitySet(v MicrosoftGraphIdentitySet) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphIdentitySet performs a merge with any union data inside the MicrosoftGraphOpenShiftChangeRequest_LastModifiedBy, using the provided MicrosoftGraphIdentitySet
func (t *MicrosoftGraphOpenShiftChangeRequest_LastModifiedBy) MergeMicrosoftGraphIdentitySet(v MicrosoftGraphIdentitySet) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsMicrosoftGraphOpenShiftChangeRequestLastModifiedBy1 returns the union data inside the MicrosoftGraphOpenShiftChangeRequest_LastModifiedBy as a MicrosoftGraphOpenShiftChangeRequestLastModifiedBy1
func (t MicrosoftGraphOpenShiftChangeRequest_LastModifiedBy) AsMicrosoftGraphOpenShiftChangeRequestLastModifiedBy1() (MicrosoftGraphOpenShiftChangeRequestLastModifiedBy1, error) {
	var body MicrosoftGraphOpenShiftChangeRequestLastModifiedBy1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphOpenShiftChangeRequestLastModifiedBy1 overwrites any union data inside the MicrosoftGraphOpenShiftChangeRequest_LastModifiedBy as the provided MicrosoftGraphOpenShiftChangeRequestLastModifiedBy1
func (t *MicrosoftGraphOpenShiftChangeRequest_LastModifiedBy) FromMicrosoftGraphOpenShiftChangeRequestLastModifiedBy1(v MicrosoftGraphOpenShiftChangeRequestLastModifiedBy1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphOpenShiftChangeRequestLastModifiedBy1 performs a merge with any union data inside the MicrosoftGraphOpenShiftChangeRequest_LastModifiedBy, using the provided MicrosoftGraphOpenShiftChangeRequestLastModifiedBy1
func (t *MicrosoftGraphOpenShiftChangeRequest_LastModifiedBy) MergeMicrosoftGraphOpenShiftChangeRequestLastModifiedBy1(v MicrosoftGraphOpenShiftChangeRequestLastModifiedBy1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

func (t MicrosoftGraphOpenShiftChangeRequest_LastModifiedBy) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *MicrosoftGraphOpenShiftChangeRequest_LastModifiedBy) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsMicrosoftGraphScheduleChangeState returns the union data inside the MicrosoftGraphOpenShiftChangeRequest_State as a MicrosoftGraphScheduleChangeState
func (t MicrosoftGraphOpenShiftChangeRequest_State) AsMicrosoftGraphScheduleChangeState() (MicrosoftGraphScheduleChangeState, error) {
	var body MicrosoftGraphScheduleChangeState
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphScheduleChangeState overwrites any union data inside the MicrosoftGraphOpenShiftChangeRequest_State as the provided MicrosoftGraphScheduleChangeState
func (t *MicrosoftGraphOpenShiftChangeRequest_State) FromMicrosoftGraphScheduleChangeState(v MicrosoftGraphScheduleChangeState) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphScheduleChangeState performs a merge with any union data inside the MicrosoftGraphOpenShiftChangeRequest_State, using the provided MicrosoftGraphScheduleChangeState
func (t *MicrosoftGraphOpenShiftChangeRequest_State) MergeMicrosoftGraphScheduleChangeState(v MicrosoftGraphScheduleChangeState) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsMicrosoftGraphOpenShiftChangeRequestState1 returns the union data inside the MicrosoftGraphOpenShiftChangeRequest_State as a MicrosoftGraphOpenShiftChangeRequestState1
func (t MicrosoftGraphOpenShiftChangeRequest_State) AsMicrosoftGraphOpenShiftChangeRequestState1() (MicrosoftGraphOpenShiftChangeRequestState1, error) {
	var body MicrosoftGraphOpenShiftChangeRequestState1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphOpenShiftChangeRequestState1 overwrites any union data inside the MicrosoftGraphOpenShiftChangeRequest_State as the provided MicrosoftGraphOpenShiftChangeRequestState1
func (t *MicrosoftGraphOpenShiftChangeRequest_State) FromMicrosoftGraphOpenShiftChangeRequestState1(v MicrosoftGraphOpenShiftChangeRequestState1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphOpenShiftChangeRequestState1 performs a merge with any union data inside the MicrosoftGraphOpenShiftChangeRequest_State, using the provided MicrosoftGraphOpenShiftChangeRequestState1
func (t *MicrosoftGraphOpenShiftChangeRequest_State) MergeMicrosoftGraphOpenShiftChangeRequestState1(v MicrosoftGraphOpenShiftChangeRequestState1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

func (t MicrosoftGraphOpenShiftChangeRequest_State) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *MicrosoftGraphOpenShiftChangeRequest_State) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsMicrosoftGraphShiftActivity returns the union data inside the MicrosoftGraphOpenShiftItem_Activities_Item as a MicrosoftGraphShiftActivity
func (t MicrosoftGraphOpenShiftItem_Activities_Item) AsMicrosoftGraphShiftActivity() (MicrosoftGraphShiftActivity, error) {
	var body MicrosoftGraphShiftActivity
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphShiftActivity overwrites any union data inside the MicrosoftGraphOpenShiftItem_Activities_Item as the provided MicrosoftGraphShiftActivity
func (t *MicrosoftGraphOpenShiftItem_Activities_Item) FromMicrosoftGraphShiftActivity(v MicrosoftGraphShiftActivity) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphShiftActivity performs a merge with any union data inside the MicrosoftGraphOpenShiftItem_Activities_Item, using the provided MicrosoftGraphShiftActivity
func (t *MicrosoftGraphOpenShiftItem_Activities_Item) MergeMicrosoftGraphShiftActivity(v MicrosoftGraphShiftActivity) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsMicrosoftGraphOpenShiftItemActivities1 returns the union data inside the MicrosoftGraphOpenShiftItem_Activities_Item as a MicrosoftGraphOpenShiftItemActivities1
func (t MicrosoftGraphOpenShiftItem_Activities_Item) AsMicrosoftGraphOpenShiftItemActivities1() (MicrosoftGraphOpenShiftItemActivities1, error) {
	var body MicrosoftGraphOpenShiftItemActivities1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphOpenShiftItemActivities1 overwrites any union data inside the MicrosoftGraphOpenShiftItem_Activities_Item as the provided MicrosoftGraphOpenShiftItemActivities1
func (t *MicrosoftGraphOpenShiftItem_Activities_Item) FromMicrosoftGraphOpenShiftItemActivities1(v MicrosoftGraphOpenShiftItemActivities1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphOpenShiftItemActivities1 performs a merge with any union data inside the MicrosoftGraphOpenShiftItem_Activities_Item, using the provided MicrosoftGraphOpenShiftItemActivities1
func (t *MicrosoftGraphOpenShiftItem_Activities_Item) MergeMicrosoftGraphOpenShiftItemActivities1(v MicrosoftGraphOpenShiftItemActivities1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

func (t MicrosoftGraphOpenShiftItem_Activities_Item) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *MicrosoftGraphOpenShiftItem_Activities_Item) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsMicrosoftGraphOperationStatus returns the union data inside the MicrosoftGraphOperation_Status as a MicrosoftGraphOperationStatus
func (t MicrosoftGraphOperation_Status) AsMicrosoftGraphOperationStatus() (MicrosoftGraphOperationStatus, error) {
	var body MicrosoftGraphOperationStatus
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphOperationStatus overwrites any union data inside the MicrosoftGraphOperation_Status as the provided MicrosoftGraphOperationStatus
func (t *MicrosoftGraphOperation_Status) FromMicrosoftGraphOperationStatus(v MicrosoftGraphOperationStatus) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphOperationStatus performs a merge with any union data inside the MicrosoftGraphOperation_Status, using the provided MicrosoftGraphOperationStatus
func (t *MicrosoftGraphOperation_Status) MergeMicrosoftGraphOperationStatus(v MicrosoftGraphOperationStatus) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsMicrosoftGraphOperationStatus1 returns the union data inside the MicrosoftGraphOperation_Status as a MicrosoftGraphOperationStatus1
func (t MicrosoftGraphOperation_Status) AsMicrosoftGraphOperationStatus1() (MicrosoftGraphOperationStatus1, error) {
	var body MicrosoftGraphOperationStatus1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphOperationStatus1 overwrites any union data inside the MicrosoftGraphOperation_Status as the provided MicrosoftGraphOperationStatus1
func (t *MicrosoftGraphOperation_Status) FromMicrosoftGraphOperationStatus1(v MicrosoftGraphOperationStatus1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphOperationStatus1 performs a merge with any union data inside the MicrosoftGraphOperation_Status, using the provided MicrosoftGraphOperationStatus1
func (t *MicrosoftGraphOperation_Status) MergeMicrosoftGraphOperationStatus1(v MicrosoftGraphOperationStatus1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

func (t MicrosoftGraphOperation_Status) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *MicrosoftGraphOperation_Status) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsMicrosoftGraphCategoryColor returns the union data inside the MicrosoftGraphOutlookCategory_Color as a MicrosoftGraphCategoryColor
func (t MicrosoftGraphOutlookCategory_Color) AsMicrosoftGraphCategoryColor() (MicrosoftGraphCategoryColor, error) {
	var body MicrosoftGraphCategoryColor
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphCategoryColor overwrites any union data inside the MicrosoftGraphOutlookCategory_Color as the provided MicrosoftGraphCategoryColor
func (t *MicrosoftGraphOutlookCategory_Color) FromMicrosoftGraphCategoryColor(v MicrosoftGraphCategoryColor) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphCategoryColor performs a merge with any union data inside the MicrosoftGraphOutlookCategory_Color, using the provided MicrosoftGraphCategoryColor
func (t *MicrosoftGraphOutlookCategory_Color) MergeMicrosoftGraphCategoryColor(v MicrosoftGraphCategoryColor) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsMicrosoftGraphOutlookCategoryColor1 returns the union data inside the MicrosoftGraphOutlookCategory_Color as a MicrosoftGraphOutlookCategoryColor1
func (t MicrosoftGraphOutlookCategory_Color) AsMicrosoftGraphOutlookCategoryColor1() (MicrosoftGraphOutlookCategoryColor1, error) {
	var body MicrosoftGraphOutlookCategoryColor1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphOutlookCategoryColor1 overwrites any union data inside the MicrosoftGraphOutlookCategory_Color as the provided MicrosoftGraphOutlookCategoryColor1
func (t *MicrosoftGraphOutlookCategory_Color) FromMicrosoftGraphOutlookCategoryColor1(v MicrosoftGraphOutlookCategoryColor1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphOutlookCategoryColor1 performs a merge with any union data inside the MicrosoftGraphOutlookCategory_Color, using the provided MicrosoftGraphOutlookCategoryColor1
func (t *MicrosoftGraphOutlookCategory_Color) MergeMicrosoftGraphOutlookCategoryColor1(v MicrosoftGraphOutlookCategoryColor1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

func (t MicrosoftGraphOutlookCategory_Color) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *MicrosoftGraphOutlookCategory_Color) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsMicrosoftGraphOutlookGeoCoordinatesAccuracy0 returns the union data inside the MicrosoftGraphOutlookGeoCoordinates_Accuracy as a MicrosoftGraphOutlookGeoCoordinatesAccuracy0
func (t MicrosoftGraphOutlookGeoCoordinates_Accuracy) AsMicrosoftGraphOutlookGeoCoordinatesAccuracy0() (MicrosoftGraphOutlookGeoCoordinatesAccuracy0, error) {
	var body MicrosoftGraphOutlookGeoCoordinatesAccuracy0
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphOutlookGeoCoordinatesAccuracy0 overwrites any union data inside the MicrosoftGraphOutlookGeoCoordinates_Accuracy as the provided MicrosoftGraphOutlookGeoCoordinatesAccuracy0
func (t *MicrosoftGraphOutlookGeoCoordinates_Accuracy) FromMicrosoftGraphOutlookGeoCoordinatesAccuracy0(v MicrosoftGraphOutlookGeoCoordinatesAccuracy0) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphOutlookGeoCoordinatesAccuracy0 performs a merge with any union data inside the MicrosoftGraphOutlookGeoCoordinates_Accuracy, using the provided MicrosoftGraphOutlookGeoCoordinatesAccuracy0
func (t *MicrosoftGraphOutlookGeoCoordinates_Accuracy) MergeMicrosoftGraphOutlookGeoCoordinatesAccuracy0(v MicrosoftGraphOutlookGeoCoordinatesAccuracy0) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsMicrosoftGraphOutlookGeoCoordinatesAccuracy1 returns the union data inside the MicrosoftGraphOutlookGeoCoordinates_Accuracy as a MicrosoftGraphOutlookGeoCoordinatesAccuracy1
func (t MicrosoftGraphOutlookGeoCoordinates_Accuracy) AsMicrosoftGraphOutlookGeoCoordinatesAccuracy1() (MicrosoftGraphOutlookGeoCoordinatesAccuracy1, error) {
	var body MicrosoftGraphOutlookGeoCoordinatesAccuracy1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphOutlookGeoCoordinatesAccuracy1 overwrites any union data inside the MicrosoftGraphOutlookGeoCoordinates_Accuracy as the provided MicrosoftGraphOutlookGeoCoordinatesAccuracy1
func (t *MicrosoftGraphOutlookGeoCoordinates_Accuracy) FromMicrosoftGraphOutlookGeoCoordinatesAccuracy1(v MicrosoftGraphOutlookGeoCoordinatesAccuracy1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphOutlookGeoCoordinatesAccuracy1 performs a merge with any union data inside the MicrosoftGraphOutlookGeoCoordinates_Accuracy, using the provided MicrosoftGraphOutlookGeoCoordinatesAccuracy1
func (t *MicrosoftGraphOutlookGeoCoordinates_Accuracy) MergeMicrosoftGraphOutlookGeoCoordinatesAccuracy1(v MicrosoftGraphOutlookGeoCoordinatesAccuracy1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsReferenceNumeric returns the union data inside the MicrosoftGraphOutlookGeoCoordinates_Accuracy as a ReferenceNumeric
func (t MicrosoftGraphOutlookGeoCoordinates_Accuracy) AsReferenceNumeric() (ReferenceNumeric, error) {
	var body ReferenceNumeric
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromReferenceNumeric overwrites any union data inside the MicrosoftGraphOutlookGeoCoordinates_Accuracy as the provided ReferenceNumeric
func (t *MicrosoftGraphOutlookGeoCoordinates_Accuracy) FromReferenceNumeric(v ReferenceNumeric) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeReferenceNumeric performs a merge with any union data inside the MicrosoftGraphOutlookGeoCoordinates_Accuracy, using the provided ReferenceNumeric
func (t *MicrosoftGraphOutlookGeoCoordinates_Accuracy) MergeReferenceNumeric(v ReferenceNumeric) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

func (t MicrosoftGraphOutlookGeoCoordinates_Accuracy) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *MicrosoftGraphOutlookGeoCoordinates_Accuracy) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsMicrosoftGraphOutlookGeoCoordinatesAltitude0 returns the union data inside the MicrosoftGraphOutlookGeoCoordinates_Altitude as a MicrosoftGraphOutlookGeoCoordinatesAltitude0
func (t MicrosoftGraphOutlookGeoCoordinates_Altitude) AsMicrosoftGraphOutlookGeoCoordinatesAltitude0() (MicrosoftGraphOutlookGeoCoordinatesAltitude0, error) {
	var body MicrosoftGraphOutlookGeoCoordinatesAltitude0
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphOutlookGeoCoordinatesAltitude0 overwrites any union data inside the MicrosoftGraphOutlookGeoCoordinates_Altitude as the provided MicrosoftGraphOutlookGeoCoordinatesAltitude0
func (t *MicrosoftGraphOutlookGeoCoordinates_Altitude) FromMicrosoftGraphOutlookGeoCoordinatesAltitude0(v MicrosoftGraphOutlookGeoCoordinatesAltitude0) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphOutlookGeoCoordinatesAltitude0 performs a merge with any union data inside the MicrosoftGraphOutlookGeoCoordinates_Altitude, using the provided MicrosoftGraphOutlookGeoCoordinatesAltitude0
func (t *MicrosoftGraphOutlookGeoCoordinates_Altitude) MergeMicrosoftGraphOutlookGeoCoordinatesAltitude0(v MicrosoftGraphOutlookGeoCoordinatesAltitude0) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsMicrosoftGraphOutlookGeoCoordinatesAltitude1 returns the union data inside the MicrosoftGraphOutlookGeoCoordinates_Altitude as a MicrosoftGraphOutlookGeoCoordinatesAltitude1
func (t MicrosoftGraphOutlookGeoCoordinates_Altitude) AsMicrosoftGraphOutlookGeoCoordinatesAltitude1() (MicrosoftGraphOutlookGeoCoordinatesAltitude1, error) {
	var body MicrosoftGraphOutlookGeoCoordinatesAltitude1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphOutlookGeoCoordinatesAltitude1 overwrites any union data inside the MicrosoftGraphOutlookGeoCoordinates_Altitude as the provided MicrosoftGraphOutlookGeoCoordinatesAltitude1
func (t *MicrosoftGraphOutlookGeoCoordinates_Altitude) FromMicrosoftGraphOutlookGeoCoordinatesAltitude1(v MicrosoftGraphOutlookGeoCoordinatesAltitude1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphOutlookGeoCoordinatesAltitude1 performs a merge with any union data inside the MicrosoftGraphOutlookGeoCoordinates_Altitude, using the provided MicrosoftGraphOutlookGeoCoordinatesAltitude1
func (t *MicrosoftGraphOutlookGeoCoordinates_Altitude) MergeMicrosoftGraphOutlookGeoCoordinatesAltitude1(v MicrosoftGraphOutlookGeoCoordinatesAltitude1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsReferenceNumeric returns the union data inside the MicrosoftGraphOutlookGeoCoordinates_Altitude as a ReferenceNumeric
func (t MicrosoftGraphOutlookGeoCoordinates_Altitude) AsReferenceNumeric() (ReferenceNumeric, error) {
	var body ReferenceNumeric
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromReferenceNumeric overwrites any union data inside the MicrosoftGraphOutlookGeoCoordinates_Altitude as the provided ReferenceNumeric
func (t *MicrosoftGraphOutlookGeoCoordinates_Altitude) FromReferenceNumeric(v ReferenceNumeric) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeReferenceNumeric performs a merge with any union data inside the MicrosoftGraphOutlookGeoCoordinates_Altitude, using the provided ReferenceNumeric
func (t *MicrosoftGraphOutlookGeoCoordinates_Altitude) MergeReferenceNumeric(v ReferenceNumeric) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

func (t MicrosoftGraphOutlookGeoCoordinates_Altitude) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *MicrosoftGraphOutlookGeoCoordinates_Altitude) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsMicrosoftGraphOutlookGeoCoordinatesAltitudeAccuracy0 returns the union data inside the MicrosoftGraphOutlookGeoCoordinates_AltitudeAccuracy as a MicrosoftGraphOutlookGeoCoordinatesAltitudeAccuracy0
func (t MicrosoftGraphOutlookGeoCoordinates_AltitudeAccuracy) AsMicrosoftGraphOutlookGeoCoordinatesAltitudeAccuracy0() (MicrosoftGraphOutlookGeoCoordinatesAltitudeAccuracy0, error) {
	var body MicrosoftGraphOutlookGeoCoordinatesAltitudeAccuracy0
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphOutlookGeoCoordinatesAltitudeAccuracy0 overwrites any union data inside the MicrosoftGraphOutlookGeoCoordinates_AltitudeAccuracy as the provided MicrosoftGraphOutlookGeoCoordinatesAltitudeAccuracy0
func (t *MicrosoftGraphOutlookGeoCoordinates_AltitudeAccuracy) FromMicrosoftGraphOutlookGeoCoordinatesAltitudeAccuracy0(v MicrosoftGraphOutlookGeoCoordinatesAltitudeAccuracy0) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphOutlookGeoCoordinatesAltitudeAccuracy0 performs a merge with any union data inside the MicrosoftGraphOutlookGeoCoordinates_AltitudeAccuracy, using the provided MicrosoftGraphOutlookGeoCoordinatesAltitudeAccuracy0
func (t *MicrosoftGraphOutlookGeoCoordinates_AltitudeAccuracy) MergeMicrosoftGraphOutlookGeoCoordinatesAltitudeAccuracy0(v MicrosoftGraphOutlookGeoCoordinatesAltitudeAccuracy0) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsMicrosoftGraphOutlookGeoCoordinatesAltitudeAccuracy1 returns the union data inside the MicrosoftGraphOutlookGeoCoordinates_AltitudeAccuracy as a MicrosoftGraphOutlookGeoCoordinatesAltitudeAccuracy1
func (t MicrosoftGraphOutlookGeoCoordinates_AltitudeAccuracy) AsMicrosoftGraphOutlookGeoCoordinatesAltitudeAccuracy1() (MicrosoftGraphOutlookGeoCoordinatesAltitudeAccuracy1, error) {
	var body MicrosoftGraphOutlookGeoCoordinatesAltitudeAccuracy1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphOutlookGeoCoordinatesAltitudeAccuracy1 overwrites any union data inside the MicrosoftGraphOutlookGeoCoordinates_AltitudeAccuracy as the provided MicrosoftGraphOutlookGeoCoordinatesAltitudeAccuracy1
func (t *MicrosoftGraphOutlookGeoCoordinates_AltitudeAccuracy) FromMicrosoftGraphOutlookGeoCoordinatesAltitudeAccuracy1(v MicrosoftGraphOutlookGeoCoordinatesAltitudeAccuracy1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphOutlookGeoCoordinatesAltitudeAccuracy1 performs a merge with any union data inside the MicrosoftGraphOutlookGeoCoordinates_AltitudeAccuracy, using the provided MicrosoftGraphOutlookGeoCoordinatesAltitudeAccuracy1
func (t *MicrosoftGraphOutlookGeoCoordinates_AltitudeAccuracy) MergeMicrosoftGraphOutlookGeoCoordinatesAltitudeAccuracy1(v MicrosoftGraphOutlookGeoCoordinatesAltitudeAccuracy1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsReferenceNumeric returns the union data inside the MicrosoftGraphOutlookGeoCoordinates_AltitudeAccuracy as a ReferenceNumeric
func (t MicrosoftGraphOutlookGeoCoordinates_AltitudeAccuracy) AsReferenceNumeric() (ReferenceNumeric, error) {
	var body ReferenceNumeric
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromReferenceNumeric overwrites any union data inside the MicrosoftGraphOutlookGeoCoordinates_AltitudeAccuracy as the provided ReferenceNumeric
func (t *MicrosoftGraphOutlookGeoCoordinates_AltitudeAccuracy) FromReferenceNumeric(v ReferenceNumeric) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeReferenceNumeric performs a merge with any union data inside the MicrosoftGraphOutlookGeoCoordinates_AltitudeAccuracy, using the provided ReferenceNumeric
func (t *MicrosoftGraphOutlookGeoCoordinates_AltitudeAccuracy) MergeReferenceNumeric(v ReferenceNumeric) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

func (t MicrosoftGraphOutlookGeoCoordinates_AltitudeAccuracy) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *MicrosoftGraphOutlookGeoCoordinates_AltitudeAccuracy) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsMicrosoftGraphOutlookGeoCoordinatesLatitude0 returns the union data inside the MicrosoftGraphOutlookGeoCoordinates_Latitude as a MicrosoftGraphOutlookGeoCoordinatesLatitude0
func (t MicrosoftGraphOutlookGeoCoordinates_Latitude) AsMicrosoftGraphOutlookGeoCoordinatesLatitude0() (MicrosoftGraphOutlookGeoCoordinatesLatitude0, error) {
	var body MicrosoftGraphOutlookGeoCoordinatesLatitude0
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphOutlookGeoCoordinatesLatitude0 overwrites any union data inside the MicrosoftGraphOutlookGeoCoordinates_Latitude as the provided MicrosoftGraphOutlookGeoCoordinatesLatitude0
func (t *MicrosoftGraphOutlookGeoCoordinates_Latitude) FromMicrosoftGraphOutlookGeoCoordinatesLatitude0(v MicrosoftGraphOutlookGeoCoordinatesLatitude0) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphOutlookGeoCoordinatesLatitude0 performs a merge with any union data inside the MicrosoftGraphOutlookGeoCoordinates_Latitude, using the provided MicrosoftGraphOutlookGeoCoordinatesLatitude0
func (t *MicrosoftGraphOutlookGeoCoordinates_Latitude) MergeMicrosoftGraphOutlookGeoCoordinatesLatitude0(v MicrosoftGraphOutlookGeoCoordinatesLatitude0) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsMicrosoftGraphOutlookGeoCoordinatesLatitude1 returns the union data inside the MicrosoftGraphOutlookGeoCoordinates_Latitude as a MicrosoftGraphOutlookGeoCoordinatesLatitude1
func (t MicrosoftGraphOutlookGeoCoordinates_Latitude) AsMicrosoftGraphOutlookGeoCoordinatesLatitude1() (MicrosoftGraphOutlookGeoCoordinatesLatitude1, error) {
	var body MicrosoftGraphOutlookGeoCoordinatesLatitude1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphOutlookGeoCoordinatesLatitude1 overwrites any union data inside the MicrosoftGraphOutlookGeoCoordinates_Latitude as the provided MicrosoftGraphOutlookGeoCoordinatesLatitude1
func (t *MicrosoftGraphOutlookGeoCoordinates_Latitude) FromMicrosoftGraphOutlookGeoCoordinatesLatitude1(v MicrosoftGraphOutlookGeoCoordinatesLatitude1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphOutlookGeoCoordinatesLatitude1 performs a merge with any union data inside the MicrosoftGraphOutlookGeoCoordinates_Latitude, using the provided MicrosoftGraphOutlookGeoCoordinatesLatitude1
func (t *MicrosoftGraphOutlookGeoCoordinates_Latitude) MergeMicrosoftGraphOutlookGeoCoordinatesLatitude1(v MicrosoftGraphOutlookGeoCoordinatesLatitude1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsReferenceNumeric returns the union data inside the MicrosoftGraphOutlookGeoCoordinates_Latitude as a ReferenceNumeric
func (t MicrosoftGraphOutlookGeoCoordinates_Latitude) AsReferenceNumeric() (ReferenceNumeric, error) {
	var body ReferenceNumeric
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromReferenceNumeric overwrites any union data inside the MicrosoftGraphOutlookGeoCoordinates_Latitude as the provided ReferenceNumeric
func (t *MicrosoftGraphOutlookGeoCoordinates_Latitude) FromReferenceNumeric(v ReferenceNumeric) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeReferenceNumeric performs a merge with any union data inside the MicrosoftGraphOutlookGeoCoordinates_Latitude, using the provided ReferenceNumeric
func (t *MicrosoftGraphOutlookGeoCoordinates_Latitude) MergeReferenceNumeric(v ReferenceNumeric) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

func (t MicrosoftGraphOutlookGeoCoordinates_Latitude) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *MicrosoftGraphOutlookGeoCoordinates_Latitude) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsMicrosoftGraphOutlookGeoCoordinatesLongitude0 returns the union data inside the MicrosoftGraphOutlookGeoCoordinates_Longitude as a MicrosoftGraphOutlookGeoCoordinatesLongitude0
func (t MicrosoftGraphOutlookGeoCoordinates_Longitude) AsMicrosoftGraphOutlookGeoCoordinatesLongitude0() (MicrosoftGraphOutlookGeoCoordinatesLongitude0, error) {
	var body MicrosoftGraphOutlookGeoCoordinatesLongitude0
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphOutlookGeoCoordinatesLongitude0 overwrites any union data inside the MicrosoftGraphOutlookGeoCoordinates_Longitude as the provided MicrosoftGraphOutlookGeoCoordinatesLongitude0
func (t *MicrosoftGraphOutlookGeoCoordinates_Longitude) FromMicrosoftGraphOutlookGeoCoordinatesLongitude0(v MicrosoftGraphOutlookGeoCoordinatesLongitude0) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphOutlookGeoCoordinatesLongitude0 performs a merge with any union data inside the MicrosoftGraphOutlookGeoCoordinates_Longitude, using the provided MicrosoftGraphOutlookGeoCoordinatesLongitude0
func (t *MicrosoftGraphOutlookGeoCoordinates_Longitude) MergeMicrosoftGraphOutlookGeoCoordinatesLongitude0(v MicrosoftGraphOutlookGeoCoordinatesLongitude0) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsMicrosoftGraphOutlookGeoCoordinatesLongitude1 returns the union data inside the MicrosoftGraphOutlookGeoCoordinates_Longitude as a MicrosoftGraphOutlookGeoCoordinatesLongitude1
func (t MicrosoftGraphOutlookGeoCoordinates_Longitude) AsMicrosoftGraphOutlookGeoCoordinatesLongitude1() (MicrosoftGraphOutlookGeoCoordinatesLongitude1, error) {
	var body MicrosoftGraphOutlookGeoCoordinatesLongitude1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphOutlookGeoCoordinatesLongitude1 overwrites any union data inside the MicrosoftGraphOutlookGeoCoordinates_Longitude as the provided MicrosoftGraphOutlookGeoCoordinatesLongitude1
func (t *MicrosoftGraphOutlookGeoCoordinates_Longitude) FromMicrosoftGraphOutlookGeoCoordinatesLongitude1(v MicrosoftGraphOutlookGeoCoordinatesLongitude1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphOutlookGeoCoordinatesLongitude1 performs a merge with any union data inside the MicrosoftGraphOutlookGeoCoordinates_Longitude, using the provided MicrosoftGraphOutlookGeoCoordinatesLongitude1
func (t *MicrosoftGraphOutlookGeoCoordinates_Longitude) MergeMicrosoftGraphOutlookGeoCoordinatesLongitude1(v MicrosoftGraphOutlookGeoCoordinatesLongitude1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsReferenceNumeric returns the union data inside the MicrosoftGraphOutlookGeoCoordinates_Longitude as a ReferenceNumeric
func (t MicrosoftGraphOutlookGeoCoordinates_Longitude) AsReferenceNumeric() (ReferenceNumeric, error) {
	var body ReferenceNumeric
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromReferenceNumeric overwrites any union data inside the MicrosoftGraphOutlookGeoCoordinates_Longitude as the provided ReferenceNumeric
func (t *MicrosoftGraphOutlookGeoCoordinates_Longitude) FromReferenceNumeric(v ReferenceNumeric) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeReferenceNumeric performs a merge with any union data inside the MicrosoftGraphOutlookGeoCoordinates_Longitude, using the provided ReferenceNumeric
func (t *MicrosoftGraphOutlookGeoCoordinates_Longitude) MergeReferenceNumeric(v ReferenceNumeric) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

func (t MicrosoftGraphOutlookGeoCoordinates_Longitude) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *MicrosoftGraphOutlookGeoCoordinates_Longitude) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsMicrosoftGraphExternalLink returns the union data inside the MicrosoftGraphPageLinks_OneNoteClientUrl as a MicrosoftGraphExternalLink
func (t MicrosoftGraphPageLinks_OneNoteClientUrl) AsMicrosoftGraphExternalLink() (MicrosoftGraphExternalLink, error) {
	var body MicrosoftGraphExternalLink
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphExternalLink overwrites any union data inside the MicrosoftGraphPageLinks_OneNoteClientUrl as the provided MicrosoftGraphExternalLink
func (t *MicrosoftGraphPageLinks_OneNoteClientUrl) FromMicrosoftGraphExternalLink(v MicrosoftGraphExternalLink) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphExternalLink performs a merge with any union data inside the MicrosoftGraphPageLinks_OneNoteClientUrl, using the provided MicrosoftGraphExternalLink
func (t *MicrosoftGraphPageLinks_OneNoteClientUrl) MergeMicrosoftGraphExternalLink(v MicrosoftGraphExternalLink) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsMicrosoftGraphPageLinksOneNoteClientUrl1 returns the union data inside the MicrosoftGraphPageLinks_OneNoteClientUrl as a MicrosoftGraphPageLinksOneNoteClientUrl1
func (t MicrosoftGraphPageLinks_OneNoteClientUrl) AsMicrosoftGraphPageLinksOneNoteClientUrl1() (MicrosoftGraphPageLinksOneNoteClientUrl1, error) {
	var body MicrosoftGraphPageLinksOneNoteClientUrl1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphPageLinksOneNoteClientUrl1 overwrites any union data inside the MicrosoftGraphPageLinks_OneNoteClientUrl as the provided MicrosoftGraphPageLinksOneNoteClientUrl1
func (t *MicrosoftGraphPageLinks_OneNoteClientUrl) FromMicrosoftGraphPageLinksOneNoteClientUrl1(v MicrosoftGraphPageLinksOneNoteClientUrl1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphPageLinksOneNoteClientUrl1 performs a merge with any union data inside the MicrosoftGraphPageLinks_OneNoteClientUrl, using the provided MicrosoftGraphPageLinksOneNoteClientUrl1
func (t *MicrosoftGraphPageLinks_OneNoteClientUrl) MergeMicrosoftGraphPageLinksOneNoteClientUrl1(v MicrosoftGraphPageLinksOneNoteClientUrl1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

func (t MicrosoftGraphPageLinks_OneNoteClientUrl) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *MicrosoftGraphPageLinks_OneNoteClientUrl) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsMicrosoftGraphExternalLink returns the union data inside the MicrosoftGraphPageLinks_OneNoteWebUrl as a MicrosoftGraphExternalLink
func (t MicrosoftGraphPageLinks_OneNoteWebUrl) AsMicrosoftGraphExternalLink() (MicrosoftGraphExternalLink, error) {
	var body MicrosoftGraphExternalLink
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphExternalLink overwrites any union data inside the MicrosoftGraphPageLinks_OneNoteWebUrl as the provided MicrosoftGraphExternalLink
func (t *MicrosoftGraphPageLinks_OneNoteWebUrl) FromMicrosoftGraphExternalLink(v MicrosoftGraphExternalLink) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphExternalLink performs a merge with any union data inside the MicrosoftGraphPageLinks_OneNoteWebUrl, using the provided MicrosoftGraphExternalLink
func (t *MicrosoftGraphPageLinks_OneNoteWebUrl) MergeMicrosoftGraphExternalLink(v MicrosoftGraphExternalLink) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsMicrosoftGraphPageLinksOneNoteWebUrl1 returns the union data inside the MicrosoftGraphPageLinks_OneNoteWebUrl as a MicrosoftGraphPageLinksOneNoteWebUrl1
func (t MicrosoftGraphPageLinks_OneNoteWebUrl) AsMicrosoftGraphPageLinksOneNoteWebUrl1() (MicrosoftGraphPageLinksOneNoteWebUrl1, error) {
	var body MicrosoftGraphPageLinksOneNoteWebUrl1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphPageLinksOneNoteWebUrl1 overwrites any union data inside the MicrosoftGraphPageLinks_OneNoteWebUrl as the provided MicrosoftGraphPageLinksOneNoteWebUrl1
func (t *MicrosoftGraphPageLinks_OneNoteWebUrl) FromMicrosoftGraphPageLinksOneNoteWebUrl1(v MicrosoftGraphPageLinksOneNoteWebUrl1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphPageLinksOneNoteWebUrl1 performs a merge with any union data inside the MicrosoftGraphPageLinks_OneNoteWebUrl, using the provided MicrosoftGraphPageLinksOneNoteWebUrl1
func (t *MicrosoftGraphPageLinks_OneNoteWebUrl) MergeMicrosoftGraphPageLinksOneNoteWebUrl1(v MicrosoftGraphPageLinksOneNoteWebUrl1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

func (t MicrosoftGraphPageLinks_OneNoteWebUrl) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *MicrosoftGraphPageLinks_OneNoteWebUrl) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsMicrosoftGraphRecurrencePattern returns the union data inside the MicrosoftGraphPatternedRecurrence_Pattern as a MicrosoftGraphRecurrencePattern
func (t MicrosoftGraphPatternedRecurrence_Pattern) AsMicrosoftGraphRecurrencePattern() (MicrosoftGraphRecurrencePattern, error) {
	var body MicrosoftGraphRecurrencePattern
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphRecurrencePattern overwrites any union data inside the MicrosoftGraphPatternedRecurrence_Pattern as the provided MicrosoftGraphRecurrencePattern
func (t *MicrosoftGraphPatternedRecurrence_Pattern) FromMicrosoftGraphRecurrencePattern(v MicrosoftGraphRecurrencePattern) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphRecurrencePattern performs a merge with any union data inside the MicrosoftGraphPatternedRecurrence_Pattern, using the provided MicrosoftGraphRecurrencePattern
func (t *MicrosoftGraphPatternedRecurrence_Pattern) MergeMicrosoftGraphRecurrencePattern(v MicrosoftGraphRecurrencePattern) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsMicrosoftGraphPatternedRecurrencePattern1 returns the union data inside the MicrosoftGraphPatternedRecurrence_Pattern as a MicrosoftGraphPatternedRecurrencePattern1
func (t MicrosoftGraphPatternedRecurrence_Pattern) AsMicrosoftGraphPatternedRecurrencePattern1() (MicrosoftGraphPatternedRecurrencePattern1, error) {
	var body MicrosoftGraphPatternedRecurrencePattern1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphPatternedRecurrencePattern1 overwrites any union data inside the MicrosoftGraphPatternedRecurrence_Pattern as the provided MicrosoftGraphPatternedRecurrencePattern1
func (t *MicrosoftGraphPatternedRecurrence_Pattern) FromMicrosoftGraphPatternedRecurrencePattern1(v MicrosoftGraphPatternedRecurrencePattern1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphPatternedRecurrencePattern1 performs a merge with any union data inside the MicrosoftGraphPatternedRecurrence_Pattern, using the provided MicrosoftGraphPatternedRecurrencePattern1
func (t *MicrosoftGraphPatternedRecurrence_Pattern) MergeMicrosoftGraphPatternedRecurrencePattern1(v MicrosoftGraphPatternedRecurrencePattern1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

func (t MicrosoftGraphPatternedRecurrence_Pattern) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *MicrosoftGraphPatternedRecurrence_Pattern) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsMicrosoftGraphRecurrenceRange returns the union data inside the MicrosoftGraphPatternedRecurrence_Range as a MicrosoftGraphRecurrenceRange
func (t MicrosoftGraphPatternedRecurrence_Range) AsMicrosoftGraphRecurrenceRange() (MicrosoftGraphRecurrenceRange, error) {
	var body MicrosoftGraphRecurrenceRange
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphRecurrenceRange overwrites any union data inside the MicrosoftGraphPatternedRecurrence_Range as the provided MicrosoftGraphRecurrenceRange
func (t *MicrosoftGraphPatternedRecurrence_Range) FromMicrosoftGraphRecurrenceRange(v MicrosoftGraphRecurrenceRange) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphRecurrenceRange performs a merge with any union data inside the MicrosoftGraphPatternedRecurrence_Range, using the provided MicrosoftGraphRecurrenceRange
func (t *MicrosoftGraphPatternedRecurrence_Range) MergeMicrosoftGraphRecurrenceRange(v MicrosoftGraphRecurrenceRange) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsMicrosoftGraphPatternedRecurrenceRange1 returns the union data inside the MicrosoftGraphPatternedRecurrence_Range as a MicrosoftGraphPatternedRecurrenceRange1
func (t MicrosoftGraphPatternedRecurrence_Range) AsMicrosoftGraphPatternedRecurrenceRange1() (MicrosoftGraphPatternedRecurrenceRange1, error) {
	var body MicrosoftGraphPatternedRecurrenceRange1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphPatternedRecurrenceRange1 overwrites any union data inside the MicrosoftGraphPatternedRecurrence_Range as the provided MicrosoftGraphPatternedRecurrenceRange1
func (t *MicrosoftGraphPatternedRecurrence_Range) FromMicrosoftGraphPatternedRecurrenceRange1(v MicrosoftGraphPatternedRecurrenceRange1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphPatternedRecurrenceRange1 performs a merge with any union data inside the MicrosoftGraphPatternedRecurrence_Range, using the provided MicrosoftGraphPatternedRecurrenceRange1
func (t *MicrosoftGraphPatternedRecurrence_Range) MergeMicrosoftGraphPatternedRecurrenceRange1(v MicrosoftGraphPatternedRecurrenceRange1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

func (t MicrosoftGraphPatternedRecurrence_Range) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *MicrosoftGraphPatternedRecurrence_Range) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsMicrosoftGraphPendingContentUpdate returns the union data inside the MicrosoftGraphPendingOperations_PendingContentUpdate as a MicrosoftGraphPendingContentUpdate
func (t MicrosoftGraphPendingOperations_PendingContentUpdate) AsMicrosoftGraphPendingContentUpdate() (MicrosoftGraphPendingContentUpdate, error) {
	var body MicrosoftGraphPendingContentUpdate
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphPendingContentUpdate overwrites any union data inside the MicrosoftGraphPendingOperations_PendingContentUpdate as the provided MicrosoftGraphPendingContentUpdate
func (t *MicrosoftGraphPendingOperations_PendingContentUpdate) FromMicrosoftGraphPendingContentUpdate(v MicrosoftGraphPendingContentUpdate) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphPendingContentUpdate performs a merge with any union data inside the MicrosoftGraphPendingOperations_PendingContentUpdate, using the provided MicrosoftGraphPendingContentUpdate
func (t *MicrosoftGraphPendingOperations_PendingContentUpdate) MergeMicrosoftGraphPendingContentUpdate(v MicrosoftGraphPendingContentUpdate) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsMicrosoftGraphPendingOperationsPendingContentUpdate1 returns the union data inside the MicrosoftGraphPendingOperations_PendingContentUpdate as a MicrosoftGraphPendingOperationsPendingContentUpdate1
func (t MicrosoftGraphPendingOperations_PendingContentUpdate) AsMicrosoftGraphPendingOperationsPendingContentUpdate1() (MicrosoftGraphPendingOperationsPendingContentUpdate1, error) {
	var body MicrosoftGraphPendingOperationsPendingContentUpdate1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphPendingOperationsPendingContentUpdate1 overwrites any union data inside the MicrosoftGraphPendingOperations_PendingContentUpdate as the provided MicrosoftGraphPendingOperationsPendingContentUpdate1
func (t *MicrosoftGraphPendingOperations_PendingContentUpdate) FromMicrosoftGraphPendingOperationsPendingContentUpdate1(v MicrosoftGraphPendingOperationsPendingContentUpdate1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphPendingOperationsPendingContentUpdate1 performs a merge with any union data inside the MicrosoftGraphPendingOperations_PendingContentUpdate, using the provided MicrosoftGraphPendingOperationsPendingContentUpdate1
func (t *MicrosoftGraphPendingOperations_PendingContentUpdate) MergeMicrosoftGraphPendingOperationsPendingContentUpdate1(v MicrosoftGraphPendingOperationsPendingContentUpdate1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

func (t MicrosoftGraphPendingOperations_PendingContentUpdate) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *MicrosoftGraphPendingOperations_PendingContentUpdate) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsMicrosoftGraphIdentitySet returns the union data inside the MicrosoftGraphPermission_GrantedTo as a MicrosoftGraphIdentitySet
func (t MicrosoftGraphPermission_GrantedTo) AsMicrosoftGraphIdentitySet() (MicrosoftGraphIdentitySet, error) {
	var body MicrosoftGraphIdentitySet
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphIdentitySet overwrites any union data inside the MicrosoftGraphPermission_GrantedTo as the provided MicrosoftGraphIdentitySet
func (t *MicrosoftGraphPermission_GrantedTo) FromMicrosoftGraphIdentitySet(v MicrosoftGraphIdentitySet) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphIdentitySet performs a merge with any union data inside the MicrosoftGraphPermission_GrantedTo, using the provided MicrosoftGraphIdentitySet
func (t *MicrosoftGraphPermission_GrantedTo) MergeMicrosoftGraphIdentitySet(v MicrosoftGraphIdentitySet) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsMicrosoftGraphPermissionGrantedTo1 returns the union data inside the MicrosoftGraphPermission_GrantedTo as a MicrosoftGraphPermissionGrantedTo1
func (t MicrosoftGraphPermission_GrantedTo) AsMicrosoftGraphPermissionGrantedTo1() (MicrosoftGraphPermissionGrantedTo1, error) {
	var body MicrosoftGraphPermissionGrantedTo1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphPermissionGrantedTo1 overwrites any union data inside the MicrosoftGraphPermission_GrantedTo as the provided MicrosoftGraphPermissionGrantedTo1
func (t *MicrosoftGraphPermission_GrantedTo) FromMicrosoftGraphPermissionGrantedTo1(v MicrosoftGraphPermissionGrantedTo1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphPermissionGrantedTo1 performs a merge with any union data inside the MicrosoftGraphPermission_GrantedTo, using the provided MicrosoftGraphPermissionGrantedTo1
func (t *MicrosoftGraphPermission_GrantedTo) MergeMicrosoftGraphPermissionGrantedTo1(v MicrosoftGraphPermissionGrantedTo1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

func (t MicrosoftGraphPermission_GrantedTo) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *MicrosoftGraphPermission_GrantedTo) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsMicrosoftGraphIdentitySet returns the union data inside the MicrosoftGraphPermission_GrantedToIdentities_Item as a MicrosoftGraphIdentitySet
func (t MicrosoftGraphPermission_GrantedToIdentities_Item) AsMicrosoftGraphIdentitySet() (MicrosoftGraphIdentitySet, error) {
	var body MicrosoftGraphIdentitySet
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphIdentitySet overwrites any union data inside the MicrosoftGraphPermission_GrantedToIdentities_Item as the provided MicrosoftGraphIdentitySet
func (t *MicrosoftGraphPermission_GrantedToIdentities_Item) FromMicrosoftGraphIdentitySet(v MicrosoftGraphIdentitySet) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphIdentitySet performs a merge with any union data inside the MicrosoftGraphPermission_GrantedToIdentities_Item, using the provided MicrosoftGraphIdentitySet
func (t *MicrosoftGraphPermission_GrantedToIdentities_Item) MergeMicrosoftGraphIdentitySet(v MicrosoftGraphIdentitySet) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsMicrosoftGraphPermissionGrantedToIdentities1 returns the union data inside the MicrosoftGraphPermission_GrantedToIdentities_Item as a MicrosoftGraphPermissionGrantedToIdentities1
func (t MicrosoftGraphPermission_GrantedToIdentities_Item) AsMicrosoftGraphPermissionGrantedToIdentities1() (MicrosoftGraphPermissionGrantedToIdentities1, error) {
	var body MicrosoftGraphPermissionGrantedToIdentities1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphPermissionGrantedToIdentities1 overwrites any union data inside the MicrosoftGraphPermission_GrantedToIdentities_Item as the provided MicrosoftGraphPermissionGrantedToIdentities1
func (t *MicrosoftGraphPermission_GrantedToIdentities_Item) FromMicrosoftGraphPermissionGrantedToIdentities1(v MicrosoftGraphPermissionGrantedToIdentities1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphPermissionGrantedToIdentities1 performs a merge with any union data inside the MicrosoftGraphPermission_GrantedToIdentities_Item, using the provided MicrosoftGraphPermissionGrantedToIdentities1
func (t *MicrosoftGraphPermission_GrantedToIdentities_Item) MergeMicrosoftGraphPermissionGrantedToIdentities1(v MicrosoftGraphPermissionGrantedToIdentities1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

func (t MicrosoftGraphPermission_GrantedToIdentities_Item) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *MicrosoftGraphPermission_GrantedToIdentities_Item) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsMicrosoftGraphSharePointIdentitySet returns the union data inside the MicrosoftGraphPermission_GrantedToIdentitiesV2_Item as a MicrosoftGraphSharePointIdentitySet
func (t MicrosoftGraphPermission_GrantedToIdentitiesV2_Item) AsMicrosoftGraphSharePointIdentitySet() (MicrosoftGraphSharePointIdentitySet, error) {
	var body MicrosoftGraphSharePointIdentitySet
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphSharePointIdentitySet overwrites any union data inside the MicrosoftGraphPermission_GrantedToIdentitiesV2_Item as the provided MicrosoftGraphSharePointIdentitySet
func (t *MicrosoftGraphPermission_GrantedToIdentitiesV2_Item) FromMicrosoftGraphSharePointIdentitySet(v MicrosoftGraphSharePointIdentitySet) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphSharePointIdentitySet performs a merge with any union data inside the MicrosoftGraphPermission_GrantedToIdentitiesV2_Item, using the provided MicrosoftGraphSharePointIdentitySet
func (t *MicrosoftGraphPermission_GrantedToIdentitiesV2_Item) MergeMicrosoftGraphSharePointIdentitySet(v MicrosoftGraphSharePointIdentitySet) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsMicrosoftGraphPermissionGrantedToIdentitiesV21 returns the union data inside the MicrosoftGraphPermission_GrantedToIdentitiesV2_Item as a MicrosoftGraphPermissionGrantedToIdentitiesV21
func (t MicrosoftGraphPermission_GrantedToIdentitiesV2_Item) AsMicrosoftGraphPermissionGrantedToIdentitiesV21() (MicrosoftGraphPermissionGrantedToIdentitiesV21, error) {
	var body MicrosoftGraphPermissionGrantedToIdentitiesV21
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphPermissionGrantedToIdentitiesV21 overwrites any union data inside the MicrosoftGraphPermission_GrantedToIdentitiesV2_Item as the provided MicrosoftGraphPermissionGrantedToIdentitiesV21
func (t *MicrosoftGraphPermission_GrantedToIdentitiesV2_Item) FromMicrosoftGraphPermissionGrantedToIdentitiesV21(v MicrosoftGraphPermissionGrantedToIdentitiesV21) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphPermissionGrantedToIdentitiesV21 performs a merge with any union data inside the MicrosoftGraphPermission_GrantedToIdentitiesV2_Item, using the provided MicrosoftGraphPermissionGrantedToIdentitiesV21
func (t *MicrosoftGraphPermission_GrantedToIdentitiesV2_Item) MergeMicrosoftGraphPermissionGrantedToIdentitiesV21(v MicrosoftGraphPermissionGrantedToIdentitiesV21) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

func (t MicrosoftGraphPermission_GrantedToIdentitiesV2_Item) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *MicrosoftGraphPermission_GrantedToIdentitiesV2_Item) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsMicrosoftGraphSharePointIdentitySet returns the union data inside the MicrosoftGraphPermission_GrantedToV2 as a MicrosoftGraphSharePointIdentitySet
func (t MicrosoftGraphPermission_GrantedToV2) AsMicrosoftGraphSharePointIdentitySet() (MicrosoftGraphSharePointIdentitySet, error) {
	var body MicrosoftGraphSharePointIdentitySet
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphSharePointIdentitySet overwrites any union data inside the MicrosoftGraphPermission_GrantedToV2 as the provided MicrosoftGraphSharePointIdentitySet
func (t *MicrosoftGraphPermission_GrantedToV2) FromMicrosoftGraphSharePointIdentitySet(v MicrosoftGraphSharePointIdentitySet) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphSharePointIdentitySet performs a merge with any union data inside the MicrosoftGraphPermission_GrantedToV2, using the provided MicrosoftGraphSharePointIdentitySet
func (t *MicrosoftGraphPermission_GrantedToV2) MergeMicrosoftGraphSharePointIdentitySet(v MicrosoftGraphSharePointIdentitySet) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsMicrosoftGraphPermissionGrantedToV21 returns the union data inside the MicrosoftGraphPermission_GrantedToV2 as a MicrosoftGraphPermissionGrantedToV21
func (t MicrosoftGraphPermission_GrantedToV2) AsMicrosoftGraphPermissionGrantedToV21() (MicrosoftGraphPermissionGrantedToV21, error) {
	var body MicrosoftGraphPermissionGrantedToV21
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphPermissionGrantedToV21 overwrites any union data inside the MicrosoftGraphPermission_GrantedToV2 as the provided MicrosoftGraphPermissionGrantedToV21
func (t *MicrosoftGraphPermission_GrantedToV2) FromMicrosoftGraphPermissionGrantedToV21(v MicrosoftGraphPermissionGrantedToV21) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphPermissionGrantedToV21 performs a merge with any union data inside the MicrosoftGraphPermission_GrantedToV2, using the provided MicrosoftGraphPermissionGrantedToV21
func (t *MicrosoftGraphPermission_GrantedToV2) MergeMicrosoftGraphPermissionGrantedToV21(v MicrosoftGraphPermissionGrantedToV21) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

func (t MicrosoftGraphPermission_GrantedToV2) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *MicrosoftGraphPermission_GrantedToV2) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsMicrosoftGraphItemReference returns the union data inside the MicrosoftGraphPermission_InheritedFrom as a MicrosoftGraphItemReference
func (t MicrosoftGraphPermission_InheritedFrom) AsMicrosoftGraphItemReference() (MicrosoftGraphItemReference, error) {
	var body MicrosoftGraphItemReference
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphItemReference overwrites any union data inside the MicrosoftGraphPermission_InheritedFrom as the provided MicrosoftGraphItemReference
func (t *MicrosoftGraphPermission_InheritedFrom) FromMicrosoftGraphItemReference(v MicrosoftGraphItemReference) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphItemReference performs a merge with any union data inside the MicrosoftGraphPermission_InheritedFrom, using the provided MicrosoftGraphItemReference
func (t *MicrosoftGraphPermission_InheritedFrom) MergeMicrosoftGraphItemReference(v MicrosoftGraphItemReference) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsMicrosoftGraphPermissionInheritedFrom1 returns the union data inside the MicrosoftGraphPermission_InheritedFrom as a MicrosoftGraphPermissionInheritedFrom1
func (t MicrosoftGraphPermission_InheritedFrom) AsMicrosoftGraphPermissionInheritedFrom1() (MicrosoftGraphPermissionInheritedFrom1, error) {
	var body MicrosoftGraphPermissionInheritedFrom1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphPermissionInheritedFrom1 overwrites any union data inside the MicrosoftGraphPermission_InheritedFrom as the provided MicrosoftGraphPermissionInheritedFrom1
func (t *MicrosoftGraphPermission_InheritedFrom) FromMicrosoftGraphPermissionInheritedFrom1(v MicrosoftGraphPermissionInheritedFrom1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphPermissionInheritedFrom1 performs a merge with any union data inside the MicrosoftGraphPermission_InheritedFrom, using the provided MicrosoftGraphPermissionInheritedFrom1
func (t *MicrosoftGraphPermission_InheritedFrom) MergeMicrosoftGraphPermissionInheritedFrom1(v MicrosoftGraphPermissionInheritedFrom1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

func (t MicrosoftGraphPermission_InheritedFrom) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *MicrosoftGraphPermission_InheritedFrom) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsMicrosoftGraphSharingInvitation returns the union data inside the MicrosoftGraphPermission_Invitation as a MicrosoftGraphSharingInvitation
func (t MicrosoftGraphPermission_Invitation) AsMicrosoftGraphSharingInvitation() (MicrosoftGraphSharingInvitation, error) {
	var body MicrosoftGraphSharingInvitation
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphSharingInvitation overwrites any union data inside the MicrosoftGraphPermission_Invitation as the provided MicrosoftGraphSharingInvitation
func (t *MicrosoftGraphPermission_Invitation) FromMicrosoftGraphSharingInvitation(v MicrosoftGraphSharingInvitation) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphSharingInvitation performs a merge with any union data inside the MicrosoftGraphPermission_Invitation, using the provided MicrosoftGraphSharingInvitation
func (t *MicrosoftGraphPermission_Invitation) MergeMicrosoftGraphSharingInvitation(v MicrosoftGraphSharingInvitation) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsMicrosoftGraphPermissionInvitation1 returns the union data inside the MicrosoftGraphPermission_Invitation as a MicrosoftGraphPermissionInvitation1
func (t MicrosoftGraphPermission_Invitation) AsMicrosoftGraphPermissionInvitation1() (MicrosoftGraphPermissionInvitation1, error) {
	var body MicrosoftGraphPermissionInvitation1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphPermissionInvitation1 overwrites any union data inside the MicrosoftGraphPermission_Invitation as the provided MicrosoftGraphPermissionInvitation1
func (t *MicrosoftGraphPermission_Invitation) FromMicrosoftGraphPermissionInvitation1(v MicrosoftGraphPermissionInvitation1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphPermissionInvitation1 performs a merge with any union data inside the MicrosoftGraphPermission_Invitation, using the provided MicrosoftGraphPermissionInvitation1
func (t *MicrosoftGraphPermission_Invitation) MergeMicrosoftGraphPermissionInvitation1(v MicrosoftGraphPermissionInvitation1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

func (t MicrosoftGraphPermission_Invitation) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *MicrosoftGraphPermission_Invitation) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsMicrosoftGraphSharingLink returns the union data inside the MicrosoftGraphPermission_Link as a MicrosoftGraphSharingLink
func (t MicrosoftGraphPermission_Link) AsMicrosoftGraphSharingLink() (MicrosoftGraphSharingLink, error) {
	var body MicrosoftGraphSharingLink
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphSharingLink overwrites any union data inside the MicrosoftGraphPermission_Link as the provided MicrosoftGraphSharingLink
func (t *MicrosoftGraphPermission_Link) FromMicrosoftGraphSharingLink(v MicrosoftGraphSharingLink) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphSharingLink performs a merge with any union data inside the MicrosoftGraphPermission_Link, using the provided MicrosoftGraphSharingLink
func (t *MicrosoftGraphPermission_Link) MergeMicrosoftGraphSharingLink(v MicrosoftGraphSharingLink) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsMicrosoftGraphPermissionLink1 returns the union data inside the MicrosoftGraphPermission_Link as a MicrosoftGraphPermissionLink1
func (t MicrosoftGraphPermission_Link) AsMicrosoftGraphPermissionLink1() (MicrosoftGraphPermissionLink1, error) {
	var body MicrosoftGraphPermissionLink1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphPermissionLink1 overwrites any union data inside the MicrosoftGraphPermission_Link as the provided MicrosoftGraphPermissionLink1
func (t *MicrosoftGraphPermission_Link) FromMicrosoftGraphPermissionLink1(v MicrosoftGraphPermissionLink1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphPermissionLink1 performs a merge with any union data inside the MicrosoftGraphPermission_Link, using the provided MicrosoftGraphPermissionLink1
func (t *MicrosoftGraphPermission_Link) MergeMicrosoftGraphPermissionLink1(v MicrosoftGraphPermissionLink1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

func (t MicrosoftGraphPermission_Link) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *MicrosoftGraphPermission_Link) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsMicrosoftGraphPersonType returns the union data inside the MicrosoftGraphPerson_PersonType as a MicrosoftGraphPersonType
func (t MicrosoftGraphPerson_PersonType) AsMicrosoftGraphPersonType() (MicrosoftGraphPersonType, error) {
	var body MicrosoftGraphPersonType
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphPersonType overwrites any union data inside the MicrosoftGraphPerson_PersonType as the provided MicrosoftGraphPersonType
func (t *MicrosoftGraphPerson_PersonType) FromMicrosoftGraphPersonType(v MicrosoftGraphPersonType) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphPersonType performs a merge with any union data inside the MicrosoftGraphPerson_PersonType, using the provided MicrosoftGraphPersonType
func (t *MicrosoftGraphPerson_PersonType) MergeMicrosoftGraphPersonType(v MicrosoftGraphPersonType) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsMicrosoftGraphPersonPersonType1 returns the union data inside the MicrosoftGraphPerson_PersonType as a MicrosoftGraphPersonPersonType1
func (t MicrosoftGraphPerson_PersonType) AsMicrosoftGraphPersonPersonType1() (MicrosoftGraphPersonPersonType1, error) {
	var body MicrosoftGraphPersonPersonType1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphPersonPersonType1 overwrites any union data inside the MicrosoftGraphPerson_PersonType as the provided MicrosoftGraphPersonPersonType1
func (t *MicrosoftGraphPerson_PersonType) FromMicrosoftGraphPersonPersonType1(v MicrosoftGraphPersonPersonType1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphPersonPersonType1 performs a merge with any union data inside the MicrosoftGraphPerson_PersonType, using the provided MicrosoftGraphPersonPersonType1
func (t *MicrosoftGraphPerson_PersonType) MergeMicrosoftGraphPersonPersonType1(v MicrosoftGraphPersonPersonType1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

func (t MicrosoftGraphPerson_PersonType) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *MicrosoftGraphPerson_PersonType) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsMicrosoftGraphPhone returns the union data inside the MicrosoftGraphPerson_Phones_Item as a MicrosoftGraphPhone
func (t MicrosoftGraphPerson_Phones_Item) AsMicrosoftGraphPhone() (MicrosoftGraphPhone, error) {
	var body MicrosoftGraphPhone
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphPhone overwrites any union data inside the MicrosoftGraphPerson_Phones_Item as the provided MicrosoftGraphPhone
func (t *MicrosoftGraphPerson_Phones_Item) FromMicrosoftGraphPhone(v MicrosoftGraphPhone) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphPhone performs a merge with any union data inside the MicrosoftGraphPerson_Phones_Item, using the provided MicrosoftGraphPhone
func (t *MicrosoftGraphPerson_Phones_Item) MergeMicrosoftGraphPhone(v MicrosoftGraphPhone) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsMicrosoftGraphPersonPhones1 returns the union data inside the MicrosoftGraphPerson_Phones_Item as a MicrosoftGraphPersonPhones1
func (t MicrosoftGraphPerson_Phones_Item) AsMicrosoftGraphPersonPhones1() (MicrosoftGraphPersonPhones1, error) {
	var body MicrosoftGraphPersonPhones1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphPersonPhones1 overwrites any union data inside the MicrosoftGraphPerson_Phones_Item as the provided MicrosoftGraphPersonPhones1
func (t *MicrosoftGraphPerson_Phones_Item) FromMicrosoftGraphPersonPhones1(v MicrosoftGraphPersonPhones1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphPersonPhones1 performs a merge with any union data inside the MicrosoftGraphPerson_Phones_Item, using the provided MicrosoftGraphPersonPhones1
func (t *MicrosoftGraphPerson_Phones_Item) MergeMicrosoftGraphPersonPhones1(v MicrosoftGraphPersonPhones1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

func (t MicrosoftGraphPerson_Phones_Item) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *MicrosoftGraphPerson_Phones_Item) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsMicrosoftGraphLocation returns the union data inside the MicrosoftGraphPerson_PostalAddresses_Item as a MicrosoftGraphLocation
func (t MicrosoftGraphPerson_PostalAddresses_Item) AsMicrosoftGraphLocation() (MicrosoftGraphLocation, error) {
	var body MicrosoftGraphLocation
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphLocation overwrites any union data inside the MicrosoftGraphPerson_PostalAddresses_Item as the provided MicrosoftGraphLocation
func (t *MicrosoftGraphPerson_PostalAddresses_Item) FromMicrosoftGraphLocation(v MicrosoftGraphLocation) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphLocation performs a merge with any union data inside the MicrosoftGraphPerson_PostalAddresses_Item, using the provided MicrosoftGraphLocation
func (t *MicrosoftGraphPerson_PostalAddresses_Item) MergeMicrosoftGraphLocation(v MicrosoftGraphLocation) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsMicrosoftGraphPersonPostalAddresses1 returns the union data inside the MicrosoftGraphPerson_PostalAddresses_Item as a MicrosoftGraphPersonPostalAddresses1
func (t MicrosoftGraphPerson_PostalAddresses_Item) AsMicrosoftGraphPersonPostalAddresses1() (MicrosoftGraphPersonPostalAddresses1, error) {
	var body MicrosoftGraphPersonPostalAddresses1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphPersonPostalAddresses1 overwrites any union data inside the MicrosoftGraphPerson_PostalAddresses_Item as the provided MicrosoftGraphPersonPostalAddresses1
func (t *MicrosoftGraphPerson_PostalAddresses_Item) FromMicrosoftGraphPersonPostalAddresses1(v MicrosoftGraphPersonPostalAddresses1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphPersonPostalAddresses1 performs a merge with any union data inside the MicrosoftGraphPerson_PostalAddresses_Item, using the provided MicrosoftGraphPersonPostalAddresses1
func (t *MicrosoftGraphPerson_PostalAddresses_Item) MergeMicrosoftGraphPersonPostalAddresses1(v MicrosoftGraphPersonPostalAddresses1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

func (t MicrosoftGraphPerson_PostalAddresses_Item) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *MicrosoftGraphPerson_PostalAddresses_Item) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsMicrosoftGraphScoredEmailAddress returns the union data inside the MicrosoftGraphPerson_ScoredEmailAddresses_Item as a MicrosoftGraphScoredEmailAddress
func (t MicrosoftGraphPerson_ScoredEmailAddresses_Item) AsMicrosoftGraphScoredEmailAddress() (MicrosoftGraphScoredEmailAddress, error) {
	var body MicrosoftGraphScoredEmailAddress
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphScoredEmailAddress overwrites any union data inside the MicrosoftGraphPerson_ScoredEmailAddresses_Item as the provided MicrosoftGraphScoredEmailAddress
func (t *MicrosoftGraphPerson_ScoredEmailAddresses_Item) FromMicrosoftGraphScoredEmailAddress(v MicrosoftGraphScoredEmailAddress) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphScoredEmailAddress performs a merge with any union data inside the MicrosoftGraphPerson_ScoredEmailAddresses_Item, using the provided MicrosoftGraphScoredEmailAddress
func (t *MicrosoftGraphPerson_ScoredEmailAddresses_Item) MergeMicrosoftGraphScoredEmailAddress(v MicrosoftGraphScoredEmailAddress) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsMicrosoftGraphPersonScoredEmailAddresses1 returns the union data inside the MicrosoftGraphPerson_ScoredEmailAddresses_Item as a MicrosoftGraphPersonScoredEmailAddresses1
func (t MicrosoftGraphPerson_ScoredEmailAddresses_Item) AsMicrosoftGraphPersonScoredEmailAddresses1() (MicrosoftGraphPersonScoredEmailAddresses1, error) {
	var body MicrosoftGraphPersonScoredEmailAddresses1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphPersonScoredEmailAddresses1 overwrites any union data inside the MicrosoftGraphPerson_ScoredEmailAddresses_Item as the provided MicrosoftGraphPersonScoredEmailAddresses1
func (t *MicrosoftGraphPerson_ScoredEmailAddresses_Item) FromMicrosoftGraphPersonScoredEmailAddresses1(v MicrosoftGraphPersonScoredEmailAddresses1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphPersonScoredEmailAddresses1 performs a merge with any union data inside the MicrosoftGraphPerson_ScoredEmailAddresses_Item, using the provided MicrosoftGraphPersonScoredEmailAddresses1
func (t *MicrosoftGraphPerson_ScoredEmailAddresses_Item) MergeMicrosoftGraphPersonScoredEmailAddresses1(v MicrosoftGraphPersonScoredEmailAddresses1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

func (t MicrosoftGraphPerson_ScoredEmailAddresses_Item) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *MicrosoftGraphPerson_ScoredEmailAddresses_Item) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsMicrosoftGraphWebsite returns the union data inside the MicrosoftGraphPerson_Websites_Item as a MicrosoftGraphWebsite
func (t MicrosoftGraphPerson_Websites_Item) AsMicrosoftGraphWebsite() (MicrosoftGraphWebsite, error) {
	var body MicrosoftGraphWebsite
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphWebsite overwrites any union data inside the MicrosoftGraphPerson_Websites_Item as the provided MicrosoftGraphWebsite
func (t *MicrosoftGraphPerson_Websites_Item) FromMicrosoftGraphWebsite(v MicrosoftGraphWebsite) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphWebsite performs a merge with any union data inside the MicrosoftGraphPerson_Websites_Item, using the provided MicrosoftGraphWebsite
func (t *MicrosoftGraphPerson_Websites_Item) MergeMicrosoftGraphWebsite(v MicrosoftGraphWebsite) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsMicrosoftGraphPersonWebsites1 returns the union data inside the MicrosoftGraphPerson_Websites_Item as a MicrosoftGraphPersonWebsites1
func (t MicrosoftGraphPerson_Websites_Item) AsMicrosoftGraphPersonWebsites1() (MicrosoftGraphPersonWebsites1, error) {
	var body MicrosoftGraphPersonWebsites1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphPersonWebsites1 overwrites any union data inside the MicrosoftGraphPerson_Websites_Item as the provided MicrosoftGraphPersonWebsites1
func (t *MicrosoftGraphPerson_Websites_Item) FromMicrosoftGraphPersonWebsites1(v MicrosoftGraphPersonWebsites1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphPersonWebsites1 performs a merge with any union data inside the MicrosoftGraphPerson_Websites_Item, using the provided MicrosoftGraphPersonWebsites1
func (t *MicrosoftGraphPerson_Websites_Item) MergeMicrosoftGraphPersonWebsites1(v MicrosoftGraphPersonWebsites1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

func (t MicrosoftGraphPerson_Websites_Item) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *MicrosoftGraphPerson_Websites_Item) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsMicrosoftGraphPhoneType returns the union data inside the MicrosoftGraphPhone_Type as a MicrosoftGraphPhoneType
func (t MicrosoftGraphPhone_Type) AsMicrosoftGraphPhoneType() (MicrosoftGraphPhoneType, error) {
	var body MicrosoftGraphPhoneType
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphPhoneType overwrites any union data inside the MicrosoftGraphPhone_Type as the provided MicrosoftGraphPhoneType
func (t *MicrosoftGraphPhone_Type) FromMicrosoftGraphPhoneType(v MicrosoftGraphPhoneType) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphPhoneType performs a merge with any union data inside the MicrosoftGraphPhone_Type, using the provided MicrosoftGraphPhoneType
func (t *MicrosoftGraphPhone_Type) MergeMicrosoftGraphPhoneType(v MicrosoftGraphPhoneType) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsMicrosoftGraphPhoneType1 returns the union data inside the MicrosoftGraphPhone_Type as a MicrosoftGraphPhoneType1
func (t MicrosoftGraphPhone_Type) AsMicrosoftGraphPhoneType1() (MicrosoftGraphPhoneType1, error) {
	var body MicrosoftGraphPhoneType1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphPhoneType1 overwrites any union data inside the MicrosoftGraphPhone_Type as the provided MicrosoftGraphPhoneType1
func (t *MicrosoftGraphPhone_Type) FromMicrosoftGraphPhoneType1(v MicrosoftGraphPhoneType1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphPhoneType1 performs a merge with any union data inside the MicrosoftGraphPhone_Type, using the provided MicrosoftGraphPhoneType1
func (t *MicrosoftGraphPhone_Type) MergeMicrosoftGraphPhoneType1(v MicrosoftGraphPhoneType1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

func (t MicrosoftGraphPhone_Type) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *MicrosoftGraphPhone_Type) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsMicrosoftGraphAuthenticationPhoneType returns the union data inside the MicrosoftGraphPhoneAuthenticationMethod_PhoneType as a MicrosoftGraphAuthenticationPhoneType
func (t MicrosoftGraphPhoneAuthenticationMethod_PhoneType) AsMicrosoftGraphAuthenticationPhoneType() (MicrosoftGraphAuthenticationPhoneType, error) {
	var body MicrosoftGraphAuthenticationPhoneType
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphAuthenticationPhoneType overwrites any union data inside the MicrosoftGraphPhoneAuthenticationMethod_PhoneType as the provided MicrosoftGraphAuthenticationPhoneType
func (t *MicrosoftGraphPhoneAuthenticationMethod_PhoneType) FromMicrosoftGraphAuthenticationPhoneType(v MicrosoftGraphAuthenticationPhoneType) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphAuthenticationPhoneType performs a merge with any union data inside the MicrosoftGraphPhoneAuthenticationMethod_PhoneType, using the provided MicrosoftGraphAuthenticationPhoneType
func (t *MicrosoftGraphPhoneAuthenticationMethod_PhoneType) MergeMicrosoftGraphAuthenticationPhoneType(v MicrosoftGraphAuthenticationPhoneType) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsMicrosoftGraphPhoneAuthenticationMethodPhoneType1 returns the union data inside the MicrosoftGraphPhoneAuthenticationMethod_PhoneType as a MicrosoftGraphPhoneAuthenticationMethodPhoneType1
func (t MicrosoftGraphPhoneAuthenticationMethod_PhoneType) AsMicrosoftGraphPhoneAuthenticationMethodPhoneType1() (MicrosoftGraphPhoneAuthenticationMethodPhoneType1, error) {
	var body MicrosoftGraphPhoneAuthenticationMethodPhoneType1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphPhoneAuthenticationMethodPhoneType1 overwrites any union data inside the MicrosoftGraphPhoneAuthenticationMethod_PhoneType as the provided MicrosoftGraphPhoneAuthenticationMethodPhoneType1
func (t *MicrosoftGraphPhoneAuthenticationMethod_PhoneType) FromMicrosoftGraphPhoneAuthenticationMethodPhoneType1(v MicrosoftGraphPhoneAuthenticationMethodPhoneType1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphPhoneAuthenticationMethodPhoneType1 performs a merge with any union data inside the MicrosoftGraphPhoneAuthenticationMethod_PhoneType, using the provided MicrosoftGraphPhoneAuthenticationMethodPhoneType1
func (t *MicrosoftGraphPhoneAuthenticationMethod_PhoneType) MergeMicrosoftGraphPhoneAuthenticationMethodPhoneType1(v MicrosoftGraphPhoneAuthenticationMethodPhoneType1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

func (t MicrosoftGraphPhoneAuthenticationMethod_PhoneType) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *MicrosoftGraphPhoneAuthenticationMethod_PhoneType) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsMicrosoftGraphAuthenticationMethodSignInState returns the union data inside the MicrosoftGraphPhoneAuthenticationMethod_SmsSignInState as a MicrosoftGraphAuthenticationMethodSignInState
func (t MicrosoftGraphPhoneAuthenticationMethod_SmsSignInState) AsMicrosoftGraphAuthenticationMethodSignInState() (MicrosoftGraphAuthenticationMethodSignInState, error) {
	var body MicrosoftGraphAuthenticationMethodSignInState
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphAuthenticationMethodSignInState overwrites any union data inside the MicrosoftGraphPhoneAuthenticationMethod_SmsSignInState as the provided MicrosoftGraphAuthenticationMethodSignInState
func (t *MicrosoftGraphPhoneAuthenticationMethod_SmsSignInState) FromMicrosoftGraphAuthenticationMethodSignInState(v MicrosoftGraphAuthenticationMethodSignInState) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphAuthenticationMethodSignInState performs a merge with any union data inside the MicrosoftGraphPhoneAuthenticationMethod_SmsSignInState, using the provided MicrosoftGraphAuthenticationMethodSignInState
func (t *MicrosoftGraphPhoneAuthenticationMethod_SmsSignInState) MergeMicrosoftGraphAuthenticationMethodSignInState(v MicrosoftGraphAuthenticationMethodSignInState) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsMicrosoftGraphPhoneAuthenticationMethodSmsSignInState1 returns the union data inside the MicrosoftGraphPhoneAuthenticationMethod_SmsSignInState as a MicrosoftGraphPhoneAuthenticationMethodSmsSignInState1
func (t MicrosoftGraphPhoneAuthenticationMethod_SmsSignInState) AsMicrosoftGraphPhoneAuthenticationMethodSmsSignInState1() (MicrosoftGraphPhoneAuthenticationMethodSmsSignInState1, error) {
	var body MicrosoftGraphPhoneAuthenticationMethodSmsSignInState1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphPhoneAuthenticationMethodSmsSignInState1 overwrites any union data inside the MicrosoftGraphPhoneAuthenticationMethod_SmsSignInState as the provided MicrosoftGraphPhoneAuthenticationMethodSmsSignInState1
func (t *MicrosoftGraphPhoneAuthenticationMethod_SmsSignInState) FromMicrosoftGraphPhoneAuthenticationMethodSmsSignInState1(v MicrosoftGraphPhoneAuthenticationMethodSmsSignInState1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphPhoneAuthenticationMethodSmsSignInState1 performs a merge with any union data inside the MicrosoftGraphPhoneAuthenticationMethod_SmsSignInState, using the provided MicrosoftGraphPhoneAuthenticationMethodSmsSignInState1
func (t *MicrosoftGraphPhoneAuthenticationMethod_SmsSignInState) MergeMicrosoftGraphPhoneAuthenticationMethodSmsSignInState1(v MicrosoftGraphPhoneAuthenticationMethodSmsSignInState1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

func (t MicrosoftGraphPhoneAuthenticationMethod_SmsSignInState) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *MicrosoftGraphPhoneAuthenticationMethod_SmsSignInState) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsMicrosoftGraphPhotoExposureDenominator0 returns the union data inside the MicrosoftGraphPhoto_ExposureDenominator as a MicrosoftGraphPhotoExposureDenominator0
func (t MicrosoftGraphPhoto_ExposureDenominator) AsMicrosoftGraphPhotoExposureDenominator0() (MicrosoftGraphPhotoExposureDenominator0, error) {
	var body MicrosoftGraphPhotoExposureDenominator0
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphPhotoExposureDenominator0 overwrites any union data inside the MicrosoftGraphPhoto_ExposureDenominator as the provided MicrosoftGraphPhotoExposureDenominator0
func (t *MicrosoftGraphPhoto_ExposureDenominator) FromMicrosoftGraphPhotoExposureDenominator0(v MicrosoftGraphPhotoExposureDenominator0) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphPhotoExposureDenominator0 performs a merge with any union data inside the MicrosoftGraphPhoto_ExposureDenominator, using the provided MicrosoftGraphPhotoExposureDenominator0
func (t *MicrosoftGraphPhoto_ExposureDenominator) MergeMicrosoftGraphPhotoExposureDenominator0(v MicrosoftGraphPhotoExposureDenominator0) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsMicrosoftGraphPhotoExposureDenominator1 returns the union data inside the MicrosoftGraphPhoto_ExposureDenominator as a MicrosoftGraphPhotoExposureDenominator1
func (t MicrosoftGraphPhoto_ExposureDenominator) AsMicrosoftGraphPhotoExposureDenominator1() (MicrosoftGraphPhotoExposureDenominator1, error) {
	var body MicrosoftGraphPhotoExposureDenominator1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphPhotoExposureDenominator1 overwrites any union data inside the MicrosoftGraphPhoto_ExposureDenominator as the provided MicrosoftGraphPhotoExposureDenominator1
func (t *MicrosoftGraphPhoto_ExposureDenominator) FromMicrosoftGraphPhotoExposureDenominator1(v MicrosoftGraphPhotoExposureDenominator1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphPhotoExposureDenominator1 performs a merge with any union data inside the MicrosoftGraphPhoto_ExposureDenominator, using the provided MicrosoftGraphPhotoExposureDenominator1
func (t *MicrosoftGraphPhoto_ExposureDenominator) MergeMicrosoftGraphPhotoExposureDenominator1(v MicrosoftGraphPhotoExposureDenominator1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsReferenceNumeric returns the union data inside the MicrosoftGraphPhoto_ExposureDenominator as a ReferenceNumeric
func (t MicrosoftGraphPhoto_ExposureDenominator) AsReferenceNumeric() (ReferenceNumeric, error) {
	var body ReferenceNumeric
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromReferenceNumeric overwrites any union data inside the MicrosoftGraphPhoto_ExposureDenominator as the provided ReferenceNumeric
func (t *MicrosoftGraphPhoto_ExposureDenominator) FromReferenceNumeric(v ReferenceNumeric) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeReferenceNumeric performs a merge with any union data inside the MicrosoftGraphPhoto_ExposureDenominator, using the provided ReferenceNumeric
func (t *MicrosoftGraphPhoto_ExposureDenominator) MergeReferenceNumeric(v ReferenceNumeric) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

func (t MicrosoftGraphPhoto_ExposureDenominator) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *MicrosoftGraphPhoto_ExposureDenominator) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsMicrosoftGraphPhotoExposureNumerator0 returns the union data inside the MicrosoftGraphPhoto_ExposureNumerator as a MicrosoftGraphPhotoExposureNumerator0
func (t MicrosoftGraphPhoto_ExposureNumerator) AsMicrosoftGraphPhotoExposureNumerator0() (MicrosoftGraphPhotoExposureNumerator0, error) {
	var body MicrosoftGraphPhotoExposureNumerator0
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphPhotoExposureNumerator0 overwrites any union data inside the MicrosoftGraphPhoto_ExposureNumerator as the provided MicrosoftGraphPhotoExposureNumerator0
func (t *MicrosoftGraphPhoto_ExposureNumerator) FromMicrosoftGraphPhotoExposureNumerator0(v MicrosoftGraphPhotoExposureNumerator0) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphPhotoExposureNumerator0 performs a merge with any union data inside the MicrosoftGraphPhoto_ExposureNumerator, using the provided MicrosoftGraphPhotoExposureNumerator0
func (t *MicrosoftGraphPhoto_ExposureNumerator) MergeMicrosoftGraphPhotoExposureNumerator0(v MicrosoftGraphPhotoExposureNumerator0) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsMicrosoftGraphPhotoExposureNumerator1 returns the union data inside the MicrosoftGraphPhoto_ExposureNumerator as a MicrosoftGraphPhotoExposureNumerator1
func (t MicrosoftGraphPhoto_ExposureNumerator) AsMicrosoftGraphPhotoExposureNumerator1() (MicrosoftGraphPhotoExposureNumerator1, error) {
	var body MicrosoftGraphPhotoExposureNumerator1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphPhotoExposureNumerator1 overwrites any union data inside the MicrosoftGraphPhoto_ExposureNumerator as the provided MicrosoftGraphPhotoExposureNumerator1
func (t *MicrosoftGraphPhoto_ExposureNumerator) FromMicrosoftGraphPhotoExposureNumerator1(v MicrosoftGraphPhotoExposureNumerator1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphPhotoExposureNumerator1 performs a merge with any union data inside the MicrosoftGraphPhoto_ExposureNumerator, using the provided MicrosoftGraphPhotoExposureNumerator1
func (t *MicrosoftGraphPhoto_ExposureNumerator) MergeMicrosoftGraphPhotoExposureNumerator1(v MicrosoftGraphPhotoExposureNumerator1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsReferenceNumeric returns the union data inside the MicrosoftGraphPhoto_ExposureNumerator as a ReferenceNumeric
func (t MicrosoftGraphPhoto_ExposureNumerator) AsReferenceNumeric() (ReferenceNumeric, error) {
	var body ReferenceNumeric
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromReferenceNumeric overwrites any union data inside the MicrosoftGraphPhoto_ExposureNumerator as the provided ReferenceNumeric
func (t *MicrosoftGraphPhoto_ExposureNumerator) FromReferenceNumeric(v ReferenceNumeric) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeReferenceNumeric performs a merge with any union data inside the MicrosoftGraphPhoto_ExposureNumerator, using the provided ReferenceNumeric
func (t *MicrosoftGraphPhoto_ExposureNumerator) MergeReferenceNumeric(v ReferenceNumeric) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

func (t MicrosoftGraphPhoto_ExposureNumerator) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *MicrosoftGraphPhoto_ExposureNumerator) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsMicrosoftGraphPhotoFNumber0 returns the union data inside the MicrosoftGraphPhoto_FNumber as a MicrosoftGraphPhotoFNumber0
func (t MicrosoftGraphPhoto_FNumber) AsMicrosoftGraphPhotoFNumber0() (MicrosoftGraphPhotoFNumber0, error) {
	var body MicrosoftGraphPhotoFNumber0
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphPhotoFNumber0 overwrites any union data inside the MicrosoftGraphPhoto_FNumber as the provided MicrosoftGraphPhotoFNumber0
func (t *MicrosoftGraphPhoto_FNumber) FromMicrosoftGraphPhotoFNumber0(v MicrosoftGraphPhotoFNumber0) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphPhotoFNumber0 performs a merge with any union data inside the MicrosoftGraphPhoto_FNumber, using the provided MicrosoftGraphPhotoFNumber0
func (t *MicrosoftGraphPhoto_FNumber) MergeMicrosoftGraphPhotoFNumber0(v MicrosoftGraphPhotoFNumber0) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsMicrosoftGraphPhotoFNumber1 returns the union data inside the MicrosoftGraphPhoto_FNumber as a MicrosoftGraphPhotoFNumber1
func (t MicrosoftGraphPhoto_FNumber) AsMicrosoftGraphPhotoFNumber1() (MicrosoftGraphPhotoFNumber1, error) {
	var body MicrosoftGraphPhotoFNumber1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphPhotoFNumber1 overwrites any union data inside the MicrosoftGraphPhoto_FNumber as the provided MicrosoftGraphPhotoFNumber1
func (t *MicrosoftGraphPhoto_FNumber) FromMicrosoftGraphPhotoFNumber1(v MicrosoftGraphPhotoFNumber1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphPhotoFNumber1 performs a merge with any union data inside the MicrosoftGraphPhoto_FNumber, using the provided MicrosoftGraphPhotoFNumber1
func (t *MicrosoftGraphPhoto_FNumber) MergeMicrosoftGraphPhotoFNumber1(v MicrosoftGraphPhotoFNumber1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsReferenceNumeric returns the union data inside the MicrosoftGraphPhoto_FNumber as a ReferenceNumeric
func (t MicrosoftGraphPhoto_FNumber) AsReferenceNumeric() (ReferenceNumeric, error) {
	var body ReferenceNumeric
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromReferenceNumeric overwrites any union data inside the MicrosoftGraphPhoto_FNumber as the provided ReferenceNumeric
func (t *MicrosoftGraphPhoto_FNumber) FromReferenceNumeric(v ReferenceNumeric) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeReferenceNumeric performs a merge with any union data inside the MicrosoftGraphPhoto_FNumber, using the provided ReferenceNumeric
func (t *MicrosoftGraphPhoto_FNumber) MergeReferenceNumeric(v ReferenceNumeric) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

func (t MicrosoftGraphPhoto_FNumber) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *MicrosoftGraphPhoto_FNumber) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsMicrosoftGraphPhotoFocalLength0 returns the union data inside the MicrosoftGraphPhoto_FocalLength as a MicrosoftGraphPhotoFocalLength0
func (t MicrosoftGraphPhoto_FocalLength) AsMicrosoftGraphPhotoFocalLength0() (MicrosoftGraphPhotoFocalLength0, error) {
	var body MicrosoftGraphPhotoFocalLength0
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphPhotoFocalLength0 overwrites any union data inside the MicrosoftGraphPhoto_FocalLength as the provided MicrosoftGraphPhotoFocalLength0
func (t *MicrosoftGraphPhoto_FocalLength) FromMicrosoftGraphPhotoFocalLength0(v MicrosoftGraphPhotoFocalLength0) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphPhotoFocalLength0 performs a merge with any union data inside the MicrosoftGraphPhoto_FocalLength, using the provided MicrosoftGraphPhotoFocalLength0
func (t *MicrosoftGraphPhoto_FocalLength) MergeMicrosoftGraphPhotoFocalLength0(v MicrosoftGraphPhotoFocalLength0) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsMicrosoftGraphPhotoFocalLength1 returns the union data inside the MicrosoftGraphPhoto_FocalLength as a MicrosoftGraphPhotoFocalLength1
func (t MicrosoftGraphPhoto_FocalLength) AsMicrosoftGraphPhotoFocalLength1() (MicrosoftGraphPhotoFocalLength1, error) {
	var body MicrosoftGraphPhotoFocalLength1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphPhotoFocalLength1 overwrites any union data inside the MicrosoftGraphPhoto_FocalLength as the provided MicrosoftGraphPhotoFocalLength1
func (t *MicrosoftGraphPhoto_FocalLength) FromMicrosoftGraphPhotoFocalLength1(v MicrosoftGraphPhotoFocalLength1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphPhotoFocalLength1 performs a merge with any union data inside the MicrosoftGraphPhoto_FocalLength, using the provided MicrosoftGraphPhotoFocalLength1
func (t *MicrosoftGraphPhoto_FocalLength) MergeMicrosoftGraphPhotoFocalLength1(v MicrosoftGraphPhotoFocalLength1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsReferenceNumeric returns the union data inside the MicrosoftGraphPhoto_FocalLength as a ReferenceNumeric
func (t MicrosoftGraphPhoto_FocalLength) AsReferenceNumeric() (ReferenceNumeric, error) {
	var body ReferenceNumeric
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromReferenceNumeric overwrites any union data inside the MicrosoftGraphPhoto_FocalLength as the provided ReferenceNumeric
func (t *MicrosoftGraphPhoto_FocalLength) FromReferenceNumeric(v ReferenceNumeric) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeReferenceNumeric performs a merge with any union data inside the MicrosoftGraphPhoto_FocalLength, using the provided ReferenceNumeric
func (t *MicrosoftGraphPhoto_FocalLength) MergeReferenceNumeric(v ReferenceNumeric) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

func (t MicrosoftGraphPhoto_FocalLength) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *MicrosoftGraphPhoto_FocalLength) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsMicrosoftGraphChatMessage returns the union data inside the MicrosoftGraphPinnedChatMessageInfo_Message as a MicrosoftGraphChatMessage
func (t MicrosoftGraphPinnedChatMessageInfo_Message) AsMicrosoftGraphChatMessage() (MicrosoftGraphChatMessage, error) {
	var body MicrosoftGraphChatMessage
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphChatMessage overwrites any union data inside the MicrosoftGraphPinnedChatMessageInfo_Message as the provided MicrosoftGraphChatMessage
func (t *MicrosoftGraphPinnedChatMessageInfo_Message) FromMicrosoftGraphChatMessage(v MicrosoftGraphChatMessage) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphChatMessage performs a merge with any union data inside the MicrosoftGraphPinnedChatMessageInfo_Message, using the provided MicrosoftGraphChatMessage
func (t *MicrosoftGraphPinnedChatMessageInfo_Message) MergeMicrosoftGraphChatMessage(v MicrosoftGraphChatMessage) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsMicrosoftGraphPinnedChatMessageInfoMessage1 returns the union data inside the MicrosoftGraphPinnedChatMessageInfo_Message as a MicrosoftGraphPinnedChatMessageInfoMessage1
func (t MicrosoftGraphPinnedChatMessageInfo_Message) AsMicrosoftGraphPinnedChatMessageInfoMessage1() (MicrosoftGraphPinnedChatMessageInfoMessage1, error) {
	var body MicrosoftGraphPinnedChatMessageInfoMessage1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphPinnedChatMessageInfoMessage1 overwrites any union data inside the MicrosoftGraphPinnedChatMessageInfo_Message as the provided MicrosoftGraphPinnedChatMessageInfoMessage1
func (t *MicrosoftGraphPinnedChatMessageInfo_Message) FromMicrosoftGraphPinnedChatMessageInfoMessage1(v MicrosoftGraphPinnedChatMessageInfoMessage1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphPinnedChatMessageInfoMessage1 performs a merge with any union data inside the MicrosoftGraphPinnedChatMessageInfo_Message, using the provided MicrosoftGraphPinnedChatMessageInfoMessage1
func (t *MicrosoftGraphPinnedChatMessageInfo_Message) MergeMicrosoftGraphPinnedChatMessageInfoMessage1(v MicrosoftGraphPinnedChatMessageInfoMessage1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

func (t MicrosoftGraphPinnedChatMessageInfo_Message) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *MicrosoftGraphPinnedChatMessageInfo_Message) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsMicrosoftGraphPlannerOrderHintsByAssignee returns the union data inside the MicrosoftGraphPlannerAssignedToTaskBoardTaskFormat_OrderHintsByAssignee as a MicrosoftGraphPlannerOrderHintsByAssignee
func (t MicrosoftGraphPlannerAssignedToTaskBoardTaskFormat_OrderHintsByAssignee) AsMicrosoftGraphPlannerOrderHintsByAssignee() (MicrosoftGraphPlannerOrderHintsByAssignee, error) {
	var body MicrosoftGraphPlannerOrderHintsByAssignee
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphPlannerOrderHintsByAssignee overwrites any union data inside the MicrosoftGraphPlannerAssignedToTaskBoardTaskFormat_OrderHintsByAssignee as the provided MicrosoftGraphPlannerOrderHintsByAssignee
func (t *MicrosoftGraphPlannerAssignedToTaskBoardTaskFormat_OrderHintsByAssignee) FromMicrosoftGraphPlannerOrderHintsByAssignee(v MicrosoftGraphPlannerOrderHintsByAssignee) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphPlannerOrderHintsByAssignee performs a merge with any union data inside the MicrosoftGraphPlannerAssignedToTaskBoardTaskFormat_OrderHintsByAssignee, using the provided MicrosoftGraphPlannerOrderHintsByAssignee
func (t *MicrosoftGraphPlannerAssignedToTaskBoardTaskFormat_OrderHintsByAssignee) MergeMicrosoftGraphPlannerOrderHintsByAssignee(v MicrosoftGraphPlannerOrderHintsByAssignee) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsMicrosoftGraphPlannerAssignedToTaskBoardTaskFormatOrderHintsByAssignee1 returns the union data inside the MicrosoftGraphPlannerAssignedToTaskBoardTaskFormat_OrderHintsByAssignee as a MicrosoftGraphPlannerAssignedToTaskBoardTaskFormatOrderHintsByAssignee1
func (t MicrosoftGraphPlannerAssignedToTaskBoardTaskFormat_OrderHintsByAssignee) AsMicrosoftGraphPlannerAssignedToTaskBoardTaskFormatOrderHintsByAssignee1() (MicrosoftGraphPlannerAssignedToTaskBoardTaskFormatOrderHintsByAssignee1, error) {
	var body MicrosoftGraphPlannerAssignedToTaskBoardTaskFormatOrderHintsByAssignee1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphPlannerAssignedToTaskBoardTaskFormatOrderHintsByAssignee1 overwrites any union data inside the MicrosoftGraphPlannerAssignedToTaskBoardTaskFormat_OrderHintsByAssignee as the provided MicrosoftGraphPlannerAssignedToTaskBoardTaskFormatOrderHintsByAssignee1
func (t *MicrosoftGraphPlannerAssignedToTaskBoardTaskFormat_OrderHintsByAssignee) FromMicrosoftGraphPlannerAssignedToTaskBoardTaskFormatOrderHintsByAssignee1(v MicrosoftGraphPlannerAssignedToTaskBoardTaskFormatOrderHintsByAssignee1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphPlannerAssignedToTaskBoardTaskFormatOrderHintsByAssignee1 performs a merge with any union data inside the MicrosoftGraphPlannerAssignedToTaskBoardTaskFormat_OrderHintsByAssignee, using the provided MicrosoftGraphPlannerAssignedToTaskBoardTaskFormatOrderHintsByAssignee1
func (t *MicrosoftGraphPlannerAssignedToTaskBoardTaskFormat_OrderHintsByAssignee) MergeMicrosoftGraphPlannerAssignedToTaskBoardTaskFormatOrderHintsByAssignee1(v MicrosoftGraphPlannerAssignedToTaskBoardTaskFormatOrderHintsByAssignee1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

func (t MicrosoftGraphPlannerAssignedToTaskBoardTaskFormat_OrderHintsByAssignee) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *MicrosoftGraphPlannerAssignedToTaskBoardTaskFormat_OrderHintsByAssignee) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsMicrosoftGraphPlannerPlanContainer returns the union data inside the MicrosoftGraphPlannerPlan_Container as a MicrosoftGraphPlannerPlanContainer
func (t MicrosoftGraphPlannerPlan_Container) AsMicrosoftGraphPlannerPlanContainer() (MicrosoftGraphPlannerPlanContainer, error) {
	var body MicrosoftGraphPlannerPlanContainer
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphPlannerPlanContainer overwrites any union data inside the MicrosoftGraphPlannerPlan_Container as the provided MicrosoftGraphPlannerPlanContainer
func (t *MicrosoftGraphPlannerPlan_Container) FromMicrosoftGraphPlannerPlanContainer(v MicrosoftGraphPlannerPlanContainer) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphPlannerPlanContainer performs a merge with any union data inside the MicrosoftGraphPlannerPlan_Container, using the provided MicrosoftGraphPlannerPlanContainer
func (t *MicrosoftGraphPlannerPlan_Container) MergeMicrosoftGraphPlannerPlanContainer(v MicrosoftGraphPlannerPlanContainer) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsMicrosoftGraphPlannerPlanContainer1 returns the union data inside the MicrosoftGraphPlannerPlan_Container as a MicrosoftGraphPlannerPlanContainer1
func (t MicrosoftGraphPlannerPlan_Container) AsMicrosoftGraphPlannerPlanContainer1() (MicrosoftGraphPlannerPlanContainer1, error) {
	var body MicrosoftGraphPlannerPlanContainer1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphPlannerPlanContainer1 overwrites any union data inside the MicrosoftGraphPlannerPlan_Container as the provided MicrosoftGraphPlannerPlanContainer1
func (t *MicrosoftGraphPlannerPlan_Container) FromMicrosoftGraphPlannerPlanContainer1(v MicrosoftGraphPlannerPlanContainer1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphPlannerPlanContainer1 performs a merge with any union data inside the MicrosoftGraphPlannerPlan_Container, using the provided MicrosoftGraphPlannerPlanContainer1
func (t *MicrosoftGraphPlannerPlan_Container) MergeMicrosoftGraphPlannerPlanContainer1(v MicrosoftGraphPlannerPlanContainer1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

func (t MicrosoftGraphPlannerPlan_Container) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *MicrosoftGraphPlannerPlan_Container) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsMicrosoftGraphIdentitySet returns the union data inside the MicrosoftGraphPlannerPlan_CreatedBy as a MicrosoftGraphIdentitySet
func (t MicrosoftGraphPlannerPlan_CreatedBy) AsMicrosoftGraphIdentitySet() (MicrosoftGraphIdentitySet, error) {
	var body MicrosoftGraphIdentitySet
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphIdentitySet overwrites any union data inside the MicrosoftGraphPlannerPlan_CreatedBy as the provided MicrosoftGraphIdentitySet
func (t *MicrosoftGraphPlannerPlan_CreatedBy) FromMicrosoftGraphIdentitySet(v MicrosoftGraphIdentitySet) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphIdentitySet performs a merge with any union data inside the MicrosoftGraphPlannerPlan_CreatedBy, using the provided MicrosoftGraphIdentitySet
func (t *MicrosoftGraphPlannerPlan_CreatedBy) MergeMicrosoftGraphIdentitySet(v MicrosoftGraphIdentitySet) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsMicrosoftGraphPlannerPlanCreatedBy1 returns the union data inside the MicrosoftGraphPlannerPlan_CreatedBy as a MicrosoftGraphPlannerPlanCreatedBy1
func (t MicrosoftGraphPlannerPlan_CreatedBy) AsMicrosoftGraphPlannerPlanCreatedBy1() (MicrosoftGraphPlannerPlanCreatedBy1, error) {
	var body MicrosoftGraphPlannerPlanCreatedBy1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphPlannerPlanCreatedBy1 overwrites any union data inside the MicrosoftGraphPlannerPlan_CreatedBy as the provided MicrosoftGraphPlannerPlanCreatedBy1
func (t *MicrosoftGraphPlannerPlan_CreatedBy) FromMicrosoftGraphPlannerPlanCreatedBy1(v MicrosoftGraphPlannerPlanCreatedBy1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphPlannerPlanCreatedBy1 performs a merge with any union data inside the MicrosoftGraphPlannerPlan_CreatedBy, using the provided MicrosoftGraphPlannerPlanCreatedBy1
func (t *MicrosoftGraphPlannerPlan_CreatedBy) MergeMicrosoftGraphPlannerPlanCreatedBy1(v MicrosoftGraphPlannerPlanCreatedBy1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

func (t MicrosoftGraphPlannerPlan_CreatedBy) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *MicrosoftGraphPlannerPlan_CreatedBy) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsMicrosoftGraphPlannerPlanDetails returns the union data inside the MicrosoftGraphPlannerPlan_Details as a MicrosoftGraphPlannerPlanDetails
func (t MicrosoftGraphPlannerPlan_Details) AsMicrosoftGraphPlannerPlanDetails() (MicrosoftGraphPlannerPlanDetails, error) {
	var body MicrosoftGraphPlannerPlanDetails
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphPlannerPlanDetails overwrites any union data inside the MicrosoftGraphPlannerPlan_Details as the provided MicrosoftGraphPlannerPlanDetails
func (t *MicrosoftGraphPlannerPlan_Details) FromMicrosoftGraphPlannerPlanDetails(v MicrosoftGraphPlannerPlanDetails) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphPlannerPlanDetails performs a merge with any union data inside the MicrosoftGraphPlannerPlan_Details, using the provided MicrosoftGraphPlannerPlanDetails
func (t *MicrosoftGraphPlannerPlan_Details) MergeMicrosoftGraphPlannerPlanDetails(v MicrosoftGraphPlannerPlanDetails) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsMicrosoftGraphPlannerPlanDetails1 returns the union data inside the MicrosoftGraphPlannerPlan_Details as a MicrosoftGraphPlannerPlanDetails1
func (t MicrosoftGraphPlannerPlan_Details) AsMicrosoftGraphPlannerPlanDetails1() (MicrosoftGraphPlannerPlanDetails1, error) {
	var body MicrosoftGraphPlannerPlanDetails1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphPlannerPlanDetails1 overwrites any union data inside the MicrosoftGraphPlannerPlan_Details as the provided MicrosoftGraphPlannerPlanDetails1
func (t *MicrosoftGraphPlannerPlan_Details) FromMicrosoftGraphPlannerPlanDetails1(v MicrosoftGraphPlannerPlanDetails1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphPlannerPlanDetails1 performs a merge with any union data inside the MicrosoftGraphPlannerPlan_Details, using the provided MicrosoftGraphPlannerPlanDetails1
func (t *MicrosoftGraphPlannerPlan_Details) MergeMicrosoftGraphPlannerPlanDetails1(v MicrosoftGraphPlannerPlanDetails1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

func (t MicrosoftGraphPlannerPlan_Details) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *MicrosoftGraphPlannerPlan_Details) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsMicrosoftGraphPlannerContainerType returns the union data inside the MicrosoftGraphPlannerPlanContainer_Type as a MicrosoftGraphPlannerContainerType
func (t MicrosoftGraphPlannerPlanContainer_Type) AsMicrosoftGraphPlannerContainerType() (MicrosoftGraphPlannerContainerType, error) {
	var body MicrosoftGraphPlannerContainerType
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphPlannerContainerType overwrites any union data inside the MicrosoftGraphPlannerPlanContainer_Type as the provided MicrosoftGraphPlannerContainerType
func (t *MicrosoftGraphPlannerPlanContainer_Type) FromMicrosoftGraphPlannerContainerType(v MicrosoftGraphPlannerContainerType) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphPlannerContainerType performs a merge with any union data inside the MicrosoftGraphPlannerPlanContainer_Type, using the provided MicrosoftGraphPlannerContainerType
func (t *MicrosoftGraphPlannerPlanContainer_Type) MergeMicrosoftGraphPlannerContainerType(v MicrosoftGraphPlannerContainerType) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsMicrosoftGraphPlannerPlanContainerType1 returns the union data inside the MicrosoftGraphPlannerPlanContainer_Type as a MicrosoftGraphPlannerPlanContainerType1
func (t MicrosoftGraphPlannerPlanContainer_Type) AsMicrosoftGraphPlannerPlanContainerType1() (MicrosoftGraphPlannerPlanContainerType1, error) {
	var body MicrosoftGraphPlannerPlanContainerType1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphPlannerPlanContainerType1 overwrites any union data inside the MicrosoftGraphPlannerPlanContainer_Type as the provided MicrosoftGraphPlannerPlanContainerType1
func (t *MicrosoftGraphPlannerPlanContainer_Type) FromMicrosoftGraphPlannerPlanContainerType1(v MicrosoftGraphPlannerPlanContainerType1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphPlannerPlanContainerType1 performs a merge with any union data inside the MicrosoftGraphPlannerPlanContainer_Type, using the provided MicrosoftGraphPlannerPlanContainerType1
func (t *MicrosoftGraphPlannerPlanContainer_Type) MergeMicrosoftGraphPlannerPlanContainerType1(v MicrosoftGraphPlannerPlanContainerType1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

func (t MicrosoftGraphPlannerPlanContainer_Type) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *MicrosoftGraphPlannerPlanContainer_Type) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsMicrosoftGraphPlannerCategoryDescriptions returns the union data inside the MicrosoftGraphPlannerPlanDetails_CategoryDescriptions as a MicrosoftGraphPlannerCategoryDescriptions
func (t MicrosoftGraphPlannerPlanDetails_CategoryDescriptions) AsMicrosoftGraphPlannerCategoryDescriptions() (MicrosoftGraphPlannerCategoryDescriptions, error) {
	var body MicrosoftGraphPlannerCategoryDescriptions
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphPlannerCategoryDescriptions overwrites any union data inside the MicrosoftGraphPlannerPlanDetails_CategoryDescriptions as the provided MicrosoftGraphPlannerCategoryDescriptions
func (t *MicrosoftGraphPlannerPlanDetails_CategoryDescriptions) FromMicrosoftGraphPlannerCategoryDescriptions(v MicrosoftGraphPlannerCategoryDescriptions) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphPlannerCategoryDescriptions performs a merge with any union data inside the MicrosoftGraphPlannerPlanDetails_CategoryDescriptions, using the provided MicrosoftGraphPlannerCategoryDescriptions
func (t *MicrosoftGraphPlannerPlanDetails_CategoryDescriptions) MergeMicrosoftGraphPlannerCategoryDescriptions(v MicrosoftGraphPlannerCategoryDescriptions) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsMicrosoftGraphPlannerPlanDetailsCategoryDescriptions1 returns the union data inside the MicrosoftGraphPlannerPlanDetails_CategoryDescriptions as a MicrosoftGraphPlannerPlanDetailsCategoryDescriptions1
func (t MicrosoftGraphPlannerPlanDetails_CategoryDescriptions) AsMicrosoftGraphPlannerPlanDetailsCategoryDescriptions1() (MicrosoftGraphPlannerPlanDetailsCategoryDescriptions1, error) {
	var body MicrosoftGraphPlannerPlanDetailsCategoryDescriptions1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphPlannerPlanDetailsCategoryDescriptions1 overwrites any union data inside the MicrosoftGraphPlannerPlanDetails_CategoryDescriptions as the provided MicrosoftGraphPlannerPlanDetailsCategoryDescriptions1
func (t *MicrosoftGraphPlannerPlanDetails_CategoryDescriptions) FromMicrosoftGraphPlannerPlanDetailsCategoryDescriptions1(v MicrosoftGraphPlannerPlanDetailsCategoryDescriptions1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphPlannerPlanDetailsCategoryDescriptions1 performs a merge with any union data inside the MicrosoftGraphPlannerPlanDetails_CategoryDescriptions, using the provided MicrosoftGraphPlannerPlanDetailsCategoryDescriptions1
func (t *MicrosoftGraphPlannerPlanDetails_CategoryDescriptions) MergeMicrosoftGraphPlannerPlanDetailsCategoryDescriptions1(v MicrosoftGraphPlannerPlanDetailsCategoryDescriptions1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

func (t MicrosoftGraphPlannerPlanDetails_CategoryDescriptions) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *MicrosoftGraphPlannerPlanDetails_CategoryDescriptions) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsMicrosoftGraphPlannerUserIds returns the union data inside the MicrosoftGraphPlannerPlanDetails_SharedWith as a MicrosoftGraphPlannerUserIds
func (t MicrosoftGraphPlannerPlanDetails_SharedWith) AsMicrosoftGraphPlannerUserIds() (MicrosoftGraphPlannerUserIds, error) {
	var body MicrosoftGraphPlannerUserIds
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphPlannerUserIds overwrites any union data inside the MicrosoftGraphPlannerPlanDetails_SharedWith as the provided MicrosoftGraphPlannerUserIds
func (t *MicrosoftGraphPlannerPlanDetails_SharedWith) FromMicrosoftGraphPlannerUserIds(v MicrosoftGraphPlannerUserIds) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphPlannerUserIds performs a merge with any union data inside the MicrosoftGraphPlannerPlanDetails_SharedWith, using the provided MicrosoftGraphPlannerUserIds
func (t *MicrosoftGraphPlannerPlanDetails_SharedWith) MergeMicrosoftGraphPlannerUserIds(v MicrosoftGraphPlannerUserIds) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsMicrosoftGraphPlannerPlanDetailsSharedWith1 returns the union data inside the MicrosoftGraphPlannerPlanDetails_SharedWith as a MicrosoftGraphPlannerPlanDetailsSharedWith1
func (t MicrosoftGraphPlannerPlanDetails_SharedWith) AsMicrosoftGraphPlannerPlanDetailsSharedWith1() (MicrosoftGraphPlannerPlanDetailsSharedWith1, error) {
	var body MicrosoftGraphPlannerPlanDetailsSharedWith1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphPlannerPlanDetailsSharedWith1 overwrites any union data inside the MicrosoftGraphPlannerPlanDetails_SharedWith as the provided MicrosoftGraphPlannerPlanDetailsSharedWith1
func (t *MicrosoftGraphPlannerPlanDetails_SharedWith) FromMicrosoftGraphPlannerPlanDetailsSharedWith1(v MicrosoftGraphPlannerPlanDetailsSharedWith1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphPlannerPlanDetailsSharedWith1 performs a merge with any union data inside the MicrosoftGraphPlannerPlanDetails_SharedWith, using the provided MicrosoftGraphPlannerPlanDetailsSharedWith1
func (t *MicrosoftGraphPlannerPlanDetails_SharedWith) MergeMicrosoftGraphPlannerPlanDetailsSharedWith1(v MicrosoftGraphPlannerPlanDetailsSharedWith1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

func (t MicrosoftGraphPlannerPlanDetails_SharedWith) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *MicrosoftGraphPlannerPlanDetails_SharedWith) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsMicrosoftGraphPlannerAppliedCategories returns the union data inside the MicrosoftGraphPlannerTask_AppliedCategories as a MicrosoftGraphPlannerAppliedCategories
func (t MicrosoftGraphPlannerTask_AppliedCategories) AsMicrosoftGraphPlannerAppliedCategories() (MicrosoftGraphPlannerAppliedCategories, error) {
	var body MicrosoftGraphPlannerAppliedCategories
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphPlannerAppliedCategories overwrites any union data inside the MicrosoftGraphPlannerTask_AppliedCategories as the provided MicrosoftGraphPlannerAppliedCategories
func (t *MicrosoftGraphPlannerTask_AppliedCategories) FromMicrosoftGraphPlannerAppliedCategories(v MicrosoftGraphPlannerAppliedCategories) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphPlannerAppliedCategories performs a merge with any union data inside the MicrosoftGraphPlannerTask_AppliedCategories, using the provided MicrosoftGraphPlannerAppliedCategories
func (t *MicrosoftGraphPlannerTask_AppliedCategories) MergeMicrosoftGraphPlannerAppliedCategories(v MicrosoftGraphPlannerAppliedCategories) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsMicrosoftGraphPlannerTaskAppliedCategories1 returns the union data inside the MicrosoftGraphPlannerTask_AppliedCategories as a MicrosoftGraphPlannerTaskAppliedCategories1
func (t MicrosoftGraphPlannerTask_AppliedCategories) AsMicrosoftGraphPlannerTaskAppliedCategories1() (MicrosoftGraphPlannerTaskAppliedCategories1, error) {
	var body MicrosoftGraphPlannerTaskAppliedCategories1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphPlannerTaskAppliedCategories1 overwrites any union data inside the MicrosoftGraphPlannerTask_AppliedCategories as the provided MicrosoftGraphPlannerTaskAppliedCategories1
func (t *MicrosoftGraphPlannerTask_AppliedCategories) FromMicrosoftGraphPlannerTaskAppliedCategories1(v MicrosoftGraphPlannerTaskAppliedCategories1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphPlannerTaskAppliedCategories1 performs a merge with any union data inside the MicrosoftGraphPlannerTask_AppliedCategories, using the provided MicrosoftGraphPlannerTaskAppliedCategories1
func (t *MicrosoftGraphPlannerTask_AppliedCategories) MergeMicrosoftGraphPlannerTaskAppliedCategories1(v MicrosoftGraphPlannerTaskAppliedCategories1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

func (t MicrosoftGraphPlannerTask_AppliedCategories) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *MicrosoftGraphPlannerTask_AppliedCategories) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsMicrosoftGraphPlannerAssignedToTaskBoardTaskFormat returns the union data inside the MicrosoftGraphPlannerTask_AssignedToTaskBoardFormat as a MicrosoftGraphPlannerAssignedToTaskBoardTaskFormat
func (t MicrosoftGraphPlannerTask_AssignedToTaskBoardFormat) AsMicrosoftGraphPlannerAssignedToTaskBoardTaskFormat() (MicrosoftGraphPlannerAssignedToTaskBoardTaskFormat, error) {
	var body MicrosoftGraphPlannerAssignedToTaskBoardTaskFormat
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphPlannerAssignedToTaskBoardTaskFormat overwrites any union data inside the MicrosoftGraphPlannerTask_AssignedToTaskBoardFormat as the provided MicrosoftGraphPlannerAssignedToTaskBoardTaskFormat
func (t *MicrosoftGraphPlannerTask_AssignedToTaskBoardFormat) FromMicrosoftGraphPlannerAssignedToTaskBoardTaskFormat(v MicrosoftGraphPlannerAssignedToTaskBoardTaskFormat) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphPlannerAssignedToTaskBoardTaskFormat performs a merge with any union data inside the MicrosoftGraphPlannerTask_AssignedToTaskBoardFormat, using the provided MicrosoftGraphPlannerAssignedToTaskBoardTaskFormat
func (t *MicrosoftGraphPlannerTask_AssignedToTaskBoardFormat) MergeMicrosoftGraphPlannerAssignedToTaskBoardTaskFormat(v MicrosoftGraphPlannerAssignedToTaskBoardTaskFormat) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsMicrosoftGraphPlannerTaskAssignedToTaskBoardFormat1 returns the union data inside the MicrosoftGraphPlannerTask_AssignedToTaskBoardFormat as a MicrosoftGraphPlannerTaskAssignedToTaskBoardFormat1
func (t MicrosoftGraphPlannerTask_AssignedToTaskBoardFormat) AsMicrosoftGraphPlannerTaskAssignedToTaskBoardFormat1() (MicrosoftGraphPlannerTaskAssignedToTaskBoardFormat1, error) {
	var body MicrosoftGraphPlannerTaskAssignedToTaskBoardFormat1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphPlannerTaskAssignedToTaskBoardFormat1 overwrites any union data inside the MicrosoftGraphPlannerTask_AssignedToTaskBoardFormat as the provided MicrosoftGraphPlannerTaskAssignedToTaskBoardFormat1
func (t *MicrosoftGraphPlannerTask_AssignedToTaskBoardFormat) FromMicrosoftGraphPlannerTaskAssignedToTaskBoardFormat1(v MicrosoftGraphPlannerTaskAssignedToTaskBoardFormat1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphPlannerTaskAssignedToTaskBoardFormat1 performs a merge with any union data inside the MicrosoftGraphPlannerTask_AssignedToTaskBoardFormat, using the provided MicrosoftGraphPlannerTaskAssignedToTaskBoardFormat1
func (t *MicrosoftGraphPlannerTask_AssignedToTaskBoardFormat) MergeMicrosoftGraphPlannerTaskAssignedToTaskBoardFormat1(v MicrosoftGraphPlannerTaskAssignedToTaskBoardFormat1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

func (t MicrosoftGraphPlannerTask_AssignedToTaskBoardFormat) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *MicrosoftGraphPlannerTask_AssignedToTaskBoardFormat) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsMicrosoftGraphPlannerAssignments returns the union data inside the MicrosoftGraphPlannerTask_Assignments as a MicrosoftGraphPlannerAssignments
func (t MicrosoftGraphPlannerTask_Assignments) AsMicrosoftGraphPlannerAssignments() (MicrosoftGraphPlannerAssignments, error) {
	var body MicrosoftGraphPlannerAssignments
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphPlannerAssignments overwrites any union data inside the MicrosoftGraphPlannerTask_Assignments as the provided MicrosoftGraphPlannerAssignments
func (t *MicrosoftGraphPlannerTask_Assignments) FromMicrosoftGraphPlannerAssignments(v MicrosoftGraphPlannerAssignments) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphPlannerAssignments performs a merge with any union data inside the MicrosoftGraphPlannerTask_Assignments, using the provided MicrosoftGraphPlannerAssignments
func (t *MicrosoftGraphPlannerTask_Assignments) MergeMicrosoftGraphPlannerAssignments(v MicrosoftGraphPlannerAssignments) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsMicrosoftGraphPlannerTaskAssignments1 returns the union data inside the MicrosoftGraphPlannerTask_Assignments as a MicrosoftGraphPlannerTaskAssignments1
func (t MicrosoftGraphPlannerTask_Assignments) AsMicrosoftGraphPlannerTaskAssignments1() (MicrosoftGraphPlannerTaskAssignments1, error) {
	var body MicrosoftGraphPlannerTaskAssignments1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphPlannerTaskAssignments1 overwrites any union data inside the MicrosoftGraphPlannerTask_Assignments as the provided MicrosoftGraphPlannerTaskAssignments1
func (t *MicrosoftGraphPlannerTask_Assignments) FromMicrosoftGraphPlannerTaskAssignments1(v MicrosoftGraphPlannerTaskAssignments1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphPlannerTaskAssignments1 performs a merge with any union data inside the MicrosoftGraphPlannerTask_Assignments, using the provided MicrosoftGraphPlannerTaskAssignments1
func (t *MicrosoftGraphPlannerTask_Assignments) MergeMicrosoftGraphPlannerTaskAssignments1(v MicrosoftGraphPlannerTaskAssignments1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

func (t MicrosoftGraphPlannerTask_Assignments) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *MicrosoftGraphPlannerTask_Assignments) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsMicrosoftGraphPlannerBucketTaskBoardTaskFormat returns the union data inside the MicrosoftGraphPlannerTask_BucketTaskBoardFormat as a MicrosoftGraphPlannerBucketTaskBoardTaskFormat
func (t MicrosoftGraphPlannerTask_BucketTaskBoardFormat) AsMicrosoftGraphPlannerBucketTaskBoardTaskFormat() (MicrosoftGraphPlannerBucketTaskBoardTaskFormat, error) {
	var body MicrosoftGraphPlannerBucketTaskBoardTaskFormat
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphPlannerBucketTaskBoardTaskFormat overwrites any union data inside the MicrosoftGraphPlannerTask_BucketTaskBoardFormat as the provided MicrosoftGraphPlannerBucketTaskBoardTaskFormat
func (t *MicrosoftGraphPlannerTask_BucketTaskBoardFormat) FromMicrosoftGraphPlannerBucketTaskBoardTaskFormat(v MicrosoftGraphPlannerBucketTaskBoardTaskFormat) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphPlannerBucketTaskBoardTaskFormat performs a merge with any union data inside the MicrosoftGraphPlannerTask_BucketTaskBoardFormat, using the provided MicrosoftGraphPlannerBucketTaskBoardTaskFormat
func (t *MicrosoftGraphPlannerTask_BucketTaskBoardFormat) MergeMicrosoftGraphPlannerBucketTaskBoardTaskFormat(v MicrosoftGraphPlannerBucketTaskBoardTaskFormat) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsMicrosoftGraphPlannerTaskBucketTaskBoardFormat1 returns the union data inside the MicrosoftGraphPlannerTask_BucketTaskBoardFormat as a MicrosoftGraphPlannerTaskBucketTaskBoardFormat1
func (t MicrosoftGraphPlannerTask_BucketTaskBoardFormat) AsMicrosoftGraphPlannerTaskBucketTaskBoardFormat1() (MicrosoftGraphPlannerTaskBucketTaskBoardFormat1, error) {
	var body MicrosoftGraphPlannerTaskBucketTaskBoardFormat1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphPlannerTaskBucketTaskBoardFormat1 overwrites any union data inside the MicrosoftGraphPlannerTask_BucketTaskBoardFormat as the provided MicrosoftGraphPlannerTaskBucketTaskBoardFormat1
func (t *MicrosoftGraphPlannerTask_BucketTaskBoardFormat) FromMicrosoftGraphPlannerTaskBucketTaskBoardFormat1(v MicrosoftGraphPlannerTaskBucketTaskBoardFormat1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphPlannerTaskBucketTaskBoardFormat1 performs a merge with any union data inside the MicrosoftGraphPlannerTask_BucketTaskBoardFormat, using the provided MicrosoftGraphPlannerTaskBucketTaskBoardFormat1
func (t *MicrosoftGraphPlannerTask_BucketTaskBoardFormat) MergeMicrosoftGraphPlannerTaskBucketTaskBoardFormat1(v MicrosoftGraphPlannerTaskBucketTaskBoardFormat1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

func (t MicrosoftGraphPlannerTask_BucketTaskBoardFormat) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *MicrosoftGraphPlannerTask_BucketTaskBoardFormat) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsMicrosoftGraphIdentitySet returns the union data inside the MicrosoftGraphPlannerTask_CompletedBy as a MicrosoftGraphIdentitySet
func (t MicrosoftGraphPlannerTask_CompletedBy) AsMicrosoftGraphIdentitySet() (MicrosoftGraphIdentitySet, error) {
	var body MicrosoftGraphIdentitySet
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphIdentitySet overwrites any union data inside the MicrosoftGraphPlannerTask_CompletedBy as the provided MicrosoftGraphIdentitySet
func (t *MicrosoftGraphPlannerTask_CompletedBy) FromMicrosoftGraphIdentitySet(v MicrosoftGraphIdentitySet) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphIdentitySet performs a merge with any union data inside the MicrosoftGraphPlannerTask_CompletedBy, using the provided MicrosoftGraphIdentitySet
func (t *MicrosoftGraphPlannerTask_CompletedBy) MergeMicrosoftGraphIdentitySet(v MicrosoftGraphIdentitySet) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsMicrosoftGraphPlannerTaskCompletedBy1 returns the union data inside the MicrosoftGraphPlannerTask_CompletedBy as a MicrosoftGraphPlannerTaskCompletedBy1
func (t MicrosoftGraphPlannerTask_CompletedBy) AsMicrosoftGraphPlannerTaskCompletedBy1() (MicrosoftGraphPlannerTaskCompletedBy1, error) {
	var body MicrosoftGraphPlannerTaskCompletedBy1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphPlannerTaskCompletedBy1 overwrites any union data inside the MicrosoftGraphPlannerTask_CompletedBy as the provided MicrosoftGraphPlannerTaskCompletedBy1
func (t *MicrosoftGraphPlannerTask_CompletedBy) FromMicrosoftGraphPlannerTaskCompletedBy1(v MicrosoftGraphPlannerTaskCompletedBy1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphPlannerTaskCompletedBy1 performs a merge with any union data inside the MicrosoftGraphPlannerTask_CompletedBy, using the provided MicrosoftGraphPlannerTaskCompletedBy1
func (t *MicrosoftGraphPlannerTask_CompletedBy) MergeMicrosoftGraphPlannerTaskCompletedBy1(v MicrosoftGraphPlannerTaskCompletedBy1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

func (t MicrosoftGraphPlannerTask_CompletedBy) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *MicrosoftGraphPlannerTask_CompletedBy) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsMicrosoftGraphIdentitySet returns the union data inside the MicrosoftGraphPlannerTask_CreatedBy as a MicrosoftGraphIdentitySet
func (t MicrosoftGraphPlannerTask_CreatedBy) AsMicrosoftGraphIdentitySet() (MicrosoftGraphIdentitySet, error) {
	var body MicrosoftGraphIdentitySet
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphIdentitySet overwrites any union data inside the MicrosoftGraphPlannerTask_CreatedBy as the provided MicrosoftGraphIdentitySet
func (t *MicrosoftGraphPlannerTask_CreatedBy) FromMicrosoftGraphIdentitySet(v MicrosoftGraphIdentitySet) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphIdentitySet performs a merge with any union data inside the MicrosoftGraphPlannerTask_CreatedBy, using the provided MicrosoftGraphIdentitySet
func (t *MicrosoftGraphPlannerTask_CreatedBy) MergeMicrosoftGraphIdentitySet(v MicrosoftGraphIdentitySet) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsMicrosoftGraphPlannerTaskCreatedBy1 returns the union data inside the MicrosoftGraphPlannerTask_CreatedBy as a MicrosoftGraphPlannerTaskCreatedBy1
func (t MicrosoftGraphPlannerTask_CreatedBy) AsMicrosoftGraphPlannerTaskCreatedBy1() (MicrosoftGraphPlannerTaskCreatedBy1, error) {
	var body MicrosoftGraphPlannerTaskCreatedBy1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphPlannerTaskCreatedBy1 overwrites any union data inside the MicrosoftGraphPlannerTask_CreatedBy as the provided MicrosoftGraphPlannerTaskCreatedBy1
func (t *MicrosoftGraphPlannerTask_CreatedBy) FromMicrosoftGraphPlannerTaskCreatedBy1(v MicrosoftGraphPlannerTaskCreatedBy1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphPlannerTaskCreatedBy1 performs a merge with any union data inside the MicrosoftGraphPlannerTask_CreatedBy, using the provided MicrosoftGraphPlannerTaskCreatedBy1
func (t *MicrosoftGraphPlannerTask_CreatedBy) MergeMicrosoftGraphPlannerTaskCreatedBy1(v MicrosoftGraphPlannerTaskCreatedBy1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

func (t MicrosoftGraphPlannerTask_CreatedBy) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *MicrosoftGraphPlannerTask_CreatedBy) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsMicrosoftGraphPlannerTaskDetails returns the union data inside the MicrosoftGraphPlannerTask_Details as a MicrosoftGraphPlannerTaskDetails
func (t MicrosoftGraphPlannerTask_Details) AsMicrosoftGraphPlannerTaskDetails() (MicrosoftGraphPlannerTaskDetails, error) {
	var body MicrosoftGraphPlannerTaskDetails
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphPlannerTaskDetails overwrites any union data inside the MicrosoftGraphPlannerTask_Details as the provided MicrosoftGraphPlannerTaskDetails
func (t *MicrosoftGraphPlannerTask_Details) FromMicrosoftGraphPlannerTaskDetails(v MicrosoftGraphPlannerTaskDetails) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphPlannerTaskDetails performs a merge with any union data inside the MicrosoftGraphPlannerTask_Details, using the provided MicrosoftGraphPlannerTaskDetails
func (t *MicrosoftGraphPlannerTask_Details) MergeMicrosoftGraphPlannerTaskDetails(v MicrosoftGraphPlannerTaskDetails) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsMicrosoftGraphPlannerTaskDetails1 returns the union data inside the MicrosoftGraphPlannerTask_Details as a MicrosoftGraphPlannerTaskDetails1
func (t MicrosoftGraphPlannerTask_Details) AsMicrosoftGraphPlannerTaskDetails1() (MicrosoftGraphPlannerTaskDetails1, error) {
	var body MicrosoftGraphPlannerTaskDetails1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphPlannerTaskDetails1 overwrites any union data inside the MicrosoftGraphPlannerTask_Details as the provided MicrosoftGraphPlannerTaskDetails1
func (t *MicrosoftGraphPlannerTask_Details) FromMicrosoftGraphPlannerTaskDetails1(v MicrosoftGraphPlannerTaskDetails1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphPlannerTaskDetails1 performs a merge with any union data inside the MicrosoftGraphPlannerTask_Details, using the provided MicrosoftGraphPlannerTaskDetails1
func (t *MicrosoftGraphPlannerTask_Details) MergeMicrosoftGraphPlannerTaskDetails1(v MicrosoftGraphPlannerTaskDetails1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

func (t MicrosoftGraphPlannerTask_Details) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *MicrosoftGraphPlannerTask_Details) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsMicrosoftGraphPlannerPreviewType returns the union data inside the MicrosoftGraphPlannerTask_PreviewType as a MicrosoftGraphPlannerPreviewType
func (t MicrosoftGraphPlannerTask_PreviewType) AsMicrosoftGraphPlannerPreviewType() (MicrosoftGraphPlannerPreviewType, error) {
	var body MicrosoftGraphPlannerPreviewType
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphPlannerPreviewType overwrites any union data inside the MicrosoftGraphPlannerTask_PreviewType as the provided MicrosoftGraphPlannerPreviewType
func (t *MicrosoftGraphPlannerTask_PreviewType) FromMicrosoftGraphPlannerPreviewType(v MicrosoftGraphPlannerPreviewType) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphPlannerPreviewType performs a merge with any union data inside the MicrosoftGraphPlannerTask_PreviewType, using the provided MicrosoftGraphPlannerPreviewType
func (t *MicrosoftGraphPlannerTask_PreviewType) MergeMicrosoftGraphPlannerPreviewType(v MicrosoftGraphPlannerPreviewType) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsMicrosoftGraphPlannerTaskPreviewType1 returns the union data inside the MicrosoftGraphPlannerTask_PreviewType as a MicrosoftGraphPlannerTaskPreviewType1
func (t MicrosoftGraphPlannerTask_PreviewType) AsMicrosoftGraphPlannerTaskPreviewType1() (MicrosoftGraphPlannerTaskPreviewType1, error) {
	var body MicrosoftGraphPlannerTaskPreviewType1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphPlannerTaskPreviewType1 overwrites any union data inside the MicrosoftGraphPlannerTask_PreviewType as the provided MicrosoftGraphPlannerTaskPreviewType1
func (t *MicrosoftGraphPlannerTask_PreviewType) FromMicrosoftGraphPlannerTaskPreviewType1(v MicrosoftGraphPlannerTaskPreviewType1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphPlannerTaskPreviewType1 performs a merge with any union data inside the MicrosoftGraphPlannerTask_PreviewType, using the provided MicrosoftGraphPlannerTaskPreviewType1
func (t *MicrosoftGraphPlannerTask_PreviewType) MergeMicrosoftGraphPlannerTaskPreviewType1(v MicrosoftGraphPlannerTaskPreviewType1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

func (t MicrosoftGraphPlannerTask_PreviewType) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *MicrosoftGraphPlannerTask_PreviewType) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsMicrosoftGraphPlannerProgressTaskBoardTaskFormat returns the union data inside the MicrosoftGraphPlannerTask_ProgressTaskBoardFormat as a MicrosoftGraphPlannerProgressTaskBoardTaskFormat
func (t MicrosoftGraphPlannerTask_ProgressTaskBoardFormat) AsMicrosoftGraphPlannerProgressTaskBoardTaskFormat() (MicrosoftGraphPlannerProgressTaskBoardTaskFormat, error) {
	var body MicrosoftGraphPlannerProgressTaskBoardTaskFormat
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphPlannerProgressTaskBoardTaskFormat overwrites any union data inside the MicrosoftGraphPlannerTask_ProgressTaskBoardFormat as the provided MicrosoftGraphPlannerProgressTaskBoardTaskFormat
func (t *MicrosoftGraphPlannerTask_ProgressTaskBoardFormat) FromMicrosoftGraphPlannerProgressTaskBoardTaskFormat(v MicrosoftGraphPlannerProgressTaskBoardTaskFormat) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphPlannerProgressTaskBoardTaskFormat performs a merge with any union data inside the MicrosoftGraphPlannerTask_ProgressTaskBoardFormat, using the provided MicrosoftGraphPlannerProgressTaskBoardTaskFormat
func (t *MicrosoftGraphPlannerTask_ProgressTaskBoardFormat) MergeMicrosoftGraphPlannerProgressTaskBoardTaskFormat(v MicrosoftGraphPlannerProgressTaskBoardTaskFormat) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsMicrosoftGraphPlannerTaskProgressTaskBoardFormat1 returns the union data inside the MicrosoftGraphPlannerTask_ProgressTaskBoardFormat as a MicrosoftGraphPlannerTaskProgressTaskBoardFormat1
func (t MicrosoftGraphPlannerTask_ProgressTaskBoardFormat) AsMicrosoftGraphPlannerTaskProgressTaskBoardFormat1() (MicrosoftGraphPlannerTaskProgressTaskBoardFormat1, error) {
	var body MicrosoftGraphPlannerTaskProgressTaskBoardFormat1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphPlannerTaskProgressTaskBoardFormat1 overwrites any union data inside the MicrosoftGraphPlannerTask_ProgressTaskBoardFormat as the provided MicrosoftGraphPlannerTaskProgressTaskBoardFormat1
func (t *MicrosoftGraphPlannerTask_ProgressTaskBoardFormat) FromMicrosoftGraphPlannerTaskProgressTaskBoardFormat1(v MicrosoftGraphPlannerTaskProgressTaskBoardFormat1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphPlannerTaskProgressTaskBoardFormat1 performs a merge with any union data inside the MicrosoftGraphPlannerTask_ProgressTaskBoardFormat, using the provided MicrosoftGraphPlannerTaskProgressTaskBoardFormat1
func (t *MicrosoftGraphPlannerTask_ProgressTaskBoardFormat) MergeMicrosoftGraphPlannerTaskProgressTaskBoardFormat1(v MicrosoftGraphPlannerTaskProgressTaskBoardFormat1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

func (t MicrosoftGraphPlannerTask_ProgressTaskBoardFormat) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *MicrosoftGraphPlannerTask_ProgressTaskBoardFormat) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsMicrosoftGraphPlannerChecklistItems returns the union data inside the MicrosoftGraphPlannerTaskDetails_Checklist as a MicrosoftGraphPlannerChecklistItems
func (t MicrosoftGraphPlannerTaskDetails_Checklist) AsMicrosoftGraphPlannerChecklistItems() (MicrosoftGraphPlannerChecklistItems, error) {
	var body MicrosoftGraphPlannerChecklistItems
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphPlannerChecklistItems overwrites any union data inside the MicrosoftGraphPlannerTaskDetails_Checklist as the provided MicrosoftGraphPlannerChecklistItems
func (t *MicrosoftGraphPlannerTaskDetails_Checklist) FromMicrosoftGraphPlannerChecklistItems(v MicrosoftGraphPlannerChecklistItems) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphPlannerChecklistItems performs a merge with any union data inside the MicrosoftGraphPlannerTaskDetails_Checklist, using the provided MicrosoftGraphPlannerChecklistItems
func (t *MicrosoftGraphPlannerTaskDetails_Checklist) MergeMicrosoftGraphPlannerChecklistItems(v MicrosoftGraphPlannerChecklistItems) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsMicrosoftGraphPlannerTaskDetailsChecklist1 returns the union data inside the MicrosoftGraphPlannerTaskDetails_Checklist as a MicrosoftGraphPlannerTaskDetailsChecklist1
func (t MicrosoftGraphPlannerTaskDetails_Checklist) AsMicrosoftGraphPlannerTaskDetailsChecklist1() (MicrosoftGraphPlannerTaskDetailsChecklist1, error) {
	var body MicrosoftGraphPlannerTaskDetailsChecklist1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphPlannerTaskDetailsChecklist1 overwrites any union data inside the MicrosoftGraphPlannerTaskDetails_Checklist as the provided MicrosoftGraphPlannerTaskDetailsChecklist1
func (t *MicrosoftGraphPlannerTaskDetails_Checklist) FromMicrosoftGraphPlannerTaskDetailsChecklist1(v MicrosoftGraphPlannerTaskDetailsChecklist1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphPlannerTaskDetailsChecklist1 performs a merge with any union data inside the MicrosoftGraphPlannerTaskDetails_Checklist, using the provided MicrosoftGraphPlannerTaskDetailsChecklist1
func (t *MicrosoftGraphPlannerTaskDetails_Checklist) MergeMicrosoftGraphPlannerTaskDetailsChecklist1(v MicrosoftGraphPlannerTaskDetailsChecklist1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

func (t MicrosoftGraphPlannerTaskDetails_Checklist) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *MicrosoftGraphPlannerTaskDetails_Checklist) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsMicrosoftGraphPlannerPreviewType returns the union data inside the MicrosoftGraphPlannerTaskDetails_PreviewType as a MicrosoftGraphPlannerPreviewType
func (t MicrosoftGraphPlannerTaskDetails_PreviewType) AsMicrosoftGraphPlannerPreviewType() (MicrosoftGraphPlannerPreviewType, error) {
	var body MicrosoftGraphPlannerPreviewType
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphPlannerPreviewType overwrites any union data inside the MicrosoftGraphPlannerTaskDetails_PreviewType as the provided MicrosoftGraphPlannerPreviewType
func (t *MicrosoftGraphPlannerTaskDetails_PreviewType) FromMicrosoftGraphPlannerPreviewType(v MicrosoftGraphPlannerPreviewType) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphPlannerPreviewType performs a merge with any union data inside the MicrosoftGraphPlannerTaskDetails_PreviewType, using the provided MicrosoftGraphPlannerPreviewType
func (t *MicrosoftGraphPlannerTaskDetails_PreviewType) MergeMicrosoftGraphPlannerPreviewType(v MicrosoftGraphPlannerPreviewType) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsMicrosoftGraphPlannerTaskDetailsPreviewType1 returns the union data inside the MicrosoftGraphPlannerTaskDetails_PreviewType as a MicrosoftGraphPlannerTaskDetailsPreviewType1
func (t MicrosoftGraphPlannerTaskDetails_PreviewType) AsMicrosoftGraphPlannerTaskDetailsPreviewType1() (MicrosoftGraphPlannerTaskDetailsPreviewType1, error) {
	var body MicrosoftGraphPlannerTaskDetailsPreviewType1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphPlannerTaskDetailsPreviewType1 overwrites any union data inside the MicrosoftGraphPlannerTaskDetails_PreviewType as the provided MicrosoftGraphPlannerTaskDetailsPreviewType1
func (t *MicrosoftGraphPlannerTaskDetails_PreviewType) FromMicrosoftGraphPlannerTaskDetailsPreviewType1(v MicrosoftGraphPlannerTaskDetailsPreviewType1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphPlannerTaskDetailsPreviewType1 performs a merge with any union data inside the MicrosoftGraphPlannerTaskDetails_PreviewType, using the provided MicrosoftGraphPlannerTaskDetailsPreviewType1
func (t *MicrosoftGraphPlannerTaskDetails_PreviewType) MergeMicrosoftGraphPlannerTaskDetailsPreviewType1(v MicrosoftGraphPlannerTaskDetailsPreviewType1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

func (t MicrosoftGraphPlannerTaskDetails_PreviewType) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *MicrosoftGraphPlannerTaskDetails_PreviewType) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsMicrosoftGraphPlannerExternalReferences returns the union data inside the MicrosoftGraphPlannerTaskDetails_References as a MicrosoftGraphPlannerExternalReferences
func (t MicrosoftGraphPlannerTaskDetails_References) AsMicrosoftGraphPlannerExternalReferences() (MicrosoftGraphPlannerExternalReferences, error) {
	var body MicrosoftGraphPlannerExternalReferences
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphPlannerExternalReferences overwrites any union data inside the MicrosoftGraphPlannerTaskDetails_References as the provided MicrosoftGraphPlannerExternalReferences
func (t *MicrosoftGraphPlannerTaskDetails_References) FromMicrosoftGraphPlannerExternalReferences(v MicrosoftGraphPlannerExternalReferences) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphPlannerExternalReferences performs a merge with any union data inside the MicrosoftGraphPlannerTaskDetails_References, using the provided MicrosoftGraphPlannerExternalReferences
func (t *MicrosoftGraphPlannerTaskDetails_References) MergeMicrosoftGraphPlannerExternalReferences(v MicrosoftGraphPlannerExternalReferences) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsMicrosoftGraphPlannerTaskDetailsReferences1 returns the union data inside the MicrosoftGraphPlannerTaskDetails_References as a MicrosoftGraphPlannerTaskDetailsReferences1
func (t MicrosoftGraphPlannerTaskDetails_References) AsMicrosoftGraphPlannerTaskDetailsReferences1() (MicrosoftGraphPlannerTaskDetailsReferences1, error) {
	var body MicrosoftGraphPlannerTaskDetailsReferences1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphPlannerTaskDetailsReferences1 overwrites any union data inside the MicrosoftGraphPlannerTaskDetails_References as the provided MicrosoftGraphPlannerTaskDetailsReferences1
func (t *MicrosoftGraphPlannerTaskDetails_References) FromMicrosoftGraphPlannerTaskDetailsReferences1(v MicrosoftGraphPlannerTaskDetailsReferences1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphPlannerTaskDetailsReferences1 performs a merge with any union data inside the MicrosoftGraphPlannerTaskDetails_References, using the provided MicrosoftGraphPlannerTaskDetailsReferences1
func (t *MicrosoftGraphPlannerTaskDetails_References) MergeMicrosoftGraphPlannerTaskDetailsReferences1(v MicrosoftGraphPlannerTaskDetailsReferences1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

func (t MicrosoftGraphPlannerTaskDetails_References) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *MicrosoftGraphPlannerTaskDetails_References) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsMicrosoftGraphItemBody returns the union data inside the MicrosoftGraphPost_Body as a MicrosoftGraphItemBody
func (t MicrosoftGraphPost_Body) AsMicrosoftGraphItemBody() (MicrosoftGraphItemBody, error) {
	var body MicrosoftGraphItemBody
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphItemBody overwrites any union data inside the MicrosoftGraphPost_Body as the provided MicrosoftGraphItemBody
func (t *MicrosoftGraphPost_Body) FromMicrosoftGraphItemBody(v MicrosoftGraphItemBody) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphItemBody performs a merge with any union data inside the MicrosoftGraphPost_Body, using the provided MicrosoftGraphItemBody
func (t *MicrosoftGraphPost_Body) MergeMicrosoftGraphItemBody(v MicrosoftGraphItemBody) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsMicrosoftGraphPostBody1 returns the union data inside the MicrosoftGraphPost_Body as a MicrosoftGraphPostBody1
func (t MicrosoftGraphPost_Body) AsMicrosoftGraphPostBody1() (MicrosoftGraphPostBody1, error) {
	var body MicrosoftGraphPostBody1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphPostBody1 overwrites any union data inside the MicrosoftGraphPost_Body as the provided MicrosoftGraphPostBody1
func (t *MicrosoftGraphPost_Body) FromMicrosoftGraphPostBody1(v MicrosoftGraphPostBody1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphPostBody1 performs a merge with any union data inside the MicrosoftGraphPost_Body, using the provided MicrosoftGraphPostBody1
func (t *MicrosoftGraphPost_Body) MergeMicrosoftGraphPostBody1(v MicrosoftGraphPostBody1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

func (t MicrosoftGraphPost_Body) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *MicrosoftGraphPost_Body) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsMicrosoftGraphPost returns the union data inside the MicrosoftGraphPost_InReplyTo as a MicrosoftGraphPost
func (t MicrosoftGraphPost_InReplyTo) AsMicrosoftGraphPost() (MicrosoftGraphPost, error) {
	var body MicrosoftGraphPost
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphPost overwrites any union data inside the MicrosoftGraphPost_InReplyTo as the provided MicrosoftGraphPost
func (t *MicrosoftGraphPost_InReplyTo) FromMicrosoftGraphPost(v MicrosoftGraphPost) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphPost performs a merge with any union data inside the MicrosoftGraphPost_InReplyTo, using the provided MicrosoftGraphPost
func (t *MicrosoftGraphPost_InReplyTo) MergeMicrosoftGraphPost(v MicrosoftGraphPost) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsMicrosoftGraphPostInReplyTo1 returns the union data inside the MicrosoftGraphPost_InReplyTo as a MicrosoftGraphPostInReplyTo1
func (t MicrosoftGraphPost_InReplyTo) AsMicrosoftGraphPostInReplyTo1() (MicrosoftGraphPostInReplyTo1, error) {
	var body MicrosoftGraphPostInReplyTo1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphPostInReplyTo1 overwrites any union data inside the MicrosoftGraphPost_InReplyTo as the provided MicrosoftGraphPostInReplyTo1
func (t *MicrosoftGraphPost_InReplyTo) FromMicrosoftGraphPostInReplyTo1(v MicrosoftGraphPostInReplyTo1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphPostInReplyTo1 performs a merge with any union data inside the MicrosoftGraphPost_InReplyTo, using the provided MicrosoftGraphPostInReplyTo1
func (t *MicrosoftGraphPost_InReplyTo) MergeMicrosoftGraphPostInReplyTo1(v MicrosoftGraphPostInReplyTo1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

func (t MicrosoftGraphPost_InReplyTo) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *MicrosoftGraphPost_InReplyTo) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsMicrosoftGraphRecipient returns the union data inside the MicrosoftGraphPost_Sender as a MicrosoftGraphRecipient
func (t MicrosoftGraphPost_Sender) AsMicrosoftGraphRecipient() (MicrosoftGraphRecipient, error) {
	var body MicrosoftGraphRecipient
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphRecipient overwrites any union data inside the MicrosoftGraphPost_Sender as the provided MicrosoftGraphRecipient
func (t *MicrosoftGraphPost_Sender) FromMicrosoftGraphRecipient(v MicrosoftGraphRecipient) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphRecipient performs a merge with any union data inside the MicrosoftGraphPost_Sender, using the provided MicrosoftGraphRecipient
func (t *MicrosoftGraphPost_Sender) MergeMicrosoftGraphRecipient(v MicrosoftGraphRecipient) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsMicrosoftGraphPostSender1 returns the union data inside the MicrosoftGraphPost_Sender as a MicrosoftGraphPostSender1
func (t MicrosoftGraphPost_Sender) AsMicrosoftGraphPostSender1() (MicrosoftGraphPostSender1, error) {
	var body MicrosoftGraphPostSender1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphPostSender1 overwrites any union data inside the MicrosoftGraphPost_Sender as the provided MicrosoftGraphPostSender1
func (t *MicrosoftGraphPost_Sender) FromMicrosoftGraphPostSender1(v MicrosoftGraphPostSender1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphPostSender1 performs a merge with any union data inside the MicrosoftGraphPost_Sender, using the provided MicrosoftGraphPostSender1
func (t *MicrosoftGraphPost_Sender) MergeMicrosoftGraphPostSender1(v MicrosoftGraphPostSender1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

func (t MicrosoftGraphPost_Sender) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *MicrosoftGraphPost_Sender) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsMicrosoftGraphPrinterLocation returns the union data inside the MicrosoftGraphPrintConnector_Location as a MicrosoftGraphPrinterLocation
func (t MicrosoftGraphPrintConnector_Location) AsMicrosoftGraphPrinterLocation() (MicrosoftGraphPrinterLocation, error) {
	var body MicrosoftGraphPrinterLocation
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphPrinterLocation overwrites any union data inside the MicrosoftGraphPrintConnector_Location as the provided MicrosoftGraphPrinterLocation
func (t *MicrosoftGraphPrintConnector_Location) FromMicrosoftGraphPrinterLocation(v MicrosoftGraphPrinterLocation) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphPrinterLocation performs a merge with any union data inside the MicrosoftGraphPrintConnector_Location, using the provided MicrosoftGraphPrinterLocation
func (t *MicrosoftGraphPrintConnector_Location) MergeMicrosoftGraphPrinterLocation(v MicrosoftGraphPrinterLocation) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsMicrosoftGraphPrintConnectorLocation1 returns the union data inside the MicrosoftGraphPrintConnector_Location as a MicrosoftGraphPrintConnectorLocation1
func (t MicrosoftGraphPrintConnector_Location) AsMicrosoftGraphPrintConnectorLocation1() (MicrosoftGraphPrintConnectorLocation1, error) {
	var body MicrosoftGraphPrintConnectorLocation1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphPrintConnectorLocation1 overwrites any union data inside the MicrosoftGraphPrintConnector_Location as the provided MicrosoftGraphPrintConnectorLocation1
func (t *MicrosoftGraphPrintConnector_Location) FromMicrosoftGraphPrintConnectorLocation1(v MicrosoftGraphPrintConnectorLocation1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphPrintConnectorLocation1 performs a merge with any union data inside the MicrosoftGraphPrintConnector_Location, using the provided MicrosoftGraphPrintConnectorLocation1
func (t *MicrosoftGraphPrintConnector_Location) MergeMicrosoftGraphPrintConnectorLocation1(v MicrosoftGraphPrintConnectorLocation1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

func (t MicrosoftGraphPrintConnector_Location) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *MicrosoftGraphPrintConnector_Location) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsMicrosoftGraphUserIdentity returns the union data inside the MicrosoftGraphPrintJob_CreatedBy as a MicrosoftGraphUserIdentity
func (t MicrosoftGraphPrintJob_CreatedBy) AsMicrosoftGraphUserIdentity() (MicrosoftGraphUserIdentity, error) {
	var body MicrosoftGraphUserIdentity
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphUserIdentity overwrites any union data inside the MicrosoftGraphPrintJob_CreatedBy as the provided MicrosoftGraphUserIdentity
func (t *MicrosoftGraphPrintJob_CreatedBy) FromMicrosoftGraphUserIdentity(v MicrosoftGraphUserIdentity) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphUserIdentity performs a merge with any union data inside the MicrosoftGraphPrintJob_CreatedBy, using the provided MicrosoftGraphUserIdentity
func (t *MicrosoftGraphPrintJob_CreatedBy) MergeMicrosoftGraphUserIdentity(v MicrosoftGraphUserIdentity) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsMicrosoftGraphPrintJobCreatedBy1 returns the union data inside the MicrosoftGraphPrintJob_CreatedBy as a MicrosoftGraphPrintJobCreatedBy1
func (t MicrosoftGraphPrintJob_CreatedBy) AsMicrosoftGraphPrintJobCreatedBy1() (MicrosoftGraphPrintJobCreatedBy1, error) {
	var body MicrosoftGraphPrintJobCreatedBy1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphPrintJobCreatedBy1 overwrites any union data inside the MicrosoftGraphPrintJob_CreatedBy as the provided MicrosoftGraphPrintJobCreatedBy1
func (t *MicrosoftGraphPrintJob_CreatedBy) FromMicrosoftGraphPrintJobCreatedBy1(v MicrosoftGraphPrintJobCreatedBy1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphPrintJobCreatedBy1 performs a merge with any union data inside the MicrosoftGraphPrintJob_CreatedBy, using the provided MicrosoftGraphPrintJobCreatedBy1
func (t *MicrosoftGraphPrintJob_CreatedBy) MergeMicrosoftGraphPrintJobCreatedBy1(v MicrosoftGraphPrintJobCreatedBy1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

func (t MicrosoftGraphPrintJob_CreatedBy) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *MicrosoftGraphPrintJob_CreatedBy) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsMicrosoftGraphPrintColorMode returns the union data inside the MicrosoftGraphPrintJobConfiguration_ColorMode as a MicrosoftGraphPrintColorMode
func (t MicrosoftGraphPrintJobConfiguration_ColorMode) AsMicrosoftGraphPrintColorMode() (MicrosoftGraphPrintColorMode, error) {
	var body MicrosoftGraphPrintColorMode
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphPrintColorMode overwrites any union data inside the MicrosoftGraphPrintJobConfiguration_ColorMode as the provided MicrosoftGraphPrintColorMode
func (t *MicrosoftGraphPrintJobConfiguration_ColorMode) FromMicrosoftGraphPrintColorMode(v MicrosoftGraphPrintColorMode) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphPrintColorMode performs a merge with any union data inside the MicrosoftGraphPrintJobConfiguration_ColorMode, using the provided MicrosoftGraphPrintColorMode
func (t *MicrosoftGraphPrintJobConfiguration_ColorMode) MergeMicrosoftGraphPrintColorMode(v MicrosoftGraphPrintColorMode) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsMicrosoftGraphPrintJobConfigurationColorMode1 returns the union data inside the MicrosoftGraphPrintJobConfiguration_ColorMode as a MicrosoftGraphPrintJobConfigurationColorMode1
func (t MicrosoftGraphPrintJobConfiguration_ColorMode) AsMicrosoftGraphPrintJobConfigurationColorMode1() (MicrosoftGraphPrintJobConfigurationColorMode1, error) {
	var body MicrosoftGraphPrintJobConfigurationColorMode1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphPrintJobConfigurationColorMode1 overwrites any union data inside the MicrosoftGraphPrintJobConfiguration_ColorMode as the provided MicrosoftGraphPrintJobConfigurationColorMode1
func (t *MicrosoftGraphPrintJobConfiguration_ColorMode) FromMicrosoftGraphPrintJobConfigurationColorMode1(v MicrosoftGraphPrintJobConfigurationColorMode1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphPrintJobConfigurationColorMode1 performs a merge with any union data inside the MicrosoftGraphPrintJobConfiguration_ColorMode, using the provided MicrosoftGraphPrintJobConfigurationColorMode1
func (t *MicrosoftGraphPrintJobConfiguration_ColorMode) MergeMicrosoftGraphPrintJobConfigurationColorMode1(v MicrosoftGraphPrintJobConfigurationColorMode1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

func (t MicrosoftGraphPrintJobConfiguration_ColorMode) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *MicrosoftGraphPrintJobConfiguration_ColorMode) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsMicrosoftGraphPrintDuplexMode returns the union data inside the MicrosoftGraphPrintJobConfiguration_DuplexMode as a MicrosoftGraphPrintDuplexMode
func (t MicrosoftGraphPrintJobConfiguration_DuplexMode) AsMicrosoftGraphPrintDuplexMode() (MicrosoftGraphPrintDuplexMode, error) {
	var body MicrosoftGraphPrintDuplexMode
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphPrintDuplexMode overwrites any union data inside the MicrosoftGraphPrintJobConfiguration_DuplexMode as the provided MicrosoftGraphPrintDuplexMode
func (t *MicrosoftGraphPrintJobConfiguration_DuplexMode) FromMicrosoftGraphPrintDuplexMode(v MicrosoftGraphPrintDuplexMode) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphPrintDuplexMode performs a merge with any union data inside the MicrosoftGraphPrintJobConfiguration_DuplexMode, using the provided MicrosoftGraphPrintDuplexMode
func (t *MicrosoftGraphPrintJobConfiguration_DuplexMode) MergeMicrosoftGraphPrintDuplexMode(v MicrosoftGraphPrintDuplexMode) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsMicrosoftGraphPrintJobConfigurationDuplexMode1 returns the union data inside the MicrosoftGraphPrintJobConfiguration_DuplexMode as a MicrosoftGraphPrintJobConfigurationDuplexMode1
func (t MicrosoftGraphPrintJobConfiguration_DuplexMode) AsMicrosoftGraphPrintJobConfigurationDuplexMode1() (MicrosoftGraphPrintJobConfigurationDuplexMode1, error) {
	var body MicrosoftGraphPrintJobConfigurationDuplexMode1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphPrintJobConfigurationDuplexMode1 overwrites any union data inside the MicrosoftGraphPrintJobConfiguration_DuplexMode as the provided MicrosoftGraphPrintJobConfigurationDuplexMode1
func (t *MicrosoftGraphPrintJobConfiguration_DuplexMode) FromMicrosoftGraphPrintJobConfigurationDuplexMode1(v MicrosoftGraphPrintJobConfigurationDuplexMode1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphPrintJobConfigurationDuplexMode1 performs a merge with any union data inside the MicrosoftGraphPrintJobConfiguration_DuplexMode, using the provided MicrosoftGraphPrintJobConfigurationDuplexMode1
func (t *MicrosoftGraphPrintJobConfiguration_DuplexMode) MergeMicrosoftGraphPrintJobConfigurationDuplexMode1(v MicrosoftGraphPrintJobConfigurationDuplexMode1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

func (t MicrosoftGraphPrintJobConfiguration_DuplexMode) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *MicrosoftGraphPrintJobConfiguration_DuplexMode) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsMicrosoftGraphPrinterFeedOrientation returns the union data inside the MicrosoftGraphPrintJobConfiguration_FeedOrientation as a MicrosoftGraphPrinterFeedOrientation
func (t MicrosoftGraphPrintJobConfiguration_FeedOrientation) AsMicrosoftGraphPrinterFeedOrientation() (MicrosoftGraphPrinterFeedOrientation, error) {
	var body MicrosoftGraphPrinterFeedOrientation
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphPrinterFeedOrientation overwrites any union data inside the MicrosoftGraphPrintJobConfiguration_FeedOrientation as the provided MicrosoftGraphPrinterFeedOrientation
func (t *MicrosoftGraphPrintJobConfiguration_FeedOrientation) FromMicrosoftGraphPrinterFeedOrientation(v MicrosoftGraphPrinterFeedOrientation) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphPrinterFeedOrientation performs a merge with any union data inside the MicrosoftGraphPrintJobConfiguration_FeedOrientation, using the provided MicrosoftGraphPrinterFeedOrientation
func (t *MicrosoftGraphPrintJobConfiguration_FeedOrientation) MergeMicrosoftGraphPrinterFeedOrientation(v MicrosoftGraphPrinterFeedOrientation) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsMicrosoftGraphPrintJobConfigurationFeedOrientation1 returns the union data inside the MicrosoftGraphPrintJobConfiguration_FeedOrientation as a MicrosoftGraphPrintJobConfigurationFeedOrientation1
func (t MicrosoftGraphPrintJobConfiguration_FeedOrientation) AsMicrosoftGraphPrintJobConfigurationFeedOrientation1() (MicrosoftGraphPrintJobConfigurationFeedOrientation1, error) {
	var body MicrosoftGraphPrintJobConfigurationFeedOrientation1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphPrintJobConfigurationFeedOrientation1 overwrites any union data inside the MicrosoftGraphPrintJobConfiguration_FeedOrientation as the provided MicrosoftGraphPrintJobConfigurationFeedOrientation1
func (t *MicrosoftGraphPrintJobConfiguration_FeedOrientation) FromMicrosoftGraphPrintJobConfigurationFeedOrientation1(v MicrosoftGraphPrintJobConfigurationFeedOrientation1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphPrintJobConfigurationFeedOrientation1 performs a merge with any union data inside the MicrosoftGraphPrintJobConfiguration_FeedOrientation, using the provided MicrosoftGraphPrintJobConfigurationFeedOrientation1
func (t *MicrosoftGraphPrintJobConfiguration_FeedOrientation) MergeMicrosoftGraphPrintJobConfigurationFeedOrientation1(v MicrosoftGraphPrintJobConfigurationFeedOrientation1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

func (t MicrosoftGraphPrintJobConfiguration_FeedOrientation) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *MicrosoftGraphPrintJobConfiguration_FeedOrientation) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsMicrosoftGraphPrintFinishing returns the union data inside the MicrosoftGraphPrintJobConfiguration_Finishings_Item as a MicrosoftGraphPrintFinishing
func (t MicrosoftGraphPrintJobConfiguration_Finishings_Item) AsMicrosoftGraphPrintFinishing() (MicrosoftGraphPrintFinishing, error) {
	var body MicrosoftGraphPrintFinishing
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphPrintFinishing overwrites any union data inside the MicrosoftGraphPrintJobConfiguration_Finishings_Item as the provided MicrosoftGraphPrintFinishing
func (t *MicrosoftGraphPrintJobConfiguration_Finishings_Item) FromMicrosoftGraphPrintFinishing(v MicrosoftGraphPrintFinishing) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphPrintFinishing performs a merge with any union data inside the MicrosoftGraphPrintJobConfiguration_Finishings_Item, using the provided MicrosoftGraphPrintFinishing
func (t *MicrosoftGraphPrintJobConfiguration_Finishings_Item) MergeMicrosoftGraphPrintFinishing(v MicrosoftGraphPrintFinishing) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsMicrosoftGraphPrintJobConfigurationFinishings1 returns the union data inside the MicrosoftGraphPrintJobConfiguration_Finishings_Item as a MicrosoftGraphPrintJobConfigurationFinishings1
func (t MicrosoftGraphPrintJobConfiguration_Finishings_Item) AsMicrosoftGraphPrintJobConfigurationFinishings1() (MicrosoftGraphPrintJobConfigurationFinishings1, error) {
	var body MicrosoftGraphPrintJobConfigurationFinishings1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphPrintJobConfigurationFinishings1 overwrites any union data inside the MicrosoftGraphPrintJobConfiguration_Finishings_Item as the provided MicrosoftGraphPrintJobConfigurationFinishings1
func (t *MicrosoftGraphPrintJobConfiguration_Finishings_Item) FromMicrosoftGraphPrintJobConfigurationFinishings1(v MicrosoftGraphPrintJobConfigurationFinishings1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphPrintJobConfigurationFinishings1 performs a merge with any union data inside the MicrosoftGraphPrintJobConfiguration_Finishings_Item, using the provided MicrosoftGraphPrintJobConfigurationFinishings1
func (t *MicrosoftGraphPrintJobConfiguration_Finishings_Item) MergeMicrosoftGraphPrintJobConfigurationFinishings1(v MicrosoftGraphPrintJobConfigurationFinishings1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

func (t MicrosoftGraphPrintJobConfiguration_Finishings_Item) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *MicrosoftGraphPrintJobConfiguration_Finishings_Item) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsMicrosoftGraphPrintMargin returns the union data inside the MicrosoftGraphPrintJobConfiguration_Margin as a MicrosoftGraphPrintMargin
func (t MicrosoftGraphPrintJobConfiguration_Margin) AsMicrosoftGraphPrintMargin() (MicrosoftGraphPrintMargin, error) {
	var body MicrosoftGraphPrintMargin
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphPrintMargin overwrites any union data inside the MicrosoftGraphPrintJobConfiguration_Margin as the provided MicrosoftGraphPrintMargin
func (t *MicrosoftGraphPrintJobConfiguration_Margin) FromMicrosoftGraphPrintMargin(v MicrosoftGraphPrintMargin) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphPrintMargin performs a merge with any union data inside the MicrosoftGraphPrintJobConfiguration_Margin, using the provided MicrosoftGraphPrintMargin
func (t *MicrosoftGraphPrintJobConfiguration_Margin) MergeMicrosoftGraphPrintMargin(v MicrosoftGraphPrintMargin) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsMicrosoftGraphPrintJobConfigurationMargin1 returns the union data inside the MicrosoftGraphPrintJobConfiguration_Margin as a MicrosoftGraphPrintJobConfigurationMargin1
func (t MicrosoftGraphPrintJobConfiguration_Margin) AsMicrosoftGraphPrintJobConfigurationMargin1() (MicrosoftGraphPrintJobConfigurationMargin1, error) {
	var body MicrosoftGraphPrintJobConfigurationMargin1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphPrintJobConfigurationMargin1 overwrites any union data inside the MicrosoftGraphPrintJobConfiguration_Margin as the provided MicrosoftGraphPrintJobConfigurationMargin1
func (t *MicrosoftGraphPrintJobConfiguration_Margin) FromMicrosoftGraphPrintJobConfigurationMargin1(v MicrosoftGraphPrintJobConfigurationMargin1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphPrintJobConfigurationMargin1 performs a merge with any union data inside the MicrosoftGraphPrintJobConfiguration_Margin, using the provided MicrosoftGraphPrintJobConfigurationMargin1
func (t *MicrosoftGraphPrintJobConfiguration_Margin) MergeMicrosoftGraphPrintJobConfigurationMargin1(v MicrosoftGraphPrintJobConfigurationMargin1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

func (t MicrosoftGraphPrintJobConfiguration_Margin) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *MicrosoftGraphPrintJobConfiguration_Margin) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsMicrosoftGraphPrintMultipageLayout returns the union data inside the MicrosoftGraphPrintJobConfiguration_MultipageLayout as a MicrosoftGraphPrintMultipageLayout
func (t MicrosoftGraphPrintJobConfiguration_MultipageLayout) AsMicrosoftGraphPrintMultipageLayout() (MicrosoftGraphPrintMultipageLayout, error) {
	var body MicrosoftGraphPrintMultipageLayout
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphPrintMultipageLayout overwrites any union data inside the MicrosoftGraphPrintJobConfiguration_MultipageLayout as the provided MicrosoftGraphPrintMultipageLayout
func (t *MicrosoftGraphPrintJobConfiguration_MultipageLayout) FromMicrosoftGraphPrintMultipageLayout(v MicrosoftGraphPrintMultipageLayout) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphPrintMultipageLayout performs a merge with any union data inside the MicrosoftGraphPrintJobConfiguration_MultipageLayout, using the provided MicrosoftGraphPrintMultipageLayout
func (t *MicrosoftGraphPrintJobConfiguration_MultipageLayout) MergeMicrosoftGraphPrintMultipageLayout(v MicrosoftGraphPrintMultipageLayout) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsMicrosoftGraphPrintJobConfigurationMultipageLayout1 returns the union data inside the MicrosoftGraphPrintJobConfiguration_MultipageLayout as a MicrosoftGraphPrintJobConfigurationMultipageLayout1
func (t MicrosoftGraphPrintJobConfiguration_MultipageLayout) AsMicrosoftGraphPrintJobConfigurationMultipageLayout1() (MicrosoftGraphPrintJobConfigurationMultipageLayout1, error) {
	var body MicrosoftGraphPrintJobConfigurationMultipageLayout1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphPrintJobConfigurationMultipageLayout1 overwrites any union data inside the MicrosoftGraphPrintJobConfiguration_MultipageLayout as the provided MicrosoftGraphPrintJobConfigurationMultipageLayout1
func (t *MicrosoftGraphPrintJobConfiguration_MultipageLayout) FromMicrosoftGraphPrintJobConfigurationMultipageLayout1(v MicrosoftGraphPrintJobConfigurationMultipageLayout1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphPrintJobConfigurationMultipageLayout1 performs a merge with any union data inside the MicrosoftGraphPrintJobConfiguration_MultipageLayout, using the provided MicrosoftGraphPrintJobConfigurationMultipageLayout1
func (t *MicrosoftGraphPrintJobConfiguration_MultipageLayout) MergeMicrosoftGraphPrintJobConfigurationMultipageLayout1(v MicrosoftGraphPrintJobConfigurationMultipageLayout1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

func (t MicrosoftGraphPrintJobConfiguration_MultipageLayout) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *MicrosoftGraphPrintJobConfiguration_MultipageLayout) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsMicrosoftGraphPrintOrientation returns the union data inside the MicrosoftGraphPrintJobConfiguration_Orientation as a MicrosoftGraphPrintOrientation
func (t MicrosoftGraphPrintJobConfiguration_Orientation) AsMicrosoftGraphPrintOrientation() (MicrosoftGraphPrintOrientation, error) {
	var body MicrosoftGraphPrintOrientation
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphPrintOrientation overwrites any union data inside the MicrosoftGraphPrintJobConfiguration_Orientation as the provided MicrosoftGraphPrintOrientation
func (t *MicrosoftGraphPrintJobConfiguration_Orientation) FromMicrosoftGraphPrintOrientation(v MicrosoftGraphPrintOrientation) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphPrintOrientation performs a merge with any union data inside the MicrosoftGraphPrintJobConfiguration_Orientation, using the provided MicrosoftGraphPrintOrientation
func (t *MicrosoftGraphPrintJobConfiguration_Orientation) MergeMicrosoftGraphPrintOrientation(v MicrosoftGraphPrintOrientation) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsMicrosoftGraphPrintJobConfigurationOrientation1 returns the union data inside the MicrosoftGraphPrintJobConfiguration_Orientation as a MicrosoftGraphPrintJobConfigurationOrientation1
func (t MicrosoftGraphPrintJobConfiguration_Orientation) AsMicrosoftGraphPrintJobConfigurationOrientation1() (MicrosoftGraphPrintJobConfigurationOrientation1, error) {
	var body MicrosoftGraphPrintJobConfigurationOrientation1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphPrintJobConfigurationOrientation1 overwrites any union data inside the MicrosoftGraphPrintJobConfiguration_Orientation as the provided MicrosoftGraphPrintJobConfigurationOrientation1
func (t *MicrosoftGraphPrintJobConfiguration_Orientation) FromMicrosoftGraphPrintJobConfigurationOrientation1(v MicrosoftGraphPrintJobConfigurationOrientation1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphPrintJobConfigurationOrientation1 performs a merge with any union data inside the MicrosoftGraphPrintJobConfiguration_Orientation, using the provided MicrosoftGraphPrintJobConfigurationOrientation1
func (t *MicrosoftGraphPrintJobConfiguration_Orientation) MergeMicrosoftGraphPrintJobConfigurationOrientation1(v MicrosoftGraphPrintJobConfigurationOrientation1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

func (t MicrosoftGraphPrintJobConfiguration_Orientation) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *MicrosoftGraphPrintJobConfiguration_Orientation) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsMicrosoftGraphIntegerRange returns the union data inside the MicrosoftGraphPrintJobConfiguration_PageRanges_Item as a MicrosoftGraphIntegerRange
func (t MicrosoftGraphPrintJobConfiguration_PageRanges_Item) AsMicrosoftGraphIntegerRange() (MicrosoftGraphIntegerRange, error) {
	var body MicrosoftGraphIntegerRange
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphIntegerRange overwrites any union data inside the MicrosoftGraphPrintJobConfiguration_PageRanges_Item as the provided MicrosoftGraphIntegerRange
func (t *MicrosoftGraphPrintJobConfiguration_PageRanges_Item) FromMicrosoftGraphIntegerRange(v MicrosoftGraphIntegerRange) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphIntegerRange performs a merge with any union data inside the MicrosoftGraphPrintJobConfiguration_PageRanges_Item, using the provided MicrosoftGraphIntegerRange
func (t *MicrosoftGraphPrintJobConfiguration_PageRanges_Item) MergeMicrosoftGraphIntegerRange(v MicrosoftGraphIntegerRange) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsMicrosoftGraphPrintJobConfigurationPageRanges1 returns the union data inside the MicrosoftGraphPrintJobConfiguration_PageRanges_Item as a MicrosoftGraphPrintJobConfigurationPageRanges1
func (t MicrosoftGraphPrintJobConfiguration_PageRanges_Item) AsMicrosoftGraphPrintJobConfigurationPageRanges1() (MicrosoftGraphPrintJobConfigurationPageRanges1, error) {
	var body MicrosoftGraphPrintJobConfigurationPageRanges1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphPrintJobConfigurationPageRanges1 overwrites any union data inside the MicrosoftGraphPrintJobConfiguration_PageRanges_Item as the provided MicrosoftGraphPrintJobConfigurationPageRanges1
func (t *MicrosoftGraphPrintJobConfiguration_PageRanges_Item) FromMicrosoftGraphPrintJobConfigurationPageRanges1(v MicrosoftGraphPrintJobConfigurationPageRanges1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphPrintJobConfigurationPageRanges1 performs a merge with any union data inside the MicrosoftGraphPrintJobConfiguration_PageRanges_Item, using the provided MicrosoftGraphPrintJobConfigurationPageRanges1
func (t *MicrosoftGraphPrintJobConfiguration_PageRanges_Item) MergeMicrosoftGraphPrintJobConfigurationPageRanges1(v MicrosoftGraphPrintJobConfigurationPageRanges1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

func (t MicrosoftGraphPrintJobConfiguration_PageRanges_Item) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *MicrosoftGraphPrintJobConfiguration_PageRanges_Item) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsMicrosoftGraphPrintQuality returns the union data inside the MicrosoftGraphPrintJobConfiguration_Quality as a MicrosoftGraphPrintQuality
func (t MicrosoftGraphPrintJobConfiguration_Quality) AsMicrosoftGraphPrintQuality() (MicrosoftGraphPrintQuality, error) {
	var body MicrosoftGraphPrintQuality
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphPrintQuality overwrites any union data inside the MicrosoftGraphPrintJobConfiguration_Quality as the provided MicrosoftGraphPrintQuality
func (t *MicrosoftGraphPrintJobConfiguration_Quality) FromMicrosoftGraphPrintQuality(v MicrosoftGraphPrintQuality) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphPrintQuality performs a merge with any union data inside the MicrosoftGraphPrintJobConfiguration_Quality, using the provided MicrosoftGraphPrintQuality
func (t *MicrosoftGraphPrintJobConfiguration_Quality) MergeMicrosoftGraphPrintQuality(v MicrosoftGraphPrintQuality) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsMicrosoftGraphPrintJobConfigurationQuality1 returns the union data inside the MicrosoftGraphPrintJobConfiguration_Quality as a MicrosoftGraphPrintJobConfigurationQuality1
func (t MicrosoftGraphPrintJobConfiguration_Quality) AsMicrosoftGraphPrintJobConfigurationQuality1() (MicrosoftGraphPrintJobConfigurationQuality1, error) {
	var body MicrosoftGraphPrintJobConfigurationQuality1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphPrintJobConfigurationQuality1 overwrites any union data inside the MicrosoftGraphPrintJobConfiguration_Quality as the provided MicrosoftGraphPrintJobConfigurationQuality1
func (t *MicrosoftGraphPrintJobConfiguration_Quality) FromMicrosoftGraphPrintJobConfigurationQuality1(v MicrosoftGraphPrintJobConfigurationQuality1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphPrintJobConfigurationQuality1 performs a merge with any union data inside the MicrosoftGraphPrintJobConfiguration_Quality, using the provided MicrosoftGraphPrintJobConfigurationQuality1
func (t *MicrosoftGraphPrintJobConfiguration_Quality) MergeMicrosoftGraphPrintJobConfigurationQuality1(v MicrosoftGraphPrintJobConfigurationQuality1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

func (t MicrosoftGraphPrintJobConfiguration_Quality) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *MicrosoftGraphPrintJobConfiguration_Quality) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsMicrosoftGraphPrintScaling returns the union data inside the MicrosoftGraphPrintJobConfiguration_Scaling as a MicrosoftGraphPrintScaling
func (t MicrosoftGraphPrintJobConfiguration_Scaling) AsMicrosoftGraphPrintScaling() (MicrosoftGraphPrintScaling, error) {
	var body MicrosoftGraphPrintScaling
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphPrintScaling overwrites any union data inside the MicrosoftGraphPrintJobConfiguration_Scaling as the provided MicrosoftGraphPrintScaling
func (t *MicrosoftGraphPrintJobConfiguration_Scaling) FromMicrosoftGraphPrintScaling(v MicrosoftGraphPrintScaling) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphPrintScaling performs a merge with any union data inside the MicrosoftGraphPrintJobConfiguration_Scaling, using the provided MicrosoftGraphPrintScaling
func (t *MicrosoftGraphPrintJobConfiguration_Scaling) MergeMicrosoftGraphPrintScaling(v MicrosoftGraphPrintScaling) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsMicrosoftGraphPrintJobConfigurationScaling1 returns the union data inside the MicrosoftGraphPrintJobConfiguration_Scaling as a MicrosoftGraphPrintJobConfigurationScaling1
func (t MicrosoftGraphPrintJobConfiguration_Scaling) AsMicrosoftGraphPrintJobConfigurationScaling1() (MicrosoftGraphPrintJobConfigurationScaling1, error) {
	var body MicrosoftGraphPrintJobConfigurationScaling1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphPrintJobConfigurationScaling1 overwrites any union data inside the MicrosoftGraphPrintJobConfiguration_Scaling as the provided MicrosoftGraphPrintJobConfigurationScaling1
func (t *MicrosoftGraphPrintJobConfiguration_Scaling) FromMicrosoftGraphPrintJobConfigurationScaling1(v MicrosoftGraphPrintJobConfigurationScaling1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphPrintJobConfigurationScaling1 performs a merge with any union data inside the MicrosoftGraphPrintJobConfiguration_Scaling, using the provided MicrosoftGraphPrintJobConfigurationScaling1
func (t *MicrosoftGraphPrintJobConfiguration_Scaling) MergeMicrosoftGraphPrintJobConfigurationScaling1(v MicrosoftGraphPrintJobConfigurationScaling1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

func (t MicrosoftGraphPrintJobConfiguration_Scaling) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *MicrosoftGraphPrintJobConfiguration_Scaling) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsMicrosoftGraphPrinterCapabilities returns the union data inside the MicrosoftGraphPrinter_Capabilities as a MicrosoftGraphPrinterCapabilities
func (t MicrosoftGraphPrinter_Capabilities) AsMicrosoftGraphPrinterCapabilities() (MicrosoftGraphPrinterCapabilities, error) {
	var body MicrosoftGraphPrinterCapabilities
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphPrinterCapabilities overwrites any union data inside the MicrosoftGraphPrinter_Capabilities as the provided MicrosoftGraphPrinterCapabilities
func (t *MicrosoftGraphPrinter_Capabilities) FromMicrosoftGraphPrinterCapabilities(v MicrosoftGraphPrinterCapabilities) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphPrinterCapabilities performs a merge with any union data inside the MicrosoftGraphPrinter_Capabilities, using the provided MicrosoftGraphPrinterCapabilities
func (t *MicrosoftGraphPrinter_Capabilities) MergeMicrosoftGraphPrinterCapabilities(v MicrosoftGraphPrinterCapabilities) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsMicrosoftGraphPrinterCapabilities1 returns the union data inside the MicrosoftGraphPrinter_Capabilities as a MicrosoftGraphPrinterCapabilities1
func (t MicrosoftGraphPrinter_Capabilities) AsMicrosoftGraphPrinterCapabilities1() (MicrosoftGraphPrinterCapabilities1, error) {
	var body MicrosoftGraphPrinterCapabilities1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphPrinterCapabilities1 overwrites any union data inside the MicrosoftGraphPrinter_Capabilities as the provided MicrosoftGraphPrinterCapabilities1
func (t *MicrosoftGraphPrinter_Capabilities) FromMicrosoftGraphPrinterCapabilities1(v MicrosoftGraphPrinterCapabilities1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphPrinterCapabilities1 performs a merge with any union data inside the MicrosoftGraphPrinter_Capabilities, using the provided MicrosoftGraphPrinterCapabilities1
func (t *MicrosoftGraphPrinter_Capabilities) MergeMicrosoftGraphPrinterCapabilities1(v MicrosoftGraphPrinterCapabilities1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

func (t MicrosoftGraphPrinter_Capabilities) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *MicrosoftGraphPrinter_Capabilities) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsMicrosoftGraphPrinterDefaults returns the union data inside the MicrosoftGraphPrinter_Defaults as a MicrosoftGraphPrinterDefaults
func (t MicrosoftGraphPrinter_Defaults) AsMicrosoftGraphPrinterDefaults() (MicrosoftGraphPrinterDefaults, error) {
	var body MicrosoftGraphPrinterDefaults
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphPrinterDefaults overwrites any union data inside the MicrosoftGraphPrinter_Defaults as the provided MicrosoftGraphPrinterDefaults
func (t *MicrosoftGraphPrinter_Defaults) FromMicrosoftGraphPrinterDefaults(v MicrosoftGraphPrinterDefaults) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphPrinterDefaults performs a merge with any union data inside the MicrosoftGraphPrinter_Defaults, using the provided MicrosoftGraphPrinterDefaults
func (t *MicrosoftGraphPrinter_Defaults) MergeMicrosoftGraphPrinterDefaults(v MicrosoftGraphPrinterDefaults) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsMicrosoftGraphPrinterDefaults1 returns the union data inside the MicrosoftGraphPrinter_Defaults as a MicrosoftGraphPrinterDefaults1
func (t MicrosoftGraphPrinter_Defaults) AsMicrosoftGraphPrinterDefaults1() (MicrosoftGraphPrinterDefaults1, error) {
	var body MicrosoftGraphPrinterDefaults1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphPrinterDefaults1 overwrites any union data inside the MicrosoftGraphPrinter_Defaults as the provided MicrosoftGraphPrinterDefaults1
func (t *MicrosoftGraphPrinter_Defaults) FromMicrosoftGraphPrinterDefaults1(v MicrosoftGraphPrinterDefaults1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphPrinterDefaults1 performs a merge with any union data inside the MicrosoftGraphPrinter_Defaults, using the provided MicrosoftGraphPrinterDefaults1
func (t *MicrosoftGraphPrinter_Defaults) MergeMicrosoftGraphPrinterDefaults1(v MicrosoftGraphPrinterDefaults1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

func (t MicrosoftGraphPrinter_Defaults) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *MicrosoftGraphPrinter_Defaults) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsMicrosoftGraphPrinterLocation returns the union data inside the MicrosoftGraphPrinter_Location as a MicrosoftGraphPrinterLocation
func (t MicrosoftGraphPrinter_Location) AsMicrosoftGraphPrinterLocation() (MicrosoftGraphPrinterLocation, error) {
	var body MicrosoftGraphPrinterLocation
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphPrinterLocation overwrites any union data inside the MicrosoftGraphPrinter_Location as the provided MicrosoftGraphPrinterLocation
func (t *MicrosoftGraphPrinter_Location) FromMicrosoftGraphPrinterLocation(v MicrosoftGraphPrinterLocation) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphPrinterLocation performs a merge with any union data inside the MicrosoftGraphPrinter_Location, using the provided MicrosoftGraphPrinterLocation
func (t *MicrosoftGraphPrinter_Location) MergeMicrosoftGraphPrinterLocation(v MicrosoftGraphPrinterLocation) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsMicrosoftGraphPrinterLocation1 returns the union data inside the MicrosoftGraphPrinter_Location as a MicrosoftGraphPrinterLocation1
func (t MicrosoftGraphPrinter_Location) AsMicrosoftGraphPrinterLocation1() (MicrosoftGraphPrinterLocation1, error) {
	var body MicrosoftGraphPrinterLocation1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphPrinterLocation1 overwrites any union data inside the MicrosoftGraphPrinter_Location as the provided MicrosoftGraphPrinterLocation1
func (t *MicrosoftGraphPrinter_Location) FromMicrosoftGraphPrinterLocation1(v MicrosoftGraphPrinterLocation1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphPrinterLocation1 performs a merge with any union data inside the MicrosoftGraphPrinter_Location, using the provided MicrosoftGraphPrinterLocation1
func (t *MicrosoftGraphPrinter_Location) MergeMicrosoftGraphPrinterLocation1(v MicrosoftGraphPrinterLocation1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

func (t MicrosoftGraphPrinter_Location) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *MicrosoftGraphPrinter_Location) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsMicrosoftGraphPrinterCapabilities returns the union data inside the MicrosoftGraphPrinterBase_Capabilities as a MicrosoftGraphPrinterCapabilities
func (t MicrosoftGraphPrinterBase_Capabilities) AsMicrosoftGraphPrinterCapabilities() (MicrosoftGraphPrinterCapabilities, error) {
	var body MicrosoftGraphPrinterCapabilities
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphPrinterCapabilities overwrites any union data inside the MicrosoftGraphPrinterBase_Capabilities as the provided MicrosoftGraphPrinterCapabilities
func (t *MicrosoftGraphPrinterBase_Capabilities) FromMicrosoftGraphPrinterCapabilities(v MicrosoftGraphPrinterCapabilities) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphPrinterCapabilities performs a merge with any union data inside the MicrosoftGraphPrinterBase_Capabilities, using the provided MicrosoftGraphPrinterCapabilities
func (t *MicrosoftGraphPrinterBase_Capabilities) MergeMicrosoftGraphPrinterCapabilities(v MicrosoftGraphPrinterCapabilities) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsMicrosoftGraphPrinterBaseCapabilities1 returns the union data inside the MicrosoftGraphPrinterBase_Capabilities as a MicrosoftGraphPrinterBaseCapabilities1
func (t MicrosoftGraphPrinterBase_Capabilities) AsMicrosoftGraphPrinterBaseCapabilities1() (MicrosoftGraphPrinterBaseCapabilities1, error) {
	var body MicrosoftGraphPrinterBaseCapabilities1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphPrinterBaseCapabilities1 overwrites any union data inside the MicrosoftGraphPrinterBase_Capabilities as the provided MicrosoftGraphPrinterBaseCapabilities1
func (t *MicrosoftGraphPrinterBase_Capabilities) FromMicrosoftGraphPrinterBaseCapabilities1(v MicrosoftGraphPrinterBaseCapabilities1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphPrinterBaseCapabilities1 performs a merge with any union data inside the MicrosoftGraphPrinterBase_Capabilities, using the provided MicrosoftGraphPrinterBaseCapabilities1
func (t *MicrosoftGraphPrinterBase_Capabilities) MergeMicrosoftGraphPrinterBaseCapabilities1(v MicrosoftGraphPrinterBaseCapabilities1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

func (t MicrosoftGraphPrinterBase_Capabilities) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *MicrosoftGraphPrinterBase_Capabilities) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsMicrosoftGraphPrinterDefaults returns the union data inside the MicrosoftGraphPrinterBase_Defaults as a MicrosoftGraphPrinterDefaults
func (t MicrosoftGraphPrinterBase_Defaults) AsMicrosoftGraphPrinterDefaults() (MicrosoftGraphPrinterDefaults, error) {
	var body MicrosoftGraphPrinterDefaults
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphPrinterDefaults overwrites any union data inside the MicrosoftGraphPrinterBase_Defaults as the provided MicrosoftGraphPrinterDefaults
func (t *MicrosoftGraphPrinterBase_Defaults) FromMicrosoftGraphPrinterDefaults(v MicrosoftGraphPrinterDefaults) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphPrinterDefaults performs a merge with any union data inside the MicrosoftGraphPrinterBase_Defaults, using the provided MicrosoftGraphPrinterDefaults
func (t *MicrosoftGraphPrinterBase_Defaults) MergeMicrosoftGraphPrinterDefaults(v MicrosoftGraphPrinterDefaults) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsMicrosoftGraphPrinterBaseDefaults1 returns the union data inside the MicrosoftGraphPrinterBase_Defaults as a MicrosoftGraphPrinterBaseDefaults1
func (t MicrosoftGraphPrinterBase_Defaults) AsMicrosoftGraphPrinterBaseDefaults1() (MicrosoftGraphPrinterBaseDefaults1, error) {
	var body MicrosoftGraphPrinterBaseDefaults1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphPrinterBaseDefaults1 overwrites any union data inside the MicrosoftGraphPrinterBase_Defaults as the provided MicrosoftGraphPrinterBaseDefaults1
func (t *MicrosoftGraphPrinterBase_Defaults) FromMicrosoftGraphPrinterBaseDefaults1(v MicrosoftGraphPrinterBaseDefaults1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphPrinterBaseDefaults1 performs a merge with any union data inside the MicrosoftGraphPrinterBase_Defaults, using the provided MicrosoftGraphPrinterBaseDefaults1
func (t *MicrosoftGraphPrinterBase_Defaults) MergeMicrosoftGraphPrinterBaseDefaults1(v MicrosoftGraphPrinterBaseDefaults1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

func (t MicrosoftGraphPrinterBase_Defaults) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *MicrosoftGraphPrinterBase_Defaults) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsMicrosoftGraphPrinterLocation returns the union data inside the MicrosoftGraphPrinterBase_Location as a MicrosoftGraphPrinterLocation
func (t MicrosoftGraphPrinterBase_Location) AsMicrosoftGraphPrinterLocation() (MicrosoftGraphPrinterLocation, error) {
	var body MicrosoftGraphPrinterLocation
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphPrinterLocation overwrites any union data inside the MicrosoftGraphPrinterBase_Location as the provided MicrosoftGraphPrinterLocation
func (t *MicrosoftGraphPrinterBase_Location) FromMicrosoftGraphPrinterLocation(v MicrosoftGraphPrinterLocation) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphPrinterLocation performs a merge with any union data inside the MicrosoftGraphPrinterBase_Location, using the provided MicrosoftGraphPrinterLocation
func (t *MicrosoftGraphPrinterBase_Location) MergeMicrosoftGraphPrinterLocation(v MicrosoftGraphPrinterLocation) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsMicrosoftGraphPrinterBaseLocation1 returns the union data inside the MicrosoftGraphPrinterBase_Location as a MicrosoftGraphPrinterBaseLocation1
func (t MicrosoftGraphPrinterBase_Location) AsMicrosoftGraphPrinterBaseLocation1() (MicrosoftGraphPrinterBaseLocation1, error) {
	var body MicrosoftGraphPrinterBaseLocation1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphPrinterBaseLocation1 overwrites any union data inside the MicrosoftGraphPrinterBase_Location as the provided MicrosoftGraphPrinterBaseLocation1
func (t *MicrosoftGraphPrinterBase_Location) FromMicrosoftGraphPrinterBaseLocation1(v MicrosoftGraphPrinterBaseLocation1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphPrinterBaseLocation1 performs a merge with any union data inside the MicrosoftGraphPrinterBase_Location, using the provided MicrosoftGraphPrinterBaseLocation1
func (t *MicrosoftGraphPrinterBase_Location) MergeMicrosoftGraphPrinterBaseLocation1(v MicrosoftGraphPrinterBaseLocation1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

func (t MicrosoftGraphPrinterBase_Location) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *MicrosoftGraphPrinterBase_Location) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsMicrosoftGraphPrintColorMode returns the union data inside the MicrosoftGraphPrinterCapabilities_ColorModes_Item as a MicrosoftGraphPrintColorMode
func (t MicrosoftGraphPrinterCapabilities_ColorModes_Item) AsMicrosoftGraphPrintColorMode() (MicrosoftGraphPrintColorMode, error) {
	var body MicrosoftGraphPrintColorMode
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphPrintColorMode overwrites any union data inside the MicrosoftGraphPrinterCapabilities_ColorModes_Item as the provided MicrosoftGraphPrintColorMode
func (t *MicrosoftGraphPrinterCapabilities_ColorModes_Item) FromMicrosoftGraphPrintColorMode(v MicrosoftGraphPrintColorMode) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphPrintColorMode performs a merge with any union data inside the MicrosoftGraphPrinterCapabilities_ColorModes_Item, using the provided MicrosoftGraphPrintColorMode
func (t *MicrosoftGraphPrinterCapabilities_ColorModes_Item) MergeMicrosoftGraphPrintColorMode(v MicrosoftGraphPrintColorMode) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsMicrosoftGraphPrinterCapabilitiesColorModes1 returns the union data inside the MicrosoftGraphPrinterCapabilities_ColorModes_Item as a MicrosoftGraphPrinterCapabilitiesColorModes1
func (t MicrosoftGraphPrinterCapabilities_ColorModes_Item) AsMicrosoftGraphPrinterCapabilitiesColorModes1() (MicrosoftGraphPrinterCapabilitiesColorModes1, error) {
	var body MicrosoftGraphPrinterCapabilitiesColorModes1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphPrinterCapabilitiesColorModes1 overwrites any union data inside the MicrosoftGraphPrinterCapabilities_ColorModes_Item as the provided MicrosoftGraphPrinterCapabilitiesColorModes1
func (t *MicrosoftGraphPrinterCapabilities_ColorModes_Item) FromMicrosoftGraphPrinterCapabilitiesColorModes1(v MicrosoftGraphPrinterCapabilitiesColorModes1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphPrinterCapabilitiesColorModes1 performs a merge with any union data inside the MicrosoftGraphPrinterCapabilities_ColorModes_Item, using the provided MicrosoftGraphPrinterCapabilitiesColorModes1
func (t *MicrosoftGraphPrinterCapabilities_ColorModes_Item) MergeMicrosoftGraphPrinterCapabilitiesColorModes1(v MicrosoftGraphPrinterCapabilitiesColorModes1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

func (t MicrosoftGraphPrinterCapabilities_ColorModes_Item) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *MicrosoftGraphPrinterCapabilities_ColorModes_Item) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsMicrosoftGraphIntegerRange returns the union data inside the MicrosoftGraphPrinterCapabilities_CopiesPerJob as a MicrosoftGraphIntegerRange
func (t MicrosoftGraphPrinterCapabilities_CopiesPerJob) AsMicrosoftGraphIntegerRange() (MicrosoftGraphIntegerRange, error) {
	var body MicrosoftGraphIntegerRange
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphIntegerRange overwrites any union data inside the MicrosoftGraphPrinterCapabilities_CopiesPerJob as the provided MicrosoftGraphIntegerRange
func (t *MicrosoftGraphPrinterCapabilities_CopiesPerJob) FromMicrosoftGraphIntegerRange(v MicrosoftGraphIntegerRange) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphIntegerRange performs a merge with any union data inside the MicrosoftGraphPrinterCapabilities_CopiesPerJob, using the provided MicrosoftGraphIntegerRange
func (t *MicrosoftGraphPrinterCapabilities_CopiesPerJob) MergeMicrosoftGraphIntegerRange(v MicrosoftGraphIntegerRange) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsMicrosoftGraphPrinterCapabilitiesCopiesPerJob1 returns the union data inside the MicrosoftGraphPrinterCapabilities_CopiesPerJob as a MicrosoftGraphPrinterCapabilitiesCopiesPerJob1
func (t MicrosoftGraphPrinterCapabilities_CopiesPerJob) AsMicrosoftGraphPrinterCapabilitiesCopiesPerJob1() (MicrosoftGraphPrinterCapabilitiesCopiesPerJob1, error) {
	var body MicrosoftGraphPrinterCapabilitiesCopiesPerJob1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphPrinterCapabilitiesCopiesPerJob1 overwrites any union data inside the MicrosoftGraphPrinterCapabilities_CopiesPerJob as the provided MicrosoftGraphPrinterCapabilitiesCopiesPerJob1
func (t *MicrosoftGraphPrinterCapabilities_CopiesPerJob) FromMicrosoftGraphPrinterCapabilitiesCopiesPerJob1(v MicrosoftGraphPrinterCapabilitiesCopiesPerJob1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphPrinterCapabilitiesCopiesPerJob1 performs a merge with any union data inside the MicrosoftGraphPrinterCapabilities_CopiesPerJob, using the provided MicrosoftGraphPrinterCapabilitiesCopiesPerJob1
func (t *MicrosoftGraphPrinterCapabilities_CopiesPerJob) MergeMicrosoftGraphPrinterCapabilitiesCopiesPerJob1(v MicrosoftGraphPrinterCapabilitiesCopiesPerJob1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

func (t MicrosoftGraphPrinterCapabilities_CopiesPerJob) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *MicrosoftGraphPrinterCapabilities_CopiesPerJob) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsMicrosoftGraphPrintDuplexMode returns the union data inside the MicrosoftGraphPrinterCapabilities_DuplexModes_Item as a MicrosoftGraphPrintDuplexMode
func (t MicrosoftGraphPrinterCapabilities_DuplexModes_Item) AsMicrosoftGraphPrintDuplexMode() (MicrosoftGraphPrintDuplexMode, error) {
	var body MicrosoftGraphPrintDuplexMode
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphPrintDuplexMode overwrites any union data inside the MicrosoftGraphPrinterCapabilities_DuplexModes_Item as the provided MicrosoftGraphPrintDuplexMode
func (t *MicrosoftGraphPrinterCapabilities_DuplexModes_Item) FromMicrosoftGraphPrintDuplexMode(v MicrosoftGraphPrintDuplexMode) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphPrintDuplexMode performs a merge with any union data inside the MicrosoftGraphPrinterCapabilities_DuplexModes_Item, using the provided MicrosoftGraphPrintDuplexMode
func (t *MicrosoftGraphPrinterCapabilities_DuplexModes_Item) MergeMicrosoftGraphPrintDuplexMode(v MicrosoftGraphPrintDuplexMode) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsMicrosoftGraphPrinterCapabilitiesDuplexModes1 returns the union data inside the MicrosoftGraphPrinterCapabilities_DuplexModes_Item as a MicrosoftGraphPrinterCapabilitiesDuplexModes1
func (t MicrosoftGraphPrinterCapabilities_DuplexModes_Item) AsMicrosoftGraphPrinterCapabilitiesDuplexModes1() (MicrosoftGraphPrinterCapabilitiesDuplexModes1, error) {
	var body MicrosoftGraphPrinterCapabilitiesDuplexModes1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphPrinterCapabilitiesDuplexModes1 overwrites any union data inside the MicrosoftGraphPrinterCapabilities_DuplexModes_Item as the provided MicrosoftGraphPrinterCapabilitiesDuplexModes1
func (t *MicrosoftGraphPrinterCapabilities_DuplexModes_Item) FromMicrosoftGraphPrinterCapabilitiesDuplexModes1(v MicrosoftGraphPrinterCapabilitiesDuplexModes1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphPrinterCapabilitiesDuplexModes1 performs a merge with any union data inside the MicrosoftGraphPrinterCapabilities_DuplexModes_Item, using the provided MicrosoftGraphPrinterCapabilitiesDuplexModes1
func (t *MicrosoftGraphPrinterCapabilities_DuplexModes_Item) MergeMicrosoftGraphPrinterCapabilitiesDuplexModes1(v MicrosoftGraphPrinterCapabilitiesDuplexModes1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

func (t MicrosoftGraphPrinterCapabilities_DuplexModes_Item) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *MicrosoftGraphPrinterCapabilities_DuplexModes_Item) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsMicrosoftGraphPrinterFeedOrientation returns the union data inside the MicrosoftGraphPrinterCapabilities_FeedOrientations_Item as a MicrosoftGraphPrinterFeedOrientation
func (t MicrosoftGraphPrinterCapabilities_FeedOrientations_Item) AsMicrosoftGraphPrinterFeedOrientation() (MicrosoftGraphPrinterFeedOrientation, error) {
	var body MicrosoftGraphPrinterFeedOrientation
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphPrinterFeedOrientation overwrites any union data inside the MicrosoftGraphPrinterCapabilities_FeedOrientations_Item as the provided MicrosoftGraphPrinterFeedOrientation
func (t *MicrosoftGraphPrinterCapabilities_FeedOrientations_Item) FromMicrosoftGraphPrinterFeedOrientation(v MicrosoftGraphPrinterFeedOrientation) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphPrinterFeedOrientation performs a merge with any union data inside the MicrosoftGraphPrinterCapabilities_FeedOrientations_Item, using the provided MicrosoftGraphPrinterFeedOrientation
func (t *MicrosoftGraphPrinterCapabilities_FeedOrientations_Item) MergeMicrosoftGraphPrinterFeedOrientation(v MicrosoftGraphPrinterFeedOrientation) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsMicrosoftGraphPrinterCapabilitiesFeedOrientations1 returns the union data inside the MicrosoftGraphPrinterCapabilities_FeedOrientations_Item as a MicrosoftGraphPrinterCapabilitiesFeedOrientations1
func (t MicrosoftGraphPrinterCapabilities_FeedOrientations_Item) AsMicrosoftGraphPrinterCapabilitiesFeedOrientations1() (MicrosoftGraphPrinterCapabilitiesFeedOrientations1, error) {
	var body MicrosoftGraphPrinterCapabilitiesFeedOrientations1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphPrinterCapabilitiesFeedOrientations1 overwrites any union data inside the MicrosoftGraphPrinterCapabilities_FeedOrientations_Item as the provided MicrosoftGraphPrinterCapabilitiesFeedOrientations1
func (t *MicrosoftGraphPrinterCapabilities_FeedOrientations_Item) FromMicrosoftGraphPrinterCapabilitiesFeedOrientations1(v MicrosoftGraphPrinterCapabilitiesFeedOrientations1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphPrinterCapabilitiesFeedOrientations1 performs a merge with any union data inside the MicrosoftGraphPrinterCapabilities_FeedOrientations_Item, using the provided MicrosoftGraphPrinterCapabilitiesFeedOrientations1
func (t *MicrosoftGraphPrinterCapabilities_FeedOrientations_Item) MergeMicrosoftGraphPrinterCapabilitiesFeedOrientations1(v MicrosoftGraphPrinterCapabilitiesFeedOrientations1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

func (t MicrosoftGraphPrinterCapabilities_FeedOrientations_Item) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *MicrosoftGraphPrinterCapabilities_FeedOrientations_Item) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsMicrosoftGraphPrintFinishing returns the union data inside the MicrosoftGraphPrinterCapabilities_Finishings_Item as a MicrosoftGraphPrintFinishing
func (t MicrosoftGraphPrinterCapabilities_Finishings_Item) AsMicrosoftGraphPrintFinishing() (MicrosoftGraphPrintFinishing, error) {
	var body MicrosoftGraphPrintFinishing
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphPrintFinishing overwrites any union data inside the MicrosoftGraphPrinterCapabilities_Finishings_Item as the provided MicrosoftGraphPrintFinishing
func (t *MicrosoftGraphPrinterCapabilities_Finishings_Item) FromMicrosoftGraphPrintFinishing(v MicrosoftGraphPrintFinishing) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphPrintFinishing performs a merge with any union data inside the MicrosoftGraphPrinterCapabilities_Finishings_Item, using the provided MicrosoftGraphPrintFinishing
func (t *MicrosoftGraphPrinterCapabilities_Finishings_Item) MergeMicrosoftGraphPrintFinishing(v MicrosoftGraphPrintFinishing) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsMicrosoftGraphPrinterCapabilitiesFinishings1 returns the union data inside the MicrosoftGraphPrinterCapabilities_Finishings_Item as a MicrosoftGraphPrinterCapabilitiesFinishings1
func (t MicrosoftGraphPrinterCapabilities_Finishings_Item) AsMicrosoftGraphPrinterCapabilitiesFinishings1() (MicrosoftGraphPrinterCapabilitiesFinishings1, error) {
	var body MicrosoftGraphPrinterCapabilitiesFinishings1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphPrinterCapabilitiesFinishings1 overwrites any union data inside the MicrosoftGraphPrinterCapabilities_Finishings_Item as the provided MicrosoftGraphPrinterCapabilitiesFinishings1
func (t *MicrosoftGraphPrinterCapabilities_Finishings_Item) FromMicrosoftGraphPrinterCapabilitiesFinishings1(v MicrosoftGraphPrinterCapabilitiesFinishings1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphPrinterCapabilitiesFinishings1 performs a merge with any union data inside the MicrosoftGraphPrinterCapabilities_Finishings_Item, using the provided MicrosoftGraphPrinterCapabilitiesFinishings1
func (t *MicrosoftGraphPrinterCapabilities_Finishings_Item) MergeMicrosoftGraphPrinterCapabilitiesFinishings1(v MicrosoftGraphPrinterCapabilitiesFinishings1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

func (t MicrosoftGraphPrinterCapabilities_Finishings_Item) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *MicrosoftGraphPrinterCapabilities_Finishings_Item) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsMicrosoftGraphPrintMultipageLayout returns the union data inside the MicrosoftGraphPrinterCapabilities_MultipageLayouts_Item as a MicrosoftGraphPrintMultipageLayout
func (t MicrosoftGraphPrinterCapabilities_MultipageLayouts_Item) AsMicrosoftGraphPrintMultipageLayout() (MicrosoftGraphPrintMultipageLayout, error) {
	var body MicrosoftGraphPrintMultipageLayout
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphPrintMultipageLayout overwrites any union data inside the MicrosoftGraphPrinterCapabilities_MultipageLayouts_Item as the provided MicrosoftGraphPrintMultipageLayout
func (t *MicrosoftGraphPrinterCapabilities_MultipageLayouts_Item) FromMicrosoftGraphPrintMultipageLayout(v MicrosoftGraphPrintMultipageLayout) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphPrintMultipageLayout performs a merge with any union data inside the MicrosoftGraphPrinterCapabilities_MultipageLayouts_Item, using the provided MicrosoftGraphPrintMultipageLayout
func (t *MicrosoftGraphPrinterCapabilities_MultipageLayouts_Item) MergeMicrosoftGraphPrintMultipageLayout(v MicrosoftGraphPrintMultipageLayout) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsMicrosoftGraphPrinterCapabilitiesMultipageLayouts1 returns the union data inside the MicrosoftGraphPrinterCapabilities_MultipageLayouts_Item as a MicrosoftGraphPrinterCapabilitiesMultipageLayouts1
func (t MicrosoftGraphPrinterCapabilities_MultipageLayouts_Item) AsMicrosoftGraphPrinterCapabilitiesMultipageLayouts1() (MicrosoftGraphPrinterCapabilitiesMultipageLayouts1, error) {
	var body MicrosoftGraphPrinterCapabilitiesMultipageLayouts1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphPrinterCapabilitiesMultipageLayouts1 overwrites any union data inside the MicrosoftGraphPrinterCapabilities_MultipageLayouts_Item as the provided MicrosoftGraphPrinterCapabilitiesMultipageLayouts1
func (t *MicrosoftGraphPrinterCapabilities_MultipageLayouts_Item) FromMicrosoftGraphPrinterCapabilitiesMultipageLayouts1(v MicrosoftGraphPrinterCapabilitiesMultipageLayouts1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphPrinterCapabilitiesMultipageLayouts1 performs a merge with any union data inside the MicrosoftGraphPrinterCapabilities_MultipageLayouts_Item, using the provided MicrosoftGraphPrinterCapabilitiesMultipageLayouts1
func (t *MicrosoftGraphPrinterCapabilities_MultipageLayouts_Item) MergeMicrosoftGraphPrinterCapabilitiesMultipageLayouts1(v MicrosoftGraphPrinterCapabilitiesMultipageLayouts1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

func (t MicrosoftGraphPrinterCapabilities_MultipageLayouts_Item) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *MicrosoftGraphPrinterCapabilities_MultipageLayouts_Item) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsMicrosoftGraphPrintOrientation returns the union data inside the MicrosoftGraphPrinterCapabilities_Orientations_Item as a MicrosoftGraphPrintOrientation
func (t MicrosoftGraphPrinterCapabilities_Orientations_Item) AsMicrosoftGraphPrintOrientation() (MicrosoftGraphPrintOrientation, error) {
	var body MicrosoftGraphPrintOrientation
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphPrintOrientation overwrites any union data inside the MicrosoftGraphPrinterCapabilities_Orientations_Item as the provided MicrosoftGraphPrintOrientation
func (t *MicrosoftGraphPrinterCapabilities_Orientations_Item) FromMicrosoftGraphPrintOrientation(v MicrosoftGraphPrintOrientation) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphPrintOrientation performs a merge with any union data inside the MicrosoftGraphPrinterCapabilities_Orientations_Item, using the provided MicrosoftGraphPrintOrientation
func (t *MicrosoftGraphPrinterCapabilities_Orientations_Item) MergeMicrosoftGraphPrintOrientation(v MicrosoftGraphPrintOrientation) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsMicrosoftGraphPrinterCapabilitiesOrientations1 returns the union data inside the MicrosoftGraphPrinterCapabilities_Orientations_Item as a MicrosoftGraphPrinterCapabilitiesOrientations1
func (t MicrosoftGraphPrinterCapabilities_Orientations_Item) AsMicrosoftGraphPrinterCapabilitiesOrientations1() (MicrosoftGraphPrinterCapabilitiesOrientations1, error) {
	var body MicrosoftGraphPrinterCapabilitiesOrientations1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphPrinterCapabilitiesOrientations1 overwrites any union data inside the MicrosoftGraphPrinterCapabilities_Orientations_Item as the provided MicrosoftGraphPrinterCapabilitiesOrientations1
func (t *MicrosoftGraphPrinterCapabilities_Orientations_Item) FromMicrosoftGraphPrinterCapabilitiesOrientations1(v MicrosoftGraphPrinterCapabilitiesOrientations1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphPrinterCapabilitiesOrientations1 performs a merge with any union data inside the MicrosoftGraphPrinterCapabilities_Orientations_Item, using the provided MicrosoftGraphPrinterCapabilitiesOrientations1
func (t *MicrosoftGraphPrinterCapabilities_Orientations_Item) MergeMicrosoftGraphPrinterCapabilitiesOrientations1(v MicrosoftGraphPrinterCapabilitiesOrientations1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

func (t MicrosoftGraphPrinterCapabilities_Orientations_Item) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *MicrosoftGraphPrinterCapabilities_Orientations_Item) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsMicrosoftGraphPrintQuality returns the union data inside the MicrosoftGraphPrinterCapabilities_Qualities_Item as a MicrosoftGraphPrintQuality
func (t MicrosoftGraphPrinterCapabilities_Qualities_Item) AsMicrosoftGraphPrintQuality() (MicrosoftGraphPrintQuality, error) {
	var body MicrosoftGraphPrintQuality
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphPrintQuality overwrites any union data inside the MicrosoftGraphPrinterCapabilities_Qualities_Item as the provided MicrosoftGraphPrintQuality
func (t *MicrosoftGraphPrinterCapabilities_Qualities_Item) FromMicrosoftGraphPrintQuality(v MicrosoftGraphPrintQuality) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphPrintQuality performs a merge with any union data inside the MicrosoftGraphPrinterCapabilities_Qualities_Item, using the provided MicrosoftGraphPrintQuality
func (t *MicrosoftGraphPrinterCapabilities_Qualities_Item) MergeMicrosoftGraphPrintQuality(v MicrosoftGraphPrintQuality) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsMicrosoftGraphPrinterCapabilitiesQualities1 returns the union data inside the MicrosoftGraphPrinterCapabilities_Qualities_Item as a MicrosoftGraphPrinterCapabilitiesQualities1
func (t MicrosoftGraphPrinterCapabilities_Qualities_Item) AsMicrosoftGraphPrinterCapabilitiesQualities1() (MicrosoftGraphPrinterCapabilitiesQualities1, error) {
	var body MicrosoftGraphPrinterCapabilitiesQualities1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphPrinterCapabilitiesQualities1 overwrites any union data inside the MicrosoftGraphPrinterCapabilities_Qualities_Item as the provided MicrosoftGraphPrinterCapabilitiesQualities1
func (t *MicrosoftGraphPrinterCapabilities_Qualities_Item) FromMicrosoftGraphPrinterCapabilitiesQualities1(v MicrosoftGraphPrinterCapabilitiesQualities1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphPrinterCapabilitiesQualities1 performs a merge with any union data inside the MicrosoftGraphPrinterCapabilities_Qualities_Item, using the provided MicrosoftGraphPrinterCapabilitiesQualities1
func (t *MicrosoftGraphPrinterCapabilities_Qualities_Item) MergeMicrosoftGraphPrinterCapabilitiesQualities1(v MicrosoftGraphPrinterCapabilitiesQualities1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

func (t MicrosoftGraphPrinterCapabilities_Qualities_Item) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *MicrosoftGraphPrinterCapabilities_Qualities_Item) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsMicrosoftGraphPrintScaling returns the union data inside the MicrosoftGraphPrinterCapabilities_Scalings_Item as a MicrosoftGraphPrintScaling
func (t MicrosoftGraphPrinterCapabilities_Scalings_Item) AsMicrosoftGraphPrintScaling() (MicrosoftGraphPrintScaling, error) {
	var body MicrosoftGraphPrintScaling
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphPrintScaling overwrites any union data inside the MicrosoftGraphPrinterCapabilities_Scalings_Item as the provided MicrosoftGraphPrintScaling
func (t *MicrosoftGraphPrinterCapabilities_Scalings_Item) FromMicrosoftGraphPrintScaling(v MicrosoftGraphPrintScaling) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphPrintScaling performs a merge with any union data inside the MicrosoftGraphPrinterCapabilities_Scalings_Item, using the provided MicrosoftGraphPrintScaling
func (t *MicrosoftGraphPrinterCapabilities_Scalings_Item) MergeMicrosoftGraphPrintScaling(v MicrosoftGraphPrintScaling) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsMicrosoftGraphPrinterCapabilitiesScalings1 returns the union data inside the MicrosoftGraphPrinterCapabilities_Scalings_Item as a MicrosoftGraphPrinterCapabilitiesScalings1
func (t MicrosoftGraphPrinterCapabilities_Scalings_Item) AsMicrosoftGraphPrinterCapabilitiesScalings1() (MicrosoftGraphPrinterCapabilitiesScalings1, error) {
	var body MicrosoftGraphPrinterCapabilitiesScalings1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphPrinterCapabilitiesScalings1 overwrites any union data inside the MicrosoftGraphPrinterCapabilities_Scalings_Item as the provided MicrosoftGraphPrinterCapabilitiesScalings1
func (t *MicrosoftGraphPrinterCapabilities_Scalings_Item) FromMicrosoftGraphPrinterCapabilitiesScalings1(v MicrosoftGraphPrinterCapabilitiesScalings1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphPrinterCapabilitiesScalings1 performs a merge with any union data inside the MicrosoftGraphPrinterCapabilities_Scalings_Item, using the provided MicrosoftGraphPrinterCapabilitiesScalings1
func (t *MicrosoftGraphPrinterCapabilities_Scalings_Item) MergeMicrosoftGraphPrinterCapabilitiesScalings1(v MicrosoftGraphPrinterCapabilitiesScalings1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

func (t MicrosoftGraphPrinterCapabilities_Scalings_Item) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *MicrosoftGraphPrinterCapabilities_Scalings_Item) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsMicrosoftGraphPrintColorMode returns the union data inside the MicrosoftGraphPrinterDefaults_ColorMode as a MicrosoftGraphPrintColorMode
func (t MicrosoftGraphPrinterDefaults_ColorMode) AsMicrosoftGraphPrintColorMode() (MicrosoftGraphPrintColorMode, error) {
	var body MicrosoftGraphPrintColorMode
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphPrintColorMode overwrites any union data inside the MicrosoftGraphPrinterDefaults_ColorMode as the provided MicrosoftGraphPrintColorMode
func (t *MicrosoftGraphPrinterDefaults_ColorMode) FromMicrosoftGraphPrintColorMode(v MicrosoftGraphPrintColorMode) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphPrintColorMode performs a merge with any union data inside the MicrosoftGraphPrinterDefaults_ColorMode, using the provided MicrosoftGraphPrintColorMode
func (t *MicrosoftGraphPrinterDefaults_ColorMode) MergeMicrosoftGraphPrintColorMode(v MicrosoftGraphPrintColorMode) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsMicrosoftGraphPrinterDefaultsColorMode1 returns the union data inside the MicrosoftGraphPrinterDefaults_ColorMode as a MicrosoftGraphPrinterDefaultsColorMode1
func (t MicrosoftGraphPrinterDefaults_ColorMode) AsMicrosoftGraphPrinterDefaultsColorMode1() (MicrosoftGraphPrinterDefaultsColorMode1, error) {
	var body MicrosoftGraphPrinterDefaultsColorMode1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphPrinterDefaultsColorMode1 overwrites any union data inside the MicrosoftGraphPrinterDefaults_ColorMode as the provided MicrosoftGraphPrinterDefaultsColorMode1
func (t *MicrosoftGraphPrinterDefaults_ColorMode) FromMicrosoftGraphPrinterDefaultsColorMode1(v MicrosoftGraphPrinterDefaultsColorMode1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphPrinterDefaultsColorMode1 performs a merge with any union data inside the MicrosoftGraphPrinterDefaults_ColorMode, using the provided MicrosoftGraphPrinterDefaultsColorMode1
func (t *MicrosoftGraphPrinterDefaults_ColorMode) MergeMicrosoftGraphPrinterDefaultsColorMode1(v MicrosoftGraphPrinterDefaultsColorMode1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

func (t MicrosoftGraphPrinterDefaults_ColorMode) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *MicrosoftGraphPrinterDefaults_ColorMode) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsMicrosoftGraphPrintDuplexMode returns the union data inside the MicrosoftGraphPrinterDefaults_DuplexMode as a MicrosoftGraphPrintDuplexMode
func (t MicrosoftGraphPrinterDefaults_DuplexMode) AsMicrosoftGraphPrintDuplexMode() (MicrosoftGraphPrintDuplexMode, error) {
	var body MicrosoftGraphPrintDuplexMode
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphPrintDuplexMode overwrites any union data inside the MicrosoftGraphPrinterDefaults_DuplexMode as the provided MicrosoftGraphPrintDuplexMode
func (t *MicrosoftGraphPrinterDefaults_DuplexMode) FromMicrosoftGraphPrintDuplexMode(v MicrosoftGraphPrintDuplexMode) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphPrintDuplexMode performs a merge with any union data inside the MicrosoftGraphPrinterDefaults_DuplexMode, using the provided MicrosoftGraphPrintDuplexMode
func (t *MicrosoftGraphPrinterDefaults_DuplexMode) MergeMicrosoftGraphPrintDuplexMode(v MicrosoftGraphPrintDuplexMode) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsMicrosoftGraphPrinterDefaultsDuplexMode1 returns the union data inside the MicrosoftGraphPrinterDefaults_DuplexMode as a MicrosoftGraphPrinterDefaultsDuplexMode1
func (t MicrosoftGraphPrinterDefaults_DuplexMode) AsMicrosoftGraphPrinterDefaultsDuplexMode1() (MicrosoftGraphPrinterDefaultsDuplexMode1, error) {
	var body MicrosoftGraphPrinterDefaultsDuplexMode1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphPrinterDefaultsDuplexMode1 overwrites any union data inside the MicrosoftGraphPrinterDefaults_DuplexMode as the provided MicrosoftGraphPrinterDefaultsDuplexMode1
func (t *MicrosoftGraphPrinterDefaults_DuplexMode) FromMicrosoftGraphPrinterDefaultsDuplexMode1(v MicrosoftGraphPrinterDefaultsDuplexMode1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphPrinterDefaultsDuplexMode1 performs a merge with any union data inside the MicrosoftGraphPrinterDefaults_DuplexMode, using the provided MicrosoftGraphPrinterDefaultsDuplexMode1
func (t *MicrosoftGraphPrinterDefaults_DuplexMode) MergeMicrosoftGraphPrinterDefaultsDuplexMode1(v MicrosoftGraphPrinterDefaultsDuplexMode1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

func (t MicrosoftGraphPrinterDefaults_DuplexMode) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *MicrosoftGraphPrinterDefaults_DuplexMode) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsMicrosoftGraphPrintFinishing returns the union data inside the MicrosoftGraphPrinterDefaults_Finishings_Item as a MicrosoftGraphPrintFinishing
func (t MicrosoftGraphPrinterDefaults_Finishings_Item) AsMicrosoftGraphPrintFinishing() (MicrosoftGraphPrintFinishing, error) {
	var body MicrosoftGraphPrintFinishing
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphPrintFinishing overwrites any union data inside the MicrosoftGraphPrinterDefaults_Finishings_Item as the provided MicrosoftGraphPrintFinishing
func (t *MicrosoftGraphPrinterDefaults_Finishings_Item) FromMicrosoftGraphPrintFinishing(v MicrosoftGraphPrintFinishing) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphPrintFinishing performs a merge with any union data inside the MicrosoftGraphPrinterDefaults_Finishings_Item, using the provided MicrosoftGraphPrintFinishing
func (t *MicrosoftGraphPrinterDefaults_Finishings_Item) MergeMicrosoftGraphPrintFinishing(v MicrosoftGraphPrintFinishing) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsMicrosoftGraphPrinterDefaultsFinishings1 returns the union data inside the MicrosoftGraphPrinterDefaults_Finishings_Item as a MicrosoftGraphPrinterDefaultsFinishings1
func (t MicrosoftGraphPrinterDefaults_Finishings_Item) AsMicrosoftGraphPrinterDefaultsFinishings1() (MicrosoftGraphPrinterDefaultsFinishings1, error) {
	var body MicrosoftGraphPrinterDefaultsFinishings1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphPrinterDefaultsFinishings1 overwrites any union data inside the MicrosoftGraphPrinterDefaults_Finishings_Item as the provided MicrosoftGraphPrinterDefaultsFinishings1
func (t *MicrosoftGraphPrinterDefaults_Finishings_Item) FromMicrosoftGraphPrinterDefaultsFinishings1(v MicrosoftGraphPrinterDefaultsFinishings1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphPrinterDefaultsFinishings1 performs a merge with any union data inside the MicrosoftGraphPrinterDefaults_Finishings_Item, using the provided MicrosoftGraphPrinterDefaultsFinishings1
func (t *MicrosoftGraphPrinterDefaults_Finishings_Item) MergeMicrosoftGraphPrinterDefaultsFinishings1(v MicrosoftGraphPrinterDefaultsFinishings1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

func (t MicrosoftGraphPrinterDefaults_Finishings_Item) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *MicrosoftGraphPrinterDefaults_Finishings_Item) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsMicrosoftGraphPrintMultipageLayout returns the union data inside the MicrosoftGraphPrinterDefaults_MultipageLayout as a MicrosoftGraphPrintMultipageLayout
func (t MicrosoftGraphPrinterDefaults_MultipageLayout) AsMicrosoftGraphPrintMultipageLayout() (MicrosoftGraphPrintMultipageLayout, error) {
	var body MicrosoftGraphPrintMultipageLayout
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphPrintMultipageLayout overwrites any union data inside the MicrosoftGraphPrinterDefaults_MultipageLayout as the provided MicrosoftGraphPrintMultipageLayout
func (t *MicrosoftGraphPrinterDefaults_MultipageLayout) FromMicrosoftGraphPrintMultipageLayout(v MicrosoftGraphPrintMultipageLayout) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphPrintMultipageLayout performs a merge with any union data inside the MicrosoftGraphPrinterDefaults_MultipageLayout, using the provided MicrosoftGraphPrintMultipageLayout
func (t *MicrosoftGraphPrinterDefaults_MultipageLayout) MergeMicrosoftGraphPrintMultipageLayout(v MicrosoftGraphPrintMultipageLayout) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsMicrosoftGraphPrinterDefaultsMultipageLayout1 returns the union data inside the MicrosoftGraphPrinterDefaults_MultipageLayout as a MicrosoftGraphPrinterDefaultsMultipageLayout1
func (t MicrosoftGraphPrinterDefaults_MultipageLayout) AsMicrosoftGraphPrinterDefaultsMultipageLayout1() (MicrosoftGraphPrinterDefaultsMultipageLayout1, error) {
	var body MicrosoftGraphPrinterDefaultsMultipageLayout1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphPrinterDefaultsMultipageLayout1 overwrites any union data inside the MicrosoftGraphPrinterDefaults_MultipageLayout as the provided MicrosoftGraphPrinterDefaultsMultipageLayout1
func (t *MicrosoftGraphPrinterDefaults_MultipageLayout) FromMicrosoftGraphPrinterDefaultsMultipageLayout1(v MicrosoftGraphPrinterDefaultsMultipageLayout1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphPrinterDefaultsMultipageLayout1 performs a merge with any union data inside the MicrosoftGraphPrinterDefaults_MultipageLayout, using the provided MicrosoftGraphPrinterDefaultsMultipageLayout1
func (t *MicrosoftGraphPrinterDefaults_MultipageLayout) MergeMicrosoftGraphPrinterDefaultsMultipageLayout1(v MicrosoftGraphPrinterDefaultsMultipageLayout1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

func (t MicrosoftGraphPrinterDefaults_MultipageLayout) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *MicrosoftGraphPrinterDefaults_MultipageLayout) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsMicrosoftGraphPrintOrientation returns the union data inside the MicrosoftGraphPrinterDefaults_Orientation as a MicrosoftGraphPrintOrientation
func (t MicrosoftGraphPrinterDefaults_Orientation) AsMicrosoftGraphPrintOrientation() (MicrosoftGraphPrintOrientation, error) {
	var body MicrosoftGraphPrintOrientation
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphPrintOrientation overwrites any union data inside the MicrosoftGraphPrinterDefaults_Orientation as the provided MicrosoftGraphPrintOrientation
func (t *MicrosoftGraphPrinterDefaults_Orientation) FromMicrosoftGraphPrintOrientation(v MicrosoftGraphPrintOrientation) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphPrintOrientation performs a merge with any union data inside the MicrosoftGraphPrinterDefaults_Orientation, using the provided MicrosoftGraphPrintOrientation
func (t *MicrosoftGraphPrinterDefaults_Orientation) MergeMicrosoftGraphPrintOrientation(v MicrosoftGraphPrintOrientation) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsMicrosoftGraphPrinterDefaultsOrientation1 returns the union data inside the MicrosoftGraphPrinterDefaults_Orientation as a MicrosoftGraphPrinterDefaultsOrientation1
func (t MicrosoftGraphPrinterDefaults_Orientation) AsMicrosoftGraphPrinterDefaultsOrientation1() (MicrosoftGraphPrinterDefaultsOrientation1, error) {
	var body MicrosoftGraphPrinterDefaultsOrientation1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphPrinterDefaultsOrientation1 overwrites any union data inside the MicrosoftGraphPrinterDefaults_Orientation as the provided MicrosoftGraphPrinterDefaultsOrientation1
func (t *MicrosoftGraphPrinterDefaults_Orientation) FromMicrosoftGraphPrinterDefaultsOrientation1(v MicrosoftGraphPrinterDefaultsOrientation1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphPrinterDefaultsOrientation1 performs a merge with any union data inside the MicrosoftGraphPrinterDefaults_Orientation, using the provided MicrosoftGraphPrinterDefaultsOrientation1
func (t *MicrosoftGraphPrinterDefaults_Orientation) MergeMicrosoftGraphPrinterDefaultsOrientation1(v MicrosoftGraphPrinterDefaultsOrientation1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

func (t MicrosoftGraphPrinterDefaults_Orientation) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *MicrosoftGraphPrinterDefaults_Orientation) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsMicrosoftGraphPrintQuality returns the union data inside the MicrosoftGraphPrinterDefaults_Quality as a MicrosoftGraphPrintQuality
func (t MicrosoftGraphPrinterDefaults_Quality) AsMicrosoftGraphPrintQuality() (MicrosoftGraphPrintQuality, error) {
	var body MicrosoftGraphPrintQuality
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphPrintQuality overwrites any union data inside the MicrosoftGraphPrinterDefaults_Quality as the provided MicrosoftGraphPrintQuality
func (t *MicrosoftGraphPrinterDefaults_Quality) FromMicrosoftGraphPrintQuality(v MicrosoftGraphPrintQuality) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphPrintQuality performs a merge with any union data inside the MicrosoftGraphPrinterDefaults_Quality, using the provided MicrosoftGraphPrintQuality
func (t *MicrosoftGraphPrinterDefaults_Quality) MergeMicrosoftGraphPrintQuality(v MicrosoftGraphPrintQuality) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsMicrosoftGraphPrinterDefaultsQuality1 returns the union data inside the MicrosoftGraphPrinterDefaults_Quality as a MicrosoftGraphPrinterDefaultsQuality1
func (t MicrosoftGraphPrinterDefaults_Quality) AsMicrosoftGraphPrinterDefaultsQuality1() (MicrosoftGraphPrinterDefaultsQuality1, error) {
	var body MicrosoftGraphPrinterDefaultsQuality1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphPrinterDefaultsQuality1 overwrites any union data inside the MicrosoftGraphPrinterDefaults_Quality as the provided MicrosoftGraphPrinterDefaultsQuality1
func (t *MicrosoftGraphPrinterDefaults_Quality) FromMicrosoftGraphPrinterDefaultsQuality1(v MicrosoftGraphPrinterDefaultsQuality1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphPrinterDefaultsQuality1 performs a merge with any union data inside the MicrosoftGraphPrinterDefaults_Quality, using the provided MicrosoftGraphPrinterDefaultsQuality1
func (t *MicrosoftGraphPrinterDefaults_Quality) MergeMicrosoftGraphPrinterDefaultsQuality1(v MicrosoftGraphPrinterDefaultsQuality1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

func (t MicrosoftGraphPrinterDefaults_Quality) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *MicrosoftGraphPrinterDefaults_Quality) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsMicrosoftGraphPrintScaling returns the union data inside the MicrosoftGraphPrinterDefaults_Scaling as a MicrosoftGraphPrintScaling
func (t MicrosoftGraphPrinterDefaults_Scaling) AsMicrosoftGraphPrintScaling() (MicrosoftGraphPrintScaling, error) {
	var body MicrosoftGraphPrintScaling
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphPrintScaling overwrites any union data inside the MicrosoftGraphPrinterDefaults_Scaling as the provided MicrosoftGraphPrintScaling
func (t *MicrosoftGraphPrinterDefaults_Scaling) FromMicrosoftGraphPrintScaling(v MicrosoftGraphPrintScaling) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphPrintScaling performs a merge with any union data inside the MicrosoftGraphPrinterDefaults_Scaling, using the provided MicrosoftGraphPrintScaling
func (t *MicrosoftGraphPrinterDefaults_Scaling) MergeMicrosoftGraphPrintScaling(v MicrosoftGraphPrintScaling) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsMicrosoftGraphPrinterDefaultsScaling1 returns the union data inside the MicrosoftGraphPrinterDefaults_Scaling as a MicrosoftGraphPrinterDefaultsScaling1
func (t MicrosoftGraphPrinterDefaults_Scaling) AsMicrosoftGraphPrinterDefaultsScaling1() (MicrosoftGraphPrinterDefaultsScaling1, error) {
	var body MicrosoftGraphPrinterDefaultsScaling1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphPrinterDefaultsScaling1 overwrites any union data inside the MicrosoftGraphPrinterDefaults_Scaling as the provided MicrosoftGraphPrinterDefaultsScaling1
func (t *MicrosoftGraphPrinterDefaults_Scaling) FromMicrosoftGraphPrinterDefaultsScaling1(v MicrosoftGraphPrinterDefaultsScaling1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphPrinterDefaultsScaling1 performs a merge with any union data inside the MicrosoftGraphPrinterDefaults_Scaling, using the provided MicrosoftGraphPrinterDefaultsScaling1
func (t *MicrosoftGraphPrinterDefaults_Scaling) MergeMicrosoftGraphPrinterDefaultsScaling1(v MicrosoftGraphPrinterDefaultsScaling1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

func (t MicrosoftGraphPrinterDefaults_Scaling) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *MicrosoftGraphPrinterDefaults_Scaling) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsMicrosoftGraphPrinterLocationLatitude0 returns the union data inside the MicrosoftGraphPrinterLocation_Latitude as a MicrosoftGraphPrinterLocationLatitude0
func (t MicrosoftGraphPrinterLocation_Latitude) AsMicrosoftGraphPrinterLocationLatitude0() (MicrosoftGraphPrinterLocationLatitude0, error) {
	var body MicrosoftGraphPrinterLocationLatitude0
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphPrinterLocationLatitude0 overwrites any union data inside the MicrosoftGraphPrinterLocation_Latitude as the provided MicrosoftGraphPrinterLocationLatitude0
func (t *MicrosoftGraphPrinterLocation_Latitude) FromMicrosoftGraphPrinterLocationLatitude0(v MicrosoftGraphPrinterLocationLatitude0) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphPrinterLocationLatitude0 performs a merge with any union data inside the MicrosoftGraphPrinterLocation_Latitude, using the provided MicrosoftGraphPrinterLocationLatitude0
func (t *MicrosoftGraphPrinterLocation_Latitude) MergeMicrosoftGraphPrinterLocationLatitude0(v MicrosoftGraphPrinterLocationLatitude0) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsMicrosoftGraphPrinterLocationLatitude1 returns the union data inside the MicrosoftGraphPrinterLocation_Latitude as a MicrosoftGraphPrinterLocationLatitude1
func (t MicrosoftGraphPrinterLocation_Latitude) AsMicrosoftGraphPrinterLocationLatitude1() (MicrosoftGraphPrinterLocationLatitude1, error) {
	var body MicrosoftGraphPrinterLocationLatitude1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphPrinterLocationLatitude1 overwrites any union data inside the MicrosoftGraphPrinterLocation_Latitude as the provided MicrosoftGraphPrinterLocationLatitude1
func (t *MicrosoftGraphPrinterLocation_Latitude) FromMicrosoftGraphPrinterLocationLatitude1(v MicrosoftGraphPrinterLocationLatitude1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphPrinterLocationLatitude1 performs a merge with any union data inside the MicrosoftGraphPrinterLocation_Latitude, using the provided MicrosoftGraphPrinterLocationLatitude1
func (t *MicrosoftGraphPrinterLocation_Latitude) MergeMicrosoftGraphPrinterLocationLatitude1(v MicrosoftGraphPrinterLocationLatitude1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsReferenceNumeric returns the union data inside the MicrosoftGraphPrinterLocation_Latitude as a ReferenceNumeric
func (t MicrosoftGraphPrinterLocation_Latitude) AsReferenceNumeric() (ReferenceNumeric, error) {
	var body ReferenceNumeric
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromReferenceNumeric overwrites any union data inside the MicrosoftGraphPrinterLocation_Latitude as the provided ReferenceNumeric
func (t *MicrosoftGraphPrinterLocation_Latitude) FromReferenceNumeric(v ReferenceNumeric) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeReferenceNumeric performs a merge with any union data inside the MicrosoftGraphPrinterLocation_Latitude, using the provided ReferenceNumeric
func (t *MicrosoftGraphPrinterLocation_Latitude) MergeReferenceNumeric(v ReferenceNumeric) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

func (t MicrosoftGraphPrinterLocation_Latitude) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *MicrosoftGraphPrinterLocation_Latitude) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsMicrosoftGraphPrinterLocationLongitude0 returns the union data inside the MicrosoftGraphPrinterLocation_Longitude as a MicrosoftGraphPrinterLocationLongitude0
func (t MicrosoftGraphPrinterLocation_Longitude) AsMicrosoftGraphPrinterLocationLongitude0() (MicrosoftGraphPrinterLocationLongitude0, error) {
	var body MicrosoftGraphPrinterLocationLongitude0
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphPrinterLocationLongitude0 overwrites any union data inside the MicrosoftGraphPrinterLocation_Longitude as the provided MicrosoftGraphPrinterLocationLongitude0
func (t *MicrosoftGraphPrinterLocation_Longitude) FromMicrosoftGraphPrinterLocationLongitude0(v MicrosoftGraphPrinterLocationLongitude0) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphPrinterLocationLongitude0 performs a merge with any union data inside the MicrosoftGraphPrinterLocation_Longitude, using the provided MicrosoftGraphPrinterLocationLongitude0
func (t *MicrosoftGraphPrinterLocation_Longitude) MergeMicrosoftGraphPrinterLocationLongitude0(v MicrosoftGraphPrinterLocationLongitude0) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsMicrosoftGraphPrinterLocationLongitude1 returns the union data inside the MicrosoftGraphPrinterLocation_Longitude as a MicrosoftGraphPrinterLocationLongitude1
func (t MicrosoftGraphPrinterLocation_Longitude) AsMicrosoftGraphPrinterLocationLongitude1() (MicrosoftGraphPrinterLocationLongitude1, error) {
	var body MicrosoftGraphPrinterLocationLongitude1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphPrinterLocationLongitude1 overwrites any union data inside the MicrosoftGraphPrinterLocation_Longitude as the provided MicrosoftGraphPrinterLocationLongitude1
func (t *MicrosoftGraphPrinterLocation_Longitude) FromMicrosoftGraphPrinterLocationLongitude1(v MicrosoftGraphPrinterLocationLongitude1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphPrinterLocationLongitude1 performs a merge with any union data inside the MicrosoftGraphPrinterLocation_Longitude, using the provided MicrosoftGraphPrinterLocationLongitude1
func (t *MicrosoftGraphPrinterLocation_Longitude) MergeMicrosoftGraphPrinterLocationLongitude1(v MicrosoftGraphPrinterLocationLongitude1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsReferenceNumeric returns the union data inside the MicrosoftGraphPrinterLocation_Longitude as a ReferenceNumeric
func (t MicrosoftGraphPrinterLocation_Longitude) AsReferenceNumeric() (ReferenceNumeric, error) {
	var body ReferenceNumeric
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromReferenceNumeric overwrites any union data inside the MicrosoftGraphPrinterLocation_Longitude as the provided ReferenceNumeric
func (t *MicrosoftGraphPrinterLocation_Longitude) FromReferenceNumeric(v ReferenceNumeric) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeReferenceNumeric performs a merge with any union data inside the MicrosoftGraphPrinterLocation_Longitude, using the provided ReferenceNumeric
func (t *MicrosoftGraphPrinterLocation_Longitude) MergeReferenceNumeric(v ReferenceNumeric) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

func (t MicrosoftGraphPrinterLocation_Longitude) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *MicrosoftGraphPrinterLocation_Longitude) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsMicrosoftGraphPrinterCapabilities returns the union data inside the MicrosoftGraphPrinterShare_Capabilities as a MicrosoftGraphPrinterCapabilities
func (t MicrosoftGraphPrinterShare_Capabilities) AsMicrosoftGraphPrinterCapabilities() (MicrosoftGraphPrinterCapabilities, error) {
	var body MicrosoftGraphPrinterCapabilities
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphPrinterCapabilities overwrites any union data inside the MicrosoftGraphPrinterShare_Capabilities as the provided MicrosoftGraphPrinterCapabilities
func (t *MicrosoftGraphPrinterShare_Capabilities) FromMicrosoftGraphPrinterCapabilities(v MicrosoftGraphPrinterCapabilities) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphPrinterCapabilities performs a merge with any union data inside the MicrosoftGraphPrinterShare_Capabilities, using the provided MicrosoftGraphPrinterCapabilities
func (t *MicrosoftGraphPrinterShare_Capabilities) MergeMicrosoftGraphPrinterCapabilities(v MicrosoftGraphPrinterCapabilities) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsMicrosoftGraphPrinterShareCapabilities1 returns the union data inside the MicrosoftGraphPrinterShare_Capabilities as a MicrosoftGraphPrinterShareCapabilities1
func (t MicrosoftGraphPrinterShare_Capabilities) AsMicrosoftGraphPrinterShareCapabilities1() (MicrosoftGraphPrinterShareCapabilities1, error) {
	var body MicrosoftGraphPrinterShareCapabilities1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphPrinterShareCapabilities1 overwrites any union data inside the MicrosoftGraphPrinterShare_Capabilities as the provided MicrosoftGraphPrinterShareCapabilities1
func (t *MicrosoftGraphPrinterShare_Capabilities) FromMicrosoftGraphPrinterShareCapabilities1(v MicrosoftGraphPrinterShareCapabilities1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphPrinterShareCapabilities1 performs a merge with any union data inside the MicrosoftGraphPrinterShare_Capabilities, using the provided MicrosoftGraphPrinterShareCapabilities1
func (t *MicrosoftGraphPrinterShare_Capabilities) MergeMicrosoftGraphPrinterShareCapabilities1(v MicrosoftGraphPrinterShareCapabilities1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

func (t MicrosoftGraphPrinterShare_Capabilities) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *MicrosoftGraphPrinterShare_Capabilities) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsMicrosoftGraphPrinterDefaults returns the union data inside the MicrosoftGraphPrinterShare_Defaults as a MicrosoftGraphPrinterDefaults
func (t MicrosoftGraphPrinterShare_Defaults) AsMicrosoftGraphPrinterDefaults() (MicrosoftGraphPrinterDefaults, error) {
	var body MicrosoftGraphPrinterDefaults
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphPrinterDefaults overwrites any union data inside the MicrosoftGraphPrinterShare_Defaults as the provided MicrosoftGraphPrinterDefaults
func (t *MicrosoftGraphPrinterShare_Defaults) FromMicrosoftGraphPrinterDefaults(v MicrosoftGraphPrinterDefaults) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphPrinterDefaults performs a merge with any union data inside the MicrosoftGraphPrinterShare_Defaults, using the provided MicrosoftGraphPrinterDefaults
func (t *MicrosoftGraphPrinterShare_Defaults) MergeMicrosoftGraphPrinterDefaults(v MicrosoftGraphPrinterDefaults) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsMicrosoftGraphPrinterShareDefaults1 returns the union data inside the MicrosoftGraphPrinterShare_Defaults as a MicrosoftGraphPrinterShareDefaults1
func (t MicrosoftGraphPrinterShare_Defaults) AsMicrosoftGraphPrinterShareDefaults1() (MicrosoftGraphPrinterShareDefaults1, error) {
	var body MicrosoftGraphPrinterShareDefaults1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphPrinterShareDefaults1 overwrites any union data inside the MicrosoftGraphPrinterShare_Defaults as the provided MicrosoftGraphPrinterShareDefaults1
func (t *MicrosoftGraphPrinterShare_Defaults) FromMicrosoftGraphPrinterShareDefaults1(v MicrosoftGraphPrinterShareDefaults1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphPrinterShareDefaults1 performs a merge with any union data inside the MicrosoftGraphPrinterShare_Defaults, using the provided MicrosoftGraphPrinterShareDefaults1
func (t *MicrosoftGraphPrinterShare_Defaults) MergeMicrosoftGraphPrinterShareDefaults1(v MicrosoftGraphPrinterShareDefaults1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

func (t MicrosoftGraphPrinterShare_Defaults) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *MicrosoftGraphPrinterShare_Defaults) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsMicrosoftGraphPrinterLocation returns the union data inside the MicrosoftGraphPrinterShare_Location as a MicrosoftGraphPrinterLocation
func (t MicrosoftGraphPrinterShare_Location) AsMicrosoftGraphPrinterLocation() (MicrosoftGraphPrinterLocation, error) {
	var body MicrosoftGraphPrinterLocation
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphPrinterLocation overwrites any union data inside the MicrosoftGraphPrinterShare_Location as the provided MicrosoftGraphPrinterLocation
func (t *MicrosoftGraphPrinterShare_Location) FromMicrosoftGraphPrinterLocation(v MicrosoftGraphPrinterLocation) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphPrinterLocation performs a merge with any union data inside the MicrosoftGraphPrinterShare_Location, using the provided MicrosoftGraphPrinterLocation
func (t *MicrosoftGraphPrinterShare_Location) MergeMicrosoftGraphPrinterLocation(v MicrosoftGraphPrinterLocation) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsMicrosoftGraphPrinterShareLocation1 returns the union data inside the MicrosoftGraphPrinterShare_Location as a MicrosoftGraphPrinterShareLocation1
func (t MicrosoftGraphPrinterShare_Location) AsMicrosoftGraphPrinterShareLocation1() (MicrosoftGraphPrinterShareLocation1, error) {
	var body MicrosoftGraphPrinterShareLocation1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphPrinterShareLocation1 overwrites any union data inside the MicrosoftGraphPrinterShare_Location as the provided MicrosoftGraphPrinterShareLocation1
func (t *MicrosoftGraphPrinterShare_Location) FromMicrosoftGraphPrinterShareLocation1(v MicrosoftGraphPrinterShareLocation1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphPrinterShareLocation1 performs a merge with any union data inside the MicrosoftGraphPrinterShare_Location, using the provided MicrosoftGraphPrinterShareLocation1
func (t *MicrosoftGraphPrinterShare_Location) MergeMicrosoftGraphPrinterShareLocation1(v MicrosoftGraphPrinterShareLocation1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

func (t MicrosoftGraphPrinterShare_Location) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *MicrosoftGraphPrinterShare_Location) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsMicrosoftGraphPrinter returns the union data inside the MicrosoftGraphPrinterShare_Printer as a MicrosoftGraphPrinter
func (t MicrosoftGraphPrinterShare_Printer) AsMicrosoftGraphPrinter() (MicrosoftGraphPrinter, error) {
	var body MicrosoftGraphPrinter
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphPrinter overwrites any union data inside the MicrosoftGraphPrinterShare_Printer as the provided MicrosoftGraphPrinter
func (t *MicrosoftGraphPrinterShare_Printer) FromMicrosoftGraphPrinter(v MicrosoftGraphPrinter) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphPrinter performs a merge with any union data inside the MicrosoftGraphPrinterShare_Printer, using the provided MicrosoftGraphPrinter
func (t *MicrosoftGraphPrinterShare_Printer) MergeMicrosoftGraphPrinter(v MicrosoftGraphPrinter) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsMicrosoftGraphPrinterSharePrinter1 returns the union data inside the MicrosoftGraphPrinterShare_Printer as a MicrosoftGraphPrinterSharePrinter1
func (t MicrosoftGraphPrinterShare_Printer) AsMicrosoftGraphPrinterSharePrinter1() (MicrosoftGraphPrinterSharePrinter1, error) {
	var body MicrosoftGraphPrinterSharePrinter1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphPrinterSharePrinter1 overwrites any union data inside the MicrosoftGraphPrinterShare_Printer as the provided MicrosoftGraphPrinterSharePrinter1
func (t *MicrosoftGraphPrinterShare_Printer) FromMicrosoftGraphPrinterSharePrinter1(v MicrosoftGraphPrinterSharePrinter1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphPrinterSharePrinter1 performs a merge with any union data inside the MicrosoftGraphPrinterShare_Printer, using the provided MicrosoftGraphPrinterSharePrinter1
func (t *MicrosoftGraphPrinterShare_Printer) MergeMicrosoftGraphPrinterSharePrinter1(v MicrosoftGraphPrinterSharePrinter1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

func (t MicrosoftGraphPrinterShare_Printer) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *MicrosoftGraphPrinterShare_Printer) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsMicrosoftGraphPrinterShareViewpoint returns the union data inside the MicrosoftGraphPrinterShare_ViewPoint as a MicrosoftGraphPrinterShareViewpoint
func (t MicrosoftGraphPrinterShare_ViewPoint) AsMicrosoftGraphPrinterShareViewpoint() (MicrosoftGraphPrinterShareViewpoint, error) {
	var body MicrosoftGraphPrinterShareViewpoint
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphPrinterShareViewpoint overwrites any union data inside the MicrosoftGraphPrinterShare_ViewPoint as the provided MicrosoftGraphPrinterShareViewpoint
func (t *MicrosoftGraphPrinterShare_ViewPoint) FromMicrosoftGraphPrinterShareViewpoint(v MicrosoftGraphPrinterShareViewpoint) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphPrinterShareViewpoint performs a merge with any union data inside the MicrosoftGraphPrinterShare_ViewPoint, using the provided MicrosoftGraphPrinterShareViewpoint
func (t *MicrosoftGraphPrinterShare_ViewPoint) MergeMicrosoftGraphPrinterShareViewpoint(v MicrosoftGraphPrinterShareViewpoint) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsMicrosoftGraphPrinterShareViewPoint1 returns the union data inside the MicrosoftGraphPrinterShare_ViewPoint as a MicrosoftGraphPrinterShareViewPoint1
func (t MicrosoftGraphPrinterShare_ViewPoint) AsMicrosoftGraphPrinterShareViewPoint1() (MicrosoftGraphPrinterShareViewPoint1, error) {
	var body MicrosoftGraphPrinterShareViewPoint1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphPrinterShareViewPoint1 overwrites any union data inside the MicrosoftGraphPrinterShare_ViewPoint as the provided MicrosoftGraphPrinterShareViewPoint1
func (t *MicrosoftGraphPrinterShare_ViewPoint) FromMicrosoftGraphPrinterShareViewPoint1(v MicrosoftGraphPrinterShareViewPoint1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphPrinterShareViewPoint1 performs a merge with any union data inside the MicrosoftGraphPrinterShare_ViewPoint, using the provided MicrosoftGraphPrinterShareViewPoint1
func (t *MicrosoftGraphPrinterShare_ViewPoint) MergeMicrosoftGraphPrinterShareViewPoint1(v MicrosoftGraphPrinterShareViewPoint1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

func (t MicrosoftGraphPrinterShare_ViewPoint) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *MicrosoftGraphPrinterShare_ViewPoint) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsMicrosoftGraphPublicErrorDetail returns the union data inside the MicrosoftGraphPublicError_Details_Item as a MicrosoftGraphPublicErrorDetail
func (t MicrosoftGraphPublicError_Details_Item) AsMicrosoftGraphPublicErrorDetail() (MicrosoftGraphPublicErrorDetail, error) {
	var body MicrosoftGraphPublicErrorDetail
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphPublicErrorDetail overwrites any union data inside the MicrosoftGraphPublicError_Details_Item as the provided MicrosoftGraphPublicErrorDetail
func (t *MicrosoftGraphPublicError_Details_Item) FromMicrosoftGraphPublicErrorDetail(v MicrosoftGraphPublicErrorDetail) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphPublicErrorDetail performs a merge with any union data inside the MicrosoftGraphPublicError_Details_Item, using the provided MicrosoftGraphPublicErrorDetail
func (t *MicrosoftGraphPublicError_Details_Item) MergeMicrosoftGraphPublicErrorDetail(v MicrosoftGraphPublicErrorDetail) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsMicrosoftGraphPublicErrorDetails1 returns the union data inside the MicrosoftGraphPublicError_Details_Item as a MicrosoftGraphPublicErrorDetails1
func (t MicrosoftGraphPublicError_Details_Item) AsMicrosoftGraphPublicErrorDetails1() (MicrosoftGraphPublicErrorDetails1, error) {
	var body MicrosoftGraphPublicErrorDetails1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphPublicErrorDetails1 overwrites any union data inside the MicrosoftGraphPublicError_Details_Item as the provided MicrosoftGraphPublicErrorDetails1
func (t *MicrosoftGraphPublicError_Details_Item) FromMicrosoftGraphPublicErrorDetails1(v MicrosoftGraphPublicErrorDetails1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphPublicErrorDetails1 performs a merge with any union data inside the MicrosoftGraphPublicError_Details_Item, using the provided MicrosoftGraphPublicErrorDetails1
func (t *MicrosoftGraphPublicError_Details_Item) MergeMicrosoftGraphPublicErrorDetails1(v MicrosoftGraphPublicErrorDetails1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

func (t MicrosoftGraphPublicError_Details_Item) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *MicrosoftGraphPublicError_Details_Item) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsMicrosoftGraphPublicInnerError returns the union data inside the MicrosoftGraphPublicError_InnerError as a MicrosoftGraphPublicInnerError
func (t MicrosoftGraphPublicError_InnerError) AsMicrosoftGraphPublicInnerError() (MicrosoftGraphPublicInnerError, error) {
	var body MicrosoftGraphPublicInnerError
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphPublicInnerError overwrites any union data inside the MicrosoftGraphPublicError_InnerError as the provided MicrosoftGraphPublicInnerError
func (t *MicrosoftGraphPublicError_InnerError) FromMicrosoftGraphPublicInnerError(v MicrosoftGraphPublicInnerError) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphPublicInnerError performs a merge with any union data inside the MicrosoftGraphPublicError_InnerError, using the provided MicrosoftGraphPublicInnerError
func (t *MicrosoftGraphPublicError_InnerError) MergeMicrosoftGraphPublicInnerError(v MicrosoftGraphPublicInnerError) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsMicrosoftGraphPublicErrorInnerError1 returns the union data inside the MicrosoftGraphPublicError_InnerError as a MicrosoftGraphPublicErrorInnerError1
func (t MicrosoftGraphPublicError_InnerError) AsMicrosoftGraphPublicErrorInnerError1() (MicrosoftGraphPublicErrorInnerError1, error) {
	var body MicrosoftGraphPublicErrorInnerError1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphPublicErrorInnerError1 overwrites any union data inside the MicrosoftGraphPublicError_InnerError as the provided MicrosoftGraphPublicErrorInnerError1
func (t *MicrosoftGraphPublicError_InnerError) FromMicrosoftGraphPublicErrorInnerError1(v MicrosoftGraphPublicErrorInnerError1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphPublicErrorInnerError1 performs a merge with any union data inside the MicrosoftGraphPublicError_InnerError, using the provided MicrosoftGraphPublicErrorInnerError1
func (t *MicrosoftGraphPublicError_InnerError) MergeMicrosoftGraphPublicErrorInnerError1(v MicrosoftGraphPublicErrorInnerError1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

func (t MicrosoftGraphPublicError_InnerError) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *MicrosoftGraphPublicError_InnerError) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsMicrosoftGraphPublicErrorDetail returns the union data inside the MicrosoftGraphPublicInnerError_Details_Item as a MicrosoftGraphPublicErrorDetail
func (t MicrosoftGraphPublicInnerError_Details_Item) AsMicrosoftGraphPublicErrorDetail() (MicrosoftGraphPublicErrorDetail, error) {
	var body MicrosoftGraphPublicErrorDetail
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphPublicErrorDetail overwrites any union data inside the MicrosoftGraphPublicInnerError_Details_Item as the provided MicrosoftGraphPublicErrorDetail
func (t *MicrosoftGraphPublicInnerError_Details_Item) FromMicrosoftGraphPublicErrorDetail(v MicrosoftGraphPublicErrorDetail) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphPublicErrorDetail performs a merge with any union data inside the MicrosoftGraphPublicInnerError_Details_Item, using the provided MicrosoftGraphPublicErrorDetail
func (t *MicrosoftGraphPublicInnerError_Details_Item) MergeMicrosoftGraphPublicErrorDetail(v MicrosoftGraphPublicErrorDetail) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsMicrosoftGraphPublicInnerErrorDetails1 returns the union data inside the MicrosoftGraphPublicInnerError_Details_Item as a MicrosoftGraphPublicInnerErrorDetails1
func (t MicrosoftGraphPublicInnerError_Details_Item) AsMicrosoftGraphPublicInnerErrorDetails1() (MicrosoftGraphPublicInnerErrorDetails1, error) {
	var body MicrosoftGraphPublicInnerErrorDetails1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphPublicInnerErrorDetails1 overwrites any union data inside the MicrosoftGraphPublicInnerError_Details_Item as the provided MicrosoftGraphPublicInnerErrorDetails1
func (t *MicrosoftGraphPublicInnerError_Details_Item) FromMicrosoftGraphPublicInnerErrorDetails1(v MicrosoftGraphPublicInnerErrorDetails1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphPublicInnerErrorDetails1 performs a merge with any union data inside the MicrosoftGraphPublicInnerError_Details_Item, using the provided MicrosoftGraphPublicInnerErrorDetails1
func (t *MicrosoftGraphPublicInnerError_Details_Item) MergeMicrosoftGraphPublicInnerErrorDetails1(v MicrosoftGraphPublicInnerErrorDetails1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

func (t MicrosoftGraphPublicInnerError_Details_Item) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *MicrosoftGraphPublicInnerError_Details_Item) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsMicrosoftGraphStoragePlanInformation returns the union data inside the MicrosoftGraphQuota_StoragePlanInformation as a MicrosoftGraphStoragePlanInformation
func (t MicrosoftGraphQuota_StoragePlanInformation) AsMicrosoftGraphStoragePlanInformation() (MicrosoftGraphStoragePlanInformation, error) {
	var body MicrosoftGraphStoragePlanInformation
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphStoragePlanInformation overwrites any union data inside the MicrosoftGraphQuota_StoragePlanInformation as the provided MicrosoftGraphStoragePlanInformation
func (t *MicrosoftGraphQuota_StoragePlanInformation) FromMicrosoftGraphStoragePlanInformation(v MicrosoftGraphStoragePlanInformation) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphStoragePlanInformation performs a merge with any union data inside the MicrosoftGraphQuota_StoragePlanInformation, using the provided MicrosoftGraphStoragePlanInformation
func (t *MicrosoftGraphQuota_StoragePlanInformation) MergeMicrosoftGraphStoragePlanInformation(v MicrosoftGraphStoragePlanInformation) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsMicrosoftGraphQuotaStoragePlanInformation1 returns the union data inside the MicrosoftGraphQuota_StoragePlanInformation as a MicrosoftGraphQuotaStoragePlanInformation1
func (t MicrosoftGraphQuota_StoragePlanInformation) AsMicrosoftGraphQuotaStoragePlanInformation1() (MicrosoftGraphQuotaStoragePlanInformation1, error) {
	var body MicrosoftGraphQuotaStoragePlanInformation1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphQuotaStoragePlanInformation1 overwrites any union data inside the MicrosoftGraphQuota_StoragePlanInformation as the provided MicrosoftGraphQuotaStoragePlanInformation1
func (t *MicrosoftGraphQuota_StoragePlanInformation) FromMicrosoftGraphQuotaStoragePlanInformation1(v MicrosoftGraphQuotaStoragePlanInformation1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphQuotaStoragePlanInformation1 performs a merge with any union data inside the MicrosoftGraphQuota_StoragePlanInformation, using the provided MicrosoftGraphQuotaStoragePlanInformation1
func (t *MicrosoftGraphQuota_StoragePlanInformation) MergeMicrosoftGraphQuotaStoragePlanInformation1(v MicrosoftGraphQuotaStoragePlanInformation1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

func (t MicrosoftGraphQuota_StoragePlanInformation) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *MicrosoftGraphQuota_StoragePlanInformation) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsMicrosoftGraphEmailAddress returns the union data inside the MicrosoftGraphRecipient_EmailAddress as a MicrosoftGraphEmailAddress
func (t MicrosoftGraphRecipient_EmailAddress) AsMicrosoftGraphEmailAddress() (MicrosoftGraphEmailAddress, error) {
	var body MicrosoftGraphEmailAddress
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphEmailAddress overwrites any union data inside the MicrosoftGraphRecipient_EmailAddress as the provided MicrosoftGraphEmailAddress
func (t *MicrosoftGraphRecipient_EmailAddress) FromMicrosoftGraphEmailAddress(v MicrosoftGraphEmailAddress) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphEmailAddress performs a merge with any union data inside the MicrosoftGraphRecipient_EmailAddress, using the provided MicrosoftGraphEmailAddress
func (t *MicrosoftGraphRecipient_EmailAddress) MergeMicrosoftGraphEmailAddress(v MicrosoftGraphEmailAddress) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsMicrosoftGraphRecipientEmailAddress1 returns the union data inside the MicrosoftGraphRecipient_EmailAddress as a MicrosoftGraphRecipientEmailAddress1
func (t MicrosoftGraphRecipient_EmailAddress) AsMicrosoftGraphRecipientEmailAddress1() (MicrosoftGraphRecipientEmailAddress1, error) {
	var body MicrosoftGraphRecipientEmailAddress1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphRecipientEmailAddress1 overwrites any union data inside the MicrosoftGraphRecipient_EmailAddress as the provided MicrosoftGraphRecipientEmailAddress1
func (t *MicrosoftGraphRecipient_EmailAddress) FromMicrosoftGraphRecipientEmailAddress1(v MicrosoftGraphRecipientEmailAddress1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphRecipientEmailAddress1 performs a merge with any union data inside the MicrosoftGraphRecipient_EmailAddress, using the provided MicrosoftGraphRecipientEmailAddress1
func (t *MicrosoftGraphRecipient_EmailAddress) MergeMicrosoftGraphRecipientEmailAddress1(v MicrosoftGraphRecipientEmailAddress1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

func (t MicrosoftGraphRecipient_EmailAddress) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *MicrosoftGraphRecipient_EmailAddress) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsMicrosoftGraphDayOfWeek returns the union data inside the MicrosoftGraphRecurrencePattern_DaysOfWeek_Item as a MicrosoftGraphDayOfWeek
func (t MicrosoftGraphRecurrencePattern_DaysOfWeek_Item) AsMicrosoftGraphDayOfWeek() (MicrosoftGraphDayOfWeek, error) {
	var body MicrosoftGraphDayOfWeek
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphDayOfWeek overwrites any union data inside the MicrosoftGraphRecurrencePattern_DaysOfWeek_Item as the provided MicrosoftGraphDayOfWeek
func (t *MicrosoftGraphRecurrencePattern_DaysOfWeek_Item) FromMicrosoftGraphDayOfWeek(v MicrosoftGraphDayOfWeek) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphDayOfWeek performs a merge with any union data inside the MicrosoftGraphRecurrencePattern_DaysOfWeek_Item, using the provided MicrosoftGraphDayOfWeek
func (t *MicrosoftGraphRecurrencePattern_DaysOfWeek_Item) MergeMicrosoftGraphDayOfWeek(v MicrosoftGraphDayOfWeek) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsMicrosoftGraphRecurrencePatternDaysOfWeek1 returns the union data inside the MicrosoftGraphRecurrencePattern_DaysOfWeek_Item as a MicrosoftGraphRecurrencePatternDaysOfWeek1
func (t MicrosoftGraphRecurrencePattern_DaysOfWeek_Item) AsMicrosoftGraphRecurrencePatternDaysOfWeek1() (MicrosoftGraphRecurrencePatternDaysOfWeek1, error) {
	var body MicrosoftGraphRecurrencePatternDaysOfWeek1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphRecurrencePatternDaysOfWeek1 overwrites any union data inside the MicrosoftGraphRecurrencePattern_DaysOfWeek_Item as the provided MicrosoftGraphRecurrencePatternDaysOfWeek1
func (t *MicrosoftGraphRecurrencePattern_DaysOfWeek_Item) FromMicrosoftGraphRecurrencePatternDaysOfWeek1(v MicrosoftGraphRecurrencePatternDaysOfWeek1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphRecurrencePatternDaysOfWeek1 performs a merge with any union data inside the MicrosoftGraphRecurrencePattern_DaysOfWeek_Item, using the provided MicrosoftGraphRecurrencePatternDaysOfWeek1
func (t *MicrosoftGraphRecurrencePattern_DaysOfWeek_Item) MergeMicrosoftGraphRecurrencePatternDaysOfWeek1(v MicrosoftGraphRecurrencePatternDaysOfWeek1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

func (t MicrosoftGraphRecurrencePattern_DaysOfWeek_Item) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *MicrosoftGraphRecurrencePattern_DaysOfWeek_Item) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsMicrosoftGraphDayOfWeek returns the union data inside the MicrosoftGraphRecurrencePattern_FirstDayOfWeek as a MicrosoftGraphDayOfWeek
func (t MicrosoftGraphRecurrencePattern_FirstDayOfWeek) AsMicrosoftGraphDayOfWeek() (MicrosoftGraphDayOfWeek, error) {
	var body MicrosoftGraphDayOfWeek
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphDayOfWeek overwrites any union data inside the MicrosoftGraphRecurrencePattern_FirstDayOfWeek as the provided MicrosoftGraphDayOfWeek
func (t *MicrosoftGraphRecurrencePattern_FirstDayOfWeek) FromMicrosoftGraphDayOfWeek(v MicrosoftGraphDayOfWeek) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphDayOfWeek performs a merge with any union data inside the MicrosoftGraphRecurrencePattern_FirstDayOfWeek, using the provided MicrosoftGraphDayOfWeek
func (t *MicrosoftGraphRecurrencePattern_FirstDayOfWeek) MergeMicrosoftGraphDayOfWeek(v MicrosoftGraphDayOfWeek) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsMicrosoftGraphRecurrencePatternFirstDayOfWeek1 returns the union data inside the MicrosoftGraphRecurrencePattern_FirstDayOfWeek as a MicrosoftGraphRecurrencePatternFirstDayOfWeek1
func (t MicrosoftGraphRecurrencePattern_FirstDayOfWeek) AsMicrosoftGraphRecurrencePatternFirstDayOfWeek1() (MicrosoftGraphRecurrencePatternFirstDayOfWeek1, error) {
	var body MicrosoftGraphRecurrencePatternFirstDayOfWeek1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphRecurrencePatternFirstDayOfWeek1 overwrites any union data inside the MicrosoftGraphRecurrencePattern_FirstDayOfWeek as the provided MicrosoftGraphRecurrencePatternFirstDayOfWeek1
func (t *MicrosoftGraphRecurrencePattern_FirstDayOfWeek) FromMicrosoftGraphRecurrencePatternFirstDayOfWeek1(v MicrosoftGraphRecurrencePatternFirstDayOfWeek1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphRecurrencePatternFirstDayOfWeek1 performs a merge with any union data inside the MicrosoftGraphRecurrencePattern_FirstDayOfWeek, using the provided MicrosoftGraphRecurrencePatternFirstDayOfWeek1
func (t *MicrosoftGraphRecurrencePattern_FirstDayOfWeek) MergeMicrosoftGraphRecurrencePatternFirstDayOfWeek1(v MicrosoftGraphRecurrencePatternFirstDayOfWeek1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

func (t MicrosoftGraphRecurrencePattern_FirstDayOfWeek) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *MicrosoftGraphRecurrencePattern_FirstDayOfWeek) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsMicrosoftGraphWeekIndex returns the union data inside the MicrosoftGraphRecurrencePattern_Index as a MicrosoftGraphWeekIndex
func (t MicrosoftGraphRecurrencePattern_Index) AsMicrosoftGraphWeekIndex() (MicrosoftGraphWeekIndex, error) {
	var body MicrosoftGraphWeekIndex
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphWeekIndex overwrites any union data inside the MicrosoftGraphRecurrencePattern_Index as the provided MicrosoftGraphWeekIndex
func (t *MicrosoftGraphRecurrencePattern_Index) FromMicrosoftGraphWeekIndex(v MicrosoftGraphWeekIndex) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphWeekIndex performs a merge with any union data inside the MicrosoftGraphRecurrencePattern_Index, using the provided MicrosoftGraphWeekIndex
func (t *MicrosoftGraphRecurrencePattern_Index) MergeMicrosoftGraphWeekIndex(v MicrosoftGraphWeekIndex) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsMicrosoftGraphRecurrencePatternIndex1 returns the union data inside the MicrosoftGraphRecurrencePattern_Index as a MicrosoftGraphRecurrencePatternIndex1
func (t MicrosoftGraphRecurrencePattern_Index) AsMicrosoftGraphRecurrencePatternIndex1() (MicrosoftGraphRecurrencePatternIndex1, error) {
	var body MicrosoftGraphRecurrencePatternIndex1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphRecurrencePatternIndex1 overwrites any union data inside the MicrosoftGraphRecurrencePattern_Index as the provided MicrosoftGraphRecurrencePatternIndex1
func (t *MicrosoftGraphRecurrencePattern_Index) FromMicrosoftGraphRecurrencePatternIndex1(v MicrosoftGraphRecurrencePatternIndex1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphRecurrencePatternIndex1 performs a merge with any union data inside the MicrosoftGraphRecurrencePattern_Index, using the provided MicrosoftGraphRecurrencePatternIndex1
func (t *MicrosoftGraphRecurrencePattern_Index) MergeMicrosoftGraphRecurrencePatternIndex1(v MicrosoftGraphRecurrencePatternIndex1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

func (t MicrosoftGraphRecurrencePattern_Index) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *MicrosoftGraphRecurrencePattern_Index) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsMicrosoftGraphRecurrencePatternType returns the union data inside the MicrosoftGraphRecurrencePattern_Type as a MicrosoftGraphRecurrencePatternType
func (t MicrosoftGraphRecurrencePattern_Type) AsMicrosoftGraphRecurrencePatternType() (MicrosoftGraphRecurrencePatternType, error) {
	var body MicrosoftGraphRecurrencePatternType
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphRecurrencePatternType overwrites any union data inside the MicrosoftGraphRecurrencePattern_Type as the provided MicrosoftGraphRecurrencePatternType
func (t *MicrosoftGraphRecurrencePattern_Type) FromMicrosoftGraphRecurrencePatternType(v MicrosoftGraphRecurrencePatternType) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphRecurrencePatternType performs a merge with any union data inside the MicrosoftGraphRecurrencePattern_Type, using the provided MicrosoftGraphRecurrencePatternType
func (t *MicrosoftGraphRecurrencePattern_Type) MergeMicrosoftGraphRecurrencePatternType(v MicrosoftGraphRecurrencePatternType) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsMicrosoftGraphRecurrencePatternType1 returns the union data inside the MicrosoftGraphRecurrencePattern_Type as a MicrosoftGraphRecurrencePatternType1
func (t MicrosoftGraphRecurrencePattern_Type) AsMicrosoftGraphRecurrencePatternType1() (MicrosoftGraphRecurrencePatternType1, error) {
	var body MicrosoftGraphRecurrencePatternType1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphRecurrencePatternType1 overwrites any union data inside the MicrosoftGraphRecurrencePattern_Type as the provided MicrosoftGraphRecurrencePatternType1
func (t *MicrosoftGraphRecurrencePattern_Type) FromMicrosoftGraphRecurrencePatternType1(v MicrosoftGraphRecurrencePatternType1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphRecurrencePatternType1 performs a merge with any union data inside the MicrosoftGraphRecurrencePattern_Type, using the provided MicrosoftGraphRecurrencePatternType1
func (t *MicrosoftGraphRecurrencePattern_Type) MergeMicrosoftGraphRecurrencePatternType1(v MicrosoftGraphRecurrencePatternType1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

func (t MicrosoftGraphRecurrencePattern_Type) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *MicrosoftGraphRecurrencePattern_Type) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsMicrosoftGraphRecurrenceRangeType returns the union data inside the MicrosoftGraphRecurrenceRange_Type as a MicrosoftGraphRecurrenceRangeType
func (t MicrosoftGraphRecurrenceRange_Type) AsMicrosoftGraphRecurrenceRangeType() (MicrosoftGraphRecurrenceRangeType, error) {
	var body MicrosoftGraphRecurrenceRangeType
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphRecurrenceRangeType overwrites any union data inside the MicrosoftGraphRecurrenceRange_Type as the provided MicrosoftGraphRecurrenceRangeType
func (t *MicrosoftGraphRecurrenceRange_Type) FromMicrosoftGraphRecurrenceRangeType(v MicrosoftGraphRecurrenceRangeType) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphRecurrenceRangeType performs a merge with any union data inside the MicrosoftGraphRecurrenceRange_Type, using the provided MicrosoftGraphRecurrenceRangeType
func (t *MicrosoftGraphRecurrenceRange_Type) MergeMicrosoftGraphRecurrenceRangeType(v MicrosoftGraphRecurrenceRangeType) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsMicrosoftGraphRecurrenceRangeType1 returns the union data inside the MicrosoftGraphRecurrenceRange_Type as a MicrosoftGraphRecurrenceRangeType1
func (t MicrosoftGraphRecurrenceRange_Type) AsMicrosoftGraphRecurrenceRangeType1() (MicrosoftGraphRecurrenceRangeType1, error) {
	var body MicrosoftGraphRecurrenceRangeType1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphRecurrenceRangeType1 overwrites any union data inside the MicrosoftGraphRecurrenceRange_Type as the provided MicrosoftGraphRecurrenceRangeType1
func (t *MicrosoftGraphRecurrenceRange_Type) FromMicrosoftGraphRecurrenceRangeType1(v MicrosoftGraphRecurrenceRangeType1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphRecurrenceRangeType1 performs a merge with any union data inside the MicrosoftGraphRecurrenceRange_Type, using the provided MicrosoftGraphRecurrenceRangeType1
func (t *MicrosoftGraphRecurrenceRange_Type) MergeMicrosoftGraphRecurrenceRangeType1(v MicrosoftGraphRecurrenceRangeType1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

func (t MicrosoftGraphRecurrenceRange_Type) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *MicrosoftGraphRecurrenceRange_Type) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsMicrosoftGraphIdentitySet returns the union data inside the MicrosoftGraphRemoteItem_CreatedBy as a MicrosoftGraphIdentitySet
func (t MicrosoftGraphRemoteItem_CreatedBy) AsMicrosoftGraphIdentitySet() (MicrosoftGraphIdentitySet, error) {
	var body MicrosoftGraphIdentitySet
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphIdentitySet overwrites any union data inside the MicrosoftGraphRemoteItem_CreatedBy as the provided MicrosoftGraphIdentitySet
func (t *MicrosoftGraphRemoteItem_CreatedBy) FromMicrosoftGraphIdentitySet(v MicrosoftGraphIdentitySet) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphIdentitySet performs a merge with any union data inside the MicrosoftGraphRemoteItem_CreatedBy, using the provided MicrosoftGraphIdentitySet
func (t *MicrosoftGraphRemoteItem_CreatedBy) MergeMicrosoftGraphIdentitySet(v MicrosoftGraphIdentitySet) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsMicrosoftGraphRemoteItemCreatedBy1 returns the union data inside the MicrosoftGraphRemoteItem_CreatedBy as a MicrosoftGraphRemoteItemCreatedBy1
func (t MicrosoftGraphRemoteItem_CreatedBy) AsMicrosoftGraphRemoteItemCreatedBy1() (MicrosoftGraphRemoteItemCreatedBy1, error) {
	var body MicrosoftGraphRemoteItemCreatedBy1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphRemoteItemCreatedBy1 overwrites any union data inside the MicrosoftGraphRemoteItem_CreatedBy as the provided MicrosoftGraphRemoteItemCreatedBy1
func (t *MicrosoftGraphRemoteItem_CreatedBy) FromMicrosoftGraphRemoteItemCreatedBy1(v MicrosoftGraphRemoteItemCreatedBy1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphRemoteItemCreatedBy1 performs a merge with any union data inside the MicrosoftGraphRemoteItem_CreatedBy, using the provided MicrosoftGraphRemoteItemCreatedBy1
func (t *MicrosoftGraphRemoteItem_CreatedBy) MergeMicrosoftGraphRemoteItemCreatedBy1(v MicrosoftGraphRemoteItemCreatedBy1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

func (t MicrosoftGraphRemoteItem_CreatedBy) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *MicrosoftGraphRemoteItem_CreatedBy) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsMicrosoftGraphFile returns the union data inside the MicrosoftGraphRemoteItem_File as a MicrosoftGraphFile
func (t MicrosoftGraphRemoteItem_File) AsMicrosoftGraphFile() (MicrosoftGraphFile, error) {
	var body MicrosoftGraphFile
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphFile overwrites any union data inside the MicrosoftGraphRemoteItem_File as the provided MicrosoftGraphFile
func (t *MicrosoftGraphRemoteItem_File) FromMicrosoftGraphFile(v MicrosoftGraphFile) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphFile performs a merge with any union data inside the MicrosoftGraphRemoteItem_File, using the provided MicrosoftGraphFile
func (t *MicrosoftGraphRemoteItem_File) MergeMicrosoftGraphFile(v MicrosoftGraphFile) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsMicrosoftGraphRemoteItemFile1 returns the union data inside the MicrosoftGraphRemoteItem_File as a MicrosoftGraphRemoteItemFile1
func (t MicrosoftGraphRemoteItem_File) AsMicrosoftGraphRemoteItemFile1() (MicrosoftGraphRemoteItemFile1, error) {
	var body MicrosoftGraphRemoteItemFile1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphRemoteItemFile1 overwrites any union data inside the MicrosoftGraphRemoteItem_File as the provided MicrosoftGraphRemoteItemFile1
func (t *MicrosoftGraphRemoteItem_File) FromMicrosoftGraphRemoteItemFile1(v MicrosoftGraphRemoteItemFile1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphRemoteItemFile1 performs a merge with any union data inside the MicrosoftGraphRemoteItem_File, using the provided MicrosoftGraphRemoteItemFile1
func (t *MicrosoftGraphRemoteItem_File) MergeMicrosoftGraphRemoteItemFile1(v MicrosoftGraphRemoteItemFile1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

func (t MicrosoftGraphRemoteItem_File) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *MicrosoftGraphRemoteItem_File) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsMicrosoftGraphFileSystemInfo returns the union data inside the MicrosoftGraphRemoteItem_FileSystemInfo as a MicrosoftGraphFileSystemInfo
func (t MicrosoftGraphRemoteItem_FileSystemInfo) AsMicrosoftGraphFileSystemInfo() (MicrosoftGraphFileSystemInfo, error) {
	var body MicrosoftGraphFileSystemInfo
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphFileSystemInfo overwrites any union data inside the MicrosoftGraphRemoteItem_FileSystemInfo as the provided MicrosoftGraphFileSystemInfo
func (t *MicrosoftGraphRemoteItem_FileSystemInfo) FromMicrosoftGraphFileSystemInfo(v MicrosoftGraphFileSystemInfo) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphFileSystemInfo performs a merge with any union data inside the MicrosoftGraphRemoteItem_FileSystemInfo, using the provided MicrosoftGraphFileSystemInfo
func (t *MicrosoftGraphRemoteItem_FileSystemInfo) MergeMicrosoftGraphFileSystemInfo(v MicrosoftGraphFileSystemInfo) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsMicrosoftGraphRemoteItemFileSystemInfo1 returns the union data inside the MicrosoftGraphRemoteItem_FileSystemInfo as a MicrosoftGraphRemoteItemFileSystemInfo1
func (t MicrosoftGraphRemoteItem_FileSystemInfo) AsMicrosoftGraphRemoteItemFileSystemInfo1() (MicrosoftGraphRemoteItemFileSystemInfo1, error) {
	var body MicrosoftGraphRemoteItemFileSystemInfo1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphRemoteItemFileSystemInfo1 overwrites any union data inside the MicrosoftGraphRemoteItem_FileSystemInfo as the provided MicrosoftGraphRemoteItemFileSystemInfo1
func (t *MicrosoftGraphRemoteItem_FileSystemInfo) FromMicrosoftGraphRemoteItemFileSystemInfo1(v MicrosoftGraphRemoteItemFileSystemInfo1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphRemoteItemFileSystemInfo1 performs a merge with any union data inside the MicrosoftGraphRemoteItem_FileSystemInfo, using the provided MicrosoftGraphRemoteItemFileSystemInfo1
func (t *MicrosoftGraphRemoteItem_FileSystemInfo) MergeMicrosoftGraphRemoteItemFileSystemInfo1(v MicrosoftGraphRemoteItemFileSystemInfo1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

func (t MicrosoftGraphRemoteItem_FileSystemInfo) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *MicrosoftGraphRemoteItem_FileSystemInfo) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsMicrosoftGraphFolder returns the union data inside the MicrosoftGraphRemoteItem_Folder as a MicrosoftGraphFolder
func (t MicrosoftGraphRemoteItem_Folder) AsMicrosoftGraphFolder() (MicrosoftGraphFolder, error) {
	var body MicrosoftGraphFolder
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphFolder overwrites any union data inside the MicrosoftGraphRemoteItem_Folder as the provided MicrosoftGraphFolder
func (t *MicrosoftGraphRemoteItem_Folder) FromMicrosoftGraphFolder(v MicrosoftGraphFolder) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphFolder performs a merge with any union data inside the MicrosoftGraphRemoteItem_Folder, using the provided MicrosoftGraphFolder
func (t *MicrosoftGraphRemoteItem_Folder) MergeMicrosoftGraphFolder(v MicrosoftGraphFolder) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsMicrosoftGraphRemoteItemFolder1 returns the union data inside the MicrosoftGraphRemoteItem_Folder as a MicrosoftGraphRemoteItemFolder1
func (t MicrosoftGraphRemoteItem_Folder) AsMicrosoftGraphRemoteItemFolder1() (MicrosoftGraphRemoteItemFolder1, error) {
	var body MicrosoftGraphRemoteItemFolder1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphRemoteItemFolder1 overwrites any union data inside the MicrosoftGraphRemoteItem_Folder as the provided MicrosoftGraphRemoteItemFolder1
func (t *MicrosoftGraphRemoteItem_Folder) FromMicrosoftGraphRemoteItemFolder1(v MicrosoftGraphRemoteItemFolder1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphRemoteItemFolder1 performs a merge with any union data inside the MicrosoftGraphRemoteItem_Folder, using the provided MicrosoftGraphRemoteItemFolder1
func (t *MicrosoftGraphRemoteItem_Folder) MergeMicrosoftGraphRemoteItemFolder1(v MicrosoftGraphRemoteItemFolder1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

func (t MicrosoftGraphRemoteItem_Folder) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *MicrosoftGraphRemoteItem_Folder) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsMicrosoftGraphImage returns the union data inside the MicrosoftGraphRemoteItem_Image as a MicrosoftGraphImage
func (t MicrosoftGraphRemoteItem_Image) AsMicrosoftGraphImage() (MicrosoftGraphImage, error) {
	var body MicrosoftGraphImage
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphImage overwrites any union data inside the MicrosoftGraphRemoteItem_Image as the provided MicrosoftGraphImage
func (t *MicrosoftGraphRemoteItem_Image) FromMicrosoftGraphImage(v MicrosoftGraphImage) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphImage performs a merge with any union data inside the MicrosoftGraphRemoteItem_Image, using the provided MicrosoftGraphImage
func (t *MicrosoftGraphRemoteItem_Image) MergeMicrosoftGraphImage(v MicrosoftGraphImage) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsMicrosoftGraphRemoteItemImage1 returns the union data inside the MicrosoftGraphRemoteItem_Image as a MicrosoftGraphRemoteItemImage1
func (t MicrosoftGraphRemoteItem_Image) AsMicrosoftGraphRemoteItemImage1() (MicrosoftGraphRemoteItemImage1, error) {
	var body MicrosoftGraphRemoteItemImage1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphRemoteItemImage1 overwrites any union data inside the MicrosoftGraphRemoteItem_Image as the provided MicrosoftGraphRemoteItemImage1
func (t *MicrosoftGraphRemoteItem_Image) FromMicrosoftGraphRemoteItemImage1(v MicrosoftGraphRemoteItemImage1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphRemoteItemImage1 performs a merge with any union data inside the MicrosoftGraphRemoteItem_Image, using the provided MicrosoftGraphRemoteItemImage1
func (t *MicrosoftGraphRemoteItem_Image) MergeMicrosoftGraphRemoteItemImage1(v MicrosoftGraphRemoteItemImage1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

func (t MicrosoftGraphRemoteItem_Image) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *MicrosoftGraphRemoteItem_Image) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsMicrosoftGraphIdentitySet returns the union data inside the MicrosoftGraphRemoteItem_LastModifiedBy as a MicrosoftGraphIdentitySet
func (t MicrosoftGraphRemoteItem_LastModifiedBy) AsMicrosoftGraphIdentitySet() (MicrosoftGraphIdentitySet, error) {
	var body MicrosoftGraphIdentitySet
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphIdentitySet overwrites any union data inside the MicrosoftGraphRemoteItem_LastModifiedBy as the provided MicrosoftGraphIdentitySet
func (t *MicrosoftGraphRemoteItem_LastModifiedBy) FromMicrosoftGraphIdentitySet(v MicrosoftGraphIdentitySet) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphIdentitySet performs a merge with any union data inside the MicrosoftGraphRemoteItem_LastModifiedBy, using the provided MicrosoftGraphIdentitySet
func (t *MicrosoftGraphRemoteItem_LastModifiedBy) MergeMicrosoftGraphIdentitySet(v MicrosoftGraphIdentitySet) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsMicrosoftGraphRemoteItemLastModifiedBy1 returns the union data inside the MicrosoftGraphRemoteItem_LastModifiedBy as a MicrosoftGraphRemoteItemLastModifiedBy1
func (t MicrosoftGraphRemoteItem_LastModifiedBy) AsMicrosoftGraphRemoteItemLastModifiedBy1() (MicrosoftGraphRemoteItemLastModifiedBy1, error) {
	var body MicrosoftGraphRemoteItemLastModifiedBy1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphRemoteItemLastModifiedBy1 overwrites any union data inside the MicrosoftGraphRemoteItem_LastModifiedBy as the provided MicrosoftGraphRemoteItemLastModifiedBy1
func (t *MicrosoftGraphRemoteItem_LastModifiedBy) FromMicrosoftGraphRemoteItemLastModifiedBy1(v MicrosoftGraphRemoteItemLastModifiedBy1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphRemoteItemLastModifiedBy1 performs a merge with any union data inside the MicrosoftGraphRemoteItem_LastModifiedBy, using the provided MicrosoftGraphRemoteItemLastModifiedBy1
func (t *MicrosoftGraphRemoteItem_LastModifiedBy) MergeMicrosoftGraphRemoteItemLastModifiedBy1(v MicrosoftGraphRemoteItemLastModifiedBy1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

func (t MicrosoftGraphRemoteItem_LastModifiedBy) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *MicrosoftGraphRemoteItem_LastModifiedBy) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsMicrosoftGraphPackage returns the union data inside the MicrosoftGraphRemoteItem_Package as a MicrosoftGraphPackage
func (t MicrosoftGraphRemoteItem_Package) AsMicrosoftGraphPackage() (MicrosoftGraphPackage, error) {
	var body MicrosoftGraphPackage
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphPackage overwrites any union data inside the MicrosoftGraphRemoteItem_Package as the provided MicrosoftGraphPackage
func (t *MicrosoftGraphRemoteItem_Package) FromMicrosoftGraphPackage(v MicrosoftGraphPackage) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphPackage performs a merge with any union data inside the MicrosoftGraphRemoteItem_Package, using the provided MicrosoftGraphPackage
func (t *MicrosoftGraphRemoteItem_Package) MergeMicrosoftGraphPackage(v MicrosoftGraphPackage) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsMicrosoftGraphRemoteItemPackage1 returns the union data inside the MicrosoftGraphRemoteItem_Package as a MicrosoftGraphRemoteItemPackage1
func (t MicrosoftGraphRemoteItem_Package) AsMicrosoftGraphRemoteItemPackage1() (MicrosoftGraphRemoteItemPackage1, error) {
	var body MicrosoftGraphRemoteItemPackage1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphRemoteItemPackage1 overwrites any union data inside the MicrosoftGraphRemoteItem_Package as the provided MicrosoftGraphRemoteItemPackage1
func (t *MicrosoftGraphRemoteItem_Package) FromMicrosoftGraphRemoteItemPackage1(v MicrosoftGraphRemoteItemPackage1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphRemoteItemPackage1 performs a merge with any union data inside the MicrosoftGraphRemoteItem_Package, using the provided MicrosoftGraphRemoteItemPackage1
func (t *MicrosoftGraphRemoteItem_Package) MergeMicrosoftGraphRemoteItemPackage1(v MicrosoftGraphRemoteItemPackage1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

func (t MicrosoftGraphRemoteItem_Package) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *MicrosoftGraphRemoteItem_Package) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsMicrosoftGraphItemReference returns the union data inside the MicrosoftGraphRemoteItem_ParentReference as a MicrosoftGraphItemReference
func (t MicrosoftGraphRemoteItem_ParentReference) AsMicrosoftGraphItemReference() (MicrosoftGraphItemReference, error) {
	var body MicrosoftGraphItemReference
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphItemReference overwrites any union data inside the MicrosoftGraphRemoteItem_ParentReference as the provided MicrosoftGraphItemReference
func (t *MicrosoftGraphRemoteItem_ParentReference) FromMicrosoftGraphItemReference(v MicrosoftGraphItemReference) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphItemReference performs a merge with any union data inside the MicrosoftGraphRemoteItem_ParentReference, using the provided MicrosoftGraphItemReference
func (t *MicrosoftGraphRemoteItem_ParentReference) MergeMicrosoftGraphItemReference(v MicrosoftGraphItemReference) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsMicrosoftGraphRemoteItemParentReference1 returns the union data inside the MicrosoftGraphRemoteItem_ParentReference as a MicrosoftGraphRemoteItemParentReference1
func (t MicrosoftGraphRemoteItem_ParentReference) AsMicrosoftGraphRemoteItemParentReference1() (MicrosoftGraphRemoteItemParentReference1, error) {
	var body MicrosoftGraphRemoteItemParentReference1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphRemoteItemParentReference1 overwrites any union data inside the MicrosoftGraphRemoteItem_ParentReference as the provided MicrosoftGraphRemoteItemParentReference1
func (t *MicrosoftGraphRemoteItem_ParentReference) FromMicrosoftGraphRemoteItemParentReference1(v MicrosoftGraphRemoteItemParentReference1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphRemoteItemParentReference1 performs a merge with any union data inside the MicrosoftGraphRemoteItem_ParentReference, using the provided MicrosoftGraphRemoteItemParentReference1
func (t *MicrosoftGraphRemoteItem_ParentReference) MergeMicrosoftGraphRemoteItemParentReference1(v MicrosoftGraphRemoteItemParentReference1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

func (t MicrosoftGraphRemoteItem_ParentReference) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *MicrosoftGraphRemoteItem_ParentReference) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsMicrosoftGraphShared returns the union data inside the MicrosoftGraphRemoteItem_Shared as a MicrosoftGraphShared
func (t MicrosoftGraphRemoteItem_Shared) AsMicrosoftGraphShared() (MicrosoftGraphShared, error) {
	var body MicrosoftGraphShared
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphShared overwrites any union data inside the MicrosoftGraphRemoteItem_Shared as the provided MicrosoftGraphShared
func (t *MicrosoftGraphRemoteItem_Shared) FromMicrosoftGraphShared(v MicrosoftGraphShared) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphShared performs a merge with any union data inside the MicrosoftGraphRemoteItem_Shared, using the provided MicrosoftGraphShared
func (t *MicrosoftGraphRemoteItem_Shared) MergeMicrosoftGraphShared(v MicrosoftGraphShared) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsMicrosoftGraphRemoteItemShared1 returns the union data inside the MicrosoftGraphRemoteItem_Shared as a MicrosoftGraphRemoteItemShared1
func (t MicrosoftGraphRemoteItem_Shared) AsMicrosoftGraphRemoteItemShared1() (MicrosoftGraphRemoteItemShared1, error) {
	var body MicrosoftGraphRemoteItemShared1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphRemoteItemShared1 overwrites any union data inside the MicrosoftGraphRemoteItem_Shared as the provided MicrosoftGraphRemoteItemShared1
func (t *MicrosoftGraphRemoteItem_Shared) FromMicrosoftGraphRemoteItemShared1(v MicrosoftGraphRemoteItemShared1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphRemoteItemShared1 performs a merge with any union data inside the MicrosoftGraphRemoteItem_Shared, using the provided MicrosoftGraphRemoteItemShared1
func (t *MicrosoftGraphRemoteItem_Shared) MergeMicrosoftGraphRemoteItemShared1(v MicrosoftGraphRemoteItemShared1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

func (t MicrosoftGraphRemoteItem_Shared) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *MicrosoftGraphRemoteItem_Shared) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsMicrosoftGraphSharepointIds returns the union data inside the MicrosoftGraphRemoteItem_SharepointIds as a MicrosoftGraphSharepointIds
func (t MicrosoftGraphRemoteItem_SharepointIds) AsMicrosoftGraphSharepointIds() (MicrosoftGraphSharepointIds, error) {
	var body MicrosoftGraphSharepointIds
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphSharepointIds overwrites any union data inside the MicrosoftGraphRemoteItem_SharepointIds as the provided MicrosoftGraphSharepointIds
func (t *MicrosoftGraphRemoteItem_SharepointIds) FromMicrosoftGraphSharepointIds(v MicrosoftGraphSharepointIds) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphSharepointIds performs a merge with any union data inside the MicrosoftGraphRemoteItem_SharepointIds, using the provided MicrosoftGraphSharepointIds
func (t *MicrosoftGraphRemoteItem_SharepointIds) MergeMicrosoftGraphSharepointIds(v MicrosoftGraphSharepointIds) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsMicrosoftGraphRemoteItemSharepointIds1 returns the union data inside the MicrosoftGraphRemoteItem_SharepointIds as a MicrosoftGraphRemoteItemSharepointIds1
func (t MicrosoftGraphRemoteItem_SharepointIds) AsMicrosoftGraphRemoteItemSharepointIds1() (MicrosoftGraphRemoteItemSharepointIds1, error) {
	var body MicrosoftGraphRemoteItemSharepointIds1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphRemoteItemSharepointIds1 overwrites any union data inside the MicrosoftGraphRemoteItem_SharepointIds as the provided MicrosoftGraphRemoteItemSharepointIds1
func (t *MicrosoftGraphRemoteItem_SharepointIds) FromMicrosoftGraphRemoteItemSharepointIds1(v MicrosoftGraphRemoteItemSharepointIds1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphRemoteItemSharepointIds1 performs a merge with any union data inside the MicrosoftGraphRemoteItem_SharepointIds, using the provided MicrosoftGraphRemoteItemSharepointIds1
func (t *MicrosoftGraphRemoteItem_SharepointIds) MergeMicrosoftGraphRemoteItemSharepointIds1(v MicrosoftGraphRemoteItemSharepointIds1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

func (t MicrosoftGraphRemoteItem_SharepointIds) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *MicrosoftGraphRemoteItem_SharepointIds) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsMicrosoftGraphSpecialFolder returns the union data inside the MicrosoftGraphRemoteItem_SpecialFolder as a MicrosoftGraphSpecialFolder
func (t MicrosoftGraphRemoteItem_SpecialFolder) AsMicrosoftGraphSpecialFolder() (MicrosoftGraphSpecialFolder, error) {
	var body MicrosoftGraphSpecialFolder
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphSpecialFolder overwrites any union data inside the MicrosoftGraphRemoteItem_SpecialFolder as the provided MicrosoftGraphSpecialFolder
func (t *MicrosoftGraphRemoteItem_SpecialFolder) FromMicrosoftGraphSpecialFolder(v MicrosoftGraphSpecialFolder) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphSpecialFolder performs a merge with any union data inside the MicrosoftGraphRemoteItem_SpecialFolder, using the provided MicrosoftGraphSpecialFolder
func (t *MicrosoftGraphRemoteItem_SpecialFolder) MergeMicrosoftGraphSpecialFolder(v MicrosoftGraphSpecialFolder) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsMicrosoftGraphRemoteItemSpecialFolder1 returns the union data inside the MicrosoftGraphRemoteItem_SpecialFolder as a MicrosoftGraphRemoteItemSpecialFolder1
func (t MicrosoftGraphRemoteItem_SpecialFolder) AsMicrosoftGraphRemoteItemSpecialFolder1() (MicrosoftGraphRemoteItemSpecialFolder1, error) {
	var body MicrosoftGraphRemoteItemSpecialFolder1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphRemoteItemSpecialFolder1 overwrites any union data inside the MicrosoftGraphRemoteItem_SpecialFolder as the provided MicrosoftGraphRemoteItemSpecialFolder1
func (t *MicrosoftGraphRemoteItem_SpecialFolder) FromMicrosoftGraphRemoteItemSpecialFolder1(v MicrosoftGraphRemoteItemSpecialFolder1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphRemoteItemSpecialFolder1 performs a merge with any union data inside the MicrosoftGraphRemoteItem_SpecialFolder, using the provided MicrosoftGraphRemoteItemSpecialFolder1
func (t *MicrosoftGraphRemoteItem_SpecialFolder) MergeMicrosoftGraphRemoteItemSpecialFolder1(v MicrosoftGraphRemoteItemSpecialFolder1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

func (t MicrosoftGraphRemoteItem_SpecialFolder) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *MicrosoftGraphRemoteItem_SpecialFolder) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsMicrosoftGraphVideo returns the union data inside the MicrosoftGraphRemoteItem_Video as a MicrosoftGraphVideo
func (t MicrosoftGraphRemoteItem_Video) AsMicrosoftGraphVideo() (MicrosoftGraphVideo, error) {
	var body MicrosoftGraphVideo
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphVideo overwrites any union data inside the MicrosoftGraphRemoteItem_Video as the provided MicrosoftGraphVideo
func (t *MicrosoftGraphRemoteItem_Video) FromMicrosoftGraphVideo(v MicrosoftGraphVideo) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphVideo performs a merge with any union data inside the MicrosoftGraphRemoteItem_Video, using the provided MicrosoftGraphVideo
func (t *MicrosoftGraphRemoteItem_Video) MergeMicrosoftGraphVideo(v MicrosoftGraphVideo) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsMicrosoftGraphRemoteItemVideo1 returns the union data inside the MicrosoftGraphRemoteItem_Video as a MicrosoftGraphRemoteItemVideo1
func (t MicrosoftGraphRemoteItem_Video) AsMicrosoftGraphRemoteItemVideo1() (MicrosoftGraphRemoteItemVideo1, error) {
	var body MicrosoftGraphRemoteItemVideo1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphRemoteItemVideo1 overwrites any union data inside the MicrosoftGraphRemoteItem_Video as the provided MicrosoftGraphRemoteItemVideo1
func (t *MicrosoftGraphRemoteItem_Video) FromMicrosoftGraphRemoteItemVideo1(v MicrosoftGraphRemoteItemVideo1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphRemoteItemVideo1 performs a merge with any union data inside the MicrosoftGraphRemoteItem_Video, using the provided MicrosoftGraphRemoteItemVideo1
func (t *MicrosoftGraphRemoteItem_Video) MergeMicrosoftGraphRemoteItemVideo1(v MicrosoftGraphRemoteItemVideo1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

func (t MicrosoftGraphRemoteItem_Video) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *MicrosoftGraphRemoteItem_Video) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsMicrosoftGraphResponseType returns the union data inside the MicrosoftGraphResponseStatus_Response as a MicrosoftGraphResponseType
func (t MicrosoftGraphResponseStatus_Response) AsMicrosoftGraphResponseType() (MicrosoftGraphResponseType, error) {
	var body MicrosoftGraphResponseType
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphResponseType overwrites any union data inside the MicrosoftGraphResponseStatus_Response as the provided MicrosoftGraphResponseType
func (t *MicrosoftGraphResponseStatus_Response) FromMicrosoftGraphResponseType(v MicrosoftGraphResponseType) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphResponseType performs a merge with any union data inside the MicrosoftGraphResponseStatus_Response, using the provided MicrosoftGraphResponseType
func (t *MicrosoftGraphResponseStatus_Response) MergeMicrosoftGraphResponseType(v MicrosoftGraphResponseType) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsMicrosoftGraphResponseStatusResponse1 returns the union data inside the MicrosoftGraphResponseStatus_Response as a MicrosoftGraphResponseStatusResponse1
func (t MicrosoftGraphResponseStatus_Response) AsMicrosoftGraphResponseStatusResponse1() (MicrosoftGraphResponseStatusResponse1, error) {
	var body MicrosoftGraphResponseStatusResponse1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphResponseStatusResponse1 overwrites any union data inside the MicrosoftGraphResponseStatus_Response as the provided MicrosoftGraphResponseStatusResponse1
func (t *MicrosoftGraphResponseStatus_Response) FromMicrosoftGraphResponseStatusResponse1(v MicrosoftGraphResponseStatusResponse1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphResponseStatusResponse1 performs a merge with any union data inside the MicrosoftGraphResponseStatus_Response, using the provided MicrosoftGraphResponseStatusResponse1
func (t *MicrosoftGraphResponseStatus_Response) MergeMicrosoftGraphResponseStatusResponse1(v MicrosoftGraphResponseStatusResponse1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

func (t MicrosoftGraphResponseStatus_Response) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *MicrosoftGraphResponseStatus_Response) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsMicrosoftGraphPublicError returns the union data inside the MicrosoftGraphRichLongRunningOperation_Error as a MicrosoftGraphPublicError
func (t MicrosoftGraphRichLongRunningOperation_Error) AsMicrosoftGraphPublicError() (MicrosoftGraphPublicError, error) {
	var body MicrosoftGraphPublicError
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphPublicError overwrites any union data inside the MicrosoftGraphRichLongRunningOperation_Error as the provided MicrosoftGraphPublicError
func (t *MicrosoftGraphRichLongRunningOperation_Error) FromMicrosoftGraphPublicError(v MicrosoftGraphPublicError) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphPublicError performs a merge with any union data inside the MicrosoftGraphRichLongRunningOperation_Error, using the provided MicrosoftGraphPublicError
func (t *MicrosoftGraphRichLongRunningOperation_Error) MergeMicrosoftGraphPublicError(v MicrosoftGraphPublicError) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsMicrosoftGraphRichLongRunningOperationError1 returns the union data inside the MicrosoftGraphRichLongRunningOperation_Error as a MicrosoftGraphRichLongRunningOperationError1
func (t MicrosoftGraphRichLongRunningOperation_Error) AsMicrosoftGraphRichLongRunningOperationError1() (MicrosoftGraphRichLongRunningOperationError1, error) {
	var body MicrosoftGraphRichLongRunningOperationError1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphRichLongRunningOperationError1 overwrites any union data inside the MicrosoftGraphRichLongRunningOperation_Error as the provided MicrosoftGraphRichLongRunningOperationError1
func (t *MicrosoftGraphRichLongRunningOperation_Error) FromMicrosoftGraphRichLongRunningOperationError1(v MicrosoftGraphRichLongRunningOperationError1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphRichLongRunningOperationError1 performs a merge with any union data inside the MicrosoftGraphRichLongRunningOperation_Error, using the provided MicrosoftGraphRichLongRunningOperationError1
func (t *MicrosoftGraphRichLongRunningOperation_Error) MergeMicrosoftGraphRichLongRunningOperationError1(v MicrosoftGraphRichLongRunningOperationError1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

func (t MicrosoftGraphRichLongRunningOperation_Error) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *MicrosoftGraphRichLongRunningOperation_Error) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsMicrosoftGraphLongRunningOperationStatus returns the union data inside the MicrosoftGraphRichLongRunningOperation_Status as a MicrosoftGraphLongRunningOperationStatus
func (t MicrosoftGraphRichLongRunningOperation_Status) AsMicrosoftGraphLongRunningOperationStatus() (MicrosoftGraphLongRunningOperationStatus, error) {
	var body MicrosoftGraphLongRunningOperationStatus
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphLongRunningOperationStatus overwrites any union data inside the MicrosoftGraphRichLongRunningOperation_Status as the provided MicrosoftGraphLongRunningOperationStatus
func (t *MicrosoftGraphRichLongRunningOperation_Status) FromMicrosoftGraphLongRunningOperationStatus(v MicrosoftGraphLongRunningOperationStatus) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphLongRunningOperationStatus performs a merge with any union data inside the MicrosoftGraphRichLongRunningOperation_Status, using the provided MicrosoftGraphLongRunningOperationStatus
func (t *MicrosoftGraphRichLongRunningOperation_Status) MergeMicrosoftGraphLongRunningOperationStatus(v MicrosoftGraphLongRunningOperationStatus) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsMicrosoftGraphRichLongRunningOperationStatus1 returns the union data inside the MicrosoftGraphRichLongRunningOperation_Status as a MicrosoftGraphRichLongRunningOperationStatus1
func (t MicrosoftGraphRichLongRunningOperation_Status) AsMicrosoftGraphRichLongRunningOperationStatus1() (MicrosoftGraphRichLongRunningOperationStatus1, error) {
	var body MicrosoftGraphRichLongRunningOperationStatus1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphRichLongRunningOperationStatus1 overwrites any union data inside the MicrosoftGraphRichLongRunningOperation_Status as the provided MicrosoftGraphRichLongRunningOperationStatus1
func (t *MicrosoftGraphRichLongRunningOperation_Status) FromMicrosoftGraphRichLongRunningOperationStatus1(v MicrosoftGraphRichLongRunningOperationStatus1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphRichLongRunningOperationStatus1 performs a merge with any union data inside the MicrosoftGraphRichLongRunningOperation_Status, using the provided MicrosoftGraphRichLongRunningOperationStatus1
func (t *MicrosoftGraphRichLongRunningOperation_Status) MergeMicrosoftGraphRichLongRunningOperationStatus1(v MicrosoftGraphRichLongRunningOperationStatus1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

func (t MicrosoftGraphRichLongRunningOperation_Status) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *MicrosoftGraphRichLongRunningOperation_Status) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsMicrosoftGraphOperationStatus returns the union data inside the MicrosoftGraphSchedule_ProvisionStatus as a MicrosoftGraphOperationStatus
func (t MicrosoftGraphSchedule_ProvisionStatus) AsMicrosoftGraphOperationStatus() (MicrosoftGraphOperationStatus, error) {
	var body MicrosoftGraphOperationStatus
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphOperationStatus overwrites any union data inside the MicrosoftGraphSchedule_ProvisionStatus as the provided MicrosoftGraphOperationStatus
func (t *MicrosoftGraphSchedule_ProvisionStatus) FromMicrosoftGraphOperationStatus(v MicrosoftGraphOperationStatus) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphOperationStatus performs a merge with any union data inside the MicrosoftGraphSchedule_ProvisionStatus, using the provided MicrosoftGraphOperationStatus
func (t *MicrosoftGraphSchedule_ProvisionStatus) MergeMicrosoftGraphOperationStatus(v MicrosoftGraphOperationStatus) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsMicrosoftGraphScheduleProvisionStatus1 returns the union data inside the MicrosoftGraphSchedule_ProvisionStatus as a MicrosoftGraphScheduleProvisionStatus1
func (t MicrosoftGraphSchedule_ProvisionStatus) AsMicrosoftGraphScheduleProvisionStatus1() (MicrosoftGraphScheduleProvisionStatus1, error) {
	var body MicrosoftGraphScheduleProvisionStatus1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphScheduleProvisionStatus1 overwrites any union data inside the MicrosoftGraphSchedule_ProvisionStatus as the provided MicrosoftGraphScheduleProvisionStatus1
func (t *MicrosoftGraphSchedule_ProvisionStatus) FromMicrosoftGraphScheduleProvisionStatus1(v MicrosoftGraphScheduleProvisionStatus1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphScheduleProvisionStatus1 performs a merge with any union data inside the MicrosoftGraphSchedule_ProvisionStatus, using the provided MicrosoftGraphScheduleProvisionStatus1
func (t *MicrosoftGraphSchedule_ProvisionStatus) MergeMicrosoftGraphScheduleProvisionStatus1(v MicrosoftGraphScheduleProvisionStatus1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

func (t MicrosoftGraphSchedule_ProvisionStatus) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *MicrosoftGraphSchedule_ProvisionStatus) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsMicrosoftGraphScheduleChangeRequestActor returns the union data inside the MicrosoftGraphScheduleChangeRequest_AssignedTo as a MicrosoftGraphScheduleChangeRequestActor
func (t MicrosoftGraphScheduleChangeRequest_AssignedTo) AsMicrosoftGraphScheduleChangeRequestActor() (MicrosoftGraphScheduleChangeRequestActor, error) {
	var body MicrosoftGraphScheduleChangeRequestActor
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphScheduleChangeRequestActor overwrites any union data inside the MicrosoftGraphScheduleChangeRequest_AssignedTo as the provided MicrosoftGraphScheduleChangeRequestActor
func (t *MicrosoftGraphScheduleChangeRequest_AssignedTo) FromMicrosoftGraphScheduleChangeRequestActor(v MicrosoftGraphScheduleChangeRequestActor) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphScheduleChangeRequestActor performs a merge with any union data inside the MicrosoftGraphScheduleChangeRequest_AssignedTo, using the provided MicrosoftGraphScheduleChangeRequestActor
func (t *MicrosoftGraphScheduleChangeRequest_AssignedTo) MergeMicrosoftGraphScheduleChangeRequestActor(v MicrosoftGraphScheduleChangeRequestActor) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsMicrosoftGraphScheduleChangeRequestAssignedTo1 returns the union data inside the MicrosoftGraphScheduleChangeRequest_AssignedTo as a MicrosoftGraphScheduleChangeRequestAssignedTo1
func (t MicrosoftGraphScheduleChangeRequest_AssignedTo) AsMicrosoftGraphScheduleChangeRequestAssignedTo1() (MicrosoftGraphScheduleChangeRequestAssignedTo1, error) {
	var body MicrosoftGraphScheduleChangeRequestAssignedTo1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphScheduleChangeRequestAssignedTo1 overwrites any union data inside the MicrosoftGraphScheduleChangeRequest_AssignedTo as the provided MicrosoftGraphScheduleChangeRequestAssignedTo1
func (t *MicrosoftGraphScheduleChangeRequest_AssignedTo) FromMicrosoftGraphScheduleChangeRequestAssignedTo1(v MicrosoftGraphScheduleChangeRequestAssignedTo1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphScheduleChangeRequestAssignedTo1 performs a merge with any union data inside the MicrosoftGraphScheduleChangeRequest_AssignedTo, using the provided MicrosoftGraphScheduleChangeRequestAssignedTo1
func (t *MicrosoftGraphScheduleChangeRequest_AssignedTo) MergeMicrosoftGraphScheduleChangeRequestAssignedTo1(v MicrosoftGraphScheduleChangeRequestAssignedTo1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

func (t MicrosoftGraphScheduleChangeRequest_AssignedTo) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *MicrosoftGraphScheduleChangeRequest_AssignedTo) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsMicrosoftGraphIdentitySet returns the union data inside the MicrosoftGraphScheduleChangeRequest_LastModifiedBy as a MicrosoftGraphIdentitySet
func (t MicrosoftGraphScheduleChangeRequest_LastModifiedBy) AsMicrosoftGraphIdentitySet() (MicrosoftGraphIdentitySet, error) {
	var body MicrosoftGraphIdentitySet
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphIdentitySet overwrites any union data inside the MicrosoftGraphScheduleChangeRequest_LastModifiedBy as the provided MicrosoftGraphIdentitySet
func (t *MicrosoftGraphScheduleChangeRequest_LastModifiedBy) FromMicrosoftGraphIdentitySet(v MicrosoftGraphIdentitySet) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphIdentitySet performs a merge with any union data inside the MicrosoftGraphScheduleChangeRequest_LastModifiedBy, using the provided MicrosoftGraphIdentitySet
func (t *MicrosoftGraphScheduleChangeRequest_LastModifiedBy) MergeMicrosoftGraphIdentitySet(v MicrosoftGraphIdentitySet) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsMicrosoftGraphScheduleChangeRequestLastModifiedBy1 returns the union data inside the MicrosoftGraphScheduleChangeRequest_LastModifiedBy as a MicrosoftGraphScheduleChangeRequestLastModifiedBy1
func (t MicrosoftGraphScheduleChangeRequest_LastModifiedBy) AsMicrosoftGraphScheduleChangeRequestLastModifiedBy1() (MicrosoftGraphScheduleChangeRequestLastModifiedBy1, error) {
	var body MicrosoftGraphScheduleChangeRequestLastModifiedBy1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphScheduleChangeRequestLastModifiedBy1 overwrites any union data inside the MicrosoftGraphScheduleChangeRequest_LastModifiedBy as the provided MicrosoftGraphScheduleChangeRequestLastModifiedBy1
func (t *MicrosoftGraphScheduleChangeRequest_LastModifiedBy) FromMicrosoftGraphScheduleChangeRequestLastModifiedBy1(v MicrosoftGraphScheduleChangeRequestLastModifiedBy1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphScheduleChangeRequestLastModifiedBy1 performs a merge with any union data inside the MicrosoftGraphScheduleChangeRequest_LastModifiedBy, using the provided MicrosoftGraphScheduleChangeRequestLastModifiedBy1
func (t *MicrosoftGraphScheduleChangeRequest_LastModifiedBy) MergeMicrosoftGraphScheduleChangeRequestLastModifiedBy1(v MicrosoftGraphScheduleChangeRequestLastModifiedBy1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

func (t MicrosoftGraphScheduleChangeRequest_LastModifiedBy) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *MicrosoftGraphScheduleChangeRequest_LastModifiedBy) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsMicrosoftGraphScheduleChangeState returns the union data inside the MicrosoftGraphScheduleChangeRequest_State as a MicrosoftGraphScheduleChangeState
func (t MicrosoftGraphScheduleChangeRequest_State) AsMicrosoftGraphScheduleChangeState() (MicrosoftGraphScheduleChangeState, error) {
	var body MicrosoftGraphScheduleChangeState
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphScheduleChangeState overwrites any union data inside the MicrosoftGraphScheduleChangeRequest_State as the provided MicrosoftGraphScheduleChangeState
func (t *MicrosoftGraphScheduleChangeRequest_State) FromMicrosoftGraphScheduleChangeState(v MicrosoftGraphScheduleChangeState) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphScheduleChangeState performs a merge with any union data inside the MicrosoftGraphScheduleChangeRequest_State, using the provided MicrosoftGraphScheduleChangeState
func (t *MicrosoftGraphScheduleChangeRequest_State) MergeMicrosoftGraphScheduleChangeState(v MicrosoftGraphScheduleChangeState) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsMicrosoftGraphScheduleChangeRequestState1 returns the union data inside the MicrosoftGraphScheduleChangeRequest_State as a MicrosoftGraphScheduleChangeRequestState1
func (t MicrosoftGraphScheduleChangeRequest_State) AsMicrosoftGraphScheduleChangeRequestState1() (MicrosoftGraphScheduleChangeRequestState1, error) {
	var body MicrosoftGraphScheduleChangeRequestState1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphScheduleChangeRequestState1 overwrites any union data inside the MicrosoftGraphScheduleChangeRequest_State as the provided MicrosoftGraphScheduleChangeRequestState1
func (t *MicrosoftGraphScheduleChangeRequest_State) FromMicrosoftGraphScheduleChangeRequestState1(v MicrosoftGraphScheduleChangeRequestState1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphScheduleChangeRequestState1 performs a merge with any union data inside the MicrosoftGraphScheduleChangeRequest_State, using the provided MicrosoftGraphScheduleChangeRequestState1
func (t *MicrosoftGraphScheduleChangeRequest_State) MergeMicrosoftGraphScheduleChangeRequestState1(v MicrosoftGraphScheduleChangeRequestState1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

func (t MicrosoftGraphScheduleChangeRequest_State) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *MicrosoftGraphScheduleChangeRequest_State) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsMicrosoftGraphIdentitySet returns the union data inside the MicrosoftGraphSchedulingGroup_LastModifiedBy as a MicrosoftGraphIdentitySet
func (t MicrosoftGraphSchedulingGroup_LastModifiedBy) AsMicrosoftGraphIdentitySet() (MicrosoftGraphIdentitySet, error) {
	var body MicrosoftGraphIdentitySet
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphIdentitySet overwrites any union data inside the MicrosoftGraphSchedulingGroup_LastModifiedBy as the provided MicrosoftGraphIdentitySet
func (t *MicrosoftGraphSchedulingGroup_LastModifiedBy) FromMicrosoftGraphIdentitySet(v MicrosoftGraphIdentitySet) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphIdentitySet performs a merge with any union data inside the MicrosoftGraphSchedulingGroup_LastModifiedBy, using the provided MicrosoftGraphIdentitySet
func (t *MicrosoftGraphSchedulingGroup_LastModifiedBy) MergeMicrosoftGraphIdentitySet(v MicrosoftGraphIdentitySet) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsMicrosoftGraphSchedulingGroupLastModifiedBy1 returns the union data inside the MicrosoftGraphSchedulingGroup_LastModifiedBy as a MicrosoftGraphSchedulingGroupLastModifiedBy1
func (t MicrosoftGraphSchedulingGroup_LastModifiedBy) AsMicrosoftGraphSchedulingGroupLastModifiedBy1() (MicrosoftGraphSchedulingGroupLastModifiedBy1, error) {
	var body MicrosoftGraphSchedulingGroupLastModifiedBy1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphSchedulingGroupLastModifiedBy1 overwrites any union data inside the MicrosoftGraphSchedulingGroup_LastModifiedBy as the provided MicrosoftGraphSchedulingGroupLastModifiedBy1
func (t *MicrosoftGraphSchedulingGroup_LastModifiedBy) FromMicrosoftGraphSchedulingGroupLastModifiedBy1(v MicrosoftGraphSchedulingGroupLastModifiedBy1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphSchedulingGroupLastModifiedBy1 performs a merge with any union data inside the MicrosoftGraphSchedulingGroup_LastModifiedBy, using the provided MicrosoftGraphSchedulingGroupLastModifiedBy1
func (t *MicrosoftGraphSchedulingGroup_LastModifiedBy) MergeMicrosoftGraphSchedulingGroupLastModifiedBy1(v MicrosoftGraphSchedulingGroupLastModifiedBy1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

func (t MicrosoftGraphSchedulingGroup_LastModifiedBy) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *MicrosoftGraphSchedulingGroup_LastModifiedBy) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsMicrosoftGraphScoredEmailAddressRelevanceScore0 returns the union data inside the MicrosoftGraphScoredEmailAddress_RelevanceScore as a MicrosoftGraphScoredEmailAddressRelevanceScore0
func (t MicrosoftGraphScoredEmailAddress_RelevanceScore) AsMicrosoftGraphScoredEmailAddressRelevanceScore0() (MicrosoftGraphScoredEmailAddressRelevanceScore0, error) {
	var body MicrosoftGraphScoredEmailAddressRelevanceScore0
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphScoredEmailAddressRelevanceScore0 overwrites any union data inside the MicrosoftGraphScoredEmailAddress_RelevanceScore as the provided MicrosoftGraphScoredEmailAddressRelevanceScore0
func (t *MicrosoftGraphScoredEmailAddress_RelevanceScore) FromMicrosoftGraphScoredEmailAddressRelevanceScore0(v MicrosoftGraphScoredEmailAddressRelevanceScore0) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphScoredEmailAddressRelevanceScore0 performs a merge with any union data inside the MicrosoftGraphScoredEmailAddress_RelevanceScore, using the provided MicrosoftGraphScoredEmailAddressRelevanceScore0
func (t *MicrosoftGraphScoredEmailAddress_RelevanceScore) MergeMicrosoftGraphScoredEmailAddressRelevanceScore0(v MicrosoftGraphScoredEmailAddressRelevanceScore0) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsMicrosoftGraphScoredEmailAddressRelevanceScore1 returns the union data inside the MicrosoftGraphScoredEmailAddress_RelevanceScore as a MicrosoftGraphScoredEmailAddressRelevanceScore1
func (t MicrosoftGraphScoredEmailAddress_RelevanceScore) AsMicrosoftGraphScoredEmailAddressRelevanceScore1() (MicrosoftGraphScoredEmailAddressRelevanceScore1, error) {
	var body MicrosoftGraphScoredEmailAddressRelevanceScore1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphScoredEmailAddressRelevanceScore1 overwrites any union data inside the MicrosoftGraphScoredEmailAddress_RelevanceScore as the provided MicrosoftGraphScoredEmailAddressRelevanceScore1
func (t *MicrosoftGraphScoredEmailAddress_RelevanceScore) FromMicrosoftGraphScoredEmailAddressRelevanceScore1(v MicrosoftGraphScoredEmailAddressRelevanceScore1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphScoredEmailAddressRelevanceScore1 performs a merge with any union data inside the MicrosoftGraphScoredEmailAddress_RelevanceScore, using the provided MicrosoftGraphScoredEmailAddressRelevanceScore1
func (t *MicrosoftGraphScoredEmailAddress_RelevanceScore) MergeMicrosoftGraphScoredEmailAddressRelevanceScore1(v MicrosoftGraphScoredEmailAddressRelevanceScore1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsReferenceNumeric returns the union data inside the MicrosoftGraphScoredEmailAddress_RelevanceScore as a ReferenceNumeric
func (t MicrosoftGraphScoredEmailAddress_RelevanceScore) AsReferenceNumeric() (ReferenceNumeric, error) {
	var body ReferenceNumeric
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromReferenceNumeric overwrites any union data inside the MicrosoftGraphScoredEmailAddress_RelevanceScore as the provided ReferenceNumeric
func (t *MicrosoftGraphScoredEmailAddress_RelevanceScore) FromReferenceNumeric(v ReferenceNumeric) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeReferenceNumeric performs a merge with any union data inside the MicrosoftGraphScoredEmailAddress_RelevanceScore, using the provided ReferenceNumeric
func (t *MicrosoftGraphScoredEmailAddress_RelevanceScore) MergeReferenceNumeric(v ReferenceNumeric) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

func (t MicrosoftGraphScoredEmailAddress_RelevanceScore) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *MicrosoftGraphScoredEmailAddress_RelevanceScore) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsMicrosoftGraphSelectionLikelihoodInfo returns the union data inside the MicrosoftGraphScoredEmailAddress_SelectionLikelihood as a MicrosoftGraphSelectionLikelihoodInfo
func (t MicrosoftGraphScoredEmailAddress_SelectionLikelihood) AsMicrosoftGraphSelectionLikelihoodInfo() (MicrosoftGraphSelectionLikelihoodInfo, error) {
	var body MicrosoftGraphSelectionLikelihoodInfo
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphSelectionLikelihoodInfo overwrites any union data inside the MicrosoftGraphScoredEmailAddress_SelectionLikelihood as the provided MicrosoftGraphSelectionLikelihoodInfo
func (t *MicrosoftGraphScoredEmailAddress_SelectionLikelihood) FromMicrosoftGraphSelectionLikelihoodInfo(v MicrosoftGraphSelectionLikelihoodInfo) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphSelectionLikelihoodInfo performs a merge with any union data inside the MicrosoftGraphScoredEmailAddress_SelectionLikelihood, using the provided MicrosoftGraphSelectionLikelihoodInfo
func (t *MicrosoftGraphScoredEmailAddress_SelectionLikelihood) MergeMicrosoftGraphSelectionLikelihoodInfo(v MicrosoftGraphSelectionLikelihoodInfo) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsMicrosoftGraphScoredEmailAddressSelectionLikelihood1 returns the union data inside the MicrosoftGraphScoredEmailAddress_SelectionLikelihood as a MicrosoftGraphScoredEmailAddressSelectionLikelihood1
func (t MicrosoftGraphScoredEmailAddress_SelectionLikelihood) AsMicrosoftGraphScoredEmailAddressSelectionLikelihood1() (MicrosoftGraphScoredEmailAddressSelectionLikelihood1, error) {
	var body MicrosoftGraphScoredEmailAddressSelectionLikelihood1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphScoredEmailAddressSelectionLikelihood1 overwrites any union data inside the MicrosoftGraphScoredEmailAddress_SelectionLikelihood as the provided MicrosoftGraphScoredEmailAddressSelectionLikelihood1
func (t *MicrosoftGraphScoredEmailAddress_SelectionLikelihood) FromMicrosoftGraphScoredEmailAddressSelectionLikelihood1(v MicrosoftGraphScoredEmailAddressSelectionLikelihood1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphScoredEmailAddressSelectionLikelihood1 performs a merge with any union data inside the MicrosoftGraphScoredEmailAddress_SelectionLikelihood, using the provided MicrosoftGraphScoredEmailAddressSelectionLikelihood1
func (t *MicrosoftGraphScoredEmailAddress_SelectionLikelihood) MergeMicrosoftGraphScoredEmailAddressSelectionLikelihood1(v MicrosoftGraphScoredEmailAddressSelectionLikelihood1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

func (t MicrosoftGraphScoredEmailAddress_SelectionLikelihood) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *MicrosoftGraphScoredEmailAddress_SelectionLikelihood) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsMicrosoftGraphIdentitySet returns the union data inside the MicrosoftGraphSectionGroup_CreatedBy as a MicrosoftGraphIdentitySet
func (t MicrosoftGraphSectionGroup_CreatedBy) AsMicrosoftGraphIdentitySet() (MicrosoftGraphIdentitySet, error) {
	var body MicrosoftGraphIdentitySet
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphIdentitySet overwrites any union data inside the MicrosoftGraphSectionGroup_CreatedBy as the provided MicrosoftGraphIdentitySet
func (t *MicrosoftGraphSectionGroup_CreatedBy) FromMicrosoftGraphIdentitySet(v MicrosoftGraphIdentitySet) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphIdentitySet performs a merge with any union data inside the MicrosoftGraphSectionGroup_CreatedBy, using the provided MicrosoftGraphIdentitySet
func (t *MicrosoftGraphSectionGroup_CreatedBy) MergeMicrosoftGraphIdentitySet(v MicrosoftGraphIdentitySet) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsMicrosoftGraphSectionGroupCreatedBy1 returns the union data inside the MicrosoftGraphSectionGroup_CreatedBy as a MicrosoftGraphSectionGroupCreatedBy1
func (t MicrosoftGraphSectionGroup_CreatedBy) AsMicrosoftGraphSectionGroupCreatedBy1() (MicrosoftGraphSectionGroupCreatedBy1, error) {
	var body MicrosoftGraphSectionGroupCreatedBy1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphSectionGroupCreatedBy1 overwrites any union data inside the MicrosoftGraphSectionGroup_CreatedBy as the provided MicrosoftGraphSectionGroupCreatedBy1
func (t *MicrosoftGraphSectionGroup_CreatedBy) FromMicrosoftGraphSectionGroupCreatedBy1(v MicrosoftGraphSectionGroupCreatedBy1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphSectionGroupCreatedBy1 performs a merge with any union data inside the MicrosoftGraphSectionGroup_CreatedBy, using the provided MicrosoftGraphSectionGroupCreatedBy1
func (t *MicrosoftGraphSectionGroup_CreatedBy) MergeMicrosoftGraphSectionGroupCreatedBy1(v MicrosoftGraphSectionGroupCreatedBy1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

func (t MicrosoftGraphSectionGroup_CreatedBy) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *MicrosoftGraphSectionGroup_CreatedBy) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsMicrosoftGraphIdentitySet returns the union data inside the MicrosoftGraphSectionGroup_LastModifiedBy as a MicrosoftGraphIdentitySet
func (t MicrosoftGraphSectionGroup_LastModifiedBy) AsMicrosoftGraphIdentitySet() (MicrosoftGraphIdentitySet, error) {
	var body MicrosoftGraphIdentitySet
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphIdentitySet overwrites any union data inside the MicrosoftGraphSectionGroup_LastModifiedBy as the provided MicrosoftGraphIdentitySet
func (t *MicrosoftGraphSectionGroup_LastModifiedBy) FromMicrosoftGraphIdentitySet(v MicrosoftGraphIdentitySet) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphIdentitySet performs a merge with any union data inside the MicrosoftGraphSectionGroup_LastModifiedBy, using the provided MicrosoftGraphIdentitySet
func (t *MicrosoftGraphSectionGroup_LastModifiedBy) MergeMicrosoftGraphIdentitySet(v MicrosoftGraphIdentitySet) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsMicrosoftGraphSectionGroupLastModifiedBy1 returns the union data inside the MicrosoftGraphSectionGroup_LastModifiedBy as a MicrosoftGraphSectionGroupLastModifiedBy1
func (t MicrosoftGraphSectionGroup_LastModifiedBy) AsMicrosoftGraphSectionGroupLastModifiedBy1() (MicrosoftGraphSectionGroupLastModifiedBy1, error) {
	var body MicrosoftGraphSectionGroupLastModifiedBy1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphSectionGroupLastModifiedBy1 overwrites any union data inside the MicrosoftGraphSectionGroup_LastModifiedBy as the provided MicrosoftGraphSectionGroupLastModifiedBy1
func (t *MicrosoftGraphSectionGroup_LastModifiedBy) FromMicrosoftGraphSectionGroupLastModifiedBy1(v MicrosoftGraphSectionGroupLastModifiedBy1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphSectionGroupLastModifiedBy1 performs a merge with any union data inside the MicrosoftGraphSectionGroup_LastModifiedBy, using the provided MicrosoftGraphSectionGroupLastModifiedBy1
func (t *MicrosoftGraphSectionGroup_LastModifiedBy) MergeMicrosoftGraphSectionGroupLastModifiedBy1(v MicrosoftGraphSectionGroupLastModifiedBy1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

func (t MicrosoftGraphSectionGroup_LastModifiedBy) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *MicrosoftGraphSectionGroup_LastModifiedBy) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsMicrosoftGraphNotebook returns the union data inside the MicrosoftGraphSectionGroup_ParentNotebook as a MicrosoftGraphNotebook
func (t MicrosoftGraphSectionGroup_ParentNotebook) AsMicrosoftGraphNotebook() (MicrosoftGraphNotebook, error) {
	var body MicrosoftGraphNotebook
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphNotebook overwrites any union data inside the MicrosoftGraphSectionGroup_ParentNotebook as the provided MicrosoftGraphNotebook
func (t *MicrosoftGraphSectionGroup_ParentNotebook) FromMicrosoftGraphNotebook(v MicrosoftGraphNotebook) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphNotebook performs a merge with any union data inside the MicrosoftGraphSectionGroup_ParentNotebook, using the provided MicrosoftGraphNotebook
func (t *MicrosoftGraphSectionGroup_ParentNotebook) MergeMicrosoftGraphNotebook(v MicrosoftGraphNotebook) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsMicrosoftGraphSectionGroupParentNotebook1 returns the union data inside the MicrosoftGraphSectionGroup_ParentNotebook as a MicrosoftGraphSectionGroupParentNotebook1
func (t MicrosoftGraphSectionGroup_ParentNotebook) AsMicrosoftGraphSectionGroupParentNotebook1() (MicrosoftGraphSectionGroupParentNotebook1, error) {
	var body MicrosoftGraphSectionGroupParentNotebook1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphSectionGroupParentNotebook1 overwrites any union data inside the MicrosoftGraphSectionGroup_ParentNotebook as the provided MicrosoftGraphSectionGroupParentNotebook1
func (t *MicrosoftGraphSectionGroup_ParentNotebook) FromMicrosoftGraphSectionGroupParentNotebook1(v MicrosoftGraphSectionGroupParentNotebook1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphSectionGroupParentNotebook1 performs a merge with any union data inside the MicrosoftGraphSectionGroup_ParentNotebook, using the provided MicrosoftGraphSectionGroupParentNotebook1
func (t *MicrosoftGraphSectionGroup_ParentNotebook) MergeMicrosoftGraphSectionGroupParentNotebook1(v MicrosoftGraphSectionGroupParentNotebook1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

func (t MicrosoftGraphSectionGroup_ParentNotebook) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *MicrosoftGraphSectionGroup_ParentNotebook) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsMicrosoftGraphSectionGroup returns the union data inside the MicrosoftGraphSectionGroup_ParentSectionGroup as a MicrosoftGraphSectionGroup
func (t MicrosoftGraphSectionGroup_ParentSectionGroup) AsMicrosoftGraphSectionGroup() (MicrosoftGraphSectionGroup, error) {
	var body MicrosoftGraphSectionGroup
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphSectionGroup overwrites any union data inside the MicrosoftGraphSectionGroup_ParentSectionGroup as the provided MicrosoftGraphSectionGroup
func (t *MicrosoftGraphSectionGroup_ParentSectionGroup) FromMicrosoftGraphSectionGroup(v MicrosoftGraphSectionGroup) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphSectionGroup performs a merge with any union data inside the MicrosoftGraphSectionGroup_ParentSectionGroup, using the provided MicrosoftGraphSectionGroup
func (t *MicrosoftGraphSectionGroup_ParentSectionGroup) MergeMicrosoftGraphSectionGroup(v MicrosoftGraphSectionGroup) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsMicrosoftGraphSectionGroupParentSectionGroup1 returns the union data inside the MicrosoftGraphSectionGroup_ParentSectionGroup as a MicrosoftGraphSectionGroupParentSectionGroup1
func (t MicrosoftGraphSectionGroup_ParentSectionGroup) AsMicrosoftGraphSectionGroupParentSectionGroup1() (MicrosoftGraphSectionGroupParentSectionGroup1, error) {
	var body MicrosoftGraphSectionGroupParentSectionGroup1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphSectionGroupParentSectionGroup1 overwrites any union data inside the MicrosoftGraphSectionGroup_ParentSectionGroup as the provided MicrosoftGraphSectionGroupParentSectionGroup1
func (t *MicrosoftGraphSectionGroup_ParentSectionGroup) FromMicrosoftGraphSectionGroupParentSectionGroup1(v MicrosoftGraphSectionGroupParentSectionGroup1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphSectionGroupParentSectionGroup1 performs a merge with any union data inside the MicrosoftGraphSectionGroup_ParentSectionGroup, using the provided MicrosoftGraphSectionGroupParentSectionGroup1
func (t *MicrosoftGraphSectionGroup_ParentSectionGroup) MergeMicrosoftGraphSectionGroupParentSectionGroup1(v MicrosoftGraphSectionGroupParentSectionGroup1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

func (t MicrosoftGraphSectionGroup_ParentSectionGroup) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *MicrosoftGraphSectionGroup_ParentSectionGroup) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsMicrosoftGraphExternalLink returns the union data inside the MicrosoftGraphSectionLinks_OneNoteClientUrl as a MicrosoftGraphExternalLink
func (t MicrosoftGraphSectionLinks_OneNoteClientUrl) AsMicrosoftGraphExternalLink() (MicrosoftGraphExternalLink, error) {
	var body MicrosoftGraphExternalLink
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphExternalLink overwrites any union data inside the MicrosoftGraphSectionLinks_OneNoteClientUrl as the provided MicrosoftGraphExternalLink
func (t *MicrosoftGraphSectionLinks_OneNoteClientUrl) FromMicrosoftGraphExternalLink(v MicrosoftGraphExternalLink) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphExternalLink performs a merge with any union data inside the MicrosoftGraphSectionLinks_OneNoteClientUrl, using the provided MicrosoftGraphExternalLink
func (t *MicrosoftGraphSectionLinks_OneNoteClientUrl) MergeMicrosoftGraphExternalLink(v MicrosoftGraphExternalLink) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsMicrosoftGraphSectionLinksOneNoteClientUrl1 returns the union data inside the MicrosoftGraphSectionLinks_OneNoteClientUrl as a MicrosoftGraphSectionLinksOneNoteClientUrl1
func (t MicrosoftGraphSectionLinks_OneNoteClientUrl) AsMicrosoftGraphSectionLinksOneNoteClientUrl1() (MicrosoftGraphSectionLinksOneNoteClientUrl1, error) {
	var body MicrosoftGraphSectionLinksOneNoteClientUrl1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphSectionLinksOneNoteClientUrl1 overwrites any union data inside the MicrosoftGraphSectionLinks_OneNoteClientUrl as the provided MicrosoftGraphSectionLinksOneNoteClientUrl1
func (t *MicrosoftGraphSectionLinks_OneNoteClientUrl) FromMicrosoftGraphSectionLinksOneNoteClientUrl1(v MicrosoftGraphSectionLinksOneNoteClientUrl1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphSectionLinksOneNoteClientUrl1 performs a merge with any union data inside the MicrosoftGraphSectionLinks_OneNoteClientUrl, using the provided MicrosoftGraphSectionLinksOneNoteClientUrl1
func (t *MicrosoftGraphSectionLinks_OneNoteClientUrl) MergeMicrosoftGraphSectionLinksOneNoteClientUrl1(v MicrosoftGraphSectionLinksOneNoteClientUrl1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

func (t MicrosoftGraphSectionLinks_OneNoteClientUrl) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *MicrosoftGraphSectionLinks_OneNoteClientUrl) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsMicrosoftGraphExternalLink returns the union data inside the MicrosoftGraphSectionLinks_OneNoteWebUrl as a MicrosoftGraphExternalLink
func (t MicrosoftGraphSectionLinks_OneNoteWebUrl) AsMicrosoftGraphExternalLink() (MicrosoftGraphExternalLink, error) {
	var body MicrosoftGraphExternalLink
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphExternalLink overwrites any union data inside the MicrosoftGraphSectionLinks_OneNoteWebUrl as the provided MicrosoftGraphExternalLink
func (t *MicrosoftGraphSectionLinks_OneNoteWebUrl) FromMicrosoftGraphExternalLink(v MicrosoftGraphExternalLink) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphExternalLink performs a merge with any union data inside the MicrosoftGraphSectionLinks_OneNoteWebUrl, using the provided MicrosoftGraphExternalLink
func (t *MicrosoftGraphSectionLinks_OneNoteWebUrl) MergeMicrosoftGraphExternalLink(v MicrosoftGraphExternalLink) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsMicrosoftGraphSectionLinksOneNoteWebUrl1 returns the union data inside the MicrosoftGraphSectionLinks_OneNoteWebUrl as a MicrosoftGraphSectionLinksOneNoteWebUrl1
func (t MicrosoftGraphSectionLinks_OneNoteWebUrl) AsMicrosoftGraphSectionLinksOneNoteWebUrl1() (MicrosoftGraphSectionLinksOneNoteWebUrl1, error) {
	var body MicrosoftGraphSectionLinksOneNoteWebUrl1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphSectionLinksOneNoteWebUrl1 overwrites any union data inside the MicrosoftGraphSectionLinks_OneNoteWebUrl as the provided MicrosoftGraphSectionLinksOneNoteWebUrl1
func (t *MicrosoftGraphSectionLinks_OneNoteWebUrl) FromMicrosoftGraphSectionLinksOneNoteWebUrl1(v MicrosoftGraphSectionLinksOneNoteWebUrl1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphSectionLinksOneNoteWebUrl1 performs a merge with any union data inside the MicrosoftGraphSectionLinks_OneNoteWebUrl, using the provided MicrosoftGraphSectionLinksOneNoteWebUrl1
func (t *MicrosoftGraphSectionLinks_OneNoteWebUrl) MergeMicrosoftGraphSectionLinksOneNoteWebUrl1(v MicrosoftGraphSectionLinksOneNoteWebUrl1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

func (t MicrosoftGraphSectionLinks_OneNoteWebUrl) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *MicrosoftGraphSectionLinks_OneNoteWebUrl) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsMicrosoftGraphIdentity returns the union data inside the MicrosoftGraphSharePointIdentitySet_Application as a MicrosoftGraphIdentity
func (t MicrosoftGraphSharePointIdentitySet_Application) AsMicrosoftGraphIdentity() (MicrosoftGraphIdentity, error) {
	var body MicrosoftGraphIdentity
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphIdentity overwrites any union data inside the MicrosoftGraphSharePointIdentitySet_Application as the provided MicrosoftGraphIdentity
func (t *MicrosoftGraphSharePointIdentitySet_Application) FromMicrosoftGraphIdentity(v MicrosoftGraphIdentity) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphIdentity performs a merge with any union data inside the MicrosoftGraphSharePointIdentitySet_Application, using the provided MicrosoftGraphIdentity
func (t *MicrosoftGraphSharePointIdentitySet_Application) MergeMicrosoftGraphIdentity(v MicrosoftGraphIdentity) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsMicrosoftGraphSharePointIdentitySetApplication1 returns the union data inside the MicrosoftGraphSharePointIdentitySet_Application as a MicrosoftGraphSharePointIdentitySetApplication1
func (t MicrosoftGraphSharePointIdentitySet_Application) AsMicrosoftGraphSharePointIdentitySetApplication1() (MicrosoftGraphSharePointIdentitySetApplication1, error) {
	var body MicrosoftGraphSharePointIdentitySetApplication1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphSharePointIdentitySetApplication1 overwrites any union data inside the MicrosoftGraphSharePointIdentitySet_Application as the provided MicrosoftGraphSharePointIdentitySetApplication1
func (t *MicrosoftGraphSharePointIdentitySet_Application) FromMicrosoftGraphSharePointIdentitySetApplication1(v MicrosoftGraphSharePointIdentitySetApplication1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphSharePointIdentitySetApplication1 performs a merge with any union data inside the MicrosoftGraphSharePointIdentitySet_Application, using the provided MicrosoftGraphSharePointIdentitySetApplication1
func (t *MicrosoftGraphSharePointIdentitySet_Application) MergeMicrosoftGraphSharePointIdentitySetApplication1(v MicrosoftGraphSharePointIdentitySetApplication1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

func (t MicrosoftGraphSharePointIdentitySet_Application) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *MicrosoftGraphSharePointIdentitySet_Application) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsMicrosoftGraphIdentity returns the union data inside the MicrosoftGraphSharePointIdentitySet_Device as a MicrosoftGraphIdentity
func (t MicrosoftGraphSharePointIdentitySet_Device) AsMicrosoftGraphIdentity() (MicrosoftGraphIdentity, error) {
	var body MicrosoftGraphIdentity
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphIdentity overwrites any union data inside the MicrosoftGraphSharePointIdentitySet_Device as the provided MicrosoftGraphIdentity
func (t *MicrosoftGraphSharePointIdentitySet_Device) FromMicrosoftGraphIdentity(v MicrosoftGraphIdentity) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphIdentity performs a merge with any union data inside the MicrosoftGraphSharePointIdentitySet_Device, using the provided MicrosoftGraphIdentity
func (t *MicrosoftGraphSharePointIdentitySet_Device) MergeMicrosoftGraphIdentity(v MicrosoftGraphIdentity) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsMicrosoftGraphSharePointIdentitySetDevice1 returns the union data inside the MicrosoftGraphSharePointIdentitySet_Device as a MicrosoftGraphSharePointIdentitySetDevice1
func (t MicrosoftGraphSharePointIdentitySet_Device) AsMicrosoftGraphSharePointIdentitySetDevice1() (MicrosoftGraphSharePointIdentitySetDevice1, error) {
	var body MicrosoftGraphSharePointIdentitySetDevice1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphSharePointIdentitySetDevice1 overwrites any union data inside the MicrosoftGraphSharePointIdentitySet_Device as the provided MicrosoftGraphSharePointIdentitySetDevice1
func (t *MicrosoftGraphSharePointIdentitySet_Device) FromMicrosoftGraphSharePointIdentitySetDevice1(v MicrosoftGraphSharePointIdentitySetDevice1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphSharePointIdentitySetDevice1 performs a merge with any union data inside the MicrosoftGraphSharePointIdentitySet_Device, using the provided MicrosoftGraphSharePointIdentitySetDevice1
func (t *MicrosoftGraphSharePointIdentitySet_Device) MergeMicrosoftGraphSharePointIdentitySetDevice1(v MicrosoftGraphSharePointIdentitySetDevice1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

func (t MicrosoftGraphSharePointIdentitySet_Device) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *MicrosoftGraphSharePointIdentitySet_Device) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsMicrosoftGraphIdentity returns the union data inside the MicrosoftGraphSharePointIdentitySet_Group as a MicrosoftGraphIdentity
func (t MicrosoftGraphSharePointIdentitySet_Group) AsMicrosoftGraphIdentity() (MicrosoftGraphIdentity, error) {
	var body MicrosoftGraphIdentity
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphIdentity overwrites any union data inside the MicrosoftGraphSharePointIdentitySet_Group as the provided MicrosoftGraphIdentity
func (t *MicrosoftGraphSharePointIdentitySet_Group) FromMicrosoftGraphIdentity(v MicrosoftGraphIdentity) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphIdentity performs a merge with any union data inside the MicrosoftGraphSharePointIdentitySet_Group, using the provided MicrosoftGraphIdentity
func (t *MicrosoftGraphSharePointIdentitySet_Group) MergeMicrosoftGraphIdentity(v MicrosoftGraphIdentity) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsMicrosoftGraphSharePointIdentitySetGroup1 returns the union data inside the MicrosoftGraphSharePointIdentitySet_Group as a MicrosoftGraphSharePointIdentitySetGroup1
func (t MicrosoftGraphSharePointIdentitySet_Group) AsMicrosoftGraphSharePointIdentitySetGroup1() (MicrosoftGraphSharePointIdentitySetGroup1, error) {
	var body MicrosoftGraphSharePointIdentitySetGroup1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphSharePointIdentitySetGroup1 overwrites any union data inside the MicrosoftGraphSharePointIdentitySet_Group as the provided MicrosoftGraphSharePointIdentitySetGroup1
func (t *MicrosoftGraphSharePointIdentitySet_Group) FromMicrosoftGraphSharePointIdentitySetGroup1(v MicrosoftGraphSharePointIdentitySetGroup1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphSharePointIdentitySetGroup1 performs a merge with any union data inside the MicrosoftGraphSharePointIdentitySet_Group, using the provided MicrosoftGraphSharePointIdentitySetGroup1
func (t *MicrosoftGraphSharePointIdentitySet_Group) MergeMicrosoftGraphSharePointIdentitySetGroup1(v MicrosoftGraphSharePointIdentitySetGroup1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

func (t MicrosoftGraphSharePointIdentitySet_Group) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *MicrosoftGraphSharePointIdentitySet_Group) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsMicrosoftGraphSharePointIdentity returns the union data inside the MicrosoftGraphSharePointIdentitySet_SiteGroup as a MicrosoftGraphSharePointIdentity
func (t MicrosoftGraphSharePointIdentitySet_SiteGroup) AsMicrosoftGraphSharePointIdentity() (MicrosoftGraphSharePointIdentity, error) {
	var body MicrosoftGraphSharePointIdentity
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphSharePointIdentity overwrites any union data inside the MicrosoftGraphSharePointIdentitySet_SiteGroup as the provided MicrosoftGraphSharePointIdentity
func (t *MicrosoftGraphSharePointIdentitySet_SiteGroup) FromMicrosoftGraphSharePointIdentity(v MicrosoftGraphSharePointIdentity) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphSharePointIdentity performs a merge with any union data inside the MicrosoftGraphSharePointIdentitySet_SiteGroup, using the provided MicrosoftGraphSharePointIdentity
func (t *MicrosoftGraphSharePointIdentitySet_SiteGroup) MergeMicrosoftGraphSharePointIdentity(v MicrosoftGraphSharePointIdentity) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsMicrosoftGraphSharePointIdentitySetSiteGroup1 returns the union data inside the MicrosoftGraphSharePointIdentitySet_SiteGroup as a MicrosoftGraphSharePointIdentitySetSiteGroup1
func (t MicrosoftGraphSharePointIdentitySet_SiteGroup) AsMicrosoftGraphSharePointIdentitySetSiteGroup1() (MicrosoftGraphSharePointIdentitySetSiteGroup1, error) {
	var body MicrosoftGraphSharePointIdentitySetSiteGroup1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphSharePointIdentitySetSiteGroup1 overwrites any union data inside the MicrosoftGraphSharePointIdentitySet_SiteGroup as the provided MicrosoftGraphSharePointIdentitySetSiteGroup1
func (t *MicrosoftGraphSharePointIdentitySet_SiteGroup) FromMicrosoftGraphSharePointIdentitySetSiteGroup1(v MicrosoftGraphSharePointIdentitySetSiteGroup1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphSharePointIdentitySetSiteGroup1 performs a merge with any union data inside the MicrosoftGraphSharePointIdentitySet_SiteGroup, using the provided MicrosoftGraphSharePointIdentitySetSiteGroup1
func (t *MicrosoftGraphSharePointIdentitySet_SiteGroup) MergeMicrosoftGraphSharePointIdentitySetSiteGroup1(v MicrosoftGraphSharePointIdentitySetSiteGroup1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

func (t MicrosoftGraphSharePointIdentitySet_SiteGroup) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *MicrosoftGraphSharePointIdentitySet_SiteGroup) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsMicrosoftGraphSharePointIdentity returns the union data inside the MicrosoftGraphSharePointIdentitySet_SiteUser as a MicrosoftGraphSharePointIdentity
func (t MicrosoftGraphSharePointIdentitySet_SiteUser) AsMicrosoftGraphSharePointIdentity() (MicrosoftGraphSharePointIdentity, error) {
	var body MicrosoftGraphSharePointIdentity
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphSharePointIdentity overwrites any union data inside the MicrosoftGraphSharePointIdentitySet_SiteUser as the provided MicrosoftGraphSharePointIdentity
func (t *MicrosoftGraphSharePointIdentitySet_SiteUser) FromMicrosoftGraphSharePointIdentity(v MicrosoftGraphSharePointIdentity) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphSharePointIdentity performs a merge with any union data inside the MicrosoftGraphSharePointIdentitySet_SiteUser, using the provided MicrosoftGraphSharePointIdentity
func (t *MicrosoftGraphSharePointIdentitySet_SiteUser) MergeMicrosoftGraphSharePointIdentity(v MicrosoftGraphSharePointIdentity) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsMicrosoftGraphSharePointIdentitySetSiteUser1 returns the union data inside the MicrosoftGraphSharePointIdentitySet_SiteUser as a MicrosoftGraphSharePointIdentitySetSiteUser1
func (t MicrosoftGraphSharePointIdentitySet_SiteUser) AsMicrosoftGraphSharePointIdentitySetSiteUser1() (MicrosoftGraphSharePointIdentitySetSiteUser1, error) {
	var body MicrosoftGraphSharePointIdentitySetSiteUser1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphSharePointIdentitySetSiteUser1 overwrites any union data inside the MicrosoftGraphSharePointIdentitySet_SiteUser as the provided MicrosoftGraphSharePointIdentitySetSiteUser1
func (t *MicrosoftGraphSharePointIdentitySet_SiteUser) FromMicrosoftGraphSharePointIdentitySetSiteUser1(v MicrosoftGraphSharePointIdentitySetSiteUser1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphSharePointIdentitySetSiteUser1 performs a merge with any union data inside the MicrosoftGraphSharePointIdentitySet_SiteUser, using the provided MicrosoftGraphSharePointIdentitySetSiteUser1
func (t *MicrosoftGraphSharePointIdentitySet_SiteUser) MergeMicrosoftGraphSharePointIdentitySetSiteUser1(v MicrosoftGraphSharePointIdentitySetSiteUser1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

func (t MicrosoftGraphSharePointIdentitySet_SiteUser) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *MicrosoftGraphSharePointIdentitySet_SiteUser) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsMicrosoftGraphIdentity returns the union data inside the MicrosoftGraphSharePointIdentitySet_User as a MicrosoftGraphIdentity
func (t MicrosoftGraphSharePointIdentitySet_User) AsMicrosoftGraphIdentity() (MicrosoftGraphIdentity, error) {
	var body MicrosoftGraphIdentity
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphIdentity overwrites any union data inside the MicrosoftGraphSharePointIdentitySet_User as the provided MicrosoftGraphIdentity
func (t *MicrosoftGraphSharePointIdentitySet_User) FromMicrosoftGraphIdentity(v MicrosoftGraphIdentity) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphIdentity performs a merge with any union data inside the MicrosoftGraphSharePointIdentitySet_User, using the provided MicrosoftGraphIdentity
func (t *MicrosoftGraphSharePointIdentitySet_User) MergeMicrosoftGraphIdentity(v MicrosoftGraphIdentity) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsMicrosoftGraphSharePointIdentitySetUser1 returns the union data inside the MicrosoftGraphSharePointIdentitySet_User as a MicrosoftGraphSharePointIdentitySetUser1
func (t MicrosoftGraphSharePointIdentitySet_User) AsMicrosoftGraphSharePointIdentitySetUser1() (MicrosoftGraphSharePointIdentitySetUser1, error) {
	var body MicrosoftGraphSharePointIdentitySetUser1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphSharePointIdentitySetUser1 overwrites any union data inside the MicrosoftGraphSharePointIdentitySet_User as the provided MicrosoftGraphSharePointIdentitySetUser1
func (t *MicrosoftGraphSharePointIdentitySet_User) FromMicrosoftGraphSharePointIdentitySetUser1(v MicrosoftGraphSharePointIdentitySetUser1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphSharePointIdentitySetUser1 performs a merge with any union data inside the MicrosoftGraphSharePointIdentitySet_User, using the provided MicrosoftGraphSharePointIdentitySetUser1
func (t *MicrosoftGraphSharePointIdentitySet_User) MergeMicrosoftGraphSharePointIdentitySetUser1(v MicrosoftGraphSharePointIdentitySetUser1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

func (t MicrosoftGraphSharePointIdentitySet_User) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *MicrosoftGraphSharePointIdentitySet_User) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsMicrosoftGraphIdentitySet returns the union data inside the MicrosoftGraphShared_Owner as a MicrosoftGraphIdentitySet
func (t MicrosoftGraphShared_Owner) AsMicrosoftGraphIdentitySet() (MicrosoftGraphIdentitySet, error) {
	var body MicrosoftGraphIdentitySet
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphIdentitySet overwrites any union data inside the MicrosoftGraphShared_Owner as the provided MicrosoftGraphIdentitySet
func (t *MicrosoftGraphShared_Owner) FromMicrosoftGraphIdentitySet(v MicrosoftGraphIdentitySet) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphIdentitySet performs a merge with any union data inside the MicrosoftGraphShared_Owner, using the provided MicrosoftGraphIdentitySet
func (t *MicrosoftGraphShared_Owner) MergeMicrosoftGraphIdentitySet(v MicrosoftGraphIdentitySet) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsMicrosoftGraphSharedOwner1 returns the union data inside the MicrosoftGraphShared_Owner as a MicrosoftGraphSharedOwner1
func (t MicrosoftGraphShared_Owner) AsMicrosoftGraphSharedOwner1() (MicrosoftGraphSharedOwner1, error) {
	var body MicrosoftGraphSharedOwner1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphSharedOwner1 overwrites any union data inside the MicrosoftGraphShared_Owner as the provided MicrosoftGraphSharedOwner1
func (t *MicrosoftGraphShared_Owner) FromMicrosoftGraphSharedOwner1(v MicrosoftGraphSharedOwner1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphSharedOwner1 performs a merge with any union data inside the MicrosoftGraphShared_Owner, using the provided MicrosoftGraphSharedOwner1
func (t *MicrosoftGraphShared_Owner) MergeMicrosoftGraphSharedOwner1(v MicrosoftGraphSharedOwner1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

func (t MicrosoftGraphShared_Owner) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *MicrosoftGraphShared_Owner) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsMicrosoftGraphIdentitySet returns the union data inside the MicrosoftGraphShared_SharedBy as a MicrosoftGraphIdentitySet
func (t MicrosoftGraphShared_SharedBy) AsMicrosoftGraphIdentitySet() (MicrosoftGraphIdentitySet, error) {
	var body MicrosoftGraphIdentitySet
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphIdentitySet overwrites any union data inside the MicrosoftGraphShared_SharedBy as the provided MicrosoftGraphIdentitySet
func (t *MicrosoftGraphShared_SharedBy) FromMicrosoftGraphIdentitySet(v MicrosoftGraphIdentitySet) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphIdentitySet performs a merge with any union data inside the MicrosoftGraphShared_SharedBy, using the provided MicrosoftGraphIdentitySet
func (t *MicrosoftGraphShared_SharedBy) MergeMicrosoftGraphIdentitySet(v MicrosoftGraphIdentitySet) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsMicrosoftGraphSharedSharedBy1 returns the union data inside the MicrosoftGraphShared_SharedBy as a MicrosoftGraphSharedSharedBy1
func (t MicrosoftGraphShared_SharedBy) AsMicrosoftGraphSharedSharedBy1() (MicrosoftGraphSharedSharedBy1, error) {
	var body MicrosoftGraphSharedSharedBy1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphSharedSharedBy1 overwrites any union data inside the MicrosoftGraphShared_SharedBy as the provided MicrosoftGraphSharedSharedBy1
func (t *MicrosoftGraphShared_SharedBy) FromMicrosoftGraphSharedSharedBy1(v MicrosoftGraphSharedSharedBy1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphSharedSharedBy1 performs a merge with any union data inside the MicrosoftGraphShared_SharedBy, using the provided MicrosoftGraphSharedSharedBy1
func (t *MicrosoftGraphShared_SharedBy) MergeMicrosoftGraphSharedSharedBy1(v MicrosoftGraphSharedSharedBy1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

func (t MicrosoftGraphShared_SharedBy) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *MicrosoftGraphShared_SharedBy) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsMicrosoftGraphSharingDetail returns the union data inside the MicrosoftGraphSharedInsight_LastShared as a MicrosoftGraphSharingDetail
func (t MicrosoftGraphSharedInsight_LastShared) AsMicrosoftGraphSharingDetail() (MicrosoftGraphSharingDetail, error) {
	var body MicrosoftGraphSharingDetail
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphSharingDetail overwrites any union data inside the MicrosoftGraphSharedInsight_LastShared as the provided MicrosoftGraphSharingDetail
func (t *MicrosoftGraphSharedInsight_LastShared) FromMicrosoftGraphSharingDetail(v MicrosoftGraphSharingDetail) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphSharingDetail performs a merge with any union data inside the MicrosoftGraphSharedInsight_LastShared, using the provided MicrosoftGraphSharingDetail
func (t *MicrosoftGraphSharedInsight_LastShared) MergeMicrosoftGraphSharingDetail(v MicrosoftGraphSharingDetail) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsMicrosoftGraphSharedInsightLastShared1 returns the union data inside the MicrosoftGraphSharedInsight_LastShared as a MicrosoftGraphSharedInsightLastShared1
func (t MicrosoftGraphSharedInsight_LastShared) AsMicrosoftGraphSharedInsightLastShared1() (MicrosoftGraphSharedInsightLastShared1, error) {
	var body MicrosoftGraphSharedInsightLastShared1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphSharedInsightLastShared1 overwrites any union data inside the MicrosoftGraphSharedInsight_LastShared as the provided MicrosoftGraphSharedInsightLastShared1
func (t *MicrosoftGraphSharedInsight_LastShared) FromMicrosoftGraphSharedInsightLastShared1(v MicrosoftGraphSharedInsightLastShared1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphSharedInsightLastShared1 performs a merge with any union data inside the MicrosoftGraphSharedInsight_LastShared, using the provided MicrosoftGraphSharedInsightLastShared1
func (t *MicrosoftGraphSharedInsight_LastShared) MergeMicrosoftGraphSharedInsightLastShared1(v MicrosoftGraphSharedInsightLastShared1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

func (t MicrosoftGraphSharedInsight_LastShared) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *MicrosoftGraphSharedInsight_LastShared) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsMicrosoftGraphEntity returns the union data inside the MicrosoftGraphSharedInsight_LastSharedMethod as a MicrosoftGraphEntity
func (t MicrosoftGraphSharedInsight_LastSharedMethod) AsMicrosoftGraphEntity() (MicrosoftGraphEntity, error) {
	var body MicrosoftGraphEntity
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphEntity overwrites any union data inside the MicrosoftGraphSharedInsight_LastSharedMethod as the provided MicrosoftGraphEntity
func (t *MicrosoftGraphSharedInsight_LastSharedMethod) FromMicrosoftGraphEntity(v MicrosoftGraphEntity) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphEntity performs a merge with any union data inside the MicrosoftGraphSharedInsight_LastSharedMethod, using the provided MicrosoftGraphEntity
func (t *MicrosoftGraphSharedInsight_LastSharedMethod) MergeMicrosoftGraphEntity(v MicrosoftGraphEntity) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsMicrosoftGraphSharedInsightLastSharedMethod1 returns the union data inside the MicrosoftGraphSharedInsight_LastSharedMethod as a MicrosoftGraphSharedInsightLastSharedMethod1
func (t MicrosoftGraphSharedInsight_LastSharedMethod) AsMicrosoftGraphSharedInsightLastSharedMethod1() (MicrosoftGraphSharedInsightLastSharedMethod1, error) {
	var body MicrosoftGraphSharedInsightLastSharedMethod1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphSharedInsightLastSharedMethod1 overwrites any union data inside the MicrosoftGraphSharedInsight_LastSharedMethod as the provided MicrosoftGraphSharedInsightLastSharedMethod1
func (t *MicrosoftGraphSharedInsight_LastSharedMethod) FromMicrosoftGraphSharedInsightLastSharedMethod1(v MicrosoftGraphSharedInsightLastSharedMethod1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphSharedInsightLastSharedMethod1 performs a merge with any union data inside the MicrosoftGraphSharedInsight_LastSharedMethod, using the provided MicrosoftGraphSharedInsightLastSharedMethod1
func (t *MicrosoftGraphSharedInsight_LastSharedMethod) MergeMicrosoftGraphSharedInsightLastSharedMethod1(v MicrosoftGraphSharedInsightLastSharedMethod1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

func (t MicrosoftGraphSharedInsight_LastSharedMethod) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *MicrosoftGraphSharedInsight_LastSharedMethod) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsMicrosoftGraphEntity returns the union data inside the MicrosoftGraphSharedInsight_Resource as a MicrosoftGraphEntity
func (t MicrosoftGraphSharedInsight_Resource) AsMicrosoftGraphEntity() (MicrosoftGraphEntity, error) {
	var body MicrosoftGraphEntity
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphEntity overwrites any union data inside the MicrosoftGraphSharedInsight_Resource as the provided MicrosoftGraphEntity
func (t *MicrosoftGraphSharedInsight_Resource) FromMicrosoftGraphEntity(v MicrosoftGraphEntity) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphEntity performs a merge with any union data inside the MicrosoftGraphSharedInsight_Resource, using the provided MicrosoftGraphEntity
func (t *MicrosoftGraphSharedInsight_Resource) MergeMicrosoftGraphEntity(v MicrosoftGraphEntity) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsMicrosoftGraphSharedInsightResource1 returns the union data inside the MicrosoftGraphSharedInsight_Resource as a MicrosoftGraphSharedInsightResource1
func (t MicrosoftGraphSharedInsight_Resource) AsMicrosoftGraphSharedInsightResource1() (MicrosoftGraphSharedInsightResource1, error) {
	var body MicrosoftGraphSharedInsightResource1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphSharedInsightResource1 overwrites any union data inside the MicrosoftGraphSharedInsight_Resource as the provided MicrosoftGraphSharedInsightResource1
func (t *MicrosoftGraphSharedInsight_Resource) FromMicrosoftGraphSharedInsightResource1(v MicrosoftGraphSharedInsightResource1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphSharedInsightResource1 performs a merge with any union data inside the MicrosoftGraphSharedInsight_Resource, using the provided MicrosoftGraphSharedInsightResource1
func (t *MicrosoftGraphSharedInsight_Resource) MergeMicrosoftGraphSharedInsightResource1(v MicrosoftGraphSharedInsightResource1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

func (t MicrosoftGraphSharedInsight_Resource) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *MicrosoftGraphSharedInsight_Resource) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsMicrosoftGraphResourceReference returns the union data inside the MicrosoftGraphSharedInsight_ResourceReference as a MicrosoftGraphResourceReference
func (t MicrosoftGraphSharedInsight_ResourceReference) AsMicrosoftGraphResourceReference() (MicrosoftGraphResourceReference, error) {
	var body MicrosoftGraphResourceReference
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphResourceReference overwrites any union data inside the MicrosoftGraphSharedInsight_ResourceReference as the provided MicrosoftGraphResourceReference
func (t *MicrosoftGraphSharedInsight_ResourceReference) FromMicrosoftGraphResourceReference(v MicrosoftGraphResourceReference) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphResourceReference performs a merge with any union data inside the MicrosoftGraphSharedInsight_ResourceReference, using the provided MicrosoftGraphResourceReference
func (t *MicrosoftGraphSharedInsight_ResourceReference) MergeMicrosoftGraphResourceReference(v MicrosoftGraphResourceReference) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsMicrosoftGraphSharedInsightResourceReference1 returns the union data inside the MicrosoftGraphSharedInsight_ResourceReference as a MicrosoftGraphSharedInsightResourceReference1
func (t MicrosoftGraphSharedInsight_ResourceReference) AsMicrosoftGraphSharedInsightResourceReference1() (MicrosoftGraphSharedInsightResourceReference1, error) {
	var body MicrosoftGraphSharedInsightResourceReference1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphSharedInsightResourceReference1 overwrites any union data inside the MicrosoftGraphSharedInsight_ResourceReference as the provided MicrosoftGraphSharedInsightResourceReference1
func (t *MicrosoftGraphSharedInsight_ResourceReference) FromMicrosoftGraphSharedInsightResourceReference1(v MicrosoftGraphSharedInsightResourceReference1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphSharedInsightResourceReference1 performs a merge with any union data inside the MicrosoftGraphSharedInsight_ResourceReference, using the provided MicrosoftGraphSharedInsightResourceReference1
func (t *MicrosoftGraphSharedInsight_ResourceReference) MergeMicrosoftGraphSharedInsightResourceReference1(v MicrosoftGraphSharedInsightResourceReference1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

func (t MicrosoftGraphSharedInsight_ResourceReference) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *MicrosoftGraphSharedInsight_ResourceReference) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsMicrosoftGraphResourceVisualization returns the union data inside the MicrosoftGraphSharedInsight_ResourceVisualization as a MicrosoftGraphResourceVisualization
func (t MicrosoftGraphSharedInsight_ResourceVisualization) AsMicrosoftGraphResourceVisualization() (MicrosoftGraphResourceVisualization, error) {
	var body MicrosoftGraphResourceVisualization
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphResourceVisualization overwrites any union data inside the MicrosoftGraphSharedInsight_ResourceVisualization as the provided MicrosoftGraphResourceVisualization
func (t *MicrosoftGraphSharedInsight_ResourceVisualization) FromMicrosoftGraphResourceVisualization(v MicrosoftGraphResourceVisualization) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphResourceVisualization performs a merge with any union data inside the MicrosoftGraphSharedInsight_ResourceVisualization, using the provided MicrosoftGraphResourceVisualization
func (t *MicrosoftGraphSharedInsight_ResourceVisualization) MergeMicrosoftGraphResourceVisualization(v MicrosoftGraphResourceVisualization) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsMicrosoftGraphSharedInsightResourceVisualization1 returns the union data inside the MicrosoftGraphSharedInsight_ResourceVisualization as a MicrosoftGraphSharedInsightResourceVisualization1
func (t MicrosoftGraphSharedInsight_ResourceVisualization) AsMicrosoftGraphSharedInsightResourceVisualization1() (MicrosoftGraphSharedInsightResourceVisualization1, error) {
	var body MicrosoftGraphSharedInsightResourceVisualization1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphSharedInsightResourceVisualization1 overwrites any union data inside the MicrosoftGraphSharedInsight_ResourceVisualization as the provided MicrosoftGraphSharedInsightResourceVisualization1
func (t *MicrosoftGraphSharedInsight_ResourceVisualization) FromMicrosoftGraphSharedInsightResourceVisualization1(v MicrosoftGraphSharedInsightResourceVisualization1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphSharedInsightResourceVisualization1 performs a merge with any union data inside the MicrosoftGraphSharedInsight_ResourceVisualization, using the provided MicrosoftGraphSharedInsightResourceVisualization1
func (t *MicrosoftGraphSharedInsight_ResourceVisualization) MergeMicrosoftGraphSharedInsightResourceVisualization1(v MicrosoftGraphSharedInsightResourceVisualization1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

func (t MicrosoftGraphSharedInsight_ResourceVisualization) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *MicrosoftGraphSharedInsight_ResourceVisualization) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsMicrosoftGraphSharingDetail returns the union data inside the MicrosoftGraphSharedInsight_SharingHistory_Item as a MicrosoftGraphSharingDetail
func (t MicrosoftGraphSharedInsight_SharingHistory_Item) AsMicrosoftGraphSharingDetail() (MicrosoftGraphSharingDetail, error) {
	var body MicrosoftGraphSharingDetail
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphSharingDetail overwrites any union data inside the MicrosoftGraphSharedInsight_SharingHistory_Item as the provided MicrosoftGraphSharingDetail
func (t *MicrosoftGraphSharedInsight_SharingHistory_Item) FromMicrosoftGraphSharingDetail(v MicrosoftGraphSharingDetail) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphSharingDetail performs a merge with any union data inside the MicrosoftGraphSharedInsight_SharingHistory_Item, using the provided MicrosoftGraphSharingDetail
func (t *MicrosoftGraphSharedInsight_SharingHistory_Item) MergeMicrosoftGraphSharingDetail(v MicrosoftGraphSharingDetail) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsMicrosoftGraphSharedInsightSharingHistory1 returns the union data inside the MicrosoftGraphSharedInsight_SharingHistory_Item as a MicrosoftGraphSharedInsightSharingHistory1
func (t MicrosoftGraphSharedInsight_SharingHistory_Item) AsMicrosoftGraphSharedInsightSharingHistory1() (MicrosoftGraphSharedInsightSharingHistory1, error) {
	var body MicrosoftGraphSharedInsightSharingHistory1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphSharedInsightSharingHistory1 overwrites any union data inside the MicrosoftGraphSharedInsight_SharingHistory_Item as the provided MicrosoftGraphSharedInsightSharingHistory1
func (t *MicrosoftGraphSharedInsight_SharingHistory_Item) FromMicrosoftGraphSharedInsightSharingHistory1(v MicrosoftGraphSharedInsightSharingHistory1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphSharedInsightSharingHistory1 performs a merge with any union data inside the MicrosoftGraphSharedInsight_SharingHistory_Item, using the provided MicrosoftGraphSharedInsightSharingHistory1
func (t *MicrosoftGraphSharedInsight_SharingHistory_Item) MergeMicrosoftGraphSharedInsightSharingHistory1(v MicrosoftGraphSharedInsightSharingHistory1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

func (t MicrosoftGraphSharedInsight_SharingHistory_Item) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *MicrosoftGraphSharedInsight_SharingHistory_Item) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsMicrosoftGraphTeam returns the union data inside the MicrosoftGraphSharedWithChannelTeamInfo_Team as a MicrosoftGraphTeam
func (t MicrosoftGraphSharedWithChannelTeamInfo_Team) AsMicrosoftGraphTeam() (MicrosoftGraphTeam, error) {
	var body MicrosoftGraphTeam
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphTeam overwrites any union data inside the MicrosoftGraphSharedWithChannelTeamInfo_Team as the provided MicrosoftGraphTeam
func (t *MicrosoftGraphSharedWithChannelTeamInfo_Team) FromMicrosoftGraphTeam(v MicrosoftGraphTeam) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphTeam performs a merge with any union data inside the MicrosoftGraphSharedWithChannelTeamInfo_Team, using the provided MicrosoftGraphTeam
func (t *MicrosoftGraphSharedWithChannelTeamInfo_Team) MergeMicrosoftGraphTeam(v MicrosoftGraphTeam) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsMicrosoftGraphSharedWithChannelTeamInfoTeam1 returns the union data inside the MicrosoftGraphSharedWithChannelTeamInfo_Team as a MicrosoftGraphSharedWithChannelTeamInfoTeam1
func (t MicrosoftGraphSharedWithChannelTeamInfo_Team) AsMicrosoftGraphSharedWithChannelTeamInfoTeam1() (MicrosoftGraphSharedWithChannelTeamInfoTeam1, error) {
	var body MicrosoftGraphSharedWithChannelTeamInfoTeam1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphSharedWithChannelTeamInfoTeam1 overwrites any union data inside the MicrosoftGraphSharedWithChannelTeamInfo_Team as the provided MicrosoftGraphSharedWithChannelTeamInfoTeam1
func (t *MicrosoftGraphSharedWithChannelTeamInfo_Team) FromMicrosoftGraphSharedWithChannelTeamInfoTeam1(v MicrosoftGraphSharedWithChannelTeamInfoTeam1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphSharedWithChannelTeamInfoTeam1 performs a merge with any union data inside the MicrosoftGraphSharedWithChannelTeamInfo_Team, using the provided MicrosoftGraphSharedWithChannelTeamInfoTeam1
func (t *MicrosoftGraphSharedWithChannelTeamInfo_Team) MergeMicrosoftGraphSharedWithChannelTeamInfoTeam1(v MicrosoftGraphSharedWithChannelTeamInfoTeam1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

func (t MicrosoftGraphSharedWithChannelTeamInfo_Team) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *MicrosoftGraphSharedWithChannelTeamInfo_Team) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsMicrosoftGraphInsightIdentity returns the union data inside the MicrosoftGraphSharingDetail_SharedBy as a MicrosoftGraphInsightIdentity
func (t MicrosoftGraphSharingDetail_SharedBy) AsMicrosoftGraphInsightIdentity() (MicrosoftGraphInsightIdentity, error) {
	var body MicrosoftGraphInsightIdentity
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphInsightIdentity overwrites any union data inside the MicrosoftGraphSharingDetail_SharedBy as the provided MicrosoftGraphInsightIdentity
func (t *MicrosoftGraphSharingDetail_SharedBy) FromMicrosoftGraphInsightIdentity(v MicrosoftGraphInsightIdentity) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphInsightIdentity performs a merge with any union data inside the MicrosoftGraphSharingDetail_SharedBy, using the provided MicrosoftGraphInsightIdentity
func (t *MicrosoftGraphSharingDetail_SharedBy) MergeMicrosoftGraphInsightIdentity(v MicrosoftGraphInsightIdentity) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsMicrosoftGraphSharingDetailSharedBy1 returns the union data inside the MicrosoftGraphSharingDetail_SharedBy as a MicrosoftGraphSharingDetailSharedBy1
func (t MicrosoftGraphSharingDetail_SharedBy) AsMicrosoftGraphSharingDetailSharedBy1() (MicrosoftGraphSharingDetailSharedBy1, error) {
	var body MicrosoftGraphSharingDetailSharedBy1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphSharingDetailSharedBy1 overwrites any union data inside the MicrosoftGraphSharingDetail_SharedBy as the provided MicrosoftGraphSharingDetailSharedBy1
func (t *MicrosoftGraphSharingDetail_SharedBy) FromMicrosoftGraphSharingDetailSharedBy1(v MicrosoftGraphSharingDetailSharedBy1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphSharingDetailSharedBy1 performs a merge with any union data inside the MicrosoftGraphSharingDetail_SharedBy, using the provided MicrosoftGraphSharingDetailSharedBy1
func (t *MicrosoftGraphSharingDetail_SharedBy) MergeMicrosoftGraphSharingDetailSharedBy1(v MicrosoftGraphSharingDetailSharedBy1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

func (t MicrosoftGraphSharingDetail_SharedBy) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *MicrosoftGraphSharingDetail_SharedBy) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsMicrosoftGraphResourceReference returns the union data inside the MicrosoftGraphSharingDetail_SharingReference as a MicrosoftGraphResourceReference
func (t MicrosoftGraphSharingDetail_SharingReference) AsMicrosoftGraphResourceReference() (MicrosoftGraphResourceReference, error) {
	var body MicrosoftGraphResourceReference
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphResourceReference overwrites any union data inside the MicrosoftGraphSharingDetail_SharingReference as the provided MicrosoftGraphResourceReference
func (t *MicrosoftGraphSharingDetail_SharingReference) FromMicrosoftGraphResourceReference(v MicrosoftGraphResourceReference) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphResourceReference performs a merge with any union data inside the MicrosoftGraphSharingDetail_SharingReference, using the provided MicrosoftGraphResourceReference
func (t *MicrosoftGraphSharingDetail_SharingReference) MergeMicrosoftGraphResourceReference(v MicrosoftGraphResourceReference) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsMicrosoftGraphSharingDetailSharingReference1 returns the union data inside the MicrosoftGraphSharingDetail_SharingReference as a MicrosoftGraphSharingDetailSharingReference1
func (t MicrosoftGraphSharingDetail_SharingReference) AsMicrosoftGraphSharingDetailSharingReference1() (MicrosoftGraphSharingDetailSharingReference1, error) {
	var body MicrosoftGraphSharingDetailSharingReference1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphSharingDetailSharingReference1 overwrites any union data inside the MicrosoftGraphSharingDetail_SharingReference as the provided MicrosoftGraphSharingDetailSharingReference1
func (t *MicrosoftGraphSharingDetail_SharingReference) FromMicrosoftGraphSharingDetailSharingReference1(v MicrosoftGraphSharingDetailSharingReference1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphSharingDetailSharingReference1 performs a merge with any union data inside the MicrosoftGraphSharingDetail_SharingReference, using the provided MicrosoftGraphSharingDetailSharingReference1
func (t *MicrosoftGraphSharingDetail_SharingReference) MergeMicrosoftGraphSharingDetailSharingReference1(v MicrosoftGraphSharingDetailSharingReference1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

func (t MicrosoftGraphSharingDetail_SharingReference) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *MicrosoftGraphSharingDetail_SharingReference) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsMicrosoftGraphIdentitySet returns the union data inside the MicrosoftGraphSharingInvitation_InvitedBy as a MicrosoftGraphIdentitySet
func (t MicrosoftGraphSharingInvitation_InvitedBy) AsMicrosoftGraphIdentitySet() (MicrosoftGraphIdentitySet, error) {
	var body MicrosoftGraphIdentitySet
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphIdentitySet overwrites any union data inside the MicrosoftGraphSharingInvitation_InvitedBy as the provided MicrosoftGraphIdentitySet
func (t *MicrosoftGraphSharingInvitation_InvitedBy) FromMicrosoftGraphIdentitySet(v MicrosoftGraphIdentitySet) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphIdentitySet performs a merge with any union data inside the MicrosoftGraphSharingInvitation_InvitedBy, using the provided MicrosoftGraphIdentitySet
func (t *MicrosoftGraphSharingInvitation_InvitedBy) MergeMicrosoftGraphIdentitySet(v MicrosoftGraphIdentitySet) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsMicrosoftGraphSharingInvitationInvitedBy1 returns the union data inside the MicrosoftGraphSharingInvitation_InvitedBy as a MicrosoftGraphSharingInvitationInvitedBy1
func (t MicrosoftGraphSharingInvitation_InvitedBy) AsMicrosoftGraphSharingInvitationInvitedBy1() (MicrosoftGraphSharingInvitationInvitedBy1, error) {
	var body MicrosoftGraphSharingInvitationInvitedBy1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphSharingInvitationInvitedBy1 overwrites any union data inside the MicrosoftGraphSharingInvitation_InvitedBy as the provided MicrosoftGraphSharingInvitationInvitedBy1
func (t *MicrosoftGraphSharingInvitation_InvitedBy) FromMicrosoftGraphSharingInvitationInvitedBy1(v MicrosoftGraphSharingInvitationInvitedBy1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphSharingInvitationInvitedBy1 performs a merge with any union data inside the MicrosoftGraphSharingInvitation_InvitedBy, using the provided MicrosoftGraphSharingInvitationInvitedBy1
func (t *MicrosoftGraphSharingInvitation_InvitedBy) MergeMicrosoftGraphSharingInvitationInvitedBy1(v MicrosoftGraphSharingInvitationInvitedBy1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

func (t MicrosoftGraphSharingInvitation_InvitedBy) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *MicrosoftGraphSharingInvitation_InvitedBy) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsMicrosoftGraphIdentity returns the union data inside the MicrosoftGraphSharingLink_Application as a MicrosoftGraphIdentity
func (t MicrosoftGraphSharingLink_Application) AsMicrosoftGraphIdentity() (MicrosoftGraphIdentity, error) {
	var body MicrosoftGraphIdentity
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphIdentity overwrites any union data inside the MicrosoftGraphSharingLink_Application as the provided MicrosoftGraphIdentity
func (t *MicrosoftGraphSharingLink_Application) FromMicrosoftGraphIdentity(v MicrosoftGraphIdentity) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphIdentity performs a merge with any union data inside the MicrosoftGraphSharingLink_Application, using the provided MicrosoftGraphIdentity
func (t *MicrosoftGraphSharingLink_Application) MergeMicrosoftGraphIdentity(v MicrosoftGraphIdentity) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsMicrosoftGraphSharingLinkApplication1 returns the union data inside the MicrosoftGraphSharingLink_Application as a MicrosoftGraphSharingLinkApplication1
func (t MicrosoftGraphSharingLink_Application) AsMicrosoftGraphSharingLinkApplication1() (MicrosoftGraphSharingLinkApplication1, error) {
	var body MicrosoftGraphSharingLinkApplication1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphSharingLinkApplication1 overwrites any union data inside the MicrosoftGraphSharingLink_Application as the provided MicrosoftGraphSharingLinkApplication1
func (t *MicrosoftGraphSharingLink_Application) FromMicrosoftGraphSharingLinkApplication1(v MicrosoftGraphSharingLinkApplication1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphSharingLinkApplication1 performs a merge with any union data inside the MicrosoftGraphSharingLink_Application, using the provided MicrosoftGraphSharingLinkApplication1
func (t *MicrosoftGraphSharingLink_Application) MergeMicrosoftGraphSharingLinkApplication1(v MicrosoftGraphSharingLinkApplication1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

func (t MicrosoftGraphSharingLink_Application) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *MicrosoftGraphSharingLink_Application) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsMicrosoftGraphShiftItem returns the union data inside the MicrosoftGraphShift_DraftShift as a MicrosoftGraphShiftItem
func (t MicrosoftGraphShift_DraftShift) AsMicrosoftGraphShiftItem() (MicrosoftGraphShiftItem, error) {
	var body MicrosoftGraphShiftItem
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphShiftItem overwrites any union data inside the MicrosoftGraphShift_DraftShift as the provided MicrosoftGraphShiftItem
func (t *MicrosoftGraphShift_DraftShift) FromMicrosoftGraphShiftItem(v MicrosoftGraphShiftItem) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphShiftItem performs a merge with any union data inside the MicrosoftGraphShift_DraftShift, using the provided MicrosoftGraphShiftItem
func (t *MicrosoftGraphShift_DraftShift) MergeMicrosoftGraphShiftItem(v MicrosoftGraphShiftItem) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsMicrosoftGraphShiftDraftShift1 returns the union data inside the MicrosoftGraphShift_DraftShift as a MicrosoftGraphShiftDraftShift1
func (t MicrosoftGraphShift_DraftShift) AsMicrosoftGraphShiftDraftShift1() (MicrosoftGraphShiftDraftShift1, error) {
	var body MicrosoftGraphShiftDraftShift1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphShiftDraftShift1 overwrites any union data inside the MicrosoftGraphShift_DraftShift as the provided MicrosoftGraphShiftDraftShift1
func (t *MicrosoftGraphShift_DraftShift) FromMicrosoftGraphShiftDraftShift1(v MicrosoftGraphShiftDraftShift1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphShiftDraftShift1 performs a merge with any union data inside the MicrosoftGraphShift_DraftShift, using the provided MicrosoftGraphShiftDraftShift1
func (t *MicrosoftGraphShift_DraftShift) MergeMicrosoftGraphShiftDraftShift1(v MicrosoftGraphShiftDraftShift1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

func (t MicrosoftGraphShift_DraftShift) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *MicrosoftGraphShift_DraftShift) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsMicrosoftGraphIdentitySet returns the union data inside the MicrosoftGraphShift_LastModifiedBy as a MicrosoftGraphIdentitySet
func (t MicrosoftGraphShift_LastModifiedBy) AsMicrosoftGraphIdentitySet() (MicrosoftGraphIdentitySet, error) {
	var body MicrosoftGraphIdentitySet
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphIdentitySet overwrites any union data inside the MicrosoftGraphShift_LastModifiedBy as the provided MicrosoftGraphIdentitySet
func (t *MicrosoftGraphShift_LastModifiedBy) FromMicrosoftGraphIdentitySet(v MicrosoftGraphIdentitySet) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphIdentitySet performs a merge with any union data inside the MicrosoftGraphShift_LastModifiedBy, using the provided MicrosoftGraphIdentitySet
func (t *MicrosoftGraphShift_LastModifiedBy) MergeMicrosoftGraphIdentitySet(v MicrosoftGraphIdentitySet) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsMicrosoftGraphShiftLastModifiedBy1 returns the union data inside the MicrosoftGraphShift_LastModifiedBy as a MicrosoftGraphShiftLastModifiedBy1
func (t MicrosoftGraphShift_LastModifiedBy) AsMicrosoftGraphShiftLastModifiedBy1() (MicrosoftGraphShiftLastModifiedBy1, error) {
	var body MicrosoftGraphShiftLastModifiedBy1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphShiftLastModifiedBy1 overwrites any union data inside the MicrosoftGraphShift_LastModifiedBy as the provided MicrosoftGraphShiftLastModifiedBy1
func (t *MicrosoftGraphShift_LastModifiedBy) FromMicrosoftGraphShiftLastModifiedBy1(v MicrosoftGraphShiftLastModifiedBy1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphShiftLastModifiedBy1 performs a merge with any union data inside the MicrosoftGraphShift_LastModifiedBy, using the provided MicrosoftGraphShiftLastModifiedBy1
func (t *MicrosoftGraphShift_LastModifiedBy) MergeMicrosoftGraphShiftLastModifiedBy1(v MicrosoftGraphShiftLastModifiedBy1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

func (t MicrosoftGraphShift_LastModifiedBy) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *MicrosoftGraphShift_LastModifiedBy) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsMicrosoftGraphShiftItem returns the union data inside the MicrosoftGraphShift_SharedShift as a MicrosoftGraphShiftItem
func (t MicrosoftGraphShift_SharedShift) AsMicrosoftGraphShiftItem() (MicrosoftGraphShiftItem, error) {
	var body MicrosoftGraphShiftItem
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphShiftItem overwrites any union data inside the MicrosoftGraphShift_SharedShift as the provided MicrosoftGraphShiftItem
func (t *MicrosoftGraphShift_SharedShift) FromMicrosoftGraphShiftItem(v MicrosoftGraphShiftItem) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphShiftItem performs a merge with any union data inside the MicrosoftGraphShift_SharedShift, using the provided MicrosoftGraphShiftItem
func (t *MicrosoftGraphShift_SharedShift) MergeMicrosoftGraphShiftItem(v MicrosoftGraphShiftItem) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsMicrosoftGraphShiftSharedShift1 returns the union data inside the MicrosoftGraphShift_SharedShift as a MicrosoftGraphShiftSharedShift1
func (t MicrosoftGraphShift_SharedShift) AsMicrosoftGraphShiftSharedShift1() (MicrosoftGraphShiftSharedShift1, error) {
	var body MicrosoftGraphShiftSharedShift1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphShiftSharedShift1 overwrites any union data inside the MicrosoftGraphShift_SharedShift as the provided MicrosoftGraphShiftSharedShift1
func (t *MicrosoftGraphShift_SharedShift) FromMicrosoftGraphShiftSharedShift1(v MicrosoftGraphShiftSharedShift1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphShiftSharedShift1 performs a merge with any union data inside the MicrosoftGraphShift_SharedShift, using the provided MicrosoftGraphShiftSharedShift1
func (t *MicrosoftGraphShift_SharedShift) MergeMicrosoftGraphShiftSharedShift1(v MicrosoftGraphShiftSharedShift1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

func (t MicrosoftGraphShift_SharedShift) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *MicrosoftGraphShift_SharedShift) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsMicrosoftGraphPatternedRecurrence returns the union data inside the MicrosoftGraphShiftAvailability_Recurrence as a MicrosoftGraphPatternedRecurrence
func (t MicrosoftGraphShiftAvailability_Recurrence) AsMicrosoftGraphPatternedRecurrence() (MicrosoftGraphPatternedRecurrence, error) {
	var body MicrosoftGraphPatternedRecurrence
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphPatternedRecurrence overwrites any union data inside the MicrosoftGraphShiftAvailability_Recurrence as the provided MicrosoftGraphPatternedRecurrence
func (t *MicrosoftGraphShiftAvailability_Recurrence) FromMicrosoftGraphPatternedRecurrence(v MicrosoftGraphPatternedRecurrence) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphPatternedRecurrence performs a merge with any union data inside the MicrosoftGraphShiftAvailability_Recurrence, using the provided MicrosoftGraphPatternedRecurrence
func (t *MicrosoftGraphShiftAvailability_Recurrence) MergeMicrosoftGraphPatternedRecurrence(v MicrosoftGraphPatternedRecurrence) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsMicrosoftGraphShiftAvailabilityRecurrence1 returns the union data inside the MicrosoftGraphShiftAvailability_Recurrence as a MicrosoftGraphShiftAvailabilityRecurrence1
func (t MicrosoftGraphShiftAvailability_Recurrence) AsMicrosoftGraphShiftAvailabilityRecurrence1() (MicrosoftGraphShiftAvailabilityRecurrence1, error) {
	var body MicrosoftGraphShiftAvailabilityRecurrence1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphShiftAvailabilityRecurrence1 overwrites any union data inside the MicrosoftGraphShiftAvailability_Recurrence as the provided MicrosoftGraphShiftAvailabilityRecurrence1
func (t *MicrosoftGraphShiftAvailability_Recurrence) FromMicrosoftGraphShiftAvailabilityRecurrence1(v MicrosoftGraphShiftAvailabilityRecurrence1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphShiftAvailabilityRecurrence1 performs a merge with any union data inside the MicrosoftGraphShiftAvailability_Recurrence, using the provided MicrosoftGraphShiftAvailabilityRecurrence1
func (t *MicrosoftGraphShiftAvailability_Recurrence) MergeMicrosoftGraphShiftAvailabilityRecurrence1(v MicrosoftGraphShiftAvailabilityRecurrence1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

func (t MicrosoftGraphShiftAvailability_Recurrence) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *MicrosoftGraphShiftAvailability_Recurrence) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsMicrosoftGraphTimeRange returns the union data inside the MicrosoftGraphShiftAvailability_TimeSlots_Item as a MicrosoftGraphTimeRange
func (t MicrosoftGraphShiftAvailability_TimeSlots_Item) AsMicrosoftGraphTimeRange() (MicrosoftGraphTimeRange, error) {
	var body MicrosoftGraphTimeRange
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphTimeRange overwrites any union data inside the MicrosoftGraphShiftAvailability_TimeSlots_Item as the provided MicrosoftGraphTimeRange
func (t *MicrosoftGraphShiftAvailability_TimeSlots_Item) FromMicrosoftGraphTimeRange(v MicrosoftGraphTimeRange) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphTimeRange performs a merge with any union data inside the MicrosoftGraphShiftAvailability_TimeSlots_Item, using the provided MicrosoftGraphTimeRange
func (t *MicrosoftGraphShiftAvailability_TimeSlots_Item) MergeMicrosoftGraphTimeRange(v MicrosoftGraphTimeRange) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsMicrosoftGraphShiftAvailabilityTimeSlots1 returns the union data inside the MicrosoftGraphShiftAvailability_TimeSlots_Item as a MicrosoftGraphShiftAvailabilityTimeSlots1
func (t MicrosoftGraphShiftAvailability_TimeSlots_Item) AsMicrosoftGraphShiftAvailabilityTimeSlots1() (MicrosoftGraphShiftAvailabilityTimeSlots1, error) {
	var body MicrosoftGraphShiftAvailabilityTimeSlots1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphShiftAvailabilityTimeSlots1 overwrites any union data inside the MicrosoftGraphShiftAvailability_TimeSlots_Item as the provided MicrosoftGraphShiftAvailabilityTimeSlots1
func (t *MicrosoftGraphShiftAvailability_TimeSlots_Item) FromMicrosoftGraphShiftAvailabilityTimeSlots1(v MicrosoftGraphShiftAvailabilityTimeSlots1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphShiftAvailabilityTimeSlots1 performs a merge with any union data inside the MicrosoftGraphShiftAvailability_TimeSlots_Item, using the provided MicrosoftGraphShiftAvailabilityTimeSlots1
func (t *MicrosoftGraphShiftAvailability_TimeSlots_Item) MergeMicrosoftGraphShiftAvailabilityTimeSlots1(v MicrosoftGraphShiftAvailabilityTimeSlots1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

func (t MicrosoftGraphShiftAvailability_TimeSlots_Item) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *MicrosoftGraphShiftAvailability_TimeSlots_Item) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsMicrosoftGraphShiftActivity returns the union data inside the MicrosoftGraphShiftItem_Activities_Item as a MicrosoftGraphShiftActivity
func (t MicrosoftGraphShiftItem_Activities_Item) AsMicrosoftGraphShiftActivity() (MicrosoftGraphShiftActivity, error) {
	var body MicrosoftGraphShiftActivity
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphShiftActivity overwrites any union data inside the MicrosoftGraphShiftItem_Activities_Item as the provided MicrosoftGraphShiftActivity
func (t *MicrosoftGraphShiftItem_Activities_Item) FromMicrosoftGraphShiftActivity(v MicrosoftGraphShiftActivity) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphShiftActivity performs a merge with any union data inside the MicrosoftGraphShiftItem_Activities_Item, using the provided MicrosoftGraphShiftActivity
func (t *MicrosoftGraphShiftItem_Activities_Item) MergeMicrosoftGraphShiftActivity(v MicrosoftGraphShiftActivity) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsMicrosoftGraphShiftItemActivities1 returns the union data inside the MicrosoftGraphShiftItem_Activities_Item as a MicrosoftGraphShiftItemActivities1
func (t MicrosoftGraphShiftItem_Activities_Item) AsMicrosoftGraphShiftItemActivities1() (MicrosoftGraphShiftItemActivities1, error) {
	var body MicrosoftGraphShiftItemActivities1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphShiftItemActivities1 overwrites any union data inside the MicrosoftGraphShiftItem_Activities_Item as the provided MicrosoftGraphShiftItemActivities1
func (t *MicrosoftGraphShiftItem_Activities_Item) FromMicrosoftGraphShiftItemActivities1(v MicrosoftGraphShiftItemActivities1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphShiftItemActivities1 performs a merge with any union data inside the MicrosoftGraphShiftItem_Activities_Item, using the provided MicrosoftGraphShiftItemActivities1
func (t *MicrosoftGraphShiftItem_Activities_Item) MergeMicrosoftGraphShiftItemActivities1(v MicrosoftGraphShiftItemActivities1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

func (t MicrosoftGraphShiftItem_Activities_Item) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *MicrosoftGraphShiftItem_Activities_Item) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsMicrosoftGraphShiftAvailability returns the union data inside the MicrosoftGraphShiftPreferences_Availability_Item as a MicrosoftGraphShiftAvailability
func (t MicrosoftGraphShiftPreferences_Availability_Item) AsMicrosoftGraphShiftAvailability() (MicrosoftGraphShiftAvailability, error) {
	var body MicrosoftGraphShiftAvailability
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphShiftAvailability overwrites any union data inside the MicrosoftGraphShiftPreferences_Availability_Item as the provided MicrosoftGraphShiftAvailability
func (t *MicrosoftGraphShiftPreferences_Availability_Item) FromMicrosoftGraphShiftAvailability(v MicrosoftGraphShiftAvailability) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphShiftAvailability performs a merge with any union data inside the MicrosoftGraphShiftPreferences_Availability_Item, using the provided MicrosoftGraphShiftAvailability
func (t *MicrosoftGraphShiftPreferences_Availability_Item) MergeMicrosoftGraphShiftAvailability(v MicrosoftGraphShiftAvailability) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsMicrosoftGraphShiftPreferencesAvailability1 returns the union data inside the MicrosoftGraphShiftPreferences_Availability_Item as a MicrosoftGraphShiftPreferencesAvailability1
func (t MicrosoftGraphShiftPreferences_Availability_Item) AsMicrosoftGraphShiftPreferencesAvailability1() (MicrosoftGraphShiftPreferencesAvailability1, error) {
	var body MicrosoftGraphShiftPreferencesAvailability1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphShiftPreferencesAvailability1 overwrites any union data inside the MicrosoftGraphShiftPreferences_Availability_Item as the provided MicrosoftGraphShiftPreferencesAvailability1
func (t *MicrosoftGraphShiftPreferences_Availability_Item) FromMicrosoftGraphShiftPreferencesAvailability1(v MicrosoftGraphShiftPreferencesAvailability1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphShiftPreferencesAvailability1 performs a merge with any union data inside the MicrosoftGraphShiftPreferences_Availability_Item, using the provided MicrosoftGraphShiftPreferencesAvailability1
func (t *MicrosoftGraphShiftPreferences_Availability_Item) MergeMicrosoftGraphShiftPreferencesAvailability1(v MicrosoftGraphShiftPreferencesAvailability1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

func (t MicrosoftGraphShiftPreferences_Availability_Item) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *MicrosoftGraphShiftPreferences_Availability_Item) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsMicrosoftGraphIdentitySet returns the union data inside the MicrosoftGraphShiftPreferences_LastModifiedBy as a MicrosoftGraphIdentitySet
func (t MicrosoftGraphShiftPreferences_LastModifiedBy) AsMicrosoftGraphIdentitySet() (MicrosoftGraphIdentitySet, error) {
	var body MicrosoftGraphIdentitySet
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphIdentitySet overwrites any union data inside the MicrosoftGraphShiftPreferences_LastModifiedBy as the provided MicrosoftGraphIdentitySet
func (t *MicrosoftGraphShiftPreferences_LastModifiedBy) FromMicrosoftGraphIdentitySet(v MicrosoftGraphIdentitySet) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphIdentitySet performs a merge with any union data inside the MicrosoftGraphShiftPreferences_LastModifiedBy, using the provided MicrosoftGraphIdentitySet
func (t *MicrosoftGraphShiftPreferences_LastModifiedBy) MergeMicrosoftGraphIdentitySet(v MicrosoftGraphIdentitySet) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsMicrosoftGraphShiftPreferencesLastModifiedBy1 returns the union data inside the MicrosoftGraphShiftPreferences_LastModifiedBy as a MicrosoftGraphShiftPreferencesLastModifiedBy1
func (t MicrosoftGraphShiftPreferences_LastModifiedBy) AsMicrosoftGraphShiftPreferencesLastModifiedBy1() (MicrosoftGraphShiftPreferencesLastModifiedBy1, error) {
	var body MicrosoftGraphShiftPreferencesLastModifiedBy1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphShiftPreferencesLastModifiedBy1 overwrites any union data inside the MicrosoftGraphShiftPreferences_LastModifiedBy as the provided MicrosoftGraphShiftPreferencesLastModifiedBy1
func (t *MicrosoftGraphShiftPreferences_LastModifiedBy) FromMicrosoftGraphShiftPreferencesLastModifiedBy1(v MicrosoftGraphShiftPreferencesLastModifiedBy1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphShiftPreferencesLastModifiedBy1 performs a merge with any union data inside the MicrosoftGraphShiftPreferences_LastModifiedBy, using the provided MicrosoftGraphShiftPreferencesLastModifiedBy1
func (t *MicrosoftGraphShiftPreferences_LastModifiedBy) MergeMicrosoftGraphShiftPreferencesLastModifiedBy1(v MicrosoftGraphShiftPreferencesLastModifiedBy1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

func (t MicrosoftGraphShiftPreferences_LastModifiedBy) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *MicrosoftGraphShiftPreferences_LastModifiedBy) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsMicrosoftGraphItemAnalytics returns the union data inside the MicrosoftGraphSite_Analytics as a MicrosoftGraphItemAnalytics
func (t MicrosoftGraphSite_Analytics) AsMicrosoftGraphItemAnalytics() (MicrosoftGraphItemAnalytics, error) {
	var body MicrosoftGraphItemAnalytics
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphItemAnalytics overwrites any union data inside the MicrosoftGraphSite_Analytics as the provided MicrosoftGraphItemAnalytics
func (t *MicrosoftGraphSite_Analytics) FromMicrosoftGraphItemAnalytics(v MicrosoftGraphItemAnalytics) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphItemAnalytics performs a merge with any union data inside the MicrosoftGraphSite_Analytics, using the provided MicrosoftGraphItemAnalytics
func (t *MicrosoftGraphSite_Analytics) MergeMicrosoftGraphItemAnalytics(v MicrosoftGraphItemAnalytics) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsMicrosoftGraphSiteAnalytics1 returns the union data inside the MicrosoftGraphSite_Analytics as a MicrosoftGraphSiteAnalytics1
func (t MicrosoftGraphSite_Analytics) AsMicrosoftGraphSiteAnalytics1() (MicrosoftGraphSiteAnalytics1, error) {
	var body MicrosoftGraphSiteAnalytics1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphSiteAnalytics1 overwrites any union data inside the MicrosoftGraphSite_Analytics as the provided MicrosoftGraphSiteAnalytics1
func (t *MicrosoftGraphSite_Analytics) FromMicrosoftGraphSiteAnalytics1(v MicrosoftGraphSiteAnalytics1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphSiteAnalytics1 performs a merge with any union data inside the MicrosoftGraphSite_Analytics, using the provided MicrosoftGraphSiteAnalytics1
func (t *MicrosoftGraphSite_Analytics) MergeMicrosoftGraphSiteAnalytics1(v MicrosoftGraphSiteAnalytics1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

func (t MicrosoftGraphSite_Analytics) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *MicrosoftGraphSite_Analytics) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsMicrosoftGraphIdentitySet returns the union data inside the MicrosoftGraphSite_CreatedBy as a MicrosoftGraphIdentitySet
func (t MicrosoftGraphSite_CreatedBy) AsMicrosoftGraphIdentitySet() (MicrosoftGraphIdentitySet, error) {
	var body MicrosoftGraphIdentitySet
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphIdentitySet overwrites any union data inside the MicrosoftGraphSite_CreatedBy as the provided MicrosoftGraphIdentitySet
func (t *MicrosoftGraphSite_CreatedBy) FromMicrosoftGraphIdentitySet(v MicrosoftGraphIdentitySet) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphIdentitySet performs a merge with any union data inside the MicrosoftGraphSite_CreatedBy, using the provided MicrosoftGraphIdentitySet
func (t *MicrosoftGraphSite_CreatedBy) MergeMicrosoftGraphIdentitySet(v MicrosoftGraphIdentitySet) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsMicrosoftGraphSiteCreatedBy1 returns the union data inside the MicrosoftGraphSite_CreatedBy as a MicrosoftGraphSiteCreatedBy1
func (t MicrosoftGraphSite_CreatedBy) AsMicrosoftGraphSiteCreatedBy1() (MicrosoftGraphSiteCreatedBy1, error) {
	var body MicrosoftGraphSiteCreatedBy1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphSiteCreatedBy1 overwrites any union data inside the MicrosoftGraphSite_CreatedBy as the provided MicrosoftGraphSiteCreatedBy1
func (t *MicrosoftGraphSite_CreatedBy) FromMicrosoftGraphSiteCreatedBy1(v MicrosoftGraphSiteCreatedBy1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphSiteCreatedBy1 performs a merge with any union data inside the MicrosoftGraphSite_CreatedBy, using the provided MicrosoftGraphSiteCreatedBy1
func (t *MicrosoftGraphSite_CreatedBy) MergeMicrosoftGraphSiteCreatedBy1(v MicrosoftGraphSiteCreatedBy1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

func (t MicrosoftGraphSite_CreatedBy) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *MicrosoftGraphSite_CreatedBy) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsMicrosoftGraphUser returns the union data inside the MicrosoftGraphSite_CreatedByUser as a MicrosoftGraphUser
func (t MicrosoftGraphSite_CreatedByUser) AsMicrosoftGraphUser() (MicrosoftGraphUser, error) {
	var body MicrosoftGraphUser
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphUser overwrites any union data inside the MicrosoftGraphSite_CreatedByUser as the provided MicrosoftGraphUser
func (t *MicrosoftGraphSite_CreatedByUser) FromMicrosoftGraphUser(v MicrosoftGraphUser) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphUser performs a merge with any union data inside the MicrosoftGraphSite_CreatedByUser, using the provided MicrosoftGraphUser
func (t *MicrosoftGraphSite_CreatedByUser) MergeMicrosoftGraphUser(v MicrosoftGraphUser) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsMicrosoftGraphSiteCreatedByUser1 returns the union data inside the MicrosoftGraphSite_CreatedByUser as a MicrosoftGraphSiteCreatedByUser1
func (t MicrosoftGraphSite_CreatedByUser) AsMicrosoftGraphSiteCreatedByUser1() (MicrosoftGraphSiteCreatedByUser1, error) {
	var body MicrosoftGraphSiteCreatedByUser1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphSiteCreatedByUser1 overwrites any union data inside the MicrosoftGraphSite_CreatedByUser as the provided MicrosoftGraphSiteCreatedByUser1
func (t *MicrosoftGraphSite_CreatedByUser) FromMicrosoftGraphSiteCreatedByUser1(v MicrosoftGraphSiteCreatedByUser1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphSiteCreatedByUser1 performs a merge with any union data inside the MicrosoftGraphSite_CreatedByUser, using the provided MicrosoftGraphSiteCreatedByUser1
func (t *MicrosoftGraphSite_CreatedByUser) MergeMicrosoftGraphSiteCreatedByUser1(v MicrosoftGraphSiteCreatedByUser1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

func (t MicrosoftGraphSite_CreatedByUser) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *MicrosoftGraphSite_CreatedByUser) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsMicrosoftGraphDrive returns the union data inside the MicrosoftGraphSite_Drive as a MicrosoftGraphDrive
func (t MicrosoftGraphSite_Drive) AsMicrosoftGraphDrive() (MicrosoftGraphDrive, error) {
	var body MicrosoftGraphDrive
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphDrive overwrites any union data inside the MicrosoftGraphSite_Drive as the provided MicrosoftGraphDrive
func (t *MicrosoftGraphSite_Drive) FromMicrosoftGraphDrive(v MicrosoftGraphDrive) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphDrive performs a merge with any union data inside the MicrosoftGraphSite_Drive, using the provided MicrosoftGraphDrive
func (t *MicrosoftGraphSite_Drive) MergeMicrosoftGraphDrive(v MicrosoftGraphDrive) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsMicrosoftGraphSiteDrive1 returns the union data inside the MicrosoftGraphSite_Drive as a MicrosoftGraphSiteDrive1
func (t MicrosoftGraphSite_Drive) AsMicrosoftGraphSiteDrive1() (MicrosoftGraphSiteDrive1, error) {
	var body MicrosoftGraphSiteDrive1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphSiteDrive1 overwrites any union data inside the MicrosoftGraphSite_Drive as the provided MicrosoftGraphSiteDrive1
func (t *MicrosoftGraphSite_Drive) FromMicrosoftGraphSiteDrive1(v MicrosoftGraphSiteDrive1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphSiteDrive1 performs a merge with any union data inside the MicrosoftGraphSite_Drive, using the provided MicrosoftGraphSiteDrive1
func (t *MicrosoftGraphSite_Drive) MergeMicrosoftGraphSiteDrive1(v MicrosoftGraphSiteDrive1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

func (t MicrosoftGraphSite_Drive) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *MicrosoftGraphSite_Drive) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsMicrosoftGraphPublicError returns the union data inside the MicrosoftGraphSite_Error as a MicrosoftGraphPublicError
func (t MicrosoftGraphSite_Error) AsMicrosoftGraphPublicError() (MicrosoftGraphPublicError, error) {
	var body MicrosoftGraphPublicError
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphPublicError overwrites any union data inside the MicrosoftGraphSite_Error as the provided MicrosoftGraphPublicError
func (t *MicrosoftGraphSite_Error) FromMicrosoftGraphPublicError(v MicrosoftGraphPublicError) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphPublicError performs a merge with any union data inside the MicrosoftGraphSite_Error, using the provided MicrosoftGraphPublicError
func (t *MicrosoftGraphSite_Error) MergeMicrosoftGraphPublicError(v MicrosoftGraphPublicError) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsMicrosoftGraphSiteError1 returns the union data inside the MicrosoftGraphSite_Error as a MicrosoftGraphSiteError1
func (t MicrosoftGraphSite_Error) AsMicrosoftGraphSiteError1() (MicrosoftGraphSiteError1, error) {
	var body MicrosoftGraphSiteError1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphSiteError1 overwrites any union data inside the MicrosoftGraphSite_Error as the provided MicrosoftGraphSiteError1
func (t *MicrosoftGraphSite_Error) FromMicrosoftGraphSiteError1(v MicrosoftGraphSiteError1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphSiteError1 performs a merge with any union data inside the MicrosoftGraphSite_Error, using the provided MicrosoftGraphSiteError1
func (t *MicrosoftGraphSite_Error) MergeMicrosoftGraphSiteError1(v MicrosoftGraphSiteError1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

func (t MicrosoftGraphSite_Error) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *MicrosoftGraphSite_Error) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsMicrosoftGraphIdentitySet returns the union data inside the MicrosoftGraphSite_LastModifiedBy as a MicrosoftGraphIdentitySet
func (t MicrosoftGraphSite_LastModifiedBy) AsMicrosoftGraphIdentitySet() (MicrosoftGraphIdentitySet, error) {
	var body MicrosoftGraphIdentitySet
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphIdentitySet overwrites any union data inside the MicrosoftGraphSite_LastModifiedBy as the provided MicrosoftGraphIdentitySet
func (t *MicrosoftGraphSite_LastModifiedBy) FromMicrosoftGraphIdentitySet(v MicrosoftGraphIdentitySet) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphIdentitySet performs a merge with any union data inside the MicrosoftGraphSite_LastModifiedBy, using the provided MicrosoftGraphIdentitySet
func (t *MicrosoftGraphSite_LastModifiedBy) MergeMicrosoftGraphIdentitySet(v MicrosoftGraphIdentitySet) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsMicrosoftGraphSiteLastModifiedBy1 returns the union data inside the MicrosoftGraphSite_LastModifiedBy as a MicrosoftGraphSiteLastModifiedBy1
func (t MicrosoftGraphSite_LastModifiedBy) AsMicrosoftGraphSiteLastModifiedBy1() (MicrosoftGraphSiteLastModifiedBy1, error) {
	var body MicrosoftGraphSiteLastModifiedBy1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphSiteLastModifiedBy1 overwrites any union data inside the MicrosoftGraphSite_LastModifiedBy as the provided MicrosoftGraphSiteLastModifiedBy1
func (t *MicrosoftGraphSite_LastModifiedBy) FromMicrosoftGraphSiteLastModifiedBy1(v MicrosoftGraphSiteLastModifiedBy1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphSiteLastModifiedBy1 performs a merge with any union data inside the MicrosoftGraphSite_LastModifiedBy, using the provided MicrosoftGraphSiteLastModifiedBy1
func (t *MicrosoftGraphSite_LastModifiedBy) MergeMicrosoftGraphSiteLastModifiedBy1(v MicrosoftGraphSiteLastModifiedBy1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

func (t MicrosoftGraphSite_LastModifiedBy) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *MicrosoftGraphSite_LastModifiedBy) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsMicrosoftGraphUser returns the union data inside the MicrosoftGraphSite_LastModifiedByUser as a MicrosoftGraphUser
func (t MicrosoftGraphSite_LastModifiedByUser) AsMicrosoftGraphUser() (MicrosoftGraphUser, error) {
	var body MicrosoftGraphUser
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphUser overwrites any union data inside the MicrosoftGraphSite_LastModifiedByUser as the provided MicrosoftGraphUser
func (t *MicrosoftGraphSite_LastModifiedByUser) FromMicrosoftGraphUser(v MicrosoftGraphUser) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphUser performs a merge with any union data inside the MicrosoftGraphSite_LastModifiedByUser, using the provided MicrosoftGraphUser
func (t *MicrosoftGraphSite_LastModifiedByUser) MergeMicrosoftGraphUser(v MicrosoftGraphUser) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsMicrosoftGraphSiteLastModifiedByUser1 returns the union data inside the MicrosoftGraphSite_LastModifiedByUser as a MicrosoftGraphSiteLastModifiedByUser1
func (t MicrosoftGraphSite_LastModifiedByUser) AsMicrosoftGraphSiteLastModifiedByUser1() (MicrosoftGraphSiteLastModifiedByUser1, error) {
	var body MicrosoftGraphSiteLastModifiedByUser1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphSiteLastModifiedByUser1 overwrites any union data inside the MicrosoftGraphSite_LastModifiedByUser as the provided MicrosoftGraphSiteLastModifiedByUser1
func (t *MicrosoftGraphSite_LastModifiedByUser) FromMicrosoftGraphSiteLastModifiedByUser1(v MicrosoftGraphSiteLastModifiedByUser1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphSiteLastModifiedByUser1 performs a merge with any union data inside the MicrosoftGraphSite_LastModifiedByUser, using the provided MicrosoftGraphSiteLastModifiedByUser1
func (t *MicrosoftGraphSite_LastModifiedByUser) MergeMicrosoftGraphSiteLastModifiedByUser1(v MicrosoftGraphSiteLastModifiedByUser1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

func (t MicrosoftGraphSite_LastModifiedByUser) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *MicrosoftGraphSite_LastModifiedByUser) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsMicrosoftGraphOnenote returns the union data inside the MicrosoftGraphSite_Onenote as a MicrosoftGraphOnenote
func (t MicrosoftGraphSite_Onenote) AsMicrosoftGraphOnenote() (MicrosoftGraphOnenote, error) {
	var body MicrosoftGraphOnenote
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphOnenote overwrites any union data inside the MicrosoftGraphSite_Onenote as the provided MicrosoftGraphOnenote
func (t *MicrosoftGraphSite_Onenote) FromMicrosoftGraphOnenote(v MicrosoftGraphOnenote) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphOnenote performs a merge with any union data inside the MicrosoftGraphSite_Onenote, using the provided MicrosoftGraphOnenote
func (t *MicrosoftGraphSite_Onenote) MergeMicrosoftGraphOnenote(v MicrosoftGraphOnenote) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsMicrosoftGraphSiteOnenote1 returns the union data inside the MicrosoftGraphSite_Onenote as a MicrosoftGraphSiteOnenote1
func (t MicrosoftGraphSite_Onenote) AsMicrosoftGraphSiteOnenote1() (MicrosoftGraphSiteOnenote1, error) {
	var body MicrosoftGraphSiteOnenote1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphSiteOnenote1 overwrites any union data inside the MicrosoftGraphSite_Onenote as the provided MicrosoftGraphSiteOnenote1
func (t *MicrosoftGraphSite_Onenote) FromMicrosoftGraphSiteOnenote1(v MicrosoftGraphSiteOnenote1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphSiteOnenote1 performs a merge with any union data inside the MicrosoftGraphSite_Onenote, using the provided MicrosoftGraphSiteOnenote1
func (t *MicrosoftGraphSite_Onenote) MergeMicrosoftGraphSiteOnenote1(v MicrosoftGraphSiteOnenote1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

func (t MicrosoftGraphSite_Onenote) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *MicrosoftGraphSite_Onenote) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsMicrosoftGraphItemReference returns the union data inside the MicrosoftGraphSite_ParentReference as a MicrosoftGraphItemReference
func (t MicrosoftGraphSite_ParentReference) AsMicrosoftGraphItemReference() (MicrosoftGraphItemReference, error) {
	var body MicrosoftGraphItemReference
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphItemReference overwrites any union data inside the MicrosoftGraphSite_ParentReference as the provided MicrosoftGraphItemReference
func (t *MicrosoftGraphSite_ParentReference) FromMicrosoftGraphItemReference(v MicrosoftGraphItemReference) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphItemReference performs a merge with any union data inside the MicrosoftGraphSite_ParentReference, using the provided MicrosoftGraphItemReference
func (t *MicrosoftGraphSite_ParentReference) MergeMicrosoftGraphItemReference(v MicrosoftGraphItemReference) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsMicrosoftGraphSiteParentReference1 returns the union data inside the MicrosoftGraphSite_ParentReference as a MicrosoftGraphSiteParentReference1
func (t MicrosoftGraphSite_ParentReference) AsMicrosoftGraphSiteParentReference1() (MicrosoftGraphSiteParentReference1, error) {
	var body MicrosoftGraphSiteParentReference1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphSiteParentReference1 overwrites any union data inside the MicrosoftGraphSite_ParentReference as the provided MicrosoftGraphSiteParentReference1
func (t *MicrosoftGraphSite_ParentReference) FromMicrosoftGraphSiteParentReference1(v MicrosoftGraphSiteParentReference1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphSiteParentReference1 performs a merge with any union data inside the MicrosoftGraphSite_ParentReference, using the provided MicrosoftGraphSiteParentReference1
func (t *MicrosoftGraphSite_ParentReference) MergeMicrosoftGraphSiteParentReference1(v MicrosoftGraphSiteParentReference1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

func (t MicrosoftGraphSite_ParentReference) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *MicrosoftGraphSite_ParentReference) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsMicrosoftGraphRoot returns the union data inside the MicrosoftGraphSite_Root as a MicrosoftGraphRoot
func (t MicrosoftGraphSite_Root) AsMicrosoftGraphRoot() (MicrosoftGraphRoot, error) {
	var body MicrosoftGraphRoot
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphRoot overwrites any union data inside the MicrosoftGraphSite_Root as the provided MicrosoftGraphRoot
func (t *MicrosoftGraphSite_Root) FromMicrosoftGraphRoot(v MicrosoftGraphRoot) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphRoot performs a merge with any union data inside the MicrosoftGraphSite_Root, using the provided MicrosoftGraphRoot
func (t *MicrosoftGraphSite_Root) MergeMicrosoftGraphRoot(v MicrosoftGraphRoot) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsMicrosoftGraphSiteRoot1 returns the union data inside the MicrosoftGraphSite_Root as a MicrosoftGraphSiteRoot1
func (t MicrosoftGraphSite_Root) AsMicrosoftGraphSiteRoot1() (MicrosoftGraphSiteRoot1, error) {
	var body MicrosoftGraphSiteRoot1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphSiteRoot1 overwrites any union data inside the MicrosoftGraphSite_Root as the provided MicrosoftGraphSiteRoot1
func (t *MicrosoftGraphSite_Root) FromMicrosoftGraphSiteRoot1(v MicrosoftGraphSiteRoot1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphSiteRoot1 performs a merge with any union data inside the MicrosoftGraphSite_Root, using the provided MicrosoftGraphSiteRoot1
func (t *MicrosoftGraphSite_Root) MergeMicrosoftGraphSiteRoot1(v MicrosoftGraphSiteRoot1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

func (t MicrosoftGraphSite_Root) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *MicrosoftGraphSite_Root) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsMicrosoftGraphSharepointIds returns the union data inside the MicrosoftGraphSite_SharepointIds as a MicrosoftGraphSharepointIds
func (t MicrosoftGraphSite_SharepointIds) AsMicrosoftGraphSharepointIds() (MicrosoftGraphSharepointIds, error) {
	var body MicrosoftGraphSharepointIds
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphSharepointIds overwrites any union data inside the MicrosoftGraphSite_SharepointIds as the provided MicrosoftGraphSharepointIds
func (t *MicrosoftGraphSite_SharepointIds) FromMicrosoftGraphSharepointIds(v MicrosoftGraphSharepointIds) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphSharepointIds performs a merge with any union data inside the MicrosoftGraphSite_SharepointIds, using the provided MicrosoftGraphSharepointIds
func (t *MicrosoftGraphSite_SharepointIds) MergeMicrosoftGraphSharepointIds(v MicrosoftGraphSharepointIds) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsMicrosoftGraphSiteSharepointIds1 returns the union data inside the MicrosoftGraphSite_SharepointIds as a MicrosoftGraphSiteSharepointIds1
func (t MicrosoftGraphSite_SharepointIds) AsMicrosoftGraphSiteSharepointIds1() (MicrosoftGraphSiteSharepointIds1, error) {
	var body MicrosoftGraphSiteSharepointIds1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphSiteSharepointIds1 overwrites any union data inside the MicrosoftGraphSite_SharepointIds as the provided MicrosoftGraphSiteSharepointIds1
func (t *MicrosoftGraphSite_SharepointIds) FromMicrosoftGraphSiteSharepointIds1(v MicrosoftGraphSiteSharepointIds1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphSiteSharepointIds1 performs a merge with any union data inside the MicrosoftGraphSite_SharepointIds, using the provided MicrosoftGraphSiteSharepointIds1
func (t *MicrosoftGraphSite_SharepointIds) MergeMicrosoftGraphSiteSharepointIds1(v MicrosoftGraphSiteSharepointIds1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

func (t MicrosoftGraphSite_SharepointIds) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *MicrosoftGraphSite_SharepointIds) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsMicrosoftGraphSiteCollection returns the union data inside the MicrosoftGraphSite_SiteCollection as a MicrosoftGraphSiteCollection
func (t MicrosoftGraphSite_SiteCollection) AsMicrosoftGraphSiteCollection() (MicrosoftGraphSiteCollection, error) {
	var body MicrosoftGraphSiteCollection
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphSiteCollection overwrites any union data inside the MicrosoftGraphSite_SiteCollection as the provided MicrosoftGraphSiteCollection
func (t *MicrosoftGraphSite_SiteCollection) FromMicrosoftGraphSiteCollection(v MicrosoftGraphSiteCollection) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphSiteCollection performs a merge with any union data inside the MicrosoftGraphSite_SiteCollection, using the provided MicrosoftGraphSiteCollection
func (t *MicrosoftGraphSite_SiteCollection) MergeMicrosoftGraphSiteCollection(v MicrosoftGraphSiteCollection) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsMicrosoftGraphSiteSiteCollection1 returns the union data inside the MicrosoftGraphSite_SiteCollection as a MicrosoftGraphSiteSiteCollection1
func (t MicrosoftGraphSite_SiteCollection) AsMicrosoftGraphSiteSiteCollection1() (MicrosoftGraphSiteSiteCollection1, error) {
	var body MicrosoftGraphSiteSiteCollection1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphSiteSiteCollection1 overwrites any union data inside the MicrosoftGraphSite_SiteCollection as the provided MicrosoftGraphSiteSiteCollection1
func (t *MicrosoftGraphSite_SiteCollection) FromMicrosoftGraphSiteSiteCollection1(v MicrosoftGraphSiteSiteCollection1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphSiteSiteCollection1 performs a merge with any union data inside the MicrosoftGraphSite_SiteCollection, using the provided MicrosoftGraphSiteSiteCollection1
func (t *MicrosoftGraphSite_SiteCollection) MergeMicrosoftGraphSiteSiteCollection1(v MicrosoftGraphSiteSiteCollection1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

func (t MicrosoftGraphSite_SiteCollection) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *MicrosoftGraphSite_SiteCollection) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsMicrosoftGraphTermStoreStore returns the union data inside the MicrosoftGraphSite_TermStore as a MicrosoftGraphTermStoreStore
func (t MicrosoftGraphSite_TermStore) AsMicrosoftGraphTermStoreStore() (MicrosoftGraphTermStoreStore, error) {
	var body MicrosoftGraphTermStoreStore
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphTermStoreStore overwrites any union data inside the MicrosoftGraphSite_TermStore as the provided MicrosoftGraphTermStoreStore
func (t *MicrosoftGraphSite_TermStore) FromMicrosoftGraphTermStoreStore(v MicrosoftGraphTermStoreStore) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphTermStoreStore performs a merge with any union data inside the MicrosoftGraphSite_TermStore, using the provided MicrosoftGraphTermStoreStore
func (t *MicrosoftGraphSite_TermStore) MergeMicrosoftGraphTermStoreStore(v MicrosoftGraphTermStoreStore) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsMicrosoftGraphSiteTermStore1 returns the union data inside the MicrosoftGraphSite_TermStore as a MicrosoftGraphSiteTermStore1
func (t MicrosoftGraphSite_TermStore) AsMicrosoftGraphSiteTermStore1() (MicrosoftGraphSiteTermStore1, error) {
	var body MicrosoftGraphSiteTermStore1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphSiteTermStore1 overwrites any union data inside the MicrosoftGraphSite_TermStore as the provided MicrosoftGraphSiteTermStore1
func (t *MicrosoftGraphSite_TermStore) FromMicrosoftGraphSiteTermStore1(v MicrosoftGraphSiteTermStore1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphSiteTermStore1 performs a merge with any union data inside the MicrosoftGraphSite_TermStore, using the provided MicrosoftGraphSiteTermStore1
func (t *MicrosoftGraphSite_TermStore) MergeMicrosoftGraphSiteTermStore1(v MicrosoftGraphSiteTermStore1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

func (t MicrosoftGraphSite_TermStore) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *MicrosoftGraphSite_TermStore) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsMicrosoftGraphRoot returns the union data inside the MicrosoftGraphSiteCollection_Root as a MicrosoftGraphRoot
func (t MicrosoftGraphSiteCollection_Root) AsMicrosoftGraphRoot() (MicrosoftGraphRoot, error) {
	var body MicrosoftGraphRoot
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphRoot overwrites any union data inside the MicrosoftGraphSiteCollection_Root as the provided MicrosoftGraphRoot
func (t *MicrosoftGraphSiteCollection_Root) FromMicrosoftGraphRoot(v MicrosoftGraphRoot) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphRoot performs a merge with any union data inside the MicrosoftGraphSiteCollection_Root, using the provided MicrosoftGraphRoot
func (t *MicrosoftGraphSiteCollection_Root) MergeMicrosoftGraphRoot(v MicrosoftGraphRoot) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsMicrosoftGraphSiteCollectionRoot1 returns the union data inside the MicrosoftGraphSiteCollection_Root as a MicrosoftGraphSiteCollectionRoot1
func (t MicrosoftGraphSiteCollection_Root) AsMicrosoftGraphSiteCollectionRoot1() (MicrosoftGraphSiteCollectionRoot1, error) {
	var body MicrosoftGraphSiteCollectionRoot1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphSiteCollectionRoot1 overwrites any union data inside the MicrosoftGraphSiteCollection_Root as the provided MicrosoftGraphSiteCollectionRoot1
func (t *MicrosoftGraphSiteCollection_Root) FromMicrosoftGraphSiteCollectionRoot1(v MicrosoftGraphSiteCollectionRoot1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphSiteCollectionRoot1 performs a merge with any union data inside the MicrosoftGraphSiteCollection_Root, using the provided MicrosoftGraphSiteCollectionRoot1
func (t *MicrosoftGraphSiteCollection_Root) MergeMicrosoftGraphSiteCollectionRoot1(v MicrosoftGraphSiteCollectionRoot1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

func (t MicrosoftGraphSiteCollection_Root) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *MicrosoftGraphSiteCollection_Root) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsMicrosoftGraphScheduleChangeRequestActor returns the union data inside the MicrosoftGraphSwapShiftsChangeRequest_AssignedTo as a MicrosoftGraphScheduleChangeRequestActor
func (t MicrosoftGraphSwapShiftsChangeRequest_AssignedTo) AsMicrosoftGraphScheduleChangeRequestActor() (MicrosoftGraphScheduleChangeRequestActor, error) {
	var body MicrosoftGraphScheduleChangeRequestActor
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphScheduleChangeRequestActor overwrites any union data inside the MicrosoftGraphSwapShiftsChangeRequest_AssignedTo as the provided MicrosoftGraphScheduleChangeRequestActor
func (t *MicrosoftGraphSwapShiftsChangeRequest_AssignedTo) FromMicrosoftGraphScheduleChangeRequestActor(v MicrosoftGraphScheduleChangeRequestActor) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphScheduleChangeRequestActor performs a merge with any union data inside the MicrosoftGraphSwapShiftsChangeRequest_AssignedTo, using the provided MicrosoftGraphScheduleChangeRequestActor
func (t *MicrosoftGraphSwapShiftsChangeRequest_AssignedTo) MergeMicrosoftGraphScheduleChangeRequestActor(v MicrosoftGraphScheduleChangeRequestActor) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsMicrosoftGraphSwapShiftsChangeRequestAssignedTo1 returns the union data inside the MicrosoftGraphSwapShiftsChangeRequest_AssignedTo as a MicrosoftGraphSwapShiftsChangeRequestAssignedTo1
func (t MicrosoftGraphSwapShiftsChangeRequest_AssignedTo) AsMicrosoftGraphSwapShiftsChangeRequestAssignedTo1() (MicrosoftGraphSwapShiftsChangeRequestAssignedTo1, error) {
	var body MicrosoftGraphSwapShiftsChangeRequestAssignedTo1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphSwapShiftsChangeRequestAssignedTo1 overwrites any union data inside the MicrosoftGraphSwapShiftsChangeRequest_AssignedTo as the provided MicrosoftGraphSwapShiftsChangeRequestAssignedTo1
func (t *MicrosoftGraphSwapShiftsChangeRequest_AssignedTo) FromMicrosoftGraphSwapShiftsChangeRequestAssignedTo1(v MicrosoftGraphSwapShiftsChangeRequestAssignedTo1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphSwapShiftsChangeRequestAssignedTo1 performs a merge with any union data inside the MicrosoftGraphSwapShiftsChangeRequest_AssignedTo, using the provided MicrosoftGraphSwapShiftsChangeRequestAssignedTo1
func (t *MicrosoftGraphSwapShiftsChangeRequest_AssignedTo) MergeMicrosoftGraphSwapShiftsChangeRequestAssignedTo1(v MicrosoftGraphSwapShiftsChangeRequestAssignedTo1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

func (t MicrosoftGraphSwapShiftsChangeRequest_AssignedTo) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *MicrosoftGraphSwapShiftsChangeRequest_AssignedTo) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsMicrosoftGraphIdentitySet returns the union data inside the MicrosoftGraphSwapShiftsChangeRequest_LastModifiedBy as a MicrosoftGraphIdentitySet
func (t MicrosoftGraphSwapShiftsChangeRequest_LastModifiedBy) AsMicrosoftGraphIdentitySet() (MicrosoftGraphIdentitySet, error) {
	var body MicrosoftGraphIdentitySet
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphIdentitySet overwrites any union data inside the MicrosoftGraphSwapShiftsChangeRequest_LastModifiedBy as the provided MicrosoftGraphIdentitySet
func (t *MicrosoftGraphSwapShiftsChangeRequest_LastModifiedBy) FromMicrosoftGraphIdentitySet(v MicrosoftGraphIdentitySet) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphIdentitySet performs a merge with any union data inside the MicrosoftGraphSwapShiftsChangeRequest_LastModifiedBy, using the provided MicrosoftGraphIdentitySet
func (t *MicrosoftGraphSwapShiftsChangeRequest_LastModifiedBy) MergeMicrosoftGraphIdentitySet(v MicrosoftGraphIdentitySet) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsMicrosoftGraphSwapShiftsChangeRequestLastModifiedBy1 returns the union data inside the MicrosoftGraphSwapShiftsChangeRequest_LastModifiedBy as a MicrosoftGraphSwapShiftsChangeRequestLastModifiedBy1
func (t MicrosoftGraphSwapShiftsChangeRequest_LastModifiedBy) AsMicrosoftGraphSwapShiftsChangeRequestLastModifiedBy1() (MicrosoftGraphSwapShiftsChangeRequestLastModifiedBy1, error) {
	var body MicrosoftGraphSwapShiftsChangeRequestLastModifiedBy1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphSwapShiftsChangeRequestLastModifiedBy1 overwrites any union data inside the MicrosoftGraphSwapShiftsChangeRequest_LastModifiedBy as the provided MicrosoftGraphSwapShiftsChangeRequestLastModifiedBy1
func (t *MicrosoftGraphSwapShiftsChangeRequest_LastModifiedBy) FromMicrosoftGraphSwapShiftsChangeRequestLastModifiedBy1(v MicrosoftGraphSwapShiftsChangeRequestLastModifiedBy1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphSwapShiftsChangeRequestLastModifiedBy1 performs a merge with any union data inside the MicrosoftGraphSwapShiftsChangeRequest_LastModifiedBy, using the provided MicrosoftGraphSwapShiftsChangeRequestLastModifiedBy1
func (t *MicrosoftGraphSwapShiftsChangeRequest_LastModifiedBy) MergeMicrosoftGraphSwapShiftsChangeRequestLastModifiedBy1(v MicrosoftGraphSwapShiftsChangeRequestLastModifiedBy1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

func (t MicrosoftGraphSwapShiftsChangeRequest_LastModifiedBy) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *MicrosoftGraphSwapShiftsChangeRequest_LastModifiedBy) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsMicrosoftGraphScheduleChangeState returns the union data inside the MicrosoftGraphSwapShiftsChangeRequest_State as a MicrosoftGraphScheduleChangeState
func (t MicrosoftGraphSwapShiftsChangeRequest_State) AsMicrosoftGraphScheduleChangeState() (MicrosoftGraphScheduleChangeState, error) {
	var body MicrosoftGraphScheduleChangeState
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphScheduleChangeState overwrites any union data inside the MicrosoftGraphSwapShiftsChangeRequest_State as the provided MicrosoftGraphScheduleChangeState
func (t *MicrosoftGraphSwapShiftsChangeRequest_State) FromMicrosoftGraphScheduleChangeState(v MicrosoftGraphScheduleChangeState) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphScheduleChangeState performs a merge with any union data inside the MicrosoftGraphSwapShiftsChangeRequest_State, using the provided MicrosoftGraphScheduleChangeState
func (t *MicrosoftGraphSwapShiftsChangeRequest_State) MergeMicrosoftGraphScheduleChangeState(v MicrosoftGraphScheduleChangeState) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsMicrosoftGraphSwapShiftsChangeRequestState1 returns the union data inside the MicrosoftGraphSwapShiftsChangeRequest_State as a MicrosoftGraphSwapShiftsChangeRequestState1
func (t MicrosoftGraphSwapShiftsChangeRequest_State) AsMicrosoftGraphSwapShiftsChangeRequestState1() (MicrosoftGraphSwapShiftsChangeRequestState1, error) {
	var body MicrosoftGraphSwapShiftsChangeRequestState1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphSwapShiftsChangeRequestState1 overwrites any union data inside the MicrosoftGraphSwapShiftsChangeRequest_State as the provided MicrosoftGraphSwapShiftsChangeRequestState1
func (t *MicrosoftGraphSwapShiftsChangeRequest_State) FromMicrosoftGraphSwapShiftsChangeRequestState1(v MicrosoftGraphSwapShiftsChangeRequestState1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphSwapShiftsChangeRequestState1 performs a merge with any union data inside the MicrosoftGraphSwapShiftsChangeRequest_State, using the provided MicrosoftGraphSwapShiftsChangeRequestState1
func (t *MicrosoftGraphSwapShiftsChangeRequest_State) MergeMicrosoftGraphSwapShiftsChangeRequestState1(v MicrosoftGraphSwapShiftsChangeRequestState1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

func (t MicrosoftGraphSwapShiftsChangeRequest_State) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *MicrosoftGraphSwapShiftsChangeRequest_State) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsMicrosoftGraphTeamFunSettings returns the union data inside the MicrosoftGraphTeam_FunSettings as a MicrosoftGraphTeamFunSettings
func (t MicrosoftGraphTeam_FunSettings) AsMicrosoftGraphTeamFunSettings() (MicrosoftGraphTeamFunSettings, error) {
	var body MicrosoftGraphTeamFunSettings
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphTeamFunSettings overwrites any union data inside the MicrosoftGraphTeam_FunSettings as the provided MicrosoftGraphTeamFunSettings
func (t *MicrosoftGraphTeam_FunSettings) FromMicrosoftGraphTeamFunSettings(v MicrosoftGraphTeamFunSettings) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphTeamFunSettings performs a merge with any union data inside the MicrosoftGraphTeam_FunSettings, using the provided MicrosoftGraphTeamFunSettings
func (t *MicrosoftGraphTeam_FunSettings) MergeMicrosoftGraphTeamFunSettings(v MicrosoftGraphTeamFunSettings) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsMicrosoftGraphTeamFunSettings1 returns the union data inside the MicrosoftGraphTeam_FunSettings as a MicrosoftGraphTeamFunSettings1
func (t MicrosoftGraphTeam_FunSettings) AsMicrosoftGraphTeamFunSettings1() (MicrosoftGraphTeamFunSettings1, error) {
	var body MicrosoftGraphTeamFunSettings1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphTeamFunSettings1 overwrites any union data inside the MicrosoftGraphTeam_FunSettings as the provided MicrosoftGraphTeamFunSettings1
func (t *MicrosoftGraphTeam_FunSettings) FromMicrosoftGraphTeamFunSettings1(v MicrosoftGraphTeamFunSettings1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphTeamFunSettings1 performs a merge with any union data inside the MicrosoftGraphTeam_FunSettings, using the provided MicrosoftGraphTeamFunSettings1
func (t *MicrosoftGraphTeam_FunSettings) MergeMicrosoftGraphTeamFunSettings1(v MicrosoftGraphTeamFunSettings1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

func (t MicrosoftGraphTeam_FunSettings) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *MicrosoftGraphTeam_FunSettings) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsMicrosoftGraphGroup returns the union data inside the MicrosoftGraphTeam_Group as a MicrosoftGraphGroup
func (t MicrosoftGraphTeam_Group) AsMicrosoftGraphGroup() (MicrosoftGraphGroup, error) {
	var body MicrosoftGraphGroup
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphGroup overwrites any union data inside the MicrosoftGraphTeam_Group as the provided MicrosoftGraphGroup
func (t *MicrosoftGraphTeam_Group) FromMicrosoftGraphGroup(v MicrosoftGraphGroup) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphGroup performs a merge with any union data inside the MicrosoftGraphTeam_Group, using the provided MicrosoftGraphGroup
func (t *MicrosoftGraphTeam_Group) MergeMicrosoftGraphGroup(v MicrosoftGraphGroup) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsMicrosoftGraphTeamGroup1 returns the union data inside the MicrosoftGraphTeam_Group as a MicrosoftGraphTeamGroup1
func (t MicrosoftGraphTeam_Group) AsMicrosoftGraphTeamGroup1() (MicrosoftGraphTeamGroup1, error) {
	var body MicrosoftGraphTeamGroup1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphTeamGroup1 overwrites any union data inside the MicrosoftGraphTeam_Group as the provided MicrosoftGraphTeamGroup1
func (t *MicrosoftGraphTeam_Group) FromMicrosoftGraphTeamGroup1(v MicrosoftGraphTeamGroup1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphTeamGroup1 performs a merge with any union data inside the MicrosoftGraphTeam_Group, using the provided MicrosoftGraphTeamGroup1
func (t *MicrosoftGraphTeam_Group) MergeMicrosoftGraphTeamGroup1(v MicrosoftGraphTeamGroup1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

func (t MicrosoftGraphTeam_Group) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *MicrosoftGraphTeam_Group) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsMicrosoftGraphTeamGuestSettings returns the union data inside the MicrosoftGraphTeam_GuestSettings as a MicrosoftGraphTeamGuestSettings
func (t MicrosoftGraphTeam_GuestSettings) AsMicrosoftGraphTeamGuestSettings() (MicrosoftGraphTeamGuestSettings, error) {
	var body MicrosoftGraphTeamGuestSettings
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphTeamGuestSettings overwrites any union data inside the MicrosoftGraphTeam_GuestSettings as the provided MicrosoftGraphTeamGuestSettings
func (t *MicrosoftGraphTeam_GuestSettings) FromMicrosoftGraphTeamGuestSettings(v MicrosoftGraphTeamGuestSettings) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphTeamGuestSettings performs a merge with any union data inside the MicrosoftGraphTeam_GuestSettings, using the provided MicrosoftGraphTeamGuestSettings
func (t *MicrosoftGraphTeam_GuestSettings) MergeMicrosoftGraphTeamGuestSettings(v MicrosoftGraphTeamGuestSettings) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsMicrosoftGraphTeamGuestSettings1 returns the union data inside the MicrosoftGraphTeam_GuestSettings as a MicrosoftGraphTeamGuestSettings1
func (t MicrosoftGraphTeam_GuestSettings) AsMicrosoftGraphTeamGuestSettings1() (MicrosoftGraphTeamGuestSettings1, error) {
	var body MicrosoftGraphTeamGuestSettings1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphTeamGuestSettings1 overwrites any union data inside the MicrosoftGraphTeam_GuestSettings as the provided MicrosoftGraphTeamGuestSettings1
func (t *MicrosoftGraphTeam_GuestSettings) FromMicrosoftGraphTeamGuestSettings1(v MicrosoftGraphTeamGuestSettings1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphTeamGuestSettings1 performs a merge with any union data inside the MicrosoftGraphTeam_GuestSettings, using the provided MicrosoftGraphTeamGuestSettings1
func (t *MicrosoftGraphTeam_GuestSettings) MergeMicrosoftGraphTeamGuestSettings1(v MicrosoftGraphTeamGuestSettings1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

func (t MicrosoftGraphTeam_GuestSettings) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *MicrosoftGraphTeam_GuestSettings) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsMicrosoftGraphTeamMemberSettings returns the union data inside the MicrosoftGraphTeam_MemberSettings as a MicrosoftGraphTeamMemberSettings
func (t MicrosoftGraphTeam_MemberSettings) AsMicrosoftGraphTeamMemberSettings() (MicrosoftGraphTeamMemberSettings, error) {
	var body MicrosoftGraphTeamMemberSettings
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphTeamMemberSettings overwrites any union data inside the MicrosoftGraphTeam_MemberSettings as the provided MicrosoftGraphTeamMemberSettings
func (t *MicrosoftGraphTeam_MemberSettings) FromMicrosoftGraphTeamMemberSettings(v MicrosoftGraphTeamMemberSettings) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphTeamMemberSettings performs a merge with any union data inside the MicrosoftGraphTeam_MemberSettings, using the provided MicrosoftGraphTeamMemberSettings
func (t *MicrosoftGraphTeam_MemberSettings) MergeMicrosoftGraphTeamMemberSettings(v MicrosoftGraphTeamMemberSettings) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsMicrosoftGraphTeamMemberSettings1 returns the union data inside the MicrosoftGraphTeam_MemberSettings as a MicrosoftGraphTeamMemberSettings1
func (t MicrosoftGraphTeam_MemberSettings) AsMicrosoftGraphTeamMemberSettings1() (MicrosoftGraphTeamMemberSettings1, error) {
	var body MicrosoftGraphTeamMemberSettings1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphTeamMemberSettings1 overwrites any union data inside the MicrosoftGraphTeam_MemberSettings as the provided MicrosoftGraphTeamMemberSettings1
func (t *MicrosoftGraphTeam_MemberSettings) FromMicrosoftGraphTeamMemberSettings1(v MicrosoftGraphTeamMemberSettings1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphTeamMemberSettings1 performs a merge with any union data inside the MicrosoftGraphTeam_MemberSettings, using the provided MicrosoftGraphTeamMemberSettings1
func (t *MicrosoftGraphTeam_MemberSettings) MergeMicrosoftGraphTeamMemberSettings1(v MicrosoftGraphTeamMemberSettings1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

func (t MicrosoftGraphTeam_MemberSettings) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *MicrosoftGraphTeam_MemberSettings) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsMicrosoftGraphTeamMessagingSettings returns the union data inside the MicrosoftGraphTeam_MessagingSettings as a MicrosoftGraphTeamMessagingSettings
func (t MicrosoftGraphTeam_MessagingSettings) AsMicrosoftGraphTeamMessagingSettings() (MicrosoftGraphTeamMessagingSettings, error) {
	var body MicrosoftGraphTeamMessagingSettings
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphTeamMessagingSettings overwrites any union data inside the MicrosoftGraphTeam_MessagingSettings as the provided MicrosoftGraphTeamMessagingSettings
func (t *MicrosoftGraphTeam_MessagingSettings) FromMicrosoftGraphTeamMessagingSettings(v MicrosoftGraphTeamMessagingSettings) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphTeamMessagingSettings performs a merge with any union data inside the MicrosoftGraphTeam_MessagingSettings, using the provided MicrosoftGraphTeamMessagingSettings
func (t *MicrosoftGraphTeam_MessagingSettings) MergeMicrosoftGraphTeamMessagingSettings(v MicrosoftGraphTeamMessagingSettings) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsMicrosoftGraphTeamMessagingSettings1 returns the union data inside the MicrosoftGraphTeam_MessagingSettings as a MicrosoftGraphTeamMessagingSettings1
func (t MicrosoftGraphTeam_MessagingSettings) AsMicrosoftGraphTeamMessagingSettings1() (MicrosoftGraphTeamMessagingSettings1, error) {
	var body MicrosoftGraphTeamMessagingSettings1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphTeamMessagingSettings1 overwrites any union data inside the MicrosoftGraphTeam_MessagingSettings as the provided MicrosoftGraphTeamMessagingSettings1
func (t *MicrosoftGraphTeam_MessagingSettings) FromMicrosoftGraphTeamMessagingSettings1(v MicrosoftGraphTeamMessagingSettings1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphTeamMessagingSettings1 performs a merge with any union data inside the MicrosoftGraphTeam_MessagingSettings, using the provided MicrosoftGraphTeamMessagingSettings1
func (t *MicrosoftGraphTeam_MessagingSettings) MergeMicrosoftGraphTeamMessagingSettings1(v MicrosoftGraphTeamMessagingSettings1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

func (t MicrosoftGraphTeam_MessagingSettings) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *MicrosoftGraphTeam_MessagingSettings) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsMicrosoftGraphProfilePhoto returns the union data inside the MicrosoftGraphTeam_Photo as a MicrosoftGraphProfilePhoto
func (t MicrosoftGraphTeam_Photo) AsMicrosoftGraphProfilePhoto() (MicrosoftGraphProfilePhoto, error) {
	var body MicrosoftGraphProfilePhoto
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphProfilePhoto overwrites any union data inside the MicrosoftGraphTeam_Photo as the provided MicrosoftGraphProfilePhoto
func (t *MicrosoftGraphTeam_Photo) FromMicrosoftGraphProfilePhoto(v MicrosoftGraphProfilePhoto) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphProfilePhoto performs a merge with any union data inside the MicrosoftGraphTeam_Photo, using the provided MicrosoftGraphProfilePhoto
func (t *MicrosoftGraphTeam_Photo) MergeMicrosoftGraphProfilePhoto(v MicrosoftGraphProfilePhoto) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsMicrosoftGraphTeamPhoto1 returns the union data inside the MicrosoftGraphTeam_Photo as a MicrosoftGraphTeamPhoto1
func (t MicrosoftGraphTeam_Photo) AsMicrosoftGraphTeamPhoto1() (MicrosoftGraphTeamPhoto1, error) {
	var body MicrosoftGraphTeamPhoto1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphTeamPhoto1 overwrites any union data inside the MicrosoftGraphTeam_Photo as the provided MicrosoftGraphTeamPhoto1
func (t *MicrosoftGraphTeam_Photo) FromMicrosoftGraphTeamPhoto1(v MicrosoftGraphTeamPhoto1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphTeamPhoto1 performs a merge with any union data inside the MicrosoftGraphTeam_Photo, using the provided MicrosoftGraphTeamPhoto1
func (t *MicrosoftGraphTeam_Photo) MergeMicrosoftGraphTeamPhoto1(v MicrosoftGraphTeamPhoto1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

func (t MicrosoftGraphTeam_Photo) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *MicrosoftGraphTeam_Photo) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsMicrosoftGraphChannel returns the union data inside the MicrosoftGraphTeam_PrimaryChannel as a MicrosoftGraphChannel
func (t MicrosoftGraphTeam_PrimaryChannel) AsMicrosoftGraphChannel() (MicrosoftGraphChannel, error) {
	var body MicrosoftGraphChannel
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphChannel overwrites any union data inside the MicrosoftGraphTeam_PrimaryChannel as the provided MicrosoftGraphChannel
func (t *MicrosoftGraphTeam_PrimaryChannel) FromMicrosoftGraphChannel(v MicrosoftGraphChannel) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphChannel performs a merge with any union data inside the MicrosoftGraphTeam_PrimaryChannel, using the provided MicrosoftGraphChannel
func (t *MicrosoftGraphTeam_PrimaryChannel) MergeMicrosoftGraphChannel(v MicrosoftGraphChannel) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsMicrosoftGraphTeamPrimaryChannel1 returns the union data inside the MicrosoftGraphTeam_PrimaryChannel as a MicrosoftGraphTeamPrimaryChannel1
func (t MicrosoftGraphTeam_PrimaryChannel) AsMicrosoftGraphTeamPrimaryChannel1() (MicrosoftGraphTeamPrimaryChannel1, error) {
	var body MicrosoftGraphTeamPrimaryChannel1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphTeamPrimaryChannel1 overwrites any union data inside the MicrosoftGraphTeam_PrimaryChannel as the provided MicrosoftGraphTeamPrimaryChannel1
func (t *MicrosoftGraphTeam_PrimaryChannel) FromMicrosoftGraphTeamPrimaryChannel1(v MicrosoftGraphTeamPrimaryChannel1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphTeamPrimaryChannel1 performs a merge with any union data inside the MicrosoftGraphTeam_PrimaryChannel, using the provided MicrosoftGraphTeamPrimaryChannel1
func (t *MicrosoftGraphTeam_PrimaryChannel) MergeMicrosoftGraphTeamPrimaryChannel1(v MicrosoftGraphTeamPrimaryChannel1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

func (t MicrosoftGraphTeam_PrimaryChannel) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *MicrosoftGraphTeam_PrimaryChannel) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsMicrosoftGraphSchedule returns the union data inside the MicrosoftGraphTeam_Schedule as a MicrosoftGraphSchedule
func (t MicrosoftGraphTeam_Schedule) AsMicrosoftGraphSchedule() (MicrosoftGraphSchedule, error) {
	var body MicrosoftGraphSchedule
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphSchedule overwrites any union data inside the MicrosoftGraphTeam_Schedule as the provided MicrosoftGraphSchedule
func (t *MicrosoftGraphTeam_Schedule) FromMicrosoftGraphSchedule(v MicrosoftGraphSchedule) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphSchedule performs a merge with any union data inside the MicrosoftGraphTeam_Schedule, using the provided MicrosoftGraphSchedule
func (t *MicrosoftGraphTeam_Schedule) MergeMicrosoftGraphSchedule(v MicrosoftGraphSchedule) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsMicrosoftGraphTeamSchedule1 returns the union data inside the MicrosoftGraphTeam_Schedule as a MicrosoftGraphTeamSchedule1
func (t MicrosoftGraphTeam_Schedule) AsMicrosoftGraphTeamSchedule1() (MicrosoftGraphTeamSchedule1, error) {
	var body MicrosoftGraphTeamSchedule1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphTeamSchedule1 overwrites any union data inside the MicrosoftGraphTeam_Schedule as the provided MicrosoftGraphTeamSchedule1
func (t *MicrosoftGraphTeam_Schedule) FromMicrosoftGraphTeamSchedule1(v MicrosoftGraphTeamSchedule1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphTeamSchedule1 performs a merge with any union data inside the MicrosoftGraphTeam_Schedule, using the provided MicrosoftGraphTeamSchedule1
func (t *MicrosoftGraphTeam_Schedule) MergeMicrosoftGraphTeamSchedule1(v MicrosoftGraphTeamSchedule1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

func (t MicrosoftGraphTeam_Schedule) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *MicrosoftGraphTeam_Schedule) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsMicrosoftGraphTeamSpecialization returns the union data inside the MicrosoftGraphTeam_Specialization as a MicrosoftGraphTeamSpecialization
func (t MicrosoftGraphTeam_Specialization) AsMicrosoftGraphTeamSpecialization() (MicrosoftGraphTeamSpecialization, error) {
	var body MicrosoftGraphTeamSpecialization
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphTeamSpecialization overwrites any union data inside the MicrosoftGraphTeam_Specialization as the provided MicrosoftGraphTeamSpecialization
func (t *MicrosoftGraphTeam_Specialization) FromMicrosoftGraphTeamSpecialization(v MicrosoftGraphTeamSpecialization) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphTeamSpecialization performs a merge with any union data inside the MicrosoftGraphTeam_Specialization, using the provided MicrosoftGraphTeamSpecialization
func (t *MicrosoftGraphTeam_Specialization) MergeMicrosoftGraphTeamSpecialization(v MicrosoftGraphTeamSpecialization) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsMicrosoftGraphTeamSpecialization1 returns the union data inside the MicrosoftGraphTeam_Specialization as a MicrosoftGraphTeamSpecialization1
func (t MicrosoftGraphTeam_Specialization) AsMicrosoftGraphTeamSpecialization1() (MicrosoftGraphTeamSpecialization1, error) {
	var body MicrosoftGraphTeamSpecialization1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphTeamSpecialization1 overwrites any union data inside the MicrosoftGraphTeam_Specialization as the provided MicrosoftGraphTeamSpecialization1
func (t *MicrosoftGraphTeam_Specialization) FromMicrosoftGraphTeamSpecialization1(v MicrosoftGraphTeamSpecialization1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphTeamSpecialization1 performs a merge with any union data inside the MicrosoftGraphTeam_Specialization, using the provided MicrosoftGraphTeamSpecialization1
func (t *MicrosoftGraphTeam_Specialization) MergeMicrosoftGraphTeamSpecialization1(v MicrosoftGraphTeamSpecialization1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

func (t MicrosoftGraphTeam_Specialization) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *MicrosoftGraphTeam_Specialization) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsMicrosoftGraphTeamSummary returns the union data inside the MicrosoftGraphTeam_Summary as a MicrosoftGraphTeamSummary
func (t MicrosoftGraphTeam_Summary) AsMicrosoftGraphTeamSummary() (MicrosoftGraphTeamSummary, error) {
	var body MicrosoftGraphTeamSummary
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphTeamSummary overwrites any union data inside the MicrosoftGraphTeam_Summary as the provided MicrosoftGraphTeamSummary
func (t *MicrosoftGraphTeam_Summary) FromMicrosoftGraphTeamSummary(v MicrosoftGraphTeamSummary) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphTeamSummary performs a merge with any union data inside the MicrosoftGraphTeam_Summary, using the provided MicrosoftGraphTeamSummary
func (t *MicrosoftGraphTeam_Summary) MergeMicrosoftGraphTeamSummary(v MicrosoftGraphTeamSummary) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsMicrosoftGraphTeamSummary1 returns the union data inside the MicrosoftGraphTeam_Summary as a MicrosoftGraphTeamSummary1
func (t MicrosoftGraphTeam_Summary) AsMicrosoftGraphTeamSummary1() (MicrosoftGraphTeamSummary1, error) {
	var body MicrosoftGraphTeamSummary1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphTeamSummary1 overwrites any union data inside the MicrosoftGraphTeam_Summary as the provided MicrosoftGraphTeamSummary1
func (t *MicrosoftGraphTeam_Summary) FromMicrosoftGraphTeamSummary1(v MicrosoftGraphTeamSummary1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphTeamSummary1 performs a merge with any union data inside the MicrosoftGraphTeam_Summary, using the provided MicrosoftGraphTeamSummary1
func (t *MicrosoftGraphTeam_Summary) MergeMicrosoftGraphTeamSummary1(v MicrosoftGraphTeamSummary1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

func (t MicrosoftGraphTeam_Summary) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *MicrosoftGraphTeam_Summary) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsMicrosoftGraphTeamsTemplate returns the union data inside the MicrosoftGraphTeam_Template as a MicrosoftGraphTeamsTemplate
func (t MicrosoftGraphTeam_Template) AsMicrosoftGraphTeamsTemplate() (MicrosoftGraphTeamsTemplate, error) {
	var body MicrosoftGraphTeamsTemplate
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphTeamsTemplate overwrites any union data inside the MicrosoftGraphTeam_Template as the provided MicrosoftGraphTeamsTemplate
func (t *MicrosoftGraphTeam_Template) FromMicrosoftGraphTeamsTemplate(v MicrosoftGraphTeamsTemplate) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphTeamsTemplate performs a merge with any union data inside the MicrosoftGraphTeam_Template, using the provided MicrosoftGraphTeamsTemplate
func (t *MicrosoftGraphTeam_Template) MergeMicrosoftGraphTeamsTemplate(v MicrosoftGraphTeamsTemplate) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsMicrosoftGraphTeamTemplate1 returns the union data inside the MicrosoftGraphTeam_Template as a MicrosoftGraphTeamTemplate1
func (t MicrosoftGraphTeam_Template) AsMicrosoftGraphTeamTemplate1() (MicrosoftGraphTeamTemplate1, error) {
	var body MicrosoftGraphTeamTemplate1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphTeamTemplate1 overwrites any union data inside the MicrosoftGraphTeam_Template as the provided MicrosoftGraphTeamTemplate1
func (t *MicrosoftGraphTeam_Template) FromMicrosoftGraphTeamTemplate1(v MicrosoftGraphTeamTemplate1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphTeamTemplate1 performs a merge with any union data inside the MicrosoftGraphTeam_Template, using the provided MicrosoftGraphTeamTemplate1
func (t *MicrosoftGraphTeam_Template) MergeMicrosoftGraphTeamTemplate1(v MicrosoftGraphTeamTemplate1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

func (t MicrosoftGraphTeam_Template) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *MicrosoftGraphTeam_Template) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsMicrosoftGraphTeamVisibilityType returns the union data inside the MicrosoftGraphTeam_Visibility as a MicrosoftGraphTeamVisibilityType
func (t MicrosoftGraphTeam_Visibility) AsMicrosoftGraphTeamVisibilityType() (MicrosoftGraphTeamVisibilityType, error) {
	var body MicrosoftGraphTeamVisibilityType
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphTeamVisibilityType overwrites any union data inside the MicrosoftGraphTeam_Visibility as the provided MicrosoftGraphTeamVisibilityType
func (t *MicrosoftGraphTeam_Visibility) FromMicrosoftGraphTeamVisibilityType(v MicrosoftGraphTeamVisibilityType) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphTeamVisibilityType performs a merge with any union data inside the MicrosoftGraphTeam_Visibility, using the provided MicrosoftGraphTeamVisibilityType
func (t *MicrosoftGraphTeam_Visibility) MergeMicrosoftGraphTeamVisibilityType(v MicrosoftGraphTeamVisibilityType) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsMicrosoftGraphTeamVisibility1 returns the union data inside the MicrosoftGraphTeam_Visibility as a MicrosoftGraphTeamVisibility1
func (t MicrosoftGraphTeam_Visibility) AsMicrosoftGraphTeamVisibility1() (MicrosoftGraphTeamVisibility1, error) {
	var body MicrosoftGraphTeamVisibility1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphTeamVisibility1 overwrites any union data inside the MicrosoftGraphTeam_Visibility as the provided MicrosoftGraphTeamVisibility1
func (t *MicrosoftGraphTeam_Visibility) FromMicrosoftGraphTeamVisibility1(v MicrosoftGraphTeamVisibility1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphTeamVisibility1 performs a merge with any union data inside the MicrosoftGraphTeam_Visibility, using the provided MicrosoftGraphTeamVisibility1
func (t *MicrosoftGraphTeam_Visibility) MergeMicrosoftGraphTeamVisibility1(v MicrosoftGraphTeamVisibility1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

func (t MicrosoftGraphTeam_Visibility) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *MicrosoftGraphTeam_Visibility) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsMicrosoftGraphGiphyRatingType returns the union data inside the MicrosoftGraphTeamFunSettings_GiphyContentRating as a MicrosoftGraphGiphyRatingType
func (t MicrosoftGraphTeamFunSettings_GiphyContentRating) AsMicrosoftGraphGiphyRatingType() (MicrosoftGraphGiphyRatingType, error) {
	var body MicrosoftGraphGiphyRatingType
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphGiphyRatingType overwrites any union data inside the MicrosoftGraphTeamFunSettings_GiphyContentRating as the provided MicrosoftGraphGiphyRatingType
func (t *MicrosoftGraphTeamFunSettings_GiphyContentRating) FromMicrosoftGraphGiphyRatingType(v MicrosoftGraphGiphyRatingType) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphGiphyRatingType performs a merge with any union data inside the MicrosoftGraphTeamFunSettings_GiphyContentRating, using the provided MicrosoftGraphGiphyRatingType
func (t *MicrosoftGraphTeamFunSettings_GiphyContentRating) MergeMicrosoftGraphGiphyRatingType(v MicrosoftGraphGiphyRatingType) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsMicrosoftGraphTeamFunSettingsGiphyContentRating1 returns the union data inside the MicrosoftGraphTeamFunSettings_GiphyContentRating as a MicrosoftGraphTeamFunSettingsGiphyContentRating1
func (t MicrosoftGraphTeamFunSettings_GiphyContentRating) AsMicrosoftGraphTeamFunSettingsGiphyContentRating1() (MicrosoftGraphTeamFunSettingsGiphyContentRating1, error) {
	var body MicrosoftGraphTeamFunSettingsGiphyContentRating1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphTeamFunSettingsGiphyContentRating1 overwrites any union data inside the MicrosoftGraphTeamFunSettings_GiphyContentRating as the provided MicrosoftGraphTeamFunSettingsGiphyContentRating1
func (t *MicrosoftGraphTeamFunSettings_GiphyContentRating) FromMicrosoftGraphTeamFunSettingsGiphyContentRating1(v MicrosoftGraphTeamFunSettingsGiphyContentRating1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphTeamFunSettingsGiphyContentRating1 performs a merge with any union data inside the MicrosoftGraphTeamFunSettings_GiphyContentRating, using the provided MicrosoftGraphTeamFunSettingsGiphyContentRating1
func (t *MicrosoftGraphTeamFunSettings_GiphyContentRating) MergeMicrosoftGraphTeamFunSettingsGiphyContentRating1(v MicrosoftGraphTeamFunSettingsGiphyContentRating1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

func (t MicrosoftGraphTeamFunSettings_GiphyContentRating) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *MicrosoftGraphTeamFunSettings_GiphyContentRating) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsMicrosoftGraphTeam returns the union data inside the MicrosoftGraphTeamInfo_Team as a MicrosoftGraphTeam
func (t MicrosoftGraphTeamInfo_Team) AsMicrosoftGraphTeam() (MicrosoftGraphTeam, error) {
	var body MicrosoftGraphTeam
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphTeam overwrites any union data inside the MicrosoftGraphTeamInfo_Team as the provided MicrosoftGraphTeam
func (t *MicrosoftGraphTeamInfo_Team) FromMicrosoftGraphTeam(v MicrosoftGraphTeam) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphTeam performs a merge with any union data inside the MicrosoftGraphTeamInfo_Team, using the provided MicrosoftGraphTeam
func (t *MicrosoftGraphTeamInfo_Team) MergeMicrosoftGraphTeam(v MicrosoftGraphTeam) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsMicrosoftGraphTeamInfoTeam1 returns the union data inside the MicrosoftGraphTeamInfo_Team as a MicrosoftGraphTeamInfoTeam1
func (t MicrosoftGraphTeamInfo_Team) AsMicrosoftGraphTeamInfoTeam1() (MicrosoftGraphTeamInfoTeam1, error) {
	var body MicrosoftGraphTeamInfoTeam1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphTeamInfoTeam1 overwrites any union data inside the MicrosoftGraphTeamInfo_Team as the provided MicrosoftGraphTeamInfoTeam1
func (t *MicrosoftGraphTeamInfo_Team) FromMicrosoftGraphTeamInfoTeam1(v MicrosoftGraphTeamInfoTeam1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphTeamInfoTeam1 performs a merge with any union data inside the MicrosoftGraphTeamInfo_Team, using the provided MicrosoftGraphTeamInfoTeam1
func (t *MicrosoftGraphTeamInfo_Team) MergeMicrosoftGraphTeamInfoTeam1(v MicrosoftGraphTeamInfoTeam1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

func (t MicrosoftGraphTeamInfo_Team) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *MicrosoftGraphTeamInfo_Team) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsMicrosoftGraphTeamsAppDistributionMethod returns the union data inside the MicrosoftGraphTeamsApp_DistributionMethod as a MicrosoftGraphTeamsAppDistributionMethod
func (t MicrosoftGraphTeamsApp_DistributionMethod) AsMicrosoftGraphTeamsAppDistributionMethod() (MicrosoftGraphTeamsAppDistributionMethod, error) {
	var body MicrosoftGraphTeamsAppDistributionMethod
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphTeamsAppDistributionMethod overwrites any union data inside the MicrosoftGraphTeamsApp_DistributionMethod as the provided MicrosoftGraphTeamsAppDistributionMethod
func (t *MicrosoftGraphTeamsApp_DistributionMethod) FromMicrosoftGraphTeamsAppDistributionMethod(v MicrosoftGraphTeamsAppDistributionMethod) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphTeamsAppDistributionMethod performs a merge with any union data inside the MicrosoftGraphTeamsApp_DistributionMethod, using the provided MicrosoftGraphTeamsAppDistributionMethod
func (t *MicrosoftGraphTeamsApp_DistributionMethod) MergeMicrosoftGraphTeamsAppDistributionMethod(v MicrosoftGraphTeamsAppDistributionMethod) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsMicrosoftGraphTeamsAppDistributionMethod1 returns the union data inside the MicrosoftGraphTeamsApp_DistributionMethod as a MicrosoftGraphTeamsAppDistributionMethod1
func (t MicrosoftGraphTeamsApp_DistributionMethod) AsMicrosoftGraphTeamsAppDistributionMethod1() (MicrosoftGraphTeamsAppDistributionMethod1, error) {
	var body MicrosoftGraphTeamsAppDistributionMethod1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphTeamsAppDistributionMethod1 overwrites any union data inside the MicrosoftGraphTeamsApp_DistributionMethod as the provided MicrosoftGraphTeamsAppDistributionMethod1
func (t *MicrosoftGraphTeamsApp_DistributionMethod) FromMicrosoftGraphTeamsAppDistributionMethod1(v MicrosoftGraphTeamsAppDistributionMethod1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphTeamsAppDistributionMethod1 performs a merge with any union data inside the MicrosoftGraphTeamsApp_DistributionMethod, using the provided MicrosoftGraphTeamsAppDistributionMethod1
func (t *MicrosoftGraphTeamsApp_DistributionMethod) MergeMicrosoftGraphTeamsAppDistributionMethod1(v MicrosoftGraphTeamsAppDistributionMethod1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

func (t MicrosoftGraphTeamsApp_DistributionMethod) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *MicrosoftGraphTeamsApp_DistributionMethod) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsMicrosoftGraphTeamsAppPermissionSet returns the union data inside the MicrosoftGraphTeamsAppAuthorization_RequiredPermissionSet as a MicrosoftGraphTeamsAppPermissionSet
func (t MicrosoftGraphTeamsAppAuthorization_RequiredPermissionSet) AsMicrosoftGraphTeamsAppPermissionSet() (MicrosoftGraphTeamsAppPermissionSet, error) {
	var body MicrosoftGraphTeamsAppPermissionSet
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphTeamsAppPermissionSet overwrites any union data inside the MicrosoftGraphTeamsAppAuthorization_RequiredPermissionSet as the provided MicrosoftGraphTeamsAppPermissionSet
func (t *MicrosoftGraphTeamsAppAuthorization_RequiredPermissionSet) FromMicrosoftGraphTeamsAppPermissionSet(v MicrosoftGraphTeamsAppPermissionSet) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphTeamsAppPermissionSet performs a merge with any union data inside the MicrosoftGraphTeamsAppAuthorization_RequiredPermissionSet, using the provided MicrosoftGraphTeamsAppPermissionSet
func (t *MicrosoftGraphTeamsAppAuthorization_RequiredPermissionSet) MergeMicrosoftGraphTeamsAppPermissionSet(v MicrosoftGraphTeamsAppPermissionSet) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsMicrosoftGraphTeamsAppAuthorizationRequiredPermissionSet1 returns the union data inside the MicrosoftGraphTeamsAppAuthorization_RequiredPermissionSet as a MicrosoftGraphTeamsAppAuthorizationRequiredPermissionSet1
func (t MicrosoftGraphTeamsAppAuthorization_RequiredPermissionSet) AsMicrosoftGraphTeamsAppAuthorizationRequiredPermissionSet1() (MicrosoftGraphTeamsAppAuthorizationRequiredPermissionSet1, error) {
	var body MicrosoftGraphTeamsAppAuthorizationRequiredPermissionSet1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphTeamsAppAuthorizationRequiredPermissionSet1 overwrites any union data inside the MicrosoftGraphTeamsAppAuthorization_RequiredPermissionSet as the provided MicrosoftGraphTeamsAppAuthorizationRequiredPermissionSet1
func (t *MicrosoftGraphTeamsAppAuthorization_RequiredPermissionSet) FromMicrosoftGraphTeamsAppAuthorizationRequiredPermissionSet1(v MicrosoftGraphTeamsAppAuthorizationRequiredPermissionSet1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphTeamsAppAuthorizationRequiredPermissionSet1 performs a merge with any union data inside the MicrosoftGraphTeamsAppAuthorization_RequiredPermissionSet, using the provided MicrosoftGraphTeamsAppAuthorizationRequiredPermissionSet1
func (t *MicrosoftGraphTeamsAppAuthorization_RequiredPermissionSet) MergeMicrosoftGraphTeamsAppAuthorizationRequiredPermissionSet1(v MicrosoftGraphTeamsAppAuthorizationRequiredPermissionSet1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

func (t MicrosoftGraphTeamsAppAuthorization_RequiredPermissionSet) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *MicrosoftGraphTeamsAppAuthorization_RequiredPermissionSet) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsMicrosoftGraphTeamsAppAuthorization returns the union data inside the MicrosoftGraphTeamsAppDefinition_Authorization as a MicrosoftGraphTeamsAppAuthorization
func (t MicrosoftGraphTeamsAppDefinition_Authorization) AsMicrosoftGraphTeamsAppAuthorization() (MicrosoftGraphTeamsAppAuthorization, error) {
	var body MicrosoftGraphTeamsAppAuthorization
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphTeamsAppAuthorization overwrites any union data inside the MicrosoftGraphTeamsAppDefinition_Authorization as the provided MicrosoftGraphTeamsAppAuthorization
func (t *MicrosoftGraphTeamsAppDefinition_Authorization) FromMicrosoftGraphTeamsAppAuthorization(v MicrosoftGraphTeamsAppAuthorization) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphTeamsAppAuthorization performs a merge with any union data inside the MicrosoftGraphTeamsAppDefinition_Authorization, using the provided MicrosoftGraphTeamsAppAuthorization
func (t *MicrosoftGraphTeamsAppDefinition_Authorization) MergeMicrosoftGraphTeamsAppAuthorization(v MicrosoftGraphTeamsAppAuthorization) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsMicrosoftGraphTeamsAppDefinitionAuthorization1 returns the union data inside the MicrosoftGraphTeamsAppDefinition_Authorization as a MicrosoftGraphTeamsAppDefinitionAuthorization1
func (t MicrosoftGraphTeamsAppDefinition_Authorization) AsMicrosoftGraphTeamsAppDefinitionAuthorization1() (MicrosoftGraphTeamsAppDefinitionAuthorization1, error) {
	var body MicrosoftGraphTeamsAppDefinitionAuthorization1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphTeamsAppDefinitionAuthorization1 overwrites any union data inside the MicrosoftGraphTeamsAppDefinition_Authorization as the provided MicrosoftGraphTeamsAppDefinitionAuthorization1
func (t *MicrosoftGraphTeamsAppDefinition_Authorization) FromMicrosoftGraphTeamsAppDefinitionAuthorization1(v MicrosoftGraphTeamsAppDefinitionAuthorization1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphTeamsAppDefinitionAuthorization1 performs a merge with any union data inside the MicrosoftGraphTeamsAppDefinition_Authorization, using the provided MicrosoftGraphTeamsAppDefinitionAuthorization1
func (t *MicrosoftGraphTeamsAppDefinition_Authorization) MergeMicrosoftGraphTeamsAppDefinitionAuthorization1(v MicrosoftGraphTeamsAppDefinitionAuthorization1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

func (t MicrosoftGraphTeamsAppDefinition_Authorization) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *MicrosoftGraphTeamsAppDefinition_Authorization) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsMicrosoftGraphTeamworkBot returns the union data inside the MicrosoftGraphTeamsAppDefinition_Bot as a MicrosoftGraphTeamworkBot
func (t MicrosoftGraphTeamsAppDefinition_Bot) AsMicrosoftGraphTeamworkBot() (MicrosoftGraphTeamworkBot, error) {
	var body MicrosoftGraphTeamworkBot
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphTeamworkBot overwrites any union data inside the MicrosoftGraphTeamsAppDefinition_Bot as the provided MicrosoftGraphTeamworkBot
func (t *MicrosoftGraphTeamsAppDefinition_Bot) FromMicrosoftGraphTeamworkBot(v MicrosoftGraphTeamworkBot) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphTeamworkBot performs a merge with any union data inside the MicrosoftGraphTeamsAppDefinition_Bot, using the provided MicrosoftGraphTeamworkBot
func (t *MicrosoftGraphTeamsAppDefinition_Bot) MergeMicrosoftGraphTeamworkBot(v MicrosoftGraphTeamworkBot) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsMicrosoftGraphTeamsAppDefinitionBot1 returns the union data inside the MicrosoftGraphTeamsAppDefinition_Bot as a MicrosoftGraphTeamsAppDefinitionBot1
func (t MicrosoftGraphTeamsAppDefinition_Bot) AsMicrosoftGraphTeamsAppDefinitionBot1() (MicrosoftGraphTeamsAppDefinitionBot1, error) {
	var body MicrosoftGraphTeamsAppDefinitionBot1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphTeamsAppDefinitionBot1 overwrites any union data inside the MicrosoftGraphTeamsAppDefinition_Bot as the provided MicrosoftGraphTeamsAppDefinitionBot1
func (t *MicrosoftGraphTeamsAppDefinition_Bot) FromMicrosoftGraphTeamsAppDefinitionBot1(v MicrosoftGraphTeamsAppDefinitionBot1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphTeamsAppDefinitionBot1 performs a merge with any union data inside the MicrosoftGraphTeamsAppDefinition_Bot, using the provided MicrosoftGraphTeamsAppDefinitionBot1
func (t *MicrosoftGraphTeamsAppDefinition_Bot) MergeMicrosoftGraphTeamsAppDefinitionBot1(v MicrosoftGraphTeamsAppDefinitionBot1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

func (t MicrosoftGraphTeamsAppDefinition_Bot) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *MicrosoftGraphTeamsAppDefinition_Bot) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsMicrosoftGraphIdentitySet returns the union data inside the MicrosoftGraphTeamsAppDefinition_CreatedBy as a MicrosoftGraphIdentitySet
func (t MicrosoftGraphTeamsAppDefinition_CreatedBy) AsMicrosoftGraphIdentitySet() (MicrosoftGraphIdentitySet, error) {
	var body MicrosoftGraphIdentitySet
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphIdentitySet overwrites any union data inside the MicrosoftGraphTeamsAppDefinition_CreatedBy as the provided MicrosoftGraphIdentitySet
func (t *MicrosoftGraphTeamsAppDefinition_CreatedBy) FromMicrosoftGraphIdentitySet(v MicrosoftGraphIdentitySet) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphIdentitySet performs a merge with any union data inside the MicrosoftGraphTeamsAppDefinition_CreatedBy, using the provided MicrosoftGraphIdentitySet
func (t *MicrosoftGraphTeamsAppDefinition_CreatedBy) MergeMicrosoftGraphIdentitySet(v MicrosoftGraphIdentitySet) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsMicrosoftGraphTeamsAppDefinitionCreatedBy1 returns the union data inside the MicrosoftGraphTeamsAppDefinition_CreatedBy as a MicrosoftGraphTeamsAppDefinitionCreatedBy1
func (t MicrosoftGraphTeamsAppDefinition_CreatedBy) AsMicrosoftGraphTeamsAppDefinitionCreatedBy1() (MicrosoftGraphTeamsAppDefinitionCreatedBy1, error) {
	var body MicrosoftGraphTeamsAppDefinitionCreatedBy1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphTeamsAppDefinitionCreatedBy1 overwrites any union data inside the MicrosoftGraphTeamsAppDefinition_CreatedBy as the provided MicrosoftGraphTeamsAppDefinitionCreatedBy1
func (t *MicrosoftGraphTeamsAppDefinition_CreatedBy) FromMicrosoftGraphTeamsAppDefinitionCreatedBy1(v MicrosoftGraphTeamsAppDefinitionCreatedBy1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphTeamsAppDefinitionCreatedBy1 performs a merge with any union data inside the MicrosoftGraphTeamsAppDefinition_CreatedBy, using the provided MicrosoftGraphTeamsAppDefinitionCreatedBy1
func (t *MicrosoftGraphTeamsAppDefinition_CreatedBy) MergeMicrosoftGraphTeamsAppDefinitionCreatedBy1(v MicrosoftGraphTeamsAppDefinitionCreatedBy1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

func (t MicrosoftGraphTeamsAppDefinition_CreatedBy) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *MicrosoftGraphTeamsAppDefinition_CreatedBy) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsMicrosoftGraphTeamsAppPublishingState returns the union data inside the MicrosoftGraphTeamsAppDefinition_PublishingState as a MicrosoftGraphTeamsAppPublishingState
func (t MicrosoftGraphTeamsAppDefinition_PublishingState) AsMicrosoftGraphTeamsAppPublishingState() (MicrosoftGraphTeamsAppPublishingState, error) {
	var body MicrosoftGraphTeamsAppPublishingState
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphTeamsAppPublishingState overwrites any union data inside the MicrosoftGraphTeamsAppDefinition_PublishingState as the provided MicrosoftGraphTeamsAppPublishingState
func (t *MicrosoftGraphTeamsAppDefinition_PublishingState) FromMicrosoftGraphTeamsAppPublishingState(v MicrosoftGraphTeamsAppPublishingState) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphTeamsAppPublishingState performs a merge with any union data inside the MicrosoftGraphTeamsAppDefinition_PublishingState, using the provided MicrosoftGraphTeamsAppPublishingState
func (t *MicrosoftGraphTeamsAppDefinition_PublishingState) MergeMicrosoftGraphTeamsAppPublishingState(v MicrosoftGraphTeamsAppPublishingState) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsMicrosoftGraphTeamsAppDefinitionPublishingState1 returns the union data inside the MicrosoftGraphTeamsAppDefinition_PublishingState as a MicrosoftGraphTeamsAppDefinitionPublishingState1
func (t MicrosoftGraphTeamsAppDefinition_PublishingState) AsMicrosoftGraphTeamsAppDefinitionPublishingState1() (MicrosoftGraphTeamsAppDefinitionPublishingState1, error) {
	var body MicrosoftGraphTeamsAppDefinitionPublishingState1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphTeamsAppDefinitionPublishingState1 overwrites any union data inside the MicrosoftGraphTeamsAppDefinition_PublishingState as the provided MicrosoftGraphTeamsAppDefinitionPublishingState1
func (t *MicrosoftGraphTeamsAppDefinition_PublishingState) FromMicrosoftGraphTeamsAppDefinitionPublishingState1(v MicrosoftGraphTeamsAppDefinitionPublishingState1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphTeamsAppDefinitionPublishingState1 performs a merge with any union data inside the MicrosoftGraphTeamsAppDefinition_PublishingState, using the provided MicrosoftGraphTeamsAppDefinitionPublishingState1
func (t *MicrosoftGraphTeamsAppDefinition_PublishingState) MergeMicrosoftGraphTeamsAppDefinitionPublishingState1(v MicrosoftGraphTeamsAppDefinitionPublishingState1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

func (t MicrosoftGraphTeamsAppDefinition_PublishingState) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *MicrosoftGraphTeamsAppDefinition_PublishingState) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsMicrosoftGraphTeamsAppPermissionSet returns the union data inside the MicrosoftGraphTeamsAppInstallation_ConsentedPermissionSet as a MicrosoftGraphTeamsAppPermissionSet
func (t MicrosoftGraphTeamsAppInstallation_ConsentedPermissionSet) AsMicrosoftGraphTeamsAppPermissionSet() (MicrosoftGraphTeamsAppPermissionSet, error) {
	var body MicrosoftGraphTeamsAppPermissionSet
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphTeamsAppPermissionSet overwrites any union data inside the MicrosoftGraphTeamsAppInstallation_ConsentedPermissionSet as the provided MicrosoftGraphTeamsAppPermissionSet
func (t *MicrosoftGraphTeamsAppInstallation_ConsentedPermissionSet) FromMicrosoftGraphTeamsAppPermissionSet(v MicrosoftGraphTeamsAppPermissionSet) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphTeamsAppPermissionSet performs a merge with any union data inside the MicrosoftGraphTeamsAppInstallation_ConsentedPermissionSet, using the provided MicrosoftGraphTeamsAppPermissionSet
func (t *MicrosoftGraphTeamsAppInstallation_ConsentedPermissionSet) MergeMicrosoftGraphTeamsAppPermissionSet(v MicrosoftGraphTeamsAppPermissionSet) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsMicrosoftGraphTeamsAppInstallationConsentedPermissionSet1 returns the union data inside the MicrosoftGraphTeamsAppInstallation_ConsentedPermissionSet as a MicrosoftGraphTeamsAppInstallationConsentedPermissionSet1
func (t MicrosoftGraphTeamsAppInstallation_ConsentedPermissionSet) AsMicrosoftGraphTeamsAppInstallationConsentedPermissionSet1() (MicrosoftGraphTeamsAppInstallationConsentedPermissionSet1, error) {
	var body MicrosoftGraphTeamsAppInstallationConsentedPermissionSet1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphTeamsAppInstallationConsentedPermissionSet1 overwrites any union data inside the MicrosoftGraphTeamsAppInstallation_ConsentedPermissionSet as the provided MicrosoftGraphTeamsAppInstallationConsentedPermissionSet1
func (t *MicrosoftGraphTeamsAppInstallation_ConsentedPermissionSet) FromMicrosoftGraphTeamsAppInstallationConsentedPermissionSet1(v MicrosoftGraphTeamsAppInstallationConsentedPermissionSet1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphTeamsAppInstallationConsentedPermissionSet1 performs a merge with any union data inside the MicrosoftGraphTeamsAppInstallation_ConsentedPermissionSet, using the provided MicrosoftGraphTeamsAppInstallationConsentedPermissionSet1
func (t *MicrosoftGraphTeamsAppInstallation_ConsentedPermissionSet) MergeMicrosoftGraphTeamsAppInstallationConsentedPermissionSet1(v MicrosoftGraphTeamsAppInstallationConsentedPermissionSet1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

func (t MicrosoftGraphTeamsAppInstallation_ConsentedPermissionSet) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *MicrosoftGraphTeamsAppInstallation_ConsentedPermissionSet) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsMicrosoftGraphTeamsApp returns the union data inside the MicrosoftGraphTeamsAppInstallation_TeamsApp as a MicrosoftGraphTeamsApp
func (t MicrosoftGraphTeamsAppInstallation_TeamsApp) AsMicrosoftGraphTeamsApp() (MicrosoftGraphTeamsApp, error) {
	var body MicrosoftGraphTeamsApp
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphTeamsApp overwrites any union data inside the MicrosoftGraphTeamsAppInstallation_TeamsApp as the provided MicrosoftGraphTeamsApp
func (t *MicrosoftGraphTeamsAppInstallation_TeamsApp) FromMicrosoftGraphTeamsApp(v MicrosoftGraphTeamsApp) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphTeamsApp performs a merge with any union data inside the MicrosoftGraphTeamsAppInstallation_TeamsApp, using the provided MicrosoftGraphTeamsApp
func (t *MicrosoftGraphTeamsAppInstallation_TeamsApp) MergeMicrosoftGraphTeamsApp(v MicrosoftGraphTeamsApp) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsMicrosoftGraphTeamsAppInstallationTeamsApp1 returns the union data inside the MicrosoftGraphTeamsAppInstallation_TeamsApp as a MicrosoftGraphTeamsAppInstallationTeamsApp1
func (t MicrosoftGraphTeamsAppInstallation_TeamsApp) AsMicrosoftGraphTeamsAppInstallationTeamsApp1() (MicrosoftGraphTeamsAppInstallationTeamsApp1, error) {
	var body MicrosoftGraphTeamsAppInstallationTeamsApp1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphTeamsAppInstallationTeamsApp1 overwrites any union data inside the MicrosoftGraphTeamsAppInstallation_TeamsApp as the provided MicrosoftGraphTeamsAppInstallationTeamsApp1
func (t *MicrosoftGraphTeamsAppInstallation_TeamsApp) FromMicrosoftGraphTeamsAppInstallationTeamsApp1(v MicrosoftGraphTeamsAppInstallationTeamsApp1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphTeamsAppInstallationTeamsApp1 performs a merge with any union data inside the MicrosoftGraphTeamsAppInstallation_TeamsApp, using the provided MicrosoftGraphTeamsAppInstallationTeamsApp1
func (t *MicrosoftGraphTeamsAppInstallation_TeamsApp) MergeMicrosoftGraphTeamsAppInstallationTeamsApp1(v MicrosoftGraphTeamsAppInstallationTeamsApp1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

func (t MicrosoftGraphTeamsAppInstallation_TeamsApp) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *MicrosoftGraphTeamsAppInstallation_TeamsApp) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsMicrosoftGraphTeamsAppDefinition returns the union data inside the MicrosoftGraphTeamsAppInstallation_TeamsAppDefinition as a MicrosoftGraphTeamsAppDefinition
func (t MicrosoftGraphTeamsAppInstallation_TeamsAppDefinition) AsMicrosoftGraphTeamsAppDefinition() (MicrosoftGraphTeamsAppDefinition, error) {
	var body MicrosoftGraphTeamsAppDefinition
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphTeamsAppDefinition overwrites any union data inside the MicrosoftGraphTeamsAppInstallation_TeamsAppDefinition as the provided MicrosoftGraphTeamsAppDefinition
func (t *MicrosoftGraphTeamsAppInstallation_TeamsAppDefinition) FromMicrosoftGraphTeamsAppDefinition(v MicrosoftGraphTeamsAppDefinition) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphTeamsAppDefinition performs a merge with any union data inside the MicrosoftGraphTeamsAppInstallation_TeamsAppDefinition, using the provided MicrosoftGraphTeamsAppDefinition
func (t *MicrosoftGraphTeamsAppInstallation_TeamsAppDefinition) MergeMicrosoftGraphTeamsAppDefinition(v MicrosoftGraphTeamsAppDefinition) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsMicrosoftGraphTeamsAppInstallationTeamsAppDefinition1 returns the union data inside the MicrosoftGraphTeamsAppInstallation_TeamsAppDefinition as a MicrosoftGraphTeamsAppInstallationTeamsAppDefinition1
func (t MicrosoftGraphTeamsAppInstallation_TeamsAppDefinition) AsMicrosoftGraphTeamsAppInstallationTeamsAppDefinition1() (MicrosoftGraphTeamsAppInstallationTeamsAppDefinition1, error) {
	var body MicrosoftGraphTeamsAppInstallationTeamsAppDefinition1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphTeamsAppInstallationTeamsAppDefinition1 overwrites any union data inside the MicrosoftGraphTeamsAppInstallation_TeamsAppDefinition as the provided MicrosoftGraphTeamsAppInstallationTeamsAppDefinition1
func (t *MicrosoftGraphTeamsAppInstallation_TeamsAppDefinition) FromMicrosoftGraphTeamsAppInstallationTeamsAppDefinition1(v MicrosoftGraphTeamsAppInstallationTeamsAppDefinition1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphTeamsAppInstallationTeamsAppDefinition1 performs a merge with any union data inside the MicrosoftGraphTeamsAppInstallation_TeamsAppDefinition, using the provided MicrosoftGraphTeamsAppInstallationTeamsAppDefinition1
func (t *MicrosoftGraphTeamsAppInstallation_TeamsAppDefinition) MergeMicrosoftGraphTeamsAppInstallationTeamsAppDefinition1(v MicrosoftGraphTeamsAppInstallationTeamsAppDefinition1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

func (t MicrosoftGraphTeamsAppInstallation_TeamsAppDefinition) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *MicrosoftGraphTeamsAppInstallation_TeamsAppDefinition) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsMicrosoftGraphTeamsAppResourceSpecificPermission returns the union data inside the MicrosoftGraphTeamsAppPermissionSet_ResourceSpecificPermissions_Item as a MicrosoftGraphTeamsAppResourceSpecificPermission
func (t MicrosoftGraphTeamsAppPermissionSet_ResourceSpecificPermissions_Item) AsMicrosoftGraphTeamsAppResourceSpecificPermission() (MicrosoftGraphTeamsAppResourceSpecificPermission, error) {
	var body MicrosoftGraphTeamsAppResourceSpecificPermission
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphTeamsAppResourceSpecificPermission overwrites any union data inside the MicrosoftGraphTeamsAppPermissionSet_ResourceSpecificPermissions_Item as the provided MicrosoftGraphTeamsAppResourceSpecificPermission
func (t *MicrosoftGraphTeamsAppPermissionSet_ResourceSpecificPermissions_Item) FromMicrosoftGraphTeamsAppResourceSpecificPermission(v MicrosoftGraphTeamsAppResourceSpecificPermission) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphTeamsAppResourceSpecificPermission performs a merge with any union data inside the MicrosoftGraphTeamsAppPermissionSet_ResourceSpecificPermissions_Item, using the provided MicrosoftGraphTeamsAppResourceSpecificPermission
func (t *MicrosoftGraphTeamsAppPermissionSet_ResourceSpecificPermissions_Item) MergeMicrosoftGraphTeamsAppResourceSpecificPermission(v MicrosoftGraphTeamsAppResourceSpecificPermission) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsMicrosoftGraphTeamsAppPermissionSetResourceSpecificPermissions1 returns the union data inside the MicrosoftGraphTeamsAppPermissionSet_ResourceSpecificPermissions_Item as a MicrosoftGraphTeamsAppPermissionSetResourceSpecificPermissions1
func (t MicrosoftGraphTeamsAppPermissionSet_ResourceSpecificPermissions_Item) AsMicrosoftGraphTeamsAppPermissionSetResourceSpecificPermissions1() (MicrosoftGraphTeamsAppPermissionSetResourceSpecificPermissions1, error) {
	var body MicrosoftGraphTeamsAppPermissionSetResourceSpecificPermissions1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphTeamsAppPermissionSetResourceSpecificPermissions1 overwrites any union data inside the MicrosoftGraphTeamsAppPermissionSet_ResourceSpecificPermissions_Item as the provided MicrosoftGraphTeamsAppPermissionSetResourceSpecificPermissions1
func (t *MicrosoftGraphTeamsAppPermissionSet_ResourceSpecificPermissions_Item) FromMicrosoftGraphTeamsAppPermissionSetResourceSpecificPermissions1(v MicrosoftGraphTeamsAppPermissionSetResourceSpecificPermissions1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphTeamsAppPermissionSetResourceSpecificPermissions1 performs a merge with any union data inside the MicrosoftGraphTeamsAppPermissionSet_ResourceSpecificPermissions_Item, using the provided MicrosoftGraphTeamsAppPermissionSetResourceSpecificPermissions1
func (t *MicrosoftGraphTeamsAppPermissionSet_ResourceSpecificPermissions_Item) MergeMicrosoftGraphTeamsAppPermissionSetResourceSpecificPermissions1(v MicrosoftGraphTeamsAppPermissionSetResourceSpecificPermissions1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

func (t MicrosoftGraphTeamsAppPermissionSet_ResourceSpecificPermissions_Item) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *MicrosoftGraphTeamsAppPermissionSet_ResourceSpecificPermissions_Item) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsMicrosoftGraphTeamsAppResourceSpecificPermissionType returns the union data inside the MicrosoftGraphTeamsAppResourceSpecificPermission_PermissionType as a MicrosoftGraphTeamsAppResourceSpecificPermissionType
func (t MicrosoftGraphTeamsAppResourceSpecificPermission_PermissionType) AsMicrosoftGraphTeamsAppResourceSpecificPermissionType() (MicrosoftGraphTeamsAppResourceSpecificPermissionType, error) {
	var body MicrosoftGraphTeamsAppResourceSpecificPermissionType
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphTeamsAppResourceSpecificPermissionType overwrites any union data inside the MicrosoftGraphTeamsAppResourceSpecificPermission_PermissionType as the provided MicrosoftGraphTeamsAppResourceSpecificPermissionType
func (t *MicrosoftGraphTeamsAppResourceSpecificPermission_PermissionType) FromMicrosoftGraphTeamsAppResourceSpecificPermissionType(v MicrosoftGraphTeamsAppResourceSpecificPermissionType) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphTeamsAppResourceSpecificPermissionType performs a merge with any union data inside the MicrosoftGraphTeamsAppResourceSpecificPermission_PermissionType, using the provided MicrosoftGraphTeamsAppResourceSpecificPermissionType
func (t *MicrosoftGraphTeamsAppResourceSpecificPermission_PermissionType) MergeMicrosoftGraphTeamsAppResourceSpecificPermissionType(v MicrosoftGraphTeamsAppResourceSpecificPermissionType) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsMicrosoftGraphTeamsAppResourceSpecificPermissionPermissionType1 returns the union data inside the MicrosoftGraphTeamsAppResourceSpecificPermission_PermissionType as a MicrosoftGraphTeamsAppResourceSpecificPermissionPermissionType1
func (t MicrosoftGraphTeamsAppResourceSpecificPermission_PermissionType) AsMicrosoftGraphTeamsAppResourceSpecificPermissionPermissionType1() (MicrosoftGraphTeamsAppResourceSpecificPermissionPermissionType1, error) {
	var body MicrosoftGraphTeamsAppResourceSpecificPermissionPermissionType1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphTeamsAppResourceSpecificPermissionPermissionType1 overwrites any union data inside the MicrosoftGraphTeamsAppResourceSpecificPermission_PermissionType as the provided MicrosoftGraphTeamsAppResourceSpecificPermissionPermissionType1
func (t *MicrosoftGraphTeamsAppResourceSpecificPermission_PermissionType) FromMicrosoftGraphTeamsAppResourceSpecificPermissionPermissionType1(v MicrosoftGraphTeamsAppResourceSpecificPermissionPermissionType1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphTeamsAppResourceSpecificPermissionPermissionType1 performs a merge with any union data inside the MicrosoftGraphTeamsAppResourceSpecificPermission_PermissionType, using the provided MicrosoftGraphTeamsAppResourceSpecificPermissionPermissionType1
func (t *MicrosoftGraphTeamsAppResourceSpecificPermission_PermissionType) MergeMicrosoftGraphTeamsAppResourceSpecificPermissionPermissionType1(v MicrosoftGraphTeamsAppResourceSpecificPermissionPermissionType1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

func (t MicrosoftGraphTeamsAppResourceSpecificPermission_PermissionType) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *MicrosoftGraphTeamsAppResourceSpecificPermission_PermissionType) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsMicrosoftGraphOperationError returns the union data inside the MicrosoftGraphTeamsAsyncOperation_Error as a MicrosoftGraphOperationError
func (t MicrosoftGraphTeamsAsyncOperation_Error) AsMicrosoftGraphOperationError() (MicrosoftGraphOperationError, error) {
	var body MicrosoftGraphOperationError
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphOperationError overwrites any union data inside the MicrosoftGraphTeamsAsyncOperation_Error as the provided MicrosoftGraphOperationError
func (t *MicrosoftGraphTeamsAsyncOperation_Error) FromMicrosoftGraphOperationError(v MicrosoftGraphOperationError) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphOperationError performs a merge with any union data inside the MicrosoftGraphTeamsAsyncOperation_Error, using the provided MicrosoftGraphOperationError
func (t *MicrosoftGraphTeamsAsyncOperation_Error) MergeMicrosoftGraphOperationError(v MicrosoftGraphOperationError) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsMicrosoftGraphTeamsAsyncOperationError1 returns the union data inside the MicrosoftGraphTeamsAsyncOperation_Error as a MicrosoftGraphTeamsAsyncOperationError1
func (t MicrosoftGraphTeamsAsyncOperation_Error) AsMicrosoftGraphTeamsAsyncOperationError1() (MicrosoftGraphTeamsAsyncOperationError1, error) {
	var body MicrosoftGraphTeamsAsyncOperationError1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphTeamsAsyncOperationError1 overwrites any union data inside the MicrosoftGraphTeamsAsyncOperation_Error as the provided MicrosoftGraphTeamsAsyncOperationError1
func (t *MicrosoftGraphTeamsAsyncOperation_Error) FromMicrosoftGraphTeamsAsyncOperationError1(v MicrosoftGraphTeamsAsyncOperationError1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphTeamsAsyncOperationError1 performs a merge with any union data inside the MicrosoftGraphTeamsAsyncOperation_Error, using the provided MicrosoftGraphTeamsAsyncOperationError1
func (t *MicrosoftGraphTeamsAsyncOperation_Error) MergeMicrosoftGraphTeamsAsyncOperationError1(v MicrosoftGraphTeamsAsyncOperationError1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

func (t MicrosoftGraphTeamsAsyncOperation_Error) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *MicrosoftGraphTeamsAsyncOperation_Error) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsMicrosoftGraphTeamsTabConfiguration returns the union data inside the MicrosoftGraphTeamsTab_Configuration as a MicrosoftGraphTeamsTabConfiguration
func (t MicrosoftGraphTeamsTab_Configuration) AsMicrosoftGraphTeamsTabConfiguration() (MicrosoftGraphTeamsTabConfiguration, error) {
	var body MicrosoftGraphTeamsTabConfiguration
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphTeamsTabConfiguration overwrites any union data inside the MicrosoftGraphTeamsTab_Configuration as the provided MicrosoftGraphTeamsTabConfiguration
func (t *MicrosoftGraphTeamsTab_Configuration) FromMicrosoftGraphTeamsTabConfiguration(v MicrosoftGraphTeamsTabConfiguration) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphTeamsTabConfiguration performs a merge with any union data inside the MicrosoftGraphTeamsTab_Configuration, using the provided MicrosoftGraphTeamsTabConfiguration
func (t *MicrosoftGraphTeamsTab_Configuration) MergeMicrosoftGraphTeamsTabConfiguration(v MicrosoftGraphTeamsTabConfiguration) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsMicrosoftGraphTeamsTabConfiguration1 returns the union data inside the MicrosoftGraphTeamsTab_Configuration as a MicrosoftGraphTeamsTabConfiguration1
func (t MicrosoftGraphTeamsTab_Configuration) AsMicrosoftGraphTeamsTabConfiguration1() (MicrosoftGraphTeamsTabConfiguration1, error) {
	var body MicrosoftGraphTeamsTabConfiguration1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphTeamsTabConfiguration1 overwrites any union data inside the MicrosoftGraphTeamsTab_Configuration as the provided MicrosoftGraphTeamsTabConfiguration1
func (t *MicrosoftGraphTeamsTab_Configuration) FromMicrosoftGraphTeamsTabConfiguration1(v MicrosoftGraphTeamsTabConfiguration1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphTeamsTabConfiguration1 performs a merge with any union data inside the MicrosoftGraphTeamsTab_Configuration, using the provided MicrosoftGraphTeamsTabConfiguration1
func (t *MicrosoftGraphTeamsTab_Configuration) MergeMicrosoftGraphTeamsTabConfiguration1(v MicrosoftGraphTeamsTabConfiguration1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

func (t MicrosoftGraphTeamsTab_Configuration) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *MicrosoftGraphTeamsTab_Configuration) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsMicrosoftGraphTeamsApp returns the union data inside the MicrosoftGraphTeamsTab_TeamsApp as a MicrosoftGraphTeamsApp
func (t MicrosoftGraphTeamsTab_TeamsApp) AsMicrosoftGraphTeamsApp() (MicrosoftGraphTeamsApp, error) {
	var body MicrosoftGraphTeamsApp
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphTeamsApp overwrites any union data inside the MicrosoftGraphTeamsTab_TeamsApp as the provided MicrosoftGraphTeamsApp
func (t *MicrosoftGraphTeamsTab_TeamsApp) FromMicrosoftGraphTeamsApp(v MicrosoftGraphTeamsApp) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphTeamsApp performs a merge with any union data inside the MicrosoftGraphTeamsTab_TeamsApp, using the provided MicrosoftGraphTeamsApp
func (t *MicrosoftGraphTeamsTab_TeamsApp) MergeMicrosoftGraphTeamsApp(v MicrosoftGraphTeamsApp) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsMicrosoftGraphTeamsTabTeamsApp1 returns the union data inside the MicrosoftGraphTeamsTab_TeamsApp as a MicrosoftGraphTeamsTabTeamsApp1
func (t MicrosoftGraphTeamsTab_TeamsApp) AsMicrosoftGraphTeamsTabTeamsApp1() (MicrosoftGraphTeamsTabTeamsApp1, error) {
	var body MicrosoftGraphTeamsTabTeamsApp1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphTeamsTabTeamsApp1 overwrites any union data inside the MicrosoftGraphTeamsTab_TeamsApp as the provided MicrosoftGraphTeamsTabTeamsApp1
func (t *MicrosoftGraphTeamsTab_TeamsApp) FromMicrosoftGraphTeamsTabTeamsApp1(v MicrosoftGraphTeamsTabTeamsApp1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphTeamsTabTeamsApp1 performs a merge with any union data inside the MicrosoftGraphTeamsTab_TeamsApp, using the provided MicrosoftGraphTeamsTabTeamsApp1
func (t *MicrosoftGraphTeamsTab_TeamsApp) MergeMicrosoftGraphTeamsTabTeamsApp1(v MicrosoftGraphTeamsTabTeamsApp1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

func (t MicrosoftGraphTeamsTab_TeamsApp) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *MicrosoftGraphTeamsTab_TeamsApp) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsMicrosoftGraphTeamworkConversationIdentityType returns the union data inside the MicrosoftGraphTeamworkConversationIdentity_ConversationIdentityType as a MicrosoftGraphTeamworkConversationIdentityType
func (t MicrosoftGraphTeamworkConversationIdentity_ConversationIdentityType) AsMicrosoftGraphTeamworkConversationIdentityType() (MicrosoftGraphTeamworkConversationIdentityType, error) {
	var body MicrosoftGraphTeamworkConversationIdentityType
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphTeamworkConversationIdentityType overwrites any union data inside the MicrosoftGraphTeamworkConversationIdentity_ConversationIdentityType as the provided MicrosoftGraphTeamworkConversationIdentityType
func (t *MicrosoftGraphTeamworkConversationIdentity_ConversationIdentityType) FromMicrosoftGraphTeamworkConversationIdentityType(v MicrosoftGraphTeamworkConversationIdentityType) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphTeamworkConversationIdentityType performs a merge with any union data inside the MicrosoftGraphTeamworkConversationIdentity_ConversationIdentityType, using the provided MicrosoftGraphTeamworkConversationIdentityType
func (t *MicrosoftGraphTeamworkConversationIdentity_ConversationIdentityType) MergeMicrosoftGraphTeamworkConversationIdentityType(v MicrosoftGraphTeamworkConversationIdentityType) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsMicrosoftGraphTeamworkConversationIdentityConversationIdentityType1 returns the union data inside the MicrosoftGraphTeamworkConversationIdentity_ConversationIdentityType as a MicrosoftGraphTeamworkConversationIdentityConversationIdentityType1
func (t MicrosoftGraphTeamworkConversationIdentity_ConversationIdentityType) AsMicrosoftGraphTeamworkConversationIdentityConversationIdentityType1() (MicrosoftGraphTeamworkConversationIdentityConversationIdentityType1, error) {
	var body MicrosoftGraphTeamworkConversationIdentityConversationIdentityType1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphTeamworkConversationIdentityConversationIdentityType1 overwrites any union data inside the MicrosoftGraphTeamworkConversationIdentity_ConversationIdentityType as the provided MicrosoftGraphTeamworkConversationIdentityConversationIdentityType1
func (t *MicrosoftGraphTeamworkConversationIdentity_ConversationIdentityType) FromMicrosoftGraphTeamworkConversationIdentityConversationIdentityType1(v MicrosoftGraphTeamworkConversationIdentityConversationIdentityType1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphTeamworkConversationIdentityConversationIdentityType1 performs a merge with any union data inside the MicrosoftGraphTeamworkConversationIdentity_ConversationIdentityType, using the provided MicrosoftGraphTeamworkConversationIdentityConversationIdentityType1
func (t *MicrosoftGraphTeamworkConversationIdentity_ConversationIdentityType) MergeMicrosoftGraphTeamworkConversationIdentityConversationIdentityType1(v MicrosoftGraphTeamworkConversationIdentityConversationIdentityType1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

func (t MicrosoftGraphTeamworkConversationIdentity_ConversationIdentityType) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *MicrosoftGraphTeamworkConversationIdentity_ConversationIdentityType) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsMicrosoftGraphTeamworkUserIdentity returns the union data inside the MicrosoftGraphTeamworkOnlineMeetingInfo_Organizer as a MicrosoftGraphTeamworkUserIdentity
func (t MicrosoftGraphTeamworkOnlineMeetingInfo_Organizer) AsMicrosoftGraphTeamworkUserIdentity() (MicrosoftGraphTeamworkUserIdentity, error) {
	var body MicrosoftGraphTeamworkUserIdentity
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphTeamworkUserIdentity overwrites any union data inside the MicrosoftGraphTeamworkOnlineMeetingInfo_Organizer as the provided MicrosoftGraphTeamworkUserIdentity
func (t *MicrosoftGraphTeamworkOnlineMeetingInfo_Organizer) FromMicrosoftGraphTeamworkUserIdentity(v MicrosoftGraphTeamworkUserIdentity) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphTeamworkUserIdentity performs a merge with any union data inside the MicrosoftGraphTeamworkOnlineMeetingInfo_Organizer, using the provided MicrosoftGraphTeamworkUserIdentity
func (t *MicrosoftGraphTeamworkOnlineMeetingInfo_Organizer) MergeMicrosoftGraphTeamworkUserIdentity(v MicrosoftGraphTeamworkUserIdentity) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsMicrosoftGraphTeamworkOnlineMeetingInfoOrganizer1 returns the union data inside the MicrosoftGraphTeamworkOnlineMeetingInfo_Organizer as a MicrosoftGraphTeamworkOnlineMeetingInfoOrganizer1
func (t MicrosoftGraphTeamworkOnlineMeetingInfo_Organizer) AsMicrosoftGraphTeamworkOnlineMeetingInfoOrganizer1() (MicrosoftGraphTeamworkOnlineMeetingInfoOrganizer1, error) {
	var body MicrosoftGraphTeamworkOnlineMeetingInfoOrganizer1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphTeamworkOnlineMeetingInfoOrganizer1 overwrites any union data inside the MicrosoftGraphTeamworkOnlineMeetingInfo_Organizer as the provided MicrosoftGraphTeamworkOnlineMeetingInfoOrganizer1
func (t *MicrosoftGraphTeamworkOnlineMeetingInfo_Organizer) FromMicrosoftGraphTeamworkOnlineMeetingInfoOrganizer1(v MicrosoftGraphTeamworkOnlineMeetingInfoOrganizer1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphTeamworkOnlineMeetingInfoOrganizer1 performs a merge with any union data inside the MicrosoftGraphTeamworkOnlineMeetingInfo_Organizer, using the provided MicrosoftGraphTeamworkOnlineMeetingInfoOrganizer1
func (t *MicrosoftGraphTeamworkOnlineMeetingInfo_Organizer) MergeMicrosoftGraphTeamworkOnlineMeetingInfoOrganizer1(v MicrosoftGraphTeamworkOnlineMeetingInfoOrganizer1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

func (t MicrosoftGraphTeamworkOnlineMeetingInfo_Organizer) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *MicrosoftGraphTeamworkOnlineMeetingInfo_Organizer) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsMicrosoftGraphTeamworkTagType returns the union data inside the MicrosoftGraphTeamworkTag_TagType as a MicrosoftGraphTeamworkTagType
func (t MicrosoftGraphTeamworkTag_TagType) AsMicrosoftGraphTeamworkTagType() (MicrosoftGraphTeamworkTagType, error) {
	var body MicrosoftGraphTeamworkTagType
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphTeamworkTagType overwrites any union data inside the MicrosoftGraphTeamworkTag_TagType as the provided MicrosoftGraphTeamworkTagType
func (t *MicrosoftGraphTeamworkTag_TagType) FromMicrosoftGraphTeamworkTagType(v MicrosoftGraphTeamworkTagType) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphTeamworkTagType performs a merge with any union data inside the MicrosoftGraphTeamworkTag_TagType, using the provided MicrosoftGraphTeamworkTagType
func (t *MicrosoftGraphTeamworkTag_TagType) MergeMicrosoftGraphTeamworkTagType(v MicrosoftGraphTeamworkTagType) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsMicrosoftGraphTeamworkTagTagType1 returns the union data inside the MicrosoftGraphTeamworkTag_TagType as a MicrosoftGraphTeamworkTagTagType1
func (t MicrosoftGraphTeamworkTag_TagType) AsMicrosoftGraphTeamworkTagTagType1() (MicrosoftGraphTeamworkTagTagType1, error) {
	var body MicrosoftGraphTeamworkTagTagType1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphTeamworkTagTagType1 overwrites any union data inside the MicrosoftGraphTeamworkTag_TagType as the provided MicrosoftGraphTeamworkTagTagType1
func (t *MicrosoftGraphTeamworkTag_TagType) FromMicrosoftGraphTeamworkTagTagType1(v MicrosoftGraphTeamworkTagTagType1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphTeamworkTagTagType1 performs a merge with any union data inside the MicrosoftGraphTeamworkTag_TagType, using the provided MicrosoftGraphTeamworkTagTagType1
func (t *MicrosoftGraphTeamworkTag_TagType) MergeMicrosoftGraphTeamworkTagTagType1(v MicrosoftGraphTeamworkTagTagType1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

func (t MicrosoftGraphTeamworkTag_TagType) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *MicrosoftGraphTeamworkTag_TagType) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsMicrosoftGraphTeamworkUserIdentityType returns the union data inside the MicrosoftGraphTeamworkUserIdentity_UserIdentityType as a MicrosoftGraphTeamworkUserIdentityType
func (t MicrosoftGraphTeamworkUserIdentity_UserIdentityType) AsMicrosoftGraphTeamworkUserIdentityType() (MicrosoftGraphTeamworkUserIdentityType, error) {
	var body MicrosoftGraphTeamworkUserIdentityType
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphTeamworkUserIdentityType overwrites any union data inside the MicrosoftGraphTeamworkUserIdentity_UserIdentityType as the provided MicrosoftGraphTeamworkUserIdentityType
func (t *MicrosoftGraphTeamworkUserIdentity_UserIdentityType) FromMicrosoftGraphTeamworkUserIdentityType(v MicrosoftGraphTeamworkUserIdentityType) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphTeamworkUserIdentityType performs a merge with any union data inside the MicrosoftGraphTeamworkUserIdentity_UserIdentityType, using the provided MicrosoftGraphTeamworkUserIdentityType
func (t *MicrosoftGraphTeamworkUserIdentity_UserIdentityType) MergeMicrosoftGraphTeamworkUserIdentityType(v MicrosoftGraphTeamworkUserIdentityType) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsMicrosoftGraphTeamworkUserIdentityUserIdentityType1 returns the union data inside the MicrosoftGraphTeamworkUserIdentity_UserIdentityType as a MicrosoftGraphTeamworkUserIdentityUserIdentityType1
func (t MicrosoftGraphTeamworkUserIdentity_UserIdentityType) AsMicrosoftGraphTeamworkUserIdentityUserIdentityType1() (MicrosoftGraphTeamworkUserIdentityUserIdentityType1, error) {
	var body MicrosoftGraphTeamworkUserIdentityUserIdentityType1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphTeamworkUserIdentityUserIdentityType1 overwrites any union data inside the MicrosoftGraphTeamworkUserIdentity_UserIdentityType as the provided MicrosoftGraphTeamworkUserIdentityUserIdentityType1
func (t *MicrosoftGraphTeamworkUserIdentity_UserIdentityType) FromMicrosoftGraphTeamworkUserIdentityUserIdentityType1(v MicrosoftGraphTeamworkUserIdentityUserIdentityType1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphTeamworkUserIdentityUserIdentityType1 performs a merge with any union data inside the MicrosoftGraphTeamworkUserIdentity_UserIdentityType, using the provided MicrosoftGraphTeamworkUserIdentityUserIdentityType1
func (t *MicrosoftGraphTeamworkUserIdentity_UserIdentityType) MergeMicrosoftGraphTeamworkUserIdentityUserIdentityType1(v MicrosoftGraphTeamworkUserIdentityUserIdentityType1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

func (t MicrosoftGraphTeamworkUserIdentity_UserIdentityType) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *MicrosoftGraphTeamworkUserIdentity_UserIdentityType) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsMicrosoftGraphTermStoreTerm returns the union data inside the MicrosoftGraphTermColumn_ParentTerm as a MicrosoftGraphTermStoreTerm
func (t MicrosoftGraphTermColumn_ParentTerm) AsMicrosoftGraphTermStoreTerm() (MicrosoftGraphTermStoreTerm, error) {
	var body MicrosoftGraphTermStoreTerm
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphTermStoreTerm overwrites any union data inside the MicrosoftGraphTermColumn_ParentTerm as the provided MicrosoftGraphTermStoreTerm
func (t *MicrosoftGraphTermColumn_ParentTerm) FromMicrosoftGraphTermStoreTerm(v MicrosoftGraphTermStoreTerm) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphTermStoreTerm performs a merge with any union data inside the MicrosoftGraphTermColumn_ParentTerm, using the provided MicrosoftGraphTermStoreTerm
func (t *MicrosoftGraphTermColumn_ParentTerm) MergeMicrosoftGraphTermStoreTerm(v MicrosoftGraphTermStoreTerm) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsMicrosoftGraphTermColumnParentTerm1 returns the union data inside the MicrosoftGraphTermColumn_ParentTerm as a MicrosoftGraphTermColumnParentTerm1
func (t MicrosoftGraphTermColumn_ParentTerm) AsMicrosoftGraphTermColumnParentTerm1() (MicrosoftGraphTermColumnParentTerm1, error) {
	var body MicrosoftGraphTermColumnParentTerm1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphTermColumnParentTerm1 overwrites any union data inside the MicrosoftGraphTermColumn_ParentTerm as the provided MicrosoftGraphTermColumnParentTerm1
func (t *MicrosoftGraphTermColumn_ParentTerm) FromMicrosoftGraphTermColumnParentTerm1(v MicrosoftGraphTermColumnParentTerm1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphTermColumnParentTerm1 performs a merge with any union data inside the MicrosoftGraphTermColumn_ParentTerm, using the provided MicrosoftGraphTermColumnParentTerm1
func (t *MicrosoftGraphTermColumn_ParentTerm) MergeMicrosoftGraphTermColumnParentTerm1(v MicrosoftGraphTermColumnParentTerm1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

func (t MicrosoftGraphTermColumn_ParentTerm) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *MicrosoftGraphTermColumn_ParentTerm) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsMicrosoftGraphTermStoreSet returns the union data inside the MicrosoftGraphTermColumn_TermSet as a MicrosoftGraphTermStoreSet
func (t MicrosoftGraphTermColumn_TermSet) AsMicrosoftGraphTermStoreSet() (MicrosoftGraphTermStoreSet, error) {
	var body MicrosoftGraphTermStoreSet
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphTermStoreSet overwrites any union data inside the MicrosoftGraphTermColumn_TermSet as the provided MicrosoftGraphTermStoreSet
func (t *MicrosoftGraphTermColumn_TermSet) FromMicrosoftGraphTermStoreSet(v MicrosoftGraphTermStoreSet) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphTermStoreSet performs a merge with any union data inside the MicrosoftGraphTermColumn_TermSet, using the provided MicrosoftGraphTermStoreSet
func (t *MicrosoftGraphTermColumn_TermSet) MergeMicrosoftGraphTermStoreSet(v MicrosoftGraphTermStoreSet) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsMicrosoftGraphTermColumnTermSet1 returns the union data inside the MicrosoftGraphTermColumn_TermSet as a MicrosoftGraphTermColumnTermSet1
func (t MicrosoftGraphTermColumn_TermSet) AsMicrosoftGraphTermColumnTermSet1() (MicrosoftGraphTermColumnTermSet1, error) {
	var body MicrosoftGraphTermColumnTermSet1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphTermColumnTermSet1 overwrites any union data inside the MicrosoftGraphTermColumn_TermSet as the provided MicrosoftGraphTermColumnTermSet1
func (t *MicrosoftGraphTermColumn_TermSet) FromMicrosoftGraphTermColumnTermSet1(v MicrosoftGraphTermColumnTermSet1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphTermColumnTermSet1 performs a merge with any union data inside the MicrosoftGraphTermColumn_TermSet, using the provided MicrosoftGraphTermColumnTermSet1
func (t *MicrosoftGraphTermColumn_TermSet) MergeMicrosoftGraphTermColumnTermSet1(v MicrosoftGraphTermColumnTermSet1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

func (t MicrosoftGraphTermColumn_TermSet) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *MicrosoftGraphTermColumn_TermSet) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsMicrosoftGraphTermStoreTermGroupScope returns the union data inside the MicrosoftGraphTermStoreGroup_Scope as a MicrosoftGraphTermStoreTermGroupScope
func (t MicrosoftGraphTermStoreGroup_Scope) AsMicrosoftGraphTermStoreTermGroupScope() (MicrosoftGraphTermStoreTermGroupScope, error) {
	var body MicrosoftGraphTermStoreTermGroupScope
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphTermStoreTermGroupScope overwrites any union data inside the MicrosoftGraphTermStoreGroup_Scope as the provided MicrosoftGraphTermStoreTermGroupScope
func (t *MicrosoftGraphTermStoreGroup_Scope) FromMicrosoftGraphTermStoreTermGroupScope(v MicrosoftGraphTermStoreTermGroupScope) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphTermStoreTermGroupScope performs a merge with any union data inside the MicrosoftGraphTermStoreGroup_Scope, using the provided MicrosoftGraphTermStoreTermGroupScope
func (t *MicrosoftGraphTermStoreGroup_Scope) MergeMicrosoftGraphTermStoreTermGroupScope(v MicrosoftGraphTermStoreTermGroupScope) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsMicrosoftGraphTermStoreGroupScope1 returns the union data inside the MicrosoftGraphTermStoreGroup_Scope as a MicrosoftGraphTermStoreGroupScope1
func (t MicrosoftGraphTermStoreGroup_Scope) AsMicrosoftGraphTermStoreGroupScope1() (MicrosoftGraphTermStoreGroupScope1, error) {
	var body MicrosoftGraphTermStoreGroupScope1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphTermStoreGroupScope1 overwrites any union data inside the MicrosoftGraphTermStoreGroup_Scope as the provided MicrosoftGraphTermStoreGroupScope1
func (t *MicrosoftGraphTermStoreGroup_Scope) FromMicrosoftGraphTermStoreGroupScope1(v MicrosoftGraphTermStoreGroupScope1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphTermStoreGroupScope1 performs a merge with any union data inside the MicrosoftGraphTermStoreGroup_Scope, using the provided MicrosoftGraphTermStoreGroupScope1
func (t *MicrosoftGraphTermStoreGroup_Scope) MergeMicrosoftGraphTermStoreGroupScope1(v MicrosoftGraphTermStoreGroupScope1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

func (t MicrosoftGraphTermStoreGroup_Scope) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *MicrosoftGraphTermStoreGroup_Scope) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsMicrosoftGraphTermStoreTerm returns the union data inside the MicrosoftGraphTermStoreRelation_FromTerm as a MicrosoftGraphTermStoreTerm
func (t MicrosoftGraphTermStoreRelation_FromTerm) AsMicrosoftGraphTermStoreTerm() (MicrosoftGraphTermStoreTerm, error) {
	var body MicrosoftGraphTermStoreTerm
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphTermStoreTerm overwrites any union data inside the MicrosoftGraphTermStoreRelation_FromTerm as the provided MicrosoftGraphTermStoreTerm
func (t *MicrosoftGraphTermStoreRelation_FromTerm) FromMicrosoftGraphTermStoreTerm(v MicrosoftGraphTermStoreTerm) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphTermStoreTerm performs a merge with any union data inside the MicrosoftGraphTermStoreRelation_FromTerm, using the provided MicrosoftGraphTermStoreTerm
func (t *MicrosoftGraphTermStoreRelation_FromTerm) MergeMicrosoftGraphTermStoreTerm(v MicrosoftGraphTermStoreTerm) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsMicrosoftGraphTermStoreRelationFromTerm1 returns the union data inside the MicrosoftGraphTermStoreRelation_FromTerm as a MicrosoftGraphTermStoreRelationFromTerm1
func (t MicrosoftGraphTermStoreRelation_FromTerm) AsMicrosoftGraphTermStoreRelationFromTerm1() (MicrosoftGraphTermStoreRelationFromTerm1, error) {
	var body MicrosoftGraphTermStoreRelationFromTerm1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphTermStoreRelationFromTerm1 overwrites any union data inside the MicrosoftGraphTermStoreRelation_FromTerm as the provided MicrosoftGraphTermStoreRelationFromTerm1
func (t *MicrosoftGraphTermStoreRelation_FromTerm) FromMicrosoftGraphTermStoreRelationFromTerm1(v MicrosoftGraphTermStoreRelationFromTerm1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphTermStoreRelationFromTerm1 performs a merge with any union data inside the MicrosoftGraphTermStoreRelation_FromTerm, using the provided MicrosoftGraphTermStoreRelationFromTerm1
func (t *MicrosoftGraphTermStoreRelation_FromTerm) MergeMicrosoftGraphTermStoreRelationFromTerm1(v MicrosoftGraphTermStoreRelationFromTerm1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

func (t MicrosoftGraphTermStoreRelation_FromTerm) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *MicrosoftGraphTermStoreRelation_FromTerm) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsMicrosoftGraphTermStoreRelationType returns the union data inside the MicrosoftGraphTermStoreRelation_Relationship as a MicrosoftGraphTermStoreRelationType
func (t MicrosoftGraphTermStoreRelation_Relationship) AsMicrosoftGraphTermStoreRelationType() (MicrosoftGraphTermStoreRelationType, error) {
	var body MicrosoftGraphTermStoreRelationType
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphTermStoreRelationType overwrites any union data inside the MicrosoftGraphTermStoreRelation_Relationship as the provided MicrosoftGraphTermStoreRelationType
func (t *MicrosoftGraphTermStoreRelation_Relationship) FromMicrosoftGraphTermStoreRelationType(v MicrosoftGraphTermStoreRelationType) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphTermStoreRelationType performs a merge with any union data inside the MicrosoftGraphTermStoreRelation_Relationship, using the provided MicrosoftGraphTermStoreRelationType
func (t *MicrosoftGraphTermStoreRelation_Relationship) MergeMicrosoftGraphTermStoreRelationType(v MicrosoftGraphTermStoreRelationType) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsMicrosoftGraphTermStoreRelationRelationship1 returns the union data inside the MicrosoftGraphTermStoreRelation_Relationship as a MicrosoftGraphTermStoreRelationRelationship1
func (t MicrosoftGraphTermStoreRelation_Relationship) AsMicrosoftGraphTermStoreRelationRelationship1() (MicrosoftGraphTermStoreRelationRelationship1, error) {
	var body MicrosoftGraphTermStoreRelationRelationship1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphTermStoreRelationRelationship1 overwrites any union data inside the MicrosoftGraphTermStoreRelation_Relationship as the provided MicrosoftGraphTermStoreRelationRelationship1
func (t *MicrosoftGraphTermStoreRelation_Relationship) FromMicrosoftGraphTermStoreRelationRelationship1(v MicrosoftGraphTermStoreRelationRelationship1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphTermStoreRelationRelationship1 performs a merge with any union data inside the MicrosoftGraphTermStoreRelation_Relationship, using the provided MicrosoftGraphTermStoreRelationRelationship1
func (t *MicrosoftGraphTermStoreRelation_Relationship) MergeMicrosoftGraphTermStoreRelationRelationship1(v MicrosoftGraphTermStoreRelationRelationship1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

func (t MicrosoftGraphTermStoreRelation_Relationship) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *MicrosoftGraphTermStoreRelation_Relationship) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsMicrosoftGraphTermStoreSet returns the union data inside the MicrosoftGraphTermStoreRelation_Set as a MicrosoftGraphTermStoreSet
func (t MicrosoftGraphTermStoreRelation_Set) AsMicrosoftGraphTermStoreSet() (MicrosoftGraphTermStoreSet, error) {
	var body MicrosoftGraphTermStoreSet
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphTermStoreSet overwrites any union data inside the MicrosoftGraphTermStoreRelation_Set as the provided MicrosoftGraphTermStoreSet
func (t *MicrosoftGraphTermStoreRelation_Set) FromMicrosoftGraphTermStoreSet(v MicrosoftGraphTermStoreSet) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphTermStoreSet performs a merge with any union data inside the MicrosoftGraphTermStoreRelation_Set, using the provided MicrosoftGraphTermStoreSet
func (t *MicrosoftGraphTermStoreRelation_Set) MergeMicrosoftGraphTermStoreSet(v MicrosoftGraphTermStoreSet) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsMicrosoftGraphTermStoreRelationSet1 returns the union data inside the MicrosoftGraphTermStoreRelation_Set as a MicrosoftGraphTermStoreRelationSet1
func (t MicrosoftGraphTermStoreRelation_Set) AsMicrosoftGraphTermStoreRelationSet1() (MicrosoftGraphTermStoreRelationSet1, error) {
	var body MicrosoftGraphTermStoreRelationSet1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphTermStoreRelationSet1 overwrites any union data inside the MicrosoftGraphTermStoreRelation_Set as the provided MicrosoftGraphTermStoreRelationSet1
func (t *MicrosoftGraphTermStoreRelation_Set) FromMicrosoftGraphTermStoreRelationSet1(v MicrosoftGraphTermStoreRelationSet1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphTermStoreRelationSet1 performs a merge with any union data inside the MicrosoftGraphTermStoreRelation_Set, using the provided MicrosoftGraphTermStoreRelationSet1
func (t *MicrosoftGraphTermStoreRelation_Set) MergeMicrosoftGraphTermStoreRelationSet1(v MicrosoftGraphTermStoreRelationSet1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

func (t MicrosoftGraphTermStoreRelation_Set) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *MicrosoftGraphTermStoreRelation_Set) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsMicrosoftGraphTermStoreTerm returns the union data inside the MicrosoftGraphTermStoreRelation_ToTerm as a MicrosoftGraphTermStoreTerm
func (t MicrosoftGraphTermStoreRelation_ToTerm) AsMicrosoftGraphTermStoreTerm() (MicrosoftGraphTermStoreTerm, error) {
	var body MicrosoftGraphTermStoreTerm
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphTermStoreTerm overwrites any union data inside the MicrosoftGraphTermStoreRelation_ToTerm as the provided MicrosoftGraphTermStoreTerm
func (t *MicrosoftGraphTermStoreRelation_ToTerm) FromMicrosoftGraphTermStoreTerm(v MicrosoftGraphTermStoreTerm) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphTermStoreTerm performs a merge with any union data inside the MicrosoftGraphTermStoreRelation_ToTerm, using the provided MicrosoftGraphTermStoreTerm
func (t *MicrosoftGraphTermStoreRelation_ToTerm) MergeMicrosoftGraphTermStoreTerm(v MicrosoftGraphTermStoreTerm) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsMicrosoftGraphTermStoreRelationToTerm1 returns the union data inside the MicrosoftGraphTermStoreRelation_ToTerm as a MicrosoftGraphTermStoreRelationToTerm1
func (t MicrosoftGraphTermStoreRelation_ToTerm) AsMicrosoftGraphTermStoreRelationToTerm1() (MicrosoftGraphTermStoreRelationToTerm1, error) {
	var body MicrosoftGraphTermStoreRelationToTerm1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphTermStoreRelationToTerm1 overwrites any union data inside the MicrosoftGraphTermStoreRelation_ToTerm as the provided MicrosoftGraphTermStoreRelationToTerm1
func (t *MicrosoftGraphTermStoreRelation_ToTerm) FromMicrosoftGraphTermStoreRelationToTerm1(v MicrosoftGraphTermStoreRelationToTerm1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphTermStoreRelationToTerm1 performs a merge with any union data inside the MicrosoftGraphTermStoreRelation_ToTerm, using the provided MicrosoftGraphTermStoreRelationToTerm1
func (t *MicrosoftGraphTermStoreRelation_ToTerm) MergeMicrosoftGraphTermStoreRelationToTerm1(v MicrosoftGraphTermStoreRelationToTerm1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

func (t MicrosoftGraphTermStoreRelation_ToTerm) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *MicrosoftGraphTermStoreRelation_ToTerm) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsMicrosoftGraphTermStoreLocalizedName returns the union data inside the MicrosoftGraphTermStoreSet_LocalizedNames_Item as a MicrosoftGraphTermStoreLocalizedName
func (t MicrosoftGraphTermStoreSet_LocalizedNames_Item) AsMicrosoftGraphTermStoreLocalizedName() (MicrosoftGraphTermStoreLocalizedName, error) {
	var body MicrosoftGraphTermStoreLocalizedName
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphTermStoreLocalizedName overwrites any union data inside the MicrosoftGraphTermStoreSet_LocalizedNames_Item as the provided MicrosoftGraphTermStoreLocalizedName
func (t *MicrosoftGraphTermStoreSet_LocalizedNames_Item) FromMicrosoftGraphTermStoreLocalizedName(v MicrosoftGraphTermStoreLocalizedName) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphTermStoreLocalizedName performs a merge with any union data inside the MicrosoftGraphTermStoreSet_LocalizedNames_Item, using the provided MicrosoftGraphTermStoreLocalizedName
func (t *MicrosoftGraphTermStoreSet_LocalizedNames_Item) MergeMicrosoftGraphTermStoreLocalizedName(v MicrosoftGraphTermStoreLocalizedName) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsMicrosoftGraphTermStoreSetLocalizedNames1 returns the union data inside the MicrosoftGraphTermStoreSet_LocalizedNames_Item as a MicrosoftGraphTermStoreSetLocalizedNames1
func (t MicrosoftGraphTermStoreSet_LocalizedNames_Item) AsMicrosoftGraphTermStoreSetLocalizedNames1() (MicrosoftGraphTermStoreSetLocalizedNames1, error) {
	var body MicrosoftGraphTermStoreSetLocalizedNames1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphTermStoreSetLocalizedNames1 overwrites any union data inside the MicrosoftGraphTermStoreSet_LocalizedNames_Item as the provided MicrosoftGraphTermStoreSetLocalizedNames1
func (t *MicrosoftGraphTermStoreSet_LocalizedNames_Item) FromMicrosoftGraphTermStoreSetLocalizedNames1(v MicrosoftGraphTermStoreSetLocalizedNames1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphTermStoreSetLocalizedNames1 performs a merge with any union data inside the MicrosoftGraphTermStoreSet_LocalizedNames_Item, using the provided MicrosoftGraphTermStoreSetLocalizedNames1
func (t *MicrosoftGraphTermStoreSet_LocalizedNames_Item) MergeMicrosoftGraphTermStoreSetLocalizedNames1(v MicrosoftGraphTermStoreSetLocalizedNames1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

func (t MicrosoftGraphTermStoreSet_LocalizedNames_Item) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *MicrosoftGraphTermStoreSet_LocalizedNames_Item) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsMicrosoftGraphKeyValue returns the union data inside the MicrosoftGraphTermStoreSet_Properties_Item as a MicrosoftGraphKeyValue
func (t MicrosoftGraphTermStoreSet_Properties_Item) AsMicrosoftGraphKeyValue() (MicrosoftGraphKeyValue, error) {
	var body MicrosoftGraphKeyValue
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphKeyValue overwrites any union data inside the MicrosoftGraphTermStoreSet_Properties_Item as the provided MicrosoftGraphKeyValue
func (t *MicrosoftGraphTermStoreSet_Properties_Item) FromMicrosoftGraphKeyValue(v MicrosoftGraphKeyValue) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphKeyValue performs a merge with any union data inside the MicrosoftGraphTermStoreSet_Properties_Item, using the provided MicrosoftGraphKeyValue
func (t *MicrosoftGraphTermStoreSet_Properties_Item) MergeMicrosoftGraphKeyValue(v MicrosoftGraphKeyValue) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsMicrosoftGraphTermStoreSetProperties1 returns the union data inside the MicrosoftGraphTermStoreSet_Properties_Item as a MicrosoftGraphTermStoreSetProperties1
func (t MicrosoftGraphTermStoreSet_Properties_Item) AsMicrosoftGraphTermStoreSetProperties1() (MicrosoftGraphTermStoreSetProperties1, error) {
	var body MicrosoftGraphTermStoreSetProperties1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphTermStoreSetProperties1 overwrites any union data inside the MicrosoftGraphTermStoreSet_Properties_Item as the provided MicrosoftGraphTermStoreSetProperties1
func (t *MicrosoftGraphTermStoreSet_Properties_Item) FromMicrosoftGraphTermStoreSetProperties1(v MicrosoftGraphTermStoreSetProperties1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphTermStoreSetProperties1 performs a merge with any union data inside the MicrosoftGraphTermStoreSet_Properties_Item, using the provided MicrosoftGraphTermStoreSetProperties1
func (t *MicrosoftGraphTermStoreSet_Properties_Item) MergeMicrosoftGraphTermStoreSetProperties1(v MicrosoftGraphTermStoreSetProperties1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

func (t MicrosoftGraphTermStoreSet_Properties_Item) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *MicrosoftGraphTermStoreSet_Properties_Item) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsMicrosoftGraphTermStoreLocalizedDescription returns the union data inside the MicrosoftGraphTermStoreTerm_Descriptions_Item as a MicrosoftGraphTermStoreLocalizedDescription
func (t MicrosoftGraphTermStoreTerm_Descriptions_Item) AsMicrosoftGraphTermStoreLocalizedDescription() (MicrosoftGraphTermStoreLocalizedDescription, error) {
	var body MicrosoftGraphTermStoreLocalizedDescription
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphTermStoreLocalizedDescription overwrites any union data inside the MicrosoftGraphTermStoreTerm_Descriptions_Item as the provided MicrosoftGraphTermStoreLocalizedDescription
func (t *MicrosoftGraphTermStoreTerm_Descriptions_Item) FromMicrosoftGraphTermStoreLocalizedDescription(v MicrosoftGraphTermStoreLocalizedDescription) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphTermStoreLocalizedDescription performs a merge with any union data inside the MicrosoftGraphTermStoreTerm_Descriptions_Item, using the provided MicrosoftGraphTermStoreLocalizedDescription
func (t *MicrosoftGraphTermStoreTerm_Descriptions_Item) MergeMicrosoftGraphTermStoreLocalizedDescription(v MicrosoftGraphTermStoreLocalizedDescription) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsMicrosoftGraphTermStoreTermDescriptions1 returns the union data inside the MicrosoftGraphTermStoreTerm_Descriptions_Item as a MicrosoftGraphTermStoreTermDescriptions1
func (t MicrosoftGraphTermStoreTerm_Descriptions_Item) AsMicrosoftGraphTermStoreTermDescriptions1() (MicrosoftGraphTermStoreTermDescriptions1, error) {
	var body MicrosoftGraphTermStoreTermDescriptions1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphTermStoreTermDescriptions1 overwrites any union data inside the MicrosoftGraphTermStoreTerm_Descriptions_Item as the provided MicrosoftGraphTermStoreTermDescriptions1
func (t *MicrosoftGraphTermStoreTerm_Descriptions_Item) FromMicrosoftGraphTermStoreTermDescriptions1(v MicrosoftGraphTermStoreTermDescriptions1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphTermStoreTermDescriptions1 performs a merge with any union data inside the MicrosoftGraphTermStoreTerm_Descriptions_Item, using the provided MicrosoftGraphTermStoreTermDescriptions1
func (t *MicrosoftGraphTermStoreTerm_Descriptions_Item) MergeMicrosoftGraphTermStoreTermDescriptions1(v MicrosoftGraphTermStoreTermDescriptions1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

func (t MicrosoftGraphTermStoreTerm_Descriptions_Item) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *MicrosoftGraphTermStoreTerm_Descriptions_Item) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsMicrosoftGraphTermStoreLocalizedLabel returns the union data inside the MicrosoftGraphTermStoreTerm_Labels_Item as a MicrosoftGraphTermStoreLocalizedLabel
func (t MicrosoftGraphTermStoreTerm_Labels_Item) AsMicrosoftGraphTermStoreLocalizedLabel() (MicrosoftGraphTermStoreLocalizedLabel, error) {
	var body MicrosoftGraphTermStoreLocalizedLabel
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphTermStoreLocalizedLabel overwrites any union data inside the MicrosoftGraphTermStoreTerm_Labels_Item as the provided MicrosoftGraphTermStoreLocalizedLabel
func (t *MicrosoftGraphTermStoreTerm_Labels_Item) FromMicrosoftGraphTermStoreLocalizedLabel(v MicrosoftGraphTermStoreLocalizedLabel) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphTermStoreLocalizedLabel performs a merge with any union data inside the MicrosoftGraphTermStoreTerm_Labels_Item, using the provided MicrosoftGraphTermStoreLocalizedLabel
func (t *MicrosoftGraphTermStoreTerm_Labels_Item) MergeMicrosoftGraphTermStoreLocalizedLabel(v MicrosoftGraphTermStoreLocalizedLabel) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsMicrosoftGraphTermStoreTermLabels1 returns the union data inside the MicrosoftGraphTermStoreTerm_Labels_Item as a MicrosoftGraphTermStoreTermLabels1
func (t MicrosoftGraphTermStoreTerm_Labels_Item) AsMicrosoftGraphTermStoreTermLabels1() (MicrosoftGraphTermStoreTermLabels1, error) {
	var body MicrosoftGraphTermStoreTermLabels1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphTermStoreTermLabels1 overwrites any union data inside the MicrosoftGraphTermStoreTerm_Labels_Item as the provided MicrosoftGraphTermStoreTermLabels1
func (t *MicrosoftGraphTermStoreTerm_Labels_Item) FromMicrosoftGraphTermStoreTermLabels1(v MicrosoftGraphTermStoreTermLabels1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphTermStoreTermLabels1 performs a merge with any union data inside the MicrosoftGraphTermStoreTerm_Labels_Item, using the provided MicrosoftGraphTermStoreTermLabels1
func (t *MicrosoftGraphTermStoreTerm_Labels_Item) MergeMicrosoftGraphTermStoreTermLabels1(v MicrosoftGraphTermStoreTermLabels1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

func (t MicrosoftGraphTermStoreTerm_Labels_Item) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *MicrosoftGraphTermStoreTerm_Labels_Item) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsMicrosoftGraphKeyValue returns the union data inside the MicrosoftGraphTermStoreTerm_Properties_Item as a MicrosoftGraphKeyValue
func (t MicrosoftGraphTermStoreTerm_Properties_Item) AsMicrosoftGraphKeyValue() (MicrosoftGraphKeyValue, error) {
	var body MicrosoftGraphKeyValue
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphKeyValue overwrites any union data inside the MicrosoftGraphTermStoreTerm_Properties_Item as the provided MicrosoftGraphKeyValue
func (t *MicrosoftGraphTermStoreTerm_Properties_Item) FromMicrosoftGraphKeyValue(v MicrosoftGraphKeyValue) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphKeyValue performs a merge with any union data inside the MicrosoftGraphTermStoreTerm_Properties_Item, using the provided MicrosoftGraphKeyValue
func (t *MicrosoftGraphTermStoreTerm_Properties_Item) MergeMicrosoftGraphKeyValue(v MicrosoftGraphKeyValue) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsMicrosoftGraphTermStoreTermProperties1 returns the union data inside the MicrosoftGraphTermStoreTerm_Properties_Item as a MicrosoftGraphTermStoreTermProperties1
func (t MicrosoftGraphTermStoreTerm_Properties_Item) AsMicrosoftGraphTermStoreTermProperties1() (MicrosoftGraphTermStoreTermProperties1, error) {
	var body MicrosoftGraphTermStoreTermProperties1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphTermStoreTermProperties1 overwrites any union data inside the MicrosoftGraphTermStoreTerm_Properties_Item as the provided MicrosoftGraphTermStoreTermProperties1
func (t *MicrosoftGraphTermStoreTerm_Properties_Item) FromMicrosoftGraphTermStoreTermProperties1(v MicrosoftGraphTermStoreTermProperties1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphTermStoreTermProperties1 performs a merge with any union data inside the MicrosoftGraphTermStoreTerm_Properties_Item, using the provided MicrosoftGraphTermStoreTermProperties1
func (t *MicrosoftGraphTermStoreTerm_Properties_Item) MergeMicrosoftGraphTermStoreTermProperties1(v MicrosoftGraphTermStoreTermProperties1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

func (t MicrosoftGraphTermStoreTerm_Properties_Item) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *MicrosoftGraphTermStoreTerm_Properties_Item) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsMicrosoftGraphTermStoreSet returns the union data inside the MicrosoftGraphTermStoreTerm_Set as a MicrosoftGraphTermStoreSet
func (t MicrosoftGraphTermStoreTerm_Set) AsMicrosoftGraphTermStoreSet() (MicrosoftGraphTermStoreSet, error) {
	var body MicrosoftGraphTermStoreSet
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphTermStoreSet overwrites any union data inside the MicrosoftGraphTermStoreTerm_Set as the provided MicrosoftGraphTermStoreSet
func (t *MicrosoftGraphTermStoreTerm_Set) FromMicrosoftGraphTermStoreSet(v MicrosoftGraphTermStoreSet) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphTermStoreSet performs a merge with any union data inside the MicrosoftGraphTermStoreTerm_Set, using the provided MicrosoftGraphTermStoreSet
func (t *MicrosoftGraphTermStoreTerm_Set) MergeMicrosoftGraphTermStoreSet(v MicrosoftGraphTermStoreSet) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsMicrosoftGraphTermStoreTermSet1 returns the union data inside the MicrosoftGraphTermStoreTerm_Set as a MicrosoftGraphTermStoreTermSet1
func (t MicrosoftGraphTermStoreTerm_Set) AsMicrosoftGraphTermStoreTermSet1() (MicrosoftGraphTermStoreTermSet1, error) {
	var body MicrosoftGraphTermStoreTermSet1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphTermStoreTermSet1 overwrites any union data inside the MicrosoftGraphTermStoreTerm_Set as the provided MicrosoftGraphTermStoreTermSet1
func (t *MicrosoftGraphTermStoreTerm_Set) FromMicrosoftGraphTermStoreTermSet1(v MicrosoftGraphTermStoreTermSet1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphTermStoreTermSet1 performs a merge with any union data inside the MicrosoftGraphTermStoreTerm_Set, using the provided MicrosoftGraphTermStoreTermSet1
func (t *MicrosoftGraphTermStoreTerm_Set) MergeMicrosoftGraphTermStoreTermSet1(v MicrosoftGraphTermStoreTermSet1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

func (t MicrosoftGraphTermStoreTerm_Set) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *MicrosoftGraphTermStoreTerm_Set) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsMicrosoftGraphThumbnail returns the union data inside the MicrosoftGraphThumbnailSet_Large as a MicrosoftGraphThumbnail
func (t MicrosoftGraphThumbnailSet_Large) AsMicrosoftGraphThumbnail() (MicrosoftGraphThumbnail, error) {
	var body MicrosoftGraphThumbnail
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphThumbnail overwrites any union data inside the MicrosoftGraphThumbnailSet_Large as the provided MicrosoftGraphThumbnail
func (t *MicrosoftGraphThumbnailSet_Large) FromMicrosoftGraphThumbnail(v MicrosoftGraphThumbnail) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphThumbnail performs a merge with any union data inside the MicrosoftGraphThumbnailSet_Large, using the provided MicrosoftGraphThumbnail
func (t *MicrosoftGraphThumbnailSet_Large) MergeMicrosoftGraphThumbnail(v MicrosoftGraphThumbnail) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsMicrosoftGraphThumbnailSetLarge1 returns the union data inside the MicrosoftGraphThumbnailSet_Large as a MicrosoftGraphThumbnailSetLarge1
func (t MicrosoftGraphThumbnailSet_Large) AsMicrosoftGraphThumbnailSetLarge1() (MicrosoftGraphThumbnailSetLarge1, error) {
	var body MicrosoftGraphThumbnailSetLarge1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphThumbnailSetLarge1 overwrites any union data inside the MicrosoftGraphThumbnailSet_Large as the provided MicrosoftGraphThumbnailSetLarge1
func (t *MicrosoftGraphThumbnailSet_Large) FromMicrosoftGraphThumbnailSetLarge1(v MicrosoftGraphThumbnailSetLarge1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphThumbnailSetLarge1 performs a merge with any union data inside the MicrosoftGraphThumbnailSet_Large, using the provided MicrosoftGraphThumbnailSetLarge1
func (t *MicrosoftGraphThumbnailSet_Large) MergeMicrosoftGraphThumbnailSetLarge1(v MicrosoftGraphThumbnailSetLarge1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

func (t MicrosoftGraphThumbnailSet_Large) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *MicrosoftGraphThumbnailSet_Large) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsMicrosoftGraphThumbnail returns the union data inside the MicrosoftGraphThumbnailSet_Medium as a MicrosoftGraphThumbnail
func (t MicrosoftGraphThumbnailSet_Medium) AsMicrosoftGraphThumbnail() (MicrosoftGraphThumbnail, error) {
	var body MicrosoftGraphThumbnail
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphThumbnail overwrites any union data inside the MicrosoftGraphThumbnailSet_Medium as the provided MicrosoftGraphThumbnail
func (t *MicrosoftGraphThumbnailSet_Medium) FromMicrosoftGraphThumbnail(v MicrosoftGraphThumbnail) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphThumbnail performs a merge with any union data inside the MicrosoftGraphThumbnailSet_Medium, using the provided MicrosoftGraphThumbnail
func (t *MicrosoftGraphThumbnailSet_Medium) MergeMicrosoftGraphThumbnail(v MicrosoftGraphThumbnail) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsMicrosoftGraphThumbnailSetMedium1 returns the union data inside the MicrosoftGraphThumbnailSet_Medium as a MicrosoftGraphThumbnailSetMedium1
func (t MicrosoftGraphThumbnailSet_Medium) AsMicrosoftGraphThumbnailSetMedium1() (MicrosoftGraphThumbnailSetMedium1, error) {
	var body MicrosoftGraphThumbnailSetMedium1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphThumbnailSetMedium1 overwrites any union data inside the MicrosoftGraphThumbnailSet_Medium as the provided MicrosoftGraphThumbnailSetMedium1
func (t *MicrosoftGraphThumbnailSet_Medium) FromMicrosoftGraphThumbnailSetMedium1(v MicrosoftGraphThumbnailSetMedium1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphThumbnailSetMedium1 performs a merge with any union data inside the MicrosoftGraphThumbnailSet_Medium, using the provided MicrosoftGraphThumbnailSetMedium1
func (t *MicrosoftGraphThumbnailSet_Medium) MergeMicrosoftGraphThumbnailSetMedium1(v MicrosoftGraphThumbnailSetMedium1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

func (t MicrosoftGraphThumbnailSet_Medium) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *MicrosoftGraphThumbnailSet_Medium) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsMicrosoftGraphThumbnail returns the union data inside the MicrosoftGraphThumbnailSet_Small as a MicrosoftGraphThumbnail
func (t MicrosoftGraphThumbnailSet_Small) AsMicrosoftGraphThumbnail() (MicrosoftGraphThumbnail, error) {
	var body MicrosoftGraphThumbnail
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphThumbnail overwrites any union data inside the MicrosoftGraphThumbnailSet_Small as the provided MicrosoftGraphThumbnail
func (t *MicrosoftGraphThumbnailSet_Small) FromMicrosoftGraphThumbnail(v MicrosoftGraphThumbnail) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphThumbnail performs a merge with any union data inside the MicrosoftGraphThumbnailSet_Small, using the provided MicrosoftGraphThumbnail
func (t *MicrosoftGraphThumbnailSet_Small) MergeMicrosoftGraphThumbnail(v MicrosoftGraphThumbnail) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsMicrosoftGraphThumbnailSetSmall1 returns the union data inside the MicrosoftGraphThumbnailSet_Small as a MicrosoftGraphThumbnailSetSmall1
func (t MicrosoftGraphThumbnailSet_Small) AsMicrosoftGraphThumbnailSetSmall1() (MicrosoftGraphThumbnailSetSmall1, error) {
	var body MicrosoftGraphThumbnailSetSmall1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphThumbnailSetSmall1 overwrites any union data inside the MicrosoftGraphThumbnailSet_Small as the provided MicrosoftGraphThumbnailSetSmall1
func (t *MicrosoftGraphThumbnailSet_Small) FromMicrosoftGraphThumbnailSetSmall1(v MicrosoftGraphThumbnailSetSmall1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphThumbnailSetSmall1 performs a merge with any union data inside the MicrosoftGraphThumbnailSet_Small, using the provided MicrosoftGraphThumbnailSetSmall1
func (t *MicrosoftGraphThumbnailSet_Small) MergeMicrosoftGraphThumbnailSetSmall1(v MicrosoftGraphThumbnailSetSmall1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

func (t MicrosoftGraphThumbnailSet_Small) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *MicrosoftGraphThumbnailSet_Small) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsMicrosoftGraphThumbnail returns the union data inside the MicrosoftGraphThumbnailSet_Source as a MicrosoftGraphThumbnail
func (t MicrosoftGraphThumbnailSet_Source) AsMicrosoftGraphThumbnail() (MicrosoftGraphThumbnail, error) {
	var body MicrosoftGraphThumbnail
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphThumbnail overwrites any union data inside the MicrosoftGraphThumbnailSet_Source as the provided MicrosoftGraphThumbnail
func (t *MicrosoftGraphThumbnailSet_Source) FromMicrosoftGraphThumbnail(v MicrosoftGraphThumbnail) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphThumbnail performs a merge with any union data inside the MicrosoftGraphThumbnailSet_Source, using the provided MicrosoftGraphThumbnail
func (t *MicrosoftGraphThumbnailSet_Source) MergeMicrosoftGraphThumbnail(v MicrosoftGraphThumbnail) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsMicrosoftGraphThumbnailSetSource1 returns the union data inside the MicrosoftGraphThumbnailSet_Source as a MicrosoftGraphThumbnailSetSource1
func (t MicrosoftGraphThumbnailSet_Source) AsMicrosoftGraphThumbnailSetSource1() (MicrosoftGraphThumbnailSetSource1, error) {
	var body MicrosoftGraphThumbnailSetSource1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphThumbnailSetSource1 overwrites any union data inside the MicrosoftGraphThumbnailSet_Source as the provided MicrosoftGraphThumbnailSetSource1
func (t *MicrosoftGraphThumbnailSet_Source) FromMicrosoftGraphThumbnailSetSource1(v MicrosoftGraphThumbnailSetSource1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphThumbnailSetSource1 performs a merge with any union data inside the MicrosoftGraphThumbnailSet_Source, using the provided MicrosoftGraphThumbnailSetSource1
func (t *MicrosoftGraphThumbnailSet_Source) MergeMicrosoftGraphThumbnailSetSource1(v MicrosoftGraphThumbnailSetSource1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

func (t MicrosoftGraphThumbnailSet_Source) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *MicrosoftGraphThumbnailSet_Source) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsMicrosoftGraphTimeOffItem returns the union data inside the MicrosoftGraphTimeOff_DraftTimeOff as a MicrosoftGraphTimeOffItem
func (t MicrosoftGraphTimeOff_DraftTimeOff) AsMicrosoftGraphTimeOffItem() (MicrosoftGraphTimeOffItem, error) {
	var body MicrosoftGraphTimeOffItem
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphTimeOffItem overwrites any union data inside the MicrosoftGraphTimeOff_DraftTimeOff as the provided MicrosoftGraphTimeOffItem
func (t *MicrosoftGraphTimeOff_DraftTimeOff) FromMicrosoftGraphTimeOffItem(v MicrosoftGraphTimeOffItem) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphTimeOffItem performs a merge with any union data inside the MicrosoftGraphTimeOff_DraftTimeOff, using the provided MicrosoftGraphTimeOffItem
func (t *MicrosoftGraphTimeOff_DraftTimeOff) MergeMicrosoftGraphTimeOffItem(v MicrosoftGraphTimeOffItem) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsMicrosoftGraphTimeOffDraftTimeOff1 returns the union data inside the MicrosoftGraphTimeOff_DraftTimeOff as a MicrosoftGraphTimeOffDraftTimeOff1
func (t MicrosoftGraphTimeOff_DraftTimeOff) AsMicrosoftGraphTimeOffDraftTimeOff1() (MicrosoftGraphTimeOffDraftTimeOff1, error) {
	var body MicrosoftGraphTimeOffDraftTimeOff1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphTimeOffDraftTimeOff1 overwrites any union data inside the MicrosoftGraphTimeOff_DraftTimeOff as the provided MicrosoftGraphTimeOffDraftTimeOff1
func (t *MicrosoftGraphTimeOff_DraftTimeOff) FromMicrosoftGraphTimeOffDraftTimeOff1(v MicrosoftGraphTimeOffDraftTimeOff1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphTimeOffDraftTimeOff1 performs a merge with any union data inside the MicrosoftGraphTimeOff_DraftTimeOff, using the provided MicrosoftGraphTimeOffDraftTimeOff1
func (t *MicrosoftGraphTimeOff_DraftTimeOff) MergeMicrosoftGraphTimeOffDraftTimeOff1(v MicrosoftGraphTimeOffDraftTimeOff1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

func (t MicrosoftGraphTimeOff_DraftTimeOff) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *MicrosoftGraphTimeOff_DraftTimeOff) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsMicrosoftGraphIdentitySet returns the union data inside the MicrosoftGraphTimeOff_LastModifiedBy as a MicrosoftGraphIdentitySet
func (t MicrosoftGraphTimeOff_LastModifiedBy) AsMicrosoftGraphIdentitySet() (MicrosoftGraphIdentitySet, error) {
	var body MicrosoftGraphIdentitySet
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphIdentitySet overwrites any union data inside the MicrosoftGraphTimeOff_LastModifiedBy as the provided MicrosoftGraphIdentitySet
func (t *MicrosoftGraphTimeOff_LastModifiedBy) FromMicrosoftGraphIdentitySet(v MicrosoftGraphIdentitySet) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphIdentitySet performs a merge with any union data inside the MicrosoftGraphTimeOff_LastModifiedBy, using the provided MicrosoftGraphIdentitySet
func (t *MicrosoftGraphTimeOff_LastModifiedBy) MergeMicrosoftGraphIdentitySet(v MicrosoftGraphIdentitySet) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsMicrosoftGraphTimeOffLastModifiedBy1 returns the union data inside the MicrosoftGraphTimeOff_LastModifiedBy as a MicrosoftGraphTimeOffLastModifiedBy1
func (t MicrosoftGraphTimeOff_LastModifiedBy) AsMicrosoftGraphTimeOffLastModifiedBy1() (MicrosoftGraphTimeOffLastModifiedBy1, error) {
	var body MicrosoftGraphTimeOffLastModifiedBy1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphTimeOffLastModifiedBy1 overwrites any union data inside the MicrosoftGraphTimeOff_LastModifiedBy as the provided MicrosoftGraphTimeOffLastModifiedBy1
func (t *MicrosoftGraphTimeOff_LastModifiedBy) FromMicrosoftGraphTimeOffLastModifiedBy1(v MicrosoftGraphTimeOffLastModifiedBy1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphTimeOffLastModifiedBy1 performs a merge with any union data inside the MicrosoftGraphTimeOff_LastModifiedBy, using the provided MicrosoftGraphTimeOffLastModifiedBy1
func (t *MicrosoftGraphTimeOff_LastModifiedBy) MergeMicrosoftGraphTimeOffLastModifiedBy1(v MicrosoftGraphTimeOffLastModifiedBy1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

func (t MicrosoftGraphTimeOff_LastModifiedBy) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *MicrosoftGraphTimeOff_LastModifiedBy) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsMicrosoftGraphTimeOffItem returns the union data inside the MicrosoftGraphTimeOff_SharedTimeOff as a MicrosoftGraphTimeOffItem
func (t MicrosoftGraphTimeOff_SharedTimeOff) AsMicrosoftGraphTimeOffItem() (MicrosoftGraphTimeOffItem, error) {
	var body MicrosoftGraphTimeOffItem
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphTimeOffItem overwrites any union data inside the MicrosoftGraphTimeOff_SharedTimeOff as the provided MicrosoftGraphTimeOffItem
func (t *MicrosoftGraphTimeOff_SharedTimeOff) FromMicrosoftGraphTimeOffItem(v MicrosoftGraphTimeOffItem) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphTimeOffItem performs a merge with any union data inside the MicrosoftGraphTimeOff_SharedTimeOff, using the provided MicrosoftGraphTimeOffItem
func (t *MicrosoftGraphTimeOff_SharedTimeOff) MergeMicrosoftGraphTimeOffItem(v MicrosoftGraphTimeOffItem) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsMicrosoftGraphTimeOffSharedTimeOff1 returns the union data inside the MicrosoftGraphTimeOff_SharedTimeOff as a MicrosoftGraphTimeOffSharedTimeOff1
func (t MicrosoftGraphTimeOff_SharedTimeOff) AsMicrosoftGraphTimeOffSharedTimeOff1() (MicrosoftGraphTimeOffSharedTimeOff1, error) {
	var body MicrosoftGraphTimeOffSharedTimeOff1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphTimeOffSharedTimeOff1 overwrites any union data inside the MicrosoftGraphTimeOff_SharedTimeOff as the provided MicrosoftGraphTimeOffSharedTimeOff1
func (t *MicrosoftGraphTimeOff_SharedTimeOff) FromMicrosoftGraphTimeOffSharedTimeOff1(v MicrosoftGraphTimeOffSharedTimeOff1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphTimeOffSharedTimeOff1 performs a merge with any union data inside the MicrosoftGraphTimeOff_SharedTimeOff, using the provided MicrosoftGraphTimeOffSharedTimeOff1
func (t *MicrosoftGraphTimeOff_SharedTimeOff) MergeMicrosoftGraphTimeOffSharedTimeOff1(v MicrosoftGraphTimeOffSharedTimeOff1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

func (t MicrosoftGraphTimeOff_SharedTimeOff) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *MicrosoftGraphTimeOff_SharedTimeOff) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsMicrosoftGraphTimeOffReasonIconType returns the union data inside the MicrosoftGraphTimeOffReason_IconType as a MicrosoftGraphTimeOffReasonIconType
func (t MicrosoftGraphTimeOffReason_IconType) AsMicrosoftGraphTimeOffReasonIconType() (MicrosoftGraphTimeOffReasonIconType, error) {
	var body MicrosoftGraphTimeOffReasonIconType
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphTimeOffReasonIconType overwrites any union data inside the MicrosoftGraphTimeOffReason_IconType as the provided MicrosoftGraphTimeOffReasonIconType
func (t *MicrosoftGraphTimeOffReason_IconType) FromMicrosoftGraphTimeOffReasonIconType(v MicrosoftGraphTimeOffReasonIconType) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphTimeOffReasonIconType performs a merge with any union data inside the MicrosoftGraphTimeOffReason_IconType, using the provided MicrosoftGraphTimeOffReasonIconType
func (t *MicrosoftGraphTimeOffReason_IconType) MergeMicrosoftGraphTimeOffReasonIconType(v MicrosoftGraphTimeOffReasonIconType) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsMicrosoftGraphTimeOffReasonIconType1 returns the union data inside the MicrosoftGraphTimeOffReason_IconType as a MicrosoftGraphTimeOffReasonIconType1
func (t MicrosoftGraphTimeOffReason_IconType) AsMicrosoftGraphTimeOffReasonIconType1() (MicrosoftGraphTimeOffReasonIconType1, error) {
	var body MicrosoftGraphTimeOffReasonIconType1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphTimeOffReasonIconType1 overwrites any union data inside the MicrosoftGraphTimeOffReason_IconType as the provided MicrosoftGraphTimeOffReasonIconType1
func (t *MicrosoftGraphTimeOffReason_IconType) FromMicrosoftGraphTimeOffReasonIconType1(v MicrosoftGraphTimeOffReasonIconType1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphTimeOffReasonIconType1 performs a merge with any union data inside the MicrosoftGraphTimeOffReason_IconType, using the provided MicrosoftGraphTimeOffReasonIconType1
func (t *MicrosoftGraphTimeOffReason_IconType) MergeMicrosoftGraphTimeOffReasonIconType1(v MicrosoftGraphTimeOffReasonIconType1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

func (t MicrosoftGraphTimeOffReason_IconType) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *MicrosoftGraphTimeOffReason_IconType) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsMicrosoftGraphIdentitySet returns the union data inside the MicrosoftGraphTimeOffReason_LastModifiedBy as a MicrosoftGraphIdentitySet
func (t MicrosoftGraphTimeOffReason_LastModifiedBy) AsMicrosoftGraphIdentitySet() (MicrosoftGraphIdentitySet, error) {
	var body MicrosoftGraphIdentitySet
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphIdentitySet overwrites any union data inside the MicrosoftGraphTimeOffReason_LastModifiedBy as the provided MicrosoftGraphIdentitySet
func (t *MicrosoftGraphTimeOffReason_LastModifiedBy) FromMicrosoftGraphIdentitySet(v MicrosoftGraphIdentitySet) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphIdentitySet performs a merge with any union data inside the MicrosoftGraphTimeOffReason_LastModifiedBy, using the provided MicrosoftGraphIdentitySet
func (t *MicrosoftGraphTimeOffReason_LastModifiedBy) MergeMicrosoftGraphIdentitySet(v MicrosoftGraphIdentitySet) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsMicrosoftGraphTimeOffReasonLastModifiedBy1 returns the union data inside the MicrosoftGraphTimeOffReason_LastModifiedBy as a MicrosoftGraphTimeOffReasonLastModifiedBy1
func (t MicrosoftGraphTimeOffReason_LastModifiedBy) AsMicrosoftGraphTimeOffReasonLastModifiedBy1() (MicrosoftGraphTimeOffReasonLastModifiedBy1, error) {
	var body MicrosoftGraphTimeOffReasonLastModifiedBy1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphTimeOffReasonLastModifiedBy1 overwrites any union data inside the MicrosoftGraphTimeOffReason_LastModifiedBy as the provided MicrosoftGraphTimeOffReasonLastModifiedBy1
func (t *MicrosoftGraphTimeOffReason_LastModifiedBy) FromMicrosoftGraphTimeOffReasonLastModifiedBy1(v MicrosoftGraphTimeOffReasonLastModifiedBy1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphTimeOffReasonLastModifiedBy1 performs a merge with any union data inside the MicrosoftGraphTimeOffReason_LastModifiedBy, using the provided MicrosoftGraphTimeOffReasonLastModifiedBy1
func (t *MicrosoftGraphTimeOffReason_LastModifiedBy) MergeMicrosoftGraphTimeOffReasonLastModifiedBy1(v MicrosoftGraphTimeOffReasonLastModifiedBy1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

func (t MicrosoftGraphTimeOffReason_LastModifiedBy) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *MicrosoftGraphTimeOffReason_LastModifiedBy) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsMicrosoftGraphScheduleChangeRequestActor returns the union data inside the MicrosoftGraphTimeOffRequest_AssignedTo as a MicrosoftGraphScheduleChangeRequestActor
func (t MicrosoftGraphTimeOffRequest_AssignedTo) AsMicrosoftGraphScheduleChangeRequestActor() (MicrosoftGraphScheduleChangeRequestActor, error) {
	var body MicrosoftGraphScheduleChangeRequestActor
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphScheduleChangeRequestActor overwrites any union data inside the MicrosoftGraphTimeOffRequest_AssignedTo as the provided MicrosoftGraphScheduleChangeRequestActor
func (t *MicrosoftGraphTimeOffRequest_AssignedTo) FromMicrosoftGraphScheduleChangeRequestActor(v MicrosoftGraphScheduleChangeRequestActor) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphScheduleChangeRequestActor performs a merge with any union data inside the MicrosoftGraphTimeOffRequest_AssignedTo, using the provided MicrosoftGraphScheduleChangeRequestActor
func (t *MicrosoftGraphTimeOffRequest_AssignedTo) MergeMicrosoftGraphScheduleChangeRequestActor(v MicrosoftGraphScheduleChangeRequestActor) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsMicrosoftGraphTimeOffRequestAssignedTo1 returns the union data inside the MicrosoftGraphTimeOffRequest_AssignedTo as a MicrosoftGraphTimeOffRequestAssignedTo1
func (t MicrosoftGraphTimeOffRequest_AssignedTo) AsMicrosoftGraphTimeOffRequestAssignedTo1() (MicrosoftGraphTimeOffRequestAssignedTo1, error) {
	var body MicrosoftGraphTimeOffRequestAssignedTo1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphTimeOffRequestAssignedTo1 overwrites any union data inside the MicrosoftGraphTimeOffRequest_AssignedTo as the provided MicrosoftGraphTimeOffRequestAssignedTo1
func (t *MicrosoftGraphTimeOffRequest_AssignedTo) FromMicrosoftGraphTimeOffRequestAssignedTo1(v MicrosoftGraphTimeOffRequestAssignedTo1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphTimeOffRequestAssignedTo1 performs a merge with any union data inside the MicrosoftGraphTimeOffRequest_AssignedTo, using the provided MicrosoftGraphTimeOffRequestAssignedTo1
func (t *MicrosoftGraphTimeOffRequest_AssignedTo) MergeMicrosoftGraphTimeOffRequestAssignedTo1(v MicrosoftGraphTimeOffRequestAssignedTo1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

func (t MicrosoftGraphTimeOffRequest_AssignedTo) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *MicrosoftGraphTimeOffRequest_AssignedTo) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsMicrosoftGraphIdentitySet returns the union data inside the MicrosoftGraphTimeOffRequest_LastModifiedBy as a MicrosoftGraphIdentitySet
func (t MicrosoftGraphTimeOffRequest_LastModifiedBy) AsMicrosoftGraphIdentitySet() (MicrosoftGraphIdentitySet, error) {
	var body MicrosoftGraphIdentitySet
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphIdentitySet overwrites any union data inside the MicrosoftGraphTimeOffRequest_LastModifiedBy as the provided MicrosoftGraphIdentitySet
func (t *MicrosoftGraphTimeOffRequest_LastModifiedBy) FromMicrosoftGraphIdentitySet(v MicrosoftGraphIdentitySet) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphIdentitySet performs a merge with any union data inside the MicrosoftGraphTimeOffRequest_LastModifiedBy, using the provided MicrosoftGraphIdentitySet
func (t *MicrosoftGraphTimeOffRequest_LastModifiedBy) MergeMicrosoftGraphIdentitySet(v MicrosoftGraphIdentitySet) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsMicrosoftGraphTimeOffRequestLastModifiedBy1 returns the union data inside the MicrosoftGraphTimeOffRequest_LastModifiedBy as a MicrosoftGraphTimeOffRequestLastModifiedBy1
func (t MicrosoftGraphTimeOffRequest_LastModifiedBy) AsMicrosoftGraphTimeOffRequestLastModifiedBy1() (MicrosoftGraphTimeOffRequestLastModifiedBy1, error) {
	var body MicrosoftGraphTimeOffRequestLastModifiedBy1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphTimeOffRequestLastModifiedBy1 overwrites any union data inside the MicrosoftGraphTimeOffRequest_LastModifiedBy as the provided MicrosoftGraphTimeOffRequestLastModifiedBy1
func (t *MicrosoftGraphTimeOffRequest_LastModifiedBy) FromMicrosoftGraphTimeOffRequestLastModifiedBy1(v MicrosoftGraphTimeOffRequestLastModifiedBy1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphTimeOffRequestLastModifiedBy1 performs a merge with any union data inside the MicrosoftGraphTimeOffRequest_LastModifiedBy, using the provided MicrosoftGraphTimeOffRequestLastModifiedBy1
func (t *MicrosoftGraphTimeOffRequest_LastModifiedBy) MergeMicrosoftGraphTimeOffRequestLastModifiedBy1(v MicrosoftGraphTimeOffRequestLastModifiedBy1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

func (t MicrosoftGraphTimeOffRequest_LastModifiedBy) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *MicrosoftGraphTimeOffRequest_LastModifiedBy) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsMicrosoftGraphScheduleChangeState returns the union data inside the MicrosoftGraphTimeOffRequest_State as a MicrosoftGraphScheduleChangeState
func (t MicrosoftGraphTimeOffRequest_State) AsMicrosoftGraphScheduleChangeState() (MicrosoftGraphScheduleChangeState, error) {
	var body MicrosoftGraphScheduleChangeState
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphScheduleChangeState overwrites any union data inside the MicrosoftGraphTimeOffRequest_State as the provided MicrosoftGraphScheduleChangeState
func (t *MicrosoftGraphTimeOffRequest_State) FromMicrosoftGraphScheduleChangeState(v MicrosoftGraphScheduleChangeState) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphScheduleChangeState performs a merge with any union data inside the MicrosoftGraphTimeOffRequest_State, using the provided MicrosoftGraphScheduleChangeState
func (t *MicrosoftGraphTimeOffRequest_State) MergeMicrosoftGraphScheduleChangeState(v MicrosoftGraphScheduleChangeState) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsMicrosoftGraphTimeOffRequestState1 returns the union data inside the MicrosoftGraphTimeOffRequest_State as a MicrosoftGraphTimeOffRequestState1
func (t MicrosoftGraphTimeOffRequest_State) AsMicrosoftGraphTimeOffRequestState1() (MicrosoftGraphTimeOffRequestState1, error) {
	var body MicrosoftGraphTimeOffRequestState1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphTimeOffRequestState1 overwrites any union data inside the MicrosoftGraphTimeOffRequest_State as the provided MicrosoftGraphTimeOffRequestState1
func (t *MicrosoftGraphTimeOffRequest_State) FromMicrosoftGraphTimeOffRequestState1(v MicrosoftGraphTimeOffRequestState1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphTimeOffRequestState1 performs a merge with any union data inside the MicrosoftGraphTimeOffRequest_State, using the provided MicrosoftGraphTimeOffRequestState1
func (t *MicrosoftGraphTimeOffRequest_State) MergeMicrosoftGraphTimeOffRequestState1(v MicrosoftGraphTimeOffRequestState1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

func (t MicrosoftGraphTimeOffRequest_State) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *MicrosoftGraphTimeOffRequest_State) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsMicrosoftGraphItemBody returns the union data inside the MicrosoftGraphTodoTask_Body as a MicrosoftGraphItemBody
func (t MicrosoftGraphTodoTask_Body) AsMicrosoftGraphItemBody() (MicrosoftGraphItemBody, error) {
	var body MicrosoftGraphItemBody
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphItemBody overwrites any union data inside the MicrosoftGraphTodoTask_Body as the provided MicrosoftGraphItemBody
func (t *MicrosoftGraphTodoTask_Body) FromMicrosoftGraphItemBody(v MicrosoftGraphItemBody) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphItemBody performs a merge with any union data inside the MicrosoftGraphTodoTask_Body, using the provided MicrosoftGraphItemBody
func (t *MicrosoftGraphTodoTask_Body) MergeMicrosoftGraphItemBody(v MicrosoftGraphItemBody) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsMicrosoftGraphTodoTaskBody1 returns the union data inside the MicrosoftGraphTodoTask_Body as a MicrosoftGraphTodoTaskBody1
func (t MicrosoftGraphTodoTask_Body) AsMicrosoftGraphTodoTaskBody1() (MicrosoftGraphTodoTaskBody1, error) {
	var body MicrosoftGraphTodoTaskBody1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphTodoTaskBody1 overwrites any union data inside the MicrosoftGraphTodoTask_Body as the provided MicrosoftGraphTodoTaskBody1
func (t *MicrosoftGraphTodoTask_Body) FromMicrosoftGraphTodoTaskBody1(v MicrosoftGraphTodoTaskBody1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphTodoTaskBody1 performs a merge with any union data inside the MicrosoftGraphTodoTask_Body, using the provided MicrosoftGraphTodoTaskBody1
func (t *MicrosoftGraphTodoTask_Body) MergeMicrosoftGraphTodoTaskBody1(v MicrosoftGraphTodoTaskBody1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

func (t MicrosoftGraphTodoTask_Body) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *MicrosoftGraphTodoTask_Body) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsMicrosoftGraphDateTimeTimeZone returns the union data inside the MicrosoftGraphTodoTask_CompletedDateTime as a MicrosoftGraphDateTimeTimeZone
func (t MicrosoftGraphTodoTask_CompletedDateTime) AsMicrosoftGraphDateTimeTimeZone() (MicrosoftGraphDateTimeTimeZone, error) {
	var body MicrosoftGraphDateTimeTimeZone
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphDateTimeTimeZone overwrites any union data inside the MicrosoftGraphTodoTask_CompletedDateTime as the provided MicrosoftGraphDateTimeTimeZone
func (t *MicrosoftGraphTodoTask_CompletedDateTime) FromMicrosoftGraphDateTimeTimeZone(v MicrosoftGraphDateTimeTimeZone) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphDateTimeTimeZone performs a merge with any union data inside the MicrosoftGraphTodoTask_CompletedDateTime, using the provided MicrosoftGraphDateTimeTimeZone
func (t *MicrosoftGraphTodoTask_CompletedDateTime) MergeMicrosoftGraphDateTimeTimeZone(v MicrosoftGraphDateTimeTimeZone) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsMicrosoftGraphTodoTaskCompletedDateTime1 returns the union data inside the MicrosoftGraphTodoTask_CompletedDateTime as a MicrosoftGraphTodoTaskCompletedDateTime1
func (t MicrosoftGraphTodoTask_CompletedDateTime) AsMicrosoftGraphTodoTaskCompletedDateTime1() (MicrosoftGraphTodoTaskCompletedDateTime1, error) {
	var body MicrosoftGraphTodoTaskCompletedDateTime1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphTodoTaskCompletedDateTime1 overwrites any union data inside the MicrosoftGraphTodoTask_CompletedDateTime as the provided MicrosoftGraphTodoTaskCompletedDateTime1
func (t *MicrosoftGraphTodoTask_CompletedDateTime) FromMicrosoftGraphTodoTaskCompletedDateTime1(v MicrosoftGraphTodoTaskCompletedDateTime1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphTodoTaskCompletedDateTime1 performs a merge with any union data inside the MicrosoftGraphTodoTask_CompletedDateTime, using the provided MicrosoftGraphTodoTaskCompletedDateTime1
func (t *MicrosoftGraphTodoTask_CompletedDateTime) MergeMicrosoftGraphTodoTaskCompletedDateTime1(v MicrosoftGraphTodoTaskCompletedDateTime1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

func (t MicrosoftGraphTodoTask_CompletedDateTime) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *MicrosoftGraphTodoTask_CompletedDateTime) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsMicrosoftGraphDateTimeTimeZone returns the union data inside the MicrosoftGraphTodoTask_DueDateTime as a MicrosoftGraphDateTimeTimeZone
func (t MicrosoftGraphTodoTask_DueDateTime) AsMicrosoftGraphDateTimeTimeZone() (MicrosoftGraphDateTimeTimeZone, error) {
	var body MicrosoftGraphDateTimeTimeZone
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphDateTimeTimeZone overwrites any union data inside the MicrosoftGraphTodoTask_DueDateTime as the provided MicrosoftGraphDateTimeTimeZone
func (t *MicrosoftGraphTodoTask_DueDateTime) FromMicrosoftGraphDateTimeTimeZone(v MicrosoftGraphDateTimeTimeZone) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphDateTimeTimeZone performs a merge with any union data inside the MicrosoftGraphTodoTask_DueDateTime, using the provided MicrosoftGraphDateTimeTimeZone
func (t *MicrosoftGraphTodoTask_DueDateTime) MergeMicrosoftGraphDateTimeTimeZone(v MicrosoftGraphDateTimeTimeZone) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsMicrosoftGraphTodoTaskDueDateTime1 returns the union data inside the MicrosoftGraphTodoTask_DueDateTime as a MicrosoftGraphTodoTaskDueDateTime1
func (t MicrosoftGraphTodoTask_DueDateTime) AsMicrosoftGraphTodoTaskDueDateTime1() (MicrosoftGraphTodoTaskDueDateTime1, error) {
	var body MicrosoftGraphTodoTaskDueDateTime1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphTodoTaskDueDateTime1 overwrites any union data inside the MicrosoftGraphTodoTask_DueDateTime as the provided MicrosoftGraphTodoTaskDueDateTime1
func (t *MicrosoftGraphTodoTask_DueDateTime) FromMicrosoftGraphTodoTaskDueDateTime1(v MicrosoftGraphTodoTaskDueDateTime1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphTodoTaskDueDateTime1 performs a merge with any union data inside the MicrosoftGraphTodoTask_DueDateTime, using the provided MicrosoftGraphTodoTaskDueDateTime1
func (t *MicrosoftGraphTodoTask_DueDateTime) MergeMicrosoftGraphTodoTaskDueDateTime1(v MicrosoftGraphTodoTaskDueDateTime1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

func (t MicrosoftGraphTodoTask_DueDateTime) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *MicrosoftGraphTodoTask_DueDateTime) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsMicrosoftGraphPatternedRecurrence returns the union data inside the MicrosoftGraphTodoTask_Recurrence as a MicrosoftGraphPatternedRecurrence
func (t MicrosoftGraphTodoTask_Recurrence) AsMicrosoftGraphPatternedRecurrence() (MicrosoftGraphPatternedRecurrence, error) {
	var body MicrosoftGraphPatternedRecurrence
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphPatternedRecurrence overwrites any union data inside the MicrosoftGraphTodoTask_Recurrence as the provided MicrosoftGraphPatternedRecurrence
func (t *MicrosoftGraphTodoTask_Recurrence) FromMicrosoftGraphPatternedRecurrence(v MicrosoftGraphPatternedRecurrence) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphPatternedRecurrence performs a merge with any union data inside the MicrosoftGraphTodoTask_Recurrence, using the provided MicrosoftGraphPatternedRecurrence
func (t *MicrosoftGraphTodoTask_Recurrence) MergeMicrosoftGraphPatternedRecurrence(v MicrosoftGraphPatternedRecurrence) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsMicrosoftGraphTodoTaskRecurrence1 returns the union data inside the MicrosoftGraphTodoTask_Recurrence as a MicrosoftGraphTodoTaskRecurrence1
func (t MicrosoftGraphTodoTask_Recurrence) AsMicrosoftGraphTodoTaskRecurrence1() (MicrosoftGraphTodoTaskRecurrence1, error) {
	var body MicrosoftGraphTodoTaskRecurrence1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphTodoTaskRecurrence1 overwrites any union data inside the MicrosoftGraphTodoTask_Recurrence as the provided MicrosoftGraphTodoTaskRecurrence1
func (t *MicrosoftGraphTodoTask_Recurrence) FromMicrosoftGraphTodoTaskRecurrence1(v MicrosoftGraphTodoTaskRecurrence1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphTodoTaskRecurrence1 performs a merge with any union data inside the MicrosoftGraphTodoTask_Recurrence, using the provided MicrosoftGraphTodoTaskRecurrence1
func (t *MicrosoftGraphTodoTask_Recurrence) MergeMicrosoftGraphTodoTaskRecurrence1(v MicrosoftGraphTodoTaskRecurrence1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

func (t MicrosoftGraphTodoTask_Recurrence) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *MicrosoftGraphTodoTask_Recurrence) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsMicrosoftGraphDateTimeTimeZone returns the union data inside the MicrosoftGraphTodoTask_ReminderDateTime as a MicrosoftGraphDateTimeTimeZone
func (t MicrosoftGraphTodoTask_ReminderDateTime) AsMicrosoftGraphDateTimeTimeZone() (MicrosoftGraphDateTimeTimeZone, error) {
	var body MicrosoftGraphDateTimeTimeZone
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphDateTimeTimeZone overwrites any union data inside the MicrosoftGraphTodoTask_ReminderDateTime as the provided MicrosoftGraphDateTimeTimeZone
func (t *MicrosoftGraphTodoTask_ReminderDateTime) FromMicrosoftGraphDateTimeTimeZone(v MicrosoftGraphDateTimeTimeZone) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphDateTimeTimeZone performs a merge with any union data inside the MicrosoftGraphTodoTask_ReminderDateTime, using the provided MicrosoftGraphDateTimeTimeZone
func (t *MicrosoftGraphTodoTask_ReminderDateTime) MergeMicrosoftGraphDateTimeTimeZone(v MicrosoftGraphDateTimeTimeZone) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsMicrosoftGraphTodoTaskReminderDateTime1 returns the union data inside the MicrosoftGraphTodoTask_ReminderDateTime as a MicrosoftGraphTodoTaskReminderDateTime1
func (t MicrosoftGraphTodoTask_ReminderDateTime) AsMicrosoftGraphTodoTaskReminderDateTime1() (MicrosoftGraphTodoTaskReminderDateTime1, error) {
	var body MicrosoftGraphTodoTaskReminderDateTime1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphTodoTaskReminderDateTime1 overwrites any union data inside the MicrosoftGraphTodoTask_ReminderDateTime as the provided MicrosoftGraphTodoTaskReminderDateTime1
func (t *MicrosoftGraphTodoTask_ReminderDateTime) FromMicrosoftGraphTodoTaskReminderDateTime1(v MicrosoftGraphTodoTaskReminderDateTime1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphTodoTaskReminderDateTime1 performs a merge with any union data inside the MicrosoftGraphTodoTask_ReminderDateTime, using the provided MicrosoftGraphTodoTaskReminderDateTime1
func (t *MicrosoftGraphTodoTask_ReminderDateTime) MergeMicrosoftGraphTodoTaskReminderDateTime1(v MicrosoftGraphTodoTaskReminderDateTime1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

func (t MicrosoftGraphTodoTask_ReminderDateTime) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *MicrosoftGraphTodoTask_ReminderDateTime) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsMicrosoftGraphDateTimeTimeZone returns the union data inside the MicrosoftGraphTodoTask_StartDateTime as a MicrosoftGraphDateTimeTimeZone
func (t MicrosoftGraphTodoTask_StartDateTime) AsMicrosoftGraphDateTimeTimeZone() (MicrosoftGraphDateTimeTimeZone, error) {
	var body MicrosoftGraphDateTimeTimeZone
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphDateTimeTimeZone overwrites any union data inside the MicrosoftGraphTodoTask_StartDateTime as the provided MicrosoftGraphDateTimeTimeZone
func (t *MicrosoftGraphTodoTask_StartDateTime) FromMicrosoftGraphDateTimeTimeZone(v MicrosoftGraphDateTimeTimeZone) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphDateTimeTimeZone performs a merge with any union data inside the MicrosoftGraphTodoTask_StartDateTime, using the provided MicrosoftGraphDateTimeTimeZone
func (t *MicrosoftGraphTodoTask_StartDateTime) MergeMicrosoftGraphDateTimeTimeZone(v MicrosoftGraphDateTimeTimeZone) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsMicrosoftGraphTodoTaskStartDateTime1 returns the union data inside the MicrosoftGraphTodoTask_StartDateTime as a MicrosoftGraphTodoTaskStartDateTime1
func (t MicrosoftGraphTodoTask_StartDateTime) AsMicrosoftGraphTodoTaskStartDateTime1() (MicrosoftGraphTodoTaskStartDateTime1, error) {
	var body MicrosoftGraphTodoTaskStartDateTime1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphTodoTaskStartDateTime1 overwrites any union data inside the MicrosoftGraphTodoTask_StartDateTime as the provided MicrosoftGraphTodoTaskStartDateTime1
func (t *MicrosoftGraphTodoTask_StartDateTime) FromMicrosoftGraphTodoTaskStartDateTime1(v MicrosoftGraphTodoTaskStartDateTime1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphTodoTaskStartDateTime1 performs a merge with any union data inside the MicrosoftGraphTodoTask_StartDateTime, using the provided MicrosoftGraphTodoTaskStartDateTime1
func (t *MicrosoftGraphTodoTask_StartDateTime) MergeMicrosoftGraphTodoTaskStartDateTime1(v MicrosoftGraphTodoTaskStartDateTime1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

func (t MicrosoftGraphTodoTask_StartDateTime) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *MicrosoftGraphTodoTask_StartDateTime) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsMicrosoftGraphEntity returns the union data inside the MicrosoftGraphTrending_Resource as a MicrosoftGraphEntity
func (t MicrosoftGraphTrending_Resource) AsMicrosoftGraphEntity() (MicrosoftGraphEntity, error) {
	var body MicrosoftGraphEntity
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphEntity overwrites any union data inside the MicrosoftGraphTrending_Resource as the provided MicrosoftGraphEntity
func (t *MicrosoftGraphTrending_Resource) FromMicrosoftGraphEntity(v MicrosoftGraphEntity) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphEntity performs a merge with any union data inside the MicrosoftGraphTrending_Resource, using the provided MicrosoftGraphEntity
func (t *MicrosoftGraphTrending_Resource) MergeMicrosoftGraphEntity(v MicrosoftGraphEntity) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsMicrosoftGraphTrendingResource1 returns the union data inside the MicrosoftGraphTrending_Resource as a MicrosoftGraphTrendingResource1
func (t MicrosoftGraphTrending_Resource) AsMicrosoftGraphTrendingResource1() (MicrosoftGraphTrendingResource1, error) {
	var body MicrosoftGraphTrendingResource1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphTrendingResource1 overwrites any union data inside the MicrosoftGraphTrending_Resource as the provided MicrosoftGraphTrendingResource1
func (t *MicrosoftGraphTrending_Resource) FromMicrosoftGraphTrendingResource1(v MicrosoftGraphTrendingResource1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphTrendingResource1 performs a merge with any union data inside the MicrosoftGraphTrending_Resource, using the provided MicrosoftGraphTrendingResource1
func (t *MicrosoftGraphTrending_Resource) MergeMicrosoftGraphTrendingResource1(v MicrosoftGraphTrendingResource1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

func (t MicrosoftGraphTrending_Resource) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *MicrosoftGraphTrending_Resource) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsMicrosoftGraphResourceReference returns the union data inside the MicrosoftGraphTrending_ResourceReference as a MicrosoftGraphResourceReference
func (t MicrosoftGraphTrending_ResourceReference) AsMicrosoftGraphResourceReference() (MicrosoftGraphResourceReference, error) {
	var body MicrosoftGraphResourceReference
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphResourceReference overwrites any union data inside the MicrosoftGraphTrending_ResourceReference as the provided MicrosoftGraphResourceReference
func (t *MicrosoftGraphTrending_ResourceReference) FromMicrosoftGraphResourceReference(v MicrosoftGraphResourceReference) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphResourceReference performs a merge with any union data inside the MicrosoftGraphTrending_ResourceReference, using the provided MicrosoftGraphResourceReference
func (t *MicrosoftGraphTrending_ResourceReference) MergeMicrosoftGraphResourceReference(v MicrosoftGraphResourceReference) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsMicrosoftGraphTrendingResourceReference1 returns the union data inside the MicrosoftGraphTrending_ResourceReference as a MicrosoftGraphTrendingResourceReference1
func (t MicrosoftGraphTrending_ResourceReference) AsMicrosoftGraphTrendingResourceReference1() (MicrosoftGraphTrendingResourceReference1, error) {
	var body MicrosoftGraphTrendingResourceReference1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphTrendingResourceReference1 overwrites any union data inside the MicrosoftGraphTrending_ResourceReference as the provided MicrosoftGraphTrendingResourceReference1
func (t *MicrosoftGraphTrending_ResourceReference) FromMicrosoftGraphTrendingResourceReference1(v MicrosoftGraphTrendingResourceReference1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphTrendingResourceReference1 performs a merge with any union data inside the MicrosoftGraphTrending_ResourceReference, using the provided MicrosoftGraphTrendingResourceReference1
func (t *MicrosoftGraphTrending_ResourceReference) MergeMicrosoftGraphTrendingResourceReference1(v MicrosoftGraphTrendingResourceReference1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

func (t MicrosoftGraphTrending_ResourceReference) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *MicrosoftGraphTrending_ResourceReference) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsMicrosoftGraphResourceVisualization returns the union data inside the MicrosoftGraphTrending_ResourceVisualization as a MicrosoftGraphResourceVisualization
func (t MicrosoftGraphTrending_ResourceVisualization) AsMicrosoftGraphResourceVisualization() (MicrosoftGraphResourceVisualization, error) {
	var body MicrosoftGraphResourceVisualization
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphResourceVisualization overwrites any union data inside the MicrosoftGraphTrending_ResourceVisualization as the provided MicrosoftGraphResourceVisualization
func (t *MicrosoftGraphTrending_ResourceVisualization) FromMicrosoftGraphResourceVisualization(v MicrosoftGraphResourceVisualization) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphResourceVisualization performs a merge with any union data inside the MicrosoftGraphTrending_ResourceVisualization, using the provided MicrosoftGraphResourceVisualization
func (t *MicrosoftGraphTrending_ResourceVisualization) MergeMicrosoftGraphResourceVisualization(v MicrosoftGraphResourceVisualization) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsMicrosoftGraphTrendingResourceVisualization1 returns the union data inside the MicrosoftGraphTrending_ResourceVisualization as a MicrosoftGraphTrendingResourceVisualization1
func (t MicrosoftGraphTrending_ResourceVisualization) AsMicrosoftGraphTrendingResourceVisualization1() (MicrosoftGraphTrendingResourceVisualization1, error) {
	var body MicrosoftGraphTrendingResourceVisualization1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphTrendingResourceVisualization1 overwrites any union data inside the MicrosoftGraphTrending_ResourceVisualization as the provided MicrosoftGraphTrendingResourceVisualization1
func (t *MicrosoftGraphTrending_ResourceVisualization) FromMicrosoftGraphTrendingResourceVisualization1(v MicrosoftGraphTrendingResourceVisualization1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphTrendingResourceVisualization1 performs a merge with any union data inside the MicrosoftGraphTrending_ResourceVisualization, using the provided MicrosoftGraphTrendingResourceVisualization1
func (t *MicrosoftGraphTrending_ResourceVisualization) MergeMicrosoftGraphTrendingResourceVisualization1(v MicrosoftGraphTrendingResourceVisualization1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

func (t MicrosoftGraphTrending_ResourceVisualization) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *MicrosoftGraphTrending_ResourceVisualization) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsMicrosoftGraphTrendingWeight0 returns the union data inside the MicrosoftGraphTrending_Weight as a MicrosoftGraphTrendingWeight0
func (t MicrosoftGraphTrending_Weight) AsMicrosoftGraphTrendingWeight0() (MicrosoftGraphTrendingWeight0, error) {
	var body MicrosoftGraphTrendingWeight0
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphTrendingWeight0 overwrites any union data inside the MicrosoftGraphTrending_Weight as the provided MicrosoftGraphTrendingWeight0
func (t *MicrosoftGraphTrending_Weight) FromMicrosoftGraphTrendingWeight0(v MicrosoftGraphTrendingWeight0) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphTrendingWeight0 performs a merge with any union data inside the MicrosoftGraphTrending_Weight, using the provided MicrosoftGraphTrendingWeight0
func (t *MicrosoftGraphTrending_Weight) MergeMicrosoftGraphTrendingWeight0(v MicrosoftGraphTrendingWeight0) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsMicrosoftGraphTrendingWeight1 returns the union data inside the MicrosoftGraphTrending_Weight as a MicrosoftGraphTrendingWeight1
func (t MicrosoftGraphTrending_Weight) AsMicrosoftGraphTrendingWeight1() (MicrosoftGraphTrendingWeight1, error) {
	var body MicrosoftGraphTrendingWeight1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphTrendingWeight1 overwrites any union data inside the MicrosoftGraphTrending_Weight as the provided MicrosoftGraphTrendingWeight1
func (t *MicrosoftGraphTrending_Weight) FromMicrosoftGraphTrendingWeight1(v MicrosoftGraphTrendingWeight1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphTrendingWeight1 performs a merge with any union data inside the MicrosoftGraphTrending_Weight, using the provided MicrosoftGraphTrendingWeight1
func (t *MicrosoftGraphTrending_Weight) MergeMicrosoftGraphTrendingWeight1(v MicrosoftGraphTrendingWeight1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsReferenceNumeric returns the union data inside the MicrosoftGraphTrending_Weight as a ReferenceNumeric
func (t MicrosoftGraphTrending_Weight) AsReferenceNumeric() (ReferenceNumeric, error) {
	var body ReferenceNumeric
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromReferenceNumeric overwrites any union data inside the MicrosoftGraphTrending_Weight as the provided ReferenceNumeric
func (t *MicrosoftGraphTrending_Weight) FromReferenceNumeric(v ReferenceNumeric) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeReferenceNumeric performs a merge with any union data inside the MicrosoftGraphTrending_Weight, using the provided ReferenceNumeric
func (t *MicrosoftGraphTrending_Weight) MergeReferenceNumeric(v ReferenceNumeric) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

func (t MicrosoftGraphTrending_Weight) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *MicrosoftGraphTrending_Weight) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsMicrosoftGraphUsageDetails returns the union data inside the MicrosoftGraphUsedInsight_LastUsed as a MicrosoftGraphUsageDetails
func (t MicrosoftGraphUsedInsight_LastUsed) AsMicrosoftGraphUsageDetails() (MicrosoftGraphUsageDetails, error) {
	var body MicrosoftGraphUsageDetails
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphUsageDetails overwrites any union data inside the MicrosoftGraphUsedInsight_LastUsed as the provided MicrosoftGraphUsageDetails
func (t *MicrosoftGraphUsedInsight_LastUsed) FromMicrosoftGraphUsageDetails(v MicrosoftGraphUsageDetails) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphUsageDetails performs a merge with any union data inside the MicrosoftGraphUsedInsight_LastUsed, using the provided MicrosoftGraphUsageDetails
func (t *MicrosoftGraphUsedInsight_LastUsed) MergeMicrosoftGraphUsageDetails(v MicrosoftGraphUsageDetails) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsMicrosoftGraphUsedInsightLastUsed1 returns the union data inside the MicrosoftGraphUsedInsight_LastUsed as a MicrosoftGraphUsedInsightLastUsed1
func (t MicrosoftGraphUsedInsight_LastUsed) AsMicrosoftGraphUsedInsightLastUsed1() (MicrosoftGraphUsedInsightLastUsed1, error) {
	var body MicrosoftGraphUsedInsightLastUsed1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphUsedInsightLastUsed1 overwrites any union data inside the MicrosoftGraphUsedInsight_LastUsed as the provided MicrosoftGraphUsedInsightLastUsed1
func (t *MicrosoftGraphUsedInsight_LastUsed) FromMicrosoftGraphUsedInsightLastUsed1(v MicrosoftGraphUsedInsightLastUsed1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphUsedInsightLastUsed1 performs a merge with any union data inside the MicrosoftGraphUsedInsight_LastUsed, using the provided MicrosoftGraphUsedInsightLastUsed1
func (t *MicrosoftGraphUsedInsight_LastUsed) MergeMicrosoftGraphUsedInsightLastUsed1(v MicrosoftGraphUsedInsightLastUsed1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

func (t MicrosoftGraphUsedInsight_LastUsed) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *MicrosoftGraphUsedInsight_LastUsed) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsMicrosoftGraphEntity returns the union data inside the MicrosoftGraphUsedInsight_Resource as a MicrosoftGraphEntity
func (t MicrosoftGraphUsedInsight_Resource) AsMicrosoftGraphEntity() (MicrosoftGraphEntity, error) {
	var body MicrosoftGraphEntity
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphEntity overwrites any union data inside the MicrosoftGraphUsedInsight_Resource as the provided MicrosoftGraphEntity
func (t *MicrosoftGraphUsedInsight_Resource) FromMicrosoftGraphEntity(v MicrosoftGraphEntity) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphEntity performs a merge with any union data inside the MicrosoftGraphUsedInsight_Resource, using the provided MicrosoftGraphEntity
func (t *MicrosoftGraphUsedInsight_Resource) MergeMicrosoftGraphEntity(v MicrosoftGraphEntity) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsMicrosoftGraphUsedInsightResource1 returns the union data inside the MicrosoftGraphUsedInsight_Resource as a MicrosoftGraphUsedInsightResource1
func (t MicrosoftGraphUsedInsight_Resource) AsMicrosoftGraphUsedInsightResource1() (MicrosoftGraphUsedInsightResource1, error) {
	var body MicrosoftGraphUsedInsightResource1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphUsedInsightResource1 overwrites any union data inside the MicrosoftGraphUsedInsight_Resource as the provided MicrosoftGraphUsedInsightResource1
func (t *MicrosoftGraphUsedInsight_Resource) FromMicrosoftGraphUsedInsightResource1(v MicrosoftGraphUsedInsightResource1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphUsedInsightResource1 performs a merge with any union data inside the MicrosoftGraphUsedInsight_Resource, using the provided MicrosoftGraphUsedInsightResource1
func (t *MicrosoftGraphUsedInsight_Resource) MergeMicrosoftGraphUsedInsightResource1(v MicrosoftGraphUsedInsightResource1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

func (t MicrosoftGraphUsedInsight_Resource) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *MicrosoftGraphUsedInsight_Resource) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsMicrosoftGraphResourceReference returns the union data inside the MicrosoftGraphUsedInsight_ResourceReference as a MicrosoftGraphResourceReference
func (t MicrosoftGraphUsedInsight_ResourceReference) AsMicrosoftGraphResourceReference() (MicrosoftGraphResourceReference, error) {
	var body MicrosoftGraphResourceReference
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphResourceReference overwrites any union data inside the MicrosoftGraphUsedInsight_ResourceReference as the provided MicrosoftGraphResourceReference
func (t *MicrosoftGraphUsedInsight_ResourceReference) FromMicrosoftGraphResourceReference(v MicrosoftGraphResourceReference) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphResourceReference performs a merge with any union data inside the MicrosoftGraphUsedInsight_ResourceReference, using the provided MicrosoftGraphResourceReference
func (t *MicrosoftGraphUsedInsight_ResourceReference) MergeMicrosoftGraphResourceReference(v MicrosoftGraphResourceReference) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsMicrosoftGraphUsedInsightResourceReference1 returns the union data inside the MicrosoftGraphUsedInsight_ResourceReference as a MicrosoftGraphUsedInsightResourceReference1
func (t MicrosoftGraphUsedInsight_ResourceReference) AsMicrosoftGraphUsedInsightResourceReference1() (MicrosoftGraphUsedInsightResourceReference1, error) {
	var body MicrosoftGraphUsedInsightResourceReference1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphUsedInsightResourceReference1 overwrites any union data inside the MicrosoftGraphUsedInsight_ResourceReference as the provided MicrosoftGraphUsedInsightResourceReference1
func (t *MicrosoftGraphUsedInsight_ResourceReference) FromMicrosoftGraphUsedInsightResourceReference1(v MicrosoftGraphUsedInsightResourceReference1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphUsedInsightResourceReference1 performs a merge with any union data inside the MicrosoftGraphUsedInsight_ResourceReference, using the provided MicrosoftGraphUsedInsightResourceReference1
func (t *MicrosoftGraphUsedInsight_ResourceReference) MergeMicrosoftGraphUsedInsightResourceReference1(v MicrosoftGraphUsedInsightResourceReference1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

func (t MicrosoftGraphUsedInsight_ResourceReference) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *MicrosoftGraphUsedInsight_ResourceReference) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsMicrosoftGraphResourceVisualization returns the union data inside the MicrosoftGraphUsedInsight_ResourceVisualization as a MicrosoftGraphResourceVisualization
func (t MicrosoftGraphUsedInsight_ResourceVisualization) AsMicrosoftGraphResourceVisualization() (MicrosoftGraphResourceVisualization, error) {
	var body MicrosoftGraphResourceVisualization
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphResourceVisualization overwrites any union data inside the MicrosoftGraphUsedInsight_ResourceVisualization as the provided MicrosoftGraphResourceVisualization
func (t *MicrosoftGraphUsedInsight_ResourceVisualization) FromMicrosoftGraphResourceVisualization(v MicrosoftGraphResourceVisualization) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphResourceVisualization performs a merge with any union data inside the MicrosoftGraphUsedInsight_ResourceVisualization, using the provided MicrosoftGraphResourceVisualization
func (t *MicrosoftGraphUsedInsight_ResourceVisualization) MergeMicrosoftGraphResourceVisualization(v MicrosoftGraphResourceVisualization) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsMicrosoftGraphUsedInsightResourceVisualization1 returns the union data inside the MicrosoftGraphUsedInsight_ResourceVisualization as a MicrosoftGraphUsedInsightResourceVisualization1
func (t MicrosoftGraphUsedInsight_ResourceVisualization) AsMicrosoftGraphUsedInsightResourceVisualization1() (MicrosoftGraphUsedInsightResourceVisualization1, error) {
	var body MicrosoftGraphUsedInsightResourceVisualization1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphUsedInsightResourceVisualization1 overwrites any union data inside the MicrosoftGraphUsedInsight_ResourceVisualization as the provided MicrosoftGraphUsedInsightResourceVisualization1
func (t *MicrosoftGraphUsedInsight_ResourceVisualization) FromMicrosoftGraphUsedInsightResourceVisualization1(v MicrosoftGraphUsedInsightResourceVisualization1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphUsedInsightResourceVisualization1 performs a merge with any union data inside the MicrosoftGraphUsedInsight_ResourceVisualization, using the provided MicrosoftGraphUsedInsightResourceVisualization1
func (t *MicrosoftGraphUsedInsight_ResourceVisualization) MergeMicrosoftGraphUsedInsightResourceVisualization1(v MicrosoftGraphUsedInsightResourceVisualization1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

func (t MicrosoftGraphUsedInsight_ResourceVisualization) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *MicrosoftGraphUsedInsight_ResourceVisualization) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsMicrosoftGraphAuthentication returns the union data inside the MicrosoftGraphUser_Authentication as a MicrosoftGraphAuthentication
func (t MicrosoftGraphUser_Authentication) AsMicrosoftGraphAuthentication() (MicrosoftGraphAuthentication, error) {
	var body MicrosoftGraphAuthentication
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphAuthentication overwrites any union data inside the MicrosoftGraphUser_Authentication as the provided MicrosoftGraphAuthentication
func (t *MicrosoftGraphUser_Authentication) FromMicrosoftGraphAuthentication(v MicrosoftGraphAuthentication) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphAuthentication performs a merge with any union data inside the MicrosoftGraphUser_Authentication, using the provided MicrosoftGraphAuthentication
func (t *MicrosoftGraphUser_Authentication) MergeMicrosoftGraphAuthentication(v MicrosoftGraphAuthentication) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsMicrosoftGraphUserAuthentication1 returns the union data inside the MicrosoftGraphUser_Authentication as a MicrosoftGraphUserAuthentication1
func (t MicrosoftGraphUser_Authentication) AsMicrosoftGraphUserAuthentication1() (MicrosoftGraphUserAuthentication1, error) {
	var body MicrosoftGraphUserAuthentication1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphUserAuthentication1 overwrites any union data inside the MicrosoftGraphUser_Authentication as the provided MicrosoftGraphUserAuthentication1
func (t *MicrosoftGraphUser_Authentication) FromMicrosoftGraphUserAuthentication1(v MicrosoftGraphUserAuthentication1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphUserAuthentication1 performs a merge with any union data inside the MicrosoftGraphUser_Authentication, using the provided MicrosoftGraphUserAuthentication1
func (t *MicrosoftGraphUser_Authentication) MergeMicrosoftGraphUserAuthentication1(v MicrosoftGraphUserAuthentication1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

func (t MicrosoftGraphUser_Authentication) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *MicrosoftGraphUser_Authentication) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsMicrosoftGraphAuthorizationInfo returns the union data inside the MicrosoftGraphUser_AuthorizationInfo as a MicrosoftGraphAuthorizationInfo
func (t MicrosoftGraphUser_AuthorizationInfo) AsMicrosoftGraphAuthorizationInfo() (MicrosoftGraphAuthorizationInfo, error) {
	var body MicrosoftGraphAuthorizationInfo
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphAuthorizationInfo overwrites any union data inside the MicrosoftGraphUser_AuthorizationInfo as the provided MicrosoftGraphAuthorizationInfo
func (t *MicrosoftGraphUser_AuthorizationInfo) FromMicrosoftGraphAuthorizationInfo(v MicrosoftGraphAuthorizationInfo) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphAuthorizationInfo performs a merge with any union data inside the MicrosoftGraphUser_AuthorizationInfo, using the provided MicrosoftGraphAuthorizationInfo
func (t *MicrosoftGraphUser_AuthorizationInfo) MergeMicrosoftGraphAuthorizationInfo(v MicrosoftGraphAuthorizationInfo) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsMicrosoftGraphUserAuthorizationInfo1 returns the union data inside the MicrosoftGraphUser_AuthorizationInfo as a MicrosoftGraphUserAuthorizationInfo1
func (t MicrosoftGraphUser_AuthorizationInfo) AsMicrosoftGraphUserAuthorizationInfo1() (MicrosoftGraphUserAuthorizationInfo1, error) {
	var body MicrosoftGraphUserAuthorizationInfo1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphUserAuthorizationInfo1 overwrites any union data inside the MicrosoftGraphUser_AuthorizationInfo as the provided MicrosoftGraphUserAuthorizationInfo1
func (t *MicrosoftGraphUser_AuthorizationInfo) FromMicrosoftGraphUserAuthorizationInfo1(v MicrosoftGraphUserAuthorizationInfo1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphUserAuthorizationInfo1 performs a merge with any union data inside the MicrosoftGraphUser_AuthorizationInfo, using the provided MicrosoftGraphUserAuthorizationInfo1
func (t *MicrosoftGraphUser_AuthorizationInfo) MergeMicrosoftGraphUserAuthorizationInfo1(v MicrosoftGraphUserAuthorizationInfo1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

func (t MicrosoftGraphUser_AuthorizationInfo) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *MicrosoftGraphUser_AuthorizationInfo) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsMicrosoftGraphCalendar returns the union data inside the MicrosoftGraphUser_Calendar as a MicrosoftGraphCalendar
func (t MicrosoftGraphUser_Calendar) AsMicrosoftGraphCalendar() (MicrosoftGraphCalendar, error) {
	var body MicrosoftGraphCalendar
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphCalendar overwrites any union data inside the MicrosoftGraphUser_Calendar as the provided MicrosoftGraphCalendar
func (t *MicrosoftGraphUser_Calendar) FromMicrosoftGraphCalendar(v MicrosoftGraphCalendar) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphCalendar performs a merge with any union data inside the MicrosoftGraphUser_Calendar, using the provided MicrosoftGraphCalendar
func (t *MicrosoftGraphUser_Calendar) MergeMicrosoftGraphCalendar(v MicrosoftGraphCalendar) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsMicrosoftGraphUserCalendar1 returns the union data inside the MicrosoftGraphUser_Calendar as a MicrosoftGraphUserCalendar1
func (t MicrosoftGraphUser_Calendar) AsMicrosoftGraphUserCalendar1() (MicrosoftGraphUserCalendar1, error) {
	var body MicrosoftGraphUserCalendar1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphUserCalendar1 overwrites any union data inside the MicrosoftGraphUser_Calendar as the provided MicrosoftGraphUserCalendar1
func (t *MicrosoftGraphUser_Calendar) FromMicrosoftGraphUserCalendar1(v MicrosoftGraphUserCalendar1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphUserCalendar1 performs a merge with any union data inside the MicrosoftGraphUser_Calendar, using the provided MicrosoftGraphUserCalendar1
func (t *MicrosoftGraphUser_Calendar) MergeMicrosoftGraphUserCalendar1(v MicrosoftGraphUserCalendar1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

func (t MicrosoftGraphUser_Calendar) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *MicrosoftGraphUser_Calendar) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsMicrosoftGraphCustomSecurityAttributeValue returns the union data inside the MicrosoftGraphUser_CustomSecurityAttributes as a MicrosoftGraphCustomSecurityAttributeValue
func (t MicrosoftGraphUser_CustomSecurityAttributes) AsMicrosoftGraphCustomSecurityAttributeValue() (MicrosoftGraphCustomSecurityAttributeValue, error) {
	var body MicrosoftGraphCustomSecurityAttributeValue
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphCustomSecurityAttributeValue overwrites any union data inside the MicrosoftGraphUser_CustomSecurityAttributes as the provided MicrosoftGraphCustomSecurityAttributeValue
func (t *MicrosoftGraphUser_CustomSecurityAttributes) FromMicrosoftGraphCustomSecurityAttributeValue(v MicrosoftGraphCustomSecurityAttributeValue) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphCustomSecurityAttributeValue performs a merge with any union data inside the MicrosoftGraphUser_CustomSecurityAttributes, using the provided MicrosoftGraphCustomSecurityAttributeValue
func (t *MicrosoftGraphUser_CustomSecurityAttributes) MergeMicrosoftGraphCustomSecurityAttributeValue(v MicrosoftGraphCustomSecurityAttributeValue) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsMicrosoftGraphUserCustomSecurityAttributes1 returns the union data inside the MicrosoftGraphUser_CustomSecurityAttributes as a MicrosoftGraphUserCustomSecurityAttributes1
func (t MicrosoftGraphUser_CustomSecurityAttributes) AsMicrosoftGraphUserCustomSecurityAttributes1() (MicrosoftGraphUserCustomSecurityAttributes1, error) {
	var body MicrosoftGraphUserCustomSecurityAttributes1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphUserCustomSecurityAttributes1 overwrites any union data inside the MicrosoftGraphUser_CustomSecurityAttributes as the provided MicrosoftGraphUserCustomSecurityAttributes1
func (t *MicrosoftGraphUser_CustomSecurityAttributes) FromMicrosoftGraphUserCustomSecurityAttributes1(v MicrosoftGraphUserCustomSecurityAttributes1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphUserCustomSecurityAttributes1 performs a merge with any union data inside the MicrosoftGraphUser_CustomSecurityAttributes, using the provided MicrosoftGraphUserCustomSecurityAttributes1
func (t *MicrosoftGraphUser_CustomSecurityAttributes) MergeMicrosoftGraphUserCustomSecurityAttributes1(v MicrosoftGraphUserCustomSecurityAttributes1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

func (t MicrosoftGraphUser_CustomSecurityAttributes) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *MicrosoftGraphUser_CustomSecurityAttributes) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsMicrosoftGraphDrive returns the union data inside the MicrosoftGraphUser_Drive as a MicrosoftGraphDrive
func (t MicrosoftGraphUser_Drive) AsMicrosoftGraphDrive() (MicrosoftGraphDrive, error) {
	var body MicrosoftGraphDrive
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphDrive overwrites any union data inside the MicrosoftGraphUser_Drive as the provided MicrosoftGraphDrive
func (t *MicrosoftGraphUser_Drive) FromMicrosoftGraphDrive(v MicrosoftGraphDrive) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphDrive performs a merge with any union data inside the MicrosoftGraphUser_Drive, using the provided MicrosoftGraphDrive
func (t *MicrosoftGraphUser_Drive) MergeMicrosoftGraphDrive(v MicrosoftGraphDrive) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsMicrosoftGraphUserDrive1 returns the union data inside the MicrosoftGraphUser_Drive as a MicrosoftGraphUserDrive1
func (t MicrosoftGraphUser_Drive) AsMicrosoftGraphUserDrive1() (MicrosoftGraphUserDrive1, error) {
	var body MicrosoftGraphUserDrive1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphUserDrive1 overwrites any union data inside the MicrosoftGraphUser_Drive as the provided MicrosoftGraphUserDrive1
func (t *MicrosoftGraphUser_Drive) FromMicrosoftGraphUserDrive1(v MicrosoftGraphUserDrive1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphUserDrive1 performs a merge with any union data inside the MicrosoftGraphUser_Drive, using the provided MicrosoftGraphUserDrive1
func (t *MicrosoftGraphUser_Drive) MergeMicrosoftGraphUserDrive1(v MicrosoftGraphUserDrive1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

func (t MicrosoftGraphUser_Drive) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *MicrosoftGraphUser_Drive) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsMicrosoftGraphEmployeeExperienceUser returns the union data inside the MicrosoftGraphUser_EmployeeExperience as a MicrosoftGraphEmployeeExperienceUser
func (t MicrosoftGraphUser_EmployeeExperience) AsMicrosoftGraphEmployeeExperienceUser() (MicrosoftGraphEmployeeExperienceUser, error) {
	var body MicrosoftGraphEmployeeExperienceUser
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphEmployeeExperienceUser overwrites any union data inside the MicrosoftGraphUser_EmployeeExperience as the provided MicrosoftGraphEmployeeExperienceUser
func (t *MicrosoftGraphUser_EmployeeExperience) FromMicrosoftGraphEmployeeExperienceUser(v MicrosoftGraphEmployeeExperienceUser) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphEmployeeExperienceUser performs a merge with any union data inside the MicrosoftGraphUser_EmployeeExperience, using the provided MicrosoftGraphEmployeeExperienceUser
func (t *MicrosoftGraphUser_EmployeeExperience) MergeMicrosoftGraphEmployeeExperienceUser(v MicrosoftGraphEmployeeExperienceUser) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsMicrosoftGraphUserEmployeeExperience1 returns the union data inside the MicrosoftGraphUser_EmployeeExperience as a MicrosoftGraphUserEmployeeExperience1
func (t MicrosoftGraphUser_EmployeeExperience) AsMicrosoftGraphUserEmployeeExperience1() (MicrosoftGraphUserEmployeeExperience1, error) {
	var body MicrosoftGraphUserEmployeeExperience1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphUserEmployeeExperience1 overwrites any union data inside the MicrosoftGraphUser_EmployeeExperience as the provided MicrosoftGraphUserEmployeeExperience1
func (t *MicrosoftGraphUser_EmployeeExperience) FromMicrosoftGraphUserEmployeeExperience1(v MicrosoftGraphUserEmployeeExperience1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphUserEmployeeExperience1 performs a merge with any union data inside the MicrosoftGraphUser_EmployeeExperience, using the provided MicrosoftGraphUserEmployeeExperience1
func (t *MicrosoftGraphUser_EmployeeExperience) MergeMicrosoftGraphUserEmployeeExperience1(v MicrosoftGraphUserEmployeeExperience1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

func (t MicrosoftGraphUser_EmployeeExperience) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *MicrosoftGraphUser_EmployeeExperience) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsMicrosoftGraphEmployeeOrgData returns the union data inside the MicrosoftGraphUser_EmployeeOrgData as a MicrosoftGraphEmployeeOrgData
func (t MicrosoftGraphUser_EmployeeOrgData) AsMicrosoftGraphEmployeeOrgData() (MicrosoftGraphEmployeeOrgData, error) {
	var body MicrosoftGraphEmployeeOrgData
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphEmployeeOrgData overwrites any union data inside the MicrosoftGraphUser_EmployeeOrgData as the provided MicrosoftGraphEmployeeOrgData
func (t *MicrosoftGraphUser_EmployeeOrgData) FromMicrosoftGraphEmployeeOrgData(v MicrosoftGraphEmployeeOrgData) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphEmployeeOrgData performs a merge with any union data inside the MicrosoftGraphUser_EmployeeOrgData, using the provided MicrosoftGraphEmployeeOrgData
func (t *MicrosoftGraphUser_EmployeeOrgData) MergeMicrosoftGraphEmployeeOrgData(v MicrosoftGraphEmployeeOrgData) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsMicrosoftGraphUserEmployeeOrgData1 returns the union data inside the MicrosoftGraphUser_EmployeeOrgData as a MicrosoftGraphUserEmployeeOrgData1
func (t MicrosoftGraphUser_EmployeeOrgData) AsMicrosoftGraphUserEmployeeOrgData1() (MicrosoftGraphUserEmployeeOrgData1, error) {
	var body MicrosoftGraphUserEmployeeOrgData1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphUserEmployeeOrgData1 overwrites any union data inside the MicrosoftGraphUser_EmployeeOrgData as the provided MicrosoftGraphUserEmployeeOrgData1
func (t *MicrosoftGraphUser_EmployeeOrgData) FromMicrosoftGraphUserEmployeeOrgData1(v MicrosoftGraphUserEmployeeOrgData1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphUserEmployeeOrgData1 performs a merge with any union data inside the MicrosoftGraphUser_EmployeeOrgData, using the provided MicrosoftGraphUserEmployeeOrgData1
func (t *MicrosoftGraphUser_EmployeeOrgData) MergeMicrosoftGraphUserEmployeeOrgData1(v MicrosoftGraphUserEmployeeOrgData1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

func (t MicrosoftGraphUser_EmployeeOrgData) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *MicrosoftGraphUser_EmployeeOrgData) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsMicrosoftGraphObjectIdentity returns the union data inside the MicrosoftGraphUser_Identities_Item as a MicrosoftGraphObjectIdentity
func (t MicrosoftGraphUser_Identities_Item) AsMicrosoftGraphObjectIdentity() (MicrosoftGraphObjectIdentity, error) {
	var body MicrosoftGraphObjectIdentity
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphObjectIdentity overwrites any union data inside the MicrosoftGraphUser_Identities_Item as the provided MicrosoftGraphObjectIdentity
func (t *MicrosoftGraphUser_Identities_Item) FromMicrosoftGraphObjectIdentity(v MicrosoftGraphObjectIdentity) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphObjectIdentity performs a merge with any union data inside the MicrosoftGraphUser_Identities_Item, using the provided MicrosoftGraphObjectIdentity
func (t *MicrosoftGraphUser_Identities_Item) MergeMicrosoftGraphObjectIdentity(v MicrosoftGraphObjectIdentity) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsMicrosoftGraphUserIdentities1 returns the union data inside the MicrosoftGraphUser_Identities_Item as a MicrosoftGraphUserIdentities1
func (t MicrosoftGraphUser_Identities_Item) AsMicrosoftGraphUserIdentities1() (MicrosoftGraphUserIdentities1, error) {
	var body MicrosoftGraphUserIdentities1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphUserIdentities1 overwrites any union data inside the MicrosoftGraphUser_Identities_Item as the provided MicrosoftGraphUserIdentities1
func (t *MicrosoftGraphUser_Identities_Item) FromMicrosoftGraphUserIdentities1(v MicrosoftGraphUserIdentities1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphUserIdentities1 performs a merge with any union data inside the MicrosoftGraphUser_Identities_Item, using the provided MicrosoftGraphUserIdentities1
func (t *MicrosoftGraphUser_Identities_Item) MergeMicrosoftGraphUserIdentities1(v MicrosoftGraphUserIdentities1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

func (t MicrosoftGraphUser_Identities_Item) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *MicrosoftGraphUser_Identities_Item) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsMicrosoftGraphInferenceClassification returns the union data inside the MicrosoftGraphUser_InferenceClassification as a MicrosoftGraphInferenceClassification
func (t MicrosoftGraphUser_InferenceClassification) AsMicrosoftGraphInferenceClassification() (MicrosoftGraphInferenceClassification, error) {
	var body MicrosoftGraphInferenceClassification
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphInferenceClassification overwrites any union data inside the MicrosoftGraphUser_InferenceClassification as the provided MicrosoftGraphInferenceClassification
func (t *MicrosoftGraphUser_InferenceClassification) FromMicrosoftGraphInferenceClassification(v MicrosoftGraphInferenceClassification) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphInferenceClassification performs a merge with any union data inside the MicrosoftGraphUser_InferenceClassification, using the provided MicrosoftGraphInferenceClassification
func (t *MicrosoftGraphUser_InferenceClassification) MergeMicrosoftGraphInferenceClassification(v MicrosoftGraphInferenceClassification) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsMicrosoftGraphUserInferenceClassification1 returns the union data inside the MicrosoftGraphUser_InferenceClassification as a MicrosoftGraphUserInferenceClassification1
func (t MicrosoftGraphUser_InferenceClassification) AsMicrosoftGraphUserInferenceClassification1() (MicrosoftGraphUserInferenceClassification1, error) {
	var body MicrosoftGraphUserInferenceClassification1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphUserInferenceClassification1 overwrites any union data inside the MicrosoftGraphUser_InferenceClassification as the provided MicrosoftGraphUserInferenceClassification1
func (t *MicrosoftGraphUser_InferenceClassification) FromMicrosoftGraphUserInferenceClassification1(v MicrosoftGraphUserInferenceClassification1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphUserInferenceClassification1 performs a merge with any union data inside the MicrosoftGraphUser_InferenceClassification, using the provided MicrosoftGraphUserInferenceClassification1
func (t *MicrosoftGraphUser_InferenceClassification) MergeMicrosoftGraphUserInferenceClassification1(v MicrosoftGraphUserInferenceClassification1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

func (t MicrosoftGraphUser_InferenceClassification) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *MicrosoftGraphUser_InferenceClassification) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsMicrosoftGraphOfficeGraphInsights returns the union data inside the MicrosoftGraphUser_Insights as a MicrosoftGraphOfficeGraphInsights
func (t MicrosoftGraphUser_Insights) AsMicrosoftGraphOfficeGraphInsights() (MicrosoftGraphOfficeGraphInsights, error) {
	var body MicrosoftGraphOfficeGraphInsights
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphOfficeGraphInsights overwrites any union data inside the MicrosoftGraphUser_Insights as the provided MicrosoftGraphOfficeGraphInsights
func (t *MicrosoftGraphUser_Insights) FromMicrosoftGraphOfficeGraphInsights(v MicrosoftGraphOfficeGraphInsights) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphOfficeGraphInsights performs a merge with any union data inside the MicrosoftGraphUser_Insights, using the provided MicrosoftGraphOfficeGraphInsights
func (t *MicrosoftGraphUser_Insights) MergeMicrosoftGraphOfficeGraphInsights(v MicrosoftGraphOfficeGraphInsights) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsMicrosoftGraphUserInsights1 returns the union data inside the MicrosoftGraphUser_Insights as a MicrosoftGraphUserInsights1
func (t MicrosoftGraphUser_Insights) AsMicrosoftGraphUserInsights1() (MicrosoftGraphUserInsights1, error) {
	var body MicrosoftGraphUserInsights1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphUserInsights1 overwrites any union data inside the MicrosoftGraphUser_Insights as the provided MicrosoftGraphUserInsights1
func (t *MicrosoftGraphUser_Insights) FromMicrosoftGraphUserInsights1(v MicrosoftGraphUserInsights1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphUserInsights1 performs a merge with any union data inside the MicrosoftGraphUser_Insights, using the provided MicrosoftGraphUserInsights1
func (t *MicrosoftGraphUser_Insights) MergeMicrosoftGraphUserInsights1(v MicrosoftGraphUserInsights1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

func (t MicrosoftGraphUser_Insights) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *MicrosoftGraphUser_Insights) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsMicrosoftGraphLicenseAssignmentState returns the union data inside the MicrosoftGraphUser_LicenseAssignmentStates_Item as a MicrosoftGraphLicenseAssignmentState
func (t MicrosoftGraphUser_LicenseAssignmentStates_Item) AsMicrosoftGraphLicenseAssignmentState() (MicrosoftGraphLicenseAssignmentState, error) {
	var body MicrosoftGraphLicenseAssignmentState
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphLicenseAssignmentState overwrites any union data inside the MicrosoftGraphUser_LicenseAssignmentStates_Item as the provided MicrosoftGraphLicenseAssignmentState
func (t *MicrosoftGraphUser_LicenseAssignmentStates_Item) FromMicrosoftGraphLicenseAssignmentState(v MicrosoftGraphLicenseAssignmentState) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphLicenseAssignmentState performs a merge with any union data inside the MicrosoftGraphUser_LicenseAssignmentStates_Item, using the provided MicrosoftGraphLicenseAssignmentState
func (t *MicrosoftGraphUser_LicenseAssignmentStates_Item) MergeMicrosoftGraphLicenseAssignmentState(v MicrosoftGraphLicenseAssignmentState) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsMicrosoftGraphUserLicenseAssignmentStates1 returns the union data inside the MicrosoftGraphUser_LicenseAssignmentStates_Item as a MicrosoftGraphUserLicenseAssignmentStates1
func (t MicrosoftGraphUser_LicenseAssignmentStates_Item) AsMicrosoftGraphUserLicenseAssignmentStates1() (MicrosoftGraphUserLicenseAssignmentStates1, error) {
	var body MicrosoftGraphUserLicenseAssignmentStates1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphUserLicenseAssignmentStates1 overwrites any union data inside the MicrosoftGraphUser_LicenseAssignmentStates_Item as the provided MicrosoftGraphUserLicenseAssignmentStates1
func (t *MicrosoftGraphUser_LicenseAssignmentStates_Item) FromMicrosoftGraphUserLicenseAssignmentStates1(v MicrosoftGraphUserLicenseAssignmentStates1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphUserLicenseAssignmentStates1 performs a merge with any union data inside the MicrosoftGraphUser_LicenseAssignmentStates_Item, using the provided MicrosoftGraphUserLicenseAssignmentStates1
func (t *MicrosoftGraphUser_LicenseAssignmentStates_Item) MergeMicrosoftGraphUserLicenseAssignmentStates1(v MicrosoftGraphUserLicenseAssignmentStates1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

func (t MicrosoftGraphUser_LicenseAssignmentStates_Item) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *MicrosoftGraphUser_LicenseAssignmentStates_Item) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsMicrosoftGraphMailboxSettings returns the union data inside the MicrosoftGraphUser_MailboxSettings as a MicrosoftGraphMailboxSettings
func (t MicrosoftGraphUser_MailboxSettings) AsMicrosoftGraphMailboxSettings() (MicrosoftGraphMailboxSettings, error) {
	var body MicrosoftGraphMailboxSettings
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphMailboxSettings overwrites any union data inside the MicrosoftGraphUser_MailboxSettings as the provided MicrosoftGraphMailboxSettings
func (t *MicrosoftGraphUser_MailboxSettings) FromMicrosoftGraphMailboxSettings(v MicrosoftGraphMailboxSettings) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphMailboxSettings performs a merge with any union data inside the MicrosoftGraphUser_MailboxSettings, using the provided MicrosoftGraphMailboxSettings
func (t *MicrosoftGraphUser_MailboxSettings) MergeMicrosoftGraphMailboxSettings(v MicrosoftGraphMailboxSettings) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsMicrosoftGraphUserMailboxSettings1 returns the union data inside the MicrosoftGraphUser_MailboxSettings as a MicrosoftGraphUserMailboxSettings1
func (t MicrosoftGraphUser_MailboxSettings) AsMicrosoftGraphUserMailboxSettings1() (MicrosoftGraphUserMailboxSettings1, error) {
	var body MicrosoftGraphUserMailboxSettings1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphUserMailboxSettings1 overwrites any union data inside the MicrosoftGraphUser_MailboxSettings as the provided MicrosoftGraphUserMailboxSettings1
func (t *MicrosoftGraphUser_MailboxSettings) FromMicrosoftGraphUserMailboxSettings1(v MicrosoftGraphUserMailboxSettings1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphUserMailboxSettings1 performs a merge with any union data inside the MicrosoftGraphUser_MailboxSettings, using the provided MicrosoftGraphUserMailboxSettings1
func (t *MicrosoftGraphUser_MailboxSettings) MergeMicrosoftGraphUserMailboxSettings1(v MicrosoftGraphUserMailboxSettings1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

func (t MicrosoftGraphUser_MailboxSettings) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *MicrosoftGraphUser_MailboxSettings) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsMicrosoftGraphDirectoryObject returns the union data inside the MicrosoftGraphUser_Manager as a MicrosoftGraphDirectoryObject
func (t MicrosoftGraphUser_Manager) AsMicrosoftGraphDirectoryObject() (MicrosoftGraphDirectoryObject, error) {
	var body MicrosoftGraphDirectoryObject
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphDirectoryObject overwrites any union data inside the MicrosoftGraphUser_Manager as the provided MicrosoftGraphDirectoryObject
func (t *MicrosoftGraphUser_Manager) FromMicrosoftGraphDirectoryObject(v MicrosoftGraphDirectoryObject) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphDirectoryObject performs a merge with any union data inside the MicrosoftGraphUser_Manager, using the provided MicrosoftGraphDirectoryObject
func (t *MicrosoftGraphUser_Manager) MergeMicrosoftGraphDirectoryObject(v MicrosoftGraphDirectoryObject) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsMicrosoftGraphUserManager1 returns the union data inside the MicrosoftGraphUser_Manager as a MicrosoftGraphUserManager1
func (t MicrosoftGraphUser_Manager) AsMicrosoftGraphUserManager1() (MicrosoftGraphUserManager1, error) {
	var body MicrosoftGraphUserManager1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphUserManager1 overwrites any union data inside the MicrosoftGraphUser_Manager as the provided MicrosoftGraphUserManager1
func (t *MicrosoftGraphUser_Manager) FromMicrosoftGraphUserManager1(v MicrosoftGraphUserManager1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphUserManager1 performs a merge with any union data inside the MicrosoftGraphUser_Manager, using the provided MicrosoftGraphUserManager1
func (t *MicrosoftGraphUser_Manager) MergeMicrosoftGraphUserManager1(v MicrosoftGraphUserManager1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

func (t MicrosoftGraphUser_Manager) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *MicrosoftGraphUser_Manager) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsMicrosoftGraphOnPremisesExtensionAttributes returns the union data inside the MicrosoftGraphUser_OnPremisesExtensionAttributes as a MicrosoftGraphOnPremisesExtensionAttributes
func (t MicrosoftGraphUser_OnPremisesExtensionAttributes) AsMicrosoftGraphOnPremisesExtensionAttributes() (MicrosoftGraphOnPremisesExtensionAttributes, error) {
	var body MicrosoftGraphOnPremisesExtensionAttributes
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphOnPremisesExtensionAttributes overwrites any union data inside the MicrosoftGraphUser_OnPremisesExtensionAttributes as the provided MicrosoftGraphOnPremisesExtensionAttributes
func (t *MicrosoftGraphUser_OnPremisesExtensionAttributes) FromMicrosoftGraphOnPremisesExtensionAttributes(v MicrosoftGraphOnPremisesExtensionAttributes) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphOnPremisesExtensionAttributes performs a merge with any union data inside the MicrosoftGraphUser_OnPremisesExtensionAttributes, using the provided MicrosoftGraphOnPremisesExtensionAttributes
func (t *MicrosoftGraphUser_OnPremisesExtensionAttributes) MergeMicrosoftGraphOnPremisesExtensionAttributes(v MicrosoftGraphOnPremisesExtensionAttributes) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsMicrosoftGraphUserOnPremisesExtensionAttributes1 returns the union data inside the MicrosoftGraphUser_OnPremisesExtensionAttributes as a MicrosoftGraphUserOnPremisesExtensionAttributes1
func (t MicrosoftGraphUser_OnPremisesExtensionAttributes) AsMicrosoftGraphUserOnPremisesExtensionAttributes1() (MicrosoftGraphUserOnPremisesExtensionAttributes1, error) {
	var body MicrosoftGraphUserOnPremisesExtensionAttributes1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphUserOnPremisesExtensionAttributes1 overwrites any union data inside the MicrosoftGraphUser_OnPremisesExtensionAttributes as the provided MicrosoftGraphUserOnPremisesExtensionAttributes1
func (t *MicrosoftGraphUser_OnPremisesExtensionAttributes) FromMicrosoftGraphUserOnPremisesExtensionAttributes1(v MicrosoftGraphUserOnPremisesExtensionAttributes1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphUserOnPremisesExtensionAttributes1 performs a merge with any union data inside the MicrosoftGraphUser_OnPremisesExtensionAttributes, using the provided MicrosoftGraphUserOnPremisesExtensionAttributes1
func (t *MicrosoftGraphUser_OnPremisesExtensionAttributes) MergeMicrosoftGraphUserOnPremisesExtensionAttributes1(v MicrosoftGraphUserOnPremisesExtensionAttributes1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

func (t MicrosoftGraphUser_OnPremisesExtensionAttributes) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *MicrosoftGraphUser_OnPremisesExtensionAttributes) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsMicrosoftGraphOnPremisesProvisioningError returns the union data inside the MicrosoftGraphUser_OnPremisesProvisioningErrors_Item as a MicrosoftGraphOnPremisesProvisioningError
func (t MicrosoftGraphUser_OnPremisesProvisioningErrors_Item) AsMicrosoftGraphOnPremisesProvisioningError() (MicrosoftGraphOnPremisesProvisioningError, error) {
	var body MicrosoftGraphOnPremisesProvisioningError
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphOnPremisesProvisioningError overwrites any union data inside the MicrosoftGraphUser_OnPremisesProvisioningErrors_Item as the provided MicrosoftGraphOnPremisesProvisioningError
func (t *MicrosoftGraphUser_OnPremisesProvisioningErrors_Item) FromMicrosoftGraphOnPremisesProvisioningError(v MicrosoftGraphOnPremisesProvisioningError) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphOnPremisesProvisioningError performs a merge with any union data inside the MicrosoftGraphUser_OnPremisesProvisioningErrors_Item, using the provided MicrosoftGraphOnPremisesProvisioningError
func (t *MicrosoftGraphUser_OnPremisesProvisioningErrors_Item) MergeMicrosoftGraphOnPremisesProvisioningError(v MicrosoftGraphOnPremisesProvisioningError) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsMicrosoftGraphUserOnPremisesProvisioningErrors1 returns the union data inside the MicrosoftGraphUser_OnPremisesProvisioningErrors_Item as a MicrosoftGraphUserOnPremisesProvisioningErrors1
func (t MicrosoftGraphUser_OnPremisesProvisioningErrors_Item) AsMicrosoftGraphUserOnPremisesProvisioningErrors1() (MicrosoftGraphUserOnPremisesProvisioningErrors1, error) {
	var body MicrosoftGraphUserOnPremisesProvisioningErrors1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphUserOnPremisesProvisioningErrors1 overwrites any union data inside the MicrosoftGraphUser_OnPremisesProvisioningErrors_Item as the provided MicrosoftGraphUserOnPremisesProvisioningErrors1
func (t *MicrosoftGraphUser_OnPremisesProvisioningErrors_Item) FromMicrosoftGraphUserOnPremisesProvisioningErrors1(v MicrosoftGraphUserOnPremisesProvisioningErrors1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphUserOnPremisesProvisioningErrors1 performs a merge with any union data inside the MicrosoftGraphUser_OnPremisesProvisioningErrors_Item, using the provided MicrosoftGraphUserOnPremisesProvisioningErrors1
func (t *MicrosoftGraphUser_OnPremisesProvisioningErrors_Item) MergeMicrosoftGraphUserOnPremisesProvisioningErrors1(v MicrosoftGraphUserOnPremisesProvisioningErrors1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

func (t MicrosoftGraphUser_OnPremisesProvisioningErrors_Item) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *MicrosoftGraphUser_OnPremisesProvisioningErrors_Item) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsMicrosoftGraphOnenote returns the union data inside the MicrosoftGraphUser_Onenote as a MicrosoftGraphOnenote
func (t MicrosoftGraphUser_Onenote) AsMicrosoftGraphOnenote() (MicrosoftGraphOnenote, error) {
	var body MicrosoftGraphOnenote
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphOnenote overwrites any union data inside the MicrosoftGraphUser_Onenote as the provided MicrosoftGraphOnenote
func (t *MicrosoftGraphUser_Onenote) FromMicrosoftGraphOnenote(v MicrosoftGraphOnenote) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphOnenote performs a merge with any union data inside the MicrosoftGraphUser_Onenote, using the provided MicrosoftGraphOnenote
func (t *MicrosoftGraphUser_Onenote) MergeMicrosoftGraphOnenote(v MicrosoftGraphOnenote) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsMicrosoftGraphUserOnenote1 returns the union data inside the MicrosoftGraphUser_Onenote as a MicrosoftGraphUserOnenote1
func (t MicrosoftGraphUser_Onenote) AsMicrosoftGraphUserOnenote1() (MicrosoftGraphUserOnenote1, error) {
	var body MicrosoftGraphUserOnenote1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphUserOnenote1 overwrites any union data inside the MicrosoftGraphUser_Onenote as the provided MicrosoftGraphUserOnenote1
func (t *MicrosoftGraphUser_Onenote) FromMicrosoftGraphUserOnenote1(v MicrosoftGraphUserOnenote1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphUserOnenote1 performs a merge with any union data inside the MicrosoftGraphUser_Onenote, using the provided MicrosoftGraphUserOnenote1
func (t *MicrosoftGraphUser_Onenote) MergeMicrosoftGraphUserOnenote1(v MicrosoftGraphUserOnenote1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

func (t MicrosoftGraphUser_Onenote) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *MicrosoftGraphUser_Onenote) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsMicrosoftGraphOutlookUser returns the union data inside the MicrosoftGraphUser_Outlook as a MicrosoftGraphOutlookUser
func (t MicrosoftGraphUser_Outlook) AsMicrosoftGraphOutlookUser() (MicrosoftGraphOutlookUser, error) {
	var body MicrosoftGraphOutlookUser
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphOutlookUser overwrites any union data inside the MicrosoftGraphUser_Outlook as the provided MicrosoftGraphOutlookUser
func (t *MicrosoftGraphUser_Outlook) FromMicrosoftGraphOutlookUser(v MicrosoftGraphOutlookUser) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphOutlookUser performs a merge with any union data inside the MicrosoftGraphUser_Outlook, using the provided MicrosoftGraphOutlookUser
func (t *MicrosoftGraphUser_Outlook) MergeMicrosoftGraphOutlookUser(v MicrosoftGraphOutlookUser) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsMicrosoftGraphUserOutlook1 returns the union data inside the MicrosoftGraphUser_Outlook as a MicrosoftGraphUserOutlook1
func (t MicrosoftGraphUser_Outlook) AsMicrosoftGraphUserOutlook1() (MicrosoftGraphUserOutlook1, error) {
	var body MicrosoftGraphUserOutlook1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphUserOutlook1 overwrites any union data inside the MicrosoftGraphUser_Outlook as the provided MicrosoftGraphUserOutlook1
func (t *MicrosoftGraphUser_Outlook) FromMicrosoftGraphUserOutlook1(v MicrosoftGraphUserOutlook1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphUserOutlook1 performs a merge with any union data inside the MicrosoftGraphUser_Outlook, using the provided MicrosoftGraphUserOutlook1
func (t *MicrosoftGraphUser_Outlook) MergeMicrosoftGraphUserOutlook1(v MicrosoftGraphUserOutlook1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

func (t MicrosoftGraphUser_Outlook) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *MicrosoftGraphUser_Outlook) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsMicrosoftGraphPasswordProfile returns the union data inside the MicrosoftGraphUser_PasswordProfile as a MicrosoftGraphPasswordProfile
func (t MicrosoftGraphUser_PasswordProfile) AsMicrosoftGraphPasswordProfile() (MicrosoftGraphPasswordProfile, error) {
	var body MicrosoftGraphPasswordProfile
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphPasswordProfile overwrites any union data inside the MicrosoftGraphUser_PasswordProfile as the provided MicrosoftGraphPasswordProfile
func (t *MicrosoftGraphUser_PasswordProfile) FromMicrosoftGraphPasswordProfile(v MicrosoftGraphPasswordProfile) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphPasswordProfile performs a merge with any union data inside the MicrosoftGraphUser_PasswordProfile, using the provided MicrosoftGraphPasswordProfile
func (t *MicrosoftGraphUser_PasswordProfile) MergeMicrosoftGraphPasswordProfile(v MicrosoftGraphPasswordProfile) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsMicrosoftGraphUserPasswordProfile1 returns the union data inside the MicrosoftGraphUser_PasswordProfile as a MicrosoftGraphUserPasswordProfile1
func (t MicrosoftGraphUser_PasswordProfile) AsMicrosoftGraphUserPasswordProfile1() (MicrosoftGraphUserPasswordProfile1, error) {
	var body MicrosoftGraphUserPasswordProfile1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphUserPasswordProfile1 overwrites any union data inside the MicrosoftGraphUser_PasswordProfile as the provided MicrosoftGraphUserPasswordProfile1
func (t *MicrosoftGraphUser_PasswordProfile) FromMicrosoftGraphUserPasswordProfile1(v MicrosoftGraphUserPasswordProfile1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphUserPasswordProfile1 performs a merge with any union data inside the MicrosoftGraphUser_PasswordProfile, using the provided MicrosoftGraphUserPasswordProfile1
func (t *MicrosoftGraphUser_PasswordProfile) MergeMicrosoftGraphUserPasswordProfile1(v MicrosoftGraphUserPasswordProfile1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

func (t MicrosoftGraphUser_PasswordProfile) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *MicrosoftGraphUser_PasswordProfile) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsMicrosoftGraphProfilePhoto returns the union data inside the MicrosoftGraphUser_Photo as a MicrosoftGraphProfilePhoto
func (t MicrosoftGraphUser_Photo) AsMicrosoftGraphProfilePhoto() (MicrosoftGraphProfilePhoto, error) {
	var body MicrosoftGraphProfilePhoto
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphProfilePhoto overwrites any union data inside the MicrosoftGraphUser_Photo as the provided MicrosoftGraphProfilePhoto
func (t *MicrosoftGraphUser_Photo) FromMicrosoftGraphProfilePhoto(v MicrosoftGraphProfilePhoto) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphProfilePhoto performs a merge with any union data inside the MicrosoftGraphUser_Photo, using the provided MicrosoftGraphProfilePhoto
func (t *MicrosoftGraphUser_Photo) MergeMicrosoftGraphProfilePhoto(v MicrosoftGraphProfilePhoto) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsMicrosoftGraphUserPhoto1 returns the union data inside the MicrosoftGraphUser_Photo as a MicrosoftGraphUserPhoto1
func (t MicrosoftGraphUser_Photo) AsMicrosoftGraphUserPhoto1() (MicrosoftGraphUserPhoto1, error) {
	var body MicrosoftGraphUserPhoto1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphUserPhoto1 overwrites any union data inside the MicrosoftGraphUser_Photo as the provided MicrosoftGraphUserPhoto1
func (t *MicrosoftGraphUser_Photo) FromMicrosoftGraphUserPhoto1(v MicrosoftGraphUserPhoto1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphUserPhoto1 performs a merge with any union data inside the MicrosoftGraphUser_Photo, using the provided MicrosoftGraphUserPhoto1
func (t *MicrosoftGraphUser_Photo) MergeMicrosoftGraphUserPhoto1(v MicrosoftGraphUserPhoto1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

func (t MicrosoftGraphUser_Photo) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *MicrosoftGraphUser_Photo) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsMicrosoftGraphPlannerUser returns the union data inside the MicrosoftGraphUser_Planner as a MicrosoftGraphPlannerUser
func (t MicrosoftGraphUser_Planner) AsMicrosoftGraphPlannerUser() (MicrosoftGraphPlannerUser, error) {
	var body MicrosoftGraphPlannerUser
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphPlannerUser overwrites any union data inside the MicrosoftGraphUser_Planner as the provided MicrosoftGraphPlannerUser
func (t *MicrosoftGraphUser_Planner) FromMicrosoftGraphPlannerUser(v MicrosoftGraphPlannerUser) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphPlannerUser performs a merge with any union data inside the MicrosoftGraphUser_Planner, using the provided MicrosoftGraphPlannerUser
func (t *MicrosoftGraphUser_Planner) MergeMicrosoftGraphPlannerUser(v MicrosoftGraphPlannerUser) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsMicrosoftGraphUserPlanner1 returns the union data inside the MicrosoftGraphUser_Planner as a MicrosoftGraphUserPlanner1
func (t MicrosoftGraphUser_Planner) AsMicrosoftGraphUserPlanner1() (MicrosoftGraphUserPlanner1, error) {
	var body MicrosoftGraphUserPlanner1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphUserPlanner1 overwrites any union data inside the MicrosoftGraphUser_Planner as the provided MicrosoftGraphUserPlanner1
func (t *MicrosoftGraphUser_Planner) FromMicrosoftGraphUserPlanner1(v MicrosoftGraphUserPlanner1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphUserPlanner1 performs a merge with any union data inside the MicrosoftGraphUser_Planner, using the provided MicrosoftGraphUserPlanner1
func (t *MicrosoftGraphUser_Planner) MergeMicrosoftGraphUserPlanner1(v MicrosoftGraphUserPlanner1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

func (t MicrosoftGraphUser_Planner) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *MicrosoftGraphUser_Planner) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsMicrosoftGraphPresence returns the union data inside the MicrosoftGraphUser_Presence as a MicrosoftGraphPresence
func (t MicrosoftGraphUser_Presence) AsMicrosoftGraphPresence() (MicrosoftGraphPresence, error) {
	var body MicrosoftGraphPresence
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphPresence overwrites any union data inside the MicrosoftGraphUser_Presence as the provided MicrosoftGraphPresence
func (t *MicrosoftGraphUser_Presence) FromMicrosoftGraphPresence(v MicrosoftGraphPresence) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphPresence performs a merge with any union data inside the MicrosoftGraphUser_Presence, using the provided MicrosoftGraphPresence
func (t *MicrosoftGraphUser_Presence) MergeMicrosoftGraphPresence(v MicrosoftGraphPresence) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsMicrosoftGraphUserPresence1 returns the union data inside the MicrosoftGraphUser_Presence as a MicrosoftGraphUserPresence1
func (t MicrosoftGraphUser_Presence) AsMicrosoftGraphUserPresence1() (MicrosoftGraphUserPresence1, error) {
	var body MicrosoftGraphUserPresence1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphUserPresence1 overwrites any union data inside the MicrosoftGraphUser_Presence as the provided MicrosoftGraphUserPresence1
func (t *MicrosoftGraphUser_Presence) FromMicrosoftGraphUserPresence1(v MicrosoftGraphUserPresence1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphUserPresence1 performs a merge with any union data inside the MicrosoftGraphUser_Presence, using the provided MicrosoftGraphUserPresence1
func (t *MicrosoftGraphUser_Presence) MergeMicrosoftGraphUserPresence1(v MicrosoftGraphUserPresence1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

func (t MicrosoftGraphUser_Presence) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *MicrosoftGraphUser_Presence) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsMicrosoftGraphUserPrint returns the union data inside the MicrosoftGraphUser_Print as a MicrosoftGraphUserPrint
func (t MicrosoftGraphUser_Print) AsMicrosoftGraphUserPrint() (MicrosoftGraphUserPrint, error) {
	var body MicrosoftGraphUserPrint
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphUserPrint overwrites any union data inside the MicrosoftGraphUser_Print as the provided MicrosoftGraphUserPrint
func (t *MicrosoftGraphUser_Print) FromMicrosoftGraphUserPrint(v MicrosoftGraphUserPrint) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphUserPrint performs a merge with any union data inside the MicrosoftGraphUser_Print, using the provided MicrosoftGraphUserPrint
func (t *MicrosoftGraphUser_Print) MergeMicrosoftGraphUserPrint(v MicrosoftGraphUserPrint) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsMicrosoftGraphUserPrint1 returns the union data inside the MicrosoftGraphUser_Print as a MicrosoftGraphUserPrint1
func (t MicrosoftGraphUser_Print) AsMicrosoftGraphUserPrint1() (MicrosoftGraphUserPrint1, error) {
	var body MicrosoftGraphUserPrint1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphUserPrint1 overwrites any union data inside the MicrosoftGraphUser_Print as the provided MicrosoftGraphUserPrint1
func (t *MicrosoftGraphUser_Print) FromMicrosoftGraphUserPrint1(v MicrosoftGraphUserPrint1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphUserPrint1 performs a merge with any union data inside the MicrosoftGraphUser_Print, using the provided MicrosoftGraphUserPrint1
func (t *MicrosoftGraphUser_Print) MergeMicrosoftGraphUserPrint1(v MicrosoftGraphUserPrint1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

func (t MicrosoftGraphUser_Print) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *MicrosoftGraphUser_Print) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsMicrosoftGraphUserSettings returns the union data inside the MicrosoftGraphUser_Settings as a MicrosoftGraphUserSettings
func (t MicrosoftGraphUser_Settings) AsMicrosoftGraphUserSettings() (MicrosoftGraphUserSettings, error) {
	var body MicrosoftGraphUserSettings
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphUserSettings overwrites any union data inside the MicrosoftGraphUser_Settings as the provided MicrosoftGraphUserSettings
func (t *MicrosoftGraphUser_Settings) FromMicrosoftGraphUserSettings(v MicrosoftGraphUserSettings) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphUserSettings performs a merge with any union data inside the MicrosoftGraphUser_Settings, using the provided MicrosoftGraphUserSettings
func (t *MicrosoftGraphUser_Settings) MergeMicrosoftGraphUserSettings(v MicrosoftGraphUserSettings) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsMicrosoftGraphUserSettings1 returns the union data inside the MicrosoftGraphUser_Settings as a MicrosoftGraphUserSettings1
func (t MicrosoftGraphUser_Settings) AsMicrosoftGraphUserSettings1() (MicrosoftGraphUserSettings1, error) {
	var body MicrosoftGraphUserSettings1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphUserSettings1 overwrites any union data inside the MicrosoftGraphUser_Settings as the provided MicrosoftGraphUserSettings1
func (t *MicrosoftGraphUser_Settings) FromMicrosoftGraphUserSettings1(v MicrosoftGraphUserSettings1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphUserSettings1 performs a merge with any union data inside the MicrosoftGraphUser_Settings, using the provided MicrosoftGraphUserSettings1
func (t *MicrosoftGraphUser_Settings) MergeMicrosoftGraphUserSettings1(v MicrosoftGraphUserSettings1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

func (t MicrosoftGraphUser_Settings) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *MicrosoftGraphUser_Settings) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsMicrosoftGraphSignInActivity returns the union data inside the MicrosoftGraphUser_SignInActivity as a MicrosoftGraphSignInActivity
func (t MicrosoftGraphUser_SignInActivity) AsMicrosoftGraphSignInActivity() (MicrosoftGraphSignInActivity, error) {
	var body MicrosoftGraphSignInActivity
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphSignInActivity overwrites any union data inside the MicrosoftGraphUser_SignInActivity as the provided MicrosoftGraphSignInActivity
func (t *MicrosoftGraphUser_SignInActivity) FromMicrosoftGraphSignInActivity(v MicrosoftGraphSignInActivity) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphSignInActivity performs a merge with any union data inside the MicrosoftGraphUser_SignInActivity, using the provided MicrosoftGraphSignInActivity
func (t *MicrosoftGraphUser_SignInActivity) MergeMicrosoftGraphSignInActivity(v MicrosoftGraphSignInActivity) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsMicrosoftGraphUserSignInActivity1 returns the union data inside the MicrosoftGraphUser_SignInActivity as a MicrosoftGraphUserSignInActivity1
func (t MicrosoftGraphUser_SignInActivity) AsMicrosoftGraphUserSignInActivity1() (MicrosoftGraphUserSignInActivity1, error) {
	var body MicrosoftGraphUserSignInActivity1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphUserSignInActivity1 overwrites any union data inside the MicrosoftGraphUser_SignInActivity as the provided MicrosoftGraphUserSignInActivity1
func (t *MicrosoftGraphUser_SignInActivity) FromMicrosoftGraphUserSignInActivity1(v MicrosoftGraphUserSignInActivity1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphUserSignInActivity1 performs a merge with any union data inside the MicrosoftGraphUser_SignInActivity, using the provided MicrosoftGraphUserSignInActivity1
func (t *MicrosoftGraphUser_SignInActivity) MergeMicrosoftGraphUserSignInActivity1(v MicrosoftGraphUserSignInActivity1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

func (t MicrosoftGraphUser_SignInActivity) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *MicrosoftGraphUser_SignInActivity) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsMicrosoftGraphUserTeamwork returns the union data inside the MicrosoftGraphUser_Teamwork as a MicrosoftGraphUserTeamwork
func (t MicrosoftGraphUser_Teamwork) AsMicrosoftGraphUserTeamwork() (MicrosoftGraphUserTeamwork, error) {
	var body MicrosoftGraphUserTeamwork
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphUserTeamwork overwrites any union data inside the MicrosoftGraphUser_Teamwork as the provided MicrosoftGraphUserTeamwork
func (t *MicrosoftGraphUser_Teamwork) FromMicrosoftGraphUserTeamwork(v MicrosoftGraphUserTeamwork) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphUserTeamwork performs a merge with any union data inside the MicrosoftGraphUser_Teamwork, using the provided MicrosoftGraphUserTeamwork
func (t *MicrosoftGraphUser_Teamwork) MergeMicrosoftGraphUserTeamwork(v MicrosoftGraphUserTeamwork) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsMicrosoftGraphUserTeamwork1 returns the union data inside the MicrosoftGraphUser_Teamwork as a MicrosoftGraphUserTeamwork1
func (t MicrosoftGraphUser_Teamwork) AsMicrosoftGraphUserTeamwork1() (MicrosoftGraphUserTeamwork1, error) {
	var body MicrosoftGraphUserTeamwork1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphUserTeamwork1 overwrites any union data inside the MicrosoftGraphUser_Teamwork as the provided MicrosoftGraphUserTeamwork1
func (t *MicrosoftGraphUser_Teamwork) FromMicrosoftGraphUserTeamwork1(v MicrosoftGraphUserTeamwork1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphUserTeamwork1 performs a merge with any union data inside the MicrosoftGraphUser_Teamwork, using the provided MicrosoftGraphUserTeamwork1
func (t *MicrosoftGraphUser_Teamwork) MergeMicrosoftGraphUserTeamwork1(v MicrosoftGraphUserTeamwork1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

func (t MicrosoftGraphUser_Teamwork) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *MicrosoftGraphUser_Teamwork) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsMicrosoftGraphTodo returns the union data inside the MicrosoftGraphUser_Todo as a MicrosoftGraphTodo
func (t MicrosoftGraphUser_Todo) AsMicrosoftGraphTodo() (MicrosoftGraphTodo, error) {
	var body MicrosoftGraphTodo
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphTodo overwrites any union data inside the MicrosoftGraphUser_Todo as the provided MicrosoftGraphTodo
func (t *MicrosoftGraphUser_Todo) FromMicrosoftGraphTodo(v MicrosoftGraphTodo) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphTodo performs a merge with any union data inside the MicrosoftGraphUser_Todo, using the provided MicrosoftGraphTodo
func (t *MicrosoftGraphUser_Todo) MergeMicrosoftGraphTodo(v MicrosoftGraphTodo) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsMicrosoftGraphUserTodo1 returns the union data inside the MicrosoftGraphUser_Todo as a MicrosoftGraphUserTodo1
func (t MicrosoftGraphUser_Todo) AsMicrosoftGraphUserTodo1() (MicrosoftGraphUserTodo1, error) {
	var body MicrosoftGraphUserTodo1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphUserTodo1 overwrites any union data inside the MicrosoftGraphUser_Todo as the provided MicrosoftGraphUserTodo1
func (t *MicrosoftGraphUser_Todo) FromMicrosoftGraphUserTodo1(v MicrosoftGraphUserTodo1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphUserTodo1 performs a merge with any union data inside the MicrosoftGraphUser_Todo, using the provided MicrosoftGraphUserTodo1
func (t *MicrosoftGraphUser_Todo) MergeMicrosoftGraphUserTodo1(v MicrosoftGraphUserTodo1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

func (t MicrosoftGraphUser_Todo) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *MicrosoftGraphUser_Todo) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsMicrosoftGraphJson returns the union data inside the MicrosoftGraphUserActivity_ContentInfo as a MicrosoftGraphJson
func (t MicrosoftGraphUserActivity_ContentInfo) AsMicrosoftGraphJson() (MicrosoftGraphJson, error) {
	var body MicrosoftGraphJson
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphJson overwrites any union data inside the MicrosoftGraphUserActivity_ContentInfo as the provided MicrosoftGraphJson
func (t *MicrosoftGraphUserActivity_ContentInfo) FromMicrosoftGraphJson(v MicrosoftGraphJson) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphJson performs a merge with any union data inside the MicrosoftGraphUserActivity_ContentInfo, using the provided MicrosoftGraphJson
func (t *MicrosoftGraphUserActivity_ContentInfo) MergeMicrosoftGraphJson(v MicrosoftGraphJson) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsMicrosoftGraphUserActivityContentInfo1 returns the union data inside the MicrosoftGraphUserActivity_ContentInfo as a MicrosoftGraphUserActivityContentInfo1
func (t MicrosoftGraphUserActivity_ContentInfo) AsMicrosoftGraphUserActivityContentInfo1() (MicrosoftGraphUserActivityContentInfo1, error) {
	var body MicrosoftGraphUserActivityContentInfo1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphUserActivityContentInfo1 overwrites any union data inside the MicrosoftGraphUserActivity_ContentInfo as the provided MicrosoftGraphUserActivityContentInfo1
func (t *MicrosoftGraphUserActivity_ContentInfo) FromMicrosoftGraphUserActivityContentInfo1(v MicrosoftGraphUserActivityContentInfo1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphUserActivityContentInfo1 performs a merge with any union data inside the MicrosoftGraphUserActivity_ContentInfo, using the provided MicrosoftGraphUserActivityContentInfo1
func (t *MicrosoftGraphUserActivity_ContentInfo) MergeMicrosoftGraphUserActivityContentInfo1(v MicrosoftGraphUserActivityContentInfo1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

func (t MicrosoftGraphUserActivity_ContentInfo) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *MicrosoftGraphUserActivity_ContentInfo) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsMicrosoftGraphStatus returns the union data inside the MicrosoftGraphUserActivity_Status as a MicrosoftGraphStatus
func (t MicrosoftGraphUserActivity_Status) AsMicrosoftGraphStatus() (MicrosoftGraphStatus, error) {
	var body MicrosoftGraphStatus
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphStatus overwrites any union data inside the MicrosoftGraphUserActivity_Status as the provided MicrosoftGraphStatus
func (t *MicrosoftGraphUserActivity_Status) FromMicrosoftGraphStatus(v MicrosoftGraphStatus) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphStatus performs a merge with any union data inside the MicrosoftGraphUserActivity_Status, using the provided MicrosoftGraphStatus
func (t *MicrosoftGraphUserActivity_Status) MergeMicrosoftGraphStatus(v MicrosoftGraphStatus) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsMicrosoftGraphUserActivityStatus1 returns the union data inside the MicrosoftGraphUserActivity_Status as a MicrosoftGraphUserActivityStatus1
func (t MicrosoftGraphUserActivity_Status) AsMicrosoftGraphUserActivityStatus1() (MicrosoftGraphUserActivityStatus1, error) {
	var body MicrosoftGraphUserActivityStatus1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphUserActivityStatus1 overwrites any union data inside the MicrosoftGraphUserActivity_Status as the provided MicrosoftGraphUserActivityStatus1
func (t *MicrosoftGraphUserActivity_Status) FromMicrosoftGraphUserActivityStatus1(v MicrosoftGraphUserActivityStatus1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphUserActivityStatus1 performs a merge with any union data inside the MicrosoftGraphUserActivity_Status, using the provided MicrosoftGraphUserActivityStatus1
func (t *MicrosoftGraphUserActivity_Status) MergeMicrosoftGraphUserActivityStatus1(v MicrosoftGraphUserActivityStatus1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

func (t MicrosoftGraphUserActivity_Status) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *MicrosoftGraphUserActivity_Status) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsMicrosoftGraphChat returns the union data inside the MicrosoftGraphUserScopeTeamsAppInstallation_Chat as a MicrosoftGraphChat
func (t MicrosoftGraphUserScopeTeamsAppInstallation_Chat) AsMicrosoftGraphChat() (MicrosoftGraphChat, error) {
	var body MicrosoftGraphChat
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphChat overwrites any union data inside the MicrosoftGraphUserScopeTeamsAppInstallation_Chat as the provided MicrosoftGraphChat
func (t *MicrosoftGraphUserScopeTeamsAppInstallation_Chat) FromMicrosoftGraphChat(v MicrosoftGraphChat) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphChat performs a merge with any union data inside the MicrosoftGraphUserScopeTeamsAppInstallation_Chat, using the provided MicrosoftGraphChat
func (t *MicrosoftGraphUserScopeTeamsAppInstallation_Chat) MergeMicrosoftGraphChat(v MicrosoftGraphChat) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsMicrosoftGraphUserScopeTeamsAppInstallationChat1 returns the union data inside the MicrosoftGraphUserScopeTeamsAppInstallation_Chat as a MicrosoftGraphUserScopeTeamsAppInstallationChat1
func (t MicrosoftGraphUserScopeTeamsAppInstallation_Chat) AsMicrosoftGraphUserScopeTeamsAppInstallationChat1() (MicrosoftGraphUserScopeTeamsAppInstallationChat1, error) {
	var body MicrosoftGraphUserScopeTeamsAppInstallationChat1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphUserScopeTeamsAppInstallationChat1 overwrites any union data inside the MicrosoftGraphUserScopeTeamsAppInstallation_Chat as the provided MicrosoftGraphUserScopeTeamsAppInstallationChat1
func (t *MicrosoftGraphUserScopeTeamsAppInstallation_Chat) FromMicrosoftGraphUserScopeTeamsAppInstallationChat1(v MicrosoftGraphUserScopeTeamsAppInstallationChat1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphUserScopeTeamsAppInstallationChat1 performs a merge with any union data inside the MicrosoftGraphUserScopeTeamsAppInstallation_Chat, using the provided MicrosoftGraphUserScopeTeamsAppInstallationChat1
func (t *MicrosoftGraphUserScopeTeamsAppInstallation_Chat) MergeMicrosoftGraphUserScopeTeamsAppInstallationChat1(v MicrosoftGraphUserScopeTeamsAppInstallationChat1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

func (t MicrosoftGraphUserScopeTeamsAppInstallation_Chat) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *MicrosoftGraphUserScopeTeamsAppInstallation_Chat) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsMicrosoftGraphTeamsAppPermissionSet returns the union data inside the MicrosoftGraphUserScopeTeamsAppInstallation_ConsentedPermissionSet as a MicrosoftGraphTeamsAppPermissionSet
func (t MicrosoftGraphUserScopeTeamsAppInstallation_ConsentedPermissionSet) AsMicrosoftGraphTeamsAppPermissionSet() (MicrosoftGraphTeamsAppPermissionSet, error) {
	var body MicrosoftGraphTeamsAppPermissionSet
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphTeamsAppPermissionSet overwrites any union data inside the MicrosoftGraphUserScopeTeamsAppInstallation_ConsentedPermissionSet as the provided MicrosoftGraphTeamsAppPermissionSet
func (t *MicrosoftGraphUserScopeTeamsAppInstallation_ConsentedPermissionSet) FromMicrosoftGraphTeamsAppPermissionSet(v MicrosoftGraphTeamsAppPermissionSet) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphTeamsAppPermissionSet performs a merge with any union data inside the MicrosoftGraphUserScopeTeamsAppInstallation_ConsentedPermissionSet, using the provided MicrosoftGraphTeamsAppPermissionSet
func (t *MicrosoftGraphUserScopeTeamsAppInstallation_ConsentedPermissionSet) MergeMicrosoftGraphTeamsAppPermissionSet(v MicrosoftGraphTeamsAppPermissionSet) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsMicrosoftGraphUserScopeTeamsAppInstallationConsentedPermissionSet1 returns the union data inside the MicrosoftGraphUserScopeTeamsAppInstallation_ConsentedPermissionSet as a MicrosoftGraphUserScopeTeamsAppInstallationConsentedPermissionSet1
func (t MicrosoftGraphUserScopeTeamsAppInstallation_ConsentedPermissionSet) AsMicrosoftGraphUserScopeTeamsAppInstallationConsentedPermissionSet1() (MicrosoftGraphUserScopeTeamsAppInstallationConsentedPermissionSet1, error) {
	var body MicrosoftGraphUserScopeTeamsAppInstallationConsentedPermissionSet1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphUserScopeTeamsAppInstallationConsentedPermissionSet1 overwrites any union data inside the MicrosoftGraphUserScopeTeamsAppInstallation_ConsentedPermissionSet as the provided MicrosoftGraphUserScopeTeamsAppInstallationConsentedPermissionSet1
func (t *MicrosoftGraphUserScopeTeamsAppInstallation_ConsentedPermissionSet) FromMicrosoftGraphUserScopeTeamsAppInstallationConsentedPermissionSet1(v MicrosoftGraphUserScopeTeamsAppInstallationConsentedPermissionSet1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphUserScopeTeamsAppInstallationConsentedPermissionSet1 performs a merge with any union data inside the MicrosoftGraphUserScopeTeamsAppInstallation_ConsentedPermissionSet, using the provided MicrosoftGraphUserScopeTeamsAppInstallationConsentedPermissionSet1
func (t *MicrosoftGraphUserScopeTeamsAppInstallation_ConsentedPermissionSet) MergeMicrosoftGraphUserScopeTeamsAppInstallationConsentedPermissionSet1(v MicrosoftGraphUserScopeTeamsAppInstallationConsentedPermissionSet1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

func (t MicrosoftGraphUserScopeTeamsAppInstallation_ConsentedPermissionSet) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *MicrosoftGraphUserScopeTeamsAppInstallation_ConsentedPermissionSet) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsMicrosoftGraphTeamsApp returns the union data inside the MicrosoftGraphUserScopeTeamsAppInstallation_TeamsApp as a MicrosoftGraphTeamsApp
func (t MicrosoftGraphUserScopeTeamsAppInstallation_TeamsApp) AsMicrosoftGraphTeamsApp() (MicrosoftGraphTeamsApp, error) {
	var body MicrosoftGraphTeamsApp
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphTeamsApp overwrites any union data inside the MicrosoftGraphUserScopeTeamsAppInstallation_TeamsApp as the provided MicrosoftGraphTeamsApp
func (t *MicrosoftGraphUserScopeTeamsAppInstallation_TeamsApp) FromMicrosoftGraphTeamsApp(v MicrosoftGraphTeamsApp) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphTeamsApp performs a merge with any union data inside the MicrosoftGraphUserScopeTeamsAppInstallation_TeamsApp, using the provided MicrosoftGraphTeamsApp
func (t *MicrosoftGraphUserScopeTeamsAppInstallation_TeamsApp) MergeMicrosoftGraphTeamsApp(v MicrosoftGraphTeamsApp) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsMicrosoftGraphUserScopeTeamsAppInstallationTeamsApp1 returns the union data inside the MicrosoftGraphUserScopeTeamsAppInstallation_TeamsApp as a MicrosoftGraphUserScopeTeamsAppInstallationTeamsApp1
func (t MicrosoftGraphUserScopeTeamsAppInstallation_TeamsApp) AsMicrosoftGraphUserScopeTeamsAppInstallationTeamsApp1() (MicrosoftGraphUserScopeTeamsAppInstallationTeamsApp1, error) {
	var body MicrosoftGraphUserScopeTeamsAppInstallationTeamsApp1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphUserScopeTeamsAppInstallationTeamsApp1 overwrites any union data inside the MicrosoftGraphUserScopeTeamsAppInstallation_TeamsApp as the provided MicrosoftGraphUserScopeTeamsAppInstallationTeamsApp1
func (t *MicrosoftGraphUserScopeTeamsAppInstallation_TeamsApp) FromMicrosoftGraphUserScopeTeamsAppInstallationTeamsApp1(v MicrosoftGraphUserScopeTeamsAppInstallationTeamsApp1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphUserScopeTeamsAppInstallationTeamsApp1 performs a merge with any union data inside the MicrosoftGraphUserScopeTeamsAppInstallation_TeamsApp, using the provided MicrosoftGraphUserScopeTeamsAppInstallationTeamsApp1
func (t *MicrosoftGraphUserScopeTeamsAppInstallation_TeamsApp) MergeMicrosoftGraphUserScopeTeamsAppInstallationTeamsApp1(v MicrosoftGraphUserScopeTeamsAppInstallationTeamsApp1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

func (t MicrosoftGraphUserScopeTeamsAppInstallation_TeamsApp) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *MicrosoftGraphUserScopeTeamsAppInstallation_TeamsApp) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsMicrosoftGraphTeamsAppDefinition returns the union data inside the MicrosoftGraphUserScopeTeamsAppInstallation_TeamsAppDefinition as a MicrosoftGraphTeamsAppDefinition
func (t MicrosoftGraphUserScopeTeamsAppInstallation_TeamsAppDefinition) AsMicrosoftGraphTeamsAppDefinition() (MicrosoftGraphTeamsAppDefinition, error) {
	var body MicrosoftGraphTeamsAppDefinition
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphTeamsAppDefinition overwrites any union data inside the MicrosoftGraphUserScopeTeamsAppInstallation_TeamsAppDefinition as the provided MicrosoftGraphTeamsAppDefinition
func (t *MicrosoftGraphUserScopeTeamsAppInstallation_TeamsAppDefinition) FromMicrosoftGraphTeamsAppDefinition(v MicrosoftGraphTeamsAppDefinition) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphTeamsAppDefinition performs a merge with any union data inside the MicrosoftGraphUserScopeTeamsAppInstallation_TeamsAppDefinition, using the provided MicrosoftGraphTeamsAppDefinition
func (t *MicrosoftGraphUserScopeTeamsAppInstallation_TeamsAppDefinition) MergeMicrosoftGraphTeamsAppDefinition(v MicrosoftGraphTeamsAppDefinition) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsMicrosoftGraphUserScopeTeamsAppInstallationTeamsAppDefinition1 returns the union data inside the MicrosoftGraphUserScopeTeamsAppInstallation_TeamsAppDefinition as a MicrosoftGraphUserScopeTeamsAppInstallationTeamsAppDefinition1
func (t MicrosoftGraphUserScopeTeamsAppInstallation_TeamsAppDefinition) AsMicrosoftGraphUserScopeTeamsAppInstallationTeamsAppDefinition1() (MicrosoftGraphUserScopeTeamsAppInstallationTeamsAppDefinition1, error) {
	var body MicrosoftGraphUserScopeTeamsAppInstallationTeamsAppDefinition1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphUserScopeTeamsAppInstallationTeamsAppDefinition1 overwrites any union data inside the MicrosoftGraphUserScopeTeamsAppInstallation_TeamsAppDefinition as the provided MicrosoftGraphUserScopeTeamsAppInstallationTeamsAppDefinition1
func (t *MicrosoftGraphUserScopeTeamsAppInstallation_TeamsAppDefinition) FromMicrosoftGraphUserScopeTeamsAppInstallationTeamsAppDefinition1(v MicrosoftGraphUserScopeTeamsAppInstallationTeamsAppDefinition1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphUserScopeTeamsAppInstallationTeamsAppDefinition1 performs a merge with any union data inside the MicrosoftGraphUserScopeTeamsAppInstallation_TeamsAppDefinition, using the provided MicrosoftGraphUserScopeTeamsAppInstallationTeamsAppDefinition1
func (t *MicrosoftGraphUserScopeTeamsAppInstallation_TeamsAppDefinition) MergeMicrosoftGraphUserScopeTeamsAppInstallationTeamsAppDefinition1(v MicrosoftGraphUserScopeTeamsAppInstallationTeamsAppDefinition1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

func (t MicrosoftGraphUserScopeTeamsAppInstallation_TeamsAppDefinition) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *MicrosoftGraphUserScopeTeamsAppInstallation_TeamsAppDefinition) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsMicrosoftGraphShiftPreferences returns the union data inside the MicrosoftGraphUserSettings_ShiftPreferences as a MicrosoftGraphShiftPreferences
func (t MicrosoftGraphUserSettings_ShiftPreferences) AsMicrosoftGraphShiftPreferences() (MicrosoftGraphShiftPreferences, error) {
	var body MicrosoftGraphShiftPreferences
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphShiftPreferences overwrites any union data inside the MicrosoftGraphUserSettings_ShiftPreferences as the provided MicrosoftGraphShiftPreferences
func (t *MicrosoftGraphUserSettings_ShiftPreferences) FromMicrosoftGraphShiftPreferences(v MicrosoftGraphShiftPreferences) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphShiftPreferences performs a merge with any union data inside the MicrosoftGraphUserSettings_ShiftPreferences, using the provided MicrosoftGraphShiftPreferences
func (t *MicrosoftGraphUserSettings_ShiftPreferences) MergeMicrosoftGraphShiftPreferences(v MicrosoftGraphShiftPreferences) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsMicrosoftGraphUserSettingsShiftPreferences1 returns the union data inside the MicrosoftGraphUserSettings_ShiftPreferences as a MicrosoftGraphUserSettingsShiftPreferences1
func (t MicrosoftGraphUserSettings_ShiftPreferences) AsMicrosoftGraphUserSettingsShiftPreferences1() (MicrosoftGraphUserSettingsShiftPreferences1, error) {
	var body MicrosoftGraphUserSettingsShiftPreferences1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphUserSettingsShiftPreferences1 overwrites any union data inside the MicrosoftGraphUserSettings_ShiftPreferences as the provided MicrosoftGraphUserSettingsShiftPreferences1
func (t *MicrosoftGraphUserSettings_ShiftPreferences) FromMicrosoftGraphUserSettingsShiftPreferences1(v MicrosoftGraphUserSettingsShiftPreferences1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphUserSettingsShiftPreferences1 performs a merge with any union data inside the MicrosoftGraphUserSettings_ShiftPreferences, using the provided MicrosoftGraphUserSettingsShiftPreferences1
func (t *MicrosoftGraphUserSettings_ShiftPreferences) MergeMicrosoftGraphUserSettingsShiftPreferences1(v MicrosoftGraphUserSettingsShiftPreferences1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

func (t MicrosoftGraphUserSettings_ShiftPreferences) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *MicrosoftGraphUserSettings_ShiftPreferences) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsMicrosoftGraphVideoFrameRate0 returns the union data inside the MicrosoftGraphVideo_FrameRate as a MicrosoftGraphVideoFrameRate0
func (t MicrosoftGraphVideo_FrameRate) AsMicrosoftGraphVideoFrameRate0() (MicrosoftGraphVideoFrameRate0, error) {
	var body MicrosoftGraphVideoFrameRate0
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphVideoFrameRate0 overwrites any union data inside the MicrosoftGraphVideo_FrameRate as the provided MicrosoftGraphVideoFrameRate0
func (t *MicrosoftGraphVideo_FrameRate) FromMicrosoftGraphVideoFrameRate0(v MicrosoftGraphVideoFrameRate0) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphVideoFrameRate0 performs a merge with any union data inside the MicrosoftGraphVideo_FrameRate, using the provided MicrosoftGraphVideoFrameRate0
func (t *MicrosoftGraphVideo_FrameRate) MergeMicrosoftGraphVideoFrameRate0(v MicrosoftGraphVideoFrameRate0) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsMicrosoftGraphVideoFrameRate1 returns the union data inside the MicrosoftGraphVideo_FrameRate as a MicrosoftGraphVideoFrameRate1
func (t MicrosoftGraphVideo_FrameRate) AsMicrosoftGraphVideoFrameRate1() (MicrosoftGraphVideoFrameRate1, error) {
	var body MicrosoftGraphVideoFrameRate1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphVideoFrameRate1 overwrites any union data inside the MicrosoftGraphVideo_FrameRate as the provided MicrosoftGraphVideoFrameRate1
func (t *MicrosoftGraphVideo_FrameRate) FromMicrosoftGraphVideoFrameRate1(v MicrosoftGraphVideoFrameRate1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphVideoFrameRate1 performs a merge with any union data inside the MicrosoftGraphVideo_FrameRate, using the provided MicrosoftGraphVideoFrameRate1
func (t *MicrosoftGraphVideo_FrameRate) MergeMicrosoftGraphVideoFrameRate1(v MicrosoftGraphVideoFrameRate1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsReferenceNumeric returns the union data inside the MicrosoftGraphVideo_FrameRate as a ReferenceNumeric
func (t MicrosoftGraphVideo_FrameRate) AsReferenceNumeric() (ReferenceNumeric, error) {
	var body ReferenceNumeric
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromReferenceNumeric overwrites any union data inside the MicrosoftGraphVideo_FrameRate as the provided ReferenceNumeric
func (t *MicrosoftGraphVideo_FrameRate) FromReferenceNumeric(v ReferenceNumeric) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeReferenceNumeric performs a merge with any union data inside the MicrosoftGraphVideo_FrameRate, using the provided ReferenceNumeric
func (t *MicrosoftGraphVideo_FrameRate) MergeReferenceNumeric(v ReferenceNumeric) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

func (t MicrosoftGraphVideo_FrameRate) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *MicrosoftGraphVideo_FrameRate) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsMicrosoftGraphImageInfo returns the union data inside the MicrosoftGraphVisualInfo_Attribution as a MicrosoftGraphImageInfo
func (t MicrosoftGraphVisualInfo_Attribution) AsMicrosoftGraphImageInfo() (MicrosoftGraphImageInfo, error) {
	var body MicrosoftGraphImageInfo
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphImageInfo overwrites any union data inside the MicrosoftGraphVisualInfo_Attribution as the provided MicrosoftGraphImageInfo
func (t *MicrosoftGraphVisualInfo_Attribution) FromMicrosoftGraphImageInfo(v MicrosoftGraphImageInfo) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphImageInfo performs a merge with any union data inside the MicrosoftGraphVisualInfo_Attribution, using the provided MicrosoftGraphImageInfo
func (t *MicrosoftGraphVisualInfo_Attribution) MergeMicrosoftGraphImageInfo(v MicrosoftGraphImageInfo) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsMicrosoftGraphVisualInfoAttribution1 returns the union data inside the MicrosoftGraphVisualInfo_Attribution as a MicrosoftGraphVisualInfoAttribution1
func (t MicrosoftGraphVisualInfo_Attribution) AsMicrosoftGraphVisualInfoAttribution1() (MicrosoftGraphVisualInfoAttribution1, error) {
	var body MicrosoftGraphVisualInfoAttribution1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphVisualInfoAttribution1 overwrites any union data inside the MicrosoftGraphVisualInfo_Attribution as the provided MicrosoftGraphVisualInfoAttribution1
func (t *MicrosoftGraphVisualInfo_Attribution) FromMicrosoftGraphVisualInfoAttribution1(v MicrosoftGraphVisualInfoAttribution1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphVisualInfoAttribution1 performs a merge with any union data inside the MicrosoftGraphVisualInfo_Attribution, using the provided MicrosoftGraphVisualInfoAttribution1
func (t *MicrosoftGraphVisualInfo_Attribution) MergeMicrosoftGraphVisualInfoAttribution1(v MicrosoftGraphVisualInfoAttribution1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

func (t MicrosoftGraphVisualInfo_Attribution) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *MicrosoftGraphVisualInfo_Attribution) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsMicrosoftGraphJson returns the union data inside the MicrosoftGraphVisualInfo_Content as a MicrosoftGraphJson
func (t MicrosoftGraphVisualInfo_Content) AsMicrosoftGraphJson() (MicrosoftGraphJson, error) {
	var body MicrosoftGraphJson
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphJson overwrites any union data inside the MicrosoftGraphVisualInfo_Content as the provided MicrosoftGraphJson
func (t *MicrosoftGraphVisualInfo_Content) FromMicrosoftGraphJson(v MicrosoftGraphJson) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphJson performs a merge with any union data inside the MicrosoftGraphVisualInfo_Content, using the provided MicrosoftGraphJson
func (t *MicrosoftGraphVisualInfo_Content) MergeMicrosoftGraphJson(v MicrosoftGraphJson) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsMicrosoftGraphVisualInfoContent1 returns the union data inside the MicrosoftGraphVisualInfo_Content as a MicrosoftGraphVisualInfoContent1
func (t MicrosoftGraphVisualInfo_Content) AsMicrosoftGraphVisualInfoContent1() (MicrosoftGraphVisualInfoContent1, error) {
	var body MicrosoftGraphVisualInfoContent1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphVisualInfoContent1 overwrites any union data inside the MicrosoftGraphVisualInfo_Content as the provided MicrosoftGraphVisualInfoContent1
func (t *MicrosoftGraphVisualInfo_Content) FromMicrosoftGraphVisualInfoContent1(v MicrosoftGraphVisualInfoContent1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphVisualInfoContent1 performs a merge with any union data inside the MicrosoftGraphVisualInfo_Content, using the provided MicrosoftGraphVisualInfoContent1
func (t *MicrosoftGraphVisualInfo_Content) MergeMicrosoftGraphVisualInfoContent1(v MicrosoftGraphVisualInfoContent1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

func (t MicrosoftGraphVisualInfo_Content) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *MicrosoftGraphVisualInfo_Content) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsMicrosoftGraphWebsiteType returns the union data inside the MicrosoftGraphWebsite_Type as a MicrosoftGraphWebsiteType
func (t MicrosoftGraphWebsite_Type) AsMicrosoftGraphWebsiteType() (MicrosoftGraphWebsiteType, error) {
	var body MicrosoftGraphWebsiteType
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphWebsiteType overwrites any union data inside the MicrosoftGraphWebsite_Type as the provided MicrosoftGraphWebsiteType
func (t *MicrosoftGraphWebsite_Type) FromMicrosoftGraphWebsiteType(v MicrosoftGraphWebsiteType) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphWebsiteType performs a merge with any union data inside the MicrosoftGraphWebsite_Type, using the provided MicrosoftGraphWebsiteType
func (t *MicrosoftGraphWebsite_Type) MergeMicrosoftGraphWebsiteType(v MicrosoftGraphWebsiteType) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsMicrosoftGraphWebsiteType1 returns the union data inside the MicrosoftGraphWebsite_Type as a MicrosoftGraphWebsiteType1
func (t MicrosoftGraphWebsite_Type) AsMicrosoftGraphWebsiteType1() (MicrosoftGraphWebsiteType1, error) {
	var body MicrosoftGraphWebsiteType1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphWebsiteType1 overwrites any union data inside the MicrosoftGraphWebsite_Type as the provided MicrosoftGraphWebsiteType1
func (t *MicrosoftGraphWebsite_Type) FromMicrosoftGraphWebsiteType1(v MicrosoftGraphWebsiteType1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphWebsiteType1 performs a merge with any union data inside the MicrosoftGraphWebsite_Type, using the provided MicrosoftGraphWebsiteType1
func (t *MicrosoftGraphWebsite_Type) MergeMicrosoftGraphWebsiteType1(v MicrosoftGraphWebsiteType1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

func (t MicrosoftGraphWebsite_Type) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *MicrosoftGraphWebsite_Type) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsMicrosoftGraphWindowsMalwareCategory returns the union data inside the MicrosoftGraphWindowsDeviceMalwareState_Category as a MicrosoftGraphWindowsMalwareCategory
func (t MicrosoftGraphWindowsDeviceMalwareState_Category) AsMicrosoftGraphWindowsMalwareCategory() (MicrosoftGraphWindowsMalwareCategory, error) {
	var body MicrosoftGraphWindowsMalwareCategory
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphWindowsMalwareCategory overwrites any union data inside the MicrosoftGraphWindowsDeviceMalwareState_Category as the provided MicrosoftGraphWindowsMalwareCategory
func (t *MicrosoftGraphWindowsDeviceMalwareState_Category) FromMicrosoftGraphWindowsMalwareCategory(v MicrosoftGraphWindowsMalwareCategory) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphWindowsMalwareCategory performs a merge with any union data inside the MicrosoftGraphWindowsDeviceMalwareState_Category, using the provided MicrosoftGraphWindowsMalwareCategory
func (t *MicrosoftGraphWindowsDeviceMalwareState_Category) MergeMicrosoftGraphWindowsMalwareCategory(v MicrosoftGraphWindowsMalwareCategory) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsMicrosoftGraphWindowsDeviceMalwareStateCategory1 returns the union data inside the MicrosoftGraphWindowsDeviceMalwareState_Category as a MicrosoftGraphWindowsDeviceMalwareStateCategory1
func (t MicrosoftGraphWindowsDeviceMalwareState_Category) AsMicrosoftGraphWindowsDeviceMalwareStateCategory1() (MicrosoftGraphWindowsDeviceMalwareStateCategory1, error) {
	var body MicrosoftGraphWindowsDeviceMalwareStateCategory1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphWindowsDeviceMalwareStateCategory1 overwrites any union data inside the MicrosoftGraphWindowsDeviceMalwareState_Category as the provided MicrosoftGraphWindowsDeviceMalwareStateCategory1
func (t *MicrosoftGraphWindowsDeviceMalwareState_Category) FromMicrosoftGraphWindowsDeviceMalwareStateCategory1(v MicrosoftGraphWindowsDeviceMalwareStateCategory1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphWindowsDeviceMalwareStateCategory1 performs a merge with any union data inside the MicrosoftGraphWindowsDeviceMalwareState_Category, using the provided MicrosoftGraphWindowsDeviceMalwareStateCategory1
func (t *MicrosoftGraphWindowsDeviceMalwareState_Category) MergeMicrosoftGraphWindowsDeviceMalwareStateCategory1(v MicrosoftGraphWindowsDeviceMalwareStateCategory1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

func (t MicrosoftGraphWindowsDeviceMalwareState_Category) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *MicrosoftGraphWindowsDeviceMalwareState_Category) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsMicrosoftGraphWindowsMalwareExecutionState returns the union data inside the MicrosoftGraphWindowsDeviceMalwareState_ExecutionState as a MicrosoftGraphWindowsMalwareExecutionState
func (t MicrosoftGraphWindowsDeviceMalwareState_ExecutionState) AsMicrosoftGraphWindowsMalwareExecutionState() (MicrosoftGraphWindowsMalwareExecutionState, error) {
	var body MicrosoftGraphWindowsMalwareExecutionState
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphWindowsMalwareExecutionState overwrites any union data inside the MicrosoftGraphWindowsDeviceMalwareState_ExecutionState as the provided MicrosoftGraphWindowsMalwareExecutionState
func (t *MicrosoftGraphWindowsDeviceMalwareState_ExecutionState) FromMicrosoftGraphWindowsMalwareExecutionState(v MicrosoftGraphWindowsMalwareExecutionState) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphWindowsMalwareExecutionState performs a merge with any union data inside the MicrosoftGraphWindowsDeviceMalwareState_ExecutionState, using the provided MicrosoftGraphWindowsMalwareExecutionState
func (t *MicrosoftGraphWindowsDeviceMalwareState_ExecutionState) MergeMicrosoftGraphWindowsMalwareExecutionState(v MicrosoftGraphWindowsMalwareExecutionState) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsMicrosoftGraphWindowsDeviceMalwareStateExecutionState1 returns the union data inside the MicrosoftGraphWindowsDeviceMalwareState_ExecutionState as a MicrosoftGraphWindowsDeviceMalwareStateExecutionState1
func (t MicrosoftGraphWindowsDeviceMalwareState_ExecutionState) AsMicrosoftGraphWindowsDeviceMalwareStateExecutionState1() (MicrosoftGraphWindowsDeviceMalwareStateExecutionState1, error) {
	var body MicrosoftGraphWindowsDeviceMalwareStateExecutionState1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphWindowsDeviceMalwareStateExecutionState1 overwrites any union data inside the MicrosoftGraphWindowsDeviceMalwareState_ExecutionState as the provided MicrosoftGraphWindowsDeviceMalwareStateExecutionState1
func (t *MicrosoftGraphWindowsDeviceMalwareState_ExecutionState) FromMicrosoftGraphWindowsDeviceMalwareStateExecutionState1(v MicrosoftGraphWindowsDeviceMalwareStateExecutionState1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphWindowsDeviceMalwareStateExecutionState1 performs a merge with any union data inside the MicrosoftGraphWindowsDeviceMalwareState_ExecutionState, using the provided MicrosoftGraphWindowsDeviceMalwareStateExecutionState1
func (t *MicrosoftGraphWindowsDeviceMalwareState_ExecutionState) MergeMicrosoftGraphWindowsDeviceMalwareStateExecutionState1(v MicrosoftGraphWindowsDeviceMalwareStateExecutionState1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

func (t MicrosoftGraphWindowsDeviceMalwareState_ExecutionState) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *MicrosoftGraphWindowsDeviceMalwareState_ExecutionState) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsMicrosoftGraphWindowsMalwareSeverity returns the union data inside the MicrosoftGraphWindowsDeviceMalwareState_Severity as a MicrosoftGraphWindowsMalwareSeverity
func (t MicrosoftGraphWindowsDeviceMalwareState_Severity) AsMicrosoftGraphWindowsMalwareSeverity() (MicrosoftGraphWindowsMalwareSeverity, error) {
	var body MicrosoftGraphWindowsMalwareSeverity
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphWindowsMalwareSeverity overwrites any union data inside the MicrosoftGraphWindowsDeviceMalwareState_Severity as the provided MicrosoftGraphWindowsMalwareSeverity
func (t *MicrosoftGraphWindowsDeviceMalwareState_Severity) FromMicrosoftGraphWindowsMalwareSeverity(v MicrosoftGraphWindowsMalwareSeverity) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphWindowsMalwareSeverity performs a merge with any union data inside the MicrosoftGraphWindowsDeviceMalwareState_Severity, using the provided MicrosoftGraphWindowsMalwareSeverity
func (t *MicrosoftGraphWindowsDeviceMalwareState_Severity) MergeMicrosoftGraphWindowsMalwareSeverity(v MicrosoftGraphWindowsMalwareSeverity) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsMicrosoftGraphWindowsDeviceMalwareStateSeverity1 returns the union data inside the MicrosoftGraphWindowsDeviceMalwareState_Severity as a MicrosoftGraphWindowsDeviceMalwareStateSeverity1
func (t MicrosoftGraphWindowsDeviceMalwareState_Severity) AsMicrosoftGraphWindowsDeviceMalwareStateSeverity1() (MicrosoftGraphWindowsDeviceMalwareStateSeverity1, error) {
	var body MicrosoftGraphWindowsDeviceMalwareStateSeverity1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphWindowsDeviceMalwareStateSeverity1 overwrites any union data inside the MicrosoftGraphWindowsDeviceMalwareState_Severity as the provided MicrosoftGraphWindowsDeviceMalwareStateSeverity1
func (t *MicrosoftGraphWindowsDeviceMalwareState_Severity) FromMicrosoftGraphWindowsDeviceMalwareStateSeverity1(v MicrosoftGraphWindowsDeviceMalwareStateSeverity1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphWindowsDeviceMalwareStateSeverity1 performs a merge with any union data inside the MicrosoftGraphWindowsDeviceMalwareState_Severity, using the provided MicrosoftGraphWindowsDeviceMalwareStateSeverity1
func (t *MicrosoftGraphWindowsDeviceMalwareState_Severity) MergeMicrosoftGraphWindowsDeviceMalwareStateSeverity1(v MicrosoftGraphWindowsDeviceMalwareStateSeverity1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

func (t MicrosoftGraphWindowsDeviceMalwareState_Severity) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *MicrosoftGraphWindowsDeviceMalwareState_Severity) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsMicrosoftGraphWindowsMalwareState returns the union data inside the MicrosoftGraphWindowsDeviceMalwareState_State as a MicrosoftGraphWindowsMalwareState
func (t MicrosoftGraphWindowsDeviceMalwareState_State) AsMicrosoftGraphWindowsMalwareState() (MicrosoftGraphWindowsMalwareState, error) {
	var body MicrosoftGraphWindowsMalwareState
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphWindowsMalwareState overwrites any union data inside the MicrosoftGraphWindowsDeviceMalwareState_State as the provided MicrosoftGraphWindowsMalwareState
func (t *MicrosoftGraphWindowsDeviceMalwareState_State) FromMicrosoftGraphWindowsMalwareState(v MicrosoftGraphWindowsMalwareState) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphWindowsMalwareState performs a merge with any union data inside the MicrosoftGraphWindowsDeviceMalwareState_State, using the provided MicrosoftGraphWindowsMalwareState
func (t *MicrosoftGraphWindowsDeviceMalwareState_State) MergeMicrosoftGraphWindowsMalwareState(v MicrosoftGraphWindowsMalwareState) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsMicrosoftGraphWindowsDeviceMalwareStateState1 returns the union data inside the MicrosoftGraphWindowsDeviceMalwareState_State as a MicrosoftGraphWindowsDeviceMalwareStateState1
func (t MicrosoftGraphWindowsDeviceMalwareState_State) AsMicrosoftGraphWindowsDeviceMalwareStateState1() (MicrosoftGraphWindowsDeviceMalwareStateState1, error) {
	var body MicrosoftGraphWindowsDeviceMalwareStateState1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphWindowsDeviceMalwareStateState1 overwrites any union data inside the MicrosoftGraphWindowsDeviceMalwareState_State as the provided MicrosoftGraphWindowsDeviceMalwareStateState1
func (t *MicrosoftGraphWindowsDeviceMalwareState_State) FromMicrosoftGraphWindowsDeviceMalwareStateState1(v MicrosoftGraphWindowsDeviceMalwareStateState1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphWindowsDeviceMalwareStateState1 performs a merge with any union data inside the MicrosoftGraphWindowsDeviceMalwareState_State, using the provided MicrosoftGraphWindowsDeviceMalwareStateState1
func (t *MicrosoftGraphWindowsDeviceMalwareState_State) MergeMicrosoftGraphWindowsDeviceMalwareStateState1(v MicrosoftGraphWindowsDeviceMalwareStateState1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

func (t MicrosoftGraphWindowsDeviceMalwareState_State) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *MicrosoftGraphWindowsDeviceMalwareState_State) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsMicrosoftGraphWindowsMalwareThreatState returns the union data inside the MicrosoftGraphWindowsDeviceMalwareState_ThreatState as a MicrosoftGraphWindowsMalwareThreatState
func (t MicrosoftGraphWindowsDeviceMalwareState_ThreatState) AsMicrosoftGraphWindowsMalwareThreatState() (MicrosoftGraphWindowsMalwareThreatState, error) {
	var body MicrosoftGraphWindowsMalwareThreatState
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphWindowsMalwareThreatState overwrites any union data inside the MicrosoftGraphWindowsDeviceMalwareState_ThreatState as the provided MicrosoftGraphWindowsMalwareThreatState
func (t *MicrosoftGraphWindowsDeviceMalwareState_ThreatState) FromMicrosoftGraphWindowsMalwareThreatState(v MicrosoftGraphWindowsMalwareThreatState) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphWindowsMalwareThreatState performs a merge with any union data inside the MicrosoftGraphWindowsDeviceMalwareState_ThreatState, using the provided MicrosoftGraphWindowsMalwareThreatState
func (t *MicrosoftGraphWindowsDeviceMalwareState_ThreatState) MergeMicrosoftGraphWindowsMalwareThreatState(v MicrosoftGraphWindowsMalwareThreatState) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsMicrosoftGraphWindowsDeviceMalwareStateThreatState1 returns the union data inside the MicrosoftGraphWindowsDeviceMalwareState_ThreatState as a MicrosoftGraphWindowsDeviceMalwareStateThreatState1
func (t MicrosoftGraphWindowsDeviceMalwareState_ThreatState) AsMicrosoftGraphWindowsDeviceMalwareStateThreatState1() (MicrosoftGraphWindowsDeviceMalwareStateThreatState1, error) {
	var body MicrosoftGraphWindowsDeviceMalwareStateThreatState1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphWindowsDeviceMalwareStateThreatState1 overwrites any union data inside the MicrosoftGraphWindowsDeviceMalwareState_ThreatState as the provided MicrosoftGraphWindowsDeviceMalwareStateThreatState1
func (t *MicrosoftGraphWindowsDeviceMalwareState_ThreatState) FromMicrosoftGraphWindowsDeviceMalwareStateThreatState1(v MicrosoftGraphWindowsDeviceMalwareStateThreatState1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphWindowsDeviceMalwareStateThreatState1 performs a merge with any union data inside the MicrosoftGraphWindowsDeviceMalwareState_ThreatState, using the provided MicrosoftGraphWindowsDeviceMalwareStateThreatState1
func (t *MicrosoftGraphWindowsDeviceMalwareState_ThreatState) MergeMicrosoftGraphWindowsDeviceMalwareStateThreatState1(v MicrosoftGraphWindowsDeviceMalwareStateThreatState1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

func (t MicrosoftGraphWindowsDeviceMalwareState_ThreatState) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *MicrosoftGraphWindowsDeviceMalwareState_ThreatState) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsMicrosoftGraphDevice returns the union data inside the MicrosoftGraphWindowsHelloForBusinessAuthenticationMethod_Device as a MicrosoftGraphDevice
func (t MicrosoftGraphWindowsHelloForBusinessAuthenticationMethod_Device) AsMicrosoftGraphDevice() (MicrosoftGraphDevice, error) {
	var body MicrosoftGraphDevice
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphDevice overwrites any union data inside the MicrosoftGraphWindowsHelloForBusinessAuthenticationMethod_Device as the provided MicrosoftGraphDevice
func (t *MicrosoftGraphWindowsHelloForBusinessAuthenticationMethod_Device) FromMicrosoftGraphDevice(v MicrosoftGraphDevice) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphDevice performs a merge with any union data inside the MicrosoftGraphWindowsHelloForBusinessAuthenticationMethod_Device, using the provided MicrosoftGraphDevice
func (t *MicrosoftGraphWindowsHelloForBusinessAuthenticationMethod_Device) MergeMicrosoftGraphDevice(v MicrosoftGraphDevice) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsMicrosoftGraphWindowsHelloForBusinessAuthenticationMethodDevice1 returns the union data inside the MicrosoftGraphWindowsHelloForBusinessAuthenticationMethod_Device as a MicrosoftGraphWindowsHelloForBusinessAuthenticationMethodDevice1
func (t MicrosoftGraphWindowsHelloForBusinessAuthenticationMethod_Device) AsMicrosoftGraphWindowsHelloForBusinessAuthenticationMethodDevice1() (MicrosoftGraphWindowsHelloForBusinessAuthenticationMethodDevice1, error) {
	var body MicrosoftGraphWindowsHelloForBusinessAuthenticationMethodDevice1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphWindowsHelloForBusinessAuthenticationMethodDevice1 overwrites any union data inside the MicrosoftGraphWindowsHelloForBusinessAuthenticationMethod_Device as the provided MicrosoftGraphWindowsHelloForBusinessAuthenticationMethodDevice1
func (t *MicrosoftGraphWindowsHelloForBusinessAuthenticationMethod_Device) FromMicrosoftGraphWindowsHelloForBusinessAuthenticationMethodDevice1(v MicrosoftGraphWindowsHelloForBusinessAuthenticationMethodDevice1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphWindowsHelloForBusinessAuthenticationMethodDevice1 performs a merge with any union data inside the MicrosoftGraphWindowsHelloForBusinessAuthenticationMethod_Device, using the provided MicrosoftGraphWindowsHelloForBusinessAuthenticationMethodDevice1
func (t *MicrosoftGraphWindowsHelloForBusinessAuthenticationMethod_Device) MergeMicrosoftGraphWindowsHelloForBusinessAuthenticationMethodDevice1(v MicrosoftGraphWindowsHelloForBusinessAuthenticationMethodDevice1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

func (t MicrosoftGraphWindowsHelloForBusinessAuthenticationMethod_Device) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *MicrosoftGraphWindowsHelloForBusinessAuthenticationMethod_Device) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsMicrosoftGraphAuthenticationMethodKeyStrength returns the union data inside the MicrosoftGraphWindowsHelloForBusinessAuthenticationMethod_KeyStrength as a MicrosoftGraphAuthenticationMethodKeyStrength
func (t MicrosoftGraphWindowsHelloForBusinessAuthenticationMethod_KeyStrength) AsMicrosoftGraphAuthenticationMethodKeyStrength() (MicrosoftGraphAuthenticationMethodKeyStrength, error) {
	var body MicrosoftGraphAuthenticationMethodKeyStrength
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphAuthenticationMethodKeyStrength overwrites any union data inside the MicrosoftGraphWindowsHelloForBusinessAuthenticationMethod_KeyStrength as the provided MicrosoftGraphAuthenticationMethodKeyStrength
func (t *MicrosoftGraphWindowsHelloForBusinessAuthenticationMethod_KeyStrength) FromMicrosoftGraphAuthenticationMethodKeyStrength(v MicrosoftGraphAuthenticationMethodKeyStrength) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphAuthenticationMethodKeyStrength performs a merge with any union data inside the MicrosoftGraphWindowsHelloForBusinessAuthenticationMethod_KeyStrength, using the provided MicrosoftGraphAuthenticationMethodKeyStrength
func (t *MicrosoftGraphWindowsHelloForBusinessAuthenticationMethod_KeyStrength) MergeMicrosoftGraphAuthenticationMethodKeyStrength(v MicrosoftGraphAuthenticationMethodKeyStrength) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsMicrosoftGraphWindowsHelloForBusinessAuthenticationMethodKeyStrength1 returns the union data inside the MicrosoftGraphWindowsHelloForBusinessAuthenticationMethod_KeyStrength as a MicrosoftGraphWindowsHelloForBusinessAuthenticationMethodKeyStrength1
func (t MicrosoftGraphWindowsHelloForBusinessAuthenticationMethod_KeyStrength) AsMicrosoftGraphWindowsHelloForBusinessAuthenticationMethodKeyStrength1() (MicrosoftGraphWindowsHelloForBusinessAuthenticationMethodKeyStrength1, error) {
	var body MicrosoftGraphWindowsHelloForBusinessAuthenticationMethodKeyStrength1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphWindowsHelloForBusinessAuthenticationMethodKeyStrength1 overwrites any union data inside the MicrosoftGraphWindowsHelloForBusinessAuthenticationMethod_KeyStrength as the provided MicrosoftGraphWindowsHelloForBusinessAuthenticationMethodKeyStrength1
func (t *MicrosoftGraphWindowsHelloForBusinessAuthenticationMethod_KeyStrength) FromMicrosoftGraphWindowsHelloForBusinessAuthenticationMethodKeyStrength1(v MicrosoftGraphWindowsHelloForBusinessAuthenticationMethodKeyStrength1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphWindowsHelloForBusinessAuthenticationMethodKeyStrength1 performs a merge with any union data inside the MicrosoftGraphWindowsHelloForBusinessAuthenticationMethod_KeyStrength, using the provided MicrosoftGraphWindowsHelloForBusinessAuthenticationMethodKeyStrength1
func (t *MicrosoftGraphWindowsHelloForBusinessAuthenticationMethod_KeyStrength) MergeMicrosoftGraphWindowsHelloForBusinessAuthenticationMethodKeyStrength1(v MicrosoftGraphWindowsHelloForBusinessAuthenticationMethodKeyStrength1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

func (t MicrosoftGraphWindowsHelloForBusinessAuthenticationMethod_KeyStrength) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *MicrosoftGraphWindowsHelloForBusinessAuthenticationMethod_KeyStrength) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsMicrosoftGraphWindowsDeviceHealthState returns the union data inside the MicrosoftGraphWindowsProtectionState_DeviceState as a MicrosoftGraphWindowsDeviceHealthState
func (t MicrosoftGraphWindowsProtectionState_DeviceState) AsMicrosoftGraphWindowsDeviceHealthState() (MicrosoftGraphWindowsDeviceHealthState, error) {
	var body MicrosoftGraphWindowsDeviceHealthState
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphWindowsDeviceHealthState overwrites any union data inside the MicrosoftGraphWindowsProtectionState_DeviceState as the provided MicrosoftGraphWindowsDeviceHealthState
func (t *MicrosoftGraphWindowsProtectionState_DeviceState) FromMicrosoftGraphWindowsDeviceHealthState(v MicrosoftGraphWindowsDeviceHealthState) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphWindowsDeviceHealthState performs a merge with any union data inside the MicrosoftGraphWindowsProtectionState_DeviceState, using the provided MicrosoftGraphWindowsDeviceHealthState
func (t *MicrosoftGraphWindowsProtectionState_DeviceState) MergeMicrosoftGraphWindowsDeviceHealthState(v MicrosoftGraphWindowsDeviceHealthState) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsMicrosoftGraphWindowsProtectionStateDeviceState1 returns the union data inside the MicrosoftGraphWindowsProtectionState_DeviceState as a MicrosoftGraphWindowsProtectionStateDeviceState1
func (t MicrosoftGraphWindowsProtectionState_DeviceState) AsMicrosoftGraphWindowsProtectionStateDeviceState1() (MicrosoftGraphWindowsProtectionStateDeviceState1, error) {
	var body MicrosoftGraphWindowsProtectionStateDeviceState1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphWindowsProtectionStateDeviceState1 overwrites any union data inside the MicrosoftGraphWindowsProtectionState_DeviceState as the provided MicrosoftGraphWindowsProtectionStateDeviceState1
func (t *MicrosoftGraphWindowsProtectionState_DeviceState) FromMicrosoftGraphWindowsProtectionStateDeviceState1(v MicrosoftGraphWindowsProtectionStateDeviceState1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphWindowsProtectionStateDeviceState1 performs a merge with any union data inside the MicrosoftGraphWindowsProtectionState_DeviceState, using the provided MicrosoftGraphWindowsProtectionStateDeviceState1
func (t *MicrosoftGraphWindowsProtectionState_DeviceState) MergeMicrosoftGraphWindowsProtectionStateDeviceState1(v MicrosoftGraphWindowsProtectionStateDeviceState1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

func (t MicrosoftGraphWindowsProtectionState_DeviceState) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *MicrosoftGraphWindowsProtectionState_DeviceState) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsMicrosoftGraphWindowsDefenderProductStatus returns the union data inside the MicrosoftGraphWindowsProtectionState_ProductStatus as a MicrosoftGraphWindowsDefenderProductStatus
func (t MicrosoftGraphWindowsProtectionState_ProductStatus) AsMicrosoftGraphWindowsDefenderProductStatus() (MicrosoftGraphWindowsDefenderProductStatus, error) {
	var body MicrosoftGraphWindowsDefenderProductStatus
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphWindowsDefenderProductStatus overwrites any union data inside the MicrosoftGraphWindowsProtectionState_ProductStatus as the provided MicrosoftGraphWindowsDefenderProductStatus
func (t *MicrosoftGraphWindowsProtectionState_ProductStatus) FromMicrosoftGraphWindowsDefenderProductStatus(v MicrosoftGraphWindowsDefenderProductStatus) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphWindowsDefenderProductStatus performs a merge with any union data inside the MicrosoftGraphWindowsProtectionState_ProductStatus, using the provided MicrosoftGraphWindowsDefenderProductStatus
func (t *MicrosoftGraphWindowsProtectionState_ProductStatus) MergeMicrosoftGraphWindowsDefenderProductStatus(v MicrosoftGraphWindowsDefenderProductStatus) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsMicrosoftGraphWindowsProtectionStateProductStatus1 returns the union data inside the MicrosoftGraphWindowsProtectionState_ProductStatus as a MicrosoftGraphWindowsProtectionStateProductStatus1
func (t MicrosoftGraphWindowsProtectionState_ProductStatus) AsMicrosoftGraphWindowsProtectionStateProductStatus1() (MicrosoftGraphWindowsProtectionStateProductStatus1, error) {
	var body MicrosoftGraphWindowsProtectionStateProductStatus1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphWindowsProtectionStateProductStatus1 overwrites any union data inside the MicrosoftGraphWindowsProtectionState_ProductStatus as the provided MicrosoftGraphWindowsProtectionStateProductStatus1
func (t *MicrosoftGraphWindowsProtectionState_ProductStatus) FromMicrosoftGraphWindowsProtectionStateProductStatus1(v MicrosoftGraphWindowsProtectionStateProductStatus1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphWindowsProtectionStateProductStatus1 performs a merge with any union data inside the MicrosoftGraphWindowsProtectionState_ProductStatus, using the provided MicrosoftGraphWindowsProtectionStateProductStatus1
func (t *MicrosoftGraphWindowsProtectionState_ProductStatus) MergeMicrosoftGraphWindowsProtectionStateProductStatus1(v MicrosoftGraphWindowsProtectionStateProductStatus1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

func (t MicrosoftGraphWindowsProtectionState_ProductStatus) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *MicrosoftGraphWindowsProtectionState_ProductStatus) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsMicrosoftGraphWorkbookApplication returns the union data inside the MicrosoftGraphWorkbook_Application as a MicrosoftGraphWorkbookApplication
func (t MicrosoftGraphWorkbook_Application) AsMicrosoftGraphWorkbookApplication() (MicrosoftGraphWorkbookApplication, error) {
	var body MicrosoftGraphWorkbookApplication
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphWorkbookApplication overwrites any union data inside the MicrosoftGraphWorkbook_Application as the provided MicrosoftGraphWorkbookApplication
func (t *MicrosoftGraphWorkbook_Application) FromMicrosoftGraphWorkbookApplication(v MicrosoftGraphWorkbookApplication) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphWorkbookApplication performs a merge with any union data inside the MicrosoftGraphWorkbook_Application, using the provided MicrosoftGraphWorkbookApplication
func (t *MicrosoftGraphWorkbook_Application) MergeMicrosoftGraphWorkbookApplication(v MicrosoftGraphWorkbookApplication) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsMicrosoftGraphWorkbookApplication1 returns the union data inside the MicrosoftGraphWorkbook_Application as a MicrosoftGraphWorkbookApplication1
func (t MicrosoftGraphWorkbook_Application) AsMicrosoftGraphWorkbookApplication1() (MicrosoftGraphWorkbookApplication1, error) {
	var body MicrosoftGraphWorkbookApplication1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphWorkbookApplication1 overwrites any union data inside the MicrosoftGraphWorkbook_Application as the provided MicrosoftGraphWorkbookApplication1
func (t *MicrosoftGraphWorkbook_Application) FromMicrosoftGraphWorkbookApplication1(v MicrosoftGraphWorkbookApplication1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphWorkbookApplication1 performs a merge with any union data inside the MicrosoftGraphWorkbook_Application, using the provided MicrosoftGraphWorkbookApplication1
func (t *MicrosoftGraphWorkbook_Application) MergeMicrosoftGraphWorkbookApplication1(v MicrosoftGraphWorkbookApplication1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

func (t MicrosoftGraphWorkbook_Application) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *MicrosoftGraphWorkbook_Application) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsMicrosoftGraphWorkbookFunctions returns the union data inside the MicrosoftGraphWorkbook_Functions as a MicrosoftGraphWorkbookFunctions
func (t MicrosoftGraphWorkbook_Functions) AsMicrosoftGraphWorkbookFunctions() (MicrosoftGraphWorkbookFunctions, error) {
	var body MicrosoftGraphWorkbookFunctions
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphWorkbookFunctions overwrites any union data inside the MicrosoftGraphWorkbook_Functions as the provided MicrosoftGraphWorkbookFunctions
func (t *MicrosoftGraphWorkbook_Functions) FromMicrosoftGraphWorkbookFunctions(v MicrosoftGraphWorkbookFunctions) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphWorkbookFunctions performs a merge with any union data inside the MicrosoftGraphWorkbook_Functions, using the provided MicrosoftGraphWorkbookFunctions
func (t *MicrosoftGraphWorkbook_Functions) MergeMicrosoftGraphWorkbookFunctions(v MicrosoftGraphWorkbookFunctions) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsMicrosoftGraphWorkbookFunctions1 returns the union data inside the MicrosoftGraphWorkbook_Functions as a MicrosoftGraphWorkbookFunctions1
func (t MicrosoftGraphWorkbook_Functions) AsMicrosoftGraphWorkbookFunctions1() (MicrosoftGraphWorkbookFunctions1, error) {
	var body MicrosoftGraphWorkbookFunctions1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphWorkbookFunctions1 overwrites any union data inside the MicrosoftGraphWorkbook_Functions as the provided MicrosoftGraphWorkbookFunctions1
func (t *MicrosoftGraphWorkbook_Functions) FromMicrosoftGraphWorkbookFunctions1(v MicrosoftGraphWorkbookFunctions1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphWorkbookFunctions1 performs a merge with any union data inside the MicrosoftGraphWorkbook_Functions, using the provided MicrosoftGraphWorkbookFunctions1
func (t *MicrosoftGraphWorkbook_Functions) MergeMicrosoftGraphWorkbookFunctions1(v MicrosoftGraphWorkbookFunctions1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

func (t MicrosoftGraphWorkbook_Functions) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *MicrosoftGraphWorkbook_Functions) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsMicrosoftGraphWorkbookChartAxes returns the union data inside the MicrosoftGraphWorkbookChart_Axes as a MicrosoftGraphWorkbookChartAxes
func (t MicrosoftGraphWorkbookChart_Axes) AsMicrosoftGraphWorkbookChartAxes() (MicrosoftGraphWorkbookChartAxes, error) {
	var body MicrosoftGraphWorkbookChartAxes
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphWorkbookChartAxes overwrites any union data inside the MicrosoftGraphWorkbookChart_Axes as the provided MicrosoftGraphWorkbookChartAxes
func (t *MicrosoftGraphWorkbookChart_Axes) FromMicrosoftGraphWorkbookChartAxes(v MicrosoftGraphWorkbookChartAxes) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphWorkbookChartAxes performs a merge with any union data inside the MicrosoftGraphWorkbookChart_Axes, using the provided MicrosoftGraphWorkbookChartAxes
func (t *MicrosoftGraphWorkbookChart_Axes) MergeMicrosoftGraphWorkbookChartAxes(v MicrosoftGraphWorkbookChartAxes) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsMicrosoftGraphWorkbookChartAxes1 returns the union data inside the MicrosoftGraphWorkbookChart_Axes as a MicrosoftGraphWorkbookChartAxes1
func (t MicrosoftGraphWorkbookChart_Axes) AsMicrosoftGraphWorkbookChartAxes1() (MicrosoftGraphWorkbookChartAxes1, error) {
	var body MicrosoftGraphWorkbookChartAxes1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphWorkbookChartAxes1 overwrites any union data inside the MicrosoftGraphWorkbookChart_Axes as the provided MicrosoftGraphWorkbookChartAxes1
func (t *MicrosoftGraphWorkbookChart_Axes) FromMicrosoftGraphWorkbookChartAxes1(v MicrosoftGraphWorkbookChartAxes1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphWorkbookChartAxes1 performs a merge with any union data inside the MicrosoftGraphWorkbookChart_Axes, using the provided MicrosoftGraphWorkbookChartAxes1
func (t *MicrosoftGraphWorkbookChart_Axes) MergeMicrosoftGraphWorkbookChartAxes1(v MicrosoftGraphWorkbookChartAxes1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

func (t MicrosoftGraphWorkbookChart_Axes) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *MicrosoftGraphWorkbookChart_Axes) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsMicrosoftGraphWorkbookChartDataLabels returns the union data inside the MicrosoftGraphWorkbookChart_DataLabels as a MicrosoftGraphWorkbookChartDataLabels
func (t MicrosoftGraphWorkbookChart_DataLabels) AsMicrosoftGraphWorkbookChartDataLabels() (MicrosoftGraphWorkbookChartDataLabels, error) {
	var body MicrosoftGraphWorkbookChartDataLabels
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphWorkbookChartDataLabels overwrites any union data inside the MicrosoftGraphWorkbookChart_DataLabels as the provided MicrosoftGraphWorkbookChartDataLabels
func (t *MicrosoftGraphWorkbookChart_DataLabels) FromMicrosoftGraphWorkbookChartDataLabels(v MicrosoftGraphWorkbookChartDataLabels) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphWorkbookChartDataLabels performs a merge with any union data inside the MicrosoftGraphWorkbookChart_DataLabels, using the provided MicrosoftGraphWorkbookChartDataLabels
func (t *MicrosoftGraphWorkbookChart_DataLabels) MergeMicrosoftGraphWorkbookChartDataLabels(v MicrosoftGraphWorkbookChartDataLabels) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsMicrosoftGraphWorkbookChartDataLabels1 returns the union data inside the MicrosoftGraphWorkbookChart_DataLabels as a MicrosoftGraphWorkbookChartDataLabels1
func (t MicrosoftGraphWorkbookChart_DataLabels) AsMicrosoftGraphWorkbookChartDataLabels1() (MicrosoftGraphWorkbookChartDataLabels1, error) {
	var body MicrosoftGraphWorkbookChartDataLabels1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphWorkbookChartDataLabels1 overwrites any union data inside the MicrosoftGraphWorkbookChart_DataLabels as the provided MicrosoftGraphWorkbookChartDataLabels1
func (t *MicrosoftGraphWorkbookChart_DataLabels) FromMicrosoftGraphWorkbookChartDataLabels1(v MicrosoftGraphWorkbookChartDataLabels1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphWorkbookChartDataLabels1 performs a merge with any union data inside the MicrosoftGraphWorkbookChart_DataLabels, using the provided MicrosoftGraphWorkbookChartDataLabels1
func (t *MicrosoftGraphWorkbookChart_DataLabels) MergeMicrosoftGraphWorkbookChartDataLabels1(v MicrosoftGraphWorkbookChartDataLabels1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

func (t MicrosoftGraphWorkbookChart_DataLabels) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *MicrosoftGraphWorkbookChart_DataLabels) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsMicrosoftGraphWorkbookChartAreaFormat returns the union data inside the MicrosoftGraphWorkbookChart_Format as a MicrosoftGraphWorkbookChartAreaFormat
func (t MicrosoftGraphWorkbookChart_Format) AsMicrosoftGraphWorkbookChartAreaFormat() (MicrosoftGraphWorkbookChartAreaFormat, error) {
	var body MicrosoftGraphWorkbookChartAreaFormat
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphWorkbookChartAreaFormat overwrites any union data inside the MicrosoftGraphWorkbookChart_Format as the provided MicrosoftGraphWorkbookChartAreaFormat
func (t *MicrosoftGraphWorkbookChart_Format) FromMicrosoftGraphWorkbookChartAreaFormat(v MicrosoftGraphWorkbookChartAreaFormat) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphWorkbookChartAreaFormat performs a merge with any union data inside the MicrosoftGraphWorkbookChart_Format, using the provided MicrosoftGraphWorkbookChartAreaFormat
func (t *MicrosoftGraphWorkbookChart_Format) MergeMicrosoftGraphWorkbookChartAreaFormat(v MicrosoftGraphWorkbookChartAreaFormat) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsMicrosoftGraphWorkbookChartFormat1 returns the union data inside the MicrosoftGraphWorkbookChart_Format as a MicrosoftGraphWorkbookChartFormat1
func (t MicrosoftGraphWorkbookChart_Format) AsMicrosoftGraphWorkbookChartFormat1() (MicrosoftGraphWorkbookChartFormat1, error) {
	var body MicrosoftGraphWorkbookChartFormat1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphWorkbookChartFormat1 overwrites any union data inside the MicrosoftGraphWorkbookChart_Format as the provided MicrosoftGraphWorkbookChartFormat1
func (t *MicrosoftGraphWorkbookChart_Format) FromMicrosoftGraphWorkbookChartFormat1(v MicrosoftGraphWorkbookChartFormat1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphWorkbookChartFormat1 performs a merge with any union data inside the MicrosoftGraphWorkbookChart_Format, using the provided MicrosoftGraphWorkbookChartFormat1
func (t *MicrosoftGraphWorkbookChart_Format) MergeMicrosoftGraphWorkbookChartFormat1(v MicrosoftGraphWorkbookChartFormat1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

func (t MicrosoftGraphWorkbookChart_Format) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *MicrosoftGraphWorkbookChart_Format) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsMicrosoftGraphWorkbookChartHeight0 returns the union data inside the MicrosoftGraphWorkbookChart_Height as a MicrosoftGraphWorkbookChartHeight0
func (t MicrosoftGraphWorkbookChart_Height) AsMicrosoftGraphWorkbookChartHeight0() (MicrosoftGraphWorkbookChartHeight0, error) {
	var body MicrosoftGraphWorkbookChartHeight0
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphWorkbookChartHeight0 overwrites any union data inside the MicrosoftGraphWorkbookChart_Height as the provided MicrosoftGraphWorkbookChartHeight0
func (t *MicrosoftGraphWorkbookChart_Height) FromMicrosoftGraphWorkbookChartHeight0(v MicrosoftGraphWorkbookChartHeight0) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphWorkbookChartHeight0 performs a merge with any union data inside the MicrosoftGraphWorkbookChart_Height, using the provided MicrosoftGraphWorkbookChartHeight0
func (t *MicrosoftGraphWorkbookChart_Height) MergeMicrosoftGraphWorkbookChartHeight0(v MicrosoftGraphWorkbookChartHeight0) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsMicrosoftGraphWorkbookChartHeight1 returns the union data inside the MicrosoftGraphWorkbookChart_Height as a MicrosoftGraphWorkbookChartHeight1
func (t MicrosoftGraphWorkbookChart_Height) AsMicrosoftGraphWorkbookChartHeight1() (MicrosoftGraphWorkbookChartHeight1, error) {
	var body MicrosoftGraphWorkbookChartHeight1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphWorkbookChartHeight1 overwrites any union data inside the MicrosoftGraphWorkbookChart_Height as the provided MicrosoftGraphWorkbookChartHeight1
func (t *MicrosoftGraphWorkbookChart_Height) FromMicrosoftGraphWorkbookChartHeight1(v MicrosoftGraphWorkbookChartHeight1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphWorkbookChartHeight1 performs a merge with any union data inside the MicrosoftGraphWorkbookChart_Height, using the provided MicrosoftGraphWorkbookChartHeight1
func (t *MicrosoftGraphWorkbookChart_Height) MergeMicrosoftGraphWorkbookChartHeight1(v MicrosoftGraphWorkbookChartHeight1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsReferenceNumeric returns the union data inside the MicrosoftGraphWorkbookChart_Height as a ReferenceNumeric
func (t MicrosoftGraphWorkbookChart_Height) AsReferenceNumeric() (ReferenceNumeric, error) {
	var body ReferenceNumeric
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromReferenceNumeric overwrites any union data inside the MicrosoftGraphWorkbookChart_Height as the provided ReferenceNumeric
func (t *MicrosoftGraphWorkbookChart_Height) FromReferenceNumeric(v ReferenceNumeric) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeReferenceNumeric performs a merge with any union data inside the MicrosoftGraphWorkbookChart_Height, using the provided ReferenceNumeric
func (t *MicrosoftGraphWorkbookChart_Height) MergeReferenceNumeric(v ReferenceNumeric) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

func (t MicrosoftGraphWorkbookChart_Height) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *MicrosoftGraphWorkbookChart_Height) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsMicrosoftGraphWorkbookChartLeft0 returns the union data inside the MicrosoftGraphWorkbookChart_Left as a MicrosoftGraphWorkbookChartLeft0
func (t MicrosoftGraphWorkbookChart_Left) AsMicrosoftGraphWorkbookChartLeft0() (MicrosoftGraphWorkbookChartLeft0, error) {
	var body MicrosoftGraphWorkbookChartLeft0
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphWorkbookChartLeft0 overwrites any union data inside the MicrosoftGraphWorkbookChart_Left as the provided MicrosoftGraphWorkbookChartLeft0
func (t *MicrosoftGraphWorkbookChart_Left) FromMicrosoftGraphWorkbookChartLeft0(v MicrosoftGraphWorkbookChartLeft0) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphWorkbookChartLeft0 performs a merge with any union data inside the MicrosoftGraphWorkbookChart_Left, using the provided MicrosoftGraphWorkbookChartLeft0
func (t *MicrosoftGraphWorkbookChart_Left) MergeMicrosoftGraphWorkbookChartLeft0(v MicrosoftGraphWorkbookChartLeft0) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsMicrosoftGraphWorkbookChartLeft1 returns the union data inside the MicrosoftGraphWorkbookChart_Left as a MicrosoftGraphWorkbookChartLeft1
func (t MicrosoftGraphWorkbookChart_Left) AsMicrosoftGraphWorkbookChartLeft1() (MicrosoftGraphWorkbookChartLeft1, error) {
	var body MicrosoftGraphWorkbookChartLeft1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphWorkbookChartLeft1 overwrites any union data inside the MicrosoftGraphWorkbookChart_Left as the provided MicrosoftGraphWorkbookChartLeft1
func (t *MicrosoftGraphWorkbookChart_Left) FromMicrosoftGraphWorkbookChartLeft1(v MicrosoftGraphWorkbookChartLeft1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphWorkbookChartLeft1 performs a merge with any union data inside the MicrosoftGraphWorkbookChart_Left, using the provided MicrosoftGraphWorkbookChartLeft1
func (t *MicrosoftGraphWorkbookChart_Left) MergeMicrosoftGraphWorkbookChartLeft1(v MicrosoftGraphWorkbookChartLeft1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsReferenceNumeric returns the union data inside the MicrosoftGraphWorkbookChart_Left as a ReferenceNumeric
func (t MicrosoftGraphWorkbookChart_Left) AsReferenceNumeric() (ReferenceNumeric, error) {
	var body ReferenceNumeric
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromReferenceNumeric overwrites any union data inside the MicrosoftGraphWorkbookChart_Left as the provided ReferenceNumeric
func (t *MicrosoftGraphWorkbookChart_Left) FromReferenceNumeric(v ReferenceNumeric) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeReferenceNumeric performs a merge with any union data inside the MicrosoftGraphWorkbookChart_Left, using the provided ReferenceNumeric
func (t *MicrosoftGraphWorkbookChart_Left) MergeReferenceNumeric(v ReferenceNumeric) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

func (t MicrosoftGraphWorkbookChart_Left) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *MicrosoftGraphWorkbookChart_Left) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsMicrosoftGraphWorkbookChartLegend returns the union data inside the MicrosoftGraphWorkbookChart_Legend as a MicrosoftGraphWorkbookChartLegend
func (t MicrosoftGraphWorkbookChart_Legend) AsMicrosoftGraphWorkbookChartLegend() (MicrosoftGraphWorkbookChartLegend, error) {
	var body MicrosoftGraphWorkbookChartLegend
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphWorkbookChartLegend overwrites any union data inside the MicrosoftGraphWorkbookChart_Legend as the provided MicrosoftGraphWorkbookChartLegend
func (t *MicrosoftGraphWorkbookChart_Legend) FromMicrosoftGraphWorkbookChartLegend(v MicrosoftGraphWorkbookChartLegend) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphWorkbookChartLegend performs a merge with any union data inside the MicrosoftGraphWorkbookChart_Legend, using the provided MicrosoftGraphWorkbookChartLegend
func (t *MicrosoftGraphWorkbookChart_Legend) MergeMicrosoftGraphWorkbookChartLegend(v MicrosoftGraphWorkbookChartLegend) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsMicrosoftGraphWorkbookChartLegend1 returns the union data inside the MicrosoftGraphWorkbookChart_Legend as a MicrosoftGraphWorkbookChartLegend1
func (t MicrosoftGraphWorkbookChart_Legend) AsMicrosoftGraphWorkbookChartLegend1() (MicrosoftGraphWorkbookChartLegend1, error) {
	var body MicrosoftGraphWorkbookChartLegend1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphWorkbookChartLegend1 overwrites any union data inside the MicrosoftGraphWorkbookChart_Legend as the provided MicrosoftGraphWorkbookChartLegend1
func (t *MicrosoftGraphWorkbookChart_Legend) FromMicrosoftGraphWorkbookChartLegend1(v MicrosoftGraphWorkbookChartLegend1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphWorkbookChartLegend1 performs a merge with any union data inside the MicrosoftGraphWorkbookChart_Legend, using the provided MicrosoftGraphWorkbookChartLegend1
func (t *MicrosoftGraphWorkbookChart_Legend) MergeMicrosoftGraphWorkbookChartLegend1(v MicrosoftGraphWorkbookChartLegend1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

func (t MicrosoftGraphWorkbookChart_Legend) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *MicrosoftGraphWorkbookChart_Legend) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsMicrosoftGraphWorkbookChartTitle returns the union data inside the MicrosoftGraphWorkbookChart_Title as a MicrosoftGraphWorkbookChartTitle
func (t MicrosoftGraphWorkbookChart_Title) AsMicrosoftGraphWorkbookChartTitle() (MicrosoftGraphWorkbookChartTitle, error) {
	var body MicrosoftGraphWorkbookChartTitle
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphWorkbookChartTitle overwrites any union data inside the MicrosoftGraphWorkbookChart_Title as the provided MicrosoftGraphWorkbookChartTitle
func (t *MicrosoftGraphWorkbookChart_Title) FromMicrosoftGraphWorkbookChartTitle(v MicrosoftGraphWorkbookChartTitle) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphWorkbookChartTitle performs a merge with any union data inside the MicrosoftGraphWorkbookChart_Title, using the provided MicrosoftGraphWorkbookChartTitle
func (t *MicrosoftGraphWorkbookChart_Title) MergeMicrosoftGraphWorkbookChartTitle(v MicrosoftGraphWorkbookChartTitle) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsMicrosoftGraphWorkbookChartTitle1 returns the union data inside the MicrosoftGraphWorkbookChart_Title as a MicrosoftGraphWorkbookChartTitle1
func (t MicrosoftGraphWorkbookChart_Title) AsMicrosoftGraphWorkbookChartTitle1() (MicrosoftGraphWorkbookChartTitle1, error) {
	var body MicrosoftGraphWorkbookChartTitle1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphWorkbookChartTitle1 overwrites any union data inside the MicrosoftGraphWorkbookChart_Title as the provided MicrosoftGraphWorkbookChartTitle1
func (t *MicrosoftGraphWorkbookChart_Title) FromMicrosoftGraphWorkbookChartTitle1(v MicrosoftGraphWorkbookChartTitle1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphWorkbookChartTitle1 performs a merge with any union data inside the MicrosoftGraphWorkbookChart_Title, using the provided MicrosoftGraphWorkbookChartTitle1
func (t *MicrosoftGraphWorkbookChart_Title) MergeMicrosoftGraphWorkbookChartTitle1(v MicrosoftGraphWorkbookChartTitle1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

func (t MicrosoftGraphWorkbookChart_Title) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *MicrosoftGraphWorkbookChart_Title) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsMicrosoftGraphWorkbookChartTop0 returns the union data inside the MicrosoftGraphWorkbookChart_Top as a MicrosoftGraphWorkbookChartTop0
func (t MicrosoftGraphWorkbookChart_Top) AsMicrosoftGraphWorkbookChartTop0() (MicrosoftGraphWorkbookChartTop0, error) {
	var body MicrosoftGraphWorkbookChartTop0
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphWorkbookChartTop0 overwrites any union data inside the MicrosoftGraphWorkbookChart_Top as the provided MicrosoftGraphWorkbookChartTop0
func (t *MicrosoftGraphWorkbookChart_Top) FromMicrosoftGraphWorkbookChartTop0(v MicrosoftGraphWorkbookChartTop0) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphWorkbookChartTop0 performs a merge with any union data inside the MicrosoftGraphWorkbookChart_Top, using the provided MicrosoftGraphWorkbookChartTop0
func (t *MicrosoftGraphWorkbookChart_Top) MergeMicrosoftGraphWorkbookChartTop0(v MicrosoftGraphWorkbookChartTop0) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsMicrosoftGraphWorkbookChartTop1 returns the union data inside the MicrosoftGraphWorkbookChart_Top as a MicrosoftGraphWorkbookChartTop1
func (t MicrosoftGraphWorkbookChart_Top) AsMicrosoftGraphWorkbookChartTop1() (MicrosoftGraphWorkbookChartTop1, error) {
	var body MicrosoftGraphWorkbookChartTop1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphWorkbookChartTop1 overwrites any union data inside the MicrosoftGraphWorkbookChart_Top as the provided MicrosoftGraphWorkbookChartTop1
func (t *MicrosoftGraphWorkbookChart_Top) FromMicrosoftGraphWorkbookChartTop1(v MicrosoftGraphWorkbookChartTop1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphWorkbookChartTop1 performs a merge with any union data inside the MicrosoftGraphWorkbookChart_Top, using the provided MicrosoftGraphWorkbookChartTop1
func (t *MicrosoftGraphWorkbookChart_Top) MergeMicrosoftGraphWorkbookChartTop1(v MicrosoftGraphWorkbookChartTop1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsReferenceNumeric returns the union data inside the MicrosoftGraphWorkbookChart_Top as a ReferenceNumeric
func (t MicrosoftGraphWorkbookChart_Top) AsReferenceNumeric() (ReferenceNumeric, error) {
	var body ReferenceNumeric
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromReferenceNumeric overwrites any union data inside the MicrosoftGraphWorkbookChart_Top as the provided ReferenceNumeric
func (t *MicrosoftGraphWorkbookChart_Top) FromReferenceNumeric(v ReferenceNumeric) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeReferenceNumeric performs a merge with any union data inside the MicrosoftGraphWorkbookChart_Top, using the provided ReferenceNumeric
func (t *MicrosoftGraphWorkbookChart_Top) MergeReferenceNumeric(v ReferenceNumeric) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

func (t MicrosoftGraphWorkbookChart_Top) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *MicrosoftGraphWorkbookChart_Top) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsMicrosoftGraphWorkbookChartWidth0 returns the union data inside the MicrosoftGraphWorkbookChart_Width as a MicrosoftGraphWorkbookChartWidth0
func (t MicrosoftGraphWorkbookChart_Width) AsMicrosoftGraphWorkbookChartWidth0() (MicrosoftGraphWorkbookChartWidth0, error) {
	var body MicrosoftGraphWorkbookChartWidth0
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphWorkbookChartWidth0 overwrites any union data inside the MicrosoftGraphWorkbookChart_Width as the provided MicrosoftGraphWorkbookChartWidth0
func (t *MicrosoftGraphWorkbookChart_Width) FromMicrosoftGraphWorkbookChartWidth0(v MicrosoftGraphWorkbookChartWidth0) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphWorkbookChartWidth0 performs a merge with any union data inside the MicrosoftGraphWorkbookChart_Width, using the provided MicrosoftGraphWorkbookChartWidth0
func (t *MicrosoftGraphWorkbookChart_Width) MergeMicrosoftGraphWorkbookChartWidth0(v MicrosoftGraphWorkbookChartWidth0) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsMicrosoftGraphWorkbookChartWidth1 returns the union data inside the MicrosoftGraphWorkbookChart_Width as a MicrosoftGraphWorkbookChartWidth1
func (t MicrosoftGraphWorkbookChart_Width) AsMicrosoftGraphWorkbookChartWidth1() (MicrosoftGraphWorkbookChartWidth1, error) {
	var body MicrosoftGraphWorkbookChartWidth1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphWorkbookChartWidth1 overwrites any union data inside the MicrosoftGraphWorkbookChart_Width as the provided MicrosoftGraphWorkbookChartWidth1
func (t *MicrosoftGraphWorkbookChart_Width) FromMicrosoftGraphWorkbookChartWidth1(v MicrosoftGraphWorkbookChartWidth1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphWorkbookChartWidth1 performs a merge with any union data inside the MicrosoftGraphWorkbookChart_Width, using the provided MicrosoftGraphWorkbookChartWidth1
func (t *MicrosoftGraphWorkbookChart_Width) MergeMicrosoftGraphWorkbookChartWidth1(v MicrosoftGraphWorkbookChartWidth1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsReferenceNumeric returns the union data inside the MicrosoftGraphWorkbookChart_Width as a ReferenceNumeric
func (t MicrosoftGraphWorkbookChart_Width) AsReferenceNumeric() (ReferenceNumeric, error) {
	var body ReferenceNumeric
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromReferenceNumeric overwrites any union data inside the MicrosoftGraphWorkbookChart_Width as the provided ReferenceNumeric
func (t *MicrosoftGraphWorkbookChart_Width) FromReferenceNumeric(v ReferenceNumeric) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeReferenceNumeric performs a merge with any union data inside the MicrosoftGraphWorkbookChart_Width, using the provided ReferenceNumeric
func (t *MicrosoftGraphWorkbookChart_Width) MergeReferenceNumeric(v ReferenceNumeric) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

func (t MicrosoftGraphWorkbookChart_Width) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *MicrosoftGraphWorkbookChart_Width) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsMicrosoftGraphWorkbookWorksheet returns the union data inside the MicrosoftGraphWorkbookChart_Worksheet as a MicrosoftGraphWorkbookWorksheet
func (t MicrosoftGraphWorkbookChart_Worksheet) AsMicrosoftGraphWorkbookWorksheet() (MicrosoftGraphWorkbookWorksheet, error) {
	var body MicrosoftGraphWorkbookWorksheet
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphWorkbookWorksheet overwrites any union data inside the MicrosoftGraphWorkbookChart_Worksheet as the provided MicrosoftGraphWorkbookWorksheet
func (t *MicrosoftGraphWorkbookChart_Worksheet) FromMicrosoftGraphWorkbookWorksheet(v MicrosoftGraphWorkbookWorksheet) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphWorkbookWorksheet performs a merge with any union data inside the MicrosoftGraphWorkbookChart_Worksheet, using the provided MicrosoftGraphWorkbookWorksheet
func (t *MicrosoftGraphWorkbookChart_Worksheet) MergeMicrosoftGraphWorkbookWorksheet(v MicrosoftGraphWorkbookWorksheet) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsMicrosoftGraphWorkbookChartWorksheet1 returns the union data inside the MicrosoftGraphWorkbookChart_Worksheet as a MicrosoftGraphWorkbookChartWorksheet1
func (t MicrosoftGraphWorkbookChart_Worksheet) AsMicrosoftGraphWorkbookChartWorksheet1() (MicrosoftGraphWorkbookChartWorksheet1, error) {
	var body MicrosoftGraphWorkbookChartWorksheet1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphWorkbookChartWorksheet1 overwrites any union data inside the MicrosoftGraphWorkbookChart_Worksheet as the provided MicrosoftGraphWorkbookChartWorksheet1
func (t *MicrosoftGraphWorkbookChart_Worksheet) FromMicrosoftGraphWorkbookChartWorksheet1(v MicrosoftGraphWorkbookChartWorksheet1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphWorkbookChartWorksheet1 performs a merge with any union data inside the MicrosoftGraphWorkbookChart_Worksheet, using the provided MicrosoftGraphWorkbookChartWorksheet1
func (t *MicrosoftGraphWorkbookChart_Worksheet) MergeMicrosoftGraphWorkbookChartWorksheet1(v MicrosoftGraphWorkbookChartWorksheet1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

func (t MicrosoftGraphWorkbookChart_Worksheet) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *MicrosoftGraphWorkbookChart_Worksheet) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsMicrosoftGraphWorkbookChartFill returns the union data inside the MicrosoftGraphWorkbookChartAreaFormat_Fill as a MicrosoftGraphWorkbookChartFill
func (t MicrosoftGraphWorkbookChartAreaFormat_Fill) AsMicrosoftGraphWorkbookChartFill() (MicrosoftGraphWorkbookChartFill, error) {
	var body MicrosoftGraphWorkbookChartFill
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphWorkbookChartFill overwrites any union data inside the MicrosoftGraphWorkbookChartAreaFormat_Fill as the provided MicrosoftGraphWorkbookChartFill
func (t *MicrosoftGraphWorkbookChartAreaFormat_Fill) FromMicrosoftGraphWorkbookChartFill(v MicrosoftGraphWorkbookChartFill) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphWorkbookChartFill performs a merge with any union data inside the MicrosoftGraphWorkbookChartAreaFormat_Fill, using the provided MicrosoftGraphWorkbookChartFill
func (t *MicrosoftGraphWorkbookChartAreaFormat_Fill) MergeMicrosoftGraphWorkbookChartFill(v MicrosoftGraphWorkbookChartFill) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsMicrosoftGraphWorkbookChartAreaFormatFill1 returns the union data inside the MicrosoftGraphWorkbookChartAreaFormat_Fill as a MicrosoftGraphWorkbookChartAreaFormatFill1
func (t MicrosoftGraphWorkbookChartAreaFormat_Fill) AsMicrosoftGraphWorkbookChartAreaFormatFill1() (MicrosoftGraphWorkbookChartAreaFormatFill1, error) {
	var body MicrosoftGraphWorkbookChartAreaFormatFill1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphWorkbookChartAreaFormatFill1 overwrites any union data inside the MicrosoftGraphWorkbookChartAreaFormat_Fill as the provided MicrosoftGraphWorkbookChartAreaFormatFill1
func (t *MicrosoftGraphWorkbookChartAreaFormat_Fill) FromMicrosoftGraphWorkbookChartAreaFormatFill1(v MicrosoftGraphWorkbookChartAreaFormatFill1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphWorkbookChartAreaFormatFill1 performs a merge with any union data inside the MicrosoftGraphWorkbookChartAreaFormat_Fill, using the provided MicrosoftGraphWorkbookChartAreaFormatFill1
func (t *MicrosoftGraphWorkbookChartAreaFormat_Fill) MergeMicrosoftGraphWorkbookChartAreaFormatFill1(v MicrosoftGraphWorkbookChartAreaFormatFill1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

func (t MicrosoftGraphWorkbookChartAreaFormat_Fill) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *MicrosoftGraphWorkbookChartAreaFormat_Fill) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsMicrosoftGraphWorkbookChartFont returns the union data inside the MicrosoftGraphWorkbookChartAreaFormat_Font as a MicrosoftGraphWorkbookChartFont
func (t MicrosoftGraphWorkbookChartAreaFormat_Font) AsMicrosoftGraphWorkbookChartFont() (MicrosoftGraphWorkbookChartFont, error) {
	var body MicrosoftGraphWorkbookChartFont
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphWorkbookChartFont overwrites any union data inside the MicrosoftGraphWorkbookChartAreaFormat_Font as the provided MicrosoftGraphWorkbookChartFont
func (t *MicrosoftGraphWorkbookChartAreaFormat_Font) FromMicrosoftGraphWorkbookChartFont(v MicrosoftGraphWorkbookChartFont) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphWorkbookChartFont performs a merge with any union data inside the MicrosoftGraphWorkbookChartAreaFormat_Font, using the provided MicrosoftGraphWorkbookChartFont
func (t *MicrosoftGraphWorkbookChartAreaFormat_Font) MergeMicrosoftGraphWorkbookChartFont(v MicrosoftGraphWorkbookChartFont) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsMicrosoftGraphWorkbookChartAreaFormatFont1 returns the union data inside the MicrosoftGraphWorkbookChartAreaFormat_Font as a MicrosoftGraphWorkbookChartAreaFormatFont1
func (t MicrosoftGraphWorkbookChartAreaFormat_Font) AsMicrosoftGraphWorkbookChartAreaFormatFont1() (MicrosoftGraphWorkbookChartAreaFormatFont1, error) {
	var body MicrosoftGraphWorkbookChartAreaFormatFont1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphWorkbookChartAreaFormatFont1 overwrites any union data inside the MicrosoftGraphWorkbookChartAreaFormat_Font as the provided MicrosoftGraphWorkbookChartAreaFormatFont1
func (t *MicrosoftGraphWorkbookChartAreaFormat_Font) FromMicrosoftGraphWorkbookChartAreaFormatFont1(v MicrosoftGraphWorkbookChartAreaFormatFont1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphWorkbookChartAreaFormatFont1 performs a merge with any union data inside the MicrosoftGraphWorkbookChartAreaFormat_Font, using the provided MicrosoftGraphWorkbookChartAreaFormatFont1
func (t *MicrosoftGraphWorkbookChartAreaFormat_Font) MergeMicrosoftGraphWorkbookChartAreaFormatFont1(v MicrosoftGraphWorkbookChartAreaFormatFont1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

func (t MicrosoftGraphWorkbookChartAreaFormat_Font) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *MicrosoftGraphWorkbookChartAreaFormat_Font) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsMicrosoftGraphWorkbookChartAxis returns the union data inside the MicrosoftGraphWorkbookChartAxes_CategoryAxis as a MicrosoftGraphWorkbookChartAxis
func (t MicrosoftGraphWorkbookChartAxes_CategoryAxis) AsMicrosoftGraphWorkbookChartAxis() (MicrosoftGraphWorkbookChartAxis, error) {
	var body MicrosoftGraphWorkbookChartAxis
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphWorkbookChartAxis overwrites any union data inside the MicrosoftGraphWorkbookChartAxes_CategoryAxis as the provided MicrosoftGraphWorkbookChartAxis
func (t *MicrosoftGraphWorkbookChartAxes_CategoryAxis) FromMicrosoftGraphWorkbookChartAxis(v MicrosoftGraphWorkbookChartAxis) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphWorkbookChartAxis performs a merge with any union data inside the MicrosoftGraphWorkbookChartAxes_CategoryAxis, using the provided MicrosoftGraphWorkbookChartAxis
func (t *MicrosoftGraphWorkbookChartAxes_CategoryAxis) MergeMicrosoftGraphWorkbookChartAxis(v MicrosoftGraphWorkbookChartAxis) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsMicrosoftGraphWorkbookChartAxesCategoryAxis1 returns the union data inside the MicrosoftGraphWorkbookChartAxes_CategoryAxis as a MicrosoftGraphWorkbookChartAxesCategoryAxis1
func (t MicrosoftGraphWorkbookChartAxes_CategoryAxis) AsMicrosoftGraphWorkbookChartAxesCategoryAxis1() (MicrosoftGraphWorkbookChartAxesCategoryAxis1, error) {
	var body MicrosoftGraphWorkbookChartAxesCategoryAxis1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphWorkbookChartAxesCategoryAxis1 overwrites any union data inside the MicrosoftGraphWorkbookChartAxes_CategoryAxis as the provided MicrosoftGraphWorkbookChartAxesCategoryAxis1
func (t *MicrosoftGraphWorkbookChartAxes_CategoryAxis) FromMicrosoftGraphWorkbookChartAxesCategoryAxis1(v MicrosoftGraphWorkbookChartAxesCategoryAxis1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphWorkbookChartAxesCategoryAxis1 performs a merge with any union data inside the MicrosoftGraphWorkbookChartAxes_CategoryAxis, using the provided MicrosoftGraphWorkbookChartAxesCategoryAxis1
func (t *MicrosoftGraphWorkbookChartAxes_CategoryAxis) MergeMicrosoftGraphWorkbookChartAxesCategoryAxis1(v MicrosoftGraphWorkbookChartAxesCategoryAxis1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

func (t MicrosoftGraphWorkbookChartAxes_CategoryAxis) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *MicrosoftGraphWorkbookChartAxes_CategoryAxis) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsMicrosoftGraphWorkbookChartAxis returns the union data inside the MicrosoftGraphWorkbookChartAxes_SeriesAxis as a MicrosoftGraphWorkbookChartAxis
func (t MicrosoftGraphWorkbookChartAxes_SeriesAxis) AsMicrosoftGraphWorkbookChartAxis() (MicrosoftGraphWorkbookChartAxis, error) {
	var body MicrosoftGraphWorkbookChartAxis
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphWorkbookChartAxis overwrites any union data inside the MicrosoftGraphWorkbookChartAxes_SeriesAxis as the provided MicrosoftGraphWorkbookChartAxis
func (t *MicrosoftGraphWorkbookChartAxes_SeriesAxis) FromMicrosoftGraphWorkbookChartAxis(v MicrosoftGraphWorkbookChartAxis) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphWorkbookChartAxis performs a merge with any union data inside the MicrosoftGraphWorkbookChartAxes_SeriesAxis, using the provided MicrosoftGraphWorkbookChartAxis
func (t *MicrosoftGraphWorkbookChartAxes_SeriesAxis) MergeMicrosoftGraphWorkbookChartAxis(v MicrosoftGraphWorkbookChartAxis) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsMicrosoftGraphWorkbookChartAxesSeriesAxis1 returns the union data inside the MicrosoftGraphWorkbookChartAxes_SeriesAxis as a MicrosoftGraphWorkbookChartAxesSeriesAxis1
func (t MicrosoftGraphWorkbookChartAxes_SeriesAxis) AsMicrosoftGraphWorkbookChartAxesSeriesAxis1() (MicrosoftGraphWorkbookChartAxesSeriesAxis1, error) {
	var body MicrosoftGraphWorkbookChartAxesSeriesAxis1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphWorkbookChartAxesSeriesAxis1 overwrites any union data inside the MicrosoftGraphWorkbookChartAxes_SeriesAxis as the provided MicrosoftGraphWorkbookChartAxesSeriesAxis1
func (t *MicrosoftGraphWorkbookChartAxes_SeriesAxis) FromMicrosoftGraphWorkbookChartAxesSeriesAxis1(v MicrosoftGraphWorkbookChartAxesSeriesAxis1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphWorkbookChartAxesSeriesAxis1 performs a merge with any union data inside the MicrosoftGraphWorkbookChartAxes_SeriesAxis, using the provided MicrosoftGraphWorkbookChartAxesSeriesAxis1
func (t *MicrosoftGraphWorkbookChartAxes_SeriesAxis) MergeMicrosoftGraphWorkbookChartAxesSeriesAxis1(v MicrosoftGraphWorkbookChartAxesSeriesAxis1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

func (t MicrosoftGraphWorkbookChartAxes_SeriesAxis) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *MicrosoftGraphWorkbookChartAxes_SeriesAxis) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsMicrosoftGraphWorkbookChartAxis returns the union data inside the MicrosoftGraphWorkbookChartAxes_ValueAxis as a MicrosoftGraphWorkbookChartAxis
func (t MicrosoftGraphWorkbookChartAxes_ValueAxis) AsMicrosoftGraphWorkbookChartAxis() (MicrosoftGraphWorkbookChartAxis, error) {
	var body MicrosoftGraphWorkbookChartAxis
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphWorkbookChartAxis overwrites any union data inside the MicrosoftGraphWorkbookChartAxes_ValueAxis as the provided MicrosoftGraphWorkbookChartAxis
func (t *MicrosoftGraphWorkbookChartAxes_ValueAxis) FromMicrosoftGraphWorkbookChartAxis(v MicrosoftGraphWorkbookChartAxis) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphWorkbookChartAxis performs a merge with any union data inside the MicrosoftGraphWorkbookChartAxes_ValueAxis, using the provided MicrosoftGraphWorkbookChartAxis
func (t *MicrosoftGraphWorkbookChartAxes_ValueAxis) MergeMicrosoftGraphWorkbookChartAxis(v MicrosoftGraphWorkbookChartAxis) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsMicrosoftGraphWorkbookChartAxesValueAxis1 returns the union data inside the MicrosoftGraphWorkbookChartAxes_ValueAxis as a MicrosoftGraphWorkbookChartAxesValueAxis1
func (t MicrosoftGraphWorkbookChartAxes_ValueAxis) AsMicrosoftGraphWorkbookChartAxesValueAxis1() (MicrosoftGraphWorkbookChartAxesValueAxis1, error) {
	var body MicrosoftGraphWorkbookChartAxesValueAxis1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphWorkbookChartAxesValueAxis1 overwrites any union data inside the MicrosoftGraphWorkbookChartAxes_ValueAxis as the provided MicrosoftGraphWorkbookChartAxesValueAxis1
func (t *MicrosoftGraphWorkbookChartAxes_ValueAxis) FromMicrosoftGraphWorkbookChartAxesValueAxis1(v MicrosoftGraphWorkbookChartAxesValueAxis1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphWorkbookChartAxesValueAxis1 performs a merge with any union data inside the MicrosoftGraphWorkbookChartAxes_ValueAxis, using the provided MicrosoftGraphWorkbookChartAxesValueAxis1
func (t *MicrosoftGraphWorkbookChartAxes_ValueAxis) MergeMicrosoftGraphWorkbookChartAxesValueAxis1(v MicrosoftGraphWorkbookChartAxesValueAxis1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

func (t MicrosoftGraphWorkbookChartAxes_ValueAxis) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *MicrosoftGraphWorkbookChartAxes_ValueAxis) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsMicrosoftGraphWorkbookChartAxisFormat returns the union data inside the MicrosoftGraphWorkbookChartAxis_Format as a MicrosoftGraphWorkbookChartAxisFormat
func (t MicrosoftGraphWorkbookChartAxis_Format) AsMicrosoftGraphWorkbookChartAxisFormat() (MicrosoftGraphWorkbookChartAxisFormat, error) {
	var body MicrosoftGraphWorkbookChartAxisFormat
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphWorkbookChartAxisFormat overwrites any union data inside the MicrosoftGraphWorkbookChartAxis_Format as the provided MicrosoftGraphWorkbookChartAxisFormat
func (t *MicrosoftGraphWorkbookChartAxis_Format) FromMicrosoftGraphWorkbookChartAxisFormat(v MicrosoftGraphWorkbookChartAxisFormat) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphWorkbookChartAxisFormat performs a merge with any union data inside the MicrosoftGraphWorkbookChartAxis_Format, using the provided MicrosoftGraphWorkbookChartAxisFormat
func (t *MicrosoftGraphWorkbookChartAxis_Format) MergeMicrosoftGraphWorkbookChartAxisFormat(v MicrosoftGraphWorkbookChartAxisFormat) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsMicrosoftGraphWorkbookChartAxisFormat1 returns the union data inside the MicrosoftGraphWorkbookChartAxis_Format as a MicrosoftGraphWorkbookChartAxisFormat1
func (t MicrosoftGraphWorkbookChartAxis_Format) AsMicrosoftGraphWorkbookChartAxisFormat1() (MicrosoftGraphWorkbookChartAxisFormat1, error) {
	var body MicrosoftGraphWorkbookChartAxisFormat1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphWorkbookChartAxisFormat1 overwrites any union data inside the MicrosoftGraphWorkbookChartAxis_Format as the provided MicrosoftGraphWorkbookChartAxisFormat1
func (t *MicrosoftGraphWorkbookChartAxis_Format) FromMicrosoftGraphWorkbookChartAxisFormat1(v MicrosoftGraphWorkbookChartAxisFormat1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphWorkbookChartAxisFormat1 performs a merge with any union data inside the MicrosoftGraphWorkbookChartAxis_Format, using the provided MicrosoftGraphWorkbookChartAxisFormat1
func (t *MicrosoftGraphWorkbookChartAxis_Format) MergeMicrosoftGraphWorkbookChartAxisFormat1(v MicrosoftGraphWorkbookChartAxisFormat1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

func (t MicrosoftGraphWorkbookChartAxis_Format) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *MicrosoftGraphWorkbookChartAxis_Format) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsMicrosoftGraphWorkbookChartGridlines returns the union data inside the MicrosoftGraphWorkbookChartAxis_MajorGridlines as a MicrosoftGraphWorkbookChartGridlines
func (t MicrosoftGraphWorkbookChartAxis_MajorGridlines) AsMicrosoftGraphWorkbookChartGridlines() (MicrosoftGraphWorkbookChartGridlines, error) {
	var body MicrosoftGraphWorkbookChartGridlines
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphWorkbookChartGridlines overwrites any union data inside the MicrosoftGraphWorkbookChartAxis_MajorGridlines as the provided MicrosoftGraphWorkbookChartGridlines
func (t *MicrosoftGraphWorkbookChartAxis_MajorGridlines) FromMicrosoftGraphWorkbookChartGridlines(v MicrosoftGraphWorkbookChartGridlines) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphWorkbookChartGridlines performs a merge with any union data inside the MicrosoftGraphWorkbookChartAxis_MajorGridlines, using the provided MicrosoftGraphWorkbookChartGridlines
func (t *MicrosoftGraphWorkbookChartAxis_MajorGridlines) MergeMicrosoftGraphWorkbookChartGridlines(v MicrosoftGraphWorkbookChartGridlines) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsMicrosoftGraphWorkbookChartAxisMajorGridlines1 returns the union data inside the MicrosoftGraphWorkbookChartAxis_MajorGridlines as a MicrosoftGraphWorkbookChartAxisMajorGridlines1
func (t MicrosoftGraphWorkbookChartAxis_MajorGridlines) AsMicrosoftGraphWorkbookChartAxisMajorGridlines1() (MicrosoftGraphWorkbookChartAxisMajorGridlines1, error) {
	var body MicrosoftGraphWorkbookChartAxisMajorGridlines1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphWorkbookChartAxisMajorGridlines1 overwrites any union data inside the MicrosoftGraphWorkbookChartAxis_MajorGridlines as the provided MicrosoftGraphWorkbookChartAxisMajorGridlines1
func (t *MicrosoftGraphWorkbookChartAxis_MajorGridlines) FromMicrosoftGraphWorkbookChartAxisMajorGridlines1(v MicrosoftGraphWorkbookChartAxisMajorGridlines1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphWorkbookChartAxisMajorGridlines1 performs a merge with any union data inside the MicrosoftGraphWorkbookChartAxis_MajorGridlines, using the provided MicrosoftGraphWorkbookChartAxisMajorGridlines1
func (t *MicrosoftGraphWorkbookChartAxis_MajorGridlines) MergeMicrosoftGraphWorkbookChartAxisMajorGridlines1(v MicrosoftGraphWorkbookChartAxisMajorGridlines1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

func (t MicrosoftGraphWorkbookChartAxis_MajorGridlines) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *MicrosoftGraphWorkbookChartAxis_MajorGridlines) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsMicrosoftGraphJson returns the union data inside the MicrosoftGraphWorkbookChartAxis_MajorUnit as a MicrosoftGraphJson
func (t MicrosoftGraphWorkbookChartAxis_MajorUnit) AsMicrosoftGraphJson() (MicrosoftGraphJson, error) {
	var body MicrosoftGraphJson
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphJson overwrites any union data inside the MicrosoftGraphWorkbookChartAxis_MajorUnit as the provided MicrosoftGraphJson
func (t *MicrosoftGraphWorkbookChartAxis_MajorUnit) FromMicrosoftGraphJson(v MicrosoftGraphJson) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphJson performs a merge with any union data inside the MicrosoftGraphWorkbookChartAxis_MajorUnit, using the provided MicrosoftGraphJson
func (t *MicrosoftGraphWorkbookChartAxis_MajorUnit) MergeMicrosoftGraphJson(v MicrosoftGraphJson) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsMicrosoftGraphWorkbookChartAxisMajorUnit1 returns the union data inside the MicrosoftGraphWorkbookChartAxis_MajorUnit as a MicrosoftGraphWorkbookChartAxisMajorUnit1
func (t MicrosoftGraphWorkbookChartAxis_MajorUnit) AsMicrosoftGraphWorkbookChartAxisMajorUnit1() (MicrosoftGraphWorkbookChartAxisMajorUnit1, error) {
	var body MicrosoftGraphWorkbookChartAxisMajorUnit1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphWorkbookChartAxisMajorUnit1 overwrites any union data inside the MicrosoftGraphWorkbookChartAxis_MajorUnit as the provided MicrosoftGraphWorkbookChartAxisMajorUnit1
func (t *MicrosoftGraphWorkbookChartAxis_MajorUnit) FromMicrosoftGraphWorkbookChartAxisMajorUnit1(v MicrosoftGraphWorkbookChartAxisMajorUnit1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphWorkbookChartAxisMajorUnit1 performs a merge with any union data inside the MicrosoftGraphWorkbookChartAxis_MajorUnit, using the provided MicrosoftGraphWorkbookChartAxisMajorUnit1
func (t *MicrosoftGraphWorkbookChartAxis_MajorUnit) MergeMicrosoftGraphWorkbookChartAxisMajorUnit1(v MicrosoftGraphWorkbookChartAxisMajorUnit1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

func (t MicrosoftGraphWorkbookChartAxis_MajorUnit) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *MicrosoftGraphWorkbookChartAxis_MajorUnit) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsMicrosoftGraphJson returns the union data inside the MicrosoftGraphWorkbookChartAxis_Maximum as a MicrosoftGraphJson
func (t MicrosoftGraphWorkbookChartAxis_Maximum) AsMicrosoftGraphJson() (MicrosoftGraphJson, error) {
	var body MicrosoftGraphJson
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphJson overwrites any union data inside the MicrosoftGraphWorkbookChartAxis_Maximum as the provided MicrosoftGraphJson
func (t *MicrosoftGraphWorkbookChartAxis_Maximum) FromMicrosoftGraphJson(v MicrosoftGraphJson) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphJson performs a merge with any union data inside the MicrosoftGraphWorkbookChartAxis_Maximum, using the provided MicrosoftGraphJson
func (t *MicrosoftGraphWorkbookChartAxis_Maximum) MergeMicrosoftGraphJson(v MicrosoftGraphJson) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsMicrosoftGraphWorkbookChartAxisMaximum1 returns the union data inside the MicrosoftGraphWorkbookChartAxis_Maximum as a MicrosoftGraphWorkbookChartAxisMaximum1
func (t MicrosoftGraphWorkbookChartAxis_Maximum) AsMicrosoftGraphWorkbookChartAxisMaximum1() (MicrosoftGraphWorkbookChartAxisMaximum1, error) {
	var body MicrosoftGraphWorkbookChartAxisMaximum1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphWorkbookChartAxisMaximum1 overwrites any union data inside the MicrosoftGraphWorkbookChartAxis_Maximum as the provided MicrosoftGraphWorkbookChartAxisMaximum1
func (t *MicrosoftGraphWorkbookChartAxis_Maximum) FromMicrosoftGraphWorkbookChartAxisMaximum1(v MicrosoftGraphWorkbookChartAxisMaximum1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphWorkbookChartAxisMaximum1 performs a merge with any union data inside the MicrosoftGraphWorkbookChartAxis_Maximum, using the provided MicrosoftGraphWorkbookChartAxisMaximum1
func (t *MicrosoftGraphWorkbookChartAxis_Maximum) MergeMicrosoftGraphWorkbookChartAxisMaximum1(v MicrosoftGraphWorkbookChartAxisMaximum1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

func (t MicrosoftGraphWorkbookChartAxis_Maximum) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *MicrosoftGraphWorkbookChartAxis_Maximum) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsMicrosoftGraphJson returns the union data inside the MicrosoftGraphWorkbookChartAxis_Minimum as a MicrosoftGraphJson
func (t MicrosoftGraphWorkbookChartAxis_Minimum) AsMicrosoftGraphJson() (MicrosoftGraphJson, error) {
	var body MicrosoftGraphJson
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphJson overwrites any union data inside the MicrosoftGraphWorkbookChartAxis_Minimum as the provided MicrosoftGraphJson
func (t *MicrosoftGraphWorkbookChartAxis_Minimum) FromMicrosoftGraphJson(v MicrosoftGraphJson) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphJson performs a merge with any union data inside the MicrosoftGraphWorkbookChartAxis_Minimum, using the provided MicrosoftGraphJson
func (t *MicrosoftGraphWorkbookChartAxis_Minimum) MergeMicrosoftGraphJson(v MicrosoftGraphJson) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsMicrosoftGraphWorkbookChartAxisMinimum1 returns the union data inside the MicrosoftGraphWorkbookChartAxis_Minimum as a MicrosoftGraphWorkbookChartAxisMinimum1
func (t MicrosoftGraphWorkbookChartAxis_Minimum) AsMicrosoftGraphWorkbookChartAxisMinimum1() (MicrosoftGraphWorkbookChartAxisMinimum1, error) {
	var body MicrosoftGraphWorkbookChartAxisMinimum1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphWorkbookChartAxisMinimum1 overwrites any union data inside the MicrosoftGraphWorkbookChartAxis_Minimum as the provided MicrosoftGraphWorkbookChartAxisMinimum1
func (t *MicrosoftGraphWorkbookChartAxis_Minimum) FromMicrosoftGraphWorkbookChartAxisMinimum1(v MicrosoftGraphWorkbookChartAxisMinimum1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphWorkbookChartAxisMinimum1 performs a merge with any union data inside the MicrosoftGraphWorkbookChartAxis_Minimum, using the provided MicrosoftGraphWorkbookChartAxisMinimum1
func (t *MicrosoftGraphWorkbookChartAxis_Minimum) MergeMicrosoftGraphWorkbookChartAxisMinimum1(v MicrosoftGraphWorkbookChartAxisMinimum1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

func (t MicrosoftGraphWorkbookChartAxis_Minimum) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *MicrosoftGraphWorkbookChartAxis_Minimum) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsMicrosoftGraphWorkbookChartGridlines returns the union data inside the MicrosoftGraphWorkbookChartAxis_MinorGridlines as a MicrosoftGraphWorkbookChartGridlines
func (t MicrosoftGraphWorkbookChartAxis_MinorGridlines) AsMicrosoftGraphWorkbookChartGridlines() (MicrosoftGraphWorkbookChartGridlines, error) {
	var body MicrosoftGraphWorkbookChartGridlines
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphWorkbookChartGridlines overwrites any union data inside the MicrosoftGraphWorkbookChartAxis_MinorGridlines as the provided MicrosoftGraphWorkbookChartGridlines
func (t *MicrosoftGraphWorkbookChartAxis_MinorGridlines) FromMicrosoftGraphWorkbookChartGridlines(v MicrosoftGraphWorkbookChartGridlines) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphWorkbookChartGridlines performs a merge with any union data inside the MicrosoftGraphWorkbookChartAxis_MinorGridlines, using the provided MicrosoftGraphWorkbookChartGridlines
func (t *MicrosoftGraphWorkbookChartAxis_MinorGridlines) MergeMicrosoftGraphWorkbookChartGridlines(v MicrosoftGraphWorkbookChartGridlines) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsMicrosoftGraphWorkbookChartAxisMinorGridlines1 returns the union data inside the MicrosoftGraphWorkbookChartAxis_MinorGridlines as a MicrosoftGraphWorkbookChartAxisMinorGridlines1
func (t MicrosoftGraphWorkbookChartAxis_MinorGridlines) AsMicrosoftGraphWorkbookChartAxisMinorGridlines1() (MicrosoftGraphWorkbookChartAxisMinorGridlines1, error) {
	var body MicrosoftGraphWorkbookChartAxisMinorGridlines1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphWorkbookChartAxisMinorGridlines1 overwrites any union data inside the MicrosoftGraphWorkbookChartAxis_MinorGridlines as the provided MicrosoftGraphWorkbookChartAxisMinorGridlines1
func (t *MicrosoftGraphWorkbookChartAxis_MinorGridlines) FromMicrosoftGraphWorkbookChartAxisMinorGridlines1(v MicrosoftGraphWorkbookChartAxisMinorGridlines1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphWorkbookChartAxisMinorGridlines1 performs a merge with any union data inside the MicrosoftGraphWorkbookChartAxis_MinorGridlines, using the provided MicrosoftGraphWorkbookChartAxisMinorGridlines1
func (t *MicrosoftGraphWorkbookChartAxis_MinorGridlines) MergeMicrosoftGraphWorkbookChartAxisMinorGridlines1(v MicrosoftGraphWorkbookChartAxisMinorGridlines1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

func (t MicrosoftGraphWorkbookChartAxis_MinorGridlines) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *MicrosoftGraphWorkbookChartAxis_MinorGridlines) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsMicrosoftGraphJson returns the union data inside the MicrosoftGraphWorkbookChartAxis_MinorUnit as a MicrosoftGraphJson
func (t MicrosoftGraphWorkbookChartAxis_MinorUnit) AsMicrosoftGraphJson() (MicrosoftGraphJson, error) {
	var body MicrosoftGraphJson
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphJson overwrites any union data inside the MicrosoftGraphWorkbookChartAxis_MinorUnit as the provided MicrosoftGraphJson
func (t *MicrosoftGraphWorkbookChartAxis_MinorUnit) FromMicrosoftGraphJson(v MicrosoftGraphJson) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphJson performs a merge with any union data inside the MicrosoftGraphWorkbookChartAxis_MinorUnit, using the provided MicrosoftGraphJson
func (t *MicrosoftGraphWorkbookChartAxis_MinorUnit) MergeMicrosoftGraphJson(v MicrosoftGraphJson) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsMicrosoftGraphWorkbookChartAxisMinorUnit1 returns the union data inside the MicrosoftGraphWorkbookChartAxis_MinorUnit as a MicrosoftGraphWorkbookChartAxisMinorUnit1
func (t MicrosoftGraphWorkbookChartAxis_MinorUnit) AsMicrosoftGraphWorkbookChartAxisMinorUnit1() (MicrosoftGraphWorkbookChartAxisMinorUnit1, error) {
	var body MicrosoftGraphWorkbookChartAxisMinorUnit1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphWorkbookChartAxisMinorUnit1 overwrites any union data inside the MicrosoftGraphWorkbookChartAxis_MinorUnit as the provided MicrosoftGraphWorkbookChartAxisMinorUnit1
func (t *MicrosoftGraphWorkbookChartAxis_MinorUnit) FromMicrosoftGraphWorkbookChartAxisMinorUnit1(v MicrosoftGraphWorkbookChartAxisMinorUnit1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphWorkbookChartAxisMinorUnit1 performs a merge with any union data inside the MicrosoftGraphWorkbookChartAxis_MinorUnit, using the provided MicrosoftGraphWorkbookChartAxisMinorUnit1
func (t *MicrosoftGraphWorkbookChartAxis_MinorUnit) MergeMicrosoftGraphWorkbookChartAxisMinorUnit1(v MicrosoftGraphWorkbookChartAxisMinorUnit1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

func (t MicrosoftGraphWorkbookChartAxis_MinorUnit) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *MicrosoftGraphWorkbookChartAxis_MinorUnit) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsMicrosoftGraphWorkbookChartAxisTitle returns the union data inside the MicrosoftGraphWorkbookChartAxis_Title as a MicrosoftGraphWorkbookChartAxisTitle
func (t MicrosoftGraphWorkbookChartAxis_Title) AsMicrosoftGraphWorkbookChartAxisTitle() (MicrosoftGraphWorkbookChartAxisTitle, error) {
	var body MicrosoftGraphWorkbookChartAxisTitle
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphWorkbookChartAxisTitle overwrites any union data inside the MicrosoftGraphWorkbookChartAxis_Title as the provided MicrosoftGraphWorkbookChartAxisTitle
func (t *MicrosoftGraphWorkbookChartAxis_Title) FromMicrosoftGraphWorkbookChartAxisTitle(v MicrosoftGraphWorkbookChartAxisTitle) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphWorkbookChartAxisTitle performs a merge with any union data inside the MicrosoftGraphWorkbookChartAxis_Title, using the provided MicrosoftGraphWorkbookChartAxisTitle
func (t *MicrosoftGraphWorkbookChartAxis_Title) MergeMicrosoftGraphWorkbookChartAxisTitle(v MicrosoftGraphWorkbookChartAxisTitle) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsMicrosoftGraphWorkbookChartAxisTitle1 returns the union data inside the MicrosoftGraphWorkbookChartAxis_Title as a MicrosoftGraphWorkbookChartAxisTitle1
func (t MicrosoftGraphWorkbookChartAxis_Title) AsMicrosoftGraphWorkbookChartAxisTitle1() (MicrosoftGraphWorkbookChartAxisTitle1, error) {
	var body MicrosoftGraphWorkbookChartAxisTitle1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphWorkbookChartAxisTitle1 overwrites any union data inside the MicrosoftGraphWorkbookChartAxis_Title as the provided MicrosoftGraphWorkbookChartAxisTitle1
func (t *MicrosoftGraphWorkbookChartAxis_Title) FromMicrosoftGraphWorkbookChartAxisTitle1(v MicrosoftGraphWorkbookChartAxisTitle1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphWorkbookChartAxisTitle1 performs a merge with any union data inside the MicrosoftGraphWorkbookChartAxis_Title, using the provided MicrosoftGraphWorkbookChartAxisTitle1
func (t *MicrosoftGraphWorkbookChartAxis_Title) MergeMicrosoftGraphWorkbookChartAxisTitle1(v MicrosoftGraphWorkbookChartAxisTitle1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

func (t MicrosoftGraphWorkbookChartAxis_Title) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *MicrosoftGraphWorkbookChartAxis_Title) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsMicrosoftGraphWorkbookChartFont returns the union data inside the MicrosoftGraphWorkbookChartAxisFormat_Font as a MicrosoftGraphWorkbookChartFont
func (t MicrosoftGraphWorkbookChartAxisFormat_Font) AsMicrosoftGraphWorkbookChartFont() (MicrosoftGraphWorkbookChartFont, error) {
	var body MicrosoftGraphWorkbookChartFont
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphWorkbookChartFont overwrites any union data inside the MicrosoftGraphWorkbookChartAxisFormat_Font as the provided MicrosoftGraphWorkbookChartFont
func (t *MicrosoftGraphWorkbookChartAxisFormat_Font) FromMicrosoftGraphWorkbookChartFont(v MicrosoftGraphWorkbookChartFont) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphWorkbookChartFont performs a merge with any union data inside the MicrosoftGraphWorkbookChartAxisFormat_Font, using the provided MicrosoftGraphWorkbookChartFont
func (t *MicrosoftGraphWorkbookChartAxisFormat_Font) MergeMicrosoftGraphWorkbookChartFont(v MicrosoftGraphWorkbookChartFont) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsMicrosoftGraphWorkbookChartAxisFormatFont1 returns the union data inside the MicrosoftGraphWorkbookChartAxisFormat_Font as a MicrosoftGraphWorkbookChartAxisFormatFont1
func (t MicrosoftGraphWorkbookChartAxisFormat_Font) AsMicrosoftGraphWorkbookChartAxisFormatFont1() (MicrosoftGraphWorkbookChartAxisFormatFont1, error) {
	var body MicrosoftGraphWorkbookChartAxisFormatFont1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphWorkbookChartAxisFormatFont1 overwrites any union data inside the MicrosoftGraphWorkbookChartAxisFormat_Font as the provided MicrosoftGraphWorkbookChartAxisFormatFont1
func (t *MicrosoftGraphWorkbookChartAxisFormat_Font) FromMicrosoftGraphWorkbookChartAxisFormatFont1(v MicrosoftGraphWorkbookChartAxisFormatFont1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphWorkbookChartAxisFormatFont1 performs a merge with any union data inside the MicrosoftGraphWorkbookChartAxisFormat_Font, using the provided MicrosoftGraphWorkbookChartAxisFormatFont1
func (t *MicrosoftGraphWorkbookChartAxisFormat_Font) MergeMicrosoftGraphWorkbookChartAxisFormatFont1(v MicrosoftGraphWorkbookChartAxisFormatFont1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

func (t MicrosoftGraphWorkbookChartAxisFormat_Font) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *MicrosoftGraphWorkbookChartAxisFormat_Font) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsMicrosoftGraphWorkbookChartLineFormat returns the union data inside the MicrosoftGraphWorkbookChartAxisFormat_Line as a MicrosoftGraphWorkbookChartLineFormat
func (t MicrosoftGraphWorkbookChartAxisFormat_Line) AsMicrosoftGraphWorkbookChartLineFormat() (MicrosoftGraphWorkbookChartLineFormat, error) {
	var body MicrosoftGraphWorkbookChartLineFormat
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphWorkbookChartLineFormat overwrites any union data inside the MicrosoftGraphWorkbookChartAxisFormat_Line as the provided MicrosoftGraphWorkbookChartLineFormat
func (t *MicrosoftGraphWorkbookChartAxisFormat_Line) FromMicrosoftGraphWorkbookChartLineFormat(v MicrosoftGraphWorkbookChartLineFormat) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphWorkbookChartLineFormat performs a merge with any union data inside the MicrosoftGraphWorkbookChartAxisFormat_Line, using the provided MicrosoftGraphWorkbookChartLineFormat
func (t *MicrosoftGraphWorkbookChartAxisFormat_Line) MergeMicrosoftGraphWorkbookChartLineFormat(v MicrosoftGraphWorkbookChartLineFormat) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsMicrosoftGraphWorkbookChartAxisFormatLine1 returns the union data inside the MicrosoftGraphWorkbookChartAxisFormat_Line as a MicrosoftGraphWorkbookChartAxisFormatLine1
func (t MicrosoftGraphWorkbookChartAxisFormat_Line) AsMicrosoftGraphWorkbookChartAxisFormatLine1() (MicrosoftGraphWorkbookChartAxisFormatLine1, error) {
	var body MicrosoftGraphWorkbookChartAxisFormatLine1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphWorkbookChartAxisFormatLine1 overwrites any union data inside the MicrosoftGraphWorkbookChartAxisFormat_Line as the provided MicrosoftGraphWorkbookChartAxisFormatLine1
func (t *MicrosoftGraphWorkbookChartAxisFormat_Line) FromMicrosoftGraphWorkbookChartAxisFormatLine1(v MicrosoftGraphWorkbookChartAxisFormatLine1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphWorkbookChartAxisFormatLine1 performs a merge with any union data inside the MicrosoftGraphWorkbookChartAxisFormat_Line, using the provided MicrosoftGraphWorkbookChartAxisFormatLine1
func (t *MicrosoftGraphWorkbookChartAxisFormat_Line) MergeMicrosoftGraphWorkbookChartAxisFormatLine1(v MicrosoftGraphWorkbookChartAxisFormatLine1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

func (t MicrosoftGraphWorkbookChartAxisFormat_Line) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *MicrosoftGraphWorkbookChartAxisFormat_Line) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsMicrosoftGraphWorkbookChartAxisTitleFormat returns the union data inside the MicrosoftGraphWorkbookChartAxisTitle_Format as a MicrosoftGraphWorkbookChartAxisTitleFormat
func (t MicrosoftGraphWorkbookChartAxisTitle_Format) AsMicrosoftGraphWorkbookChartAxisTitleFormat() (MicrosoftGraphWorkbookChartAxisTitleFormat, error) {
	var body MicrosoftGraphWorkbookChartAxisTitleFormat
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphWorkbookChartAxisTitleFormat overwrites any union data inside the MicrosoftGraphWorkbookChartAxisTitle_Format as the provided MicrosoftGraphWorkbookChartAxisTitleFormat
func (t *MicrosoftGraphWorkbookChartAxisTitle_Format) FromMicrosoftGraphWorkbookChartAxisTitleFormat(v MicrosoftGraphWorkbookChartAxisTitleFormat) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphWorkbookChartAxisTitleFormat performs a merge with any union data inside the MicrosoftGraphWorkbookChartAxisTitle_Format, using the provided MicrosoftGraphWorkbookChartAxisTitleFormat
func (t *MicrosoftGraphWorkbookChartAxisTitle_Format) MergeMicrosoftGraphWorkbookChartAxisTitleFormat(v MicrosoftGraphWorkbookChartAxisTitleFormat) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsMicrosoftGraphWorkbookChartAxisTitleFormat1 returns the union data inside the MicrosoftGraphWorkbookChartAxisTitle_Format as a MicrosoftGraphWorkbookChartAxisTitleFormat1
func (t MicrosoftGraphWorkbookChartAxisTitle_Format) AsMicrosoftGraphWorkbookChartAxisTitleFormat1() (MicrosoftGraphWorkbookChartAxisTitleFormat1, error) {
	var body MicrosoftGraphWorkbookChartAxisTitleFormat1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphWorkbookChartAxisTitleFormat1 overwrites any union data inside the MicrosoftGraphWorkbookChartAxisTitle_Format as the provided MicrosoftGraphWorkbookChartAxisTitleFormat1
func (t *MicrosoftGraphWorkbookChartAxisTitle_Format) FromMicrosoftGraphWorkbookChartAxisTitleFormat1(v MicrosoftGraphWorkbookChartAxisTitleFormat1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphWorkbookChartAxisTitleFormat1 performs a merge with any union data inside the MicrosoftGraphWorkbookChartAxisTitle_Format, using the provided MicrosoftGraphWorkbookChartAxisTitleFormat1
func (t *MicrosoftGraphWorkbookChartAxisTitle_Format) MergeMicrosoftGraphWorkbookChartAxisTitleFormat1(v MicrosoftGraphWorkbookChartAxisTitleFormat1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

func (t MicrosoftGraphWorkbookChartAxisTitle_Format) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *MicrosoftGraphWorkbookChartAxisTitle_Format) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsMicrosoftGraphWorkbookChartFont returns the union data inside the MicrosoftGraphWorkbookChartAxisTitleFormat_Font as a MicrosoftGraphWorkbookChartFont
func (t MicrosoftGraphWorkbookChartAxisTitleFormat_Font) AsMicrosoftGraphWorkbookChartFont() (MicrosoftGraphWorkbookChartFont, error) {
	var body MicrosoftGraphWorkbookChartFont
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphWorkbookChartFont overwrites any union data inside the MicrosoftGraphWorkbookChartAxisTitleFormat_Font as the provided MicrosoftGraphWorkbookChartFont
func (t *MicrosoftGraphWorkbookChartAxisTitleFormat_Font) FromMicrosoftGraphWorkbookChartFont(v MicrosoftGraphWorkbookChartFont) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphWorkbookChartFont performs a merge with any union data inside the MicrosoftGraphWorkbookChartAxisTitleFormat_Font, using the provided MicrosoftGraphWorkbookChartFont
func (t *MicrosoftGraphWorkbookChartAxisTitleFormat_Font) MergeMicrosoftGraphWorkbookChartFont(v MicrosoftGraphWorkbookChartFont) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsMicrosoftGraphWorkbookChartAxisTitleFormatFont1 returns the union data inside the MicrosoftGraphWorkbookChartAxisTitleFormat_Font as a MicrosoftGraphWorkbookChartAxisTitleFormatFont1
func (t MicrosoftGraphWorkbookChartAxisTitleFormat_Font) AsMicrosoftGraphWorkbookChartAxisTitleFormatFont1() (MicrosoftGraphWorkbookChartAxisTitleFormatFont1, error) {
	var body MicrosoftGraphWorkbookChartAxisTitleFormatFont1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphWorkbookChartAxisTitleFormatFont1 overwrites any union data inside the MicrosoftGraphWorkbookChartAxisTitleFormat_Font as the provided MicrosoftGraphWorkbookChartAxisTitleFormatFont1
func (t *MicrosoftGraphWorkbookChartAxisTitleFormat_Font) FromMicrosoftGraphWorkbookChartAxisTitleFormatFont1(v MicrosoftGraphWorkbookChartAxisTitleFormatFont1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphWorkbookChartAxisTitleFormatFont1 performs a merge with any union data inside the MicrosoftGraphWorkbookChartAxisTitleFormat_Font, using the provided MicrosoftGraphWorkbookChartAxisTitleFormatFont1
func (t *MicrosoftGraphWorkbookChartAxisTitleFormat_Font) MergeMicrosoftGraphWorkbookChartAxisTitleFormatFont1(v MicrosoftGraphWorkbookChartAxisTitleFormatFont1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

func (t MicrosoftGraphWorkbookChartAxisTitleFormat_Font) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *MicrosoftGraphWorkbookChartAxisTitleFormat_Font) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsMicrosoftGraphWorkbookChartFill returns the union data inside the MicrosoftGraphWorkbookChartDataLabelFormat_Fill as a MicrosoftGraphWorkbookChartFill
func (t MicrosoftGraphWorkbookChartDataLabelFormat_Fill) AsMicrosoftGraphWorkbookChartFill() (MicrosoftGraphWorkbookChartFill, error) {
	var body MicrosoftGraphWorkbookChartFill
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphWorkbookChartFill overwrites any union data inside the MicrosoftGraphWorkbookChartDataLabelFormat_Fill as the provided MicrosoftGraphWorkbookChartFill
func (t *MicrosoftGraphWorkbookChartDataLabelFormat_Fill) FromMicrosoftGraphWorkbookChartFill(v MicrosoftGraphWorkbookChartFill) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphWorkbookChartFill performs a merge with any union data inside the MicrosoftGraphWorkbookChartDataLabelFormat_Fill, using the provided MicrosoftGraphWorkbookChartFill
func (t *MicrosoftGraphWorkbookChartDataLabelFormat_Fill) MergeMicrosoftGraphWorkbookChartFill(v MicrosoftGraphWorkbookChartFill) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsMicrosoftGraphWorkbookChartDataLabelFormatFill1 returns the union data inside the MicrosoftGraphWorkbookChartDataLabelFormat_Fill as a MicrosoftGraphWorkbookChartDataLabelFormatFill1
func (t MicrosoftGraphWorkbookChartDataLabelFormat_Fill) AsMicrosoftGraphWorkbookChartDataLabelFormatFill1() (MicrosoftGraphWorkbookChartDataLabelFormatFill1, error) {
	var body MicrosoftGraphWorkbookChartDataLabelFormatFill1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphWorkbookChartDataLabelFormatFill1 overwrites any union data inside the MicrosoftGraphWorkbookChartDataLabelFormat_Fill as the provided MicrosoftGraphWorkbookChartDataLabelFormatFill1
func (t *MicrosoftGraphWorkbookChartDataLabelFormat_Fill) FromMicrosoftGraphWorkbookChartDataLabelFormatFill1(v MicrosoftGraphWorkbookChartDataLabelFormatFill1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphWorkbookChartDataLabelFormatFill1 performs a merge with any union data inside the MicrosoftGraphWorkbookChartDataLabelFormat_Fill, using the provided MicrosoftGraphWorkbookChartDataLabelFormatFill1
func (t *MicrosoftGraphWorkbookChartDataLabelFormat_Fill) MergeMicrosoftGraphWorkbookChartDataLabelFormatFill1(v MicrosoftGraphWorkbookChartDataLabelFormatFill1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

func (t MicrosoftGraphWorkbookChartDataLabelFormat_Fill) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *MicrosoftGraphWorkbookChartDataLabelFormat_Fill) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsMicrosoftGraphWorkbookChartFont returns the union data inside the MicrosoftGraphWorkbookChartDataLabelFormat_Font as a MicrosoftGraphWorkbookChartFont
func (t MicrosoftGraphWorkbookChartDataLabelFormat_Font) AsMicrosoftGraphWorkbookChartFont() (MicrosoftGraphWorkbookChartFont, error) {
	var body MicrosoftGraphWorkbookChartFont
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphWorkbookChartFont overwrites any union data inside the MicrosoftGraphWorkbookChartDataLabelFormat_Font as the provided MicrosoftGraphWorkbookChartFont
func (t *MicrosoftGraphWorkbookChartDataLabelFormat_Font) FromMicrosoftGraphWorkbookChartFont(v MicrosoftGraphWorkbookChartFont) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphWorkbookChartFont performs a merge with any union data inside the MicrosoftGraphWorkbookChartDataLabelFormat_Font, using the provided MicrosoftGraphWorkbookChartFont
func (t *MicrosoftGraphWorkbookChartDataLabelFormat_Font) MergeMicrosoftGraphWorkbookChartFont(v MicrosoftGraphWorkbookChartFont) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsMicrosoftGraphWorkbookChartDataLabelFormatFont1 returns the union data inside the MicrosoftGraphWorkbookChartDataLabelFormat_Font as a MicrosoftGraphWorkbookChartDataLabelFormatFont1
func (t MicrosoftGraphWorkbookChartDataLabelFormat_Font) AsMicrosoftGraphWorkbookChartDataLabelFormatFont1() (MicrosoftGraphWorkbookChartDataLabelFormatFont1, error) {
	var body MicrosoftGraphWorkbookChartDataLabelFormatFont1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphWorkbookChartDataLabelFormatFont1 overwrites any union data inside the MicrosoftGraphWorkbookChartDataLabelFormat_Font as the provided MicrosoftGraphWorkbookChartDataLabelFormatFont1
func (t *MicrosoftGraphWorkbookChartDataLabelFormat_Font) FromMicrosoftGraphWorkbookChartDataLabelFormatFont1(v MicrosoftGraphWorkbookChartDataLabelFormatFont1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphWorkbookChartDataLabelFormatFont1 performs a merge with any union data inside the MicrosoftGraphWorkbookChartDataLabelFormat_Font, using the provided MicrosoftGraphWorkbookChartDataLabelFormatFont1
func (t *MicrosoftGraphWorkbookChartDataLabelFormat_Font) MergeMicrosoftGraphWorkbookChartDataLabelFormatFont1(v MicrosoftGraphWorkbookChartDataLabelFormatFont1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

func (t MicrosoftGraphWorkbookChartDataLabelFormat_Font) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *MicrosoftGraphWorkbookChartDataLabelFormat_Font) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsMicrosoftGraphWorkbookChartDataLabelFormat returns the union data inside the MicrosoftGraphWorkbookChartDataLabels_Format as a MicrosoftGraphWorkbookChartDataLabelFormat
func (t MicrosoftGraphWorkbookChartDataLabels_Format) AsMicrosoftGraphWorkbookChartDataLabelFormat() (MicrosoftGraphWorkbookChartDataLabelFormat, error) {
	var body MicrosoftGraphWorkbookChartDataLabelFormat
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphWorkbookChartDataLabelFormat overwrites any union data inside the MicrosoftGraphWorkbookChartDataLabels_Format as the provided MicrosoftGraphWorkbookChartDataLabelFormat
func (t *MicrosoftGraphWorkbookChartDataLabels_Format) FromMicrosoftGraphWorkbookChartDataLabelFormat(v MicrosoftGraphWorkbookChartDataLabelFormat) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphWorkbookChartDataLabelFormat performs a merge with any union data inside the MicrosoftGraphWorkbookChartDataLabels_Format, using the provided MicrosoftGraphWorkbookChartDataLabelFormat
func (t *MicrosoftGraphWorkbookChartDataLabels_Format) MergeMicrosoftGraphWorkbookChartDataLabelFormat(v MicrosoftGraphWorkbookChartDataLabelFormat) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsMicrosoftGraphWorkbookChartDataLabelsFormat1 returns the union data inside the MicrosoftGraphWorkbookChartDataLabels_Format as a MicrosoftGraphWorkbookChartDataLabelsFormat1
func (t MicrosoftGraphWorkbookChartDataLabels_Format) AsMicrosoftGraphWorkbookChartDataLabelsFormat1() (MicrosoftGraphWorkbookChartDataLabelsFormat1, error) {
	var body MicrosoftGraphWorkbookChartDataLabelsFormat1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphWorkbookChartDataLabelsFormat1 overwrites any union data inside the MicrosoftGraphWorkbookChartDataLabels_Format as the provided MicrosoftGraphWorkbookChartDataLabelsFormat1
func (t *MicrosoftGraphWorkbookChartDataLabels_Format) FromMicrosoftGraphWorkbookChartDataLabelsFormat1(v MicrosoftGraphWorkbookChartDataLabelsFormat1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphWorkbookChartDataLabelsFormat1 performs a merge with any union data inside the MicrosoftGraphWorkbookChartDataLabels_Format, using the provided MicrosoftGraphWorkbookChartDataLabelsFormat1
func (t *MicrosoftGraphWorkbookChartDataLabels_Format) MergeMicrosoftGraphWorkbookChartDataLabelsFormat1(v MicrosoftGraphWorkbookChartDataLabelsFormat1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

func (t MicrosoftGraphWorkbookChartDataLabels_Format) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *MicrosoftGraphWorkbookChartDataLabels_Format) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsMicrosoftGraphWorkbookChartFontSize0 returns the union data inside the MicrosoftGraphWorkbookChartFont_Size as a MicrosoftGraphWorkbookChartFontSize0
func (t MicrosoftGraphWorkbookChartFont_Size) AsMicrosoftGraphWorkbookChartFontSize0() (MicrosoftGraphWorkbookChartFontSize0, error) {
	var body MicrosoftGraphWorkbookChartFontSize0
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphWorkbookChartFontSize0 overwrites any union data inside the MicrosoftGraphWorkbookChartFont_Size as the provided MicrosoftGraphWorkbookChartFontSize0
func (t *MicrosoftGraphWorkbookChartFont_Size) FromMicrosoftGraphWorkbookChartFontSize0(v MicrosoftGraphWorkbookChartFontSize0) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphWorkbookChartFontSize0 performs a merge with any union data inside the MicrosoftGraphWorkbookChartFont_Size, using the provided MicrosoftGraphWorkbookChartFontSize0
func (t *MicrosoftGraphWorkbookChartFont_Size) MergeMicrosoftGraphWorkbookChartFontSize0(v MicrosoftGraphWorkbookChartFontSize0) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsMicrosoftGraphWorkbookChartFontSize1 returns the union data inside the MicrosoftGraphWorkbookChartFont_Size as a MicrosoftGraphWorkbookChartFontSize1
func (t MicrosoftGraphWorkbookChartFont_Size) AsMicrosoftGraphWorkbookChartFontSize1() (MicrosoftGraphWorkbookChartFontSize1, error) {
	var body MicrosoftGraphWorkbookChartFontSize1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphWorkbookChartFontSize1 overwrites any union data inside the MicrosoftGraphWorkbookChartFont_Size as the provided MicrosoftGraphWorkbookChartFontSize1
func (t *MicrosoftGraphWorkbookChartFont_Size) FromMicrosoftGraphWorkbookChartFontSize1(v MicrosoftGraphWorkbookChartFontSize1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphWorkbookChartFontSize1 performs a merge with any union data inside the MicrosoftGraphWorkbookChartFont_Size, using the provided MicrosoftGraphWorkbookChartFontSize1
func (t *MicrosoftGraphWorkbookChartFont_Size) MergeMicrosoftGraphWorkbookChartFontSize1(v MicrosoftGraphWorkbookChartFontSize1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsReferenceNumeric returns the union data inside the MicrosoftGraphWorkbookChartFont_Size as a ReferenceNumeric
func (t MicrosoftGraphWorkbookChartFont_Size) AsReferenceNumeric() (ReferenceNumeric, error) {
	var body ReferenceNumeric
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromReferenceNumeric overwrites any union data inside the MicrosoftGraphWorkbookChartFont_Size as the provided ReferenceNumeric
func (t *MicrosoftGraphWorkbookChartFont_Size) FromReferenceNumeric(v ReferenceNumeric) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeReferenceNumeric performs a merge with any union data inside the MicrosoftGraphWorkbookChartFont_Size, using the provided ReferenceNumeric
func (t *MicrosoftGraphWorkbookChartFont_Size) MergeReferenceNumeric(v ReferenceNumeric) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

func (t MicrosoftGraphWorkbookChartFont_Size) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *MicrosoftGraphWorkbookChartFont_Size) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsMicrosoftGraphWorkbookChartGridlinesFormat returns the union data inside the MicrosoftGraphWorkbookChartGridlines_Format as a MicrosoftGraphWorkbookChartGridlinesFormat
func (t MicrosoftGraphWorkbookChartGridlines_Format) AsMicrosoftGraphWorkbookChartGridlinesFormat() (MicrosoftGraphWorkbookChartGridlinesFormat, error) {
	var body MicrosoftGraphWorkbookChartGridlinesFormat
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphWorkbookChartGridlinesFormat overwrites any union data inside the MicrosoftGraphWorkbookChartGridlines_Format as the provided MicrosoftGraphWorkbookChartGridlinesFormat
func (t *MicrosoftGraphWorkbookChartGridlines_Format) FromMicrosoftGraphWorkbookChartGridlinesFormat(v MicrosoftGraphWorkbookChartGridlinesFormat) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphWorkbookChartGridlinesFormat performs a merge with any union data inside the MicrosoftGraphWorkbookChartGridlines_Format, using the provided MicrosoftGraphWorkbookChartGridlinesFormat
func (t *MicrosoftGraphWorkbookChartGridlines_Format) MergeMicrosoftGraphWorkbookChartGridlinesFormat(v MicrosoftGraphWorkbookChartGridlinesFormat) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsMicrosoftGraphWorkbookChartGridlinesFormat1 returns the union data inside the MicrosoftGraphWorkbookChartGridlines_Format as a MicrosoftGraphWorkbookChartGridlinesFormat1
func (t MicrosoftGraphWorkbookChartGridlines_Format) AsMicrosoftGraphWorkbookChartGridlinesFormat1() (MicrosoftGraphWorkbookChartGridlinesFormat1, error) {
	var body MicrosoftGraphWorkbookChartGridlinesFormat1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphWorkbookChartGridlinesFormat1 overwrites any union data inside the MicrosoftGraphWorkbookChartGridlines_Format as the provided MicrosoftGraphWorkbookChartGridlinesFormat1
func (t *MicrosoftGraphWorkbookChartGridlines_Format) FromMicrosoftGraphWorkbookChartGridlinesFormat1(v MicrosoftGraphWorkbookChartGridlinesFormat1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphWorkbookChartGridlinesFormat1 performs a merge with any union data inside the MicrosoftGraphWorkbookChartGridlines_Format, using the provided MicrosoftGraphWorkbookChartGridlinesFormat1
func (t *MicrosoftGraphWorkbookChartGridlines_Format) MergeMicrosoftGraphWorkbookChartGridlinesFormat1(v MicrosoftGraphWorkbookChartGridlinesFormat1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

func (t MicrosoftGraphWorkbookChartGridlines_Format) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *MicrosoftGraphWorkbookChartGridlines_Format) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsMicrosoftGraphWorkbookChartLineFormat returns the union data inside the MicrosoftGraphWorkbookChartGridlinesFormat_Line as a MicrosoftGraphWorkbookChartLineFormat
func (t MicrosoftGraphWorkbookChartGridlinesFormat_Line) AsMicrosoftGraphWorkbookChartLineFormat() (MicrosoftGraphWorkbookChartLineFormat, error) {
	var body MicrosoftGraphWorkbookChartLineFormat
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphWorkbookChartLineFormat overwrites any union data inside the MicrosoftGraphWorkbookChartGridlinesFormat_Line as the provided MicrosoftGraphWorkbookChartLineFormat
func (t *MicrosoftGraphWorkbookChartGridlinesFormat_Line) FromMicrosoftGraphWorkbookChartLineFormat(v MicrosoftGraphWorkbookChartLineFormat) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphWorkbookChartLineFormat performs a merge with any union data inside the MicrosoftGraphWorkbookChartGridlinesFormat_Line, using the provided MicrosoftGraphWorkbookChartLineFormat
func (t *MicrosoftGraphWorkbookChartGridlinesFormat_Line) MergeMicrosoftGraphWorkbookChartLineFormat(v MicrosoftGraphWorkbookChartLineFormat) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsMicrosoftGraphWorkbookChartGridlinesFormatLine1 returns the union data inside the MicrosoftGraphWorkbookChartGridlinesFormat_Line as a MicrosoftGraphWorkbookChartGridlinesFormatLine1
func (t MicrosoftGraphWorkbookChartGridlinesFormat_Line) AsMicrosoftGraphWorkbookChartGridlinesFormatLine1() (MicrosoftGraphWorkbookChartGridlinesFormatLine1, error) {
	var body MicrosoftGraphWorkbookChartGridlinesFormatLine1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphWorkbookChartGridlinesFormatLine1 overwrites any union data inside the MicrosoftGraphWorkbookChartGridlinesFormat_Line as the provided MicrosoftGraphWorkbookChartGridlinesFormatLine1
func (t *MicrosoftGraphWorkbookChartGridlinesFormat_Line) FromMicrosoftGraphWorkbookChartGridlinesFormatLine1(v MicrosoftGraphWorkbookChartGridlinesFormatLine1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphWorkbookChartGridlinesFormatLine1 performs a merge with any union data inside the MicrosoftGraphWorkbookChartGridlinesFormat_Line, using the provided MicrosoftGraphWorkbookChartGridlinesFormatLine1
func (t *MicrosoftGraphWorkbookChartGridlinesFormat_Line) MergeMicrosoftGraphWorkbookChartGridlinesFormatLine1(v MicrosoftGraphWorkbookChartGridlinesFormatLine1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

func (t MicrosoftGraphWorkbookChartGridlinesFormat_Line) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *MicrosoftGraphWorkbookChartGridlinesFormat_Line) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsMicrosoftGraphWorkbookChartLegendFormat returns the union data inside the MicrosoftGraphWorkbookChartLegend_Format as a MicrosoftGraphWorkbookChartLegendFormat
func (t MicrosoftGraphWorkbookChartLegend_Format) AsMicrosoftGraphWorkbookChartLegendFormat() (MicrosoftGraphWorkbookChartLegendFormat, error) {
	var body MicrosoftGraphWorkbookChartLegendFormat
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphWorkbookChartLegendFormat overwrites any union data inside the MicrosoftGraphWorkbookChartLegend_Format as the provided MicrosoftGraphWorkbookChartLegendFormat
func (t *MicrosoftGraphWorkbookChartLegend_Format) FromMicrosoftGraphWorkbookChartLegendFormat(v MicrosoftGraphWorkbookChartLegendFormat) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphWorkbookChartLegendFormat performs a merge with any union data inside the MicrosoftGraphWorkbookChartLegend_Format, using the provided MicrosoftGraphWorkbookChartLegendFormat
func (t *MicrosoftGraphWorkbookChartLegend_Format) MergeMicrosoftGraphWorkbookChartLegendFormat(v MicrosoftGraphWorkbookChartLegendFormat) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsMicrosoftGraphWorkbookChartLegendFormat1 returns the union data inside the MicrosoftGraphWorkbookChartLegend_Format as a MicrosoftGraphWorkbookChartLegendFormat1
func (t MicrosoftGraphWorkbookChartLegend_Format) AsMicrosoftGraphWorkbookChartLegendFormat1() (MicrosoftGraphWorkbookChartLegendFormat1, error) {
	var body MicrosoftGraphWorkbookChartLegendFormat1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphWorkbookChartLegendFormat1 overwrites any union data inside the MicrosoftGraphWorkbookChartLegend_Format as the provided MicrosoftGraphWorkbookChartLegendFormat1
func (t *MicrosoftGraphWorkbookChartLegend_Format) FromMicrosoftGraphWorkbookChartLegendFormat1(v MicrosoftGraphWorkbookChartLegendFormat1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphWorkbookChartLegendFormat1 performs a merge with any union data inside the MicrosoftGraphWorkbookChartLegend_Format, using the provided MicrosoftGraphWorkbookChartLegendFormat1
func (t *MicrosoftGraphWorkbookChartLegend_Format) MergeMicrosoftGraphWorkbookChartLegendFormat1(v MicrosoftGraphWorkbookChartLegendFormat1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

func (t MicrosoftGraphWorkbookChartLegend_Format) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *MicrosoftGraphWorkbookChartLegend_Format) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsMicrosoftGraphWorkbookChartFill returns the union data inside the MicrosoftGraphWorkbookChartLegendFormat_Fill as a MicrosoftGraphWorkbookChartFill
func (t MicrosoftGraphWorkbookChartLegendFormat_Fill) AsMicrosoftGraphWorkbookChartFill() (MicrosoftGraphWorkbookChartFill, error) {
	var body MicrosoftGraphWorkbookChartFill
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphWorkbookChartFill overwrites any union data inside the MicrosoftGraphWorkbookChartLegendFormat_Fill as the provided MicrosoftGraphWorkbookChartFill
func (t *MicrosoftGraphWorkbookChartLegendFormat_Fill) FromMicrosoftGraphWorkbookChartFill(v MicrosoftGraphWorkbookChartFill) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphWorkbookChartFill performs a merge with any union data inside the MicrosoftGraphWorkbookChartLegendFormat_Fill, using the provided MicrosoftGraphWorkbookChartFill
func (t *MicrosoftGraphWorkbookChartLegendFormat_Fill) MergeMicrosoftGraphWorkbookChartFill(v MicrosoftGraphWorkbookChartFill) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsMicrosoftGraphWorkbookChartLegendFormatFill1 returns the union data inside the MicrosoftGraphWorkbookChartLegendFormat_Fill as a MicrosoftGraphWorkbookChartLegendFormatFill1
func (t MicrosoftGraphWorkbookChartLegendFormat_Fill) AsMicrosoftGraphWorkbookChartLegendFormatFill1() (MicrosoftGraphWorkbookChartLegendFormatFill1, error) {
	var body MicrosoftGraphWorkbookChartLegendFormatFill1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphWorkbookChartLegendFormatFill1 overwrites any union data inside the MicrosoftGraphWorkbookChartLegendFormat_Fill as the provided MicrosoftGraphWorkbookChartLegendFormatFill1
func (t *MicrosoftGraphWorkbookChartLegendFormat_Fill) FromMicrosoftGraphWorkbookChartLegendFormatFill1(v MicrosoftGraphWorkbookChartLegendFormatFill1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphWorkbookChartLegendFormatFill1 performs a merge with any union data inside the MicrosoftGraphWorkbookChartLegendFormat_Fill, using the provided MicrosoftGraphWorkbookChartLegendFormatFill1
func (t *MicrosoftGraphWorkbookChartLegendFormat_Fill) MergeMicrosoftGraphWorkbookChartLegendFormatFill1(v MicrosoftGraphWorkbookChartLegendFormatFill1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

func (t MicrosoftGraphWorkbookChartLegendFormat_Fill) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *MicrosoftGraphWorkbookChartLegendFormat_Fill) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsMicrosoftGraphWorkbookChartFont returns the union data inside the MicrosoftGraphWorkbookChartLegendFormat_Font as a MicrosoftGraphWorkbookChartFont
func (t MicrosoftGraphWorkbookChartLegendFormat_Font) AsMicrosoftGraphWorkbookChartFont() (MicrosoftGraphWorkbookChartFont, error) {
	var body MicrosoftGraphWorkbookChartFont
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphWorkbookChartFont overwrites any union data inside the MicrosoftGraphWorkbookChartLegendFormat_Font as the provided MicrosoftGraphWorkbookChartFont
func (t *MicrosoftGraphWorkbookChartLegendFormat_Font) FromMicrosoftGraphWorkbookChartFont(v MicrosoftGraphWorkbookChartFont) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphWorkbookChartFont performs a merge with any union data inside the MicrosoftGraphWorkbookChartLegendFormat_Font, using the provided MicrosoftGraphWorkbookChartFont
func (t *MicrosoftGraphWorkbookChartLegendFormat_Font) MergeMicrosoftGraphWorkbookChartFont(v MicrosoftGraphWorkbookChartFont) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsMicrosoftGraphWorkbookChartLegendFormatFont1 returns the union data inside the MicrosoftGraphWorkbookChartLegendFormat_Font as a MicrosoftGraphWorkbookChartLegendFormatFont1
func (t MicrosoftGraphWorkbookChartLegendFormat_Font) AsMicrosoftGraphWorkbookChartLegendFormatFont1() (MicrosoftGraphWorkbookChartLegendFormatFont1, error) {
	var body MicrosoftGraphWorkbookChartLegendFormatFont1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphWorkbookChartLegendFormatFont1 overwrites any union data inside the MicrosoftGraphWorkbookChartLegendFormat_Font as the provided MicrosoftGraphWorkbookChartLegendFormatFont1
func (t *MicrosoftGraphWorkbookChartLegendFormat_Font) FromMicrosoftGraphWorkbookChartLegendFormatFont1(v MicrosoftGraphWorkbookChartLegendFormatFont1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphWorkbookChartLegendFormatFont1 performs a merge with any union data inside the MicrosoftGraphWorkbookChartLegendFormat_Font, using the provided MicrosoftGraphWorkbookChartLegendFormatFont1
func (t *MicrosoftGraphWorkbookChartLegendFormat_Font) MergeMicrosoftGraphWorkbookChartLegendFormatFont1(v MicrosoftGraphWorkbookChartLegendFormatFont1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

func (t MicrosoftGraphWorkbookChartLegendFormat_Font) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *MicrosoftGraphWorkbookChartLegendFormat_Font) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsMicrosoftGraphWorkbookChartPointFormat returns the union data inside the MicrosoftGraphWorkbookChartPoint_Format as a MicrosoftGraphWorkbookChartPointFormat
func (t MicrosoftGraphWorkbookChartPoint_Format) AsMicrosoftGraphWorkbookChartPointFormat() (MicrosoftGraphWorkbookChartPointFormat, error) {
	var body MicrosoftGraphWorkbookChartPointFormat
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphWorkbookChartPointFormat overwrites any union data inside the MicrosoftGraphWorkbookChartPoint_Format as the provided MicrosoftGraphWorkbookChartPointFormat
func (t *MicrosoftGraphWorkbookChartPoint_Format) FromMicrosoftGraphWorkbookChartPointFormat(v MicrosoftGraphWorkbookChartPointFormat) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphWorkbookChartPointFormat performs a merge with any union data inside the MicrosoftGraphWorkbookChartPoint_Format, using the provided MicrosoftGraphWorkbookChartPointFormat
func (t *MicrosoftGraphWorkbookChartPoint_Format) MergeMicrosoftGraphWorkbookChartPointFormat(v MicrosoftGraphWorkbookChartPointFormat) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsMicrosoftGraphWorkbookChartPointFormat1 returns the union data inside the MicrosoftGraphWorkbookChartPoint_Format as a MicrosoftGraphWorkbookChartPointFormat1
func (t MicrosoftGraphWorkbookChartPoint_Format) AsMicrosoftGraphWorkbookChartPointFormat1() (MicrosoftGraphWorkbookChartPointFormat1, error) {
	var body MicrosoftGraphWorkbookChartPointFormat1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphWorkbookChartPointFormat1 overwrites any union data inside the MicrosoftGraphWorkbookChartPoint_Format as the provided MicrosoftGraphWorkbookChartPointFormat1
func (t *MicrosoftGraphWorkbookChartPoint_Format) FromMicrosoftGraphWorkbookChartPointFormat1(v MicrosoftGraphWorkbookChartPointFormat1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphWorkbookChartPointFormat1 performs a merge with any union data inside the MicrosoftGraphWorkbookChartPoint_Format, using the provided MicrosoftGraphWorkbookChartPointFormat1
func (t *MicrosoftGraphWorkbookChartPoint_Format) MergeMicrosoftGraphWorkbookChartPointFormat1(v MicrosoftGraphWorkbookChartPointFormat1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

func (t MicrosoftGraphWorkbookChartPoint_Format) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *MicrosoftGraphWorkbookChartPoint_Format) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsMicrosoftGraphJson returns the union data inside the MicrosoftGraphWorkbookChartPoint_Value as a MicrosoftGraphJson
func (t MicrosoftGraphWorkbookChartPoint_Value) AsMicrosoftGraphJson() (MicrosoftGraphJson, error) {
	var body MicrosoftGraphJson
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphJson overwrites any union data inside the MicrosoftGraphWorkbookChartPoint_Value as the provided MicrosoftGraphJson
func (t *MicrosoftGraphWorkbookChartPoint_Value) FromMicrosoftGraphJson(v MicrosoftGraphJson) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphJson performs a merge with any union data inside the MicrosoftGraphWorkbookChartPoint_Value, using the provided MicrosoftGraphJson
func (t *MicrosoftGraphWorkbookChartPoint_Value) MergeMicrosoftGraphJson(v MicrosoftGraphJson) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsMicrosoftGraphWorkbookChartPointValue1 returns the union data inside the MicrosoftGraphWorkbookChartPoint_Value as a MicrosoftGraphWorkbookChartPointValue1
func (t MicrosoftGraphWorkbookChartPoint_Value) AsMicrosoftGraphWorkbookChartPointValue1() (MicrosoftGraphWorkbookChartPointValue1, error) {
	var body MicrosoftGraphWorkbookChartPointValue1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphWorkbookChartPointValue1 overwrites any union data inside the MicrosoftGraphWorkbookChartPoint_Value as the provided MicrosoftGraphWorkbookChartPointValue1
func (t *MicrosoftGraphWorkbookChartPoint_Value) FromMicrosoftGraphWorkbookChartPointValue1(v MicrosoftGraphWorkbookChartPointValue1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphWorkbookChartPointValue1 performs a merge with any union data inside the MicrosoftGraphWorkbookChartPoint_Value, using the provided MicrosoftGraphWorkbookChartPointValue1
func (t *MicrosoftGraphWorkbookChartPoint_Value) MergeMicrosoftGraphWorkbookChartPointValue1(v MicrosoftGraphWorkbookChartPointValue1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

func (t MicrosoftGraphWorkbookChartPoint_Value) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *MicrosoftGraphWorkbookChartPoint_Value) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsMicrosoftGraphWorkbookChartFill returns the union data inside the MicrosoftGraphWorkbookChartPointFormat_Fill as a MicrosoftGraphWorkbookChartFill
func (t MicrosoftGraphWorkbookChartPointFormat_Fill) AsMicrosoftGraphWorkbookChartFill() (MicrosoftGraphWorkbookChartFill, error) {
	var body MicrosoftGraphWorkbookChartFill
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphWorkbookChartFill overwrites any union data inside the MicrosoftGraphWorkbookChartPointFormat_Fill as the provided MicrosoftGraphWorkbookChartFill
func (t *MicrosoftGraphWorkbookChartPointFormat_Fill) FromMicrosoftGraphWorkbookChartFill(v MicrosoftGraphWorkbookChartFill) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphWorkbookChartFill performs a merge with any union data inside the MicrosoftGraphWorkbookChartPointFormat_Fill, using the provided MicrosoftGraphWorkbookChartFill
func (t *MicrosoftGraphWorkbookChartPointFormat_Fill) MergeMicrosoftGraphWorkbookChartFill(v MicrosoftGraphWorkbookChartFill) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsMicrosoftGraphWorkbookChartPointFormatFill1 returns the union data inside the MicrosoftGraphWorkbookChartPointFormat_Fill as a MicrosoftGraphWorkbookChartPointFormatFill1
func (t MicrosoftGraphWorkbookChartPointFormat_Fill) AsMicrosoftGraphWorkbookChartPointFormatFill1() (MicrosoftGraphWorkbookChartPointFormatFill1, error) {
	var body MicrosoftGraphWorkbookChartPointFormatFill1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphWorkbookChartPointFormatFill1 overwrites any union data inside the MicrosoftGraphWorkbookChartPointFormat_Fill as the provided MicrosoftGraphWorkbookChartPointFormatFill1
func (t *MicrosoftGraphWorkbookChartPointFormat_Fill) FromMicrosoftGraphWorkbookChartPointFormatFill1(v MicrosoftGraphWorkbookChartPointFormatFill1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphWorkbookChartPointFormatFill1 performs a merge with any union data inside the MicrosoftGraphWorkbookChartPointFormat_Fill, using the provided MicrosoftGraphWorkbookChartPointFormatFill1
func (t *MicrosoftGraphWorkbookChartPointFormat_Fill) MergeMicrosoftGraphWorkbookChartPointFormatFill1(v MicrosoftGraphWorkbookChartPointFormatFill1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

func (t MicrosoftGraphWorkbookChartPointFormat_Fill) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *MicrosoftGraphWorkbookChartPointFormat_Fill) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsMicrosoftGraphWorkbookChartSeriesFormat returns the union data inside the MicrosoftGraphWorkbookChartSeries_Format as a MicrosoftGraphWorkbookChartSeriesFormat
func (t MicrosoftGraphWorkbookChartSeries_Format) AsMicrosoftGraphWorkbookChartSeriesFormat() (MicrosoftGraphWorkbookChartSeriesFormat, error) {
	var body MicrosoftGraphWorkbookChartSeriesFormat
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphWorkbookChartSeriesFormat overwrites any union data inside the MicrosoftGraphWorkbookChartSeries_Format as the provided MicrosoftGraphWorkbookChartSeriesFormat
func (t *MicrosoftGraphWorkbookChartSeries_Format) FromMicrosoftGraphWorkbookChartSeriesFormat(v MicrosoftGraphWorkbookChartSeriesFormat) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphWorkbookChartSeriesFormat performs a merge with any union data inside the MicrosoftGraphWorkbookChartSeries_Format, using the provided MicrosoftGraphWorkbookChartSeriesFormat
func (t *MicrosoftGraphWorkbookChartSeries_Format) MergeMicrosoftGraphWorkbookChartSeriesFormat(v MicrosoftGraphWorkbookChartSeriesFormat) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsMicrosoftGraphWorkbookChartSeriesFormat1 returns the union data inside the MicrosoftGraphWorkbookChartSeries_Format as a MicrosoftGraphWorkbookChartSeriesFormat1
func (t MicrosoftGraphWorkbookChartSeries_Format) AsMicrosoftGraphWorkbookChartSeriesFormat1() (MicrosoftGraphWorkbookChartSeriesFormat1, error) {
	var body MicrosoftGraphWorkbookChartSeriesFormat1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphWorkbookChartSeriesFormat1 overwrites any union data inside the MicrosoftGraphWorkbookChartSeries_Format as the provided MicrosoftGraphWorkbookChartSeriesFormat1
func (t *MicrosoftGraphWorkbookChartSeries_Format) FromMicrosoftGraphWorkbookChartSeriesFormat1(v MicrosoftGraphWorkbookChartSeriesFormat1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphWorkbookChartSeriesFormat1 performs a merge with any union data inside the MicrosoftGraphWorkbookChartSeries_Format, using the provided MicrosoftGraphWorkbookChartSeriesFormat1
func (t *MicrosoftGraphWorkbookChartSeries_Format) MergeMicrosoftGraphWorkbookChartSeriesFormat1(v MicrosoftGraphWorkbookChartSeriesFormat1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

func (t MicrosoftGraphWorkbookChartSeries_Format) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *MicrosoftGraphWorkbookChartSeries_Format) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsMicrosoftGraphWorkbookChartFill returns the union data inside the MicrosoftGraphWorkbookChartSeriesFormat_Fill as a MicrosoftGraphWorkbookChartFill
func (t MicrosoftGraphWorkbookChartSeriesFormat_Fill) AsMicrosoftGraphWorkbookChartFill() (MicrosoftGraphWorkbookChartFill, error) {
	var body MicrosoftGraphWorkbookChartFill
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphWorkbookChartFill overwrites any union data inside the MicrosoftGraphWorkbookChartSeriesFormat_Fill as the provided MicrosoftGraphWorkbookChartFill
func (t *MicrosoftGraphWorkbookChartSeriesFormat_Fill) FromMicrosoftGraphWorkbookChartFill(v MicrosoftGraphWorkbookChartFill) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphWorkbookChartFill performs a merge with any union data inside the MicrosoftGraphWorkbookChartSeriesFormat_Fill, using the provided MicrosoftGraphWorkbookChartFill
func (t *MicrosoftGraphWorkbookChartSeriesFormat_Fill) MergeMicrosoftGraphWorkbookChartFill(v MicrosoftGraphWorkbookChartFill) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsMicrosoftGraphWorkbookChartSeriesFormatFill1 returns the union data inside the MicrosoftGraphWorkbookChartSeriesFormat_Fill as a MicrosoftGraphWorkbookChartSeriesFormatFill1
func (t MicrosoftGraphWorkbookChartSeriesFormat_Fill) AsMicrosoftGraphWorkbookChartSeriesFormatFill1() (MicrosoftGraphWorkbookChartSeriesFormatFill1, error) {
	var body MicrosoftGraphWorkbookChartSeriesFormatFill1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphWorkbookChartSeriesFormatFill1 overwrites any union data inside the MicrosoftGraphWorkbookChartSeriesFormat_Fill as the provided MicrosoftGraphWorkbookChartSeriesFormatFill1
func (t *MicrosoftGraphWorkbookChartSeriesFormat_Fill) FromMicrosoftGraphWorkbookChartSeriesFormatFill1(v MicrosoftGraphWorkbookChartSeriesFormatFill1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphWorkbookChartSeriesFormatFill1 performs a merge with any union data inside the MicrosoftGraphWorkbookChartSeriesFormat_Fill, using the provided MicrosoftGraphWorkbookChartSeriesFormatFill1
func (t *MicrosoftGraphWorkbookChartSeriesFormat_Fill) MergeMicrosoftGraphWorkbookChartSeriesFormatFill1(v MicrosoftGraphWorkbookChartSeriesFormatFill1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

func (t MicrosoftGraphWorkbookChartSeriesFormat_Fill) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *MicrosoftGraphWorkbookChartSeriesFormat_Fill) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsMicrosoftGraphWorkbookChartLineFormat returns the union data inside the MicrosoftGraphWorkbookChartSeriesFormat_Line as a MicrosoftGraphWorkbookChartLineFormat
func (t MicrosoftGraphWorkbookChartSeriesFormat_Line) AsMicrosoftGraphWorkbookChartLineFormat() (MicrosoftGraphWorkbookChartLineFormat, error) {
	var body MicrosoftGraphWorkbookChartLineFormat
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphWorkbookChartLineFormat overwrites any union data inside the MicrosoftGraphWorkbookChartSeriesFormat_Line as the provided MicrosoftGraphWorkbookChartLineFormat
func (t *MicrosoftGraphWorkbookChartSeriesFormat_Line) FromMicrosoftGraphWorkbookChartLineFormat(v MicrosoftGraphWorkbookChartLineFormat) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphWorkbookChartLineFormat performs a merge with any union data inside the MicrosoftGraphWorkbookChartSeriesFormat_Line, using the provided MicrosoftGraphWorkbookChartLineFormat
func (t *MicrosoftGraphWorkbookChartSeriesFormat_Line) MergeMicrosoftGraphWorkbookChartLineFormat(v MicrosoftGraphWorkbookChartLineFormat) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsMicrosoftGraphWorkbookChartSeriesFormatLine1 returns the union data inside the MicrosoftGraphWorkbookChartSeriesFormat_Line as a MicrosoftGraphWorkbookChartSeriesFormatLine1
func (t MicrosoftGraphWorkbookChartSeriesFormat_Line) AsMicrosoftGraphWorkbookChartSeriesFormatLine1() (MicrosoftGraphWorkbookChartSeriesFormatLine1, error) {
	var body MicrosoftGraphWorkbookChartSeriesFormatLine1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphWorkbookChartSeriesFormatLine1 overwrites any union data inside the MicrosoftGraphWorkbookChartSeriesFormat_Line as the provided MicrosoftGraphWorkbookChartSeriesFormatLine1
func (t *MicrosoftGraphWorkbookChartSeriesFormat_Line) FromMicrosoftGraphWorkbookChartSeriesFormatLine1(v MicrosoftGraphWorkbookChartSeriesFormatLine1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphWorkbookChartSeriesFormatLine1 performs a merge with any union data inside the MicrosoftGraphWorkbookChartSeriesFormat_Line, using the provided MicrosoftGraphWorkbookChartSeriesFormatLine1
func (t *MicrosoftGraphWorkbookChartSeriesFormat_Line) MergeMicrosoftGraphWorkbookChartSeriesFormatLine1(v MicrosoftGraphWorkbookChartSeriesFormatLine1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

func (t MicrosoftGraphWorkbookChartSeriesFormat_Line) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *MicrosoftGraphWorkbookChartSeriesFormat_Line) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsMicrosoftGraphWorkbookChartTitleFormat returns the union data inside the MicrosoftGraphWorkbookChartTitle_Format as a MicrosoftGraphWorkbookChartTitleFormat
func (t MicrosoftGraphWorkbookChartTitle_Format) AsMicrosoftGraphWorkbookChartTitleFormat() (MicrosoftGraphWorkbookChartTitleFormat, error) {
	var body MicrosoftGraphWorkbookChartTitleFormat
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphWorkbookChartTitleFormat overwrites any union data inside the MicrosoftGraphWorkbookChartTitle_Format as the provided MicrosoftGraphWorkbookChartTitleFormat
func (t *MicrosoftGraphWorkbookChartTitle_Format) FromMicrosoftGraphWorkbookChartTitleFormat(v MicrosoftGraphWorkbookChartTitleFormat) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphWorkbookChartTitleFormat performs a merge with any union data inside the MicrosoftGraphWorkbookChartTitle_Format, using the provided MicrosoftGraphWorkbookChartTitleFormat
func (t *MicrosoftGraphWorkbookChartTitle_Format) MergeMicrosoftGraphWorkbookChartTitleFormat(v MicrosoftGraphWorkbookChartTitleFormat) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsMicrosoftGraphWorkbookChartTitleFormat1 returns the union data inside the MicrosoftGraphWorkbookChartTitle_Format as a MicrosoftGraphWorkbookChartTitleFormat1
func (t MicrosoftGraphWorkbookChartTitle_Format) AsMicrosoftGraphWorkbookChartTitleFormat1() (MicrosoftGraphWorkbookChartTitleFormat1, error) {
	var body MicrosoftGraphWorkbookChartTitleFormat1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphWorkbookChartTitleFormat1 overwrites any union data inside the MicrosoftGraphWorkbookChartTitle_Format as the provided MicrosoftGraphWorkbookChartTitleFormat1
func (t *MicrosoftGraphWorkbookChartTitle_Format) FromMicrosoftGraphWorkbookChartTitleFormat1(v MicrosoftGraphWorkbookChartTitleFormat1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphWorkbookChartTitleFormat1 performs a merge with any union data inside the MicrosoftGraphWorkbookChartTitle_Format, using the provided MicrosoftGraphWorkbookChartTitleFormat1
func (t *MicrosoftGraphWorkbookChartTitle_Format) MergeMicrosoftGraphWorkbookChartTitleFormat1(v MicrosoftGraphWorkbookChartTitleFormat1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

func (t MicrosoftGraphWorkbookChartTitle_Format) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *MicrosoftGraphWorkbookChartTitle_Format) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsMicrosoftGraphWorkbookChartFill returns the union data inside the MicrosoftGraphWorkbookChartTitleFormat_Fill as a MicrosoftGraphWorkbookChartFill
func (t MicrosoftGraphWorkbookChartTitleFormat_Fill) AsMicrosoftGraphWorkbookChartFill() (MicrosoftGraphWorkbookChartFill, error) {
	var body MicrosoftGraphWorkbookChartFill
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphWorkbookChartFill overwrites any union data inside the MicrosoftGraphWorkbookChartTitleFormat_Fill as the provided MicrosoftGraphWorkbookChartFill
func (t *MicrosoftGraphWorkbookChartTitleFormat_Fill) FromMicrosoftGraphWorkbookChartFill(v MicrosoftGraphWorkbookChartFill) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphWorkbookChartFill performs a merge with any union data inside the MicrosoftGraphWorkbookChartTitleFormat_Fill, using the provided MicrosoftGraphWorkbookChartFill
func (t *MicrosoftGraphWorkbookChartTitleFormat_Fill) MergeMicrosoftGraphWorkbookChartFill(v MicrosoftGraphWorkbookChartFill) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsMicrosoftGraphWorkbookChartTitleFormatFill1 returns the union data inside the MicrosoftGraphWorkbookChartTitleFormat_Fill as a MicrosoftGraphWorkbookChartTitleFormatFill1
func (t MicrosoftGraphWorkbookChartTitleFormat_Fill) AsMicrosoftGraphWorkbookChartTitleFormatFill1() (MicrosoftGraphWorkbookChartTitleFormatFill1, error) {
	var body MicrosoftGraphWorkbookChartTitleFormatFill1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphWorkbookChartTitleFormatFill1 overwrites any union data inside the MicrosoftGraphWorkbookChartTitleFormat_Fill as the provided MicrosoftGraphWorkbookChartTitleFormatFill1
func (t *MicrosoftGraphWorkbookChartTitleFormat_Fill) FromMicrosoftGraphWorkbookChartTitleFormatFill1(v MicrosoftGraphWorkbookChartTitleFormatFill1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphWorkbookChartTitleFormatFill1 performs a merge with any union data inside the MicrosoftGraphWorkbookChartTitleFormat_Fill, using the provided MicrosoftGraphWorkbookChartTitleFormatFill1
func (t *MicrosoftGraphWorkbookChartTitleFormat_Fill) MergeMicrosoftGraphWorkbookChartTitleFormatFill1(v MicrosoftGraphWorkbookChartTitleFormatFill1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

func (t MicrosoftGraphWorkbookChartTitleFormat_Fill) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *MicrosoftGraphWorkbookChartTitleFormat_Fill) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsMicrosoftGraphWorkbookChartFont returns the union data inside the MicrosoftGraphWorkbookChartTitleFormat_Font as a MicrosoftGraphWorkbookChartFont
func (t MicrosoftGraphWorkbookChartTitleFormat_Font) AsMicrosoftGraphWorkbookChartFont() (MicrosoftGraphWorkbookChartFont, error) {
	var body MicrosoftGraphWorkbookChartFont
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphWorkbookChartFont overwrites any union data inside the MicrosoftGraphWorkbookChartTitleFormat_Font as the provided MicrosoftGraphWorkbookChartFont
func (t *MicrosoftGraphWorkbookChartTitleFormat_Font) FromMicrosoftGraphWorkbookChartFont(v MicrosoftGraphWorkbookChartFont) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphWorkbookChartFont performs a merge with any union data inside the MicrosoftGraphWorkbookChartTitleFormat_Font, using the provided MicrosoftGraphWorkbookChartFont
func (t *MicrosoftGraphWorkbookChartTitleFormat_Font) MergeMicrosoftGraphWorkbookChartFont(v MicrosoftGraphWorkbookChartFont) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsMicrosoftGraphWorkbookChartTitleFormatFont1 returns the union data inside the MicrosoftGraphWorkbookChartTitleFormat_Font as a MicrosoftGraphWorkbookChartTitleFormatFont1
func (t MicrosoftGraphWorkbookChartTitleFormat_Font) AsMicrosoftGraphWorkbookChartTitleFormatFont1() (MicrosoftGraphWorkbookChartTitleFormatFont1, error) {
	var body MicrosoftGraphWorkbookChartTitleFormatFont1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphWorkbookChartTitleFormatFont1 overwrites any union data inside the MicrosoftGraphWorkbookChartTitleFormat_Font as the provided MicrosoftGraphWorkbookChartTitleFormatFont1
func (t *MicrosoftGraphWorkbookChartTitleFormat_Font) FromMicrosoftGraphWorkbookChartTitleFormatFont1(v MicrosoftGraphWorkbookChartTitleFormatFont1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphWorkbookChartTitleFormatFont1 performs a merge with any union data inside the MicrosoftGraphWorkbookChartTitleFormat_Font, using the provided MicrosoftGraphWorkbookChartTitleFormatFont1
func (t *MicrosoftGraphWorkbookChartTitleFormat_Font) MergeMicrosoftGraphWorkbookChartTitleFormatFont1(v MicrosoftGraphWorkbookChartTitleFormatFont1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

func (t MicrosoftGraphWorkbookChartTitleFormat_Font) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *MicrosoftGraphWorkbookChartTitleFormat_Font) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsMicrosoftGraphWorkbookFilterCriteria returns the union data inside the MicrosoftGraphWorkbookFilter_Criteria as a MicrosoftGraphWorkbookFilterCriteria
func (t MicrosoftGraphWorkbookFilter_Criteria) AsMicrosoftGraphWorkbookFilterCriteria() (MicrosoftGraphWorkbookFilterCriteria, error) {
	var body MicrosoftGraphWorkbookFilterCriteria
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphWorkbookFilterCriteria overwrites any union data inside the MicrosoftGraphWorkbookFilter_Criteria as the provided MicrosoftGraphWorkbookFilterCriteria
func (t *MicrosoftGraphWorkbookFilter_Criteria) FromMicrosoftGraphWorkbookFilterCriteria(v MicrosoftGraphWorkbookFilterCriteria) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphWorkbookFilterCriteria performs a merge with any union data inside the MicrosoftGraphWorkbookFilter_Criteria, using the provided MicrosoftGraphWorkbookFilterCriteria
func (t *MicrosoftGraphWorkbookFilter_Criteria) MergeMicrosoftGraphWorkbookFilterCriteria(v MicrosoftGraphWorkbookFilterCriteria) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsMicrosoftGraphWorkbookFilterCriteria1 returns the union data inside the MicrosoftGraphWorkbookFilter_Criteria as a MicrosoftGraphWorkbookFilterCriteria1
func (t MicrosoftGraphWorkbookFilter_Criteria) AsMicrosoftGraphWorkbookFilterCriteria1() (MicrosoftGraphWorkbookFilterCriteria1, error) {
	var body MicrosoftGraphWorkbookFilterCriteria1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphWorkbookFilterCriteria1 overwrites any union data inside the MicrosoftGraphWorkbookFilter_Criteria as the provided MicrosoftGraphWorkbookFilterCriteria1
func (t *MicrosoftGraphWorkbookFilter_Criteria) FromMicrosoftGraphWorkbookFilterCriteria1(v MicrosoftGraphWorkbookFilterCriteria1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphWorkbookFilterCriteria1 performs a merge with any union data inside the MicrosoftGraphWorkbookFilter_Criteria, using the provided MicrosoftGraphWorkbookFilterCriteria1
func (t *MicrosoftGraphWorkbookFilter_Criteria) MergeMicrosoftGraphWorkbookFilterCriteria1(v MicrosoftGraphWorkbookFilterCriteria1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

func (t MicrosoftGraphWorkbookFilter_Criteria) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *MicrosoftGraphWorkbookFilter_Criteria) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsMicrosoftGraphWorkbookIcon returns the union data inside the MicrosoftGraphWorkbookFilterCriteria_Icon as a MicrosoftGraphWorkbookIcon
func (t MicrosoftGraphWorkbookFilterCriteria_Icon) AsMicrosoftGraphWorkbookIcon() (MicrosoftGraphWorkbookIcon, error) {
	var body MicrosoftGraphWorkbookIcon
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphWorkbookIcon overwrites any union data inside the MicrosoftGraphWorkbookFilterCriteria_Icon as the provided MicrosoftGraphWorkbookIcon
func (t *MicrosoftGraphWorkbookFilterCriteria_Icon) FromMicrosoftGraphWorkbookIcon(v MicrosoftGraphWorkbookIcon) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphWorkbookIcon performs a merge with any union data inside the MicrosoftGraphWorkbookFilterCriteria_Icon, using the provided MicrosoftGraphWorkbookIcon
func (t *MicrosoftGraphWorkbookFilterCriteria_Icon) MergeMicrosoftGraphWorkbookIcon(v MicrosoftGraphWorkbookIcon) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsMicrosoftGraphWorkbookFilterCriteriaIcon1 returns the union data inside the MicrosoftGraphWorkbookFilterCriteria_Icon as a MicrosoftGraphWorkbookFilterCriteriaIcon1
func (t MicrosoftGraphWorkbookFilterCriteria_Icon) AsMicrosoftGraphWorkbookFilterCriteriaIcon1() (MicrosoftGraphWorkbookFilterCriteriaIcon1, error) {
	var body MicrosoftGraphWorkbookFilterCriteriaIcon1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphWorkbookFilterCriteriaIcon1 overwrites any union data inside the MicrosoftGraphWorkbookFilterCriteria_Icon as the provided MicrosoftGraphWorkbookFilterCriteriaIcon1
func (t *MicrosoftGraphWorkbookFilterCriteria_Icon) FromMicrosoftGraphWorkbookFilterCriteriaIcon1(v MicrosoftGraphWorkbookFilterCriteriaIcon1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphWorkbookFilterCriteriaIcon1 performs a merge with any union data inside the MicrosoftGraphWorkbookFilterCriteria_Icon, using the provided MicrosoftGraphWorkbookFilterCriteriaIcon1
func (t *MicrosoftGraphWorkbookFilterCriteria_Icon) MergeMicrosoftGraphWorkbookFilterCriteriaIcon1(v MicrosoftGraphWorkbookFilterCriteriaIcon1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

func (t MicrosoftGraphWorkbookFilterCriteria_Icon) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *MicrosoftGraphWorkbookFilterCriteria_Icon) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsMicrosoftGraphJson returns the union data inside the MicrosoftGraphWorkbookFilterCriteria_Values as a MicrosoftGraphJson
func (t MicrosoftGraphWorkbookFilterCriteria_Values) AsMicrosoftGraphJson() (MicrosoftGraphJson, error) {
	var body MicrosoftGraphJson
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphJson overwrites any union data inside the MicrosoftGraphWorkbookFilterCriteria_Values as the provided MicrosoftGraphJson
func (t *MicrosoftGraphWorkbookFilterCriteria_Values) FromMicrosoftGraphJson(v MicrosoftGraphJson) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphJson performs a merge with any union data inside the MicrosoftGraphWorkbookFilterCriteria_Values, using the provided MicrosoftGraphJson
func (t *MicrosoftGraphWorkbookFilterCriteria_Values) MergeMicrosoftGraphJson(v MicrosoftGraphJson) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsMicrosoftGraphWorkbookFilterCriteriaValues1 returns the union data inside the MicrosoftGraphWorkbookFilterCriteria_Values as a MicrosoftGraphWorkbookFilterCriteriaValues1
func (t MicrosoftGraphWorkbookFilterCriteria_Values) AsMicrosoftGraphWorkbookFilterCriteriaValues1() (MicrosoftGraphWorkbookFilterCriteriaValues1, error) {
	var body MicrosoftGraphWorkbookFilterCriteriaValues1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphWorkbookFilterCriteriaValues1 overwrites any union data inside the MicrosoftGraphWorkbookFilterCriteria_Values as the provided MicrosoftGraphWorkbookFilterCriteriaValues1
func (t *MicrosoftGraphWorkbookFilterCriteria_Values) FromMicrosoftGraphWorkbookFilterCriteriaValues1(v MicrosoftGraphWorkbookFilterCriteriaValues1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphWorkbookFilterCriteriaValues1 performs a merge with any union data inside the MicrosoftGraphWorkbookFilterCriteria_Values, using the provided MicrosoftGraphWorkbookFilterCriteriaValues1
func (t *MicrosoftGraphWorkbookFilterCriteria_Values) MergeMicrosoftGraphWorkbookFilterCriteriaValues1(v MicrosoftGraphWorkbookFilterCriteriaValues1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

func (t MicrosoftGraphWorkbookFilterCriteria_Values) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *MicrosoftGraphWorkbookFilterCriteria_Values) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsMicrosoftGraphJson returns the union data inside the MicrosoftGraphWorkbookNamedItem_Value as a MicrosoftGraphJson
func (t MicrosoftGraphWorkbookNamedItem_Value) AsMicrosoftGraphJson() (MicrosoftGraphJson, error) {
	var body MicrosoftGraphJson
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphJson overwrites any union data inside the MicrosoftGraphWorkbookNamedItem_Value as the provided MicrosoftGraphJson
func (t *MicrosoftGraphWorkbookNamedItem_Value) FromMicrosoftGraphJson(v MicrosoftGraphJson) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphJson performs a merge with any union data inside the MicrosoftGraphWorkbookNamedItem_Value, using the provided MicrosoftGraphJson
func (t *MicrosoftGraphWorkbookNamedItem_Value) MergeMicrosoftGraphJson(v MicrosoftGraphJson) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsMicrosoftGraphWorkbookNamedItemValue1 returns the union data inside the MicrosoftGraphWorkbookNamedItem_Value as a MicrosoftGraphWorkbookNamedItemValue1
func (t MicrosoftGraphWorkbookNamedItem_Value) AsMicrosoftGraphWorkbookNamedItemValue1() (MicrosoftGraphWorkbookNamedItemValue1, error) {
	var body MicrosoftGraphWorkbookNamedItemValue1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphWorkbookNamedItemValue1 overwrites any union data inside the MicrosoftGraphWorkbookNamedItem_Value as the provided MicrosoftGraphWorkbookNamedItemValue1
func (t *MicrosoftGraphWorkbookNamedItem_Value) FromMicrosoftGraphWorkbookNamedItemValue1(v MicrosoftGraphWorkbookNamedItemValue1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphWorkbookNamedItemValue1 performs a merge with any union data inside the MicrosoftGraphWorkbookNamedItem_Value, using the provided MicrosoftGraphWorkbookNamedItemValue1
func (t *MicrosoftGraphWorkbookNamedItem_Value) MergeMicrosoftGraphWorkbookNamedItemValue1(v MicrosoftGraphWorkbookNamedItemValue1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

func (t MicrosoftGraphWorkbookNamedItem_Value) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *MicrosoftGraphWorkbookNamedItem_Value) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsMicrosoftGraphWorkbookWorksheet returns the union data inside the MicrosoftGraphWorkbookNamedItem_Worksheet as a MicrosoftGraphWorkbookWorksheet
func (t MicrosoftGraphWorkbookNamedItem_Worksheet) AsMicrosoftGraphWorkbookWorksheet() (MicrosoftGraphWorkbookWorksheet, error) {
	var body MicrosoftGraphWorkbookWorksheet
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphWorkbookWorksheet overwrites any union data inside the MicrosoftGraphWorkbookNamedItem_Worksheet as the provided MicrosoftGraphWorkbookWorksheet
func (t *MicrosoftGraphWorkbookNamedItem_Worksheet) FromMicrosoftGraphWorkbookWorksheet(v MicrosoftGraphWorkbookWorksheet) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphWorkbookWorksheet performs a merge with any union data inside the MicrosoftGraphWorkbookNamedItem_Worksheet, using the provided MicrosoftGraphWorkbookWorksheet
func (t *MicrosoftGraphWorkbookNamedItem_Worksheet) MergeMicrosoftGraphWorkbookWorksheet(v MicrosoftGraphWorkbookWorksheet) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsMicrosoftGraphWorkbookNamedItemWorksheet1 returns the union data inside the MicrosoftGraphWorkbookNamedItem_Worksheet as a MicrosoftGraphWorkbookNamedItemWorksheet1
func (t MicrosoftGraphWorkbookNamedItem_Worksheet) AsMicrosoftGraphWorkbookNamedItemWorksheet1() (MicrosoftGraphWorkbookNamedItemWorksheet1, error) {
	var body MicrosoftGraphWorkbookNamedItemWorksheet1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphWorkbookNamedItemWorksheet1 overwrites any union data inside the MicrosoftGraphWorkbookNamedItem_Worksheet as the provided MicrosoftGraphWorkbookNamedItemWorksheet1
func (t *MicrosoftGraphWorkbookNamedItem_Worksheet) FromMicrosoftGraphWorkbookNamedItemWorksheet1(v MicrosoftGraphWorkbookNamedItemWorksheet1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphWorkbookNamedItemWorksheet1 performs a merge with any union data inside the MicrosoftGraphWorkbookNamedItem_Worksheet, using the provided MicrosoftGraphWorkbookNamedItemWorksheet1
func (t *MicrosoftGraphWorkbookNamedItem_Worksheet) MergeMicrosoftGraphWorkbookNamedItemWorksheet1(v MicrosoftGraphWorkbookNamedItemWorksheet1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

func (t MicrosoftGraphWorkbookNamedItem_Worksheet) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *MicrosoftGraphWorkbookNamedItem_Worksheet) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsMicrosoftGraphWorkbookOperationError returns the union data inside the MicrosoftGraphWorkbookOperation_Error as a MicrosoftGraphWorkbookOperationError
func (t MicrosoftGraphWorkbookOperation_Error) AsMicrosoftGraphWorkbookOperationError() (MicrosoftGraphWorkbookOperationError, error) {
	var body MicrosoftGraphWorkbookOperationError
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphWorkbookOperationError overwrites any union data inside the MicrosoftGraphWorkbookOperation_Error as the provided MicrosoftGraphWorkbookOperationError
func (t *MicrosoftGraphWorkbookOperation_Error) FromMicrosoftGraphWorkbookOperationError(v MicrosoftGraphWorkbookOperationError) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphWorkbookOperationError performs a merge with any union data inside the MicrosoftGraphWorkbookOperation_Error, using the provided MicrosoftGraphWorkbookOperationError
func (t *MicrosoftGraphWorkbookOperation_Error) MergeMicrosoftGraphWorkbookOperationError(v MicrosoftGraphWorkbookOperationError) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsMicrosoftGraphWorkbookOperationError1 returns the union data inside the MicrosoftGraphWorkbookOperation_Error as a MicrosoftGraphWorkbookOperationError1
func (t MicrosoftGraphWorkbookOperation_Error) AsMicrosoftGraphWorkbookOperationError1() (MicrosoftGraphWorkbookOperationError1, error) {
	var body MicrosoftGraphWorkbookOperationError1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphWorkbookOperationError1 overwrites any union data inside the MicrosoftGraphWorkbookOperation_Error as the provided MicrosoftGraphWorkbookOperationError1
func (t *MicrosoftGraphWorkbookOperation_Error) FromMicrosoftGraphWorkbookOperationError1(v MicrosoftGraphWorkbookOperationError1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphWorkbookOperationError1 performs a merge with any union data inside the MicrosoftGraphWorkbookOperation_Error, using the provided MicrosoftGraphWorkbookOperationError1
func (t *MicrosoftGraphWorkbookOperation_Error) MergeMicrosoftGraphWorkbookOperationError1(v MicrosoftGraphWorkbookOperationError1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

func (t MicrosoftGraphWorkbookOperation_Error) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *MicrosoftGraphWorkbookOperation_Error) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsMicrosoftGraphWorkbookOperationError returns the union data inside the MicrosoftGraphWorkbookOperationError_InnerError as a MicrosoftGraphWorkbookOperationError
func (t MicrosoftGraphWorkbookOperationError_InnerError) AsMicrosoftGraphWorkbookOperationError() (MicrosoftGraphWorkbookOperationError, error) {
	var body MicrosoftGraphWorkbookOperationError
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphWorkbookOperationError overwrites any union data inside the MicrosoftGraphWorkbookOperationError_InnerError as the provided MicrosoftGraphWorkbookOperationError
func (t *MicrosoftGraphWorkbookOperationError_InnerError) FromMicrosoftGraphWorkbookOperationError(v MicrosoftGraphWorkbookOperationError) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphWorkbookOperationError performs a merge with any union data inside the MicrosoftGraphWorkbookOperationError_InnerError, using the provided MicrosoftGraphWorkbookOperationError
func (t *MicrosoftGraphWorkbookOperationError_InnerError) MergeMicrosoftGraphWorkbookOperationError(v MicrosoftGraphWorkbookOperationError) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsMicrosoftGraphWorkbookOperationErrorInnerError1 returns the union data inside the MicrosoftGraphWorkbookOperationError_InnerError as a MicrosoftGraphWorkbookOperationErrorInnerError1
func (t MicrosoftGraphWorkbookOperationError_InnerError) AsMicrosoftGraphWorkbookOperationErrorInnerError1() (MicrosoftGraphWorkbookOperationErrorInnerError1, error) {
	var body MicrosoftGraphWorkbookOperationErrorInnerError1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphWorkbookOperationErrorInnerError1 overwrites any union data inside the MicrosoftGraphWorkbookOperationError_InnerError as the provided MicrosoftGraphWorkbookOperationErrorInnerError1
func (t *MicrosoftGraphWorkbookOperationError_InnerError) FromMicrosoftGraphWorkbookOperationErrorInnerError1(v MicrosoftGraphWorkbookOperationErrorInnerError1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphWorkbookOperationErrorInnerError1 performs a merge with any union data inside the MicrosoftGraphWorkbookOperationError_InnerError, using the provided MicrosoftGraphWorkbookOperationErrorInnerError1
func (t *MicrosoftGraphWorkbookOperationError_InnerError) MergeMicrosoftGraphWorkbookOperationErrorInnerError1(v MicrosoftGraphWorkbookOperationErrorInnerError1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

func (t MicrosoftGraphWorkbookOperationError_InnerError) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *MicrosoftGraphWorkbookOperationError_InnerError) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsMicrosoftGraphWorkbookWorksheet returns the union data inside the MicrosoftGraphWorkbookPivotTable_Worksheet as a MicrosoftGraphWorkbookWorksheet
func (t MicrosoftGraphWorkbookPivotTable_Worksheet) AsMicrosoftGraphWorkbookWorksheet() (MicrosoftGraphWorkbookWorksheet, error) {
	var body MicrosoftGraphWorkbookWorksheet
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphWorkbookWorksheet overwrites any union data inside the MicrosoftGraphWorkbookPivotTable_Worksheet as the provided MicrosoftGraphWorkbookWorksheet
func (t *MicrosoftGraphWorkbookPivotTable_Worksheet) FromMicrosoftGraphWorkbookWorksheet(v MicrosoftGraphWorkbookWorksheet) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphWorkbookWorksheet performs a merge with any union data inside the MicrosoftGraphWorkbookPivotTable_Worksheet, using the provided MicrosoftGraphWorkbookWorksheet
func (t *MicrosoftGraphWorkbookPivotTable_Worksheet) MergeMicrosoftGraphWorkbookWorksheet(v MicrosoftGraphWorkbookWorksheet) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsMicrosoftGraphWorkbookPivotTableWorksheet1 returns the union data inside the MicrosoftGraphWorkbookPivotTable_Worksheet as a MicrosoftGraphWorkbookPivotTableWorksheet1
func (t MicrosoftGraphWorkbookPivotTable_Worksheet) AsMicrosoftGraphWorkbookPivotTableWorksheet1() (MicrosoftGraphWorkbookPivotTableWorksheet1, error) {
	var body MicrosoftGraphWorkbookPivotTableWorksheet1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphWorkbookPivotTableWorksheet1 overwrites any union data inside the MicrosoftGraphWorkbookPivotTable_Worksheet as the provided MicrosoftGraphWorkbookPivotTableWorksheet1
func (t *MicrosoftGraphWorkbookPivotTable_Worksheet) FromMicrosoftGraphWorkbookPivotTableWorksheet1(v MicrosoftGraphWorkbookPivotTableWorksheet1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphWorkbookPivotTableWorksheet1 performs a merge with any union data inside the MicrosoftGraphWorkbookPivotTable_Worksheet, using the provided MicrosoftGraphWorkbookPivotTableWorksheet1
func (t *MicrosoftGraphWorkbookPivotTable_Worksheet) MergeMicrosoftGraphWorkbookPivotTableWorksheet1(v MicrosoftGraphWorkbookPivotTableWorksheet1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

func (t MicrosoftGraphWorkbookPivotTable_Worksheet) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *MicrosoftGraphWorkbookPivotTable_Worksheet) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsMicrosoftGraphWorkbookIcon returns the union data inside the MicrosoftGraphWorkbookSortField_Icon as a MicrosoftGraphWorkbookIcon
func (t MicrosoftGraphWorkbookSortField_Icon) AsMicrosoftGraphWorkbookIcon() (MicrosoftGraphWorkbookIcon, error) {
	var body MicrosoftGraphWorkbookIcon
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphWorkbookIcon overwrites any union data inside the MicrosoftGraphWorkbookSortField_Icon as the provided MicrosoftGraphWorkbookIcon
func (t *MicrosoftGraphWorkbookSortField_Icon) FromMicrosoftGraphWorkbookIcon(v MicrosoftGraphWorkbookIcon) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphWorkbookIcon performs a merge with any union data inside the MicrosoftGraphWorkbookSortField_Icon, using the provided MicrosoftGraphWorkbookIcon
func (t *MicrosoftGraphWorkbookSortField_Icon) MergeMicrosoftGraphWorkbookIcon(v MicrosoftGraphWorkbookIcon) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsMicrosoftGraphWorkbookSortFieldIcon1 returns the union data inside the MicrosoftGraphWorkbookSortField_Icon as a MicrosoftGraphWorkbookSortFieldIcon1
func (t MicrosoftGraphWorkbookSortField_Icon) AsMicrosoftGraphWorkbookSortFieldIcon1() (MicrosoftGraphWorkbookSortFieldIcon1, error) {
	var body MicrosoftGraphWorkbookSortFieldIcon1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphWorkbookSortFieldIcon1 overwrites any union data inside the MicrosoftGraphWorkbookSortField_Icon as the provided MicrosoftGraphWorkbookSortFieldIcon1
func (t *MicrosoftGraphWorkbookSortField_Icon) FromMicrosoftGraphWorkbookSortFieldIcon1(v MicrosoftGraphWorkbookSortFieldIcon1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphWorkbookSortFieldIcon1 performs a merge with any union data inside the MicrosoftGraphWorkbookSortField_Icon, using the provided MicrosoftGraphWorkbookSortFieldIcon1
func (t *MicrosoftGraphWorkbookSortField_Icon) MergeMicrosoftGraphWorkbookSortFieldIcon1(v MicrosoftGraphWorkbookSortFieldIcon1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

func (t MicrosoftGraphWorkbookSortField_Icon) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *MicrosoftGraphWorkbookSortField_Icon) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsMicrosoftGraphWorkbookTableSort returns the union data inside the MicrosoftGraphWorkbookTable_Sort as a MicrosoftGraphWorkbookTableSort
func (t MicrosoftGraphWorkbookTable_Sort) AsMicrosoftGraphWorkbookTableSort() (MicrosoftGraphWorkbookTableSort, error) {
	var body MicrosoftGraphWorkbookTableSort
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphWorkbookTableSort overwrites any union data inside the MicrosoftGraphWorkbookTable_Sort as the provided MicrosoftGraphWorkbookTableSort
func (t *MicrosoftGraphWorkbookTable_Sort) FromMicrosoftGraphWorkbookTableSort(v MicrosoftGraphWorkbookTableSort) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphWorkbookTableSort performs a merge with any union data inside the MicrosoftGraphWorkbookTable_Sort, using the provided MicrosoftGraphWorkbookTableSort
func (t *MicrosoftGraphWorkbookTable_Sort) MergeMicrosoftGraphWorkbookTableSort(v MicrosoftGraphWorkbookTableSort) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsMicrosoftGraphWorkbookTableSort1 returns the union data inside the MicrosoftGraphWorkbookTable_Sort as a MicrosoftGraphWorkbookTableSort1
func (t MicrosoftGraphWorkbookTable_Sort) AsMicrosoftGraphWorkbookTableSort1() (MicrosoftGraphWorkbookTableSort1, error) {
	var body MicrosoftGraphWorkbookTableSort1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphWorkbookTableSort1 overwrites any union data inside the MicrosoftGraphWorkbookTable_Sort as the provided MicrosoftGraphWorkbookTableSort1
func (t *MicrosoftGraphWorkbookTable_Sort) FromMicrosoftGraphWorkbookTableSort1(v MicrosoftGraphWorkbookTableSort1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphWorkbookTableSort1 performs a merge with any union data inside the MicrosoftGraphWorkbookTable_Sort, using the provided MicrosoftGraphWorkbookTableSort1
func (t *MicrosoftGraphWorkbookTable_Sort) MergeMicrosoftGraphWorkbookTableSort1(v MicrosoftGraphWorkbookTableSort1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

func (t MicrosoftGraphWorkbookTable_Sort) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *MicrosoftGraphWorkbookTable_Sort) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsMicrosoftGraphWorkbookWorksheet returns the union data inside the MicrosoftGraphWorkbookTable_Worksheet as a MicrosoftGraphWorkbookWorksheet
func (t MicrosoftGraphWorkbookTable_Worksheet) AsMicrosoftGraphWorkbookWorksheet() (MicrosoftGraphWorkbookWorksheet, error) {
	var body MicrosoftGraphWorkbookWorksheet
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphWorkbookWorksheet overwrites any union data inside the MicrosoftGraphWorkbookTable_Worksheet as the provided MicrosoftGraphWorkbookWorksheet
func (t *MicrosoftGraphWorkbookTable_Worksheet) FromMicrosoftGraphWorkbookWorksheet(v MicrosoftGraphWorkbookWorksheet) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphWorkbookWorksheet performs a merge with any union data inside the MicrosoftGraphWorkbookTable_Worksheet, using the provided MicrosoftGraphWorkbookWorksheet
func (t *MicrosoftGraphWorkbookTable_Worksheet) MergeMicrosoftGraphWorkbookWorksheet(v MicrosoftGraphWorkbookWorksheet) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsMicrosoftGraphWorkbookTableWorksheet1 returns the union data inside the MicrosoftGraphWorkbookTable_Worksheet as a MicrosoftGraphWorkbookTableWorksheet1
func (t MicrosoftGraphWorkbookTable_Worksheet) AsMicrosoftGraphWorkbookTableWorksheet1() (MicrosoftGraphWorkbookTableWorksheet1, error) {
	var body MicrosoftGraphWorkbookTableWorksheet1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphWorkbookTableWorksheet1 overwrites any union data inside the MicrosoftGraphWorkbookTable_Worksheet as the provided MicrosoftGraphWorkbookTableWorksheet1
func (t *MicrosoftGraphWorkbookTable_Worksheet) FromMicrosoftGraphWorkbookTableWorksheet1(v MicrosoftGraphWorkbookTableWorksheet1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphWorkbookTableWorksheet1 performs a merge with any union data inside the MicrosoftGraphWorkbookTable_Worksheet, using the provided MicrosoftGraphWorkbookTableWorksheet1
func (t *MicrosoftGraphWorkbookTable_Worksheet) MergeMicrosoftGraphWorkbookTableWorksheet1(v MicrosoftGraphWorkbookTableWorksheet1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

func (t MicrosoftGraphWorkbookTable_Worksheet) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *MicrosoftGraphWorkbookTable_Worksheet) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsMicrosoftGraphWorkbookFilter returns the union data inside the MicrosoftGraphWorkbookTableColumn_Filter as a MicrosoftGraphWorkbookFilter
func (t MicrosoftGraphWorkbookTableColumn_Filter) AsMicrosoftGraphWorkbookFilter() (MicrosoftGraphWorkbookFilter, error) {
	var body MicrosoftGraphWorkbookFilter
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphWorkbookFilter overwrites any union data inside the MicrosoftGraphWorkbookTableColumn_Filter as the provided MicrosoftGraphWorkbookFilter
func (t *MicrosoftGraphWorkbookTableColumn_Filter) FromMicrosoftGraphWorkbookFilter(v MicrosoftGraphWorkbookFilter) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphWorkbookFilter performs a merge with any union data inside the MicrosoftGraphWorkbookTableColumn_Filter, using the provided MicrosoftGraphWorkbookFilter
func (t *MicrosoftGraphWorkbookTableColumn_Filter) MergeMicrosoftGraphWorkbookFilter(v MicrosoftGraphWorkbookFilter) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsMicrosoftGraphWorkbookTableColumnFilter1 returns the union data inside the MicrosoftGraphWorkbookTableColumn_Filter as a MicrosoftGraphWorkbookTableColumnFilter1
func (t MicrosoftGraphWorkbookTableColumn_Filter) AsMicrosoftGraphWorkbookTableColumnFilter1() (MicrosoftGraphWorkbookTableColumnFilter1, error) {
	var body MicrosoftGraphWorkbookTableColumnFilter1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphWorkbookTableColumnFilter1 overwrites any union data inside the MicrosoftGraphWorkbookTableColumn_Filter as the provided MicrosoftGraphWorkbookTableColumnFilter1
func (t *MicrosoftGraphWorkbookTableColumn_Filter) FromMicrosoftGraphWorkbookTableColumnFilter1(v MicrosoftGraphWorkbookTableColumnFilter1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphWorkbookTableColumnFilter1 performs a merge with any union data inside the MicrosoftGraphWorkbookTableColumn_Filter, using the provided MicrosoftGraphWorkbookTableColumnFilter1
func (t *MicrosoftGraphWorkbookTableColumn_Filter) MergeMicrosoftGraphWorkbookTableColumnFilter1(v MicrosoftGraphWorkbookTableColumnFilter1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

func (t MicrosoftGraphWorkbookTableColumn_Filter) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *MicrosoftGraphWorkbookTableColumn_Filter) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsMicrosoftGraphJson returns the union data inside the MicrosoftGraphWorkbookTableColumn_Values as a MicrosoftGraphJson
func (t MicrosoftGraphWorkbookTableColumn_Values) AsMicrosoftGraphJson() (MicrosoftGraphJson, error) {
	var body MicrosoftGraphJson
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphJson overwrites any union data inside the MicrosoftGraphWorkbookTableColumn_Values as the provided MicrosoftGraphJson
func (t *MicrosoftGraphWorkbookTableColumn_Values) FromMicrosoftGraphJson(v MicrosoftGraphJson) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphJson performs a merge with any union data inside the MicrosoftGraphWorkbookTableColumn_Values, using the provided MicrosoftGraphJson
func (t *MicrosoftGraphWorkbookTableColumn_Values) MergeMicrosoftGraphJson(v MicrosoftGraphJson) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsMicrosoftGraphWorkbookTableColumnValues1 returns the union data inside the MicrosoftGraphWorkbookTableColumn_Values as a MicrosoftGraphWorkbookTableColumnValues1
func (t MicrosoftGraphWorkbookTableColumn_Values) AsMicrosoftGraphWorkbookTableColumnValues1() (MicrosoftGraphWorkbookTableColumnValues1, error) {
	var body MicrosoftGraphWorkbookTableColumnValues1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphWorkbookTableColumnValues1 overwrites any union data inside the MicrosoftGraphWorkbookTableColumn_Values as the provided MicrosoftGraphWorkbookTableColumnValues1
func (t *MicrosoftGraphWorkbookTableColumn_Values) FromMicrosoftGraphWorkbookTableColumnValues1(v MicrosoftGraphWorkbookTableColumnValues1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphWorkbookTableColumnValues1 performs a merge with any union data inside the MicrosoftGraphWorkbookTableColumn_Values, using the provided MicrosoftGraphWorkbookTableColumnValues1
func (t *MicrosoftGraphWorkbookTableColumn_Values) MergeMicrosoftGraphWorkbookTableColumnValues1(v MicrosoftGraphWorkbookTableColumnValues1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

func (t MicrosoftGraphWorkbookTableColumn_Values) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *MicrosoftGraphWorkbookTableColumn_Values) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsMicrosoftGraphJson returns the union data inside the MicrosoftGraphWorkbookTableRow_Values as a MicrosoftGraphJson
func (t MicrosoftGraphWorkbookTableRow_Values) AsMicrosoftGraphJson() (MicrosoftGraphJson, error) {
	var body MicrosoftGraphJson
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphJson overwrites any union data inside the MicrosoftGraphWorkbookTableRow_Values as the provided MicrosoftGraphJson
func (t *MicrosoftGraphWorkbookTableRow_Values) FromMicrosoftGraphJson(v MicrosoftGraphJson) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphJson performs a merge with any union data inside the MicrosoftGraphWorkbookTableRow_Values, using the provided MicrosoftGraphJson
func (t *MicrosoftGraphWorkbookTableRow_Values) MergeMicrosoftGraphJson(v MicrosoftGraphJson) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsMicrosoftGraphWorkbookTableRowValues1 returns the union data inside the MicrosoftGraphWorkbookTableRow_Values as a MicrosoftGraphWorkbookTableRowValues1
func (t MicrosoftGraphWorkbookTableRow_Values) AsMicrosoftGraphWorkbookTableRowValues1() (MicrosoftGraphWorkbookTableRowValues1, error) {
	var body MicrosoftGraphWorkbookTableRowValues1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphWorkbookTableRowValues1 overwrites any union data inside the MicrosoftGraphWorkbookTableRow_Values as the provided MicrosoftGraphWorkbookTableRowValues1
func (t *MicrosoftGraphWorkbookTableRow_Values) FromMicrosoftGraphWorkbookTableRowValues1(v MicrosoftGraphWorkbookTableRowValues1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphWorkbookTableRowValues1 performs a merge with any union data inside the MicrosoftGraphWorkbookTableRow_Values, using the provided MicrosoftGraphWorkbookTableRowValues1
func (t *MicrosoftGraphWorkbookTableRow_Values) MergeMicrosoftGraphWorkbookTableRowValues1(v MicrosoftGraphWorkbookTableRowValues1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

func (t MicrosoftGraphWorkbookTableRow_Values) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *MicrosoftGraphWorkbookTableRow_Values) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsMicrosoftGraphWorkbookSortField returns the union data inside the MicrosoftGraphWorkbookTableSort_Fields_Item as a MicrosoftGraphWorkbookSortField
func (t MicrosoftGraphWorkbookTableSort_Fields_Item) AsMicrosoftGraphWorkbookSortField() (MicrosoftGraphWorkbookSortField, error) {
	var body MicrosoftGraphWorkbookSortField
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphWorkbookSortField overwrites any union data inside the MicrosoftGraphWorkbookTableSort_Fields_Item as the provided MicrosoftGraphWorkbookSortField
func (t *MicrosoftGraphWorkbookTableSort_Fields_Item) FromMicrosoftGraphWorkbookSortField(v MicrosoftGraphWorkbookSortField) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphWorkbookSortField performs a merge with any union data inside the MicrosoftGraphWorkbookTableSort_Fields_Item, using the provided MicrosoftGraphWorkbookSortField
func (t *MicrosoftGraphWorkbookTableSort_Fields_Item) MergeMicrosoftGraphWorkbookSortField(v MicrosoftGraphWorkbookSortField) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsMicrosoftGraphWorkbookTableSortFields1 returns the union data inside the MicrosoftGraphWorkbookTableSort_Fields_Item as a MicrosoftGraphWorkbookTableSortFields1
func (t MicrosoftGraphWorkbookTableSort_Fields_Item) AsMicrosoftGraphWorkbookTableSortFields1() (MicrosoftGraphWorkbookTableSortFields1, error) {
	var body MicrosoftGraphWorkbookTableSortFields1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphWorkbookTableSortFields1 overwrites any union data inside the MicrosoftGraphWorkbookTableSort_Fields_Item as the provided MicrosoftGraphWorkbookTableSortFields1
func (t *MicrosoftGraphWorkbookTableSort_Fields_Item) FromMicrosoftGraphWorkbookTableSortFields1(v MicrosoftGraphWorkbookTableSortFields1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphWorkbookTableSortFields1 performs a merge with any union data inside the MicrosoftGraphWorkbookTableSort_Fields_Item, using the provided MicrosoftGraphWorkbookTableSortFields1
func (t *MicrosoftGraphWorkbookTableSort_Fields_Item) MergeMicrosoftGraphWorkbookTableSortFields1(v MicrosoftGraphWorkbookTableSortFields1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

func (t MicrosoftGraphWorkbookTableSort_Fields_Item) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *MicrosoftGraphWorkbookTableSort_Fields_Item) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsMicrosoftGraphWorkbookWorksheetProtection returns the union data inside the MicrosoftGraphWorkbookWorksheet_Protection as a MicrosoftGraphWorkbookWorksheetProtection
func (t MicrosoftGraphWorkbookWorksheet_Protection) AsMicrosoftGraphWorkbookWorksheetProtection() (MicrosoftGraphWorkbookWorksheetProtection, error) {
	var body MicrosoftGraphWorkbookWorksheetProtection
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphWorkbookWorksheetProtection overwrites any union data inside the MicrosoftGraphWorkbookWorksheet_Protection as the provided MicrosoftGraphWorkbookWorksheetProtection
func (t *MicrosoftGraphWorkbookWorksheet_Protection) FromMicrosoftGraphWorkbookWorksheetProtection(v MicrosoftGraphWorkbookWorksheetProtection) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphWorkbookWorksheetProtection performs a merge with any union data inside the MicrosoftGraphWorkbookWorksheet_Protection, using the provided MicrosoftGraphWorkbookWorksheetProtection
func (t *MicrosoftGraphWorkbookWorksheet_Protection) MergeMicrosoftGraphWorkbookWorksheetProtection(v MicrosoftGraphWorkbookWorksheetProtection) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsMicrosoftGraphWorkbookWorksheetProtection1 returns the union data inside the MicrosoftGraphWorkbookWorksheet_Protection as a MicrosoftGraphWorkbookWorksheetProtection1
func (t MicrosoftGraphWorkbookWorksheet_Protection) AsMicrosoftGraphWorkbookWorksheetProtection1() (MicrosoftGraphWorkbookWorksheetProtection1, error) {
	var body MicrosoftGraphWorkbookWorksheetProtection1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphWorkbookWorksheetProtection1 overwrites any union data inside the MicrosoftGraphWorkbookWorksheet_Protection as the provided MicrosoftGraphWorkbookWorksheetProtection1
func (t *MicrosoftGraphWorkbookWorksheet_Protection) FromMicrosoftGraphWorkbookWorksheetProtection1(v MicrosoftGraphWorkbookWorksheetProtection1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphWorkbookWorksheetProtection1 performs a merge with any union data inside the MicrosoftGraphWorkbookWorksheet_Protection, using the provided MicrosoftGraphWorkbookWorksheetProtection1
func (t *MicrosoftGraphWorkbookWorksheet_Protection) MergeMicrosoftGraphWorkbookWorksheetProtection1(v MicrosoftGraphWorkbookWorksheetProtection1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

func (t MicrosoftGraphWorkbookWorksheet_Protection) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *MicrosoftGraphWorkbookWorksheet_Protection) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsMicrosoftGraphWorkbookWorksheetProtectionOptions returns the union data inside the MicrosoftGraphWorkbookWorksheetProtection_Options as a MicrosoftGraphWorkbookWorksheetProtectionOptions
func (t MicrosoftGraphWorkbookWorksheetProtection_Options) AsMicrosoftGraphWorkbookWorksheetProtectionOptions() (MicrosoftGraphWorkbookWorksheetProtectionOptions, error) {
	var body MicrosoftGraphWorkbookWorksheetProtectionOptions
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphWorkbookWorksheetProtectionOptions overwrites any union data inside the MicrosoftGraphWorkbookWorksheetProtection_Options as the provided MicrosoftGraphWorkbookWorksheetProtectionOptions
func (t *MicrosoftGraphWorkbookWorksheetProtection_Options) FromMicrosoftGraphWorkbookWorksheetProtectionOptions(v MicrosoftGraphWorkbookWorksheetProtectionOptions) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphWorkbookWorksheetProtectionOptions performs a merge with any union data inside the MicrosoftGraphWorkbookWorksheetProtection_Options, using the provided MicrosoftGraphWorkbookWorksheetProtectionOptions
func (t *MicrosoftGraphWorkbookWorksheetProtection_Options) MergeMicrosoftGraphWorkbookWorksheetProtectionOptions(v MicrosoftGraphWorkbookWorksheetProtectionOptions) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsMicrosoftGraphWorkbookWorksheetProtectionOptions1 returns the union data inside the MicrosoftGraphWorkbookWorksheetProtection_Options as a MicrosoftGraphWorkbookWorksheetProtectionOptions1
func (t MicrosoftGraphWorkbookWorksheetProtection_Options) AsMicrosoftGraphWorkbookWorksheetProtectionOptions1() (MicrosoftGraphWorkbookWorksheetProtectionOptions1, error) {
	var body MicrosoftGraphWorkbookWorksheetProtectionOptions1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphWorkbookWorksheetProtectionOptions1 overwrites any union data inside the MicrosoftGraphWorkbookWorksheetProtection_Options as the provided MicrosoftGraphWorkbookWorksheetProtectionOptions1
func (t *MicrosoftGraphWorkbookWorksheetProtection_Options) FromMicrosoftGraphWorkbookWorksheetProtectionOptions1(v MicrosoftGraphWorkbookWorksheetProtectionOptions1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphWorkbookWorksheetProtectionOptions1 performs a merge with any union data inside the MicrosoftGraphWorkbookWorksheetProtection_Options, using the provided MicrosoftGraphWorkbookWorksheetProtectionOptions1
func (t *MicrosoftGraphWorkbookWorksheetProtection_Options) MergeMicrosoftGraphWorkbookWorksheetProtectionOptions1(v MicrosoftGraphWorkbookWorksheetProtectionOptions1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

func (t MicrosoftGraphWorkbookWorksheetProtection_Options) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *MicrosoftGraphWorkbookWorksheetProtection_Options) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsMicrosoftGraphDayOfWeek returns the union data inside the MicrosoftGraphWorkingHours_DaysOfWeek_Item as a MicrosoftGraphDayOfWeek
func (t MicrosoftGraphWorkingHours_DaysOfWeek_Item) AsMicrosoftGraphDayOfWeek() (MicrosoftGraphDayOfWeek, error) {
	var body MicrosoftGraphDayOfWeek
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphDayOfWeek overwrites any union data inside the MicrosoftGraphWorkingHours_DaysOfWeek_Item as the provided MicrosoftGraphDayOfWeek
func (t *MicrosoftGraphWorkingHours_DaysOfWeek_Item) FromMicrosoftGraphDayOfWeek(v MicrosoftGraphDayOfWeek) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphDayOfWeek performs a merge with any union data inside the MicrosoftGraphWorkingHours_DaysOfWeek_Item, using the provided MicrosoftGraphDayOfWeek
func (t *MicrosoftGraphWorkingHours_DaysOfWeek_Item) MergeMicrosoftGraphDayOfWeek(v MicrosoftGraphDayOfWeek) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsMicrosoftGraphWorkingHoursDaysOfWeek1 returns the union data inside the MicrosoftGraphWorkingHours_DaysOfWeek_Item as a MicrosoftGraphWorkingHoursDaysOfWeek1
func (t MicrosoftGraphWorkingHours_DaysOfWeek_Item) AsMicrosoftGraphWorkingHoursDaysOfWeek1() (MicrosoftGraphWorkingHoursDaysOfWeek1, error) {
	var body MicrosoftGraphWorkingHoursDaysOfWeek1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphWorkingHoursDaysOfWeek1 overwrites any union data inside the MicrosoftGraphWorkingHours_DaysOfWeek_Item as the provided MicrosoftGraphWorkingHoursDaysOfWeek1
func (t *MicrosoftGraphWorkingHours_DaysOfWeek_Item) FromMicrosoftGraphWorkingHoursDaysOfWeek1(v MicrosoftGraphWorkingHoursDaysOfWeek1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphWorkingHoursDaysOfWeek1 performs a merge with any union data inside the MicrosoftGraphWorkingHours_DaysOfWeek_Item, using the provided MicrosoftGraphWorkingHoursDaysOfWeek1
func (t *MicrosoftGraphWorkingHours_DaysOfWeek_Item) MergeMicrosoftGraphWorkingHoursDaysOfWeek1(v MicrosoftGraphWorkingHoursDaysOfWeek1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

func (t MicrosoftGraphWorkingHours_DaysOfWeek_Item) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *MicrosoftGraphWorkingHours_DaysOfWeek_Item) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsMicrosoftGraphTimeZoneBase returns the union data inside the MicrosoftGraphWorkingHours_TimeZone as a MicrosoftGraphTimeZoneBase
func (t MicrosoftGraphWorkingHours_TimeZone) AsMicrosoftGraphTimeZoneBase() (MicrosoftGraphTimeZoneBase, error) {
	var body MicrosoftGraphTimeZoneBase
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphTimeZoneBase overwrites any union data inside the MicrosoftGraphWorkingHours_TimeZone as the provided MicrosoftGraphTimeZoneBase
func (t *MicrosoftGraphWorkingHours_TimeZone) FromMicrosoftGraphTimeZoneBase(v MicrosoftGraphTimeZoneBase) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphTimeZoneBase performs a merge with any union data inside the MicrosoftGraphWorkingHours_TimeZone, using the provided MicrosoftGraphTimeZoneBase
func (t *MicrosoftGraphWorkingHours_TimeZone) MergeMicrosoftGraphTimeZoneBase(v MicrosoftGraphTimeZoneBase) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsMicrosoftGraphWorkingHoursTimeZone1 returns the union data inside the MicrosoftGraphWorkingHours_TimeZone as a MicrosoftGraphWorkingHoursTimeZone1
func (t MicrosoftGraphWorkingHours_TimeZone) AsMicrosoftGraphWorkingHoursTimeZone1() (MicrosoftGraphWorkingHoursTimeZone1, error) {
	var body MicrosoftGraphWorkingHoursTimeZone1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMicrosoftGraphWorkingHoursTimeZone1 overwrites any union data inside the MicrosoftGraphWorkingHours_TimeZone as the provided MicrosoftGraphWorkingHoursTimeZone1
func (t *MicrosoftGraphWorkingHours_TimeZone) FromMicrosoftGraphWorkingHoursTimeZone1(v MicrosoftGraphWorkingHoursTimeZone1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMicrosoftGraphWorkingHoursTimeZone1 performs a merge with any union data inside the MicrosoftGraphWorkingHours_TimeZone, using the provided MicrosoftGraphWorkingHoursTimeZone1
func (t *MicrosoftGraphWorkingHours_TimeZone) MergeMicrosoftGraphWorkingHoursTimeZone1(v MicrosoftGraphWorkingHoursTimeZone1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

func (t MicrosoftGraphWorkingHours_TimeZone) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *MicrosoftGraphWorkingHours_TimeZone) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// RequestEditorFn  is the function signature for the RequestEditor callback function
type RequestEditorFn func(ctx context.Context, req *http.Request) error

// Doer performs HTTP requests.
//
// The standard http.Client implements this interface.
type HttpRequestDoer interface {
	Do(req *http.Request) (*http.Response, error)
}

// Client which conforms to the OpenAPI3 specification for this service.
type Client struct {
	// The endpoint of the server conforming to this interface, with scheme,
	// https://api.deepmap.com for example. This can contain a path relative
	// to the server, such as https://api.deepmap.com/dev-test, and all the
	// paths in the swagger spec will be appended to the server.
	Server string

	// Doer for performing requests, typically a *http.Client with any
	// customized settings, such as certificate chains.
	Client HttpRequestDoer

	// A list of callbacks for modifying requests which are generated before sending over
	// the network.
	RequestEditors []RequestEditorFn
}

// ClientOption allows setting custom parameters during construction
type ClientOption func(*Client) error

// Creates a new Client, with reasonable defaults
func NewClient(server string, opts ...ClientOption) (*Client, error) {
	// create a client with sane default values
	client := Client{
		Server: server,
	}
	// mutate client and add all optional params
	for _, o := range opts {
		if err := o(&client); err != nil {
			return nil, err
		}
	}
	// ensure the server URL always has a trailing slash
	if !strings.HasSuffix(client.Server, "/") {
		client.Server += "/"
	}
	// create httpClient, if not already present
	if client.Client == nil {
		client.Client = &http.Client{}
	}
	return &client, nil
}

// WithHTTPClient allows overriding the default Doer, which is
// automatically created using http.Client. This is useful for tests.
func WithHTTPClient(doer HttpRequestDoer) ClientOption {
	return func(c *Client) error {
		c.Client = doer
		return nil
	}
}

// WithRequestEditorFn allows setting up a callback function, which will be
// called right before sending the request. This can be used to mutate the request.
func WithRequestEditorFn(fn RequestEditorFn) ClientOption {
	return func(c *Client) error {
		c.RequestEditors = append(c.RequestEditors, fn)
		return nil
	}
}

// The interface specification for the client above.
type ClientInterface interface {
	// UsersUserListUser request
	UsersUserListUser(ctx context.Context, params *UsersUserListUserParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UsersUserCreateUserWithBody request with any body
	UsersUserCreateUserWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	UsersUserCreateUser(ctx context.Context, body UsersUserCreateUserJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UsersUserDeleteUser request
	UsersUserDeleteUser(ctx context.Context, userId string, params *UsersUserDeleteUserParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UsersUserGetUser request
	UsersUserGetUser(ctx context.Context, userId string, params *UsersUserGetUserParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UsersUserUpdateUserWithBody request with any body
	UsersUserUpdateUserWithBody(ctx context.Context, userId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	UsersUserUpdateUser(ctx context.Context, userId string, body UsersUserUpdateUserJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UsersListEvents request
	UsersListEvents(ctx context.Context, userId string, params *UsersListEventsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UsersCreateEventsWithBody request with any body
	UsersCreateEventsWithBody(ctx context.Context, userId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	UsersCreateEvents(ctx context.Context, userId string, body UsersCreateEventsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UsersEventsGetCountD443 request
	UsersEventsGetCountD443(ctx context.Context, userId string, params *UsersEventsGetCountD443Params, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UsersUserEventsDelta request
	UsersUserEventsDelta(ctx context.Context, userId string, params *UsersUserEventsDeltaParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UsersDeleteEvents request
	UsersDeleteEvents(ctx context.Context, userId string, eventId string, params *UsersDeleteEventsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UsersGetEvents request
	UsersGetEvents(ctx context.Context, userId string, eventId string, params *UsersGetEventsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UsersUpdateEventsWithBody request with any body
	UsersUpdateEventsWithBody(ctx context.Context, userId string, eventId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	UsersUpdateEvents(ctx context.Context, userId string, eventId string, body UsersUpdateEventsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UsersEventsListAttachments request
	UsersEventsListAttachments(ctx context.Context, userId string, eventId string, params *UsersEventsListAttachmentsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UsersEventsCreateAttachmentsWithBody request with any body
	UsersEventsCreateAttachmentsWithBody(ctx context.Context, userId string, eventId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	UsersEventsCreateAttachments(ctx context.Context, userId string, eventId string, body UsersEventsCreateAttachmentsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UsersEventsAttachmentsGetCount711f request
	UsersEventsAttachmentsGetCount711f(ctx context.Context, userId string, eventId string, params *UsersEventsAttachmentsGetCount711fParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UsersUserEventsEventAttachmentsCreateUploadSessionWithBody request with any body
	UsersUserEventsEventAttachmentsCreateUploadSessionWithBody(ctx context.Context, userId string, eventId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	UsersUserEventsEventAttachmentsCreateUploadSession(ctx context.Context, userId string, eventId string, body UsersUserEventsEventAttachmentsCreateUploadSessionJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UsersEventsDeleteAttachments request
	UsersEventsDeleteAttachments(ctx context.Context, userId string, eventId string, attachmentId string, params *UsersEventsDeleteAttachmentsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UsersEventsGetAttachments request
	UsersEventsGetAttachments(ctx context.Context, userId string, eventId string, attachmentId string, params *UsersEventsGetAttachmentsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UsersEventsGetCalendar request
	UsersEventsGetCalendar(ctx context.Context, userId string, eventId string, params *UsersEventsGetCalendarParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UsersEventsListExtensions request
	UsersEventsListExtensions(ctx context.Context, userId string, eventId string, params *UsersEventsListExtensionsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UsersEventsCreateExtensionsWithBody request with any body
	UsersEventsCreateExtensionsWithBody(ctx context.Context, userId string, eventId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	UsersEventsCreateExtensions(ctx context.Context, userId string, eventId string, body UsersEventsCreateExtensionsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UsersEventsExtensionsGetCount0041 request
	UsersEventsExtensionsGetCount0041(ctx context.Context, userId string, eventId string, params *UsersEventsExtensionsGetCount0041Params, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UsersEventsDeleteExtensions request
	UsersEventsDeleteExtensions(ctx context.Context, userId string, eventId string, extensionId string, params *UsersEventsDeleteExtensionsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UsersEventsGetExtensions request
	UsersEventsGetExtensions(ctx context.Context, userId string, eventId string, extensionId string, params *UsersEventsGetExtensionsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UsersEventsUpdateExtensionsWithBody request with any body
	UsersEventsUpdateExtensionsWithBody(ctx context.Context, userId string, eventId string, extensionId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	UsersEventsUpdateExtensions(ctx context.Context, userId string, eventId string, extensionId string, body UsersEventsUpdateExtensionsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UsersEventsListInstances request
	UsersEventsListInstances(ctx context.Context, userId string, eventId string, params *UsersEventsListInstancesParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UsersEventsInstancesGetCountF922 request
	UsersEventsInstancesGetCountF922(ctx context.Context, userId string, eventId string, params *UsersEventsInstancesGetCountF922Params, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UsersUserEventsEventInstancesDelta request
	UsersUserEventsEventInstancesDelta(ctx context.Context, userId string, eventId string, params *UsersUserEventsEventInstancesDeltaParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UsersEventsGetInstances request
	UsersEventsGetInstances(ctx context.Context, userId string, eventId string, eventId1 string, params *UsersEventsGetInstancesParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UsersEventsInstancesListAttachments request
	UsersEventsInstancesListAttachments(ctx context.Context, userId string, eventId string, eventId1 string, params *UsersEventsInstancesListAttachmentsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UsersEventsInstancesCreateAttachmentsWithBody request with any body
	UsersEventsInstancesCreateAttachmentsWithBody(ctx context.Context, userId string, eventId string, eventId1 string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	UsersEventsInstancesCreateAttachments(ctx context.Context, userId string, eventId string, eventId1 string, body UsersEventsInstancesCreateAttachmentsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UsersEventsInstancesAttachmentsGetCount3c02 request
	UsersEventsInstancesAttachmentsGetCount3c02(ctx context.Context, userId string, eventId string, eventId1 string, params *UsersEventsInstancesAttachmentsGetCount3c02Params, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UsersUserEventsEventInstancesEventAttachmentsCreateUploadSessionWithBody request with any body
	UsersUserEventsEventInstancesEventAttachmentsCreateUploadSessionWithBody(ctx context.Context, userId string, eventId string, eventId1 string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	UsersUserEventsEventInstancesEventAttachmentsCreateUploadSession(ctx context.Context, userId string, eventId string, eventId1 string, body UsersUserEventsEventInstancesEventAttachmentsCreateUploadSessionJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UsersEventsInstancesDeleteAttachments request
	UsersEventsInstancesDeleteAttachments(ctx context.Context, userId string, eventId string, eventId1 string, attachmentId string, params *UsersEventsInstancesDeleteAttachmentsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UsersEventsInstancesGetAttachments request
	UsersEventsInstancesGetAttachments(ctx context.Context, userId string, eventId string, eventId1 string, attachmentId string, params *UsersEventsInstancesGetAttachmentsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UsersEventsInstancesGetCalendar request
	UsersEventsInstancesGetCalendar(ctx context.Context, userId string, eventId string, eventId1 string, params *UsersEventsInstancesGetCalendarParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UsersEventsInstancesListExtensions request
	UsersEventsInstancesListExtensions(ctx context.Context, userId string, eventId string, eventId1 string, params *UsersEventsInstancesListExtensionsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UsersEventsInstancesCreateExtensionsWithBody request with any body
	UsersEventsInstancesCreateExtensionsWithBody(ctx context.Context, userId string, eventId string, eventId1 string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	UsersEventsInstancesCreateExtensions(ctx context.Context, userId string, eventId string, eventId1 string, body UsersEventsInstancesCreateExtensionsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UsersEventsInstancesExtensionsGetCount8eed request
	UsersEventsInstancesExtensionsGetCount8eed(ctx context.Context, userId string, eventId string, eventId1 string, params *UsersEventsInstancesExtensionsGetCount8eedParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UsersEventsInstancesDeleteExtensions request
	UsersEventsInstancesDeleteExtensions(ctx context.Context, userId string, eventId string, eventId1 string, extensionId string, params *UsersEventsInstancesDeleteExtensionsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UsersEventsInstancesGetExtensions request
	UsersEventsInstancesGetExtensions(ctx context.Context, userId string, eventId string, eventId1 string, extensionId string, params *UsersEventsInstancesGetExtensionsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UsersEventsInstancesUpdateExtensionsWithBody request with any body
	UsersEventsInstancesUpdateExtensionsWithBody(ctx context.Context, userId string, eventId string, eventId1 string, extensionId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	UsersEventsInstancesUpdateExtensions(ctx context.Context, userId string, eventId string, eventId1 string, extensionId string, body UsersEventsInstancesUpdateExtensionsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UsersUserEventsEventInstancesEventAcceptWithBody request with any body
	UsersUserEventsEventInstancesEventAcceptWithBody(ctx context.Context, userId string, eventId string, eventId1 string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	UsersUserEventsEventInstancesEventAccept(ctx context.Context, userId string, eventId string, eventId1 string, body UsersUserEventsEventInstancesEventAcceptJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UsersUserEventsEventInstancesEventCancelWithBody request with any body
	UsersUserEventsEventInstancesEventCancelWithBody(ctx context.Context, userId string, eventId string, eventId1 string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	UsersUserEventsEventInstancesEventCancel(ctx context.Context, userId string, eventId string, eventId1 string, body UsersUserEventsEventInstancesEventCancelJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UsersUserEventsEventInstancesEventDeclineWithBody request with any body
	UsersUserEventsEventInstancesEventDeclineWithBody(ctx context.Context, userId string, eventId string, eventId1 string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	UsersUserEventsEventInstancesEventDecline(ctx context.Context, userId string, eventId string, eventId1 string, body UsersUserEventsEventInstancesEventDeclineJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UsersUserEventsEventInstancesEventDismissReminder request
	UsersUserEventsEventInstancesEventDismissReminder(ctx context.Context, userId string, eventId string, eventId1 string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UsersUserEventsEventInstancesEventForwardWithBody request with any body
	UsersUserEventsEventInstancesEventForwardWithBody(ctx context.Context, userId string, eventId string, eventId1 string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	UsersUserEventsEventInstancesEventForward(ctx context.Context, userId string, eventId string, eventId1 string, body UsersUserEventsEventInstancesEventForwardJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UsersUserEventsEventInstancesEventSnoozeReminderWithBody request with any body
	UsersUserEventsEventInstancesEventSnoozeReminderWithBody(ctx context.Context, userId string, eventId string, eventId1 string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	UsersUserEventsEventInstancesEventSnoozeReminder(ctx context.Context, userId string, eventId string, eventId1 string, body UsersUserEventsEventInstancesEventSnoozeReminderJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UsersUserEventsEventInstancesEventTentativelyAcceptWithBody request with any body
	UsersUserEventsEventInstancesEventTentativelyAcceptWithBody(ctx context.Context, userId string, eventId string, eventId1 string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	UsersUserEventsEventInstancesEventTentativelyAccept(ctx context.Context, userId string, eventId string, eventId1 string, body UsersUserEventsEventInstancesEventTentativelyAcceptJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UsersUserEventsEventAcceptWithBody request with any body
	UsersUserEventsEventAcceptWithBody(ctx context.Context, userId string, eventId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	UsersUserEventsEventAccept(ctx context.Context, userId string, eventId string, body UsersUserEventsEventAcceptJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UsersUserEventsEventCancelWithBody request with any body
	UsersUserEventsEventCancelWithBody(ctx context.Context, userId string, eventId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	UsersUserEventsEventCancel(ctx context.Context, userId string, eventId string, body UsersUserEventsEventCancelJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UsersUserEventsEventDeclineWithBody request with any body
	UsersUserEventsEventDeclineWithBody(ctx context.Context, userId string, eventId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	UsersUserEventsEventDecline(ctx context.Context, userId string, eventId string, body UsersUserEventsEventDeclineJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UsersUserEventsEventDismissReminder request
	UsersUserEventsEventDismissReminder(ctx context.Context, userId string, eventId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UsersUserEventsEventForwardWithBody request with any body
	UsersUserEventsEventForwardWithBody(ctx context.Context, userId string, eventId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	UsersUserEventsEventForward(ctx context.Context, userId string, eventId string, body UsersUserEventsEventForwardJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UsersUserEventsEventSnoozeReminderWithBody request with any body
	UsersUserEventsEventSnoozeReminderWithBody(ctx context.Context, userId string, eventId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	UsersUserEventsEventSnoozeReminder(ctx context.Context, userId string, eventId string, body UsersUserEventsEventSnoozeReminderJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UsersUserEventsEventTentativelyAcceptWithBody request with any body
	UsersUserEventsEventTentativelyAcceptWithBody(ctx context.Context, userId string, eventId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	UsersUserEventsEventTentativelyAccept(ctx context.Context, userId string, eventId string, body UsersUserEventsEventTentativelyAcceptJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UsersListExtensions request
	UsersListExtensions(ctx context.Context, userId string, params *UsersListExtensionsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UsersCreateExtensionsWithBody request with any body
	UsersCreateExtensionsWithBody(ctx context.Context, userId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	UsersCreateExtensions(ctx context.Context, userId string, body UsersCreateExtensionsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UsersExtensionsGetCount4b1c request
	UsersExtensionsGetCount4b1c(ctx context.Context, userId string, params *UsersExtensionsGetCount4b1cParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UsersDeleteExtensions request
	UsersDeleteExtensions(ctx context.Context, userId string, extensionId string, params *UsersDeleteExtensionsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UsersGetExtensions request
	UsersGetExtensions(ctx context.Context, userId string, extensionId string, params *UsersGetExtensionsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UsersUpdateExtensionsWithBody request with any body
	UsersUpdateExtensionsWithBody(ctx context.Context, userId string, extensionId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	UsersUpdateExtensions(ctx context.Context, userId string, extensionId string, body UsersUpdateExtensionsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)
}

func (c *Client) UsersUserListUser(ctx context.Context, params *UsersUserListUserParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUsersUserListUserRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UsersUserCreateUserWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUsersUserCreateUserRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UsersUserCreateUser(ctx context.Context, body UsersUserCreateUserJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUsersUserCreateUserRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UsersUserDeleteUser(ctx context.Context, userId string, params *UsersUserDeleteUserParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUsersUserDeleteUserRequest(c.Server, userId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UsersUserGetUser(ctx context.Context, userId string, params *UsersUserGetUserParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUsersUserGetUserRequest(c.Server, userId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UsersUserUpdateUserWithBody(ctx context.Context, userId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUsersUserUpdateUserRequestWithBody(c.Server, userId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UsersUserUpdateUser(ctx context.Context, userId string, body UsersUserUpdateUserJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUsersUserUpdateUserRequest(c.Server, userId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UsersListEvents(ctx context.Context, userId string, params *UsersListEventsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUsersListEventsRequest(c.Server, userId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UsersCreateEventsWithBody(ctx context.Context, userId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUsersCreateEventsRequestWithBody(c.Server, userId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UsersCreateEvents(ctx context.Context, userId string, body UsersCreateEventsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUsersCreateEventsRequest(c.Server, userId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UsersEventsGetCountD443(ctx context.Context, userId string, params *UsersEventsGetCountD443Params, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUsersEventsGetCountD443Request(c.Server, userId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UsersUserEventsDelta(ctx context.Context, userId string, params *UsersUserEventsDeltaParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUsersUserEventsDeltaRequest(c.Server, userId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UsersDeleteEvents(ctx context.Context, userId string, eventId string, params *UsersDeleteEventsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUsersDeleteEventsRequest(c.Server, userId, eventId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UsersGetEvents(ctx context.Context, userId string, eventId string, params *UsersGetEventsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUsersGetEventsRequest(c.Server, userId, eventId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UsersUpdateEventsWithBody(ctx context.Context, userId string, eventId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUsersUpdateEventsRequestWithBody(c.Server, userId, eventId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UsersUpdateEvents(ctx context.Context, userId string, eventId string, body UsersUpdateEventsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUsersUpdateEventsRequest(c.Server, userId, eventId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UsersEventsListAttachments(ctx context.Context, userId string, eventId string, params *UsersEventsListAttachmentsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUsersEventsListAttachmentsRequest(c.Server, userId, eventId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UsersEventsCreateAttachmentsWithBody(ctx context.Context, userId string, eventId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUsersEventsCreateAttachmentsRequestWithBody(c.Server, userId, eventId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UsersEventsCreateAttachments(ctx context.Context, userId string, eventId string, body UsersEventsCreateAttachmentsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUsersEventsCreateAttachmentsRequest(c.Server, userId, eventId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UsersEventsAttachmentsGetCount711f(ctx context.Context, userId string, eventId string, params *UsersEventsAttachmentsGetCount711fParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUsersEventsAttachmentsGetCount711fRequest(c.Server, userId, eventId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UsersUserEventsEventAttachmentsCreateUploadSessionWithBody(ctx context.Context, userId string, eventId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUsersUserEventsEventAttachmentsCreateUploadSessionRequestWithBody(c.Server, userId, eventId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UsersUserEventsEventAttachmentsCreateUploadSession(ctx context.Context, userId string, eventId string, body UsersUserEventsEventAttachmentsCreateUploadSessionJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUsersUserEventsEventAttachmentsCreateUploadSessionRequest(c.Server, userId, eventId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UsersEventsDeleteAttachments(ctx context.Context, userId string, eventId string, attachmentId string, params *UsersEventsDeleteAttachmentsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUsersEventsDeleteAttachmentsRequest(c.Server, userId, eventId, attachmentId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UsersEventsGetAttachments(ctx context.Context, userId string, eventId string, attachmentId string, params *UsersEventsGetAttachmentsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUsersEventsGetAttachmentsRequest(c.Server, userId, eventId, attachmentId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UsersEventsGetCalendar(ctx context.Context, userId string, eventId string, params *UsersEventsGetCalendarParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUsersEventsGetCalendarRequest(c.Server, userId, eventId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UsersEventsListExtensions(ctx context.Context, userId string, eventId string, params *UsersEventsListExtensionsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUsersEventsListExtensionsRequest(c.Server, userId, eventId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UsersEventsCreateExtensionsWithBody(ctx context.Context, userId string, eventId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUsersEventsCreateExtensionsRequestWithBody(c.Server, userId, eventId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UsersEventsCreateExtensions(ctx context.Context, userId string, eventId string, body UsersEventsCreateExtensionsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUsersEventsCreateExtensionsRequest(c.Server, userId, eventId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UsersEventsExtensionsGetCount0041(ctx context.Context, userId string, eventId string, params *UsersEventsExtensionsGetCount0041Params, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUsersEventsExtensionsGetCount0041Request(c.Server, userId, eventId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UsersEventsDeleteExtensions(ctx context.Context, userId string, eventId string, extensionId string, params *UsersEventsDeleteExtensionsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUsersEventsDeleteExtensionsRequest(c.Server, userId, eventId, extensionId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UsersEventsGetExtensions(ctx context.Context, userId string, eventId string, extensionId string, params *UsersEventsGetExtensionsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUsersEventsGetExtensionsRequest(c.Server, userId, eventId, extensionId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UsersEventsUpdateExtensionsWithBody(ctx context.Context, userId string, eventId string, extensionId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUsersEventsUpdateExtensionsRequestWithBody(c.Server, userId, eventId, extensionId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UsersEventsUpdateExtensions(ctx context.Context, userId string, eventId string, extensionId string, body UsersEventsUpdateExtensionsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUsersEventsUpdateExtensionsRequest(c.Server, userId, eventId, extensionId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UsersEventsListInstances(ctx context.Context, userId string, eventId string, params *UsersEventsListInstancesParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUsersEventsListInstancesRequest(c.Server, userId, eventId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UsersEventsInstancesGetCountF922(ctx context.Context, userId string, eventId string, params *UsersEventsInstancesGetCountF922Params, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUsersEventsInstancesGetCountF922Request(c.Server, userId, eventId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UsersUserEventsEventInstancesDelta(ctx context.Context, userId string, eventId string, params *UsersUserEventsEventInstancesDeltaParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUsersUserEventsEventInstancesDeltaRequest(c.Server, userId, eventId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UsersEventsGetInstances(ctx context.Context, userId string, eventId string, eventId1 string, params *UsersEventsGetInstancesParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUsersEventsGetInstancesRequest(c.Server, userId, eventId, eventId1, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UsersEventsInstancesListAttachments(ctx context.Context, userId string, eventId string, eventId1 string, params *UsersEventsInstancesListAttachmentsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUsersEventsInstancesListAttachmentsRequest(c.Server, userId, eventId, eventId1, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UsersEventsInstancesCreateAttachmentsWithBody(ctx context.Context, userId string, eventId string, eventId1 string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUsersEventsInstancesCreateAttachmentsRequestWithBody(c.Server, userId, eventId, eventId1, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UsersEventsInstancesCreateAttachments(ctx context.Context, userId string, eventId string, eventId1 string, body UsersEventsInstancesCreateAttachmentsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUsersEventsInstancesCreateAttachmentsRequest(c.Server, userId, eventId, eventId1, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UsersEventsInstancesAttachmentsGetCount3c02(ctx context.Context, userId string, eventId string, eventId1 string, params *UsersEventsInstancesAttachmentsGetCount3c02Params, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUsersEventsInstancesAttachmentsGetCount3c02Request(c.Server, userId, eventId, eventId1, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UsersUserEventsEventInstancesEventAttachmentsCreateUploadSessionWithBody(ctx context.Context, userId string, eventId string, eventId1 string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUsersUserEventsEventInstancesEventAttachmentsCreateUploadSessionRequestWithBody(c.Server, userId, eventId, eventId1, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UsersUserEventsEventInstancesEventAttachmentsCreateUploadSession(ctx context.Context, userId string, eventId string, eventId1 string, body UsersUserEventsEventInstancesEventAttachmentsCreateUploadSessionJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUsersUserEventsEventInstancesEventAttachmentsCreateUploadSessionRequest(c.Server, userId, eventId, eventId1, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UsersEventsInstancesDeleteAttachments(ctx context.Context, userId string, eventId string, eventId1 string, attachmentId string, params *UsersEventsInstancesDeleteAttachmentsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUsersEventsInstancesDeleteAttachmentsRequest(c.Server, userId, eventId, eventId1, attachmentId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UsersEventsInstancesGetAttachments(ctx context.Context, userId string, eventId string, eventId1 string, attachmentId string, params *UsersEventsInstancesGetAttachmentsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUsersEventsInstancesGetAttachmentsRequest(c.Server, userId, eventId, eventId1, attachmentId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UsersEventsInstancesGetCalendar(ctx context.Context, userId string, eventId string, eventId1 string, params *UsersEventsInstancesGetCalendarParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUsersEventsInstancesGetCalendarRequest(c.Server, userId, eventId, eventId1, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UsersEventsInstancesListExtensions(ctx context.Context, userId string, eventId string, eventId1 string, params *UsersEventsInstancesListExtensionsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUsersEventsInstancesListExtensionsRequest(c.Server, userId, eventId, eventId1, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UsersEventsInstancesCreateExtensionsWithBody(ctx context.Context, userId string, eventId string, eventId1 string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUsersEventsInstancesCreateExtensionsRequestWithBody(c.Server, userId, eventId, eventId1, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UsersEventsInstancesCreateExtensions(ctx context.Context, userId string, eventId string, eventId1 string, body UsersEventsInstancesCreateExtensionsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUsersEventsInstancesCreateExtensionsRequest(c.Server, userId, eventId, eventId1, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UsersEventsInstancesExtensionsGetCount8eed(ctx context.Context, userId string, eventId string, eventId1 string, params *UsersEventsInstancesExtensionsGetCount8eedParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUsersEventsInstancesExtensionsGetCount8eedRequest(c.Server, userId, eventId, eventId1, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UsersEventsInstancesDeleteExtensions(ctx context.Context, userId string, eventId string, eventId1 string, extensionId string, params *UsersEventsInstancesDeleteExtensionsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUsersEventsInstancesDeleteExtensionsRequest(c.Server, userId, eventId, eventId1, extensionId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UsersEventsInstancesGetExtensions(ctx context.Context, userId string, eventId string, eventId1 string, extensionId string, params *UsersEventsInstancesGetExtensionsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUsersEventsInstancesGetExtensionsRequest(c.Server, userId, eventId, eventId1, extensionId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UsersEventsInstancesUpdateExtensionsWithBody(ctx context.Context, userId string, eventId string, eventId1 string, extensionId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUsersEventsInstancesUpdateExtensionsRequestWithBody(c.Server, userId, eventId, eventId1, extensionId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UsersEventsInstancesUpdateExtensions(ctx context.Context, userId string, eventId string, eventId1 string, extensionId string, body UsersEventsInstancesUpdateExtensionsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUsersEventsInstancesUpdateExtensionsRequest(c.Server, userId, eventId, eventId1, extensionId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UsersUserEventsEventInstancesEventAcceptWithBody(ctx context.Context, userId string, eventId string, eventId1 string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUsersUserEventsEventInstancesEventAcceptRequestWithBody(c.Server, userId, eventId, eventId1, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UsersUserEventsEventInstancesEventAccept(ctx context.Context, userId string, eventId string, eventId1 string, body UsersUserEventsEventInstancesEventAcceptJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUsersUserEventsEventInstancesEventAcceptRequest(c.Server, userId, eventId, eventId1, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UsersUserEventsEventInstancesEventCancelWithBody(ctx context.Context, userId string, eventId string, eventId1 string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUsersUserEventsEventInstancesEventCancelRequestWithBody(c.Server, userId, eventId, eventId1, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UsersUserEventsEventInstancesEventCancel(ctx context.Context, userId string, eventId string, eventId1 string, body UsersUserEventsEventInstancesEventCancelJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUsersUserEventsEventInstancesEventCancelRequest(c.Server, userId, eventId, eventId1, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UsersUserEventsEventInstancesEventDeclineWithBody(ctx context.Context, userId string, eventId string, eventId1 string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUsersUserEventsEventInstancesEventDeclineRequestWithBody(c.Server, userId, eventId, eventId1, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UsersUserEventsEventInstancesEventDecline(ctx context.Context, userId string, eventId string, eventId1 string, body UsersUserEventsEventInstancesEventDeclineJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUsersUserEventsEventInstancesEventDeclineRequest(c.Server, userId, eventId, eventId1, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UsersUserEventsEventInstancesEventDismissReminder(ctx context.Context, userId string, eventId string, eventId1 string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUsersUserEventsEventInstancesEventDismissReminderRequest(c.Server, userId, eventId, eventId1)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UsersUserEventsEventInstancesEventForwardWithBody(ctx context.Context, userId string, eventId string, eventId1 string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUsersUserEventsEventInstancesEventForwardRequestWithBody(c.Server, userId, eventId, eventId1, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UsersUserEventsEventInstancesEventForward(ctx context.Context, userId string, eventId string, eventId1 string, body UsersUserEventsEventInstancesEventForwardJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUsersUserEventsEventInstancesEventForwardRequest(c.Server, userId, eventId, eventId1, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UsersUserEventsEventInstancesEventSnoozeReminderWithBody(ctx context.Context, userId string, eventId string, eventId1 string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUsersUserEventsEventInstancesEventSnoozeReminderRequestWithBody(c.Server, userId, eventId, eventId1, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UsersUserEventsEventInstancesEventSnoozeReminder(ctx context.Context, userId string, eventId string, eventId1 string, body UsersUserEventsEventInstancesEventSnoozeReminderJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUsersUserEventsEventInstancesEventSnoozeReminderRequest(c.Server, userId, eventId, eventId1, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UsersUserEventsEventInstancesEventTentativelyAcceptWithBody(ctx context.Context, userId string, eventId string, eventId1 string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUsersUserEventsEventInstancesEventTentativelyAcceptRequestWithBody(c.Server, userId, eventId, eventId1, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UsersUserEventsEventInstancesEventTentativelyAccept(ctx context.Context, userId string, eventId string, eventId1 string, body UsersUserEventsEventInstancesEventTentativelyAcceptJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUsersUserEventsEventInstancesEventTentativelyAcceptRequest(c.Server, userId, eventId, eventId1, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UsersUserEventsEventAcceptWithBody(ctx context.Context, userId string, eventId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUsersUserEventsEventAcceptRequestWithBody(c.Server, userId, eventId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UsersUserEventsEventAccept(ctx context.Context, userId string, eventId string, body UsersUserEventsEventAcceptJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUsersUserEventsEventAcceptRequest(c.Server, userId, eventId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UsersUserEventsEventCancelWithBody(ctx context.Context, userId string, eventId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUsersUserEventsEventCancelRequestWithBody(c.Server, userId, eventId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UsersUserEventsEventCancel(ctx context.Context, userId string, eventId string, body UsersUserEventsEventCancelJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUsersUserEventsEventCancelRequest(c.Server, userId, eventId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UsersUserEventsEventDeclineWithBody(ctx context.Context, userId string, eventId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUsersUserEventsEventDeclineRequestWithBody(c.Server, userId, eventId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UsersUserEventsEventDecline(ctx context.Context, userId string, eventId string, body UsersUserEventsEventDeclineJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUsersUserEventsEventDeclineRequest(c.Server, userId, eventId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UsersUserEventsEventDismissReminder(ctx context.Context, userId string, eventId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUsersUserEventsEventDismissReminderRequest(c.Server, userId, eventId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UsersUserEventsEventForwardWithBody(ctx context.Context, userId string, eventId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUsersUserEventsEventForwardRequestWithBody(c.Server, userId, eventId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UsersUserEventsEventForward(ctx context.Context, userId string, eventId string, body UsersUserEventsEventForwardJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUsersUserEventsEventForwardRequest(c.Server, userId, eventId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UsersUserEventsEventSnoozeReminderWithBody(ctx context.Context, userId string, eventId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUsersUserEventsEventSnoozeReminderRequestWithBody(c.Server, userId, eventId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UsersUserEventsEventSnoozeReminder(ctx context.Context, userId string, eventId string, body UsersUserEventsEventSnoozeReminderJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUsersUserEventsEventSnoozeReminderRequest(c.Server, userId, eventId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UsersUserEventsEventTentativelyAcceptWithBody(ctx context.Context, userId string, eventId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUsersUserEventsEventTentativelyAcceptRequestWithBody(c.Server, userId, eventId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UsersUserEventsEventTentativelyAccept(ctx context.Context, userId string, eventId string, body UsersUserEventsEventTentativelyAcceptJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUsersUserEventsEventTentativelyAcceptRequest(c.Server, userId, eventId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UsersListExtensions(ctx context.Context, userId string, params *UsersListExtensionsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUsersListExtensionsRequest(c.Server, userId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UsersCreateExtensionsWithBody(ctx context.Context, userId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUsersCreateExtensionsRequestWithBody(c.Server, userId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UsersCreateExtensions(ctx context.Context, userId string, body UsersCreateExtensionsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUsersCreateExtensionsRequest(c.Server, userId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UsersExtensionsGetCount4b1c(ctx context.Context, userId string, params *UsersExtensionsGetCount4b1cParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUsersExtensionsGetCount4b1cRequest(c.Server, userId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UsersDeleteExtensions(ctx context.Context, userId string, extensionId string, params *UsersDeleteExtensionsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUsersDeleteExtensionsRequest(c.Server, userId, extensionId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UsersGetExtensions(ctx context.Context, userId string, extensionId string, params *UsersGetExtensionsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUsersGetExtensionsRequest(c.Server, userId, extensionId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UsersUpdateExtensionsWithBody(ctx context.Context, userId string, extensionId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUsersUpdateExtensionsRequestWithBody(c.Server, userId, extensionId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UsersUpdateExtensions(ctx context.Context, userId string, extensionId string, body UsersUpdateExtensionsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUsersUpdateExtensionsRequest(c.Server, userId, extensionId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

// NewUsersUserListUserRequest generates requests for UsersUserListUser
func NewUsersUserListUserRequest(server string, params *UsersUserListUserParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/users")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Top != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "$top", runtime.ParamLocationQuery, *params.Top); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Search != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "$search", runtime.ParamLocationQuery, *params.Search); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Filter != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "$filter", runtime.ParamLocationQuery, *params.Filter); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Count != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "$count", runtime.ParamLocationQuery, *params.Count); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Orderby != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "$orderby", runtime.ParamLocationQuery, *params.Orderby); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Select != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "$select", runtime.ParamLocationQuery, *params.Select); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Expand != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "$expand", runtime.ParamLocationQuery, *params.Expand); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		if params.ConsistencyLevel != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "ConsistencyLevel", runtime.ParamLocationHeader, *params.ConsistencyLevel)
			if err != nil {
				return nil, err
			}

			req.Header.Set("ConsistencyLevel", headerParam0)
		}

	}

	return req, nil
}

// NewUsersUserCreateUserRequest calls the generic UsersUserCreateUser builder with application/json body
func NewUsersUserCreateUserRequest(server string, body UsersUserCreateUserJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUsersUserCreateUserRequestWithBody(server, "application/json", bodyReader)
}

// NewUsersUserCreateUserRequestWithBody generates requests for UsersUserCreateUser with any type of body
func NewUsersUserCreateUserRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/users")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewUsersUserDeleteUserRequest generates requests for UsersUserDeleteUser
func NewUsersUserDeleteUserRequest(server string, userId string, params *UsersUserDeleteUserParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "user-id", runtime.ParamLocationPath, userId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/users/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		if params.IfMatch != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "If-Match", runtime.ParamLocationHeader, *params.IfMatch)
			if err != nil {
				return nil, err
			}

			req.Header.Set("If-Match", headerParam0)
		}

	}

	return req, nil
}

// NewUsersUserGetUserRequest generates requests for UsersUserGetUser
func NewUsersUserGetUserRequest(server string, userId string, params *UsersUserGetUserParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "user-id", runtime.ParamLocationPath, userId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/users/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Select != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "$select", runtime.ParamLocationQuery, *params.Select); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Expand != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "$expand", runtime.ParamLocationQuery, *params.Expand); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUsersUserUpdateUserRequest calls the generic UsersUserUpdateUser builder with application/json body
func NewUsersUserUpdateUserRequest(server string, userId string, body UsersUserUpdateUserJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUsersUserUpdateUserRequestWithBody(server, userId, "application/json", bodyReader)
}

// NewUsersUserUpdateUserRequestWithBody generates requests for UsersUserUpdateUser with any type of body
func NewUsersUserUpdateUserRequestWithBody(server string, userId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "user-id", runtime.ParamLocationPath, userId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/users/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewUsersListEventsRequest generates requests for UsersListEvents
func NewUsersListEventsRequest(server string, userId string, params *UsersListEventsParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "user-id", runtime.ParamLocationPath, userId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/users/%s/events", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Top != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "$top", runtime.ParamLocationQuery, *params.Top); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Skip != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "$skip", runtime.ParamLocationQuery, *params.Skip); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Filter != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "$filter", runtime.ParamLocationQuery, *params.Filter); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Count != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "$count", runtime.ParamLocationQuery, *params.Count); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Orderby != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "$orderby", runtime.ParamLocationQuery, *params.Orderby); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Select != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "$select", runtime.ParamLocationQuery, *params.Select); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Expand != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "$expand", runtime.ParamLocationQuery, *params.Expand); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUsersCreateEventsRequest calls the generic UsersCreateEvents builder with application/json body
func NewUsersCreateEventsRequest(server string, userId string, body UsersCreateEventsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUsersCreateEventsRequestWithBody(server, userId, "application/json", bodyReader)
}

// NewUsersCreateEventsRequestWithBody generates requests for UsersCreateEvents with any type of body
func NewUsersCreateEventsRequestWithBody(server string, userId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "user-id", runtime.ParamLocationPath, userId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/users/%s/events", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewUsersEventsGetCountD443Request generates requests for UsersEventsGetCountD443
func NewUsersEventsGetCountD443Request(server string, userId string, params *UsersEventsGetCountD443Params) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "user-id", runtime.ParamLocationPath, userId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/users/%s/events/$count", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Filter != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "$filter", runtime.ParamLocationQuery, *params.Filter); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUsersUserEventsDeltaRequest generates requests for UsersUserEventsDelta
func NewUsersUserEventsDeltaRequest(server string, userId string, params *UsersUserEventsDeltaParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "user-id", runtime.ParamLocationPath, userId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/users/%s/events/microsoft.graph.delta()", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "startDateTime", runtime.ParamLocationQuery, params.StartDateTime); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "endDateTime", runtime.ParamLocationQuery, params.EndDateTime); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if params.Top != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "$top", runtime.ParamLocationQuery, *params.Top); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Skip != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "$skip", runtime.ParamLocationQuery, *params.Skip); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Search != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "$search", runtime.ParamLocationQuery, *params.Search); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Filter != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "$filter", runtime.ParamLocationQuery, *params.Filter); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Count != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "$count", runtime.ParamLocationQuery, *params.Count); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Select != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "$select", runtime.ParamLocationQuery, *params.Select); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Orderby != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "$orderby", runtime.ParamLocationQuery, *params.Orderby); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUsersDeleteEventsRequest generates requests for UsersDeleteEvents
func NewUsersDeleteEventsRequest(server string, userId string, eventId string, params *UsersDeleteEventsParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "user-id", runtime.ParamLocationPath, userId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "event-id", runtime.ParamLocationPath, eventId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/users/%s/events/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		if params.IfMatch != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "If-Match", runtime.ParamLocationHeader, *params.IfMatch)
			if err != nil {
				return nil, err
			}

			req.Header.Set("If-Match", headerParam0)
		}

	}

	return req, nil
}

// NewUsersGetEventsRequest generates requests for UsersGetEvents
func NewUsersGetEventsRequest(server string, userId string, eventId string, params *UsersGetEventsParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "user-id", runtime.ParamLocationPath, userId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "event-id", runtime.ParamLocationPath, eventId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/users/%s/events/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Select != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "$select", runtime.ParamLocationQuery, *params.Select); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Expand != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "$expand", runtime.ParamLocationQuery, *params.Expand); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUsersUpdateEventsRequest calls the generic UsersUpdateEvents builder with application/json body
func NewUsersUpdateEventsRequest(server string, userId string, eventId string, body UsersUpdateEventsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUsersUpdateEventsRequestWithBody(server, userId, eventId, "application/json", bodyReader)
}

// NewUsersUpdateEventsRequestWithBody generates requests for UsersUpdateEvents with any type of body
func NewUsersUpdateEventsRequestWithBody(server string, userId string, eventId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "user-id", runtime.ParamLocationPath, userId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "event-id", runtime.ParamLocationPath, eventId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/users/%s/events/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewUsersEventsListAttachmentsRequest generates requests for UsersEventsListAttachments
func NewUsersEventsListAttachmentsRequest(server string, userId string, eventId string, params *UsersEventsListAttachmentsParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "user-id", runtime.ParamLocationPath, userId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "event-id", runtime.ParamLocationPath, eventId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/users/%s/events/%s/attachments", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Top != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "$top", runtime.ParamLocationQuery, *params.Top); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Skip != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "$skip", runtime.ParamLocationQuery, *params.Skip); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Filter != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "$filter", runtime.ParamLocationQuery, *params.Filter); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Count != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "$count", runtime.ParamLocationQuery, *params.Count); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Orderby != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "$orderby", runtime.ParamLocationQuery, *params.Orderby); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Select != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "$select", runtime.ParamLocationQuery, *params.Select); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Expand != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "$expand", runtime.ParamLocationQuery, *params.Expand); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUsersEventsCreateAttachmentsRequest calls the generic UsersEventsCreateAttachments builder with application/json body
func NewUsersEventsCreateAttachmentsRequest(server string, userId string, eventId string, body UsersEventsCreateAttachmentsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUsersEventsCreateAttachmentsRequestWithBody(server, userId, eventId, "application/json", bodyReader)
}

// NewUsersEventsCreateAttachmentsRequestWithBody generates requests for UsersEventsCreateAttachments with any type of body
func NewUsersEventsCreateAttachmentsRequestWithBody(server string, userId string, eventId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "user-id", runtime.ParamLocationPath, userId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "event-id", runtime.ParamLocationPath, eventId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/users/%s/events/%s/attachments", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewUsersEventsAttachmentsGetCount711fRequest generates requests for UsersEventsAttachmentsGetCount711f
func NewUsersEventsAttachmentsGetCount711fRequest(server string, userId string, eventId string, params *UsersEventsAttachmentsGetCount711fParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "user-id", runtime.ParamLocationPath, userId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "event-id", runtime.ParamLocationPath, eventId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/users/%s/events/%s/attachments/$count", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Filter != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "$filter", runtime.ParamLocationQuery, *params.Filter); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUsersUserEventsEventAttachmentsCreateUploadSessionRequest calls the generic UsersUserEventsEventAttachmentsCreateUploadSession builder with application/json body
func NewUsersUserEventsEventAttachmentsCreateUploadSessionRequest(server string, userId string, eventId string, body UsersUserEventsEventAttachmentsCreateUploadSessionJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUsersUserEventsEventAttachmentsCreateUploadSessionRequestWithBody(server, userId, eventId, "application/json", bodyReader)
}

// NewUsersUserEventsEventAttachmentsCreateUploadSessionRequestWithBody generates requests for UsersUserEventsEventAttachmentsCreateUploadSession with any type of body
func NewUsersUserEventsEventAttachmentsCreateUploadSessionRequestWithBody(server string, userId string, eventId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "user-id", runtime.ParamLocationPath, userId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "event-id", runtime.ParamLocationPath, eventId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/users/%s/events/%s/attachments/microsoft.graph.createUploadSession", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewUsersEventsDeleteAttachmentsRequest generates requests for UsersEventsDeleteAttachments
func NewUsersEventsDeleteAttachmentsRequest(server string, userId string, eventId string, attachmentId string, params *UsersEventsDeleteAttachmentsParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "user-id", runtime.ParamLocationPath, userId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "event-id", runtime.ParamLocationPath, eventId)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "attachment-id", runtime.ParamLocationPath, attachmentId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/users/%s/events/%s/attachments/%s", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		if params.IfMatch != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "If-Match", runtime.ParamLocationHeader, *params.IfMatch)
			if err != nil {
				return nil, err
			}

			req.Header.Set("If-Match", headerParam0)
		}

	}

	return req, nil
}

// NewUsersEventsGetAttachmentsRequest generates requests for UsersEventsGetAttachments
func NewUsersEventsGetAttachmentsRequest(server string, userId string, eventId string, attachmentId string, params *UsersEventsGetAttachmentsParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "user-id", runtime.ParamLocationPath, userId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "event-id", runtime.ParamLocationPath, eventId)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "attachment-id", runtime.ParamLocationPath, attachmentId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/users/%s/events/%s/attachments/%s", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Select != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "$select", runtime.ParamLocationQuery, *params.Select); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Expand != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "$expand", runtime.ParamLocationQuery, *params.Expand); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUsersEventsGetCalendarRequest generates requests for UsersEventsGetCalendar
func NewUsersEventsGetCalendarRequest(server string, userId string, eventId string, params *UsersEventsGetCalendarParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "user-id", runtime.ParamLocationPath, userId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "event-id", runtime.ParamLocationPath, eventId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/users/%s/events/%s/calendar", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Select != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "$select", runtime.ParamLocationQuery, *params.Select); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUsersEventsListExtensionsRequest generates requests for UsersEventsListExtensions
func NewUsersEventsListExtensionsRequest(server string, userId string, eventId string, params *UsersEventsListExtensionsParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "user-id", runtime.ParamLocationPath, userId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "event-id", runtime.ParamLocationPath, eventId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/users/%s/events/%s/extensions", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Top != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "$top", runtime.ParamLocationQuery, *params.Top); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Skip != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "$skip", runtime.ParamLocationQuery, *params.Skip); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Filter != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "$filter", runtime.ParamLocationQuery, *params.Filter); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Count != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "$count", runtime.ParamLocationQuery, *params.Count); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Orderby != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "$orderby", runtime.ParamLocationQuery, *params.Orderby); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Select != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "$select", runtime.ParamLocationQuery, *params.Select); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Expand != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "$expand", runtime.ParamLocationQuery, *params.Expand); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUsersEventsCreateExtensionsRequest calls the generic UsersEventsCreateExtensions builder with application/json body
func NewUsersEventsCreateExtensionsRequest(server string, userId string, eventId string, body UsersEventsCreateExtensionsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUsersEventsCreateExtensionsRequestWithBody(server, userId, eventId, "application/json", bodyReader)
}

// NewUsersEventsCreateExtensionsRequestWithBody generates requests for UsersEventsCreateExtensions with any type of body
func NewUsersEventsCreateExtensionsRequestWithBody(server string, userId string, eventId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "user-id", runtime.ParamLocationPath, userId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "event-id", runtime.ParamLocationPath, eventId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/users/%s/events/%s/extensions", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewUsersEventsExtensionsGetCount0041Request generates requests for UsersEventsExtensionsGetCount0041
func NewUsersEventsExtensionsGetCount0041Request(server string, userId string, eventId string, params *UsersEventsExtensionsGetCount0041Params) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "user-id", runtime.ParamLocationPath, userId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "event-id", runtime.ParamLocationPath, eventId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/users/%s/events/%s/extensions/$count", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Filter != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "$filter", runtime.ParamLocationQuery, *params.Filter); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUsersEventsDeleteExtensionsRequest generates requests for UsersEventsDeleteExtensions
func NewUsersEventsDeleteExtensionsRequest(server string, userId string, eventId string, extensionId string, params *UsersEventsDeleteExtensionsParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "user-id", runtime.ParamLocationPath, userId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "event-id", runtime.ParamLocationPath, eventId)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "extension-id", runtime.ParamLocationPath, extensionId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/users/%s/events/%s/extensions/%s", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		if params.IfMatch != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "If-Match", runtime.ParamLocationHeader, *params.IfMatch)
			if err != nil {
				return nil, err
			}

			req.Header.Set("If-Match", headerParam0)
		}

	}

	return req, nil
}

// NewUsersEventsGetExtensionsRequest generates requests for UsersEventsGetExtensions
func NewUsersEventsGetExtensionsRequest(server string, userId string, eventId string, extensionId string, params *UsersEventsGetExtensionsParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "user-id", runtime.ParamLocationPath, userId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "event-id", runtime.ParamLocationPath, eventId)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "extension-id", runtime.ParamLocationPath, extensionId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/users/%s/events/%s/extensions/%s", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Select != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "$select", runtime.ParamLocationQuery, *params.Select); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Expand != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "$expand", runtime.ParamLocationQuery, *params.Expand); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUsersEventsUpdateExtensionsRequest calls the generic UsersEventsUpdateExtensions builder with application/json body
func NewUsersEventsUpdateExtensionsRequest(server string, userId string, eventId string, extensionId string, body UsersEventsUpdateExtensionsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUsersEventsUpdateExtensionsRequestWithBody(server, userId, eventId, extensionId, "application/json", bodyReader)
}

// NewUsersEventsUpdateExtensionsRequestWithBody generates requests for UsersEventsUpdateExtensions with any type of body
func NewUsersEventsUpdateExtensionsRequestWithBody(server string, userId string, eventId string, extensionId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "user-id", runtime.ParamLocationPath, userId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "event-id", runtime.ParamLocationPath, eventId)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "extension-id", runtime.ParamLocationPath, extensionId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/users/%s/events/%s/extensions/%s", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewUsersEventsListInstancesRequest generates requests for UsersEventsListInstances
func NewUsersEventsListInstancesRequest(server string, userId string, eventId string, params *UsersEventsListInstancesParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "user-id", runtime.ParamLocationPath, userId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "event-id", runtime.ParamLocationPath, eventId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/users/%s/events/%s/instances", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "startDateTime", runtime.ParamLocationQuery, params.StartDateTime); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "endDateTime", runtime.ParamLocationQuery, params.EndDateTime); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if params.Top != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "$top", runtime.ParamLocationQuery, *params.Top); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Skip != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "$skip", runtime.ParamLocationQuery, *params.Skip); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Filter != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "$filter", runtime.ParamLocationQuery, *params.Filter); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Count != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "$count", runtime.ParamLocationQuery, *params.Count); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Orderby != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "$orderby", runtime.ParamLocationQuery, *params.Orderby); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Select != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "$select", runtime.ParamLocationQuery, *params.Select); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUsersEventsInstancesGetCountF922Request generates requests for UsersEventsInstancesGetCountF922
func NewUsersEventsInstancesGetCountF922Request(server string, userId string, eventId string, params *UsersEventsInstancesGetCountF922Params) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "user-id", runtime.ParamLocationPath, userId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "event-id", runtime.ParamLocationPath, eventId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/users/%s/events/%s/instances/$count", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Filter != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "$filter", runtime.ParamLocationQuery, *params.Filter); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUsersUserEventsEventInstancesDeltaRequest generates requests for UsersUserEventsEventInstancesDelta
func NewUsersUserEventsEventInstancesDeltaRequest(server string, userId string, eventId string, params *UsersUserEventsEventInstancesDeltaParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "user-id", runtime.ParamLocationPath, userId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "event-id", runtime.ParamLocationPath, eventId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/users/%s/events/%s/instances/microsoft.graph.delta()", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "startDateTime", runtime.ParamLocationQuery, params.StartDateTime); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "endDateTime", runtime.ParamLocationQuery, params.EndDateTime); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if params.Top != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "$top", runtime.ParamLocationQuery, *params.Top); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Skip != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "$skip", runtime.ParamLocationQuery, *params.Skip); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Search != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "$search", runtime.ParamLocationQuery, *params.Search); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Filter != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "$filter", runtime.ParamLocationQuery, *params.Filter); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Count != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "$count", runtime.ParamLocationQuery, *params.Count); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Select != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "$select", runtime.ParamLocationQuery, *params.Select); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Orderby != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "$orderby", runtime.ParamLocationQuery, *params.Orderby); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUsersEventsGetInstancesRequest generates requests for UsersEventsGetInstances
func NewUsersEventsGetInstancesRequest(server string, userId string, eventId string, eventId1 string, params *UsersEventsGetInstancesParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "user-id", runtime.ParamLocationPath, userId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "event-id", runtime.ParamLocationPath, eventId)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "event-id1", runtime.ParamLocationPath, eventId1)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/users/%s/events/%s/instances/%s", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "startDateTime", runtime.ParamLocationQuery, params.StartDateTime); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "endDateTime", runtime.ParamLocationQuery, params.EndDateTime); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if params.Select != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "$select", runtime.ParamLocationQuery, *params.Select); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUsersEventsInstancesListAttachmentsRequest generates requests for UsersEventsInstancesListAttachments
func NewUsersEventsInstancesListAttachmentsRequest(server string, userId string, eventId string, eventId1 string, params *UsersEventsInstancesListAttachmentsParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "user-id", runtime.ParamLocationPath, userId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "event-id", runtime.ParamLocationPath, eventId)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "event-id1", runtime.ParamLocationPath, eventId1)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/users/%s/events/%s/instances/%s/attachments", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Top != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "$top", runtime.ParamLocationQuery, *params.Top); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Skip != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "$skip", runtime.ParamLocationQuery, *params.Skip); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Filter != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "$filter", runtime.ParamLocationQuery, *params.Filter); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Count != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "$count", runtime.ParamLocationQuery, *params.Count); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Orderby != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "$orderby", runtime.ParamLocationQuery, *params.Orderby); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Select != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "$select", runtime.ParamLocationQuery, *params.Select); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Expand != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "$expand", runtime.ParamLocationQuery, *params.Expand); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUsersEventsInstancesCreateAttachmentsRequest calls the generic UsersEventsInstancesCreateAttachments builder with application/json body
func NewUsersEventsInstancesCreateAttachmentsRequest(server string, userId string, eventId string, eventId1 string, body UsersEventsInstancesCreateAttachmentsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUsersEventsInstancesCreateAttachmentsRequestWithBody(server, userId, eventId, eventId1, "application/json", bodyReader)
}

// NewUsersEventsInstancesCreateAttachmentsRequestWithBody generates requests for UsersEventsInstancesCreateAttachments with any type of body
func NewUsersEventsInstancesCreateAttachmentsRequestWithBody(server string, userId string, eventId string, eventId1 string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "user-id", runtime.ParamLocationPath, userId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "event-id", runtime.ParamLocationPath, eventId)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "event-id1", runtime.ParamLocationPath, eventId1)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/users/%s/events/%s/instances/%s/attachments", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewUsersEventsInstancesAttachmentsGetCount3c02Request generates requests for UsersEventsInstancesAttachmentsGetCount3c02
func NewUsersEventsInstancesAttachmentsGetCount3c02Request(server string, userId string, eventId string, eventId1 string, params *UsersEventsInstancesAttachmentsGetCount3c02Params) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "user-id", runtime.ParamLocationPath, userId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "event-id", runtime.ParamLocationPath, eventId)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "event-id1", runtime.ParamLocationPath, eventId1)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/users/%s/events/%s/instances/%s/attachments/$count", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Filter != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "$filter", runtime.ParamLocationQuery, *params.Filter); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUsersUserEventsEventInstancesEventAttachmentsCreateUploadSessionRequest calls the generic UsersUserEventsEventInstancesEventAttachmentsCreateUploadSession builder with application/json body
func NewUsersUserEventsEventInstancesEventAttachmentsCreateUploadSessionRequest(server string, userId string, eventId string, eventId1 string, body UsersUserEventsEventInstancesEventAttachmentsCreateUploadSessionJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUsersUserEventsEventInstancesEventAttachmentsCreateUploadSessionRequestWithBody(server, userId, eventId, eventId1, "application/json", bodyReader)
}

// NewUsersUserEventsEventInstancesEventAttachmentsCreateUploadSessionRequestWithBody generates requests for UsersUserEventsEventInstancesEventAttachmentsCreateUploadSession with any type of body
func NewUsersUserEventsEventInstancesEventAttachmentsCreateUploadSessionRequestWithBody(server string, userId string, eventId string, eventId1 string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "user-id", runtime.ParamLocationPath, userId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "event-id", runtime.ParamLocationPath, eventId)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "event-id1", runtime.ParamLocationPath, eventId1)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/users/%s/events/%s/instances/%s/attachments/microsoft.graph.createUploadSession", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewUsersEventsInstancesDeleteAttachmentsRequest generates requests for UsersEventsInstancesDeleteAttachments
func NewUsersEventsInstancesDeleteAttachmentsRequest(server string, userId string, eventId string, eventId1 string, attachmentId string, params *UsersEventsInstancesDeleteAttachmentsParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "user-id", runtime.ParamLocationPath, userId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "event-id", runtime.ParamLocationPath, eventId)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "event-id1", runtime.ParamLocationPath, eventId1)
	if err != nil {
		return nil, err
	}

	var pathParam3 string

	pathParam3, err = runtime.StyleParamWithLocation("simple", false, "attachment-id", runtime.ParamLocationPath, attachmentId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/users/%s/events/%s/instances/%s/attachments/%s", pathParam0, pathParam1, pathParam2, pathParam3)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		if params.IfMatch != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "If-Match", runtime.ParamLocationHeader, *params.IfMatch)
			if err != nil {
				return nil, err
			}

			req.Header.Set("If-Match", headerParam0)
		}

	}

	return req, nil
}

// NewUsersEventsInstancesGetAttachmentsRequest generates requests for UsersEventsInstancesGetAttachments
func NewUsersEventsInstancesGetAttachmentsRequest(server string, userId string, eventId string, eventId1 string, attachmentId string, params *UsersEventsInstancesGetAttachmentsParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "user-id", runtime.ParamLocationPath, userId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "event-id", runtime.ParamLocationPath, eventId)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "event-id1", runtime.ParamLocationPath, eventId1)
	if err != nil {
		return nil, err
	}

	var pathParam3 string

	pathParam3, err = runtime.StyleParamWithLocation("simple", false, "attachment-id", runtime.ParamLocationPath, attachmentId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/users/%s/events/%s/instances/%s/attachments/%s", pathParam0, pathParam1, pathParam2, pathParam3)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Select != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "$select", runtime.ParamLocationQuery, *params.Select); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Expand != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "$expand", runtime.ParamLocationQuery, *params.Expand); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUsersEventsInstancesGetCalendarRequest generates requests for UsersEventsInstancesGetCalendar
func NewUsersEventsInstancesGetCalendarRequest(server string, userId string, eventId string, eventId1 string, params *UsersEventsInstancesGetCalendarParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "user-id", runtime.ParamLocationPath, userId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "event-id", runtime.ParamLocationPath, eventId)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "event-id1", runtime.ParamLocationPath, eventId1)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/users/%s/events/%s/instances/%s/calendar", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Select != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "$select", runtime.ParamLocationQuery, *params.Select); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUsersEventsInstancesListExtensionsRequest generates requests for UsersEventsInstancesListExtensions
func NewUsersEventsInstancesListExtensionsRequest(server string, userId string, eventId string, eventId1 string, params *UsersEventsInstancesListExtensionsParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "user-id", runtime.ParamLocationPath, userId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "event-id", runtime.ParamLocationPath, eventId)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "event-id1", runtime.ParamLocationPath, eventId1)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/users/%s/events/%s/instances/%s/extensions", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Top != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "$top", runtime.ParamLocationQuery, *params.Top); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Skip != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "$skip", runtime.ParamLocationQuery, *params.Skip); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Filter != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "$filter", runtime.ParamLocationQuery, *params.Filter); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Count != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "$count", runtime.ParamLocationQuery, *params.Count); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Orderby != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "$orderby", runtime.ParamLocationQuery, *params.Orderby); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Select != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "$select", runtime.ParamLocationQuery, *params.Select); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Expand != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "$expand", runtime.ParamLocationQuery, *params.Expand); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUsersEventsInstancesCreateExtensionsRequest calls the generic UsersEventsInstancesCreateExtensions builder with application/json body
func NewUsersEventsInstancesCreateExtensionsRequest(server string, userId string, eventId string, eventId1 string, body UsersEventsInstancesCreateExtensionsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUsersEventsInstancesCreateExtensionsRequestWithBody(server, userId, eventId, eventId1, "application/json", bodyReader)
}

// NewUsersEventsInstancesCreateExtensionsRequestWithBody generates requests for UsersEventsInstancesCreateExtensions with any type of body
func NewUsersEventsInstancesCreateExtensionsRequestWithBody(server string, userId string, eventId string, eventId1 string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "user-id", runtime.ParamLocationPath, userId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "event-id", runtime.ParamLocationPath, eventId)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "event-id1", runtime.ParamLocationPath, eventId1)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/users/%s/events/%s/instances/%s/extensions", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewUsersEventsInstancesExtensionsGetCount8eedRequest generates requests for UsersEventsInstancesExtensionsGetCount8eed
func NewUsersEventsInstancesExtensionsGetCount8eedRequest(server string, userId string, eventId string, eventId1 string, params *UsersEventsInstancesExtensionsGetCount8eedParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "user-id", runtime.ParamLocationPath, userId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "event-id", runtime.ParamLocationPath, eventId)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "event-id1", runtime.ParamLocationPath, eventId1)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/users/%s/events/%s/instances/%s/extensions/$count", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Filter != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "$filter", runtime.ParamLocationQuery, *params.Filter); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUsersEventsInstancesDeleteExtensionsRequest generates requests for UsersEventsInstancesDeleteExtensions
func NewUsersEventsInstancesDeleteExtensionsRequest(server string, userId string, eventId string, eventId1 string, extensionId string, params *UsersEventsInstancesDeleteExtensionsParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "user-id", runtime.ParamLocationPath, userId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "event-id", runtime.ParamLocationPath, eventId)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "event-id1", runtime.ParamLocationPath, eventId1)
	if err != nil {
		return nil, err
	}

	var pathParam3 string

	pathParam3, err = runtime.StyleParamWithLocation("simple", false, "extension-id", runtime.ParamLocationPath, extensionId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/users/%s/events/%s/instances/%s/extensions/%s", pathParam0, pathParam1, pathParam2, pathParam3)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		if params.IfMatch != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "If-Match", runtime.ParamLocationHeader, *params.IfMatch)
			if err != nil {
				return nil, err
			}

			req.Header.Set("If-Match", headerParam0)
		}

	}

	return req, nil
}

// NewUsersEventsInstancesGetExtensionsRequest generates requests for UsersEventsInstancesGetExtensions
func NewUsersEventsInstancesGetExtensionsRequest(server string, userId string, eventId string, eventId1 string, extensionId string, params *UsersEventsInstancesGetExtensionsParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "user-id", runtime.ParamLocationPath, userId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "event-id", runtime.ParamLocationPath, eventId)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "event-id1", runtime.ParamLocationPath, eventId1)
	if err != nil {
		return nil, err
	}

	var pathParam3 string

	pathParam3, err = runtime.StyleParamWithLocation("simple", false, "extension-id", runtime.ParamLocationPath, extensionId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/users/%s/events/%s/instances/%s/extensions/%s", pathParam0, pathParam1, pathParam2, pathParam3)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Select != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "$select", runtime.ParamLocationQuery, *params.Select); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Expand != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "$expand", runtime.ParamLocationQuery, *params.Expand); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUsersEventsInstancesUpdateExtensionsRequest calls the generic UsersEventsInstancesUpdateExtensions builder with application/json body
func NewUsersEventsInstancesUpdateExtensionsRequest(server string, userId string, eventId string, eventId1 string, extensionId string, body UsersEventsInstancesUpdateExtensionsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUsersEventsInstancesUpdateExtensionsRequestWithBody(server, userId, eventId, eventId1, extensionId, "application/json", bodyReader)
}

// NewUsersEventsInstancesUpdateExtensionsRequestWithBody generates requests for UsersEventsInstancesUpdateExtensions with any type of body
func NewUsersEventsInstancesUpdateExtensionsRequestWithBody(server string, userId string, eventId string, eventId1 string, extensionId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "user-id", runtime.ParamLocationPath, userId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "event-id", runtime.ParamLocationPath, eventId)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "event-id1", runtime.ParamLocationPath, eventId1)
	if err != nil {
		return nil, err
	}

	var pathParam3 string

	pathParam3, err = runtime.StyleParamWithLocation("simple", false, "extension-id", runtime.ParamLocationPath, extensionId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/users/%s/events/%s/instances/%s/extensions/%s", pathParam0, pathParam1, pathParam2, pathParam3)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewUsersUserEventsEventInstancesEventAcceptRequest calls the generic UsersUserEventsEventInstancesEventAccept builder with application/json body
func NewUsersUserEventsEventInstancesEventAcceptRequest(server string, userId string, eventId string, eventId1 string, body UsersUserEventsEventInstancesEventAcceptJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUsersUserEventsEventInstancesEventAcceptRequestWithBody(server, userId, eventId, eventId1, "application/json", bodyReader)
}

// NewUsersUserEventsEventInstancesEventAcceptRequestWithBody generates requests for UsersUserEventsEventInstancesEventAccept with any type of body
func NewUsersUserEventsEventInstancesEventAcceptRequestWithBody(server string, userId string, eventId string, eventId1 string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "user-id", runtime.ParamLocationPath, userId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "event-id", runtime.ParamLocationPath, eventId)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "event-id1", runtime.ParamLocationPath, eventId1)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/users/%s/events/%s/instances/%s/microsoft.graph.accept", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewUsersUserEventsEventInstancesEventCancelRequest calls the generic UsersUserEventsEventInstancesEventCancel builder with application/json body
func NewUsersUserEventsEventInstancesEventCancelRequest(server string, userId string, eventId string, eventId1 string, body UsersUserEventsEventInstancesEventCancelJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUsersUserEventsEventInstancesEventCancelRequestWithBody(server, userId, eventId, eventId1, "application/json", bodyReader)
}

// NewUsersUserEventsEventInstancesEventCancelRequestWithBody generates requests for UsersUserEventsEventInstancesEventCancel with any type of body
func NewUsersUserEventsEventInstancesEventCancelRequestWithBody(server string, userId string, eventId string, eventId1 string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "user-id", runtime.ParamLocationPath, userId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "event-id", runtime.ParamLocationPath, eventId)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "event-id1", runtime.ParamLocationPath, eventId1)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/users/%s/events/%s/instances/%s/microsoft.graph.cancel", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewUsersUserEventsEventInstancesEventDeclineRequest calls the generic UsersUserEventsEventInstancesEventDecline builder with application/json body
func NewUsersUserEventsEventInstancesEventDeclineRequest(server string, userId string, eventId string, eventId1 string, body UsersUserEventsEventInstancesEventDeclineJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUsersUserEventsEventInstancesEventDeclineRequestWithBody(server, userId, eventId, eventId1, "application/json", bodyReader)
}

// NewUsersUserEventsEventInstancesEventDeclineRequestWithBody generates requests for UsersUserEventsEventInstancesEventDecline with any type of body
func NewUsersUserEventsEventInstancesEventDeclineRequestWithBody(server string, userId string, eventId string, eventId1 string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "user-id", runtime.ParamLocationPath, userId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "event-id", runtime.ParamLocationPath, eventId)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "event-id1", runtime.ParamLocationPath, eventId1)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/users/%s/events/%s/instances/%s/microsoft.graph.decline", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewUsersUserEventsEventInstancesEventDismissReminderRequest generates requests for UsersUserEventsEventInstancesEventDismissReminder
func NewUsersUserEventsEventInstancesEventDismissReminderRequest(server string, userId string, eventId string, eventId1 string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "user-id", runtime.ParamLocationPath, userId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "event-id", runtime.ParamLocationPath, eventId)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "event-id1", runtime.ParamLocationPath, eventId1)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/users/%s/events/%s/instances/%s/microsoft.graph.dismissReminder", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUsersUserEventsEventInstancesEventForwardRequest calls the generic UsersUserEventsEventInstancesEventForward builder with application/json body
func NewUsersUserEventsEventInstancesEventForwardRequest(server string, userId string, eventId string, eventId1 string, body UsersUserEventsEventInstancesEventForwardJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUsersUserEventsEventInstancesEventForwardRequestWithBody(server, userId, eventId, eventId1, "application/json", bodyReader)
}

// NewUsersUserEventsEventInstancesEventForwardRequestWithBody generates requests for UsersUserEventsEventInstancesEventForward with any type of body
func NewUsersUserEventsEventInstancesEventForwardRequestWithBody(server string, userId string, eventId string, eventId1 string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "user-id", runtime.ParamLocationPath, userId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "event-id", runtime.ParamLocationPath, eventId)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "event-id1", runtime.ParamLocationPath, eventId1)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/users/%s/events/%s/instances/%s/microsoft.graph.forward", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewUsersUserEventsEventInstancesEventSnoozeReminderRequest calls the generic UsersUserEventsEventInstancesEventSnoozeReminder builder with application/json body
func NewUsersUserEventsEventInstancesEventSnoozeReminderRequest(server string, userId string, eventId string, eventId1 string, body UsersUserEventsEventInstancesEventSnoozeReminderJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUsersUserEventsEventInstancesEventSnoozeReminderRequestWithBody(server, userId, eventId, eventId1, "application/json", bodyReader)
}

// NewUsersUserEventsEventInstancesEventSnoozeReminderRequestWithBody generates requests for UsersUserEventsEventInstancesEventSnoozeReminder with any type of body
func NewUsersUserEventsEventInstancesEventSnoozeReminderRequestWithBody(server string, userId string, eventId string, eventId1 string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "user-id", runtime.ParamLocationPath, userId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "event-id", runtime.ParamLocationPath, eventId)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "event-id1", runtime.ParamLocationPath, eventId1)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/users/%s/events/%s/instances/%s/microsoft.graph.snoozeReminder", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewUsersUserEventsEventInstancesEventTentativelyAcceptRequest calls the generic UsersUserEventsEventInstancesEventTentativelyAccept builder with application/json body
func NewUsersUserEventsEventInstancesEventTentativelyAcceptRequest(server string, userId string, eventId string, eventId1 string, body UsersUserEventsEventInstancesEventTentativelyAcceptJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUsersUserEventsEventInstancesEventTentativelyAcceptRequestWithBody(server, userId, eventId, eventId1, "application/json", bodyReader)
}

// NewUsersUserEventsEventInstancesEventTentativelyAcceptRequestWithBody generates requests for UsersUserEventsEventInstancesEventTentativelyAccept with any type of body
func NewUsersUserEventsEventInstancesEventTentativelyAcceptRequestWithBody(server string, userId string, eventId string, eventId1 string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "user-id", runtime.ParamLocationPath, userId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "event-id", runtime.ParamLocationPath, eventId)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "event-id1", runtime.ParamLocationPath, eventId1)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/users/%s/events/%s/instances/%s/microsoft.graph.tentativelyAccept", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewUsersUserEventsEventAcceptRequest calls the generic UsersUserEventsEventAccept builder with application/json body
func NewUsersUserEventsEventAcceptRequest(server string, userId string, eventId string, body UsersUserEventsEventAcceptJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUsersUserEventsEventAcceptRequestWithBody(server, userId, eventId, "application/json", bodyReader)
}

// NewUsersUserEventsEventAcceptRequestWithBody generates requests for UsersUserEventsEventAccept with any type of body
func NewUsersUserEventsEventAcceptRequestWithBody(server string, userId string, eventId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "user-id", runtime.ParamLocationPath, userId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "event-id", runtime.ParamLocationPath, eventId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/users/%s/events/%s/microsoft.graph.accept", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewUsersUserEventsEventCancelRequest calls the generic UsersUserEventsEventCancel builder with application/json body
func NewUsersUserEventsEventCancelRequest(server string, userId string, eventId string, body UsersUserEventsEventCancelJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUsersUserEventsEventCancelRequestWithBody(server, userId, eventId, "application/json", bodyReader)
}

// NewUsersUserEventsEventCancelRequestWithBody generates requests for UsersUserEventsEventCancel with any type of body
func NewUsersUserEventsEventCancelRequestWithBody(server string, userId string, eventId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "user-id", runtime.ParamLocationPath, userId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "event-id", runtime.ParamLocationPath, eventId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/users/%s/events/%s/microsoft.graph.cancel", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewUsersUserEventsEventDeclineRequest calls the generic UsersUserEventsEventDecline builder with application/json body
func NewUsersUserEventsEventDeclineRequest(server string, userId string, eventId string, body UsersUserEventsEventDeclineJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUsersUserEventsEventDeclineRequestWithBody(server, userId, eventId, "application/json", bodyReader)
}

// NewUsersUserEventsEventDeclineRequestWithBody generates requests for UsersUserEventsEventDecline with any type of body
func NewUsersUserEventsEventDeclineRequestWithBody(server string, userId string, eventId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "user-id", runtime.ParamLocationPath, userId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "event-id", runtime.ParamLocationPath, eventId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/users/%s/events/%s/microsoft.graph.decline", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewUsersUserEventsEventDismissReminderRequest generates requests for UsersUserEventsEventDismissReminder
func NewUsersUserEventsEventDismissReminderRequest(server string, userId string, eventId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "user-id", runtime.ParamLocationPath, userId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "event-id", runtime.ParamLocationPath, eventId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/users/%s/events/%s/microsoft.graph.dismissReminder", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUsersUserEventsEventForwardRequest calls the generic UsersUserEventsEventForward builder with application/json body
func NewUsersUserEventsEventForwardRequest(server string, userId string, eventId string, body UsersUserEventsEventForwardJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUsersUserEventsEventForwardRequestWithBody(server, userId, eventId, "application/json", bodyReader)
}

// NewUsersUserEventsEventForwardRequestWithBody generates requests for UsersUserEventsEventForward with any type of body
func NewUsersUserEventsEventForwardRequestWithBody(server string, userId string, eventId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "user-id", runtime.ParamLocationPath, userId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "event-id", runtime.ParamLocationPath, eventId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/users/%s/events/%s/microsoft.graph.forward", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewUsersUserEventsEventSnoozeReminderRequest calls the generic UsersUserEventsEventSnoozeReminder builder with application/json body
func NewUsersUserEventsEventSnoozeReminderRequest(server string, userId string, eventId string, body UsersUserEventsEventSnoozeReminderJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUsersUserEventsEventSnoozeReminderRequestWithBody(server, userId, eventId, "application/json", bodyReader)
}

// NewUsersUserEventsEventSnoozeReminderRequestWithBody generates requests for UsersUserEventsEventSnoozeReminder with any type of body
func NewUsersUserEventsEventSnoozeReminderRequestWithBody(server string, userId string, eventId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "user-id", runtime.ParamLocationPath, userId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "event-id", runtime.ParamLocationPath, eventId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/users/%s/events/%s/microsoft.graph.snoozeReminder", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewUsersUserEventsEventTentativelyAcceptRequest calls the generic UsersUserEventsEventTentativelyAccept builder with application/json body
func NewUsersUserEventsEventTentativelyAcceptRequest(server string, userId string, eventId string, body UsersUserEventsEventTentativelyAcceptJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUsersUserEventsEventTentativelyAcceptRequestWithBody(server, userId, eventId, "application/json", bodyReader)
}

// NewUsersUserEventsEventTentativelyAcceptRequestWithBody generates requests for UsersUserEventsEventTentativelyAccept with any type of body
func NewUsersUserEventsEventTentativelyAcceptRequestWithBody(server string, userId string, eventId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "user-id", runtime.ParamLocationPath, userId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "event-id", runtime.ParamLocationPath, eventId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/users/%s/events/%s/microsoft.graph.tentativelyAccept", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewUsersListExtensionsRequest generates requests for UsersListExtensions
func NewUsersListExtensionsRequest(server string, userId string, params *UsersListExtensionsParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "user-id", runtime.ParamLocationPath, userId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/users/%s/extensions", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Top != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "$top", runtime.ParamLocationQuery, *params.Top); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Skip != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "$skip", runtime.ParamLocationQuery, *params.Skip); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Search != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "$search", runtime.ParamLocationQuery, *params.Search); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Filter != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "$filter", runtime.ParamLocationQuery, *params.Filter); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Count != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "$count", runtime.ParamLocationQuery, *params.Count); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Orderby != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "$orderby", runtime.ParamLocationQuery, *params.Orderby); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Select != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "$select", runtime.ParamLocationQuery, *params.Select); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Expand != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "$expand", runtime.ParamLocationQuery, *params.Expand); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUsersCreateExtensionsRequest calls the generic UsersCreateExtensions builder with application/json body
func NewUsersCreateExtensionsRequest(server string, userId string, body UsersCreateExtensionsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUsersCreateExtensionsRequestWithBody(server, userId, "application/json", bodyReader)
}

// NewUsersCreateExtensionsRequestWithBody generates requests for UsersCreateExtensions with any type of body
func NewUsersCreateExtensionsRequestWithBody(server string, userId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "user-id", runtime.ParamLocationPath, userId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/users/%s/extensions", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewUsersExtensionsGetCount4b1cRequest generates requests for UsersExtensionsGetCount4b1c
func NewUsersExtensionsGetCount4b1cRequest(server string, userId string, params *UsersExtensionsGetCount4b1cParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "user-id", runtime.ParamLocationPath, userId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/users/%s/extensions/$count", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Search != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "$search", runtime.ParamLocationQuery, *params.Search); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Filter != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "$filter", runtime.ParamLocationQuery, *params.Filter); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUsersDeleteExtensionsRequest generates requests for UsersDeleteExtensions
func NewUsersDeleteExtensionsRequest(server string, userId string, extensionId string, params *UsersDeleteExtensionsParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "user-id", runtime.ParamLocationPath, userId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "extension-id", runtime.ParamLocationPath, extensionId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/users/%s/extensions/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		if params.IfMatch != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "If-Match", runtime.ParamLocationHeader, *params.IfMatch)
			if err != nil {
				return nil, err
			}

			req.Header.Set("If-Match", headerParam0)
		}

	}

	return req, nil
}

// NewUsersGetExtensionsRequest generates requests for UsersGetExtensions
func NewUsersGetExtensionsRequest(server string, userId string, extensionId string, params *UsersGetExtensionsParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "user-id", runtime.ParamLocationPath, userId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "extension-id", runtime.ParamLocationPath, extensionId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/users/%s/extensions/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Select != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "$select", runtime.ParamLocationQuery, *params.Select); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Expand != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", false, "$expand", runtime.ParamLocationQuery, *params.Expand); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUsersUpdateExtensionsRequest calls the generic UsersUpdateExtensions builder with application/json body
func NewUsersUpdateExtensionsRequest(server string, userId string, extensionId string, body UsersUpdateExtensionsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUsersUpdateExtensionsRequestWithBody(server, userId, extensionId, "application/json", bodyReader)
}

// NewUsersUpdateExtensionsRequestWithBody generates requests for UsersUpdateExtensions with any type of body
func NewUsersUpdateExtensionsRequestWithBody(server string, userId string, extensionId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "user-id", runtime.ParamLocationPath, userId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "extension-id", runtime.ParamLocationPath, extensionId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/users/%s/extensions/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

func (c *Client) applyEditors(ctx context.Context, req *http.Request, additionalEditors []RequestEditorFn) error {
	for _, r := range c.RequestEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	for _, r := range additionalEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	return nil
}

// ClientWithResponses builds on ClientInterface to offer response payloads
type ClientWithResponses struct {
	ClientInterface
}

// NewClientWithResponses creates a new ClientWithResponses, which wraps
// Client with return type handling
func NewClientWithResponses(server string, opts ...ClientOption) (*ClientWithResponses, error) {
	client, err := NewClient(server, opts...)
	if err != nil {
		return nil, err
	}
	return &ClientWithResponses{client}, nil
}

// WithBaseURL overrides the baseURL.
func WithBaseURL(baseURL string) ClientOption {
	return func(c *Client) error {
		newBaseURL, err := url.Parse(baseURL)
		if err != nil {
			return err
		}
		c.Server = newBaseURL.String()
		return nil
	}
}

// ClientWithResponsesInterface is the interface specification for the client with responses above.
type ClientWithResponsesInterface interface {
	// UsersUserListUserWithResponse request
	UsersUserListUserWithResponse(ctx context.Context, params *UsersUserListUserParams, reqEditors ...RequestEditorFn) (*UsersUserListUserResponse, error)

	// UsersUserCreateUserWithBodyWithResponse request with any body
	UsersUserCreateUserWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UsersUserCreateUserResponse, error)

	UsersUserCreateUserWithResponse(ctx context.Context, body UsersUserCreateUserJSONRequestBody, reqEditors ...RequestEditorFn) (*UsersUserCreateUserResponse, error)

	// UsersUserDeleteUserWithResponse request
	UsersUserDeleteUserWithResponse(ctx context.Context, userId string, params *UsersUserDeleteUserParams, reqEditors ...RequestEditorFn) (*UsersUserDeleteUserResponse, error)

	// UsersUserGetUserWithResponse request
	UsersUserGetUserWithResponse(ctx context.Context, userId string, params *UsersUserGetUserParams, reqEditors ...RequestEditorFn) (*UsersUserGetUserResponse, error)

	// UsersUserUpdateUserWithBodyWithResponse request with any body
	UsersUserUpdateUserWithBodyWithResponse(ctx context.Context, userId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UsersUserUpdateUserResponse, error)

	UsersUserUpdateUserWithResponse(ctx context.Context, userId string, body UsersUserUpdateUserJSONRequestBody, reqEditors ...RequestEditorFn) (*UsersUserUpdateUserResponse, error)

	// UsersListEventsWithResponse request
	UsersListEventsWithResponse(ctx context.Context, userId string, params *UsersListEventsParams, reqEditors ...RequestEditorFn) (*UsersListEventsResponse, error)

	// UsersCreateEventsWithBodyWithResponse request with any body
	UsersCreateEventsWithBodyWithResponse(ctx context.Context, userId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UsersCreateEventsResponse, error)

	UsersCreateEventsWithResponse(ctx context.Context, userId string, body UsersCreateEventsJSONRequestBody, reqEditors ...RequestEditorFn) (*UsersCreateEventsResponse, error)

	// UsersEventsGetCountD443WithResponse request
	UsersEventsGetCountD443WithResponse(ctx context.Context, userId string, params *UsersEventsGetCountD443Params, reqEditors ...RequestEditorFn) (*UsersEventsGetCountD443Response, error)

	// UsersUserEventsDeltaWithResponse request
	UsersUserEventsDeltaWithResponse(ctx context.Context, userId string, params *UsersUserEventsDeltaParams, reqEditors ...RequestEditorFn) (*UsersUserEventsDeltaResponse, error)

	// UsersDeleteEventsWithResponse request
	UsersDeleteEventsWithResponse(ctx context.Context, userId string, eventId string, params *UsersDeleteEventsParams, reqEditors ...RequestEditorFn) (*UsersDeleteEventsResponse, error)

	// UsersGetEventsWithResponse request
	UsersGetEventsWithResponse(ctx context.Context, userId string, eventId string, params *UsersGetEventsParams, reqEditors ...RequestEditorFn) (*UsersGetEventsResponse, error)

	// UsersUpdateEventsWithBodyWithResponse request with any body
	UsersUpdateEventsWithBodyWithResponse(ctx context.Context, userId string, eventId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UsersUpdateEventsResponse, error)

	UsersUpdateEventsWithResponse(ctx context.Context, userId string, eventId string, body UsersUpdateEventsJSONRequestBody, reqEditors ...RequestEditorFn) (*UsersUpdateEventsResponse, error)

	// UsersEventsListAttachmentsWithResponse request
	UsersEventsListAttachmentsWithResponse(ctx context.Context, userId string, eventId string, params *UsersEventsListAttachmentsParams, reqEditors ...RequestEditorFn) (*UsersEventsListAttachmentsResponse, error)

	// UsersEventsCreateAttachmentsWithBodyWithResponse request with any body
	UsersEventsCreateAttachmentsWithBodyWithResponse(ctx context.Context, userId string, eventId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UsersEventsCreateAttachmentsResponse, error)

	UsersEventsCreateAttachmentsWithResponse(ctx context.Context, userId string, eventId string, body UsersEventsCreateAttachmentsJSONRequestBody, reqEditors ...RequestEditorFn) (*UsersEventsCreateAttachmentsResponse, error)

	// UsersEventsAttachmentsGetCount711fWithResponse request
	UsersEventsAttachmentsGetCount711fWithResponse(ctx context.Context, userId string, eventId string, params *UsersEventsAttachmentsGetCount711fParams, reqEditors ...RequestEditorFn) (*UsersEventsAttachmentsGetCount711fResponse, error)

	// UsersUserEventsEventAttachmentsCreateUploadSessionWithBodyWithResponse request with any body
	UsersUserEventsEventAttachmentsCreateUploadSessionWithBodyWithResponse(ctx context.Context, userId string, eventId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UsersUserEventsEventAttachmentsCreateUploadSessionResponse, error)

	UsersUserEventsEventAttachmentsCreateUploadSessionWithResponse(ctx context.Context, userId string, eventId string, body UsersUserEventsEventAttachmentsCreateUploadSessionJSONRequestBody, reqEditors ...RequestEditorFn) (*UsersUserEventsEventAttachmentsCreateUploadSessionResponse, error)

	// UsersEventsDeleteAttachmentsWithResponse request
	UsersEventsDeleteAttachmentsWithResponse(ctx context.Context, userId string, eventId string, attachmentId string, params *UsersEventsDeleteAttachmentsParams, reqEditors ...RequestEditorFn) (*UsersEventsDeleteAttachmentsResponse, error)

	// UsersEventsGetAttachmentsWithResponse request
	UsersEventsGetAttachmentsWithResponse(ctx context.Context, userId string, eventId string, attachmentId string, params *UsersEventsGetAttachmentsParams, reqEditors ...RequestEditorFn) (*UsersEventsGetAttachmentsResponse, error)

	// UsersEventsGetCalendarWithResponse request
	UsersEventsGetCalendarWithResponse(ctx context.Context, userId string, eventId string, params *UsersEventsGetCalendarParams, reqEditors ...RequestEditorFn) (*UsersEventsGetCalendarResponse, error)

	// UsersEventsListExtensionsWithResponse request
	UsersEventsListExtensionsWithResponse(ctx context.Context, userId string, eventId string, params *UsersEventsListExtensionsParams, reqEditors ...RequestEditorFn) (*UsersEventsListExtensionsResponse, error)

	// UsersEventsCreateExtensionsWithBodyWithResponse request with any body
	UsersEventsCreateExtensionsWithBodyWithResponse(ctx context.Context, userId string, eventId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UsersEventsCreateExtensionsResponse, error)

	UsersEventsCreateExtensionsWithResponse(ctx context.Context, userId string, eventId string, body UsersEventsCreateExtensionsJSONRequestBody, reqEditors ...RequestEditorFn) (*UsersEventsCreateExtensionsResponse, error)

	// UsersEventsExtensionsGetCount0041WithResponse request
	UsersEventsExtensionsGetCount0041WithResponse(ctx context.Context, userId string, eventId string, params *UsersEventsExtensionsGetCount0041Params, reqEditors ...RequestEditorFn) (*UsersEventsExtensionsGetCount0041Response, error)

	// UsersEventsDeleteExtensionsWithResponse request
	UsersEventsDeleteExtensionsWithResponse(ctx context.Context, userId string, eventId string, extensionId string, params *UsersEventsDeleteExtensionsParams, reqEditors ...RequestEditorFn) (*UsersEventsDeleteExtensionsResponse, error)

	// UsersEventsGetExtensionsWithResponse request
	UsersEventsGetExtensionsWithResponse(ctx context.Context, userId string, eventId string, extensionId string, params *UsersEventsGetExtensionsParams, reqEditors ...RequestEditorFn) (*UsersEventsGetExtensionsResponse, error)

	// UsersEventsUpdateExtensionsWithBodyWithResponse request with any body
	UsersEventsUpdateExtensionsWithBodyWithResponse(ctx context.Context, userId string, eventId string, extensionId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UsersEventsUpdateExtensionsResponse, error)

	UsersEventsUpdateExtensionsWithResponse(ctx context.Context, userId string, eventId string, extensionId string, body UsersEventsUpdateExtensionsJSONRequestBody, reqEditors ...RequestEditorFn) (*UsersEventsUpdateExtensionsResponse, error)

	// UsersEventsListInstancesWithResponse request
	UsersEventsListInstancesWithResponse(ctx context.Context, userId string, eventId string, params *UsersEventsListInstancesParams, reqEditors ...RequestEditorFn) (*UsersEventsListInstancesResponse, error)

	// UsersEventsInstancesGetCountF922WithResponse request
	UsersEventsInstancesGetCountF922WithResponse(ctx context.Context, userId string, eventId string, params *UsersEventsInstancesGetCountF922Params, reqEditors ...RequestEditorFn) (*UsersEventsInstancesGetCountF922Response, error)

	// UsersUserEventsEventInstancesDeltaWithResponse request
	UsersUserEventsEventInstancesDeltaWithResponse(ctx context.Context, userId string, eventId string, params *UsersUserEventsEventInstancesDeltaParams, reqEditors ...RequestEditorFn) (*UsersUserEventsEventInstancesDeltaResponse, error)

	// UsersEventsGetInstancesWithResponse request
	UsersEventsGetInstancesWithResponse(ctx context.Context, userId string, eventId string, eventId1 string, params *UsersEventsGetInstancesParams, reqEditors ...RequestEditorFn) (*UsersEventsGetInstancesResponse, error)

	// UsersEventsInstancesListAttachmentsWithResponse request
	UsersEventsInstancesListAttachmentsWithResponse(ctx context.Context, userId string, eventId string, eventId1 string, params *UsersEventsInstancesListAttachmentsParams, reqEditors ...RequestEditorFn) (*UsersEventsInstancesListAttachmentsResponse, error)

	// UsersEventsInstancesCreateAttachmentsWithBodyWithResponse request with any body
	UsersEventsInstancesCreateAttachmentsWithBodyWithResponse(ctx context.Context, userId string, eventId string, eventId1 string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UsersEventsInstancesCreateAttachmentsResponse, error)

	UsersEventsInstancesCreateAttachmentsWithResponse(ctx context.Context, userId string, eventId string, eventId1 string, body UsersEventsInstancesCreateAttachmentsJSONRequestBody, reqEditors ...RequestEditorFn) (*UsersEventsInstancesCreateAttachmentsResponse, error)

	// UsersEventsInstancesAttachmentsGetCount3c02WithResponse request
	UsersEventsInstancesAttachmentsGetCount3c02WithResponse(ctx context.Context, userId string, eventId string, eventId1 string, params *UsersEventsInstancesAttachmentsGetCount3c02Params, reqEditors ...RequestEditorFn) (*UsersEventsInstancesAttachmentsGetCount3c02Response, error)

	// UsersUserEventsEventInstancesEventAttachmentsCreateUploadSessionWithBodyWithResponse request with any body
	UsersUserEventsEventInstancesEventAttachmentsCreateUploadSessionWithBodyWithResponse(ctx context.Context, userId string, eventId string, eventId1 string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UsersUserEventsEventInstancesEventAttachmentsCreateUploadSessionResponse, error)

	UsersUserEventsEventInstancesEventAttachmentsCreateUploadSessionWithResponse(ctx context.Context, userId string, eventId string, eventId1 string, body UsersUserEventsEventInstancesEventAttachmentsCreateUploadSessionJSONRequestBody, reqEditors ...RequestEditorFn) (*UsersUserEventsEventInstancesEventAttachmentsCreateUploadSessionResponse, error)

	// UsersEventsInstancesDeleteAttachmentsWithResponse request
	UsersEventsInstancesDeleteAttachmentsWithResponse(ctx context.Context, userId string, eventId string, eventId1 string, attachmentId string, params *UsersEventsInstancesDeleteAttachmentsParams, reqEditors ...RequestEditorFn) (*UsersEventsInstancesDeleteAttachmentsResponse, error)

	// UsersEventsInstancesGetAttachmentsWithResponse request
	UsersEventsInstancesGetAttachmentsWithResponse(ctx context.Context, userId string, eventId string, eventId1 string, attachmentId string, params *UsersEventsInstancesGetAttachmentsParams, reqEditors ...RequestEditorFn) (*UsersEventsInstancesGetAttachmentsResponse, error)

	// UsersEventsInstancesGetCalendarWithResponse request
	UsersEventsInstancesGetCalendarWithResponse(ctx context.Context, userId string, eventId string, eventId1 string, params *UsersEventsInstancesGetCalendarParams, reqEditors ...RequestEditorFn) (*UsersEventsInstancesGetCalendarResponse, error)

	// UsersEventsInstancesListExtensionsWithResponse request
	UsersEventsInstancesListExtensionsWithResponse(ctx context.Context, userId string, eventId string, eventId1 string, params *UsersEventsInstancesListExtensionsParams, reqEditors ...RequestEditorFn) (*UsersEventsInstancesListExtensionsResponse, error)

	// UsersEventsInstancesCreateExtensionsWithBodyWithResponse request with any body
	UsersEventsInstancesCreateExtensionsWithBodyWithResponse(ctx context.Context, userId string, eventId string, eventId1 string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UsersEventsInstancesCreateExtensionsResponse, error)

	UsersEventsInstancesCreateExtensionsWithResponse(ctx context.Context, userId string, eventId string, eventId1 string, body UsersEventsInstancesCreateExtensionsJSONRequestBody, reqEditors ...RequestEditorFn) (*UsersEventsInstancesCreateExtensionsResponse, error)

	// UsersEventsInstancesExtensionsGetCount8eedWithResponse request
	UsersEventsInstancesExtensionsGetCount8eedWithResponse(ctx context.Context, userId string, eventId string, eventId1 string, params *UsersEventsInstancesExtensionsGetCount8eedParams, reqEditors ...RequestEditorFn) (*UsersEventsInstancesExtensionsGetCount8eedResponse, error)

	// UsersEventsInstancesDeleteExtensionsWithResponse request
	UsersEventsInstancesDeleteExtensionsWithResponse(ctx context.Context, userId string, eventId string, eventId1 string, extensionId string, params *UsersEventsInstancesDeleteExtensionsParams, reqEditors ...RequestEditorFn) (*UsersEventsInstancesDeleteExtensionsResponse, error)

	// UsersEventsInstancesGetExtensionsWithResponse request
	UsersEventsInstancesGetExtensionsWithResponse(ctx context.Context, userId string, eventId string, eventId1 string, extensionId string, params *UsersEventsInstancesGetExtensionsParams, reqEditors ...RequestEditorFn) (*UsersEventsInstancesGetExtensionsResponse, error)

	// UsersEventsInstancesUpdateExtensionsWithBodyWithResponse request with any body
	UsersEventsInstancesUpdateExtensionsWithBodyWithResponse(ctx context.Context, userId string, eventId string, eventId1 string, extensionId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UsersEventsInstancesUpdateExtensionsResponse, error)

	UsersEventsInstancesUpdateExtensionsWithResponse(ctx context.Context, userId string, eventId string, eventId1 string, extensionId string, body UsersEventsInstancesUpdateExtensionsJSONRequestBody, reqEditors ...RequestEditorFn) (*UsersEventsInstancesUpdateExtensionsResponse, error)

	// UsersUserEventsEventInstancesEventAcceptWithBodyWithResponse request with any body
	UsersUserEventsEventInstancesEventAcceptWithBodyWithResponse(ctx context.Context, userId string, eventId string, eventId1 string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UsersUserEventsEventInstancesEventAcceptResponse, error)

	UsersUserEventsEventInstancesEventAcceptWithResponse(ctx context.Context, userId string, eventId string, eventId1 string, body UsersUserEventsEventInstancesEventAcceptJSONRequestBody, reqEditors ...RequestEditorFn) (*UsersUserEventsEventInstancesEventAcceptResponse, error)

	// UsersUserEventsEventInstancesEventCancelWithBodyWithResponse request with any body
	UsersUserEventsEventInstancesEventCancelWithBodyWithResponse(ctx context.Context, userId string, eventId string, eventId1 string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UsersUserEventsEventInstancesEventCancelResponse, error)

	UsersUserEventsEventInstancesEventCancelWithResponse(ctx context.Context, userId string, eventId string, eventId1 string, body UsersUserEventsEventInstancesEventCancelJSONRequestBody, reqEditors ...RequestEditorFn) (*UsersUserEventsEventInstancesEventCancelResponse, error)

	// UsersUserEventsEventInstancesEventDeclineWithBodyWithResponse request with any body
	UsersUserEventsEventInstancesEventDeclineWithBodyWithResponse(ctx context.Context, userId string, eventId string, eventId1 string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UsersUserEventsEventInstancesEventDeclineResponse, error)

	UsersUserEventsEventInstancesEventDeclineWithResponse(ctx context.Context, userId string, eventId string, eventId1 string, body UsersUserEventsEventInstancesEventDeclineJSONRequestBody, reqEditors ...RequestEditorFn) (*UsersUserEventsEventInstancesEventDeclineResponse, error)

	// UsersUserEventsEventInstancesEventDismissReminderWithResponse request
	UsersUserEventsEventInstancesEventDismissReminderWithResponse(ctx context.Context, userId string, eventId string, eventId1 string, reqEditors ...RequestEditorFn) (*UsersUserEventsEventInstancesEventDismissReminderResponse, error)

	// UsersUserEventsEventInstancesEventForwardWithBodyWithResponse request with any body
	UsersUserEventsEventInstancesEventForwardWithBodyWithResponse(ctx context.Context, userId string, eventId string, eventId1 string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UsersUserEventsEventInstancesEventForwardResponse, error)

	UsersUserEventsEventInstancesEventForwardWithResponse(ctx context.Context, userId string, eventId string, eventId1 string, body UsersUserEventsEventInstancesEventForwardJSONRequestBody, reqEditors ...RequestEditorFn) (*UsersUserEventsEventInstancesEventForwardResponse, error)

	// UsersUserEventsEventInstancesEventSnoozeReminderWithBodyWithResponse request with any body
	UsersUserEventsEventInstancesEventSnoozeReminderWithBodyWithResponse(ctx context.Context, userId string, eventId string, eventId1 string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UsersUserEventsEventInstancesEventSnoozeReminderResponse, error)

	UsersUserEventsEventInstancesEventSnoozeReminderWithResponse(ctx context.Context, userId string, eventId string, eventId1 string, body UsersUserEventsEventInstancesEventSnoozeReminderJSONRequestBody, reqEditors ...RequestEditorFn) (*UsersUserEventsEventInstancesEventSnoozeReminderResponse, error)

	// UsersUserEventsEventInstancesEventTentativelyAcceptWithBodyWithResponse request with any body
	UsersUserEventsEventInstancesEventTentativelyAcceptWithBodyWithResponse(ctx context.Context, userId string, eventId string, eventId1 string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UsersUserEventsEventInstancesEventTentativelyAcceptResponse, error)

	UsersUserEventsEventInstancesEventTentativelyAcceptWithResponse(ctx context.Context, userId string, eventId string, eventId1 string, body UsersUserEventsEventInstancesEventTentativelyAcceptJSONRequestBody, reqEditors ...RequestEditorFn) (*UsersUserEventsEventInstancesEventTentativelyAcceptResponse, error)

	// UsersUserEventsEventAcceptWithBodyWithResponse request with any body
	UsersUserEventsEventAcceptWithBodyWithResponse(ctx context.Context, userId string, eventId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UsersUserEventsEventAcceptResponse, error)

	UsersUserEventsEventAcceptWithResponse(ctx context.Context, userId string, eventId string, body UsersUserEventsEventAcceptJSONRequestBody, reqEditors ...RequestEditorFn) (*UsersUserEventsEventAcceptResponse, error)

	// UsersUserEventsEventCancelWithBodyWithResponse request with any body
	UsersUserEventsEventCancelWithBodyWithResponse(ctx context.Context, userId string, eventId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UsersUserEventsEventCancelResponse, error)

	UsersUserEventsEventCancelWithResponse(ctx context.Context, userId string, eventId string, body UsersUserEventsEventCancelJSONRequestBody, reqEditors ...RequestEditorFn) (*UsersUserEventsEventCancelResponse, error)

	// UsersUserEventsEventDeclineWithBodyWithResponse request with any body
	UsersUserEventsEventDeclineWithBodyWithResponse(ctx context.Context, userId string, eventId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UsersUserEventsEventDeclineResponse, error)

	UsersUserEventsEventDeclineWithResponse(ctx context.Context, userId string, eventId string, body UsersUserEventsEventDeclineJSONRequestBody, reqEditors ...RequestEditorFn) (*UsersUserEventsEventDeclineResponse, error)

	// UsersUserEventsEventDismissReminderWithResponse request
	UsersUserEventsEventDismissReminderWithResponse(ctx context.Context, userId string, eventId string, reqEditors ...RequestEditorFn) (*UsersUserEventsEventDismissReminderResponse, error)

	// UsersUserEventsEventForwardWithBodyWithResponse request with any body
	UsersUserEventsEventForwardWithBodyWithResponse(ctx context.Context, userId string, eventId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UsersUserEventsEventForwardResponse, error)

	UsersUserEventsEventForwardWithResponse(ctx context.Context, userId string, eventId string, body UsersUserEventsEventForwardJSONRequestBody, reqEditors ...RequestEditorFn) (*UsersUserEventsEventForwardResponse, error)

	// UsersUserEventsEventSnoozeReminderWithBodyWithResponse request with any body
	UsersUserEventsEventSnoozeReminderWithBodyWithResponse(ctx context.Context, userId string, eventId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UsersUserEventsEventSnoozeReminderResponse, error)

	UsersUserEventsEventSnoozeReminderWithResponse(ctx context.Context, userId string, eventId string, body UsersUserEventsEventSnoozeReminderJSONRequestBody, reqEditors ...RequestEditorFn) (*UsersUserEventsEventSnoozeReminderResponse, error)

	// UsersUserEventsEventTentativelyAcceptWithBodyWithResponse request with any body
	UsersUserEventsEventTentativelyAcceptWithBodyWithResponse(ctx context.Context, userId string, eventId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UsersUserEventsEventTentativelyAcceptResponse, error)

	UsersUserEventsEventTentativelyAcceptWithResponse(ctx context.Context, userId string, eventId string, body UsersUserEventsEventTentativelyAcceptJSONRequestBody, reqEditors ...RequestEditorFn) (*UsersUserEventsEventTentativelyAcceptResponse, error)

	// UsersListExtensionsWithResponse request
	UsersListExtensionsWithResponse(ctx context.Context, userId string, params *UsersListExtensionsParams, reqEditors ...RequestEditorFn) (*UsersListExtensionsResponse, error)

	// UsersCreateExtensionsWithBodyWithResponse request with any body
	UsersCreateExtensionsWithBodyWithResponse(ctx context.Context, userId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UsersCreateExtensionsResponse, error)

	UsersCreateExtensionsWithResponse(ctx context.Context, userId string, body UsersCreateExtensionsJSONRequestBody, reqEditors ...RequestEditorFn) (*UsersCreateExtensionsResponse, error)

	// UsersExtensionsGetCount4b1cWithResponse request
	UsersExtensionsGetCount4b1cWithResponse(ctx context.Context, userId string, params *UsersExtensionsGetCount4b1cParams, reqEditors ...RequestEditorFn) (*UsersExtensionsGetCount4b1cResponse, error)

	// UsersDeleteExtensionsWithResponse request
	UsersDeleteExtensionsWithResponse(ctx context.Context, userId string, extensionId string, params *UsersDeleteExtensionsParams, reqEditors ...RequestEditorFn) (*UsersDeleteExtensionsResponse, error)

	// UsersGetExtensionsWithResponse request
	UsersGetExtensionsWithResponse(ctx context.Context, userId string, extensionId string, params *UsersGetExtensionsParams, reqEditors ...RequestEditorFn) (*UsersGetExtensionsResponse, error)

	// UsersUpdateExtensionsWithBodyWithResponse request with any body
	UsersUpdateExtensionsWithBodyWithResponse(ctx context.Context, userId string, extensionId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UsersUpdateExtensionsResponse, error)

	UsersUpdateExtensionsWithResponse(ctx context.Context, userId string, extensionId string, body UsersUpdateExtensionsJSONRequestBody, reqEditors ...RequestEditorFn) (*UsersUpdateExtensionsResponse, error)
}

type UsersUserListUserResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON2XX      *MicrosoftGraphUserCollectionResponse
	JSONDefault  *Error
}

// Status returns HTTPResponse.Status
func (r UsersUserListUserResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UsersUserListUserResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UsersUserCreateUserResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON2XX      *MicrosoftGraphUser
	JSONDefault  *Error
}

// Status returns HTTPResponse.Status
func (r UsersUserCreateUserResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UsersUserCreateUserResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UsersUserDeleteUserResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSONDefault  *Error
}

// Status returns HTTPResponse.Status
func (r UsersUserDeleteUserResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UsersUserDeleteUserResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UsersUserGetUserResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON2XX      *MicrosoftGraphUser
	JSONDefault  *Error
}

// Status returns HTTPResponse.Status
func (r UsersUserGetUserResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UsersUserGetUserResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UsersUserUpdateUserResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON2XX      *MicrosoftGraphUser
	JSONDefault  *Error
}

// Status returns HTTPResponse.Status
func (r UsersUserUpdateUserResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UsersUserUpdateUserResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UsersListEventsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON2XX      *MicrosoftGraphEventCollectionResponse
	JSONDefault  *Error
}

// Status returns HTTPResponse.Status
func (r UsersListEventsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UsersListEventsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UsersCreateEventsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON2XX      *MicrosoftGraphEvent
	JSONDefault  *Error
}

// Status returns HTTPResponse.Status
func (r UsersCreateEventsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UsersCreateEventsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UsersEventsGetCountD443Response struct {
	Body         []byte
	HTTPResponse *http.Response
	JSONDefault  *Error
}

// Status returns HTTPResponse.Status
func (r UsersEventsGetCountD443Response) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UsersEventsGetCountD443Response) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UsersUserEventsDeltaResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON2XX      *struct {
		OdataDeltaLink *string                `json:"@odata.deltaLink"`
		OdataNextLink  *string                `json:"@odata.nextLink"`
		Value          *[]MicrosoftGraphEvent `json:"value,omitempty"`
	}
	JSONDefault *Error
}

// Status returns HTTPResponse.Status
func (r UsersUserEventsDeltaResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UsersUserEventsDeltaResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UsersDeleteEventsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSONDefault  *Error
}

// Status returns HTTPResponse.Status
func (r UsersDeleteEventsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UsersDeleteEventsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UsersGetEventsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON2XX      *MicrosoftGraphEvent
	JSONDefault  *Error
}

// Status returns HTTPResponse.Status
func (r UsersGetEventsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UsersGetEventsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UsersUpdateEventsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON2XX      *MicrosoftGraphEvent
	JSONDefault  *Error
}

// Status returns HTTPResponse.Status
func (r UsersUpdateEventsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UsersUpdateEventsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UsersEventsListAttachmentsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON2XX      *MicrosoftGraphAttachmentCollectionResponse
	JSONDefault  *Error
}

// Status returns HTTPResponse.Status
func (r UsersEventsListAttachmentsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UsersEventsListAttachmentsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UsersEventsCreateAttachmentsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON2XX      *MicrosoftGraphAttachment
	JSONDefault  *Error
}

// Status returns HTTPResponse.Status
func (r UsersEventsCreateAttachmentsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UsersEventsCreateAttachmentsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UsersEventsAttachmentsGetCount711fResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSONDefault  *Error
}

// Status returns HTTPResponse.Status
func (r UsersEventsAttachmentsGetCount711fResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UsersEventsAttachmentsGetCount711fResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UsersUserEventsEventAttachmentsCreateUploadSessionResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON2XX      *struct {
		union json.RawMessage
	}
	JSONDefault *Error
}

// Status returns HTTPResponse.Status
func (r UsersUserEventsEventAttachmentsCreateUploadSessionResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UsersUserEventsEventAttachmentsCreateUploadSessionResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UsersEventsDeleteAttachmentsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSONDefault  *Error
}

// Status returns HTTPResponse.Status
func (r UsersEventsDeleteAttachmentsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UsersEventsDeleteAttachmentsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UsersEventsGetAttachmentsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON2XX      *MicrosoftGraphAttachment
	JSONDefault  *Error
}

// Status returns HTTPResponse.Status
func (r UsersEventsGetAttachmentsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UsersEventsGetAttachmentsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UsersEventsGetCalendarResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON2XX      *MicrosoftGraphCalendar
	JSONDefault  *Error
}

// Status returns HTTPResponse.Status
func (r UsersEventsGetCalendarResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UsersEventsGetCalendarResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UsersEventsListExtensionsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON2XX      *MicrosoftGraphExtensionCollectionResponse
	JSONDefault  *Error
}

// Status returns HTTPResponse.Status
func (r UsersEventsListExtensionsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UsersEventsListExtensionsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UsersEventsCreateExtensionsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON2XX      *MicrosoftGraphExtension
	JSONDefault  *Error
}

// Status returns HTTPResponse.Status
func (r UsersEventsCreateExtensionsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UsersEventsCreateExtensionsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UsersEventsExtensionsGetCount0041Response struct {
	Body         []byte
	HTTPResponse *http.Response
	JSONDefault  *Error
}

// Status returns HTTPResponse.Status
func (r UsersEventsExtensionsGetCount0041Response) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UsersEventsExtensionsGetCount0041Response) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UsersEventsDeleteExtensionsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSONDefault  *Error
}

// Status returns HTTPResponse.Status
func (r UsersEventsDeleteExtensionsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UsersEventsDeleteExtensionsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UsersEventsGetExtensionsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON2XX      *MicrosoftGraphExtension
	JSONDefault  *Error
}

// Status returns HTTPResponse.Status
func (r UsersEventsGetExtensionsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UsersEventsGetExtensionsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UsersEventsUpdateExtensionsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON2XX      *MicrosoftGraphExtension
	JSONDefault  *Error
}

// Status returns HTTPResponse.Status
func (r UsersEventsUpdateExtensionsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UsersEventsUpdateExtensionsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UsersEventsListInstancesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON2XX      *MicrosoftGraphEventCollectionResponse
	JSONDefault  *Error
}

// Status returns HTTPResponse.Status
func (r UsersEventsListInstancesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UsersEventsListInstancesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UsersEventsInstancesGetCountF922Response struct {
	Body         []byte
	HTTPResponse *http.Response
	JSONDefault  *Error
}

// Status returns HTTPResponse.Status
func (r UsersEventsInstancesGetCountF922Response) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UsersEventsInstancesGetCountF922Response) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UsersUserEventsEventInstancesDeltaResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON2XX      *struct {
		OdataDeltaLink *string                `json:"@odata.deltaLink"`
		OdataNextLink  *string                `json:"@odata.nextLink"`
		Value          *[]MicrosoftGraphEvent `json:"value,omitempty"`
	}
	JSONDefault *Error
}

// Status returns HTTPResponse.Status
func (r UsersUserEventsEventInstancesDeltaResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UsersUserEventsEventInstancesDeltaResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UsersEventsGetInstancesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON2XX      *MicrosoftGraphEvent
	JSONDefault  *Error
}

// Status returns HTTPResponse.Status
func (r UsersEventsGetInstancesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UsersEventsGetInstancesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UsersEventsInstancesListAttachmentsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON2XX      *MicrosoftGraphAttachmentCollectionResponse
	JSONDefault  *Error
}

// Status returns HTTPResponse.Status
func (r UsersEventsInstancesListAttachmentsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UsersEventsInstancesListAttachmentsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UsersEventsInstancesCreateAttachmentsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON2XX      *MicrosoftGraphAttachment
	JSONDefault  *Error
}

// Status returns HTTPResponse.Status
func (r UsersEventsInstancesCreateAttachmentsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UsersEventsInstancesCreateAttachmentsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UsersEventsInstancesAttachmentsGetCount3c02Response struct {
	Body         []byte
	HTTPResponse *http.Response
	JSONDefault  *Error
}

// Status returns HTTPResponse.Status
func (r UsersEventsInstancesAttachmentsGetCount3c02Response) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UsersEventsInstancesAttachmentsGetCount3c02Response) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UsersUserEventsEventInstancesEventAttachmentsCreateUploadSessionResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON2XX      *struct {
		union json.RawMessage
	}
	JSONDefault *Error
}

// Status returns HTTPResponse.Status
func (r UsersUserEventsEventInstancesEventAttachmentsCreateUploadSessionResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UsersUserEventsEventInstancesEventAttachmentsCreateUploadSessionResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UsersEventsInstancesDeleteAttachmentsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSONDefault  *Error
}

// Status returns HTTPResponse.Status
func (r UsersEventsInstancesDeleteAttachmentsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UsersEventsInstancesDeleteAttachmentsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UsersEventsInstancesGetAttachmentsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON2XX      *MicrosoftGraphAttachment
	JSONDefault  *Error
}

// Status returns HTTPResponse.Status
func (r UsersEventsInstancesGetAttachmentsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UsersEventsInstancesGetAttachmentsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UsersEventsInstancesGetCalendarResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON2XX      *MicrosoftGraphCalendar
	JSONDefault  *Error
}

// Status returns HTTPResponse.Status
func (r UsersEventsInstancesGetCalendarResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UsersEventsInstancesGetCalendarResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UsersEventsInstancesListExtensionsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON2XX      *MicrosoftGraphExtensionCollectionResponse
	JSONDefault  *Error
}

// Status returns HTTPResponse.Status
func (r UsersEventsInstancesListExtensionsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UsersEventsInstancesListExtensionsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UsersEventsInstancesCreateExtensionsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON2XX      *MicrosoftGraphExtension
	JSONDefault  *Error
}

// Status returns HTTPResponse.Status
func (r UsersEventsInstancesCreateExtensionsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UsersEventsInstancesCreateExtensionsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UsersEventsInstancesExtensionsGetCount8eedResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSONDefault  *Error
}

// Status returns HTTPResponse.Status
func (r UsersEventsInstancesExtensionsGetCount8eedResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UsersEventsInstancesExtensionsGetCount8eedResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UsersEventsInstancesDeleteExtensionsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSONDefault  *Error
}

// Status returns HTTPResponse.Status
func (r UsersEventsInstancesDeleteExtensionsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UsersEventsInstancesDeleteExtensionsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UsersEventsInstancesGetExtensionsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON2XX      *MicrosoftGraphExtension
	JSONDefault  *Error
}

// Status returns HTTPResponse.Status
func (r UsersEventsInstancesGetExtensionsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UsersEventsInstancesGetExtensionsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UsersEventsInstancesUpdateExtensionsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON2XX      *MicrosoftGraphExtension
	JSONDefault  *Error
}

// Status returns HTTPResponse.Status
func (r UsersEventsInstancesUpdateExtensionsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UsersEventsInstancesUpdateExtensionsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UsersUserEventsEventInstancesEventAcceptResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSONDefault  *Error
}

// Status returns HTTPResponse.Status
func (r UsersUserEventsEventInstancesEventAcceptResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UsersUserEventsEventInstancesEventAcceptResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UsersUserEventsEventInstancesEventCancelResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSONDefault  *Error
}

// Status returns HTTPResponse.Status
func (r UsersUserEventsEventInstancesEventCancelResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UsersUserEventsEventInstancesEventCancelResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UsersUserEventsEventInstancesEventDeclineResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSONDefault  *Error
}

// Status returns HTTPResponse.Status
func (r UsersUserEventsEventInstancesEventDeclineResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UsersUserEventsEventInstancesEventDeclineResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UsersUserEventsEventInstancesEventDismissReminderResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSONDefault  *Error
}

// Status returns HTTPResponse.Status
func (r UsersUserEventsEventInstancesEventDismissReminderResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UsersUserEventsEventInstancesEventDismissReminderResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UsersUserEventsEventInstancesEventForwardResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSONDefault  *Error
}

// Status returns HTTPResponse.Status
func (r UsersUserEventsEventInstancesEventForwardResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UsersUserEventsEventInstancesEventForwardResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UsersUserEventsEventInstancesEventSnoozeReminderResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSONDefault  *Error
}

// Status returns HTTPResponse.Status
func (r UsersUserEventsEventInstancesEventSnoozeReminderResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UsersUserEventsEventInstancesEventSnoozeReminderResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UsersUserEventsEventInstancesEventTentativelyAcceptResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSONDefault  *Error
}

// Status returns HTTPResponse.Status
func (r UsersUserEventsEventInstancesEventTentativelyAcceptResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UsersUserEventsEventInstancesEventTentativelyAcceptResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UsersUserEventsEventAcceptResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSONDefault  *Error
}

// Status returns HTTPResponse.Status
func (r UsersUserEventsEventAcceptResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UsersUserEventsEventAcceptResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UsersUserEventsEventCancelResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSONDefault  *Error
}

// Status returns HTTPResponse.Status
func (r UsersUserEventsEventCancelResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UsersUserEventsEventCancelResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UsersUserEventsEventDeclineResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSONDefault  *Error
}

// Status returns HTTPResponse.Status
func (r UsersUserEventsEventDeclineResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UsersUserEventsEventDeclineResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UsersUserEventsEventDismissReminderResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSONDefault  *Error
}

// Status returns HTTPResponse.Status
func (r UsersUserEventsEventDismissReminderResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UsersUserEventsEventDismissReminderResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UsersUserEventsEventForwardResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSONDefault  *Error
}

// Status returns HTTPResponse.Status
func (r UsersUserEventsEventForwardResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UsersUserEventsEventForwardResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UsersUserEventsEventSnoozeReminderResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSONDefault  *Error
}

// Status returns HTTPResponse.Status
func (r UsersUserEventsEventSnoozeReminderResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UsersUserEventsEventSnoozeReminderResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UsersUserEventsEventTentativelyAcceptResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSONDefault  *Error
}

// Status returns HTTPResponse.Status
func (r UsersUserEventsEventTentativelyAcceptResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UsersUserEventsEventTentativelyAcceptResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UsersListExtensionsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON2XX      *MicrosoftGraphExtensionCollectionResponse
	JSONDefault  *Error
}

// Status returns HTTPResponse.Status
func (r UsersListExtensionsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UsersListExtensionsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UsersCreateExtensionsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON2XX      *MicrosoftGraphExtension
	JSONDefault  *Error
}

// Status returns HTTPResponse.Status
func (r UsersCreateExtensionsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UsersCreateExtensionsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UsersExtensionsGetCount4b1cResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSONDefault  *Error
}

// Status returns HTTPResponse.Status
func (r UsersExtensionsGetCount4b1cResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UsersExtensionsGetCount4b1cResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UsersDeleteExtensionsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSONDefault  *Error
}

// Status returns HTTPResponse.Status
func (r UsersDeleteExtensionsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UsersDeleteExtensionsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UsersGetExtensionsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON2XX      *MicrosoftGraphExtension
	JSONDefault  *Error
}

// Status returns HTTPResponse.Status
func (r UsersGetExtensionsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UsersGetExtensionsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UsersUpdateExtensionsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON2XX      *MicrosoftGraphExtension
	JSONDefault  *Error
}

// Status returns HTTPResponse.Status
func (r UsersUpdateExtensionsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UsersUpdateExtensionsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// UsersUserListUserWithResponse request returning *UsersUserListUserResponse
func (c *ClientWithResponses) UsersUserListUserWithResponse(ctx context.Context, params *UsersUserListUserParams, reqEditors ...RequestEditorFn) (*UsersUserListUserResponse, error) {
	rsp, err := c.UsersUserListUser(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUsersUserListUserResponse(rsp)
}

// UsersUserCreateUserWithBodyWithResponse request with arbitrary body returning *UsersUserCreateUserResponse
func (c *ClientWithResponses) UsersUserCreateUserWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UsersUserCreateUserResponse, error) {
	rsp, err := c.UsersUserCreateUserWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUsersUserCreateUserResponse(rsp)
}

func (c *ClientWithResponses) UsersUserCreateUserWithResponse(ctx context.Context, body UsersUserCreateUserJSONRequestBody, reqEditors ...RequestEditorFn) (*UsersUserCreateUserResponse, error) {
	rsp, err := c.UsersUserCreateUser(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUsersUserCreateUserResponse(rsp)
}

// UsersUserDeleteUserWithResponse request returning *UsersUserDeleteUserResponse
func (c *ClientWithResponses) UsersUserDeleteUserWithResponse(ctx context.Context, userId string, params *UsersUserDeleteUserParams, reqEditors ...RequestEditorFn) (*UsersUserDeleteUserResponse, error) {
	rsp, err := c.UsersUserDeleteUser(ctx, userId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUsersUserDeleteUserResponse(rsp)
}

// UsersUserGetUserWithResponse request returning *UsersUserGetUserResponse
func (c *ClientWithResponses) UsersUserGetUserWithResponse(ctx context.Context, userId string, params *UsersUserGetUserParams, reqEditors ...RequestEditorFn) (*UsersUserGetUserResponse, error) {
	rsp, err := c.UsersUserGetUser(ctx, userId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUsersUserGetUserResponse(rsp)
}

// UsersUserUpdateUserWithBodyWithResponse request with arbitrary body returning *UsersUserUpdateUserResponse
func (c *ClientWithResponses) UsersUserUpdateUserWithBodyWithResponse(ctx context.Context, userId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UsersUserUpdateUserResponse, error) {
	rsp, err := c.UsersUserUpdateUserWithBody(ctx, userId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUsersUserUpdateUserResponse(rsp)
}

func (c *ClientWithResponses) UsersUserUpdateUserWithResponse(ctx context.Context, userId string, body UsersUserUpdateUserJSONRequestBody, reqEditors ...RequestEditorFn) (*UsersUserUpdateUserResponse, error) {
	rsp, err := c.UsersUserUpdateUser(ctx, userId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUsersUserUpdateUserResponse(rsp)
}

// UsersListEventsWithResponse request returning *UsersListEventsResponse
func (c *ClientWithResponses) UsersListEventsWithResponse(ctx context.Context, userId string, params *UsersListEventsParams, reqEditors ...RequestEditorFn) (*UsersListEventsResponse, error) {
	rsp, err := c.UsersListEvents(ctx, userId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUsersListEventsResponse(rsp)
}

// UsersCreateEventsWithBodyWithResponse request with arbitrary body returning *UsersCreateEventsResponse
func (c *ClientWithResponses) UsersCreateEventsWithBodyWithResponse(ctx context.Context, userId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UsersCreateEventsResponse, error) {
	rsp, err := c.UsersCreateEventsWithBody(ctx, userId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUsersCreateEventsResponse(rsp)
}

func (c *ClientWithResponses) UsersCreateEventsWithResponse(ctx context.Context, userId string, body UsersCreateEventsJSONRequestBody, reqEditors ...RequestEditorFn) (*UsersCreateEventsResponse, error) {
	rsp, err := c.UsersCreateEvents(ctx, userId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUsersCreateEventsResponse(rsp)
}

// UsersEventsGetCountD443WithResponse request returning *UsersEventsGetCountD443Response
func (c *ClientWithResponses) UsersEventsGetCountD443WithResponse(ctx context.Context, userId string, params *UsersEventsGetCountD443Params, reqEditors ...RequestEditorFn) (*UsersEventsGetCountD443Response, error) {
	rsp, err := c.UsersEventsGetCountD443(ctx, userId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUsersEventsGetCountD443Response(rsp)
}

// UsersUserEventsDeltaWithResponse request returning *UsersUserEventsDeltaResponse
func (c *ClientWithResponses) UsersUserEventsDeltaWithResponse(ctx context.Context, userId string, params *UsersUserEventsDeltaParams, reqEditors ...RequestEditorFn) (*UsersUserEventsDeltaResponse, error) {
	rsp, err := c.UsersUserEventsDelta(ctx, userId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUsersUserEventsDeltaResponse(rsp)
}

// UsersDeleteEventsWithResponse request returning *UsersDeleteEventsResponse
func (c *ClientWithResponses) UsersDeleteEventsWithResponse(ctx context.Context, userId string, eventId string, params *UsersDeleteEventsParams, reqEditors ...RequestEditorFn) (*UsersDeleteEventsResponse, error) {
	rsp, err := c.UsersDeleteEvents(ctx, userId, eventId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUsersDeleteEventsResponse(rsp)
}

// UsersGetEventsWithResponse request returning *UsersGetEventsResponse
func (c *ClientWithResponses) UsersGetEventsWithResponse(ctx context.Context, userId string, eventId string, params *UsersGetEventsParams, reqEditors ...RequestEditorFn) (*UsersGetEventsResponse, error) {
	rsp, err := c.UsersGetEvents(ctx, userId, eventId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUsersGetEventsResponse(rsp)
}

// UsersUpdateEventsWithBodyWithResponse request with arbitrary body returning *UsersUpdateEventsResponse
func (c *ClientWithResponses) UsersUpdateEventsWithBodyWithResponse(ctx context.Context, userId string, eventId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UsersUpdateEventsResponse, error) {
	rsp, err := c.UsersUpdateEventsWithBody(ctx, userId, eventId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUsersUpdateEventsResponse(rsp)
}

func (c *ClientWithResponses) UsersUpdateEventsWithResponse(ctx context.Context, userId string, eventId string, body UsersUpdateEventsJSONRequestBody, reqEditors ...RequestEditorFn) (*UsersUpdateEventsResponse, error) {
	rsp, err := c.UsersUpdateEvents(ctx, userId, eventId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUsersUpdateEventsResponse(rsp)
}

// UsersEventsListAttachmentsWithResponse request returning *UsersEventsListAttachmentsResponse
func (c *ClientWithResponses) UsersEventsListAttachmentsWithResponse(ctx context.Context, userId string, eventId string, params *UsersEventsListAttachmentsParams, reqEditors ...RequestEditorFn) (*UsersEventsListAttachmentsResponse, error) {
	rsp, err := c.UsersEventsListAttachments(ctx, userId, eventId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUsersEventsListAttachmentsResponse(rsp)
}

// UsersEventsCreateAttachmentsWithBodyWithResponse request with arbitrary body returning *UsersEventsCreateAttachmentsResponse
func (c *ClientWithResponses) UsersEventsCreateAttachmentsWithBodyWithResponse(ctx context.Context, userId string, eventId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UsersEventsCreateAttachmentsResponse, error) {
	rsp, err := c.UsersEventsCreateAttachmentsWithBody(ctx, userId, eventId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUsersEventsCreateAttachmentsResponse(rsp)
}

func (c *ClientWithResponses) UsersEventsCreateAttachmentsWithResponse(ctx context.Context, userId string, eventId string, body UsersEventsCreateAttachmentsJSONRequestBody, reqEditors ...RequestEditorFn) (*UsersEventsCreateAttachmentsResponse, error) {
	rsp, err := c.UsersEventsCreateAttachments(ctx, userId, eventId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUsersEventsCreateAttachmentsResponse(rsp)
}

// UsersEventsAttachmentsGetCount711fWithResponse request returning *UsersEventsAttachmentsGetCount711fResponse
func (c *ClientWithResponses) UsersEventsAttachmentsGetCount711fWithResponse(ctx context.Context, userId string, eventId string, params *UsersEventsAttachmentsGetCount711fParams, reqEditors ...RequestEditorFn) (*UsersEventsAttachmentsGetCount711fResponse, error) {
	rsp, err := c.UsersEventsAttachmentsGetCount711f(ctx, userId, eventId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUsersEventsAttachmentsGetCount711fResponse(rsp)
}

// UsersUserEventsEventAttachmentsCreateUploadSessionWithBodyWithResponse request with arbitrary body returning *UsersUserEventsEventAttachmentsCreateUploadSessionResponse
func (c *ClientWithResponses) UsersUserEventsEventAttachmentsCreateUploadSessionWithBodyWithResponse(ctx context.Context, userId string, eventId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UsersUserEventsEventAttachmentsCreateUploadSessionResponse, error) {
	rsp, err := c.UsersUserEventsEventAttachmentsCreateUploadSessionWithBody(ctx, userId, eventId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUsersUserEventsEventAttachmentsCreateUploadSessionResponse(rsp)
}

func (c *ClientWithResponses) UsersUserEventsEventAttachmentsCreateUploadSessionWithResponse(ctx context.Context, userId string, eventId string, body UsersUserEventsEventAttachmentsCreateUploadSessionJSONRequestBody, reqEditors ...RequestEditorFn) (*UsersUserEventsEventAttachmentsCreateUploadSessionResponse, error) {
	rsp, err := c.UsersUserEventsEventAttachmentsCreateUploadSession(ctx, userId, eventId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUsersUserEventsEventAttachmentsCreateUploadSessionResponse(rsp)
}

// UsersEventsDeleteAttachmentsWithResponse request returning *UsersEventsDeleteAttachmentsResponse
func (c *ClientWithResponses) UsersEventsDeleteAttachmentsWithResponse(ctx context.Context, userId string, eventId string, attachmentId string, params *UsersEventsDeleteAttachmentsParams, reqEditors ...RequestEditorFn) (*UsersEventsDeleteAttachmentsResponse, error) {
	rsp, err := c.UsersEventsDeleteAttachments(ctx, userId, eventId, attachmentId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUsersEventsDeleteAttachmentsResponse(rsp)
}

// UsersEventsGetAttachmentsWithResponse request returning *UsersEventsGetAttachmentsResponse
func (c *ClientWithResponses) UsersEventsGetAttachmentsWithResponse(ctx context.Context, userId string, eventId string, attachmentId string, params *UsersEventsGetAttachmentsParams, reqEditors ...RequestEditorFn) (*UsersEventsGetAttachmentsResponse, error) {
	rsp, err := c.UsersEventsGetAttachments(ctx, userId, eventId, attachmentId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUsersEventsGetAttachmentsResponse(rsp)
}

// UsersEventsGetCalendarWithResponse request returning *UsersEventsGetCalendarResponse
func (c *ClientWithResponses) UsersEventsGetCalendarWithResponse(ctx context.Context, userId string, eventId string, params *UsersEventsGetCalendarParams, reqEditors ...RequestEditorFn) (*UsersEventsGetCalendarResponse, error) {
	rsp, err := c.UsersEventsGetCalendar(ctx, userId, eventId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUsersEventsGetCalendarResponse(rsp)
}

// UsersEventsListExtensionsWithResponse request returning *UsersEventsListExtensionsResponse
func (c *ClientWithResponses) UsersEventsListExtensionsWithResponse(ctx context.Context, userId string, eventId string, params *UsersEventsListExtensionsParams, reqEditors ...RequestEditorFn) (*UsersEventsListExtensionsResponse, error) {
	rsp, err := c.UsersEventsListExtensions(ctx, userId, eventId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUsersEventsListExtensionsResponse(rsp)
}

// UsersEventsCreateExtensionsWithBodyWithResponse request with arbitrary body returning *UsersEventsCreateExtensionsResponse
func (c *ClientWithResponses) UsersEventsCreateExtensionsWithBodyWithResponse(ctx context.Context, userId string, eventId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UsersEventsCreateExtensionsResponse, error) {
	rsp, err := c.UsersEventsCreateExtensionsWithBody(ctx, userId, eventId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUsersEventsCreateExtensionsResponse(rsp)
}

func (c *ClientWithResponses) UsersEventsCreateExtensionsWithResponse(ctx context.Context, userId string, eventId string, body UsersEventsCreateExtensionsJSONRequestBody, reqEditors ...RequestEditorFn) (*UsersEventsCreateExtensionsResponse, error) {
	rsp, err := c.UsersEventsCreateExtensions(ctx, userId, eventId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUsersEventsCreateExtensionsResponse(rsp)
}

// UsersEventsExtensionsGetCount0041WithResponse request returning *UsersEventsExtensionsGetCount0041Response
func (c *ClientWithResponses) UsersEventsExtensionsGetCount0041WithResponse(ctx context.Context, userId string, eventId string, params *UsersEventsExtensionsGetCount0041Params, reqEditors ...RequestEditorFn) (*UsersEventsExtensionsGetCount0041Response, error) {
	rsp, err := c.UsersEventsExtensionsGetCount0041(ctx, userId, eventId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUsersEventsExtensionsGetCount0041Response(rsp)
}

// UsersEventsDeleteExtensionsWithResponse request returning *UsersEventsDeleteExtensionsResponse
func (c *ClientWithResponses) UsersEventsDeleteExtensionsWithResponse(ctx context.Context, userId string, eventId string, extensionId string, params *UsersEventsDeleteExtensionsParams, reqEditors ...RequestEditorFn) (*UsersEventsDeleteExtensionsResponse, error) {
	rsp, err := c.UsersEventsDeleteExtensions(ctx, userId, eventId, extensionId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUsersEventsDeleteExtensionsResponse(rsp)
}

// UsersEventsGetExtensionsWithResponse request returning *UsersEventsGetExtensionsResponse
func (c *ClientWithResponses) UsersEventsGetExtensionsWithResponse(ctx context.Context, userId string, eventId string, extensionId string, params *UsersEventsGetExtensionsParams, reqEditors ...RequestEditorFn) (*UsersEventsGetExtensionsResponse, error) {
	rsp, err := c.UsersEventsGetExtensions(ctx, userId, eventId, extensionId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUsersEventsGetExtensionsResponse(rsp)
}

// UsersEventsUpdateExtensionsWithBodyWithResponse request with arbitrary body returning *UsersEventsUpdateExtensionsResponse
func (c *ClientWithResponses) UsersEventsUpdateExtensionsWithBodyWithResponse(ctx context.Context, userId string, eventId string, extensionId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UsersEventsUpdateExtensionsResponse, error) {
	rsp, err := c.UsersEventsUpdateExtensionsWithBody(ctx, userId, eventId, extensionId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUsersEventsUpdateExtensionsResponse(rsp)
}

func (c *ClientWithResponses) UsersEventsUpdateExtensionsWithResponse(ctx context.Context, userId string, eventId string, extensionId string, body UsersEventsUpdateExtensionsJSONRequestBody, reqEditors ...RequestEditorFn) (*UsersEventsUpdateExtensionsResponse, error) {
	rsp, err := c.UsersEventsUpdateExtensions(ctx, userId, eventId, extensionId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUsersEventsUpdateExtensionsResponse(rsp)
}

// UsersEventsListInstancesWithResponse request returning *UsersEventsListInstancesResponse
func (c *ClientWithResponses) UsersEventsListInstancesWithResponse(ctx context.Context, userId string, eventId string, params *UsersEventsListInstancesParams, reqEditors ...RequestEditorFn) (*UsersEventsListInstancesResponse, error) {
	rsp, err := c.UsersEventsListInstances(ctx, userId, eventId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUsersEventsListInstancesResponse(rsp)
}

// UsersEventsInstancesGetCountF922WithResponse request returning *UsersEventsInstancesGetCountF922Response
func (c *ClientWithResponses) UsersEventsInstancesGetCountF922WithResponse(ctx context.Context, userId string, eventId string, params *UsersEventsInstancesGetCountF922Params, reqEditors ...RequestEditorFn) (*UsersEventsInstancesGetCountF922Response, error) {
	rsp, err := c.UsersEventsInstancesGetCountF922(ctx, userId, eventId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUsersEventsInstancesGetCountF922Response(rsp)
}

// UsersUserEventsEventInstancesDeltaWithResponse request returning *UsersUserEventsEventInstancesDeltaResponse
func (c *ClientWithResponses) UsersUserEventsEventInstancesDeltaWithResponse(ctx context.Context, userId string, eventId string, params *UsersUserEventsEventInstancesDeltaParams, reqEditors ...RequestEditorFn) (*UsersUserEventsEventInstancesDeltaResponse, error) {
	rsp, err := c.UsersUserEventsEventInstancesDelta(ctx, userId, eventId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUsersUserEventsEventInstancesDeltaResponse(rsp)
}

// UsersEventsGetInstancesWithResponse request returning *UsersEventsGetInstancesResponse
func (c *ClientWithResponses) UsersEventsGetInstancesWithResponse(ctx context.Context, userId string, eventId string, eventId1 string, params *UsersEventsGetInstancesParams, reqEditors ...RequestEditorFn) (*UsersEventsGetInstancesResponse, error) {
	rsp, err := c.UsersEventsGetInstances(ctx, userId, eventId, eventId1, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUsersEventsGetInstancesResponse(rsp)
}

// UsersEventsInstancesListAttachmentsWithResponse request returning *UsersEventsInstancesListAttachmentsResponse
func (c *ClientWithResponses) UsersEventsInstancesListAttachmentsWithResponse(ctx context.Context, userId string, eventId string, eventId1 string, params *UsersEventsInstancesListAttachmentsParams, reqEditors ...RequestEditorFn) (*UsersEventsInstancesListAttachmentsResponse, error) {
	rsp, err := c.UsersEventsInstancesListAttachments(ctx, userId, eventId, eventId1, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUsersEventsInstancesListAttachmentsResponse(rsp)
}

// UsersEventsInstancesCreateAttachmentsWithBodyWithResponse request with arbitrary body returning *UsersEventsInstancesCreateAttachmentsResponse
func (c *ClientWithResponses) UsersEventsInstancesCreateAttachmentsWithBodyWithResponse(ctx context.Context, userId string, eventId string, eventId1 string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UsersEventsInstancesCreateAttachmentsResponse, error) {
	rsp, err := c.UsersEventsInstancesCreateAttachmentsWithBody(ctx, userId, eventId, eventId1, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUsersEventsInstancesCreateAttachmentsResponse(rsp)
}

func (c *ClientWithResponses) UsersEventsInstancesCreateAttachmentsWithResponse(ctx context.Context, userId string, eventId string, eventId1 string, body UsersEventsInstancesCreateAttachmentsJSONRequestBody, reqEditors ...RequestEditorFn) (*UsersEventsInstancesCreateAttachmentsResponse, error) {
	rsp, err := c.UsersEventsInstancesCreateAttachments(ctx, userId, eventId, eventId1, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUsersEventsInstancesCreateAttachmentsResponse(rsp)
}

// UsersEventsInstancesAttachmentsGetCount3c02WithResponse request returning *UsersEventsInstancesAttachmentsGetCount3c02Response
func (c *ClientWithResponses) UsersEventsInstancesAttachmentsGetCount3c02WithResponse(ctx context.Context, userId string, eventId string, eventId1 string, params *UsersEventsInstancesAttachmentsGetCount3c02Params, reqEditors ...RequestEditorFn) (*UsersEventsInstancesAttachmentsGetCount3c02Response, error) {
	rsp, err := c.UsersEventsInstancesAttachmentsGetCount3c02(ctx, userId, eventId, eventId1, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUsersEventsInstancesAttachmentsGetCount3c02Response(rsp)
}

// UsersUserEventsEventInstancesEventAttachmentsCreateUploadSessionWithBodyWithResponse request with arbitrary body returning *UsersUserEventsEventInstancesEventAttachmentsCreateUploadSessionResponse
func (c *ClientWithResponses) UsersUserEventsEventInstancesEventAttachmentsCreateUploadSessionWithBodyWithResponse(ctx context.Context, userId string, eventId string, eventId1 string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UsersUserEventsEventInstancesEventAttachmentsCreateUploadSessionResponse, error) {
	rsp, err := c.UsersUserEventsEventInstancesEventAttachmentsCreateUploadSessionWithBody(ctx, userId, eventId, eventId1, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUsersUserEventsEventInstancesEventAttachmentsCreateUploadSessionResponse(rsp)
}

func (c *ClientWithResponses) UsersUserEventsEventInstancesEventAttachmentsCreateUploadSessionWithResponse(ctx context.Context, userId string, eventId string, eventId1 string, body UsersUserEventsEventInstancesEventAttachmentsCreateUploadSessionJSONRequestBody, reqEditors ...RequestEditorFn) (*UsersUserEventsEventInstancesEventAttachmentsCreateUploadSessionResponse, error) {
	rsp, err := c.UsersUserEventsEventInstancesEventAttachmentsCreateUploadSession(ctx, userId, eventId, eventId1, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUsersUserEventsEventInstancesEventAttachmentsCreateUploadSessionResponse(rsp)
}

// UsersEventsInstancesDeleteAttachmentsWithResponse request returning *UsersEventsInstancesDeleteAttachmentsResponse
func (c *ClientWithResponses) UsersEventsInstancesDeleteAttachmentsWithResponse(ctx context.Context, userId string, eventId string, eventId1 string, attachmentId string, params *UsersEventsInstancesDeleteAttachmentsParams, reqEditors ...RequestEditorFn) (*UsersEventsInstancesDeleteAttachmentsResponse, error) {
	rsp, err := c.UsersEventsInstancesDeleteAttachments(ctx, userId, eventId, eventId1, attachmentId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUsersEventsInstancesDeleteAttachmentsResponse(rsp)
}

// UsersEventsInstancesGetAttachmentsWithResponse request returning *UsersEventsInstancesGetAttachmentsResponse
func (c *ClientWithResponses) UsersEventsInstancesGetAttachmentsWithResponse(ctx context.Context, userId string, eventId string, eventId1 string, attachmentId string, params *UsersEventsInstancesGetAttachmentsParams, reqEditors ...RequestEditorFn) (*UsersEventsInstancesGetAttachmentsResponse, error) {
	rsp, err := c.UsersEventsInstancesGetAttachments(ctx, userId, eventId, eventId1, attachmentId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUsersEventsInstancesGetAttachmentsResponse(rsp)
}

// UsersEventsInstancesGetCalendarWithResponse request returning *UsersEventsInstancesGetCalendarResponse
func (c *ClientWithResponses) UsersEventsInstancesGetCalendarWithResponse(ctx context.Context, userId string, eventId string, eventId1 string, params *UsersEventsInstancesGetCalendarParams, reqEditors ...RequestEditorFn) (*UsersEventsInstancesGetCalendarResponse, error) {
	rsp, err := c.UsersEventsInstancesGetCalendar(ctx, userId, eventId, eventId1, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUsersEventsInstancesGetCalendarResponse(rsp)
}

// UsersEventsInstancesListExtensionsWithResponse request returning *UsersEventsInstancesListExtensionsResponse
func (c *ClientWithResponses) UsersEventsInstancesListExtensionsWithResponse(ctx context.Context, userId string, eventId string, eventId1 string, params *UsersEventsInstancesListExtensionsParams, reqEditors ...RequestEditorFn) (*UsersEventsInstancesListExtensionsResponse, error) {
	rsp, err := c.UsersEventsInstancesListExtensions(ctx, userId, eventId, eventId1, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUsersEventsInstancesListExtensionsResponse(rsp)
}

// UsersEventsInstancesCreateExtensionsWithBodyWithResponse request with arbitrary body returning *UsersEventsInstancesCreateExtensionsResponse
func (c *ClientWithResponses) UsersEventsInstancesCreateExtensionsWithBodyWithResponse(ctx context.Context, userId string, eventId string, eventId1 string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UsersEventsInstancesCreateExtensionsResponse, error) {
	rsp, err := c.UsersEventsInstancesCreateExtensionsWithBody(ctx, userId, eventId, eventId1, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUsersEventsInstancesCreateExtensionsResponse(rsp)
}

func (c *ClientWithResponses) UsersEventsInstancesCreateExtensionsWithResponse(ctx context.Context, userId string, eventId string, eventId1 string, body UsersEventsInstancesCreateExtensionsJSONRequestBody, reqEditors ...RequestEditorFn) (*UsersEventsInstancesCreateExtensionsResponse, error) {
	rsp, err := c.UsersEventsInstancesCreateExtensions(ctx, userId, eventId, eventId1, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUsersEventsInstancesCreateExtensionsResponse(rsp)
}

// UsersEventsInstancesExtensionsGetCount8eedWithResponse request returning *UsersEventsInstancesExtensionsGetCount8eedResponse
func (c *ClientWithResponses) UsersEventsInstancesExtensionsGetCount8eedWithResponse(ctx context.Context, userId string, eventId string, eventId1 string, params *UsersEventsInstancesExtensionsGetCount8eedParams, reqEditors ...RequestEditorFn) (*UsersEventsInstancesExtensionsGetCount8eedResponse, error) {
	rsp, err := c.UsersEventsInstancesExtensionsGetCount8eed(ctx, userId, eventId, eventId1, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUsersEventsInstancesExtensionsGetCount8eedResponse(rsp)
}

// UsersEventsInstancesDeleteExtensionsWithResponse request returning *UsersEventsInstancesDeleteExtensionsResponse
func (c *ClientWithResponses) UsersEventsInstancesDeleteExtensionsWithResponse(ctx context.Context, userId string, eventId string, eventId1 string, extensionId string, params *UsersEventsInstancesDeleteExtensionsParams, reqEditors ...RequestEditorFn) (*UsersEventsInstancesDeleteExtensionsResponse, error) {
	rsp, err := c.UsersEventsInstancesDeleteExtensions(ctx, userId, eventId, eventId1, extensionId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUsersEventsInstancesDeleteExtensionsResponse(rsp)
}

// UsersEventsInstancesGetExtensionsWithResponse request returning *UsersEventsInstancesGetExtensionsResponse
func (c *ClientWithResponses) UsersEventsInstancesGetExtensionsWithResponse(ctx context.Context, userId string, eventId string, eventId1 string, extensionId string, params *UsersEventsInstancesGetExtensionsParams, reqEditors ...RequestEditorFn) (*UsersEventsInstancesGetExtensionsResponse, error) {
	rsp, err := c.UsersEventsInstancesGetExtensions(ctx, userId, eventId, eventId1, extensionId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUsersEventsInstancesGetExtensionsResponse(rsp)
}

// UsersEventsInstancesUpdateExtensionsWithBodyWithResponse request with arbitrary body returning *UsersEventsInstancesUpdateExtensionsResponse
func (c *ClientWithResponses) UsersEventsInstancesUpdateExtensionsWithBodyWithResponse(ctx context.Context, userId string, eventId string, eventId1 string, extensionId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UsersEventsInstancesUpdateExtensionsResponse, error) {
	rsp, err := c.UsersEventsInstancesUpdateExtensionsWithBody(ctx, userId, eventId, eventId1, extensionId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUsersEventsInstancesUpdateExtensionsResponse(rsp)
}

func (c *ClientWithResponses) UsersEventsInstancesUpdateExtensionsWithResponse(ctx context.Context, userId string, eventId string, eventId1 string, extensionId string, body UsersEventsInstancesUpdateExtensionsJSONRequestBody, reqEditors ...RequestEditorFn) (*UsersEventsInstancesUpdateExtensionsResponse, error) {
	rsp, err := c.UsersEventsInstancesUpdateExtensions(ctx, userId, eventId, eventId1, extensionId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUsersEventsInstancesUpdateExtensionsResponse(rsp)
}

// UsersUserEventsEventInstancesEventAcceptWithBodyWithResponse request with arbitrary body returning *UsersUserEventsEventInstancesEventAcceptResponse
func (c *ClientWithResponses) UsersUserEventsEventInstancesEventAcceptWithBodyWithResponse(ctx context.Context, userId string, eventId string, eventId1 string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UsersUserEventsEventInstancesEventAcceptResponse, error) {
	rsp, err := c.UsersUserEventsEventInstancesEventAcceptWithBody(ctx, userId, eventId, eventId1, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUsersUserEventsEventInstancesEventAcceptResponse(rsp)
}

func (c *ClientWithResponses) UsersUserEventsEventInstancesEventAcceptWithResponse(ctx context.Context, userId string, eventId string, eventId1 string, body UsersUserEventsEventInstancesEventAcceptJSONRequestBody, reqEditors ...RequestEditorFn) (*UsersUserEventsEventInstancesEventAcceptResponse, error) {
	rsp, err := c.UsersUserEventsEventInstancesEventAccept(ctx, userId, eventId, eventId1, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUsersUserEventsEventInstancesEventAcceptResponse(rsp)
}

// UsersUserEventsEventInstancesEventCancelWithBodyWithResponse request with arbitrary body returning *UsersUserEventsEventInstancesEventCancelResponse
func (c *ClientWithResponses) UsersUserEventsEventInstancesEventCancelWithBodyWithResponse(ctx context.Context, userId string, eventId string, eventId1 string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UsersUserEventsEventInstancesEventCancelResponse, error) {
	rsp, err := c.UsersUserEventsEventInstancesEventCancelWithBody(ctx, userId, eventId, eventId1, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUsersUserEventsEventInstancesEventCancelResponse(rsp)
}

func (c *ClientWithResponses) UsersUserEventsEventInstancesEventCancelWithResponse(ctx context.Context, userId string, eventId string, eventId1 string, body UsersUserEventsEventInstancesEventCancelJSONRequestBody, reqEditors ...RequestEditorFn) (*UsersUserEventsEventInstancesEventCancelResponse, error) {
	rsp, err := c.UsersUserEventsEventInstancesEventCancel(ctx, userId, eventId, eventId1, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUsersUserEventsEventInstancesEventCancelResponse(rsp)
}

// UsersUserEventsEventInstancesEventDeclineWithBodyWithResponse request with arbitrary body returning *UsersUserEventsEventInstancesEventDeclineResponse
func (c *ClientWithResponses) UsersUserEventsEventInstancesEventDeclineWithBodyWithResponse(ctx context.Context, userId string, eventId string, eventId1 string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UsersUserEventsEventInstancesEventDeclineResponse, error) {
	rsp, err := c.UsersUserEventsEventInstancesEventDeclineWithBody(ctx, userId, eventId, eventId1, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUsersUserEventsEventInstancesEventDeclineResponse(rsp)
}

func (c *ClientWithResponses) UsersUserEventsEventInstancesEventDeclineWithResponse(ctx context.Context, userId string, eventId string, eventId1 string, body UsersUserEventsEventInstancesEventDeclineJSONRequestBody, reqEditors ...RequestEditorFn) (*UsersUserEventsEventInstancesEventDeclineResponse, error) {
	rsp, err := c.UsersUserEventsEventInstancesEventDecline(ctx, userId, eventId, eventId1, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUsersUserEventsEventInstancesEventDeclineResponse(rsp)
}

// UsersUserEventsEventInstancesEventDismissReminderWithResponse request returning *UsersUserEventsEventInstancesEventDismissReminderResponse
func (c *ClientWithResponses) UsersUserEventsEventInstancesEventDismissReminderWithResponse(ctx context.Context, userId string, eventId string, eventId1 string, reqEditors ...RequestEditorFn) (*UsersUserEventsEventInstancesEventDismissReminderResponse, error) {
	rsp, err := c.UsersUserEventsEventInstancesEventDismissReminder(ctx, userId, eventId, eventId1, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUsersUserEventsEventInstancesEventDismissReminderResponse(rsp)
}

// UsersUserEventsEventInstancesEventForwardWithBodyWithResponse request with arbitrary body returning *UsersUserEventsEventInstancesEventForwardResponse
func (c *ClientWithResponses) UsersUserEventsEventInstancesEventForwardWithBodyWithResponse(ctx context.Context, userId string, eventId string, eventId1 string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UsersUserEventsEventInstancesEventForwardResponse, error) {
	rsp, err := c.UsersUserEventsEventInstancesEventForwardWithBody(ctx, userId, eventId, eventId1, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUsersUserEventsEventInstancesEventForwardResponse(rsp)
}

func (c *ClientWithResponses) UsersUserEventsEventInstancesEventForwardWithResponse(ctx context.Context, userId string, eventId string, eventId1 string, body UsersUserEventsEventInstancesEventForwardJSONRequestBody, reqEditors ...RequestEditorFn) (*UsersUserEventsEventInstancesEventForwardResponse, error) {
	rsp, err := c.UsersUserEventsEventInstancesEventForward(ctx, userId, eventId, eventId1, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUsersUserEventsEventInstancesEventForwardResponse(rsp)
}

// UsersUserEventsEventInstancesEventSnoozeReminderWithBodyWithResponse request with arbitrary body returning *UsersUserEventsEventInstancesEventSnoozeReminderResponse
func (c *ClientWithResponses) UsersUserEventsEventInstancesEventSnoozeReminderWithBodyWithResponse(ctx context.Context, userId string, eventId string, eventId1 string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UsersUserEventsEventInstancesEventSnoozeReminderResponse, error) {
	rsp, err := c.UsersUserEventsEventInstancesEventSnoozeReminderWithBody(ctx, userId, eventId, eventId1, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUsersUserEventsEventInstancesEventSnoozeReminderResponse(rsp)
}

func (c *ClientWithResponses) UsersUserEventsEventInstancesEventSnoozeReminderWithResponse(ctx context.Context, userId string, eventId string, eventId1 string, body UsersUserEventsEventInstancesEventSnoozeReminderJSONRequestBody, reqEditors ...RequestEditorFn) (*UsersUserEventsEventInstancesEventSnoozeReminderResponse, error) {
	rsp, err := c.UsersUserEventsEventInstancesEventSnoozeReminder(ctx, userId, eventId, eventId1, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUsersUserEventsEventInstancesEventSnoozeReminderResponse(rsp)
}

// UsersUserEventsEventInstancesEventTentativelyAcceptWithBodyWithResponse request with arbitrary body returning *UsersUserEventsEventInstancesEventTentativelyAcceptResponse
func (c *ClientWithResponses) UsersUserEventsEventInstancesEventTentativelyAcceptWithBodyWithResponse(ctx context.Context, userId string, eventId string, eventId1 string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UsersUserEventsEventInstancesEventTentativelyAcceptResponse, error) {
	rsp, err := c.UsersUserEventsEventInstancesEventTentativelyAcceptWithBody(ctx, userId, eventId, eventId1, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUsersUserEventsEventInstancesEventTentativelyAcceptResponse(rsp)
}

func (c *ClientWithResponses) UsersUserEventsEventInstancesEventTentativelyAcceptWithResponse(ctx context.Context, userId string, eventId string, eventId1 string, body UsersUserEventsEventInstancesEventTentativelyAcceptJSONRequestBody, reqEditors ...RequestEditorFn) (*UsersUserEventsEventInstancesEventTentativelyAcceptResponse, error) {
	rsp, err := c.UsersUserEventsEventInstancesEventTentativelyAccept(ctx, userId, eventId, eventId1, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUsersUserEventsEventInstancesEventTentativelyAcceptResponse(rsp)
}

// UsersUserEventsEventAcceptWithBodyWithResponse request with arbitrary body returning *UsersUserEventsEventAcceptResponse
func (c *ClientWithResponses) UsersUserEventsEventAcceptWithBodyWithResponse(ctx context.Context, userId string, eventId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UsersUserEventsEventAcceptResponse, error) {
	rsp, err := c.UsersUserEventsEventAcceptWithBody(ctx, userId, eventId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUsersUserEventsEventAcceptResponse(rsp)
}

func (c *ClientWithResponses) UsersUserEventsEventAcceptWithResponse(ctx context.Context, userId string, eventId string, body UsersUserEventsEventAcceptJSONRequestBody, reqEditors ...RequestEditorFn) (*UsersUserEventsEventAcceptResponse, error) {
	rsp, err := c.UsersUserEventsEventAccept(ctx, userId, eventId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUsersUserEventsEventAcceptResponse(rsp)
}

// UsersUserEventsEventCancelWithBodyWithResponse request with arbitrary body returning *UsersUserEventsEventCancelResponse
func (c *ClientWithResponses) UsersUserEventsEventCancelWithBodyWithResponse(ctx context.Context, userId string, eventId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UsersUserEventsEventCancelResponse, error) {
	rsp, err := c.UsersUserEventsEventCancelWithBody(ctx, userId, eventId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUsersUserEventsEventCancelResponse(rsp)
}

func (c *ClientWithResponses) UsersUserEventsEventCancelWithResponse(ctx context.Context, userId string, eventId string, body UsersUserEventsEventCancelJSONRequestBody, reqEditors ...RequestEditorFn) (*UsersUserEventsEventCancelResponse, error) {
	rsp, err := c.UsersUserEventsEventCancel(ctx, userId, eventId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUsersUserEventsEventCancelResponse(rsp)
}

// UsersUserEventsEventDeclineWithBodyWithResponse request with arbitrary body returning *UsersUserEventsEventDeclineResponse
func (c *ClientWithResponses) UsersUserEventsEventDeclineWithBodyWithResponse(ctx context.Context, userId string, eventId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UsersUserEventsEventDeclineResponse, error) {
	rsp, err := c.UsersUserEventsEventDeclineWithBody(ctx, userId, eventId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUsersUserEventsEventDeclineResponse(rsp)
}

func (c *ClientWithResponses) UsersUserEventsEventDeclineWithResponse(ctx context.Context, userId string, eventId string, body UsersUserEventsEventDeclineJSONRequestBody, reqEditors ...RequestEditorFn) (*UsersUserEventsEventDeclineResponse, error) {
	rsp, err := c.UsersUserEventsEventDecline(ctx, userId, eventId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUsersUserEventsEventDeclineResponse(rsp)
}

// UsersUserEventsEventDismissReminderWithResponse request returning *UsersUserEventsEventDismissReminderResponse
func (c *ClientWithResponses) UsersUserEventsEventDismissReminderWithResponse(ctx context.Context, userId string, eventId string, reqEditors ...RequestEditorFn) (*UsersUserEventsEventDismissReminderResponse, error) {
	rsp, err := c.UsersUserEventsEventDismissReminder(ctx, userId, eventId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUsersUserEventsEventDismissReminderResponse(rsp)
}

// UsersUserEventsEventForwardWithBodyWithResponse request with arbitrary body returning *UsersUserEventsEventForwardResponse
func (c *ClientWithResponses) UsersUserEventsEventForwardWithBodyWithResponse(ctx context.Context, userId string, eventId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UsersUserEventsEventForwardResponse, error) {
	rsp, err := c.UsersUserEventsEventForwardWithBody(ctx, userId, eventId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUsersUserEventsEventForwardResponse(rsp)
}

func (c *ClientWithResponses) UsersUserEventsEventForwardWithResponse(ctx context.Context, userId string, eventId string, body UsersUserEventsEventForwardJSONRequestBody, reqEditors ...RequestEditorFn) (*UsersUserEventsEventForwardResponse, error) {
	rsp, err := c.UsersUserEventsEventForward(ctx, userId, eventId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUsersUserEventsEventForwardResponse(rsp)
}

// UsersUserEventsEventSnoozeReminderWithBodyWithResponse request with arbitrary body returning *UsersUserEventsEventSnoozeReminderResponse
func (c *ClientWithResponses) UsersUserEventsEventSnoozeReminderWithBodyWithResponse(ctx context.Context, userId string, eventId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UsersUserEventsEventSnoozeReminderResponse, error) {
	rsp, err := c.UsersUserEventsEventSnoozeReminderWithBody(ctx, userId, eventId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUsersUserEventsEventSnoozeReminderResponse(rsp)
}

func (c *ClientWithResponses) UsersUserEventsEventSnoozeReminderWithResponse(ctx context.Context, userId string, eventId string, body UsersUserEventsEventSnoozeReminderJSONRequestBody, reqEditors ...RequestEditorFn) (*UsersUserEventsEventSnoozeReminderResponse, error) {
	rsp, err := c.UsersUserEventsEventSnoozeReminder(ctx, userId, eventId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUsersUserEventsEventSnoozeReminderResponse(rsp)
}

// UsersUserEventsEventTentativelyAcceptWithBodyWithResponse request with arbitrary body returning *UsersUserEventsEventTentativelyAcceptResponse
func (c *ClientWithResponses) UsersUserEventsEventTentativelyAcceptWithBodyWithResponse(ctx context.Context, userId string, eventId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UsersUserEventsEventTentativelyAcceptResponse, error) {
	rsp, err := c.UsersUserEventsEventTentativelyAcceptWithBody(ctx, userId, eventId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUsersUserEventsEventTentativelyAcceptResponse(rsp)
}

func (c *ClientWithResponses) UsersUserEventsEventTentativelyAcceptWithResponse(ctx context.Context, userId string, eventId string, body UsersUserEventsEventTentativelyAcceptJSONRequestBody, reqEditors ...RequestEditorFn) (*UsersUserEventsEventTentativelyAcceptResponse, error) {
	rsp, err := c.UsersUserEventsEventTentativelyAccept(ctx, userId, eventId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUsersUserEventsEventTentativelyAcceptResponse(rsp)
}

// UsersListExtensionsWithResponse request returning *UsersListExtensionsResponse
func (c *ClientWithResponses) UsersListExtensionsWithResponse(ctx context.Context, userId string, params *UsersListExtensionsParams, reqEditors ...RequestEditorFn) (*UsersListExtensionsResponse, error) {
	rsp, err := c.UsersListExtensions(ctx, userId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUsersListExtensionsResponse(rsp)
}

// UsersCreateExtensionsWithBodyWithResponse request with arbitrary body returning *UsersCreateExtensionsResponse
func (c *ClientWithResponses) UsersCreateExtensionsWithBodyWithResponse(ctx context.Context, userId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UsersCreateExtensionsResponse, error) {
	rsp, err := c.UsersCreateExtensionsWithBody(ctx, userId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUsersCreateExtensionsResponse(rsp)
}

func (c *ClientWithResponses) UsersCreateExtensionsWithResponse(ctx context.Context, userId string, body UsersCreateExtensionsJSONRequestBody, reqEditors ...RequestEditorFn) (*UsersCreateExtensionsResponse, error) {
	rsp, err := c.UsersCreateExtensions(ctx, userId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUsersCreateExtensionsResponse(rsp)
}

// UsersExtensionsGetCount4b1cWithResponse request returning *UsersExtensionsGetCount4b1cResponse
func (c *ClientWithResponses) UsersExtensionsGetCount4b1cWithResponse(ctx context.Context, userId string, params *UsersExtensionsGetCount4b1cParams, reqEditors ...RequestEditorFn) (*UsersExtensionsGetCount4b1cResponse, error) {
	rsp, err := c.UsersExtensionsGetCount4b1c(ctx, userId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUsersExtensionsGetCount4b1cResponse(rsp)
}

// UsersDeleteExtensionsWithResponse request returning *UsersDeleteExtensionsResponse
func (c *ClientWithResponses) UsersDeleteExtensionsWithResponse(ctx context.Context, userId string, extensionId string, params *UsersDeleteExtensionsParams, reqEditors ...RequestEditorFn) (*UsersDeleteExtensionsResponse, error) {
	rsp, err := c.UsersDeleteExtensions(ctx, userId, extensionId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUsersDeleteExtensionsResponse(rsp)
}

// UsersGetExtensionsWithResponse request returning *UsersGetExtensionsResponse
func (c *ClientWithResponses) UsersGetExtensionsWithResponse(ctx context.Context, userId string, extensionId string, params *UsersGetExtensionsParams, reqEditors ...RequestEditorFn) (*UsersGetExtensionsResponse, error) {
	rsp, err := c.UsersGetExtensions(ctx, userId, extensionId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUsersGetExtensionsResponse(rsp)
}

// UsersUpdateExtensionsWithBodyWithResponse request with arbitrary body returning *UsersUpdateExtensionsResponse
func (c *ClientWithResponses) UsersUpdateExtensionsWithBodyWithResponse(ctx context.Context, userId string, extensionId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UsersUpdateExtensionsResponse, error) {
	rsp, err := c.UsersUpdateExtensionsWithBody(ctx, userId, extensionId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUsersUpdateExtensionsResponse(rsp)
}

func (c *ClientWithResponses) UsersUpdateExtensionsWithResponse(ctx context.Context, userId string, extensionId string, body UsersUpdateExtensionsJSONRequestBody, reqEditors ...RequestEditorFn) (*UsersUpdateExtensionsResponse, error) {
	rsp, err := c.UsersUpdateExtensions(ctx, userId, extensionId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUsersUpdateExtensionsResponse(rsp)
}

// ParseUsersUserListUserResponse parses an HTTP response from a UsersUserListUserWithResponse call
func ParseUsersUserListUserResponse(rsp *http.Response) (*UsersUserListUserResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UsersUserListUserResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 2:
		var dest MicrosoftGraphUserCollectionResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON2XX = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseUsersUserCreateUserResponse parses an HTTP response from a UsersUserCreateUserWithResponse call
func ParseUsersUserCreateUserResponse(rsp *http.Response) (*UsersUserCreateUserResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UsersUserCreateUserResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 2:
		var dest MicrosoftGraphUser
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON2XX = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseUsersUserDeleteUserResponse parses an HTTP response from a UsersUserDeleteUserWithResponse call
func ParseUsersUserDeleteUserResponse(rsp *http.Response) (*UsersUserDeleteUserResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UsersUserDeleteUserResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseUsersUserGetUserResponse parses an HTTP response from a UsersUserGetUserWithResponse call
func ParseUsersUserGetUserResponse(rsp *http.Response) (*UsersUserGetUserResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UsersUserGetUserResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 2:
		var dest MicrosoftGraphUser
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON2XX = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseUsersUserUpdateUserResponse parses an HTTP response from a UsersUserUpdateUserWithResponse call
func ParseUsersUserUpdateUserResponse(rsp *http.Response) (*UsersUserUpdateUserResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UsersUserUpdateUserResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 2:
		var dest MicrosoftGraphUser
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON2XX = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseUsersListEventsResponse parses an HTTP response from a UsersListEventsWithResponse call
func ParseUsersListEventsResponse(rsp *http.Response) (*UsersListEventsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UsersListEventsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 2:
		var dest MicrosoftGraphEventCollectionResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON2XX = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseUsersCreateEventsResponse parses an HTTP response from a UsersCreateEventsWithResponse call
func ParseUsersCreateEventsResponse(rsp *http.Response) (*UsersCreateEventsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UsersCreateEventsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 2:
		var dest MicrosoftGraphEvent
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON2XX = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseUsersEventsGetCountD443Response parses an HTTP response from a UsersEventsGetCountD443WithResponse call
func ParseUsersEventsGetCountD443Response(rsp *http.Response) (*UsersEventsGetCountD443Response, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UsersEventsGetCountD443Response{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseUsersUserEventsDeltaResponse parses an HTTP response from a UsersUserEventsDeltaWithResponse call
func ParseUsersUserEventsDeltaResponse(rsp *http.Response) (*UsersUserEventsDeltaResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UsersUserEventsDeltaResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 2:
		var dest struct {
			OdataDeltaLink *string                `json:"@odata.deltaLink"`
			OdataNextLink  *string                `json:"@odata.nextLink"`
			Value          *[]MicrosoftGraphEvent `json:"value,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON2XX = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseUsersDeleteEventsResponse parses an HTTP response from a UsersDeleteEventsWithResponse call
func ParseUsersDeleteEventsResponse(rsp *http.Response) (*UsersDeleteEventsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UsersDeleteEventsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseUsersGetEventsResponse parses an HTTP response from a UsersGetEventsWithResponse call
func ParseUsersGetEventsResponse(rsp *http.Response) (*UsersGetEventsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UsersGetEventsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 2:
		var dest MicrosoftGraphEvent
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON2XX = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseUsersUpdateEventsResponse parses an HTTP response from a UsersUpdateEventsWithResponse call
func ParseUsersUpdateEventsResponse(rsp *http.Response) (*UsersUpdateEventsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UsersUpdateEventsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 2:
		var dest MicrosoftGraphEvent
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON2XX = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseUsersEventsListAttachmentsResponse parses an HTTP response from a UsersEventsListAttachmentsWithResponse call
func ParseUsersEventsListAttachmentsResponse(rsp *http.Response) (*UsersEventsListAttachmentsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UsersEventsListAttachmentsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 2:
		var dest MicrosoftGraphAttachmentCollectionResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON2XX = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseUsersEventsCreateAttachmentsResponse parses an HTTP response from a UsersEventsCreateAttachmentsWithResponse call
func ParseUsersEventsCreateAttachmentsResponse(rsp *http.Response) (*UsersEventsCreateAttachmentsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UsersEventsCreateAttachmentsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 2:
		var dest MicrosoftGraphAttachment
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON2XX = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseUsersEventsAttachmentsGetCount711fResponse parses an HTTP response from a UsersEventsAttachmentsGetCount711fWithResponse call
func ParseUsersEventsAttachmentsGetCount711fResponse(rsp *http.Response) (*UsersEventsAttachmentsGetCount711fResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UsersEventsAttachmentsGetCount711fResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseUsersUserEventsEventAttachmentsCreateUploadSessionResponse parses an HTTP response from a UsersUserEventsEventAttachmentsCreateUploadSessionWithResponse call
func ParseUsersUserEventsEventAttachmentsCreateUploadSessionResponse(rsp *http.Response) (*UsersUserEventsEventAttachmentsCreateUploadSessionResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UsersUserEventsEventAttachmentsCreateUploadSessionResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 2:
		var dest struct {
			union json.RawMessage
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON2XX = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseUsersEventsDeleteAttachmentsResponse parses an HTTP response from a UsersEventsDeleteAttachmentsWithResponse call
func ParseUsersEventsDeleteAttachmentsResponse(rsp *http.Response) (*UsersEventsDeleteAttachmentsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UsersEventsDeleteAttachmentsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseUsersEventsGetAttachmentsResponse parses an HTTP response from a UsersEventsGetAttachmentsWithResponse call
func ParseUsersEventsGetAttachmentsResponse(rsp *http.Response) (*UsersEventsGetAttachmentsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UsersEventsGetAttachmentsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 2:
		var dest MicrosoftGraphAttachment
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON2XX = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseUsersEventsGetCalendarResponse parses an HTTP response from a UsersEventsGetCalendarWithResponse call
func ParseUsersEventsGetCalendarResponse(rsp *http.Response) (*UsersEventsGetCalendarResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UsersEventsGetCalendarResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 2:
		var dest MicrosoftGraphCalendar
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON2XX = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseUsersEventsListExtensionsResponse parses an HTTP response from a UsersEventsListExtensionsWithResponse call
func ParseUsersEventsListExtensionsResponse(rsp *http.Response) (*UsersEventsListExtensionsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UsersEventsListExtensionsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 2:
		var dest MicrosoftGraphExtensionCollectionResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON2XX = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseUsersEventsCreateExtensionsResponse parses an HTTP response from a UsersEventsCreateExtensionsWithResponse call
func ParseUsersEventsCreateExtensionsResponse(rsp *http.Response) (*UsersEventsCreateExtensionsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UsersEventsCreateExtensionsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 2:
		var dest MicrosoftGraphExtension
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON2XX = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseUsersEventsExtensionsGetCount0041Response parses an HTTP response from a UsersEventsExtensionsGetCount0041WithResponse call
func ParseUsersEventsExtensionsGetCount0041Response(rsp *http.Response) (*UsersEventsExtensionsGetCount0041Response, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UsersEventsExtensionsGetCount0041Response{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseUsersEventsDeleteExtensionsResponse parses an HTTP response from a UsersEventsDeleteExtensionsWithResponse call
func ParseUsersEventsDeleteExtensionsResponse(rsp *http.Response) (*UsersEventsDeleteExtensionsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UsersEventsDeleteExtensionsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseUsersEventsGetExtensionsResponse parses an HTTP response from a UsersEventsGetExtensionsWithResponse call
func ParseUsersEventsGetExtensionsResponse(rsp *http.Response) (*UsersEventsGetExtensionsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UsersEventsGetExtensionsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 2:
		var dest MicrosoftGraphExtension
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON2XX = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseUsersEventsUpdateExtensionsResponse parses an HTTP response from a UsersEventsUpdateExtensionsWithResponse call
func ParseUsersEventsUpdateExtensionsResponse(rsp *http.Response) (*UsersEventsUpdateExtensionsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UsersEventsUpdateExtensionsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 2:
		var dest MicrosoftGraphExtension
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON2XX = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseUsersEventsListInstancesResponse parses an HTTP response from a UsersEventsListInstancesWithResponse call
func ParseUsersEventsListInstancesResponse(rsp *http.Response) (*UsersEventsListInstancesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UsersEventsListInstancesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 2:
		var dest MicrosoftGraphEventCollectionResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON2XX = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseUsersEventsInstancesGetCountF922Response parses an HTTP response from a UsersEventsInstancesGetCountF922WithResponse call
func ParseUsersEventsInstancesGetCountF922Response(rsp *http.Response) (*UsersEventsInstancesGetCountF922Response, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UsersEventsInstancesGetCountF922Response{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseUsersUserEventsEventInstancesDeltaResponse parses an HTTP response from a UsersUserEventsEventInstancesDeltaWithResponse call
func ParseUsersUserEventsEventInstancesDeltaResponse(rsp *http.Response) (*UsersUserEventsEventInstancesDeltaResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UsersUserEventsEventInstancesDeltaResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 2:
		var dest struct {
			OdataDeltaLink *string                `json:"@odata.deltaLink"`
			OdataNextLink  *string                `json:"@odata.nextLink"`
			Value          *[]MicrosoftGraphEvent `json:"value,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON2XX = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseUsersEventsGetInstancesResponse parses an HTTP response from a UsersEventsGetInstancesWithResponse call
func ParseUsersEventsGetInstancesResponse(rsp *http.Response) (*UsersEventsGetInstancesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UsersEventsGetInstancesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 2:
		var dest MicrosoftGraphEvent
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON2XX = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseUsersEventsInstancesListAttachmentsResponse parses an HTTP response from a UsersEventsInstancesListAttachmentsWithResponse call
func ParseUsersEventsInstancesListAttachmentsResponse(rsp *http.Response) (*UsersEventsInstancesListAttachmentsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UsersEventsInstancesListAttachmentsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 2:
		var dest MicrosoftGraphAttachmentCollectionResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON2XX = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseUsersEventsInstancesCreateAttachmentsResponse parses an HTTP response from a UsersEventsInstancesCreateAttachmentsWithResponse call
func ParseUsersEventsInstancesCreateAttachmentsResponse(rsp *http.Response) (*UsersEventsInstancesCreateAttachmentsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UsersEventsInstancesCreateAttachmentsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 2:
		var dest MicrosoftGraphAttachment
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON2XX = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseUsersEventsInstancesAttachmentsGetCount3c02Response parses an HTTP response from a UsersEventsInstancesAttachmentsGetCount3c02WithResponse call
func ParseUsersEventsInstancesAttachmentsGetCount3c02Response(rsp *http.Response) (*UsersEventsInstancesAttachmentsGetCount3c02Response, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UsersEventsInstancesAttachmentsGetCount3c02Response{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseUsersUserEventsEventInstancesEventAttachmentsCreateUploadSessionResponse parses an HTTP response from a UsersUserEventsEventInstancesEventAttachmentsCreateUploadSessionWithResponse call
func ParseUsersUserEventsEventInstancesEventAttachmentsCreateUploadSessionResponse(rsp *http.Response) (*UsersUserEventsEventInstancesEventAttachmentsCreateUploadSessionResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UsersUserEventsEventInstancesEventAttachmentsCreateUploadSessionResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 2:
		var dest struct {
			union json.RawMessage
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON2XX = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseUsersEventsInstancesDeleteAttachmentsResponse parses an HTTP response from a UsersEventsInstancesDeleteAttachmentsWithResponse call
func ParseUsersEventsInstancesDeleteAttachmentsResponse(rsp *http.Response) (*UsersEventsInstancesDeleteAttachmentsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UsersEventsInstancesDeleteAttachmentsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseUsersEventsInstancesGetAttachmentsResponse parses an HTTP response from a UsersEventsInstancesGetAttachmentsWithResponse call
func ParseUsersEventsInstancesGetAttachmentsResponse(rsp *http.Response) (*UsersEventsInstancesGetAttachmentsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UsersEventsInstancesGetAttachmentsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 2:
		var dest MicrosoftGraphAttachment
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON2XX = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseUsersEventsInstancesGetCalendarResponse parses an HTTP response from a UsersEventsInstancesGetCalendarWithResponse call
func ParseUsersEventsInstancesGetCalendarResponse(rsp *http.Response) (*UsersEventsInstancesGetCalendarResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UsersEventsInstancesGetCalendarResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 2:
		var dest MicrosoftGraphCalendar
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON2XX = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseUsersEventsInstancesListExtensionsResponse parses an HTTP response from a UsersEventsInstancesListExtensionsWithResponse call
func ParseUsersEventsInstancesListExtensionsResponse(rsp *http.Response) (*UsersEventsInstancesListExtensionsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UsersEventsInstancesListExtensionsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 2:
		var dest MicrosoftGraphExtensionCollectionResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON2XX = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseUsersEventsInstancesCreateExtensionsResponse parses an HTTP response from a UsersEventsInstancesCreateExtensionsWithResponse call
func ParseUsersEventsInstancesCreateExtensionsResponse(rsp *http.Response) (*UsersEventsInstancesCreateExtensionsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UsersEventsInstancesCreateExtensionsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 2:
		var dest MicrosoftGraphExtension
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON2XX = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseUsersEventsInstancesExtensionsGetCount8eedResponse parses an HTTP response from a UsersEventsInstancesExtensionsGetCount8eedWithResponse call
func ParseUsersEventsInstancesExtensionsGetCount8eedResponse(rsp *http.Response) (*UsersEventsInstancesExtensionsGetCount8eedResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UsersEventsInstancesExtensionsGetCount8eedResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseUsersEventsInstancesDeleteExtensionsResponse parses an HTTP response from a UsersEventsInstancesDeleteExtensionsWithResponse call
func ParseUsersEventsInstancesDeleteExtensionsResponse(rsp *http.Response) (*UsersEventsInstancesDeleteExtensionsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UsersEventsInstancesDeleteExtensionsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseUsersEventsInstancesGetExtensionsResponse parses an HTTP response from a UsersEventsInstancesGetExtensionsWithResponse call
func ParseUsersEventsInstancesGetExtensionsResponse(rsp *http.Response) (*UsersEventsInstancesGetExtensionsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UsersEventsInstancesGetExtensionsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 2:
		var dest MicrosoftGraphExtension
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON2XX = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseUsersEventsInstancesUpdateExtensionsResponse parses an HTTP response from a UsersEventsInstancesUpdateExtensionsWithResponse call
func ParseUsersEventsInstancesUpdateExtensionsResponse(rsp *http.Response) (*UsersEventsInstancesUpdateExtensionsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UsersEventsInstancesUpdateExtensionsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 2:
		var dest MicrosoftGraphExtension
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON2XX = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseUsersUserEventsEventInstancesEventAcceptResponse parses an HTTP response from a UsersUserEventsEventInstancesEventAcceptWithResponse call
func ParseUsersUserEventsEventInstancesEventAcceptResponse(rsp *http.Response) (*UsersUserEventsEventInstancesEventAcceptResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UsersUserEventsEventInstancesEventAcceptResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseUsersUserEventsEventInstancesEventCancelResponse parses an HTTP response from a UsersUserEventsEventInstancesEventCancelWithResponse call
func ParseUsersUserEventsEventInstancesEventCancelResponse(rsp *http.Response) (*UsersUserEventsEventInstancesEventCancelResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UsersUserEventsEventInstancesEventCancelResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseUsersUserEventsEventInstancesEventDeclineResponse parses an HTTP response from a UsersUserEventsEventInstancesEventDeclineWithResponse call
func ParseUsersUserEventsEventInstancesEventDeclineResponse(rsp *http.Response) (*UsersUserEventsEventInstancesEventDeclineResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UsersUserEventsEventInstancesEventDeclineResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseUsersUserEventsEventInstancesEventDismissReminderResponse parses an HTTP response from a UsersUserEventsEventInstancesEventDismissReminderWithResponse call
func ParseUsersUserEventsEventInstancesEventDismissReminderResponse(rsp *http.Response) (*UsersUserEventsEventInstancesEventDismissReminderResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UsersUserEventsEventInstancesEventDismissReminderResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseUsersUserEventsEventInstancesEventForwardResponse parses an HTTP response from a UsersUserEventsEventInstancesEventForwardWithResponse call
func ParseUsersUserEventsEventInstancesEventForwardResponse(rsp *http.Response) (*UsersUserEventsEventInstancesEventForwardResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UsersUserEventsEventInstancesEventForwardResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseUsersUserEventsEventInstancesEventSnoozeReminderResponse parses an HTTP response from a UsersUserEventsEventInstancesEventSnoozeReminderWithResponse call
func ParseUsersUserEventsEventInstancesEventSnoozeReminderResponse(rsp *http.Response) (*UsersUserEventsEventInstancesEventSnoozeReminderResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UsersUserEventsEventInstancesEventSnoozeReminderResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseUsersUserEventsEventInstancesEventTentativelyAcceptResponse parses an HTTP response from a UsersUserEventsEventInstancesEventTentativelyAcceptWithResponse call
func ParseUsersUserEventsEventInstancesEventTentativelyAcceptResponse(rsp *http.Response) (*UsersUserEventsEventInstancesEventTentativelyAcceptResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UsersUserEventsEventInstancesEventTentativelyAcceptResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseUsersUserEventsEventAcceptResponse parses an HTTP response from a UsersUserEventsEventAcceptWithResponse call
func ParseUsersUserEventsEventAcceptResponse(rsp *http.Response) (*UsersUserEventsEventAcceptResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UsersUserEventsEventAcceptResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseUsersUserEventsEventCancelResponse parses an HTTP response from a UsersUserEventsEventCancelWithResponse call
func ParseUsersUserEventsEventCancelResponse(rsp *http.Response) (*UsersUserEventsEventCancelResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UsersUserEventsEventCancelResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseUsersUserEventsEventDeclineResponse parses an HTTP response from a UsersUserEventsEventDeclineWithResponse call
func ParseUsersUserEventsEventDeclineResponse(rsp *http.Response) (*UsersUserEventsEventDeclineResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UsersUserEventsEventDeclineResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseUsersUserEventsEventDismissReminderResponse parses an HTTP response from a UsersUserEventsEventDismissReminderWithResponse call
func ParseUsersUserEventsEventDismissReminderResponse(rsp *http.Response) (*UsersUserEventsEventDismissReminderResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UsersUserEventsEventDismissReminderResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseUsersUserEventsEventForwardResponse parses an HTTP response from a UsersUserEventsEventForwardWithResponse call
func ParseUsersUserEventsEventForwardResponse(rsp *http.Response) (*UsersUserEventsEventForwardResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UsersUserEventsEventForwardResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseUsersUserEventsEventSnoozeReminderResponse parses an HTTP response from a UsersUserEventsEventSnoozeReminderWithResponse call
func ParseUsersUserEventsEventSnoozeReminderResponse(rsp *http.Response) (*UsersUserEventsEventSnoozeReminderResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UsersUserEventsEventSnoozeReminderResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseUsersUserEventsEventTentativelyAcceptResponse parses an HTTP response from a UsersUserEventsEventTentativelyAcceptWithResponse call
func ParseUsersUserEventsEventTentativelyAcceptResponse(rsp *http.Response) (*UsersUserEventsEventTentativelyAcceptResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UsersUserEventsEventTentativelyAcceptResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseUsersListExtensionsResponse parses an HTTP response from a UsersListExtensionsWithResponse call
func ParseUsersListExtensionsResponse(rsp *http.Response) (*UsersListExtensionsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UsersListExtensionsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 2:
		var dest MicrosoftGraphExtensionCollectionResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON2XX = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseUsersCreateExtensionsResponse parses an HTTP response from a UsersCreateExtensionsWithResponse call
func ParseUsersCreateExtensionsResponse(rsp *http.Response) (*UsersCreateExtensionsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UsersCreateExtensionsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 2:
		var dest MicrosoftGraphExtension
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON2XX = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseUsersExtensionsGetCount4b1cResponse parses an HTTP response from a UsersExtensionsGetCount4b1cWithResponse call
func ParseUsersExtensionsGetCount4b1cResponse(rsp *http.Response) (*UsersExtensionsGetCount4b1cResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UsersExtensionsGetCount4b1cResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseUsersDeleteExtensionsResponse parses an HTTP response from a UsersDeleteExtensionsWithResponse call
func ParseUsersDeleteExtensionsResponse(rsp *http.Response) (*UsersDeleteExtensionsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UsersDeleteExtensionsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseUsersGetExtensionsResponse parses an HTTP response from a UsersGetExtensionsWithResponse call
func ParseUsersGetExtensionsResponse(rsp *http.Response) (*UsersGetExtensionsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UsersGetExtensionsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 2:
		var dest MicrosoftGraphExtension
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON2XX = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseUsersUpdateExtensionsResponse parses an HTTP response from a UsersUpdateExtensionsWithResponse call
func ParseUsersUpdateExtensionsResponse(rsp *http.Response) (*UsersUpdateExtensionsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UsersUpdateExtensionsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 2:
		var dest MicrosoftGraphExtension
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON2XX = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// List users
	// (GET /users)
	UsersUserListUser(ctx echo.Context, params UsersUserListUserParams) error
	// Create User
	// (POST /users)
	UsersUserCreateUser(ctx echo.Context) error
	// Delete a user
	// (DELETE /users/{user-id})
	UsersUserDeleteUser(ctx echo.Context, userId string, params UsersUserDeleteUserParams) error
	// Get user
	// (GET /users/{user-id})
	UsersUserGetUser(ctx echo.Context, userId string, params UsersUserGetUserParams) error
	// Update user
	// (PATCH /users/{user-id})
	UsersUserUpdateUser(ctx echo.Context, userId string) error
	// List events
	// (GET /users/{user-id}/events)
	UsersListEvents(ctx echo.Context, userId string, params UsersListEventsParams) error
	// Create Event
	// (POST /users/{user-id}/events)
	UsersCreateEvents(ctx echo.Context, userId string) error
	// Get the number of the resource
	// (GET /users/{user-id}/events/$count)
	UsersEventsGetCountD443(ctx echo.Context, userId string, params UsersEventsGetCountD443Params) error
	// Invoke function delta
	// (GET /users/{user-id}/events/microsoft.graph.delta())
	UsersUserEventsDelta(ctx echo.Context, userId string, params UsersUserEventsDeltaParams) error
	// Delete event
	// (DELETE /users/{user-id}/events/{event-id})
	UsersDeleteEvents(ctx echo.Context, userId string, eventId string, params UsersDeleteEventsParams) error
	// Get event
	// (GET /users/{user-id}/events/{event-id})
	UsersGetEvents(ctx echo.Context, userId string, eventId string, params UsersGetEventsParams) error
	// Update event
	// (PATCH /users/{user-id}/events/{event-id})
	UsersUpdateEvents(ctx echo.Context, userId string, eventId string) error
	// List attachments
	// (GET /users/{user-id}/events/{event-id}/attachments)
	UsersEventsListAttachments(ctx echo.Context, userId string, eventId string, params UsersEventsListAttachmentsParams) error
	// Add attachment
	// (POST /users/{user-id}/events/{event-id}/attachments)
	UsersEventsCreateAttachments(ctx echo.Context, userId string, eventId string) error
	// Get the number of the resource
	// (GET /users/{user-id}/events/{event-id}/attachments/$count)
	UsersEventsAttachmentsGetCount711f(ctx echo.Context, userId string, eventId string, params UsersEventsAttachmentsGetCount711fParams) error
	// Invoke action createUploadSession
	// (POST /users/{user-id}/events/{event-id}/attachments/microsoft.graph.createUploadSession)
	UsersUserEventsEventAttachmentsCreateUploadSession(ctx echo.Context, userId string, eventId string) error
	// Delete attachment
	// (DELETE /users/{user-id}/events/{event-id}/attachments/{attachment-id})
	UsersEventsDeleteAttachments(ctx echo.Context, userId string, eventId string, attachmentId string, params UsersEventsDeleteAttachmentsParams) error
	// Get attachments from users
	// (GET /users/{user-id}/events/{event-id}/attachments/{attachment-id})
	UsersEventsGetAttachments(ctx echo.Context, userId string, eventId string, attachmentId string, params UsersEventsGetAttachmentsParams) error
	// Get calendar from users
	// (GET /users/{user-id}/events/{event-id}/calendar)
	UsersEventsGetCalendar(ctx echo.Context, userId string, eventId string, params UsersEventsGetCalendarParams) error
	// Get open extension
	// (GET /users/{user-id}/events/{event-id}/extensions)
	UsersEventsListExtensions(ctx echo.Context, userId string, eventId string, params UsersEventsListExtensionsParams) error
	// Create open extension
	// (POST /users/{user-id}/events/{event-id}/extensions)
	UsersEventsCreateExtensions(ctx echo.Context, userId string, eventId string) error
	// Get the number of the resource
	// (GET /users/{user-id}/events/{event-id}/extensions/$count)
	UsersEventsExtensionsGetCount0041(ctx echo.Context, userId string, eventId string, params UsersEventsExtensionsGetCount0041Params) error
	// Delete navigation property extensions for users
	// (DELETE /users/{user-id}/events/{event-id}/extensions/{extension-id})
	UsersEventsDeleteExtensions(ctx echo.Context, userId string, eventId string, extensionId string, params UsersEventsDeleteExtensionsParams) error
	// Get open extension
	// (GET /users/{user-id}/events/{event-id}/extensions/{extension-id})
	UsersEventsGetExtensions(ctx echo.Context, userId string, eventId string, extensionId string, params UsersEventsGetExtensionsParams) error
	// Update the navigation property extensions in users
	// (PATCH /users/{user-id}/events/{event-id}/extensions/{extension-id})
	UsersEventsUpdateExtensions(ctx echo.Context, userId string, eventId string, extensionId string) error
	// Get instances from users
	// (GET /users/{user-id}/events/{event-id}/instances)
	UsersEventsListInstances(ctx echo.Context, userId string, eventId string, params UsersEventsListInstancesParams) error
	// Get the number of the resource
	// (GET /users/{user-id}/events/{event-id}/instances/$count)
	UsersEventsInstancesGetCountF922(ctx echo.Context, userId string, eventId string, params UsersEventsInstancesGetCountF922Params) error
	// Invoke function delta
	// (GET /users/{user-id}/events/{event-id}/instances/microsoft.graph.delta())
	UsersUserEventsEventInstancesDelta(ctx echo.Context, userId string, eventId string, params UsersUserEventsEventInstancesDeltaParams) error
	// Get instances from users
	// (GET /users/{user-id}/events/{event-id}/instances/{event-id1})
	UsersEventsGetInstances(ctx echo.Context, userId string, eventId string, eventId1 string, params UsersEventsGetInstancesParams) error
	// List attachments
	// (GET /users/{user-id}/events/{event-id}/instances/{event-id1}/attachments)
	UsersEventsInstancesListAttachments(ctx echo.Context, userId string, eventId string, eventId1 string, params UsersEventsInstancesListAttachmentsParams) error
	// Add attachment
	// (POST /users/{user-id}/events/{event-id}/instances/{event-id1}/attachments)
	UsersEventsInstancesCreateAttachments(ctx echo.Context, userId string, eventId string, eventId1 string) error
	// Get the number of the resource
	// (GET /users/{user-id}/events/{event-id}/instances/{event-id1}/attachments/$count)
	UsersEventsInstancesAttachmentsGetCount3c02(ctx echo.Context, userId string, eventId string, eventId1 string, params UsersEventsInstancesAttachmentsGetCount3c02Params) error
	// Invoke action createUploadSession
	// (POST /users/{user-id}/events/{event-id}/instances/{event-id1}/attachments/microsoft.graph.createUploadSession)
	UsersUserEventsEventInstancesEventAttachmentsCreateUploadSession(ctx echo.Context, userId string, eventId string, eventId1 string) error
	// Delete attachment
	// (DELETE /users/{user-id}/events/{event-id}/instances/{event-id1}/attachments/{attachment-id})
	UsersEventsInstancesDeleteAttachments(ctx echo.Context, userId string, eventId string, eventId1 string, attachmentId string, params UsersEventsInstancesDeleteAttachmentsParams) error
	// Get attachments from users
	// (GET /users/{user-id}/events/{event-id}/instances/{event-id1}/attachments/{attachment-id})
	UsersEventsInstancesGetAttachments(ctx echo.Context, userId string, eventId string, eventId1 string, attachmentId string, params UsersEventsInstancesGetAttachmentsParams) error
	// Get calendar from users
	// (GET /users/{user-id}/events/{event-id}/instances/{event-id1}/calendar)
	UsersEventsInstancesGetCalendar(ctx echo.Context, userId string, eventId string, eventId1 string, params UsersEventsInstancesGetCalendarParams) error
	// Get open extension
	// (GET /users/{user-id}/events/{event-id}/instances/{event-id1}/extensions)
	UsersEventsInstancesListExtensions(ctx echo.Context, userId string, eventId string, eventId1 string, params UsersEventsInstancesListExtensionsParams) error
	// Create open extension
	// (POST /users/{user-id}/events/{event-id}/instances/{event-id1}/extensions)
	UsersEventsInstancesCreateExtensions(ctx echo.Context, userId string, eventId string, eventId1 string) error
	// Get the number of the resource
	// (GET /users/{user-id}/events/{event-id}/instances/{event-id1}/extensions/$count)
	UsersEventsInstancesExtensionsGetCount8eed(ctx echo.Context, userId string, eventId string, eventId1 string, params UsersEventsInstancesExtensionsGetCount8eedParams) error
	// Delete navigation property extensions for users
	// (DELETE /users/{user-id}/events/{event-id}/instances/{event-id1}/extensions/{extension-id})
	UsersEventsInstancesDeleteExtensions(ctx echo.Context, userId string, eventId string, eventId1 string, extensionId string, params UsersEventsInstancesDeleteExtensionsParams) error
	// Get open extension
	// (GET /users/{user-id}/events/{event-id}/instances/{event-id1}/extensions/{extension-id})
	UsersEventsInstancesGetExtensions(ctx echo.Context, userId string, eventId string, eventId1 string, extensionId string, params UsersEventsInstancesGetExtensionsParams) error
	// Update the navigation property extensions in users
	// (PATCH /users/{user-id}/events/{event-id}/instances/{event-id1}/extensions/{extension-id})
	UsersEventsInstancesUpdateExtensions(ctx echo.Context, userId string, eventId string, eventId1 string, extensionId string) error
	// Invoke action accept
	// (POST /users/{user-id}/events/{event-id}/instances/{event-id1}/microsoft.graph.accept)
	UsersUserEventsEventInstancesEventAccept(ctx echo.Context, userId string, eventId string, eventId1 string) error
	// Invoke action cancel
	// (POST /users/{user-id}/events/{event-id}/instances/{event-id1}/microsoft.graph.cancel)
	UsersUserEventsEventInstancesEventCancel(ctx echo.Context, userId string, eventId string, eventId1 string) error
	// Invoke action decline
	// (POST /users/{user-id}/events/{event-id}/instances/{event-id1}/microsoft.graph.decline)
	UsersUserEventsEventInstancesEventDecline(ctx echo.Context, userId string, eventId string, eventId1 string) error
	// Invoke action dismissReminder
	// (POST /users/{user-id}/events/{event-id}/instances/{event-id1}/microsoft.graph.dismissReminder)
	UsersUserEventsEventInstancesEventDismissReminder(ctx echo.Context, userId string, eventId string, eventId1 string) error
	// Invoke action forward
	// (POST /users/{user-id}/events/{event-id}/instances/{event-id1}/microsoft.graph.forward)
	UsersUserEventsEventInstancesEventForward(ctx echo.Context, userId string, eventId string, eventId1 string) error
	// Invoke action snoozeReminder
	// (POST /users/{user-id}/events/{event-id}/instances/{event-id1}/microsoft.graph.snoozeReminder)
	UsersUserEventsEventInstancesEventSnoozeReminder(ctx echo.Context, userId string, eventId string, eventId1 string) error
	// Invoke action tentativelyAccept
	// (POST /users/{user-id}/events/{event-id}/instances/{event-id1}/microsoft.graph.tentativelyAccept)
	UsersUserEventsEventInstancesEventTentativelyAccept(ctx echo.Context, userId string, eventId string, eventId1 string) error
	// Invoke action accept
	// (POST /users/{user-id}/events/{event-id}/microsoft.graph.accept)
	UsersUserEventsEventAccept(ctx echo.Context, userId string, eventId string) error
	// Invoke action cancel
	// (POST /users/{user-id}/events/{event-id}/microsoft.graph.cancel)
	UsersUserEventsEventCancel(ctx echo.Context, userId string, eventId string) error
	// Invoke action decline
	// (POST /users/{user-id}/events/{event-id}/microsoft.graph.decline)
	UsersUserEventsEventDecline(ctx echo.Context, userId string, eventId string) error
	// Invoke action dismissReminder
	// (POST /users/{user-id}/events/{event-id}/microsoft.graph.dismissReminder)
	UsersUserEventsEventDismissReminder(ctx echo.Context, userId string, eventId string) error
	// Invoke action forward
	// (POST /users/{user-id}/events/{event-id}/microsoft.graph.forward)
	UsersUserEventsEventForward(ctx echo.Context, userId string, eventId string) error
	// Invoke action snoozeReminder
	// (POST /users/{user-id}/events/{event-id}/microsoft.graph.snoozeReminder)
	UsersUserEventsEventSnoozeReminder(ctx echo.Context, userId string, eventId string) error
	// Invoke action tentativelyAccept
	// (POST /users/{user-id}/events/{event-id}/microsoft.graph.tentativelyAccept)
	UsersUserEventsEventTentativelyAccept(ctx echo.Context, userId string, eventId string) error
	// Get extensions from users
	// (GET /users/{user-id}/extensions)
	UsersListExtensions(ctx echo.Context, userId string, params UsersListExtensionsParams) error
	// Create new navigation property to extensions for users
	// (POST /users/{user-id}/extensions)
	UsersCreateExtensions(ctx echo.Context, userId string) error
	// Get the number of the resource
	// (GET /users/{user-id}/extensions/$count)
	UsersExtensionsGetCount4b1c(ctx echo.Context, userId string, params UsersExtensionsGetCount4b1cParams) error
	// Delete navigation property extensions for users
	// (DELETE /users/{user-id}/extensions/{extension-id})
	UsersDeleteExtensions(ctx echo.Context, userId string, extensionId string, params UsersDeleteExtensionsParams) error
	// Get extensions from users
	// (GET /users/{user-id}/extensions/{extension-id})
	UsersGetExtensions(ctx echo.Context, userId string, extensionId string, params UsersGetExtensionsParams) error
	// Update the navigation property extensions in users
	// (PATCH /users/{user-id}/extensions/{extension-id})
	UsersUpdateExtensions(ctx echo.Context, userId string, extensionId string) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// UsersUserListUser converts echo context to params.
func (w *ServerInterfaceWrapper) UsersUserListUser(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params UsersUserListUserParams
	// ------------- Optional query parameter "$top" -------------

	err = runtime.BindQueryParameter("form", false, false, "$top", ctx.QueryParams(), &params.Top)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter $top: %s", err))
	}

	// ------------- Optional query parameter "$search" -------------

	err = runtime.BindQueryParameter("form", false, false, "$search", ctx.QueryParams(), &params.Search)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter $search: %s", err))
	}

	// ------------- Optional query parameter "$filter" -------------

	err = runtime.BindQueryParameter("form", false, false, "$filter", ctx.QueryParams(), &params.Filter)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter $filter: %s", err))
	}

	// ------------- Optional query parameter "$count" -------------

	err = runtime.BindQueryParameter("form", false, false, "$count", ctx.QueryParams(), &params.Count)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter $count: %s", err))
	}

	// ------------- Optional query parameter "$orderby" -------------

	err = runtime.BindQueryParameter("form", false, false, "$orderby", ctx.QueryParams(), &params.Orderby)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter $orderby: %s", err))
	}

	// ------------- Optional query parameter "$select" -------------

	err = runtime.BindQueryParameter("form", false, false, "$select", ctx.QueryParams(), &params.Select)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter $select: %s", err))
	}

	// ------------- Optional query parameter "$expand" -------------

	err = runtime.BindQueryParameter("form", false, false, "$expand", ctx.QueryParams(), &params.Expand)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter $expand: %s", err))
	}

	headers := ctx.Request().Header
	// ------------- Optional header parameter "ConsistencyLevel" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("ConsistencyLevel")]; found {
		var ConsistencyLevel string
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for ConsistencyLevel, got %d", n))
		}

		err = runtime.BindStyledParameterWithLocation("simple", false, "ConsistencyLevel", runtime.ParamLocationHeader, valueList[0], &ConsistencyLevel)
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter ConsistencyLevel: %s", err))
		}

		params.ConsistencyLevel = &ConsistencyLevel
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.UsersUserListUser(ctx, params)
	return err
}

// UsersUserCreateUser converts echo context to params.
func (w *ServerInterfaceWrapper) UsersUserCreateUser(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.UsersUserCreateUser(ctx)
	return err
}

// UsersUserDeleteUser converts echo context to params.
func (w *ServerInterfaceWrapper) UsersUserDeleteUser(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "user-id" -------------
	var userId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "user-id", runtime.ParamLocationPath, ctx.Param("user-id"), &userId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter user-id: %s", err))
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params UsersUserDeleteUserParams

	headers := ctx.Request().Header
	// ------------- Optional header parameter "If-Match" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("If-Match")]; found {
		var IfMatch string
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for If-Match, got %d", n))
		}

		err = runtime.BindStyledParameterWithLocation("simple", false, "If-Match", runtime.ParamLocationHeader, valueList[0], &IfMatch)
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter If-Match: %s", err))
		}

		params.IfMatch = &IfMatch
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.UsersUserDeleteUser(ctx, userId, params)
	return err
}

// UsersUserGetUser converts echo context to params.
func (w *ServerInterfaceWrapper) UsersUserGetUser(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "user-id" -------------
	var userId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "user-id", runtime.ParamLocationPath, ctx.Param("user-id"), &userId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter user-id: %s", err))
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params UsersUserGetUserParams
	// ------------- Optional query parameter "$select" -------------

	err = runtime.BindQueryParameter("form", false, false, "$select", ctx.QueryParams(), &params.Select)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter $select: %s", err))
	}

	// ------------- Optional query parameter "$expand" -------------

	err = runtime.BindQueryParameter("form", false, false, "$expand", ctx.QueryParams(), &params.Expand)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter $expand: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.UsersUserGetUser(ctx, userId, params)
	return err
}

// UsersUserUpdateUser converts echo context to params.
func (w *ServerInterfaceWrapper) UsersUserUpdateUser(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "user-id" -------------
	var userId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "user-id", runtime.ParamLocationPath, ctx.Param("user-id"), &userId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter user-id: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.UsersUserUpdateUser(ctx, userId)
	return err
}

// UsersListEvents converts echo context to params.
func (w *ServerInterfaceWrapper) UsersListEvents(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "user-id" -------------
	var userId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "user-id", runtime.ParamLocationPath, ctx.Param("user-id"), &userId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter user-id: %s", err))
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params UsersListEventsParams
	// ------------- Optional query parameter "$top" -------------

	err = runtime.BindQueryParameter("form", false, false, "$top", ctx.QueryParams(), &params.Top)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter $top: %s", err))
	}

	// ------------- Optional query parameter "$skip" -------------

	err = runtime.BindQueryParameter("form", false, false, "$skip", ctx.QueryParams(), &params.Skip)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter $skip: %s", err))
	}

	// ------------- Optional query parameter "$filter" -------------

	err = runtime.BindQueryParameter("form", false, false, "$filter", ctx.QueryParams(), &params.Filter)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter $filter: %s", err))
	}

	// ------------- Optional query parameter "$count" -------------

	err = runtime.BindQueryParameter("form", false, false, "$count", ctx.QueryParams(), &params.Count)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter $count: %s", err))
	}

	// ------------- Optional query parameter "$orderby" -------------

	err = runtime.BindQueryParameter("form", false, false, "$orderby", ctx.QueryParams(), &params.Orderby)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter $orderby: %s", err))
	}

	// ------------- Optional query parameter "$select" -------------

	err = runtime.BindQueryParameter("form", false, false, "$select", ctx.QueryParams(), &params.Select)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter $select: %s", err))
	}

	// ------------- Optional query parameter "$expand" -------------

	err = runtime.BindQueryParameter("form", false, false, "$expand", ctx.QueryParams(), &params.Expand)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter $expand: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.UsersListEvents(ctx, userId, params)
	return err
}

// UsersCreateEvents converts echo context to params.
func (w *ServerInterfaceWrapper) UsersCreateEvents(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "user-id" -------------
	var userId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "user-id", runtime.ParamLocationPath, ctx.Param("user-id"), &userId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter user-id: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.UsersCreateEvents(ctx, userId)
	return err
}

// UsersEventsGetCountD443 converts echo context to params.
func (w *ServerInterfaceWrapper) UsersEventsGetCountD443(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "user-id" -------------
	var userId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "user-id", runtime.ParamLocationPath, ctx.Param("user-id"), &userId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter user-id: %s", err))
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params UsersEventsGetCountD443Params
	// ------------- Optional query parameter "$filter" -------------

	err = runtime.BindQueryParameter("form", false, false, "$filter", ctx.QueryParams(), &params.Filter)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter $filter: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.UsersEventsGetCountD443(ctx, userId, params)
	return err
}

// UsersUserEventsDelta converts echo context to params.
func (w *ServerInterfaceWrapper) UsersUserEventsDelta(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "user-id" -------------
	var userId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "user-id", runtime.ParamLocationPath, ctx.Param("user-id"), &userId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter user-id: %s", err))
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params UsersUserEventsDeltaParams
	// ------------- Required query parameter "startDateTime" -------------

	err = runtime.BindQueryParameter("form", true, true, "startDateTime", ctx.QueryParams(), &params.StartDateTime)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter startDateTime: %s", err))
	}

	// ------------- Required query parameter "endDateTime" -------------

	err = runtime.BindQueryParameter("form", true, true, "endDateTime", ctx.QueryParams(), &params.EndDateTime)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter endDateTime: %s", err))
	}

	// ------------- Optional query parameter "$top" -------------

	err = runtime.BindQueryParameter("form", false, false, "$top", ctx.QueryParams(), &params.Top)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter $top: %s", err))
	}

	// ------------- Optional query parameter "$skip" -------------

	err = runtime.BindQueryParameter("form", false, false, "$skip", ctx.QueryParams(), &params.Skip)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter $skip: %s", err))
	}

	// ------------- Optional query parameter "$search" -------------

	err = runtime.BindQueryParameter("form", false, false, "$search", ctx.QueryParams(), &params.Search)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter $search: %s", err))
	}

	// ------------- Optional query parameter "$filter" -------------

	err = runtime.BindQueryParameter("form", false, false, "$filter", ctx.QueryParams(), &params.Filter)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter $filter: %s", err))
	}

	// ------------- Optional query parameter "$count" -------------

	err = runtime.BindQueryParameter("form", false, false, "$count", ctx.QueryParams(), &params.Count)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter $count: %s", err))
	}

	// ------------- Optional query parameter "$select" -------------

	err = runtime.BindQueryParameter("form", false, false, "$select", ctx.QueryParams(), &params.Select)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter $select: %s", err))
	}

	// ------------- Optional query parameter "$orderby" -------------

	err = runtime.BindQueryParameter("form", false, false, "$orderby", ctx.QueryParams(), &params.Orderby)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter $orderby: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.UsersUserEventsDelta(ctx, userId, params)
	return err
}

// UsersDeleteEvents converts echo context to params.
func (w *ServerInterfaceWrapper) UsersDeleteEvents(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "user-id" -------------
	var userId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "user-id", runtime.ParamLocationPath, ctx.Param("user-id"), &userId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter user-id: %s", err))
	}

	// ------------- Path parameter "event-id" -------------
	var eventId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "event-id", runtime.ParamLocationPath, ctx.Param("event-id"), &eventId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter event-id: %s", err))
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params UsersDeleteEventsParams

	headers := ctx.Request().Header
	// ------------- Optional header parameter "If-Match" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("If-Match")]; found {
		var IfMatch string
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for If-Match, got %d", n))
		}

		err = runtime.BindStyledParameterWithLocation("simple", false, "If-Match", runtime.ParamLocationHeader, valueList[0], &IfMatch)
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter If-Match: %s", err))
		}

		params.IfMatch = &IfMatch
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.UsersDeleteEvents(ctx, userId, eventId, params)
	return err
}

// UsersGetEvents converts echo context to params.
func (w *ServerInterfaceWrapper) UsersGetEvents(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "user-id" -------------
	var userId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "user-id", runtime.ParamLocationPath, ctx.Param("user-id"), &userId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter user-id: %s", err))
	}

	// ------------- Path parameter "event-id" -------------
	var eventId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "event-id", runtime.ParamLocationPath, ctx.Param("event-id"), &eventId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter event-id: %s", err))
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params UsersGetEventsParams
	// ------------- Optional query parameter "$select" -------------

	err = runtime.BindQueryParameter("form", false, false, "$select", ctx.QueryParams(), &params.Select)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter $select: %s", err))
	}

	// ------------- Optional query parameter "$expand" -------------

	err = runtime.BindQueryParameter("form", false, false, "$expand", ctx.QueryParams(), &params.Expand)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter $expand: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.UsersGetEvents(ctx, userId, eventId, params)
	return err
}

// UsersUpdateEvents converts echo context to params.
func (w *ServerInterfaceWrapper) UsersUpdateEvents(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "user-id" -------------
	var userId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "user-id", runtime.ParamLocationPath, ctx.Param("user-id"), &userId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter user-id: %s", err))
	}

	// ------------- Path parameter "event-id" -------------
	var eventId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "event-id", runtime.ParamLocationPath, ctx.Param("event-id"), &eventId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter event-id: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.UsersUpdateEvents(ctx, userId, eventId)
	return err
}

// UsersEventsListAttachments converts echo context to params.
func (w *ServerInterfaceWrapper) UsersEventsListAttachments(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "user-id" -------------
	var userId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "user-id", runtime.ParamLocationPath, ctx.Param("user-id"), &userId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter user-id: %s", err))
	}

	// ------------- Path parameter "event-id" -------------
	var eventId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "event-id", runtime.ParamLocationPath, ctx.Param("event-id"), &eventId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter event-id: %s", err))
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params UsersEventsListAttachmentsParams
	// ------------- Optional query parameter "$top" -------------

	err = runtime.BindQueryParameter("form", false, false, "$top", ctx.QueryParams(), &params.Top)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter $top: %s", err))
	}

	// ------------- Optional query parameter "$skip" -------------

	err = runtime.BindQueryParameter("form", false, false, "$skip", ctx.QueryParams(), &params.Skip)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter $skip: %s", err))
	}

	// ------------- Optional query parameter "$filter" -------------

	err = runtime.BindQueryParameter("form", false, false, "$filter", ctx.QueryParams(), &params.Filter)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter $filter: %s", err))
	}

	// ------------- Optional query parameter "$count" -------------

	err = runtime.BindQueryParameter("form", false, false, "$count", ctx.QueryParams(), &params.Count)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter $count: %s", err))
	}

	// ------------- Optional query parameter "$orderby" -------------

	err = runtime.BindQueryParameter("form", false, false, "$orderby", ctx.QueryParams(), &params.Orderby)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter $orderby: %s", err))
	}

	// ------------- Optional query parameter "$select" -------------

	err = runtime.BindQueryParameter("form", false, false, "$select", ctx.QueryParams(), &params.Select)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter $select: %s", err))
	}

	// ------------- Optional query parameter "$expand" -------------

	err = runtime.BindQueryParameter("form", false, false, "$expand", ctx.QueryParams(), &params.Expand)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter $expand: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.UsersEventsListAttachments(ctx, userId, eventId, params)
	return err
}

// UsersEventsCreateAttachments converts echo context to params.
func (w *ServerInterfaceWrapper) UsersEventsCreateAttachments(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "user-id" -------------
	var userId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "user-id", runtime.ParamLocationPath, ctx.Param("user-id"), &userId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter user-id: %s", err))
	}

	// ------------- Path parameter "event-id" -------------
	var eventId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "event-id", runtime.ParamLocationPath, ctx.Param("event-id"), &eventId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter event-id: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.UsersEventsCreateAttachments(ctx, userId, eventId)
	return err
}

// UsersEventsAttachmentsGetCount711f converts echo context to params.
func (w *ServerInterfaceWrapper) UsersEventsAttachmentsGetCount711f(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "user-id" -------------
	var userId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "user-id", runtime.ParamLocationPath, ctx.Param("user-id"), &userId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter user-id: %s", err))
	}

	// ------------- Path parameter "event-id" -------------
	var eventId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "event-id", runtime.ParamLocationPath, ctx.Param("event-id"), &eventId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter event-id: %s", err))
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params UsersEventsAttachmentsGetCount711fParams
	// ------------- Optional query parameter "$filter" -------------

	err = runtime.BindQueryParameter("form", false, false, "$filter", ctx.QueryParams(), &params.Filter)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter $filter: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.UsersEventsAttachmentsGetCount711f(ctx, userId, eventId, params)
	return err
}

// UsersUserEventsEventAttachmentsCreateUploadSession converts echo context to params.
func (w *ServerInterfaceWrapper) UsersUserEventsEventAttachmentsCreateUploadSession(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "user-id" -------------
	var userId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "user-id", runtime.ParamLocationPath, ctx.Param("user-id"), &userId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter user-id: %s", err))
	}

	// ------------- Path parameter "event-id" -------------
	var eventId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "event-id", runtime.ParamLocationPath, ctx.Param("event-id"), &eventId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter event-id: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.UsersUserEventsEventAttachmentsCreateUploadSession(ctx, userId, eventId)
	return err
}

// UsersEventsDeleteAttachments converts echo context to params.
func (w *ServerInterfaceWrapper) UsersEventsDeleteAttachments(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "user-id" -------------
	var userId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "user-id", runtime.ParamLocationPath, ctx.Param("user-id"), &userId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter user-id: %s", err))
	}

	// ------------- Path parameter "event-id" -------------
	var eventId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "event-id", runtime.ParamLocationPath, ctx.Param("event-id"), &eventId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter event-id: %s", err))
	}

	// ------------- Path parameter "attachment-id" -------------
	var attachmentId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "attachment-id", runtime.ParamLocationPath, ctx.Param("attachment-id"), &attachmentId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter attachment-id: %s", err))
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params UsersEventsDeleteAttachmentsParams

	headers := ctx.Request().Header
	// ------------- Optional header parameter "If-Match" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("If-Match")]; found {
		var IfMatch string
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for If-Match, got %d", n))
		}

		err = runtime.BindStyledParameterWithLocation("simple", false, "If-Match", runtime.ParamLocationHeader, valueList[0], &IfMatch)
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter If-Match: %s", err))
		}

		params.IfMatch = &IfMatch
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.UsersEventsDeleteAttachments(ctx, userId, eventId, attachmentId, params)
	return err
}

// UsersEventsGetAttachments converts echo context to params.
func (w *ServerInterfaceWrapper) UsersEventsGetAttachments(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "user-id" -------------
	var userId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "user-id", runtime.ParamLocationPath, ctx.Param("user-id"), &userId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter user-id: %s", err))
	}

	// ------------- Path parameter "event-id" -------------
	var eventId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "event-id", runtime.ParamLocationPath, ctx.Param("event-id"), &eventId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter event-id: %s", err))
	}

	// ------------- Path parameter "attachment-id" -------------
	var attachmentId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "attachment-id", runtime.ParamLocationPath, ctx.Param("attachment-id"), &attachmentId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter attachment-id: %s", err))
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params UsersEventsGetAttachmentsParams
	// ------------- Optional query parameter "$select" -------------

	err = runtime.BindQueryParameter("form", false, false, "$select", ctx.QueryParams(), &params.Select)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter $select: %s", err))
	}

	// ------------- Optional query parameter "$expand" -------------

	err = runtime.BindQueryParameter("form", false, false, "$expand", ctx.QueryParams(), &params.Expand)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter $expand: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.UsersEventsGetAttachments(ctx, userId, eventId, attachmentId, params)
	return err
}

// UsersEventsGetCalendar converts echo context to params.
func (w *ServerInterfaceWrapper) UsersEventsGetCalendar(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "user-id" -------------
	var userId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "user-id", runtime.ParamLocationPath, ctx.Param("user-id"), &userId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter user-id: %s", err))
	}

	// ------------- Path parameter "event-id" -------------
	var eventId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "event-id", runtime.ParamLocationPath, ctx.Param("event-id"), &eventId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter event-id: %s", err))
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params UsersEventsGetCalendarParams
	// ------------- Optional query parameter "$select" -------------

	err = runtime.BindQueryParameter("form", false, false, "$select", ctx.QueryParams(), &params.Select)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter $select: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.UsersEventsGetCalendar(ctx, userId, eventId, params)
	return err
}

// UsersEventsListExtensions converts echo context to params.
func (w *ServerInterfaceWrapper) UsersEventsListExtensions(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "user-id" -------------
	var userId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "user-id", runtime.ParamLocationPath, ctx.Param("user-id"), &userId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter user-id: %s", err))
	}

	// ------------- Path parameter "event-id" -------------
	var eventId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "event-id", runtime.ParamLocationPath, ctx.Param("event-id"), &eventId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter event-id: %s", err))
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params UsersEventsListExtensionsParams
	// ------------- Optional query parameter "$top" -------------

	err = runtime.BindQueryParameter("form", false, false, "$top", ctx.QueryParams(), &params.Top)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter $top: %s", err))
	}

	// ------------- Optional query parameter "$skip" -------------

	err = runtime.BindQueryParameter("form", false, false, "$skip", ctx.QueryParams(), &params.Skip)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter $skip: %s", err))
	}

	// ------------- Optional query parameter "$filter" -------------

	err = runtime.BindQueryParameter("form", false, false, "$filter", ctx.QueryParams(), &params.Filter)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter $filter: %s", err))
	}

	// ------------- Optional query parameter "$count" -------------

	err = runtime.BindQueryParameter("form", false, false, "$count", ctx.QueryParams(), &params.Count)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter $count: %s", err))
	}

	// ------------- Optional query parameter "$orderby" -------------

	err = runtime.BindQueryParameter("form", false, false, "$orderby", ctx.QueryParams(), &params.Orderby)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter $orderby: %s", err))
	}

	// ------------- Optional query parameter "$select" -------------

	err = runtime.BindQueryParameter("form", false, false, "$select", ctx.QueryParams(), &params.Select)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter $select: %s", err))
	}

	// ------------- Optional query parameter "$expand" -------------

	err = runtime.BindQueryParameter("form", false, false, "$expand", ctx.QueryParams(), &params.Expand)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter $expand: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.UsersEventsListExtensions(ctx, userId, eventId, params)
	return err
}

// UsersEventsCreateExtensions converts echo context to params.
func (w *ServerInterfaceWrapper) UsersEventsCreateExtensions(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "user-id" -------------
	var userId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "user-id", runtime.ParamLocationPath, ctx.Param("user-id"), &userId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter user-id: %s", err))
	}

	// ------------- Path parameter "event-id" -------------
	var eventId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "event-id", runtime.ParamLocationPath, ctx.Param("event-id"), &eventId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter event-id: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.UsersEventsCreateExtensions(ctx, userId, eventId)
	return err
}

// UsersEventsExtensionsGetCount0041 converts echo context to params.
func (w *ServerInterfaceWrapper) UsersEventsExtensionsGetCount0041(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "user-id" -------------
	var userId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "user-id", runtime.ParamLocationPath, ctx.Param("user-id"), &userId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter user-id: %s", err))
	}

	// ------------- Path parameter "event-id" -------------
	var eventId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "event-id", runtime.ParamLocationPath, ctx.Param("event-id"), &eventId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter event-id: %s", err))
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params UsersEventsExtensionsGetCount0041Params
	// ------------- Optional query parameter "$filter" -------------

	err = runtime.BindQueryParameter("form", false, false, "$filter", ctx.QueryParams(), &params.Filter)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter $filter: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.UsersEventsExtensionsGetCount0041(ctx, userId, eventId, params)
	return err
}

// UsersEventsDeleteExtensions converts echo context to params.
func (w *ServerInterfaceWrapper) UsersEventsDeleteExtensions(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "user-id" -------------
	var userId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "user-id", runtime.ParamLocationPath, ctx.Param("user-id"), &userId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter user-id: %s", err))
	}

	// ------------- Path parameter "event-id" -------------
	var eventId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "event-id", runtime.ParamLocationPath, ctx.Param("event-id"), &eventId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter event-id: %s", err))
	}

	// ------------- Path parameter "extension-id" -------------
	var extensionId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "extension-id", runtime.ParamLocationPath, ctx.Param("extension-id"), &extensionId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter extension-id: %s", err))
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params UsersEventsDeleteExtensionsParams

	headers := ctx.Request().Header
	// ------------- Optional header parameter "If-Match" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("If-Match")]; found {
		var IfMatch string
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for If-Match, got %d", n))
		}

		err = runtime.BindStyledParameterWithLocation("simple", false, "If-Match", runtime.ParamLocationHeader, valueList[0], &IfMatch)
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter If-Match: %s", err))
		}

		params.IfMatch = &IfMatch
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.UsersEventsDeleteExtensions(ctx, userId, eventId, extensionId, params)
	return err
}

// UsersEventsGetExtensions converts echo context to params.
func (w *ServerInterfaceWrapper) UsersEventsGetExtensions(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "user-id" -------------
	var userId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "user-id", runtime.ParamLocationPath, ctx.Param("user-id"), &userId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter user-id: %s", err))
	}

	// ------------- Path parameter "event-id" -------------
	var eventId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "event-id", runtime.ParamLocationPath, ctx.Param("event-id"), &eventId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter event-id: %s", err))
	}

	// ------------- Path parameter "extension-id" -------------
	var extensionId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "extension-id", runtime.ParamLocationPath, ctx.Param("extension-id"), &extensionId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter extension-id: %s", err))
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params UsersEventsGetExtensionsParams
	// ------------- Optional query parameter "$select" -------------

	err = runtime.BindQueryParameter("form", false, false, "$select", ctx.QueryParams(), &params.Select)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter $select: %s", err))
	}

	// ------------- Optional query parameter "$expand" -------------

	err = runtime.BindQueryParameter("form", false, false, "$expand", ctx.QueryParams(), &params.Expand)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter $expand: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.UsersEventsGetExtensions(ctx, userId, eventId, extensionId, params)
	return err
}

// UsersEventsUpdateExtensions converts echo context to params.
func (w *ServerInterfaceWrapper) UsersEventsUpdateExtensions(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "user-id" -------------
	var userId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "user-id", runtime.ParamLocationPath, ctx.Param("user-id"), &userId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter user-id: %s", err))
	}

	// ------------- Path parameter "event-id" -------------
	var eventId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "event-id", runtime.ParamLocationPath, ctx.Param("event-id"), &eventId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter event-id: %s", err))
	}

	// ------------- Path parameter "extension-id" -------------
	var extensionId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "extension-id", runtime.ParamLocationPath, ctx.Param("extension-id"), &extensionId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter extension-id: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.UsersEventsUpdateExtensions(ctx, userId, eventId, extensionId)
	return err
}

// UsersEventsListInstances converts echo context to params.
func (w *ServerInterfaceWrapper) UsersEventsListInstances(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "user-id" -------------
	var userId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "user-id", runtime.ParamLocationPath, ctx.Param("user-id"), &userId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter user-id: %s", err))
	}

	// ------------- Path parameter "event-id" -------------
	var eventId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "event-id", runtime.ParamLocationPath, ctx.Param("event-id"), &eventId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter event-id: %s", err))
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params UsersEventsListInstancesParams
	// ------------- Required query parameter "startDateTime" -------------

	err = runtime.BindQueryParameter("form", true, true, "startDateTime", ctx.QueryParams(), &params.StartDateTime)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter startDateTime: %s", err))
	}

	// ------------- Required query parameter "endDateTime" -------------

	err = runtime.BindQueryParameter("form", true, true, "endDateTime", ctx.QueryParams(), &params.EndDateTime)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter endDateTime: %s", err))
	}

	// ------------- Optional query parameter "$top" -------------

	err = runtime.BindQueryParameter("form", false, false, "$top", ctx.QueryParams(), &params.Top)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter $top: %s", err))
	}

	// ------------- Optional query parameter "$skip" -------------

	err = runtime.BindQueryParameter("form", false, false, "$skip", ctx.QueryParams(), &params.Skip)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter $skip: %s", err))
	}

	// ------------- Optional query parameter "$filter" -------------

	err = runtime.BindQueryParameter("form", false, false, "$filter", ctx.QueryParams(), &params.Filter)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter $filter: %s", err))
	}

	// ------------- Optional query parameter "$count" -------------

	err = runtime.BindQueryParameter("form", false, false, "$count", ctx.QueryParams(), &params.Count)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter $count: %s", err))
	}

	// ------------- Optional query parameter "$orderby" -------------

	err = runtime.BindQueryParameter("form", false, false, "$orderby", ctx.QueryParams(), &params.Orderby)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter $orderby: %s", err))
	}

	// ------------- Optional query parameter "$select" -------------

	err = runtime.BindQueryParameter("form", false, false, "$select", ctx.QueryParams(), &params.Select)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter $select: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.UsersEventsListInstances(ctx, userId, eventId, params)
	return err
}

// UsersEventsInstancesGetCountF922 converts echo context to params.
func (w *ServerInterfaceWrapper) UsersEventsInstancesGetCountF922(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "user-id" -------------
	var userId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "user-id", runtime.ParamLocationPath, ctx.Param("user-id"), &userId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter user-id: %s", err))
	}

	// ------------- Path parameter "event-id" -------------
	var eventId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "event-id", runtime.ParamLocationPath, ctx.Param("event-id"), &eventId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter event-id: %s", err))
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params UsersEventsInstancesGetCountF922Params
	// ------------- Optional query parameter "$filter" -------------

	err = runtime.BindQueryParameter("form", false, false, "$filter", ctx.QueryParams(), &params.Filter)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter $filter: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.UsersEventsInstancesGetCountF922(ctx, userId, eventId, params)
	return err
}

// UsersUserEventsEventInstancesDelta converts echo context to params.
func (w *ServerInterfaceWrapper) UsersUserEventsEventInstancesDelta(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "user-id" -------------
	var userId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "user-id", runtime.ParamLocationPath, ctx.Param("user-id"), &userId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter user-id: %s", err))
	}

	// ------------- Path parameter "event-id" -------------
	var eventId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "event-id", runtime.ParamLocationPath, ctx.Param("event-id"), &eventId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter event-id: %s", err))
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params UsersUserEventsEventInstancesDeltaParams
	// ------------- Required query parameter "startDateTime" -------------

	err = runtime.BindQueryParameter("form", true, true, "startDateTime", ctx.QueryParams(), &params.StartDateTime)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter startDateTime: %s", err))
	}

	// ------------- Required query parameter "endDateTime" -------------

	err = runtime.BindQueryParameter("form", true, true, "endDateTime", ctx.QueryParams(), &params.EndDateTime)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter endDateTime: %s", err))
	}

	// ------------- Optional query parameter "$top" -------------

	err = runtime.BindQueryParameter("form", false, false, "$top", ctx.QueryParams(), &params.Top)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter $top: %s", err))
	}

	// ------------- Optional query parameter "$skip" -------------

	err = runtime.BindQueryParameter("form", false, false, "$skip", ctx.QueryParams(), &params.Skip)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter $skip: %s", err))
	}

	// ------------- Optional query parameter "$search" -------------

	err = runtime.BindQueryParameter("form", false, false, "$search", ctx.QueryParams(), &params.Search)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter $search: %s", err))
	}

	// ------------- Optional query parameter "$filter" -------------

	err = runtime.BindQueryParameter("form", false, false, "$filter", ctx.QueryParams(), &params.Filter)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter $filter: %s", err))
	}

	// ------------- Optional query parameter "$count" -------------

	err = runtime.BindQueryParameter("form", false, false, "$count", ctx.QueryParams(), &params.Count)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter $count: %s", err))
	}

	// ------------- Optional query parameter "$select" -------------

	err = runtime.BindQueryParameter("form", false, false, "$select", ctx.QueryParams(), &params.Select)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter $select: %s", err))
	}

	// ------------- Optional query parameter "$orderby" -------------

	err = runtime.BindQueryParameter("form", false, false, "$orderby", ctx.QueryParams(), &params.Orderby)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter $orderby: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.UsersUserEventsEventInstancesDelta(ctx, userId, eventId, params)
	return err
}

// UsersEventsGetInstances converts echo context to params.
func (w *ServerInterfaceWrapper) UsersEventsGetInstances(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "user-id" -------------
	var userId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "user-id", runtime.ParamLocationPath, ctx.Param("user-id"), &userId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter user-id: %s", err))
	}

	// ------------- Path parameter "event-id" -------------
	var eventId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "event-id", runtime.ParamLocationPath, ctx.Param("event-id"), &eventId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter event-id: %s", err))
	}

	// ------------- Path parameter "event-id1" -------------
	var eventId1 string

	err = runtime.BindStyledParameterWithLocation("simple", false, "event-id1", runtime.ParamLocationPath, ctx.Param("event-id1"), &eventId1)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter event-id1: %s", err))
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params UsersEventsGetInstancesParams
	// ------------- Required query parameter "startDateTime" -------------

	err = runtime.BindQueryParameter("form", true, true, "startDateTime", ctx.QueryParams(), &params.StartDateTime)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter startDateTime: %s", err))
	}

	// ------------- Required query parameter "endDateTime" -------------

	err = runtime.BindQueryParameter("form", true, true, "endDateTime", ctx.QueryParams(), &params.EndDateTime)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter endDateTime: %s", err))
	}

	// ------------- Optional query parameter "$select" -------------

	err = runtime.BindQueryParameter("form", false, false, "$select", ctx.QueryParams(), &params.Select)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter $select: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.UsersEventsGetInstances(ctx, userId, eventId, eventId1, params)
	return err
}

// UsersEventsInstancesListAttachments converts echo context to params.
func (w *ServerInterfaceWrapper) UsersEventsInstancesListAttachments(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "user-id" -------------
	var userId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "user-id", runtime.ParamLocationPath, ctx.Param("user-id"), &userId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter user-id: %s", err))
	}

	// ------------- Path parameter "event-id" -------------
	var eventId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "event-id", runtime.ParamLocationPath, ctx.Param("event-id"), &eventId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter event-id: %s", err))
	}

	// ------------- Path parameter "event-id1" -------------
	var eventId1 string

	err = runtime.BindStyledParameterWithLocation("simple", false, "event-id1", runtime.ParamLocationPath, ctx.Param("event-id1"), &eventId1)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter event-id1: %s", err))
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params UsersEventsInstancesListAttachmentsParams
	// ------------- Optional query parameter "$top" -------------

	err = runtime.BindQueryParameter("form", false, false, "$top", ctx.QueryParams(), &params.Top)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter $top: %s", err))
	}

	// ------------- Optional query parameter "$skip" -------------

	err = runtime.BindQueryParameter("form", false, false, "$skip", ctx.QueryParams(), &params.Skip)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter $skip: %s", err))
	}

	// ------------- Optional query parameter "$filter" -------------

	err = runtime.BindQueryParameter("form", false, false, "$filter", ctx.QueryParams(), &params.Filter)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter $filter: %s", err))
	}

	// ------------- Optional query parameter "$count" -------------

	err = runtime.BindQueryParameter("form", false, false, "$count", ctx.QueryParams(), &params.Count)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter $count: %s", err))
	}

	// ------------- Optional query parameter "$orderby" -------------

	err = runtime.BindQueryParameter("form", false, false, "$orderby", ctx.QueryParams(), &params.Orderby)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter $orderby: %s", err))
	}

	// ------------- Optional query parameter "$select" -------------

	err = runtime.BindQueryParameter("form", false, false, "$select", ctx.QueryParams(), &params.Select)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter $select: %s", err))
	}

	// ------------- Optional query parameter "$expand" -------------

	err = runtime.BindQueryParameter("form", false, false, "$expand", ctx.QueryParams(), &params.Expand)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter $expand: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.UsersEventsInstancesListAttachments(ctx, userId, eventId, eventId1, params)
	return err
}

// UsersEventsInstancesCreateAttachments converts echo context to params.
func (w *ServerInterfaceWrapper) UsersEventsInstancesCreateAttachments(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "user-id" -------------
	var userId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "user-id", runtime.ParamLocationPath, ctx.Param("user-id"), &userId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter user-id: %s", err))
	}

	// ------------- Path parameter "event-id" -------------
	var eventId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "event-id", runtime.ParamLocationPath, ctx.Param("event-id"), &eventId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter event-id: %s", err))
	}

	// ------------- Path parameter "event-id1" -------------
	var eventId1 string

	err = runtime.BindStyledParameterWithLocation("simple", false, "event-id1", runtime.ParamLocationPath, ctx.Param("event-id1"), &eventId1)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter event-id1: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.UsersEventsInstancesCreateAttachments(ctx, userId, eventId, eventId1)
	return err
}

// UsersEventsInstancesAttachmentsGetCount3c02 converts echo context to params.
func (w *ServerInterfaceWrapper) UsersEventsInstancesAttachmentsGetCount3c02(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "user-id" -------------
	var userId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "user-id", runtime.ParamLocationPath, ctx.Param("user-id"), &userId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter user-id: %s", err))
	}

	// ------------- Path parameter "event-id" -------------
	var eventId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "event-id", runtime.ParamLocationPath, ctx.Param("event-id"), &eventId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter event-id: %s", err))
	}

	// ------------- Path parameter "event-id1" -------------
	var eventId1 string

	err = runtime.BindStyledParameterWithLocation("simple", false, "event-id1", runtime.ParamLocationPath, ctx.Param("event-id1"), &eventId1)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter event-id1: %s", err))
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params UsersEventsInstancesAttachmentsGetCount3c02Params
	// ------------- Optional query parameter "$filter" -------------

	err = runtime.BindQueryParameter("form", false, false, "$filter", ctx.QueryParams(), &params.Filter)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter $filter: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.UsersEventsInstancesAttachmentsGetCount3c02(ctx, userId, eventId, eventId1, params)
	return err
}

// UsersUserEventsEventInstancesEventAttachmentsCreateUploadSession converts echo context to params.
func (w *ServerInterfaceWrapper) UsersUserEventsEventInstancesEventAttachmentsCreateUploadSession(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "user-id" -------------
	var userId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "user-id", runtime.ParamLocationPath, ctx.Param("user-id"), &userId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter user-id: %s", err))
	}

	// ------------- Path parameter "event-id" -------------
	var eventId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "event-id", runtime.ParamLocationPath, ctx.Param("event-id"), &eventId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter event-id: %s", err))
	}

	// ------------- Path parameter "event-id1" -------------
	var eventId1 string

	err = runtime.BindStyledParameterWithLocation("simple", false, "event-id1", runtime.ParamLocationPath, ctx.Param("event-id1"), &eventId1)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter event-id1: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.UsersUserEventsEventInstancesEventAttachmentsCreateUploadSession(ctx, userId, eventId, eventId1)
	return err
}

// UsersEventsInstancesDeleteAttachments converts echo context to params.
func (w *ServerInterfaceWrapper) UsersEventsInstancesDeleteAttachments(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "user-id" -------------
	var userId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "user-id", runtime.ParamLocationPath, ctx.Param("user-id"), &userId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter user-id: %s", err))
	}

	// ------------- Path parameter "event-id" -------------
	var eventId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "event-id", runtime.ParamLocationPath, ctx.Param("event-id"), &eventId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter event-id: %s", err))
	}

	// ------------- Path parameter "event-id1" -------------
	var eventId1 string

	err = runtime.BindStyledParameterWithLocation("simple", false, "event-id1", runtime.ParamLocationPath, ctx.Param("event-id1"), &eventId1)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter event-id1: %s", err))
	}

	// ------------- Path parameter "attachment-id" -------------
	var attachmentId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "attachment-id", runtime.ParamLocationPath, ctx.Param("attachment-id"), &attachmentId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter attachment-id: %s", err))
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params UsersEventsInstancesDeleteAttachmentsParams

	headers := ctx.Request().Header
	// ------------- Optional header parameter "If-Match" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("If-Match")]; found {
		var IfMatch string
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for If-Match, got %d", n))
		}

		err = runtime.BindStyledParameterWithLocation("simple", false, "If-Match", runtime.ParamLocationHeader, valueList[0], &IfMatch)
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter If-Match: %s", err))
		}

		params.IfMatch = &IfMatch
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.UsersEventsInstancesDeleteAttachments(ctx, userId, eventId, eventId1, attachmentId, params)
	return err
}

// UsersEventsInstancesGetAttachments converts echo context to params.
func (w *ServerInterfaceWrapper) UsersEventsInstancesGetAttachments(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "user-id" -------------
	var userId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "user-id", runtime.ParamLocationPath, ctx.Param("user-id"), &userId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter user-id: %s", err))
	}

	// ------------- Path parameter "event-id" -------------
	var eventId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "event-id", runtime.ParamLocationPath, ctx.Param("event-id"), &eventId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter event-id: %s", err))
	}

	// ------------- Path parameter "event-id1" -------------
	var eventId1 string

	err = runtime.BindStyledParameterWithLocation("simple", false, "event-id1", runtime.ParamLocationPath, ctx.Param("event-id1"), &eventId1)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter event-id1: %s", err))
	}

	// ------------- Path parameter "attachment-id" -------------
	var attachmentId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "attachment-id", runtime.ParamLocationPath, ctx.Param("attachment-id"), &attachmentId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter attachment-id: %s", err))
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params UsersEventsInstancesGetAttachmentsParams
	// ------------- Optional query parameter "$select" -------------

	err = runtime.BindQueryParameter("form", false, false, "$select", ctx.QueryParams(), &params.Select)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter $select: %s", err))
	}

	// ------------- Optional query parameter "$expand" -------------

	err = runtime.BindQueryParameter("form", false, false, "$expand", ctx.QueryParams(), &params.Expand)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter $expand: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.UsersEventsInstancesGetAttachments(ctx, userId, eventId, eventId1, attachmentId, params)
	return err
}

// UsersEventsInstancesGetCalendar converts echo context to params.
func (w *ServerInterfaceWrapper) UsersEventsInstancesGetCalendar(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "user-id" -------------
	var userId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "user-id", runtime.ParamLocationPath, ctx.Param("user-id"), &userId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter user-id: %s", err))
	}

	// ------------- Path parameter "event-id" -------------
	var eventId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "event-id", runtime.ParamLocationPath, ctx.Param("event-id"), &eventId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter event-id: %s", err))
	}

	// ------------- Path parameter "event-id1" -------------
	var eventId1 string

	err = runtime.BindStyledParameterWithLocation("simple", false, "event-id1", runtime.ParamLocationPath, ctx.Param("event-id1"), &eventId1)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter event-id1: %s", err))
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params UsersEventsInstancesGetCalendarParams
	// ------------- Optional query parameter "$select" -------------

	err = runtime.BindQueryParameter("form", false, false, "$select", ctx.QueryParams(), &params.Select)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter $select: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.UsersEventsInstancesGetCalendar(ctx, userId, eventId, eventId1, params)
	return err
}

// UsersEventsInstancesListExtensions converts echo context to params.
func (w *ServerInterfaceWrapper) UsersEventsInstancesListExtensions(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "user-id" -------------
	var userId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "user-id", runtime.ParamLocationPath, ctx.Param("user-id"), &userId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter user-id: %s", err))
	}

	// ------------- Path parameter "event-id" -------------
	var eventId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "event-id", runtime.ParamLocationPath, ctx.Param("event-id"), &eventId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter event-id: %s", err))
	}

	// ------------- Path parameter "event-id1" -------------
	var eventId1 string

	err = runtime.BindStyledParameterWithLocation("simple", false, "event-id1", runtime.ParamLocationPath, ctx.Param("event-id1"), &eventId1)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter event-id1: %s", err))
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params UsersEventsInstancesListExtensionsParams
	// ------------- Optional query parameter "$top" -------------

	err = runtime.BindQueryParameter("form", false, false, "$top", ctx.QueryParams(), &params.Top)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter $top: %s", err))
	}

	// ------------- Optional query parameter "$skip" -------------

	err = runtime.BindQueryParameter("form", false, false, "$skip", ctx.QueryParams(), &params.Skip)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter $skip: %s", err))
	}

	// ------------- Optional query parameter "$filter" -------------

	err = runtime.BindQueryParameter("form", false, false, "$filter", ctx.QueryParams(), &params.Filter)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter $filter: %s", err))
	}

	// ------------- Optional query parameter "$count" -------------

	err = runtime.BindQueryParameter("form", false, false, "$count", ctx.QueryParams(), &params.Count)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter $count: %s", err))
	}

	// ------------- Optional query parameter "$orderby" -------------

	err = runtime.BindQueryParameter("form", false, false, "$orderby", ctx.QueryParams(), &params.Orderby)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter $orderby: %s", err))
	}

	// ------------- Optional query parameter "$select" -------------

	err = runtime.BindQueryParameter("form", false, false, "$select", ctx.QueryParams(), &params.Select)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter $select: %s", err))
	}

	// ------------- Optional query parameter "$expand" -------------

	err = runtime.BindQueryParameter("form", false, false, "$expand", ctx.QueryParams(), &params.Expand)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter $expand: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.UsersEventsInstancesListExtensions(ctx, userId, eventId, eventId1, params)
	return err
}

// UsersEventsInstancesCreateExtensions converts echo context to params.
func (w *ServerInterfaceWrapper) UsersEventsInstancesCreateExtensions(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "user-id" -------------
	var userId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "user-id", runtime.ParamLocationPath, ctx.Param("user-id"), &userId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter user-id: %s", err))
	}

	// ------------- Path parameter "event-id" -------------
	var eventId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "event-id", runtime.ParamLocationPath, ctx.Param("event-id"), &eventId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter event-id: %s", err))
	}

	// ------------- Path parameter "event-id1" -------------
	var eventId1 string

	err = runtime.BindStyledParameterWithLocation("simple", false, "event-id1", runtime.ParamLocationPath, ctx.Param("event-id1"), &eventId1)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter event-id1: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.UsersEventsInstancesCreateExtensions(ctx, userId, eventId, eventId1)
	return err
}

// UsersEventsInstancesExtensionsGetCount8eed converts echo context to params.
func (w *ServerInterfaceWrapper) UsersEventsInstancesExtensionsGetCount8eed(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "user-id" -------------
	var userId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "user-id", runtime.ParamLocationPath, ctx.Param("user-id"), &userId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter user-id: %s", err))
	}

	// ------------- Path parameter "event-id" -------------
	var eventId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "event-id", runtime.ParamLocationPath, ctx.Param("event-id"), &eventId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter event-id: %s", err))
	}

	// ------------- Path parameter "event-id1" -------------
	var eventId1 string

	err = runtime.BindStyledParameterWithLocation("simple", false, "event-id1", runtime.ParamLocationPath, ctx.Param("event-id1"), &eventId1)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter event-id1: %s", err))
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params UsersEventsInstancesExtensionsGetCount8eedParams
	// ------------- Optional query parameter "$filter" -------------

	err = runtime.BindQueryParameter("form", false, false, "$filter", ctx.QueryParams(), &params.Filter)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter $filter: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.UsersEventsInstancesExtensionsGetCount8eed(ctx, userId, eventId, eventId1, params)
	return err
}

// UsersEventsInstancesDeleteExtensions converts echo context to params.
func (w *ServerInterfaceWrapper) UsersEventsInstancesDeleteExtensions(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "user-id" -------------
	var userId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "user-id", runtime.ParamLocationPath, ctx.Param("user-id"), &userId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter user-id: %s", err))
	}

	// ------------- Path parameter "event-id" -------------
	var eventId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "event-id", runtime.ParamLocationPath, ctx.Param("event-id"), &eventId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter event-id: %s", err))
	}

	// ------------- Path parameter "event-id1" -------------
	var eventId1 string

	err = runtime.BindStyledParameterWithLocation("simple", false, "event-id1", runtime.ParamLocationPath, ctx.Param("event-id1"), &eventId1)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter event-id1: %s", err))
	}

	// ------------- Path parameter "extension-id" -------------
	var extensionId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "extension-id", runtime.ParamLocationPath, ctx.Param("extension-id"), &extensionId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter extension-id: %s", err))
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params UsersEventsInstancesDeleteExtensionsParams

	headers := ctx.Request().Header
	// ------------- Optional header parameter "If-Match" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("If-Match")]; found {
		var IfMatch string
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for If-Match, got %d", n))
		}

		err = runtime.BindStyledParameterWithLocation("simple", false, "If-Match", runtime.ParamLocationHeader, valueList[0], &IfMatch)
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter If-Match: %s", err))
		}

		params.IfMatch = &IfMatch
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.UsersEventsInstancesDeleteExtensions(ctx, userId, eventId, eventId1, extensionId, params)
	return err
}

// UsersEventsInstancesGetExtensions converts echo context to params.
func (w *ServerInterfaceWrapper) UsersEventsInstancesGetExtensions(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "user-id" -------------
	var userId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "user-id", runtime.ParamLocationPath, ctx.Param("user-id"), &userId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter user-id: %s", err))
	}

	// ------------- Path parameter "event-id" -------------
	var eventId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "event-id", runtime.ParamLocationPath, ctx.Param("event-id"), &eventId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter event-id: %s", err))
	}

	// ------------- Path parameter "event-id1" -------------
	var eventId1 string

	err = runtime.BindStyledParameterWithLocation("simple", false, "event-id1", runtime.ParamLocationPath, ctx.Param("event-id1"), &eventId1)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter event-id1: %s", err))
	}

	// ------------- Path parameter "extension-id" -------------
	var extensionId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "extension-id", runtime.ParamLocationPath, ctx.Param("extension-id"), &extensionId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter extension-id: %s", err))
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params UsersEventsInstancesGetExtensionsParams
	// ------------- Optional query parameter "$select" -------------

	err = runtime.BindQueryParameter("form", false, false, "$select", ctx.QueryParams(), &params.Select)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter $select: %s", err))
	}

	// ------------- Optional query parameter "$expand" -------------

	err = runtime.BindQueryParameter("form", false, false, "$expand", ctx.QueryParams(), &params.Expand)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter $expand: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.UsersEventsInstancesGetExtensions(ctx, userId, eventId, eventId1, extensionId, params)
	return err
}

// UsersEventsInstancesUpdateExtensions converts echo context to params.
func (w *ServerInterfaceWrapper) UsersEventsInstancesUpdateExtensions(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "user-id" -------------
	var userId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "user-id", runtime.ParamLocationPath, ctx.Param("user-id"), &userId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter user-id: %s", err))
	}

	// ------------- Path parameter "event-id" -------------
	var eventId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "event-id", runtime.ParamLocationPath, ctx.Param("event-id"), &eventId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter event-id: %s", err))
	}

	// ------------- Path parameter "event-id1" -------------
	var eventId1 string

	err = runtime.BindStyledParameterWithLocation("simple", false, "event-id1", runtime.ParamLocationPath, ctx.Param("event-id1"), &eventId1)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter event-id1: %s", err))
	}

	// ------------- Path parameter "extension-id" -------------
	var extensionId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "extension-id", runtime.ParamLocationPath, ctx.Param("extension-id"), &extensionId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter extension-id: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.UsersEventsInstancesUpdateExtensions(ctx, userId, eventId, eventId1, extensionId)
	return err
}

// UsersUserEventsEventInstancesEventAccept converts echo context to params.
func (w *ServerInterfaceWrapper) UsersUserEventsEventInstancesEventAccept(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "user-id" -------------
	var userId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "user-id", runtime.ParamLocationPath, ctx.Param("user-id"), &userId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter user-id: %s", err))
	}

	// ------------- Path parameter "event-id" -------------
	var eventId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "event-id", runtime.ParamLocationPath, ctx.Param("event-id"), &eventId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter event-id: %s", err))
	}

	// ------------- Path parameter "event-id1" -------------
	var eventId1 string

	err = runtime.BindStyledParameterWithLocation("simple", false, "event-id1", runtime.ParamLocationPath, ctx.Param("event-id1"), &eventId1)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter event-id1: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.UsersUserEventsEventInstancesEventAccept(ctx, userId, eventId, eventId1)
	return err
}

// UsersUserEventsEventInstancesEventCancel converts echo context to params.
func (w *ServerInterfaceWrapper) UsersUserEventsEventInstancesEventCancel(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "user-id" -------------
	var userId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "user-id", runtime.ParamLocationPath, ctx.Param("user-id"), &userId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter user-id: %s", err))
	}

	// ------------- Path parameter "event-id" -------------
	var eventId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "event-id", runtime.ParamLocationPath, ctx.Param("event-id"), &eventId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter event-id: %s", err))
	}

	// ------------- Path parameter "event-id1" -------------
	var eventId1 string

	err = runtime.BindStyledParameterWithLocation("simple", false, "event-id1", runtime.ParamLocationPath, ctx.Param("event-id1"), &eventId1)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter event-id1: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.UsersUserEventsEventInstancesEventCancel(ctx, userId, eventId, eventId1)
	return err
}

// UsersUserEventsEventInstancesEventDecline converts echo context to params.
func (w *ServerInterfaceWrapper) UsersUserEventsEventInstancesEventDecline(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "user-id" -------------
	var userId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "user-id", runtime.ParamLocationPath, ctx.Param("user-id"), &userId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter user-id: %s", err))
	}

	// ------------- Path parameter "event-id" -------------
	var eventId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "event-id", runtime.ParamLocationPath, ctx.Param("event-id"), &eventId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter event-id: %s", err))
	}

	// ------------- Path parameter "event-id1" -------------
	var eventId1 string

	err = runtime.BindStyledParameterWithLocation("simple", false, "event-id1", runtime.ParamLocationPath, ctx.Param("event-id1"), &eventId1)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter event-id1: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.UsersUserEventsEventInstancesEventDecline(ctx, userId, eventId, eventId1)
	return err
}

// UsersUserEventsEventInstancesEventDismissReminder converts echo context to params.
func (w *ServerInterfaceWrapper) UsersUserEventsEventInstancesEventDismissReminder(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "user-id" -------------
	var userId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "user-id", runtime.ParamLocationPath, ctx.Param("user-id"), &userId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter user-id: %s", err))
	}

	// ------------- Path parameter "event-id" -------------
	var eventId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "event-id", runtime.ParamLocationPath, ctx.Param("event-id"), &eventId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter event-id: %s", err))
	}

	// ------------- Path parameter "event-id1" -------------
	var eventId1 string

	err = runtime.BindStyledParameterWithLocation("simple", false, "event-id1", runtime.ParamLocationPath, ctx.Param("event-id1"), &eventId1)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter event-id1: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.UsersUserEventsEventInstancesEventDismissReminder(ctx, userId, eventId, eventId1)
	return err
}

// UsersUserEventsEventInstancesEventForward converts echo context to params.
func (w *ServerInterfaceWrapper) UsersUserEventsEventInstancesEventForward(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "user-id" -------------
	var userId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "user-id", runtime.ParamLocationPath, ctx.Param("user-id"), &userId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter user-id: %s", err))
	}

	// ------------- Path parameter "event-id" -------------
	var eventId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "event-id", runtime.ParamLocationPath, ctx.Param("event-id"), &eventId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter event-id: %s", err))
	}

	// ------------- Path parameter "event-id1" -------------
	var eventId1 string

	err = runtime.BindStyledParameterWithLocation("simple", false, "event-id1", runtime.ParamLocationPath, ctx.Param("event-id1"), &eventId1)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter event-id1: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.UsersUserEventsEventInstancesEventForward(ctx, userId, eventId, eventId1)
	return err
}

// UsersUserEventsEventInstancesEventSnoozeReminder converts echo context to params.
func (w *ServerInterfaceWrapper) UsersUserEventsEventInstancesEventSnoozeReminder(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "user-id" -------------
	var userId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "user-id", runtime.ParamLocationPath, ctx.Param("user-id"), &userId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter user-id: %s", err))
	}

	// ------------- Path parameter "event-id" -------------
	var eventId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "event-id", runtime.ParamLocationPath, ctx.Param("event-id"), &eventId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter event-id: %s", err))
	}

	// ------------- Path parameter "event-id1" -------------
	var eventId1 string

	err = runtime.BindStyledParameterWithLocation("simple", false, "event-id1", runtime.ParamLocationPath, ctx.Param("event-id1"), &eventId1)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter event-id1: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.UsersUserEventsEventInstancesEventSnoozeReminder(ctx, userId, eventId, eventId1)
	return err
}

// UsersUserEventsEventInstancesEventTentativelyAccept converts echo context to params.
func (w *ServerInterfaceWrapper) UsersUserEventsEventInstancesEventTentativelyAccept(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "user-id" -------------
	var userId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "user-id", runtime.ParamLocationPath, ctx.Param("user-id"), &userId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter user-id: %s", err))
	}

	// ------------- Path parameter "event-id" -------------
	var eventId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "event-id", runtime.ParamLocationPath, ctx.Param("event-id"), &eventId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter event-id: %s", err))
	}

	// ------------- Path parameter "event-id1" -------------
	var eventId1 string

	err = runtime.BindStyledParameterWithLocation("simple", false, "event-id1", runtime.ParamLocationPath, ctx.Param("event-id1"), &eventId1)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter event-id1: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.UsersUserEventsEventInstancesEventTentativelyAccept(ctx, userId, eventId, eventId1)
	return err
}

// UsersUserEventsEventAccept converts echo context to params.
func (w *ServerInterfaceWrapper) UsersUserEventsEventAccept(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "user-id" -------------
	var userId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "user-id", runtime.ParamLocationPath, ctx.Param("user-id"), &userId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter user-id: %s", err))
	}

	// ------------- Path parameter "event-id" -------------
	var eventId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "event-id", runtime.ParamLocationPath, ctx.Param("event-id"), &eventId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter event-id: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.UsersUserEventsEventAccept(ctx, userId, eventId)
	return err
}

// UsersUserEventsEventCancel converts echo context to params.
func (w *ServerInterfaceWrapper) UsersUserEventsEventCancel(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "user-id" -------------
	var userId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "user-id", runtime.ParamLocationPath, ctx.Param("user-id"), &userId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter user-id: %s", err))
	}

	// ------------- Path parameter "event-id" -------------
	var eventId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "event-id", runtime.ParamLocationPath, ctx.Param("event-id"), &eventId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter event-id: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.UsersUserEventsEventCancel(ctx, userId, eventId)
	return err
}

// UsersUserEventsEventDecline converts echo context to params.
func (w *ServerInterfaceWrapper) UsersUserEventsEventDecline(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "user-id" -------------
	var userId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "user-id", runtime.ParamLocationPath, ctx.Param("user-id"), &userId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter user-id: %s", err))
	}

	// ------------- Path parameter "event-id" -------------
	var eventId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "event-id", runtime.ParamLocationPath, ctx.Param("event-id"), &eventId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter event-id: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.UsersUserEventsEventDecline(ctx, userId, eventId)
	return err
}

// UsersUserEventsEventDismissReminder converts echo context to params.
func (w *ServerInterfaceWrapper) UsersUserEventsEventDismissReminder(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "user-id" -------------
	var userId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "user-id", runtime.ParamLocationPath, ctx.Param("user-id"), &userId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter user-id: %s", err))
	}

	// ------------- Path parameter "event-id" -------------
	var eventId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "event-id", runtime.ParamLocationPath, ctx.Param("event-id"), &eventId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter event-id: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.UsersUserEventsEventDismissReminder(ctx, userId, eventId)
	return err
}

// UsersUserEventsEventForward converts echo context to params.
func (w *ServerInterfaceWrapper) UsersUserEventsEventForward(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "user-id" -------------
	var userId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "user-id", runtime.ParamLocationPath, ctx.Param("user-id"), &userId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter user-id: %s", err))
	}

	// ------------- Path parameter "event-id" -------------
	var eventId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "event-id", runtime.ParamLocationPath, ctx.Param("event-id"), &eventId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter event-id: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.UsersUserEventsEventForward(ctx, userId, eventId)
	return err
}

// UsersUserEventsEventSnoozeReminder converts echo context to params.
func (w *ServerInterfaceWrapper) UsersUserEventsEventSnoozeReminder(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "user-id" -------------
	var userId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "user-id", runtime.ParamLocationPath, ctx.Param("user-id"), &userId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter user-id: %s", err))
	}

	// ------------- Path parameter "event-id" -------------
	var eventId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "event-id", runtime.ParamLocationPath, ctx.Param("event-id"), &eventId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter event-id: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.UsersUserEventsEventSnoozeReminder(ctx, userId, eventId)
	return err
}

// UsersUserEventsEventTentativelyAccept converts echo context to params.
func (w *ServerInterfaceWrapper) UsersUserEventsEventTentativelyAccept(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "user-id" -------------
	var userId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "user-id", runtime.ParamLocationPath, ctx.Param("user-id"), &userId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter user-id: %s", err))
	}

	// ------------- Path parameter "event-id" -------------
	var eventId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "event-id", runtime.ParamLocationPath, ctx.Param("event-id"), &eventId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter event-id: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.UsersUserEventsEventTentativelyAccept(ctx, userId, eventId)
	return err
}

// UsersListExtensions converts echo context to params.
func (w *ServerInterfaceWrapper) UsersListExtensions(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "user-id" -------------
	var userId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "user-id", runtime.ParamLocationPath, ctx.Param("user-id"), &userId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter user-id: %s", err))
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params UsersListExtensionsParams
	// ------------- Optional query parameter "$top" -------------

	err = runtime.BindQueryParameter("form", false, false, "$top", ctx.QueryParams(), &params.Top)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter $top: %s", err))
	}

	// ------------- Optional query parameter "$skip" -------------

	err = runtime.BindQueryParameter("form", false, false, "$skip", ctx.QueryParams(), &params.Skip)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter $skip: %s", err))
	}

	// ------------- Optional query parameter "$search" -------------

	err = runtime.BindQueryParameter("form", false, false, "$search", ctx.QueryParams(), &params.Search)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter $search: %s", err))
	}

	// ------------- Optional query parameter "$filter" -------------

	err = runtime.BindQueryParameter("form", false, false, "$filter", ctx.QueryParams(), &params.Filter)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter $filter: %s", err))
	}

	// ------------- Optional query parameter "$count" -------------

	err = runtime.BindQueryParameter("form", false, false, "$count", ctx.QueryParams(), &params.Count)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter $count: %s", err))
	}

	// ------------- Optional query parameter "$orderby" -------------

	err = runtime.BindQueryParameter("form", false, false, "$orderby", ctx.QueryParams(), &params.Orderby)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter $orderby: %s", err))
	}

	// ------------- Optional query parameter "$select" -------------

	err = runtime.BindQueryParameter("form", false, false, "$select", ctx.QueryParams(), &params.Select)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter $select: %s", err))
	}

	// ------------- Optional query parameter "$expand" -------------

	err = runtime.BindQueryParameter("form", false, false, "$expand", ctx.QueryParams(), &params.Expand)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter $expand: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.UsersListExtensions(ctx, userId, params)
	return err
}

// UsersCreateExtensions converts echo context to params.
func (w *ServerInterfaceWrapper) UsersCreateExtensions(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "user-id" -------------
	var userId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "user-id", runtime.ParamLocationPath, ctx.Param("user-id"), &userId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter user-id: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.UsersCreateExtensions(ctx, userId)
	return err
}

// UsersExtensionsGetCount4b1c converts echo context to params.
func (w *ServerInterfaceWrapper) UsersExtensionsGetCount4b1c(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "user-id" -------------
	var userId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "user-id", runtime.ParamLocationPath, ctx.Param("user-id"), &userId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter user-id: %s", err))
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params UsersExtensionsGetCount4b1cParams
	// ------------- Optional query parameter "$search" -------------

	err = runtime.BindQueryParameter("form", false, false, "$search", ctx.QueryParams(), &params.Search)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter $search: %s", err))
	}

	// ------------- Optional query parameter "$filter" -------------

	err = runtime.BindQueryParameter("form", false, false, "$filter", ctx.QueryParams(), &params.Filter)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter $filter: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.UsersExtensionsGetCount4b1c(ctx, userId, params)
	return err
}

// UsersDeleteExtensions converts echo context to params.
func (w *ServerInterfaceWrapper) UsersDeleteExtensions(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "user-id" -------------
	var userId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "user-id", runtime.ParamLocationPath, ctx.Param("user-id"), &userId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter user-id: %s", err))
	}

	// ------------- Path parameter "extension-id" -------------
	var extensionId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "extension-id", runtime.ParamLocationPath, ctx.Param("extension-id"), &extensionId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter extension-id: %s", err))
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params UsersDeleteExtensionsParams

	headers := ctx.Request().Header
	// ------------- Optional header parameter "If-Match" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("If-Match")]; found {
		var IfMatch string
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for If-Match, got %d", n))
		}

		err = runtime.BindStyledParameterWithLocation("simple", false, "If-Match", runtime.ParamLocationHeader, valueList[0], &IfMatch)
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter If-Match: %s", err))
		}

		params.IfMatch = &IfMatch
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.UsersDeleteExtensions(ctx, userId, extensionId, params)
	return err
}

// UsersGetExtensions converts echo context to params.
func (w *ServerInterfaceWrapper) UsersGetExtensions(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "user-id" -------------
	var userId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "user-id", runtime.ParamLocationPath, ctx.Param("user-id"), &userId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter user-id: %s", err))
	}

	// ------------- Path parameter "extension-id" -------------
	var extensionId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "extension-id", runtime.ParamLocationPath, ctx.Param("extension-id"), &extensionId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter extension-id: %s", err))
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params UsersGetExtensionsParams
	// ------------- Optional query parameter "$select" -------------

	err = runtime.BindQueryParameter("form", false, false, "$select", ctx.QueryParams(), &params.Select)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter $select: %s", err))
	}

	// ------------- Optional query parameter "$expand" -------------

	err = runtime.BindQueryParameter("form", false, false, "$expand", ctx.QueryParams(), &params.Expand)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter $expand: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.UsersGetExtensions(ctx, userId, extensionId, params)
	return err
}

// UsersUpdateExtensions converts echo context to params.
func (w *ServerInterfaceWrapper) UsersUpdateExtensions(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "user-id" -------------
	var userId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "user-id", runtime.ParamLocationPath, ctx.Param("user-id"), &userId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter user-id: %s", err))
	}

	// ------------- Path parameter "extension-id" -------------
	var extensionId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "extension-id", runtime.ParamLocationPath, ctx.Param("extension-id"), &extensionId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter extension-id: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.UsersUpdateExtensions(ctx, userId, extensionId)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/users", wrapper.UsersUserListUser)
	router.POST(baseURL+"/users", wrapper.UsersUserCreateUser)
	router.DELETE(baseURL+"/users/:user-id", wrapper.UsersUserDeleteUser)
	router.GET(baseURL+"/users/:user-id", wrapper.UsersUserGetUser)
	router.PATCH(baseURL+"/users/:user-id", wrapper.UsersUserUpdateUser)
	router.GET(baseURL+"/users/:user-id/events", wrapper.UsersListEvents)
	router.POST(baseURL+"/users/:user-id/events", wrapper.UsersCreateEvents)
	router.GET(baseURL+"/users/:user-id/events/$count", wrapper.UsersEventsGetCountD443)
	router.GET(baseURL+"/users/:user-id/events/microsoft.graph.delta()", wrapper.UsersUserEventsDelta)
	router.DELETE(baseURL+"/users/:user-id/events/:event-id", wrapper.UsersDeleteEvents)
	router.GET(baseURL+"/users/:user-id/events/:event-id", wrapper.UsersGetEvents)
	router.PATCH(baseURL+"/users/:user-id/events/:event-id", wrapper.UsersUpdateEvents)
	router.GET(baseURL+"/users/:user-id/events/:event-id/attachments", wrapper.UsersEventsListAttachments)
	router.POST(baseURL+"/users/:user-id/events/:event-id/attachments", wrapper.UsersEventsCreateAttachments)
	router.GET(baseURL+"/users/:user-id/events/:event-id/attachments/$count", wrapper.UsersEventsAttachmentsGetCount711f)
	router.POST(baseURL+"/users/:user-id/events/:event-id/attachments/microsoft.graph.createUploadSession", wrapper.UsersUserEventsEventAttachmentsCreateUploadSession)
	router.DELETE(baseURL+"/users/:user-id/events/:event-id/attachments/:attachment-id", wrapper.UsersEventsDeleteAttachments)
	router.GET(baseURL+"/users/:user-id/events/:event-id/attachments/:attachment-id", wrapper.UsersEventsGetAttachments)
	router.GET(baseURL+"/users/:user-id/events/:event-id/calendar", wrapper.UsersEventsGetCalendar)
	router.GET(baseURL+"/users/:user-id/events/:event-id/extensions", wrapper.UsersEventsListExtensions)
	router.POST(baseURL+"/users/:user-id/events/:event-id/extensions", wrapper.UsersEventsCreateExtensions)
	router.GET(baseURL+"/users/:user-id/events/:event-id/extensions/$count", wrapper.UsersEventsExtensionsGetCount0041)
	router.DELETE(baseURL+"/users/:user-id/events/:event-id/extensions/:extension-id", wrapper.UsersEventsDeleteExtensions)
	router.GET(baseURL+"/users/:user-id/events/:event-id/extensions/:extension-id", wrapper.UsersEventsGetExtensions)
	router.PATCH(baseURL+"/users/:user-id/events/:event-id/extensions/:extension-id", wrapper.UsersEventsUpdateExtensions)
	router.GET(baseURL+"/users/:user-id/events/:event-id/instances", wrapper.UsersEventsListInstances)
	router.GET(baseURL+"/users/:user-id/events/:event-id/instances/$count", wrapper.UsersEventsInstancesGetCountF922)
	router.GET(baseURL+"/users/:user-id/events/:event-id/instances/microsoft.graph.delta()", wrapper.UsersUserEventsEventInstancesDelta)
	router.GET(baseURL+"/users/:user-id/events/:event-id/instances/:event-id1", wrapper.UsersEventsGetInstances)
	router.GET(baseURL+"/users/:user-id/events/:event-id/instances/:event-id1/attachments", wrapper.UsersEventsInstancesListAttachments)
	router.POST(baseURL+"/users/:user-id/events/:event-id/instances/:event-id1/attachments", wrapper.UsersEventsInstancesCreateAttachments)
	router.GET(baseURL+"/users/:user-id/events/:event-id/instances/:event-id1/attachments/$count", wrapper.UsersEventsInstancesAttachmentsGetCount3c02)
	router.POST(baseURL+"/users/:user-id/events/:event-id/instances/:event-id1/attachments/microsoft.graph.createUploadSession", wrapper.UsersUserEventsEventInstancesEventAttachmentsCreateUploadSession)
	router.DELETE(baseURL+"/users/:user-id/events/:event-id/instances/:event-id1/attachments/:attachment-id", wrapper.UsersEventsInstancesDeleteAttachments)
	router.GET(baseURL+"/users/:user-id/events/:event-id/instances/:event-id1/attachments/:attachment-id", wrapper.UsersEventsInstancesGetAttachments)
	router.GET(baseURL+"/users/:user-id/events/:event-id/instances/:event-id1/calendar", wrapper.UsersEventsInstancesGetCalendar)
	router.GET(baseURL+"/users/:user-id/events/:event-id/instances/:event-id1/extensions", wrapper.UsersEventsInstancesListExtensions)
	router.POST(baseURL+"/users/:user-id/events/:event-id/instances/:event-id1/extensions", wrapper.UsersEventsInstancesCreateExtensions)
	router.GET(baseURL+"/users/:user-id/events/:event-id/instances/:event-id1/extensions/$count", wrapper.UsersEventsInstancesExtensionsGetCount8eed)
	router.DELETE(baseURL+"/users/:user-id/events/:event-id/instances/:event-id1/extensions/:extension-id", wrapper.UsersEventsInstancesDeleteExtensions)
	router.GET(baseURL+"/users/:user-id/events/:event-id/instances/:event-id1/extensions/:extension-id", wrapper.UsersEventsInstancesGetExtensions)
	router.PATCH(baseURL+"/users/:user-id/events/:event-id/instances/:event-id1/extensions/:extension-id", wrapper.UsersEventsInstancesUpdateExtensions)
	router.POST(baseURL+"/users/:user-id/events/:event-id/instances/:event-id1/microsoft.graph.accept", wrapper.UsersUserEventsEventInstancesEventAccept)
	router.POST(baseURL+"/users/:user-id/events/:event-id/instances/:event-id1/microsoft.graph.cancel", wrapper.UsersUserEventsEventInstancesEventCancel)
	router.POST(baseURL+"/users/:user-id/events/:event-id/instances/:event-id1/microsoft.graph.decline", wrapper.UsersUserEventsEventInstancesEventDecline)
	router.POST(baseURL+"/users/:user-id/events/:event-id/instances/:event-id1/microsoft.graph.dismissReminder", wrapper.UsersUserEventsEventInstancesEventDismissReminder)
	router.POST(baseURL+"/users/:user-id/events/:event-id/instances/:event-id1/microsoft.graph.forward", wrapper.UsersUserEventsEventInstancesEventForward)
	router.POST(baseURL+"/users/:user-id/events/:event-id/instances/:event-id1/microsoft.graph.snoozeReminder", wrapper.UsersUserEventsEventInstancesEventSnoozeReminder)
	router.POST(baseURL+"/users/:user-id/events/:event-id/instances/:event-id1/microsoft.graph.tentativelyAccept", wrapper.UsersUserEventsEventInstancesEventTentativelyAccept)
	router.POST(baseURL+"/users/:user-id/events/:event-id/microsoft.graph.accept", wrapper.UsersUserEventsEventAccept)
	router.POST(baseURL+"/users/:user-id/events/:event-id/microsoft.graph.cancel", wrapper.UsersUserEventsEventCancel)
	router.POST(baseURL+"/users/:user-id/events/:event-id/microsoft.graph.decline", wrapper.UsersUserEventsEventDecline)
	router.POST(baseURL+"/users/:user-id/events/:event-id/microsoft.graph.dismissReminder", wrapper.UsersUserEventsEventDismissReminder)
	router.POST(baseURL+"/users/:user-id/events/:event-id/microsoft.graph.forward", wrapper.UsersUserEventsEventForward)
	router.POST(baseURL+"/users/:user-id/events/:event-id/microsoft.graph.snoozeReminder", wrapper.UsersUserEventsEventSnoozeReminder)
	router.POST(baseURL+"/users/:user-id/events/:event-id/microsoft.graph.tentativelyAccept", wrapper.UsersUserEventsEventTentativelyAccept)
	router.GET(baseURL+"/users/:user-id/extensions", wrapper.UsersListExtensions)
	router.POST(baseURL+"/users/:user-id/extensions", wrapper.UsersCreateExtensions)
	router.GET(baseURL+"/users/:user-id/extensions/$count", wrapper.UsersExtensionsGetCount4b1c)
	router.DELETE(baseURL+"/users/:user-id/extensions/:extension-id", wrapper.UsersDeleteExtensions)
	router.GET(baseURL+"/users/:user-id/extensions/:extension-id", wrapper.UsersGetExtensions)
	router.PATCH(baseURL+"/users/:user-id/extensions/:extension-id", wrapper.UsersUpdateExtensions)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"8ShtcLVeCwA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
